<?xml version='1.0' encoding='utf-8'?>
<slack>
  <team_domain>elmlang</team_domain>
  <channel_name>general</channel_name>
  <start_date>2014-11-07T12:02:12.695655</start_date>
  <end_date>2017-08-03T12:02:12.695655</end_date>
  <message>
    <ts>2017-06-18T03:08:52.326071</ts>
    <user>U0L27J3N0</user>
    <text>huntforacause: `ents` is shorter</text>
  </message>
  <message>
    <ts>2017-06-18T03:35:36.380849</ts>
    <user>U0J8D9M2P</user>
    <text>Are there elm-europe videos available already?</text>
  </message>
  <message>
    <ts>2017-06-18T03:59:07.427376</ts>
    <user>U21NY95C6</user>
    <text>I'm looking for a UI savvy elm dev to do a prototype for a tool idea I have. It's somewhat a blend of mindmap and chat:wink: Pretty visual as you can imagine and I myself dont yet feel ready to tackle such an application in elm:face_with_rolling_eyes:

If you are interested, pls dm me.</text>
  </message>
  <message>
    <ts>2017-06-18T03:59:09.427442</ts>
    <user>U5W7KT69L</user>
    <text>ents wowowow</text>
  </message>
  <message>
    <ts>2017-06-18T04:00:34.431655</ts>
    <user>U5W7KT69L</user>
    <text>Do you have a timeline for this prototype?</text>
  </message>
  <message>
    <ts>2017-06-18T05:20:16.603240</ts>
    <user>U21NY95C6</user>
    <text>&lt;@U5W7KT69L&gt; It's not urgent, but I"d like to start soon. Small steps are ok.</text>
  </message>
  <message>
    <ts>2017-06-18T05:30:50.625249</ts>
    <user>U21NY95C6</user>
    <text>&lt;@U5W7KT69L&gt; If you dm me I can tell you details including my budget:grinning:</text>
  </message>
  <message>
    <ts>2017-06-18T05:34:35.633222</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U21NY95C6&gt; might want to post that in &lt;#C0LUAGWRK|jobs&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-18T06:41:55.781929</ts>
    <user>U3LUC6SNS</user>
    <text>I'd be interested in comments on this somewhat old article: &lt;http://reasonablypolymorphic.com/blog/elm-is-wrong&gt;</text>
  </message>
  <message>
    <ts>2017-06-18T06:46:26.791579</ts>
    <user>U1CE9DL9H</user>
    <text>if you think elm should be "haskell in the browser", those are totally valid points. if you think it should be the "the best experience for building interactive webapps", then maybe those features aren't as necessary as you think.</text>
  </message>
  <message>
    <ts>2017-06-18T06:47:56.794701</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U1CE9DL9H&gt; Sounds reasonable to me. Is performance also an issue?</text>
  </message>
  <message>
    <ts>2017-06-18T06:48:41.796309</ts>
    <user>U1CE9DL9H</user>
    <text>the frontend comes with some interesting performance characteristics: DOM manipulation is almost always the bottleneck.</text>
  </message>
  <message>
    <ts>2017-06-18T06:48:49.796557</ts>
    <user>U3LUC6SNS</user>
    <text>I should say that my own experience with Elm (about 2 months in) is: it is fantastic.</text>
  </message>
  <message>
    <ts>2017-06-18T06:49:13.797448</ts>
    <user>U1CE9DL9H</user>
    <text>it's great for the problem that it tries to solve.</text>
  </message>
  <message>
    <ts>2017-06-18T07:01:30.826177</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U3LUC6SNS&gt; that post has been discussed a lot. It sparked a rather large discussion on reddit ( &lt;https://www.reddit.com/r/programming/comments/5bsanc/elm_is_wrong_reasonably_polymorphic/&gt; ), got blogged about ( &lt;https://www.gizra.com/content/elm-business-perspective/&gt; ), was mentioned and discussed in podcasts (&lt;https://www.magicreadalong.com/episode/41&gt; and &lt;https://www.magicreadalong.com/episode/43&gt;) and so on and so forth. Basically, it's what folkert says - from the perspective of "Elm should be haskell" it's valid criticism. From the perspective of "Elm isn't viable without the features I wish it had", it's not nearly nuanced enough, at best.</text>
  </message>
  <message>
    <ts>2017-06-18T07:03:57.832202</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U3SJEDR96&gt;, Thanks! I'm interested in hearing all sides, even though I am pretty much convinced, have had an excellent experience so far ... and have committed the future of my current app to it :grinning:</text>
  </message>
  <message>
    <ts>2017-06-18T07:52:13.942958</ts>
    <user>U2D7NUGS1</user>
    <text>Hello! I'm very glad to be hear again after few months of absence and happy to see how much the community have grown.</text>
  </message>
  <message>
    <ts>2017-06-18T07:58:01.956446</ts>
    <user>U5T739RFW</user>
    <text>&lt;@U5T739RFW|amitu&gt; set the channel topic: Always be nice, invite people at &lt;http://elmlang.herokuapp.com/&gt; Code of conduct at &lt;https://github.com/elm-community/discussions/blob/master/code-of-conduct.md&gt;</text>
  </message>
  <message>
    <ts>2017-06-18T07:59:44.960257</ts>
    <user>U2D7NUGS1</user>
    <text>In case anybody would like to help me with &lt;#C12KMAYJX|elm-mdl&gt; a little, I've asked a question there :sunglasses:</text>
  </message>
  <message>
    <ts>2017-06-18T08:30:07.035099</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U3SJEDR96&gt;, re those podcasts ... hilarious ... reminds me of graduate school. Who are those fellows, anyway?</text>
  </message>
  <message>
    <ts>2017-06-18T08:30:25.036044</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3LUC6SNS&gt; best discussed in &lt;#C0CJ671HU|random&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-18T08:30:35.036579</ts>
    <user>U3LUC6SNS</user>
    <text>OK!</text>
  </message>
  <message>
    <ts>2017-06-18T08:54:08.095910</ts>
    <user>U1FPL28G0</user>
    <text>Hi, I'd like to discuss about `Html.Events.on` behavior when decoder fails, and perhaps adding some explanation to the docs. Should I go to &lt;#C0Y4Z2G4F|core&gt; or another channel?</text>
  </message>
  <message>
    <ts>2017-06-18T08:58:19.106851</ts>
    <user>U0EUHKVGB</user>
    <text>here is fine</text>
  </message>
  <message>
    <ts>2017-06-18T08:58:45.108003</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U1FPL28G0&gt; when the decoder fails, nothing is triggered.</text>
  </message>
  <message>
    <ts>2017-06-18T09:00:46.114957</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/elm-lang/virtual-dom/blob/master/src/Native/VirtualDom.js#L444&gt;</text>
  </message>
  <message>
    <ts>2017-06-18T09:00:49.115111</ts>
    <user>U0EUHKVGB</user>
    <text>see here</text>
  </message>
  <message>
    <ts>2017-06-18T09:01:33.117395</ts>
    <user>U3SJEDR96</user>
    <text>Which means, somewhat "awkwardly", you need a `NoOp` to `preventDefault` _and_ do nothing. Doesn't come up too often, tho..</text>
  </message>
  <message>
    <ts>2017-06-18T09:21:25.171474</ts>
    <user>U0GR6DHEK</user>
    <text>this is also a feature though as it creates the possibility of conditional eventhandlers</text>
  </message>
  <message>
    <ts>2017-06-18T10:46:02.405889</ts>
    <user>U1FPL28G0</user>
    <text>eeue56: Yes, I spotted the `VirtualDom.js` file, also an [elm-discuss topic](&lt;https://groups.google.com/forum/#!topic/elm-discuss/YROzE689bIo&gt;) about it</text>
  </message>
  <message>
    <ts>2017-06-18T10:48:57.413875</ts>
    <user>U1FPL28G0</user>
    <text>I wondered if it should be a good idea to explicit that in the [doc of Html.Events.on](&lt;http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Events#on&gt;)

Something like "If successful, the value is routed to your update function. In case of failure, the update function won't be triggered and nothing will be logged to the console."</text>
  </message>
  <message>
    <ts>2017-06-18T10:51:44.422689</ts>
    <user>U1FPL28G0</user>
    <text>Because I had a sneaky error, with a `&amp;lt;select&amp;gt;` element using a custom decoder, which was tricky to find. I added a `Debug.log` manually (&lt;https://github.com/open-chords-charts/chart-editor/blob/16ce017d94df9b170fd5a4df810e35cb5955cd66/src/Page/ChartCard.elm#L1243-L1245&gt;)</text>
  </message>
  <message>
    <ts>2017-06-18T14:43:50.140190</ts>
    <user>U0MB2N8LR</user>
    <text>is there a currently most popular thing or stack of things for making talking to json apis and encoding/decoding slightly more convenient?</text>
  </message>
  <message>
    <ts>2017-06-18T14:45:22.145465</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U0MB2N8LR&gt; what exactly is inconvenient for you?</text>
  </message>
  <message>
    <ts>2017-06-18T14:48:19.154244</ts>
    <user>U0MB2N8LR</user>
    <text>Well, it's been a while, but for example, when I'm first writing decoders and doing a bad job, something goes wrong, and there's no way to tell what it was. Maybe I just want to look at an example app with more going on than the &lt;http://elm-lang.org|elm-lang.org&gt; examples</text>
  </message>
  <message>
    <ts>2017-06-18T14:50:05.159914</ts>
    <user>U1CE9DL9H</user>
    <text>for the boring stuff there is &lt;http://eeue56.github.io/json-to-elm/&gt; - it automatically generates decoders as well as it can</text>
  </message>
  <message>
    <ts>2017-06-18T14:50:15.160541</ts>
    <user>U1CE9DL9H</user>
    <text>if you have tricky json/specific problems, just ask here</text>
  </message>
  <message>
    <ts>2017-06-18T14:50:29.161487</ts>
    <user>U0MB2N8LR</user>
    <text>oh nice</text>
  </message>
  <message>
    <ts>2017-06-18T14:51:16.163832</ts>
    <user>U1CE9DL9H</user>
    <text>I can also recommend to use the pipeline package/option &lt;http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-18T15:02:12.198562</ts>
    <user>U0MB2N8LR</user>
    <text>I wish I could look at the NoRedInk repo :wink:. What big open source apps are out there?</text>
  </message>
  <message>
    <ts>2017-06-18T15:02:43.200509</ts>
    <user>U1CE9DL9H</user>
    <text>this one &lt;https://github.com/rtfeldman/elm-spa-example&gt;</text>
  </message>
  <message>
    <ts>2017-06-18T15:03:48.203787</ts>
    <user>U1CE9DL9H</user>
    <text>is had a bunch of decoders, for instance &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Data/Article.elm#L68&gt;</text>
  </message>
  <message>
    <ts>2017-06-18T15:04:41.206848</ts>
    <user>U0MB2N8LR</user>
    <text>oh nice. that'll get me going.</text>
  </message>
  <message>
    <ts>2017-06-19T00:06:14.363900</ts>
    <user>U0CL92DJN</user>
    <text>Is it possible to embed an Elm app _inside_ a react app?</text>
  </message>
  <message>
    <ts>2017-06-19T00:07:36.371624</ts>
    <user>U0CL92DJN</user>
    <text>I found this (&lt;https://stackoverflow.com/a/41369057&gt;) but apparently that doesn’t work according to the comment. I’m also wondering if there’s a cleaner way via web components? “Don’t do that” is not an answer to this question :slightly_smiling_face:. We have our reasons.</text>
  </message>
  <message>
    <ts>2017-06-19T00:09:20.381532</ts>
    <user>U0CL92DJN</user>
    <text>I get that in general it’s a bad idea.</text>
  </message>
  <message>
    <ts>2017-06-19T00:10:59.391278</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U0CL92DJN&gt; you want &lt;https://github.com/evancz/react-elm-components&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T00:12:08.398236</ts>
    <user>U0CL92DJN</user>
    <text>:thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-19T00:13:20.405308</ts>
    <user>U0CL92DJN</user>
    <text>I got mixed up - it’s the other way around that’s problematic.</text>
  </message>
  <message>
    <ts>2017-06-19T00:13:46.407739</ts>
    <user>U0CL92DJN</user>
    <text>The link I put in is for the reverse - just ignore that everyone.</text>
  </message>
  <message>
    <ts>2017-06-19T00:14:14.410419</ts>
    <user>U0CL92DJN</user>
    <text>If you want to use a React component inside an Elm app.</text>
  </message>
  <message>
    <ts>2017-06-19T00:16:38.424031</ts>
    <user>U153UK3FA</user>
    <text>yeah, if you’re ever doing that, web components are definitely the easiest way to put React apps inside Elm apps.</text>
  </message>
  <message>
    <ts>2017-06-19T00:17:17.427898</ts>
    <user>U0CL92DJN</user>
    <text>Have you tried.. is it easy? Any caveats? We’re also interested in that, but no immediate requirement for it (we have React teams and an Elm team)</text>
  </message>
  <message>
    <ts>2017-06-19T00:21:04.448657</ts>
    <user>U153UK3FA</user>
    <text>have you seen &lt;https://www.youtube.com/watch?v=ar3TakwE8o0&gt; ?</text>
  </message>
  <message>
    <ts>2017-06-19T00:23:29.461880</ts>
    <user>U0CL92DJN</user>
    <text>Cool. I'll check it out. Thanks.</text>
  </message>
  <message>
    <ts>2017-06-19T00:26:51.480718</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U0CL92DJN&gt; btw thanks for &lt;https://mbylstra.github.io/html-to-elm/&gt; - it really helped me get &lt;https://github.com/rtfeldman/elm-spa-example&gt; off the ground!</text>
  </message>
  <message>
    <ts>2017-06-19T00:29:01.492127</ts>
    <user>U0CL92DJN</user>
    <text>Ah no problem! When I started with Elm I found that the html syntax was one of the most challenging things for me (coming from React JSX and 15+ years of HTML), so that’s why I wrote it.</text>
  </message>
  <message>
    <ts>2017-06-19T00:38:01.541416</ts>
    <user>U0CL92DJN</user>
    <text>I just had a quick scan of the “Elm and Web Components” video. Cool stuff. &lt;@U0CL0AS3V&gt;: I’m curious if you’ve used that in production? Have you heard of anyone using it in prod? We might have to seriously consider it at some point.</text>
  </message>
  <message>
    <ts>2017-06-19T00:38:45.545451</ts>
    <user>U0CL92DJN</user>
    <text>Do you think there would be any additional problems with embedding a React component inside a web component inside an Elm app?</text>
  </message>
  <message>
    <ts>2017-06-19T00:46:55.589159</ts>
    <user>U0CL0AS3V</user>
    <text>I have not used it in prod, but I've heard of people doing it</text>
  </message>
  <message>
    <ts>2017-06-19T00:47:01.589613</ts>
    <user>U0CL0AS3V</user>
    <text>there's a &lt;#C13J25YQK|webcomponents&gt; channel</text>
  </message>
  <message>
    <ts>2017-06-19T00:47:11.590563</ts>
    <user>U0CL0AS3V</user>
    <text>the polyfills for older browsers are pretty rough</text>
  </message>
  <message>
    <ts>2017-06-19T00:55:53.637780</ts>
    <user>U0CL92DJN</user>
    <text>After having a quick look at our React components to see how viable this might be, the thing that jumped out at me was that any React component that does anything with `props.children` or took a dom element as a prop could be a problem. Lets say you had a Google-Maps-like React component that took a custom pin/marker as a prop - I don’t think you’d be able to pass in an Elm Html msg as a prop (or at least you’d have to do some serious voodoo to get that to work).</text>
  </message>
  <message>
    <ts>2017-06-19T00:56:21.640210</ts>
    <user>U0CL92DJN</user>
    <text>I still think it’s a viable idea - I’m just wondering what’s possible or not.</text>
  </message>
  <message>
    <ts>2017-06-19T03:23:05.742308</ts>
    <user>U1CF0N0MD</user>
    <text>&lt;@U0CL92DJN&gt; for raw HTML you could write a tiny native module that implements a custom node (I've also seen people suggesting to use a Markdown library to abuse the native extension there)</text>
  </message>
  <message>
    <ts>2017-06-19T03:23:33.747587</ts>
    <user>U1CF0N0MD</user>
    <text>But that's two layers of unsupported: Native + custom nodes ;-)</text>
  </message>
  <message>
    <ts>2017-06-19T04:01:53.214907</ts>
    <user>U17MHJ12N</user>
    <text>So I wrote up some questions around ownership of data in a blog post here &lt;https://medium.com/@julianjelfs_61852/the-importance-of-state-ownership-in-elm-72f711ceb244&gt; 
But really it's a cry for help! Don't feel like I have a satisfactory answer yet - If anyone has any thoughts I'd love to hear them...</text>
  </message>
  <message>
    <ts>2017-06-19T04:08:04.298285</ts>
    <user>U0CL92DJN</user>
    <text>Did you look at elm-taco? It is somewhat of a solution to the compromise of "having to pass the data all the way down". It's kind of a convention for doing that.</text>
  </message>
  <message>
    <ts>2017-06-19T04:08:56.309956</ts>
    <user>U0U6ML22H</user>
    <text>it really is just "creating a big common/shared state alongside each other piece of state"</text>
  </message>
  <message>
    <ts>2017-06-19T04:09:17.314484</ts>
    <user>U0U6ML22H</user>
    <text>which I find to be both great and unsatisfactory :smiley:</text>
  </message>
  <message>
    <ts>2017-06-19T04:09:52.322363</ts>
    <user>U0CLDU8UB</user>
    <text>why is it unsatisfactory?</text>
  </message>
  <message>
    <ts>2017-06-19T04:10:29.331203</ts>
    <user>U0CLDU8UB</user>
    <text>because it's a "boring" solution? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T04:10:35.332615</ts>
    <user>U0CL92DJN</user>
    <text>I find it totally satisfactory.</text>
  </message>
  <message>
    <ts>2017-06-19T04:11:04.339153</ts>
    <user>U0U6ML22H</user>
    <text>because why not put everything in there, then?</text>
  </message>
  <message>
    <ts>2017-06-19T04:11:54.350028</ts>
    <user>U0U6ML22H</user>
    <text>I don't mind boring, at all</text>
  </message>
  <message>
    <ts>2017-06-19T04:12:08.353188</ts>
    <user>U0CL92DJN</user>
    <text>Good question really - why _not_ put everything there?</text>
  </message>
  <message>
    <ts>2017-06-19T04:12:35.359249</ts>
    <user>U17MHJ12N</user>
    <text>I think the answer would be that you throw away encapsulation which I think is a valuable thing.</text>
  </message>
  <message>
    <ts>2017-06-19T04:13:34.372539</ts>
    <user>U0CLDU8UB</user>
    <text>A practical example: our application had more than ten forms. Having the state of all of those fields in the one non-nested record would have been rather... interesting.</text>
  </message>
  <message>
    <ts>2017-06-19T04:14:09.380251</ts>
    <user>U17MHJ12N</user>
    <text>So are we suggesting that all update and view signatures replace `Model -&amp;gt;` with `CommonStuff -&amp;gt; Model -&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-06-19T04:14:30.384914</ts>
    <user>U0CLDU8UB</user>
    <text>You probably don't need it for updates.</text>
  </message>
  <message>
    <ts>2017-06-19T04:14:32.385208</ts>
    <user>U0L27J3N0</user>
    <text>rtfeldman: mbylstra's project is awesome but why not use the `Html to Elm` pluggins for the editors. The SublimeText one is amazingly useful.</text>
  </message>
  <message>
    <ts>2017-06-19T04:14:37.386579</ts>
    <user>U0CLDU8UB</user>
    <text>Only for views</text>
  </message>
  <message>
    <ts>2017-06-19T04:14:56.390950</ts>
    <user>U17MHJ12N</user>
    <text>I have found that sometimes I _do_ need it for updates (though less often)</text>
  </message>
  <message>
    <ts>2017-06-19T04:14:57.391012</ts>
    <user>U1CE9DL9H</user>
    <text>updates can need extra config too. Passing it explicitly is the only way to maintain one source of truth</text>
  </message>
  <message>
    <ts>2017-06-19T04:15:29.398644</ts>
    <user>U0CLDU8UB</user>
    <text>Put the necessary part of the common stuff in the `Msg`, and you don't.</text>
  </message>
  <message>
    <ts>2017-06-19T04:15:50.403581</ts>
    <user>U0U6ML22H</user>
    <text>ohanhi: but then, you have out-of-sync issues</text>
  </message>
  <message>
    <ts>2017-06-19T04:15:58.405333</ts>
    <user>U0CLDU8UB</user>
    <text>E.g. `onSubmit (UpdateUser taco.userId)`</text>
  </message>
  <message>
    <ts>2017-06-19T04:15:59.405517</ts>
    <user>U17MHJ12N</user>
    <text>If you are using a component, you don't always have that much control over the Msg</text>
  </message>
  <message>
    <ts>2017-06-19T04:16:18.409978</ts>
    <user>U17MHJ12N</user>
    <text>that's the one problem scenario where I needed this stuff in the update as well</text>
  </message>
  <message>
    <ts>2017-06-19T04:17:03.420319</ts>
    <user>U0CLDU8UB</user>
    <text>fair enough</text>
  </message>
  <message>
    <ts>2017-06-19T04:17:20.424560</ts>
    <user>U0U6ML22H</user>
    <text>often, the solution I've seen to this is that, instead of using the same kind of escape hatch that Redux allows with `connect`, people use the `URL bar` escape hatch :smiley:</text>
  </message>
  <message>
    <ts>2017-06-19T04:18:07.435303</ts>
    <user>U17MHJ12N</user>
    <text>Generally I just wanted to call this out, because it is very tempting and very easy to end up in the two sources of truth trap and then weirdness ensues.</text>
  </message>
  <message>
    <ts>2017-06-19T04:19:03.448182</ts>
    <user>U17MHJ12N</user>
    <text>Seems it just has to be that way and I still find it vaguely unsatisfactory but I don't quite know why.</text>
  </message>
  <message>
    <ts>2017-06-19T04:20:44.471476</ts>
    <user>U0CLDU8UB</user>
    <text>In fact, we started with a "Context" that was passed to pages on `init`, and usually saved in the page `Model`. That became a huge mess, hence elm-taco.</text>
  </message>
  <message>
    <ts>2017-06-19T04:21:04.476310</ts>
    <user>U0U6ML22H</user>
    <text>that's what I meant earlier: it's a great formalism, that's really helpful, but I still feel there has to be a better way to handle interdependency and such</text>
  </message>
  <message>
    <ts>2017-06-19T04:22:07.490789</ts>
    <user>U17MHJ12N</user>
    <text>OK sounds like I should check out elm-taco - thanks</text>
  </message>
  <message>
    <ts>2017-06-19T04:22:15.492729</ts>
    <user>U0CL92DJN</user>
    <text>I agree this is better handled in an editor plugin. I think an online version is handy for beginners (who havent got to the point of setting up editor plugins). The html parser and elm formatter that i wrote may or may not be better than the atom or sublime ones - i havent compared. It'd be good if they all used the same parser. Mine is a bit of a hack - my first ever elm project. I wrote a parser combinator completely from scratch in order to learn Elm. I think it's pretty solid though because Elm.</text>
  </message>
  <message>
    <ts>2017-06-19T04:24:53.529800</ts>
    <user>U0CL92DJN</user>
    <text>I didnt even know that i was writing a "parser combinator" but it turns out i did. It's just the most natural way you'd write a parser in a language like elm.</text>
  </message>
  <message>
    <ts>2017-06-19T04:25:12.534443</ts>
    <user>U0L27J3N0</user>
    <text>&lt;@U17MHJ12N&gt; have you see `elm-spa-example`?</text>
  </message>
  <message>
    <ts>2017-06-19T04:25:30.538801</ts>
    <user>U0L27J3N0</user>
    <text>it is another way to solve the issue you mention.</text>
  </message>
  <message>
    <ts>2017-06-19T04:26:00.546210</ts>
    <user>U0L27J3N0</user>
    <text>the basic pattern is to have a context (`session`) that is sent to all child updates and views.</text>
  </message>
  <message>
    <ts>2017-06-19T04:26:22.551816</ts>
    <user>U0CLDU8UB</user>
    <text>It really is the same as taco</text>
  </message>
  <message>
    <ts>2017-06-19T04:27:21.566569</ts>
    <user>U17MHJ12N</user>
    <text>yep, just seems to boil down to passing around an extra thing.</text>
  </message>
  <message>
    <ts>2017-06-19T04:47:27.858974</ts>
    <user>U0EUHKVGB</user>
    <text>Eh, that’s becuase `alt` is not for mouseover</text>
  </message>
  <message>
    <ts>2017-06-19T04:47:42.862595</ts>
    <user>U0EUHKVGB</user>
    <text>`alt` is for when `src` fails to load, or the user is using a screen-reader.</text>
  </message>
  <message>
    <ts>2017-06-19T04:48:01.867099</ts>
    <user>U0EUHKVGB</user>
    <text>Use `title` for tooltips.</text>
  </message>
  <message>
    <ts>2017-06-19T04:49:30.889307</ts>
    <user>U2JFD9ALE</user>
    <text>Roger that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T04:51:02.913204</ts>
    <user>U2JFD9ALE</user>
    <text>Hmmm, spooky, doesn't work either (and ALT shows up on HTML) ... I'm using :firefox: ...</text>
  </message>
  <message>
    <ts>2017-06-19T04:51:49.925321</ts>
    <user>U0U6ML22H</user>
    <text>what doesn't?</text>
  </message>
  <message>
    <ts>2017-06-19T04:54:26.964305</ts>
    <user>U2JFD9ALE</user>
    <text>tooltips on images as &lt;@U0EUHKVGB&gt; described ... I mean normally if I want text on mouse over, I would with HTML just add the `alt` tag with a text.</text>
  </message>
  <message>
    <ts>2017-06-19T04:54:59.972708</ts>
    <user>U2JFD9ALE</user>
    <text>My problem is that the `alt` tag appears on the underlaying HTML but it doesn't work :neutral_face:</text>
  </message>
  <message>
    <ts>2017-06-19T04:55:27.980333</ts>
    <user>U2JFD9ALE</user>
    <text>:chrome: has the same problem ...</text>
  </message>
  <message>
    <ts>2017-06-19T04:56:16.992923</ts>
    <user>U0U6ML22H</user>
    <text>well, he just told you that you're thinking of the `title` attribute</text>
  </message>
  <message>
    <ts>2017-06-19T04:56:47.001023</ts>
    <user>U0U6ML22H</user>
    <text>`alt` is an attribute for `img` that is used to display text, instead of a "broken image" icon, when the browser fails to load the image</text>
  </message>
  <message>
    <ts>2017-06-19T04:56:58.003739</ts>
    <user>U0U6ML22H</user>
    <text>it is also used to describe the image when using a screen reader</text>
  </message>
  <message>
    <ts>2017-06-19T04:58:35.028654</ts>
    <user>U0U6ML22H</user>
    <text>unless I've misunderstood your problem?</text>
  </message>
  <message>
    <ts>2017-06-19T05:05:18.132364</ts>
    <user>U2JFD9ALE</user>
    <text>I used `title` and that doesn't work either :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-19T05:08:23.177372</ts>
    <user>U0U6ML22H</user>
    <text>&lt;https://ellie-app.com/3wBNz5ghtWNa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T05:08:35.180276</ts>
    <user>U0U6ML22H</user>
    <text>this minimal example seems to behave correctly</text>
  </message>
  <message>
    <ts>2017-06-19T05:08:45.182757</ts>
    <user>U0U6ML22H</user>
    <text>how does it work in your browsers?</text>
  </message>
  <message>
    <ts>2017-06-19T05:13:48.256944</ts>
    <user>U1P6FFJ64</user>
    <text>Working fine on my FF</text>
  </message>
  <message>
    <ts>2017-06-19T05:15:37.283482</ts>
    <user>U0U6ML22H</user>
    <text>thanks &lt;@U1P6FFJ64&gt; :smiley: &lt;@U2JFD9ALE&gt; what about yours?</text>
  </message>
  <message>
    <ts>2017-06-19T05:26:52.449626</ts>
    <user>U2JFD9ALE</user>
    <text>Something strange is going on with my :firefox: I think. I will be back once I restart it (to many open tabs in Private Mode) :smile:</text>
  </message>
  <message>
    <ts>2017-06-19T05:29:01.481586</ts>
    <user>U0U6ML22H</user>
    <text>so does that mean that the Ellie doesn't work?</text>
  </message>
  <message>
    <ts>2017-06-19T05:36:52.597734</ts>
    <user>U2JFD9ALE</user>
    <text>Ellie works</text>
  </message>
  <message>
    <ts>2017-06-19T05:36:58.599015</ts>
    <user>U2JFD9ALE</user>
    <text>Mine doesn't :neutral_face:</text>
  </message>
  <message>
    <ts>2017-06-19T05:38:16.617610</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U2JFD9ALE&gt; Are you 100% sure you have the `title` attribute present?</text>
  </message>
  <message>
    <ts>2017-06-19T05:40:05.643018</ts>
    <user>U2JFD9ALE</user>
    <text>and now it does. WTF !!!</text>
  </message>
  <message>
    <ts>2017-06-19T05:40:18.646103</ts>
    <user>U2JFD9ALE</user>
    <text>I mean ... :neutral_face:</text>
  </message>
  <message>
    <ts>2017-06-19T05:40:31.649170</ts>
    <user>U2JFD9ALE</user>
    <text>Non-deterministic, that's the main reason we use :elm: :smile:</text>
  </message>
  <message>
    <ts>2017-06-19T05:40:59.655652</ts>
    <user>U0EUHKVGB</user>
    <text>Pretty sure it’s most likely that your browser was caching the page</text>
  </message>
  <message>
    <ts>2017-06-19T05:41:54.669073</ts>
    <user>U2JFD9ALE</user>
    <text>But I had the text already on. Deleted `elm-stuff` and built from sracth though</text>
  </message>
  <message>
    <ts>2017-06-19T05:42:06.671815</ts>
    <user>U0U6ML22H</user>
    <text>yeah, HTML/title/alt is pretty reliable ^^</text>
  </message>
  <message>
    <ts>2017-06-19T05:42:17.674483</ts>
    <user>U2JFD9ALE</user>
    <text>Oh, yeah, I had `alt` on and not `title`. So yeah `cache` it is :wink:</text>
  </message>
  <message>
    <ts>2017-06-19T05:44:48.709790</ts>
    <user>U2LAL86AY</user>
    <text>i want to know - it is possible to have data scructure like a `Dict` - that can hold items of different types - i'm not referring to the key - i'm referring to the value inside - this value to be of different types - i'm asking if this is not possible because of math - how category  theory works (don't know much about that) -&amp;gt; or is not implemented like this for other reasons - ease of reasoning maybe - or is a good constraint to have when designing the data structure or something of this nature... 

Does `haskell` or more powerful functional languages provide this functionality? - or is actually not possible to have because of the math behind?</text>
  </message>
  <message>
    <ts>2017-06-19T05:45:32.721290</ts>
    <user>U0EUHKVGB</user>
    <text>Typeclasses.</text>
  </message>
  <message>
    <ts>2017-06-19T05:45:54.726690</ts>
    <user>U0EUHKVGB</user>
    <text>In Elm, use this: `type MyThing = AnInt Int | AString String`</text>
  </message>
  <message>
    <ts>2017-06-19T05:46:03.729008</ts>
    <user>U0EUHKVGB</user>
    <text>Which lets you make `Dict comparable MyThing`</text>
  </message>
  <message>
    <ts>2017-06-19T05:46:40.737848</ts>
    <user>U2LAL86AY</user>
    <text>hmm yeah that's one way to do it. Ok now i know where typeclases can be useful :smile: thanks</text>
  </message>
  <message>
    <ts>2017-06-19T05:48:31.764285</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; regardless of typeclasses, what would the type signature for `Dict.get` look like - keeping in mind that type-information isn't available at runtime..? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T05:52:47.826067</ts>
    <user>U2LAL86AY</user>
    <text>yes i don't see how it will be possible to enforce `case ..of` statements if not knowing the type. You will end up not handling stuff -so there will be run-time exceptions. Hmm forget about it - im not experienced enough to understand the implications here . Just being curious :smile:</text>
  </message>
  <message>
    <ts>2017-06-19T05:58:14.904295</ts>
    <user>U0CLDU8UB</user>
    <text>In Haskell, you can choose to not be exhaustive in `case-of`s, and that will lead to runtime errors if those missing cases happen.</text>
  </message>
  <message>
    <ts>2017-06-19T05:59:08.917197</ts>
    <user>U17MSA88M</user>
    <text>Haskell has a type called Dynamic, which carries a runtime type annotation with it which can be used to cast the value: &lt;https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Dynamic.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T05:59:15.918905</ts>
    <user>U17MSA88M</user>
    <text>but it's very rarely used</text>
  </message>
  <message>
    <ts>2017-06-19T06:02:41.970619</ts>
    <user>U0EUHKVGB</user>
    <text>Look at this in F#: &lt;https://fsharpforfunandprofit.com/posts/discriminated-unions/&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T06:06:17.020710</ts>
    <user>U5GSVKPJS</user>
    <text>&lt;@U2LAL86AY&gt; what your asking for is perfectly possible with a stronger type system: &lt;https://hackage.haskell.org/package/dependent-map&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T06:06:33.024395</ts>
    <user>U5GSVKPJS</user>
    <text>and you don't have to give up exhaustivity at all</text>
  </message>
  <message>
    <ts>2017-06-19T06:07:25.035885</ts>
    <user>U0EUHKVGB</user>
    <text>Eh, you don’t need a stronger type system - see how F# does it, and that is not more abstract than Elm. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T06:07:44.039916</ts>
    <user>U5GSVKPJS</user>
    <text>They do different</text>
  </message>
  <message>
    <ts>2017-06-19T06:07:45.040145</ts>
    <user>U5GSVKPJS</user>
    <text>things*</text>
  </message>
  <message>
    <ts>2017-06-19T06:08:09.045415</ts>
    <user>U0EUHKVGB</user>
    <text>It achieves the same goal.</text>
  </message>
  <message>
    <ts>2017-06-19T06:08:14.046338</ts>
    <user>U5GSVKPJS</user>
    <text>Ish</text>
  </message>
  <message>
    <ts>2017-06-19T06:08:44.053099</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U5GSVKPJS&gt; &lt;@U0EUHKVGB&gt; &lt;@U3SJEDR96&gt; &lt;@U17MSA88M&gt; thanks all for explaining - pff this stuff pretty mind bending :smile:</text>
  </message>
  <message>
    <ts>2017-06-19T06:08:59.056459</ts>
    <user>U5GSVKPJS</user>
    <text>The Haskell solution witnesses a specific type at particular indices. F# cannot guarantee that, so you still have to match more cases than you would like to model.</text>
  </message>
  <message>
    <ts>2017-06-19T06:09:37.064789</ts>
    <user>U5GSVKPJS</user>
    <text>`Dict.get 5 (Dict.insert 5 (ABoolean True))` cannot _guarantee_ that `ABoolean` comes back.</text>
  </message>
  <message>
    <ts>2017-06-19T06:09:59.069739</ts>
    <user>U5GSVKPJS</user>
    <text>It says that you might get `AnInt` or `AFooble`</text>
  </message>
  <message>
    <ts>2017-06-19T06:10:07.071446</ts>
    <user>U0EUHKVGB</user>
    <text>It achieves the same goal, which is to have mixed types in a collection.</text>
  </message>
  <message>
    <ts>2017-06-19T06:10:13.072794</ts>
    <user>U5GSVKPJS</user>
    <text>Maybe you're ok with that, I'm just saying - the more power you give to your types, the more you can model</text>
  </message>
  <message>
    <ts>2017-06-19T06:10:58.082618</ts>
    <user>U5GSVKPJS</user>
    <text>Of course, but one leads me to a situation where I might get "stuck". In the above example, I _have_ to match an `AnInt`, even though that might be impossible. So what do I do? Writing `crash "impossible"` isn't particularly elegant, but often the best you can do</text>
  </message>
  <message>
    <ts>2017-06-19T06:11:13.085737</ts>
    <user>U5GSVKPJS</user>
    <text>Not arguing for this, just showing &lt;@U2LAL86AY&gt; that type systems have various levels of expressivity</text>
  </message>
  <message>
    <ts>2017-06-19T06:38:28.429056</ts>
    <user>U4872964V</user>
    <text>There are definitely stronger type systems. Then you’d have to grok things like this :slightly_smiling_face:
```
data DSum k tag f :: forall k. (k -&amp;gt; *) -&amp;gt; (k -&amp;gt; *) -&amp;gt; * where
```</text>
  </message>
  <message>
    <ts>2017-06-19T06:54:13.618829</ts>
    <user>U5GSVKPJS</user>
    <text>&lt;https://www.reddit.com/r/elm/comments/3hhlsp/htmllazy_for_any_number_of_arguments/cu7fn9d/&gt; is this really true? The comment says how to write `lazy4` by using tuples, but lazy is defined using pointer equality on the argument, and surely every time the model changes you'll get a different tuple pointer, so the whole thing breaks?</text>
  </message>
  <message>
    <ts>2017-06-19T06:58:07.666018</ts>
    <user>U0EUHKVGB</user>
    <text>Old lazy is different from new lazy</text>
  </message>
  <message>
    <ts>2017-06-19T06:58:44.673355</ts>
    <user>U5GSVKPJS</user>
    <text>Ah</text>
  </message>
  <message>
    <ts>2017-06-19T07:12:24.837340</ts>
    <user>U4872964V</user>
    <text>I’ve noticed this too, with lazy. It’s not obvious, and it sort of goes against the notion to make your function types less general, for instance if you have a view function that only uses part of the model, you’d like to call it with just that part, but then you can’t use lazy</text>
  </message>
  <message>
    <ts>2017-06-19T07:17:41.896808</ts>
    <user>U5GSVKPJS</user>
    <text>Sure you can, `lazy f foo.bar` is fine</text>
  </message>
  <message>
    <ts>2017-06-19T07:18:07.901846</ts>
    <user>U5GSVKPJS</user>
    <text>Or did you mean `lazy (\{bar} -&amp;gt; f bar) foo`, and have that be actually lazy on `foo.bar`?</text>
  </message>
  <message>
    <ts>2017-06-19T07:53:36.320940</ts>
    <user>U4872964V</user>
    <text>it is, but `lazy f (foo.bar, foo.baz, foo.qux, foo.quux)` isn’t and `lazy4` is not defined</text>
  </message>
  <message>
    <ts>2017-06-19T07:57:12.365277</ts>
    <user>U4872964V</user>
    <text>So, let’s say I have a model that updates frequently (some animation or whatnot) and then I have another part of the view that uses four fields from the model. Agreed, it’s not a very common case, but still</text>
  </message>
  <message>
    <ts>2017-06-19T08:01:41.425798</ts>
    <user>U5GSVKPJS</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-06-19T08:11:29.556680</ts>
    <user>U4872964V</user>
    <text>but in the process of making your function type more specific this will probably happen more often, since you replace `model` by specifc fields in the `model`</text>
  </message>
  <message>
    <ts>2017-06-19T08:12:24.568534</ts>
    <user>U4872964V</user>
    <text>So, having `lazy` work with a tuple or record by checking the fields is something to consider. Or adding a version of `lazy` that does</text>
  </message>
  <message>
    <ts>2017-06-19T08:15:01.602529</ts>
    <user>U4872964V</user>
    <text>I’ve started to make functions like this, which is pretty nice, as you can pass the `model` but it’s still specific.
```
viewX : { m | foo : Foo, bar : Bar } -&amp;gt; Html msg
```
and so, to make it `lazy` you’d then just do `lazyThatWorksOnRecord viewX { foo: model.foo, bar: model.bar }` and not have to change the function style</text>
  </message>
  <message>
    <ts>2017-06-19T09:12:33.528325</ts>
    <user>U0U6ML22H</user>
    <text>I've got a UI question: I'm using RemoteData/WebData, so when my users submit something, I switch a value to`Loading` before the value is turned into a `Failure`/`Success`. Initially, I wanted to show a "Loading" message while the value was `Loading`; however, most of the time, it only stays `Loading` for a very brief time, which leads to the UI flashing and the "Loading" content not being readable</text>
  </message>
  <message>
    <ts>2017-06-19T09:13:19.542358</ts>
    <user>U0U6ML22H</user>
    <text>in my Redux days, I used to delay updating the model for about 0.4 or 0.5s so that users could see what the flash was about</text>
  </message>
  <message>
    <ts>2017-06-19T09:13:46.550589</ts>
    <user>U0U6ML22H</user>
    <text>how would you deal with that in Elm?</text>
  </message>
  <message>
    <ts>2017-06-19T09:15:49.589328</ts>
    <user>U2JA29EKF</user>
    <text>I think you can try adding an animation delay - see here for more info: &lt;https://dev.to/rtfeldman/tour-of-an-open-source-elm-spa&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T09:17:08.613816</ts>
    <user>U0U6ML22H</user>
    <text>ah yeah, thanks; I'll look into it but I'd like a no-CSS solution if possible</text>
  </message>
  <message>
    <ts>2017-06-19T09:17:50.627343</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U0U6ML22H&gt; You can return a `Cmd` from your update that triggers in .5s.</text>
  </message>
  <message>
    <ts>2017-06-19T09:18:27.639462</ts>
    <user>U0FP80EKB</user>
    <text>That’s what we do with our flash messages.</text>
  </message>
  <message>
    <ts>2017-06-19T09:18:40.643492</ts>
    <user>U0U6ML22H</user>
    <text>ideally, I'd like the "entire process" to take "at least 0.5s" but no longer that strictly useful</text>
  </message>
  <message>
    <ts>2017-06-19T09:18:59.649679</ts>
    <user>U0U6ML22H</user>
    <text>ie, if it takes less than 0.5, wait for it to take 0.5, but otherwise don't needlessly delay it</text>
  </message>
  <message>
    <ts>2017-06-19T09:18:59.649736</ts>
    <user>U0CLDU8UB</user>
    <text>Is it like you always want the user to wait at least 0.5s?</text>
  </message>
  <message>
    <ts>2017-06-19T09:19:46.665274</ts>
    <user>U0U6ML22H</user>
    <text>I'm thinking, from a UI point of view, I'd rather delay my user for an extra .3s  but allow her to see what I'm displaying, instead of having a quasi-instant flash of useless content</text>
  </message>
  <message>
    <ts>2017-06-19T09:19:57.668564</ts>
    <user>U0CLDU8UB</user>
    <text>Right. That sounds rather complicated in terms of logic, but of course can be done once and reused later.</text>
  </message>
  <message>
    <ts>2017-06-19T09:20:03.670608</ts>
    <user>U0U6ML22H</user>
    <text>but maybe it's an X/Y and y'all have a better solution entirely!</text>
  </message>
  <message>
    <ts>2017-06-19T09:20:34.681152</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U0U6ML22H&gt; I gave a talk at Remote Elm Meetup (4?) about our animation library that works alongside css transitions (manages the timing)</text>
  </message>
  <message>
    <ts>2017-06-19T09:20:46.684809</ts>
    <user>U3SJEDR96</user>
    <text>I'd have a task with a process.sleep 500 * Time.millisecond, and when that's done, check if your model is `NotAskedYet` and if so, bump it to `Loading`. Something like that.</text>
  </message>
  <message>
    <ts>2017-06-19T09:21:06.691357</ts>
    <user>U0FP80EKB</user>
    <text>We also have a case where we set a “showing” flag in our model, then return a `Cmd` that triggers in .5s. When that msg comes back to update, we set “showing” to false</text>
  </message>
  <message>
    <ts>2017-06-19T09:21:51.705668</ts>
    <user>U0FP80EKB</user>
    <text>Here’s the gist that went along with the animation talk &lt;https://gist.github.com/coreyhaines/963029ef49f088e41e1b3485e1c794c3&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T09:22:12.712320</ts>
    <user>U0FP80EKB</user>
    <text>And this is how we use it to show user alerts (roughly) &lt;https://gist.github.com/coreyhaines/686c48da891d3babcf56daf6e739d629&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T09:22:38.720692</ts>
    <user>U0FP80EKB</user>
    <text>I guess one day I could move them to ellie</text>
  </message>
  <message>
    <ts>2017-06-19T09:22:51.725365</ts>
    <user>U0CLDU8UB</user>
    <text>Maybe you need to expand on `RemoteData` to capture "Well, technically we have the respond and it's a Success, but we still want to show Loading to the user" :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T09:23:05.729952</ts>
    <user>U180BQ6Q7</user>
    <text>You can grab a timestamp on the first message to tell if the time limit had expired when your response comes back. Search for using a GetTimeAndThen msg for an eloquent way of doing that </text>
  </message>
  <message>
    <ts>2017-06-19T09:25:10.772374</ts>
    <user>U41NK9BM4</user>
    <text>I don’t remember what site was, but the server response was very fast but at UI level they showed “Calculating the best price/travel combination/what ever” to give a sense of a well thought result.   :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T09:27:42.824598</ts>
    <user>U0U6ML22H</user>
    <text>thanks for the suggestions; it seems that although it's obvious to me to do that, you don't necessarily think so :smiley: Would you care to elaborate on that? Is it because in the real world, you aren't faced with "instant" results?</text>
  </message>
  <message>
    <ts>2017-06-19T09:28:02.831040</ts>
    <user>U0U6ML22H</user>
    <text>it might be that I'm trying to solve a problem that won't occur to my users</text>
  </message>
  <message>
    <ts>2017-06-19T09:29:09.854318</ts>
    <user>U41NK9BM4</user>
    <text>It’s not your case of course - it’s quite different. The only analogy here is that the server response is too fast for we poor humans. The take away is tha sometimes being just too fast is not optimal from an UX  perspective.</text>
  </message>
  <message>
    <ts>2017-06-19T09:32:57.936506</ts>
    <user>U0GR6DHEK</user>
    <text>My compile times have gone crazy long. elm-make hangs at file 37 (of 42) but how can I find out what file that corresponds to?</text>
  </message>
  <message>
    <ts>2017-06-19T09:33:50.955458</ts>
    <user>U17MHJ12N</user>
    <text>I think the standard advice is to look for complex `case...of` if you have sudden build time degradation</text>
  </message>
  <message>
    <ts>2017-06-19T09:34:29.969357</ts>
    <user>U17MHJ12N</user>
    <text>take any long `case...of` and replace with Debug.crash and see what effect it has</text>
  </message>
  <message>
    <ts>2017-06-19T09:34:42.974012</ts>
    <user>U5V5B3F9N</user>
    <text>Hi all, can somebody point me in the direction of materials on tail recursion in Elm? I have a function that blows the stack; and I'd like to understand why: &lt;https://gist.github.com/marceloomens/6416d04f5472be6775487ec258144592&gt; My guess is that either `let` expressions are expanded into the main body of the function or the cons (`::`) on the last line is messing with the tail recursive nature of my function. I'm not expert enough on the Elm compiler to comment :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T09:36:45.015697</ts>
    <user>U17MHJ12N</user>
    <text>there is some info on it here &lt;https://evancz.gitbooks.io/functional-programming-in-elm/recursion/tail-call-elimination.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T09:38:55.061727</ts>
    <user>U0GR6DHEK</user>
    <text>thanks &lt;@U17MHJ12N&gt; I know of that advice and odn't have any crazy case statements at present. Am wondering how to work out which file is causing the issues so I can start digging in</text>
  </message>
  <message>
    <ts>2017-06-19T09:39:22.070926</ts>
    <user>U17MHJ12N</user>
    <text>&lt;@U0GR6DHEK&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T09:39:37.076487</ts>
    <user>U180BQ6Q7</user>
    <text>Are you missing an n - 1 on the recursion? </text>
  </message>
  <message>
    <ts>2017-06-19T09:39:43.078327</ts>
    <user>U17MHJ12N</user>
    <text>I feel your pain - I have the same sort of issue. Hanging out for 0.19 in hope</text>
  </message>
  <message>
    <ts>2017-06-19T09:40:07.087020</ts>
    <user>U41NK9BM4</user>
    <text>I was told it is fixed in 0.19 - hope to recall it correctly</text>
  </message>
  <message>
    <ts>2017-06-19T09:42:14.132095</ts>
    <user>U5V5B3F9N</user>
    <text>Thanks &lt;@U17MHJ12N&gt; that might be helpful I'll look into it</text>
  </message>
  <message>
    <ts>2017-06-19T09:44:11.174307</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5V5B3F9N&gt; `::` evaluates the RHS before the LFS, so yeah, not eligible for tail call elimination</text>
  </message>
  <message>
    <ts>2017-06-19T09:44:59.191657</ts>
    <user>U3SJEDR96</user>
    <text>or, well, rather, it evaluates both before actually consing</text>
  </message>
  <message>
    <ts>2017-06-19T09:45:27.202074</ts>
    <user>U5V5B3F9N</user>
    <text>Hi &lt;@U3SJEDR96&gt;, thanks. I also come to that conclusion after reading &lt;https://evancz.gitbooks.io/functional-programming-in-elm/recursion/tail-call-elimination.html&gt;. What I'll try is to introduce an extra 'accumulator' argument into the call to refactor the `::` in that call</text>
  </message>
  <message>
    <ts>2017-06-19T10:47:43.699569</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; why not use the `Html to Elm` pluggins for the editors

I don't do this very often, and it took about 30 seconds to do using the website, so not worth optimizing :wink:</text>
  </message>
  <message>
    <ts>2017-06-19T11:05:42.158499</ts>
    <user>U5MQ18UFK</user>
    <text>Hi. Sorry for my bad eng. Does anybody know about elm 0.19? Activity on github is low and i am worry about it</text>
  </message>
  <message>
    <ts>2017-06-19T11:07:26.201520</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5MQ18UFK&gt; Why are you worried?</text>
  </message>
  <message>
    <ts>2017-06-19T11:07:39.206774</ts>
    <user>U0EUHKVGB</user>
    <text>See this: &lt;https://github.com/elm-lang/projects/blob/master/roadmap.md&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T11:09:15.245439</ts>
    <user>U5GSVKPJS</user>
    <text>I think it's a fairly reasonable concern: &lt;https://github.com/elm-lang/elm-compiler/commits/master&gt; - shows no code changes to the compiler at all this year</text>
  </message>
  <message>
    <ts>2017-06-19T11:09:23.249046</ts>
    <user>U5GSVKPJS</user>
    <text>oh, my bad</text>
  </message>
  <message>
    <ts>2017-06-19T11:09:26.250338</ts>
    <user>U5GSVKPJS</user>
    <text>Evan works on the `dev` branch</text>
  </message>
  <message>
    <ts>2017-06-19T11:10:14.270563</ts>
    <user>U0EUHKVGB</user>
    <text>It’s not a reasonable concern.</text>
  </message>
  <message>
    <ts>2017-06-19T11:10:20.273192</ts>
    <user>U0EUHKVGB</user>
    <text>There is work constantly going on.</text>
  </message>
  <message>
    <ts>2017-06-19T11:10:27.276386</ts>
    <user>U0EUHKVGB</user>
    <text>Not all of it is visible.</text>
  </message>
  <message>
    <ts>2017-06-19T11:10:29.277145</ts>
    <user>U5GSVKPJS</user>
    <text>The reasonable concern is that is not visible</text>
  </message>
  <message>
    <ts>2017-06-19T11:10:34.279150</ts>
    <user>U5GSVKPJS</user>
    <text>or darkconsul wouldn't have said it</text>
  </message>
  <message>
    <ts>2017-06-19T11:10:43.282964</ts>
    <user>U5GSVKPJS</user>
    <text>I don't think it's fair to say "your concern is not reasonable"</text>
  </message>
  <message>
    <ts>2017-06-19T11:10:50.285854</ts>
    <user>U0EUHKVGB</user>
    <text>Please read this: &lt;https://github.com/elm-lang/projects/blob/master/roadmap.md#what-is-the-timeline&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T11:10:55.287854</ts>
    <user>U5GSVKPJS</user>
    <text>I have read that</text>
  </message>
  <message>
    <ts>2017-06-19T11:11:01.290090</ts>
    <user>U0EUHKVGB</user>
    <text>Please read it again :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T11:11:07.292743</ts>
    <user>U5GSVKPJS</user>
    <text>Oh, now I magically get it</text>
  </message>
  <message>
    <ts>2017-06-19T11:11:12.294665</ts>
    <user>U0EUHKVGB</user>
    <text>Perfect!</text>
  </message>
  <message>
    <ts>2017-06-19T11:11:18.297365</ts>
    <user>U0EUHKVGB</user>
    <text>:wink:</text>
  </message>
  <message>
    <ts>2017-06-19T11:11:41.307092</ts>
    <user>U5GSVKPJS</user>
    <text>Anyway, &lt;@U5MQ18UFK&gt; perhaps have a look at the `dev` branches if you haven't seen them. The mailing list might be a better option to try and get a status update, if you want one</text>
  </message>
  <message>
    <ts>2017-06-19T11:11:59.314369</ts>
    <user>U0EUHKVGB</user>
    <text>Please don’t do that.</text>
  </message>
  <message>
    <ts>2017-06-19T11:12:10.318789</ts>
    <user>U0EUHKVGB</user>
    <text>Evan posts status updates _when there are things to report_</text>
  </message>
  <message>
    <ts>2017-06-19T11:12:13.320130</ts>
    <user>U5GSVKPJS</user>
    <text>But good luck showing roadmap.md to your team lead have them convinced Elm wouldn't be a big risk</text>
  </message>
  <message>
    <ts>2017-06-19T11:12:21.323542</ts>
    <user>U0EUHKVGB</user>
    <text>You can find these at the elm-dev mailing list.</text>
  </message>
  <message>
    <ts>2017-06-19T11:12:37.330177</ts>
    <user>U0EUHKVGB</user>
    <text>Asking for further updates is frustrating the process.</text>
  </message>
  <message>
    <ts>2017-06-19T11:12:46.333728</ts>
    <user>U0EUHKVGB</user>
    <text>(on elm-dev, you can ask here)</text>
  </message>
  <message>
    <ts>2017-06-19T11:13:06.341974</ts>
    <user>U0EUHKVGB</user>
    <text>Visible commits and changes only make up a small part of the work that Evan does.</text>
  </message>
  <message>
    <ts>2017-06-19T11:13:27.350342</ts>
    <user>U0EUHKVGB</user>
    <text>A lot of it is researching, discussing, and identifying what makes sense to go into the language, and what makes sense to fit together.</text>
  </message>
  <message>
    <ts>2017-06-19T11:13:50.359570</ts>
    <user>U0EUHKVGB</user>
    <text>This is how Elm has ended up so nice. Sadly, this is the parts that don’t come across visibly to outsiders.</text>
  </message>
  <message>
    <ts>2017-06-19T11:13:58.362923</ts>
    <user>U0EUHKVGB</user>
    <text>Hence, status updates on elm-dev.</text>
  </message>
  <message>
    <ts>2017-06-19T11:13:59.363278</ts>
    <user>U5GSVKPJS</user>
    <text>There ya go &lt;@U5MQ18UFK&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T11:15:32.402460</ts>
    <user>U5MQ18UFK</user>
    <text>Thx. Earlier they released versions every half a year. So i hope that 0.19 will be soon)</text>
  </message>
  <message>
    <ts>2017-06-19T11:15:44.407602</ts>
    <user>U0EUHKVGB</user>
    <text>There is no need to fear: the community is both large and strong, and NoRedInk is a great parent company for Evan to be based at, since it is home to people who love and use Elm every day. If there was a concern, it would be addressed.</text>
  </message>
  <message>
    <ts>2017-06-19T11:15:46.408210</ts>
    <user>U5GSVKPJS</user>
    <text>I don't think you will be able to expect that</text>
  </message>
  <message>
    <ts>2017-06-19T11:16:12.419082</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5MQ18UFK&gt; There is no fixed timeline for releases - if you see the document I linked, it will explain why (&lt;https://github.com/elm-lang/projects/blob/master/roadmap.md#what-is-the-timeline&gt;)</text>
  </message>
  <message>
    <ts>2017-06-19T11:16:28.426177</ts>
    <user>U0GR6DHEK</user>
    <text>My compile times have gone crazy long. elm-make hangs at file 37 (of 42) but how can I find out what file that corresponds to?</text>
  </message>
  <message>
    <ts>2017-06-19T11:17:10.443917</ts>
    <user>U0EUHKVGB</user>
    <text>It will be released once there it has be sufficiently ironed out, and the features all fit together in a way that makes sense.</text>
  </message>
  <message>
    <ts>2017-06-19T11:17:32.453614</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0GR6DHEK&gt;, find the ones with the big case statements</text>
  </message>
  <message>
    <ts>2017-06-19T11:19:20.499254</ts>
    <user>U0GR6DHEK</user>
    <text>that means ones `case (x. y, z, w, t) of`, correct</text>
  </message>
  <message>
    <ts>2017-06-19T11:19:22.499823</ts>
    <user>U0GR6DHEK</user>
    <text>?</text>
  </message>
  <message>
    <ts>2017-06-19T11:19:32.504054</ts>
    <user>U0GR6DHEK</user>
    <text>I don't have any of those as I know it is an issue</text>
  </message>
  <message>
    <ts>2017-06-19T11:19:54.513101</ts>
    <user>U0EUHKVGB</user>
    <text>```
case x of
  1 -&amp;gt; ..
   2 -&amp;gt; ..
```
this case statement has 2 branches</text>
  </message>
  <message>
    <ts>2017-06-19T11:19:58.514631</ts>
    <user>U0GR6DHEK</user>
    <text>or does it also mean long update functions</text>
  </message>
  <message>
    <ts>2017-06-19T11:20:06.518144</ts>
    <user>U0EUHKVGB</user>
    <text>find the ones which have more than 16ish</text>
  </message>
  <message>
    <ts>2017-06-19T11:20:19.524112</ts>
    <user>U0EUHKVGB</user>
    <text>Yeah, update function also counts</text>
  </message>
  <message>
    <ts>2017-06-19T11:20:46.535729</ts>
    <user>U0EUHKVGB</user>
    <text>e.g if you have 32 constructors for `Msg` then you probably have a giant `case..of` to go with it</text>
  </message>
  <message>
    <ts>2017-06-19T11:20:50.537367</ts>
    <user>U0GR6DHEK</user>
    <text>is there any way of knowing which file is causing the slowdown (by name)</text>
  </message>
  <message>
    <ts>2017-06-19T11:20:58.540457</ts>
    <user>U0EUHKVGB</user>
    <text>Not easily, atm</text>
  </message>
  <message>
    <ts>2017-06-19T11:21:44.559554</ts>
    <user>U0EUHKVGB</user>
    <text>You can do some things like compiling one file at a time, with your elm-stuff folder already populated and your elmi/elmo for that given file deleted</text>
  </message>
  <message>
    <ts>2017-06-19T11:21:56.564500</ts>
    <user>U0U6ML22H</user>
    <text>maybe using a CLI tool to find Messages.elm files with over 12 lines and checking manually</text>
  </message>
  <message>
    <ts>2017-06-19T11:22:08.569922</ts>
    <user>U5MQ18UFK</user>
    <text>yes, i saw this. But having a plans and doing smth is a different things) Document it is good, but i want to be shure that all ok. I need to start new big project and i want to use elm. But using in production something, that has version above 1.0, is dangerous imho</text>
  </message>
  <message>
    <ts>2017-06-19T11:22:51.588213</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5MQ18UFK&gt; Elm has been used in production by several companies safely since 0.15 :wink:</text>
  </message>
  <message>
    <ts>2017-06-19T11:23:08.595289</ts>
    <user>U5MQ18UFK</user>
    <text>version below 1.0 :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T11:23:16.598719</ts>
    <user>U2LAL86AY</user>
    <text>pff i'm having trouble underestanding if i can use this: 
&lt;http://package.elm-lang.org/packages/rundis/elm-bootstrap/3.0.0/Bootstrap-Form#group&gt;
like this: 
```
validationFeedback : Validation.ValidationState -&amp;gt; List (Form.Option Msg)
validationFeedback state =
    case state of
        Validation.Invalid -&amp;gt;
            [ Form.groupDanger ]

        Validation.Valid -&amp;gt;
            [ Form.groupSuccess ]

        Validation.NotValidated -&amp;gt;
            []

```
the error is:
```
Cannot find type `Form.Option`.

`Form` does not expose `Option`. 
```
this means what ? because `Form.Option` is not exposed - i can't build my `validationFeedback ` function?</text>
  </message>
  <message>
    <ts>2017-06-19T11:23:19.599878</ts>
    <user>U0EUHKVGB</user>
    <text>Don’t let the fact that it’s not `1.0` put you off - Elm’s versioning is not semantic versioning.</text>
  </message>
  <message>
    <ts>2017-06-19T11:23:40.609055</ts>
    <user>U2T2MKL58</user>
    <text>&lt;@U0EUHKVGB&gt; It would be nice to have a list of companies that are using elm in production.  Do you know of such a list?</text>
  </message>
  <message>
    <ts>2017-06-19T11:23:44.610921</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5MQ18UFK&gt; Version numbers are just labels, really.</text>
  </message>
  <message>
    <ts>2017-06-19T11:23:56.615493</ts>
    <user>U5MQ18UFK</user>
    <text>ok, thants</text>
  </message>
  <message>
    <ts>2017-06-19T11:24:00.617067</ts>
    <user>U5MQ18UFK</user>
    <text>thanks*</text>
  </message>
  <message>
    <ts>2017-06-19T11:24:09.620591</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2T2MKL58&gt; &lt;http://elm-lang.org/&gt;, but it’s by no means complete at all.</text>
  </message>
  <message>
    <ts>2017-06-19T11:24:14.622903</ts>
    <user>U0EUHKVGB</user>
    <text>See at the bottom</text>
  </message>
  <message>
    <ts>2017-06-19T11:24:40.634037</ts>
    <user>U5GSVKPJS</user>
    <text>yay, my company is there :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T11:25:36.657676</ts>
    <user>U2T2MKL58</user>
    <text>yeah.  I knew about that one…would be cool if there was a more complete list.  I think I saw</text>
  </message>
  <message>
    <ts>2017-06-19T11:26:07.670678</ts>
    <user>U2T2MKL58</user>
    <text>&lt;@U0CL0AS3V&gt; tweet or something about some companies he recently found out about using it</text>
  </message>
  <message>
    <ts>2017-06-19T11:26:36.682922</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U2LAL86AY&gt; Form does not expose Option, it's exposed by the specific "inputs" apparently</text>
  </message>
  <message>
    <ts>2017-06-19T11:26:40.684614</ts>
    <user>U2T2MKL58</user>
    <text>may be helpful for convincing our own employers that elm is something we should be using</text>
  </message>
  <message>
    <ts>2017-06-19T11:28:04.720017</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2T2MKL58&gt;, the company simply has to tell evan to be added to the list.</text>
  </message>
  <message>
    <ts>2017-06-19T11:28:16.725115</ts>
    <user>U0GR6DHEK</user>
    <text>hmm, ok - I might have to give that a try</text>
  </message>
  <message>
    <ts>2017-06-19T11:28:20.726840</ts>
    <user>U0EUHKVGB</user>
    <text>I personally know of at least ~20 other companies using Elm</text>
  </message>
  <message>
    <ts>2017-06-19T11:28:30.731243</ts>
    <user>U0U6ML22H</user>
    <text>we're one! ^^</text>
  </message>
  <message>
    <ts>2017-06-19T11:28:43.736633</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/lpil/elm-companies&gt; &amp;lt;- there's another list here</text>
  </message>
  <message>
    <ts>2017-06-19T11:28:46.737774</ts>
    <user>U0EUHKVGB</user>
    <text>Some of them sponsored osloelmday: &lt;https://osloelmday.no/&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T11:29:40.760775</ts>
    <user>U0EUHKVGB</user>
    <text>And more of them sponsored elmeurope, with the exception of mozilla and google: &lt;https://elmeurope.org/#sprs&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T11:29:48.763899</ts>
    <user>U0EUHKVGB</user>
    <text>(and efrei)</text>
  </message>
  <message>
    <ts>2017-06-19T11:30:39.786246</ts>
    <user>U2LAL86AY</user>
    <text>not it doesn't work:
```
validationFeedback : Validation.ValidationState -&amp;gt; List (Bootstrap.Form.Input.Option Msg)
validationFeedback state =
    case state of
        Validation.Invalid -&amp;gt;
            [ Form.groupDanger ]

        Validation.Valid -&amp;gt;
            [ Form.groupSuccess ]

        Validation.NotValidated -&amp;gt;
            []

```
```
Function `group` is expecting the 1st argument to be:

List (Bootstrap.Form.Option msg)

But it is:

List (Input.Option Msg)
54:26
Error	Elm	
The definition of `validationFeedback` does not match its type annotation.
```</text>
  </message>
  <message>
    <ts>2017-06-19T11:30:44.788109</ts>
    <user>U3SJEDR96</user>
    <text>and of course, everyone looking for elm devs in &lt;#C0LUAGWRK|jobs&gt; presumably uses or  wants to use elm in prod, too</text>
  </message>
  <message>
    <ts>2017-06-19T11:30:47.789469</ts>
    <user>U2T2MKL58</user>
    <text>That’s Awesome!  Had no idea that many are using it.  If you know of 20 I’m sure there are many more that we don’t even know about</text>
  </message>
  <message>
    <ts>2017-06-19T11:32:07.823773</ts>
    <user>U2LAL86AY</user>
    <text>so we are not talking about the same `Option` - i think `Form` should expose `Option` as well not just the `Form.Input` - then it will work</text>
  </message>
  <message>
    <ts>2017-06-19T11:32:47.840536</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U2LAL86AY&gt; there seems to be a problem with the library, since the doc of Form points to "#Option" but that's nowhere to be found; maybe ask &lt;@U0JFEBK6F&gt;?</text>
  </message>
  <message>
    <ts>2017-06-19T11:34:19.878552</ts>
    <user>U0GR6DHEK</user>
    <text>Richard tweeted about Ford recently...</text>
  </message>
  <message>
    <ts>2017-06-19T11:35:19.902790</ts>
    <user>U2LAL86AY</user>
    <text>augustin82: that what i thought. I'm sure he seen this message because you @ him :smile: - i'll use a anonimus function then</text>
  </message>
  <message>
    <ts>2017-06-19T11:35:41.911719</ts>
    <user>U41NK9BM4</user>
    <text>&lt;@U2T2MKL58&gt; Recently Ableton has done a nice web app using Elm: &lt;https://learningmusic.ableton.com&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T11:36:28.931245</ts>
    <user>U41NK9BM4</user>
    <text>Fortunately is becoming hard to keep a list of them :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T11:39:28.005092</ts>
    <user>U2LAL86AY</user>
    <text>means they figured out the audio - audio stuff was a problem in elm for a long time.</text>
  </message>
  <message>
    <ts>2017-06-19T11:39:54.015539</ts>
    <user>U41NK9BM4</user>
    <text>I believe they used Tone.js for that</text>
  </message>
  <message>
    <ts>2017-06-19T11:41:44.059616</ts>
    <user>U41NK9BM4</user>
    <text>Source: &lt;https://twitter.com/AbletonDev/status/861580662620508160&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T12:03:40.595528</ts>
    <user>U0JFEBK6F</user>
    <text>Seems I forgot to expose Form.Option :sad_panda: , would you mind submitting an issue ? </text>
  </message>
  <message>
    <ts>2017-06-19T12:28:43.153430</ts>
    <user>U4F64AKQV</user>
    <text>If I am benchmarking a function that takes a list, what is the best practice for generating that list?</text>
  </message>
  <message>
    <ts>2017-06-19T12:29:29.170257</ts>
    <user>U4F64AKQV</user>
    <text>I’m being a little vague on purpose to avoid asking a leading question.</text>
  </message>
  <message>
    <ts>2017-06-19T12:29:39.173832</ts>
    <user>U23SA861Y</user>
    <text>probably depends on the specifics of the benchmark but I believe there is some fuzzing tools in elm-test</text>
  </message>
  <message>
    <ts>2017-06-19T12:31:10.207710</ts>
    <user>U4F64AKQV</user>
    <text>Should the actual values in the list have a significant impact on the benchmarking results when the functions being compared don’t care about the particulars of the values?</text>
  </message>
  <message>
    <ts>2017-06-19T12:31:39.218282</ts>
    <user>U4F64AKQV</user>
    <text>And the same values are used for both functions for each benchmark run.</text>
  </message>
  <message>
    <ts>2017-06-19T12:34:07.271536</ts>
    <user>U4F64AKQV</user>
    <text>Basically, I was creating long lists with `List.repeat 0 N`. When I did this, one of the functions beat out the other by a decent amount. Then I changed how I was creating the lists to `List.repeat 5 N`. Now the other function is blowing the original winner out of the water (600% difference!). Clearly, there’s some kind of weird optimization going on with Lists that consist of only zero. Any clues?</text>
  </message>
  <message>
    <ts>2017-06-19T12:37:22.340869</ts>
    <user>U5GSVKPJS</user>
    <text>If you're doing exactly that, then you have the arguments the wrong way round</text>
  </message>
  <message>
    <ts>2017-06-19T12:37:26.342438</ts>
    <user>U5GSVKPJS</user>
    <text>List.repeat 0 n = the empty list</text>
  </message>
  <message>
    <ts>2017-06-19T12:41:05.419198</ts>
    <user>U4F64AKQV</user>
    <text>:facepalm:. Thanks &lt;@U5GSVKPJS&gt;.</text>
  </message>
  <message>
    <ts>2017-06-19T12:42:48.455299</ts>
    <user>U5GSVKPJS</user>
    <text>Been there enough times - at least you had the sense to question it. I usually just commit with "1 BILLION PERCENT PERFORMANCE INCREASE"</text>
  </message>
  <message>
    <ts>2017-06-19T13:30:37.488275</ts>
    <user>U5T739RFW</user>
    <text>somebody has to do style elements version of this :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T13:46:55.839512</ts>
    <user>U2GPAEU1L</user>
    <text>If you want to key just a single node in Elm (a node that doesn't even have children), do you have to put it inside a "meaningless" `div` so that it is the child? It seems that you can only add keys to children.

Docs for reference: &lt;http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Keyed#node&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T13:48:30.874391</ts>
    <user>U3SJEDR96</user>
    <text>correct; keys are _meant_ to disambiguate between children so they don't get mixed up (though I know there are other uses for them :stuck_out_tongue: )</text>
  </message>
  <message>
    <ts>2017-06-19T13:49:01.885459</ts>
    <user>U2GPAEU1L</user>
    <text>Ok, thanks for the confirmation &lt;@U3SJEDR96&gt;, much appreciated</text>
  </message>
  <message>
    <ts>2017-06-19T15:19:28.846258</ts>
    <user>U2D7NUGS1</user>
    <text>I wonder how well Elm interops with web components. Does anybody here have any experience with that? It seems that there are quite a lot of nice UI elements.</text>
  </message>
  <message>
    <ts>2017-06-19T15:20:12.860486</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U2D7NUGS1&gt; check out this talk: &lt;https://www.youtube.com/watch?v=ar3TakwE8o0&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T15:20:27.865208</ts>
    <user>U2D7NUGS1</user>
    <text>Checking out...</text>
  </message>
  <message>
    <ts>2017-06-19T15:21:39.887888</ts>
    <user>U5VFWL5MF</user>
    <text>I saw that Elm has union types. I thought the Elm's union types were actually Algebraic Data Types. Can someone explain the difference?</text>
  </message>
  <message>
    <ts>2017-06-19T15:22:11.898142</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5VFWL5MF&gt; see this article: &lt;http://blog.jenkster.com/2016/06/functional-mumbo-jumbo-adts.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T15:23:05.915617</ts>
    <user>U0LPMPL2U</user>
    <text>There's a lot of terminology around these "things" but for the purpose of Elm, "Union Types" == "Algebraic Data Types"</text>
  </message>
  <message>
    <ts>2017-06-19T15:23:40.927226</ts>
    <user>U5VFWL5MF</user>
    <text>Ok I thought so. The article confirms my suspicion </text>
  </message>
  <message>
    <ts>2017-06-19T15:23:53.931475</ts>
    <user>U0LPMPL2U</user>
    <text>From the guide section on types (&lt;https://guide.elm-lang.org/types/union_types.html&gt;):
&amp;gt; Note: Union types are sometimes called tagged unions. Some communities call them ADTs.</text>
  </message>
  <message>
    <ts>2017-06-19T15:24:13.938185</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U0LPMPL2U&gt; Oh, yeah. That's what actually inspired me. Unfortunately the google map example is currently broken (&lt;https://github.com/rtfeldman/elm-google-maps/issues/1&gt;). I believe the bug is on the component side and there is a workaround.</text>
  </message>
  <message>
    <ts>2017-06-19T15:24:19.940496</ts>
    <user>U0S6BNVNY</user>
    <text>&lt;@U2D7NUGS1&gt; &lt;https://github.com/knewter/elm_web_components_playground&gt; is a thing I made</text>
  </message>
  <message>
    <ts>2017-06-19T15:24:35.945656</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks &lt;@U0S6BNVNY&gt; .</text>
  </message>
  <message>
    <ts>2017-06-19T15:25:35.965387</ts>
    <user>U5VFWL5MF</user>
    <text>Sure but the generalisation that union types are called ADTs in other languages is not correct. Adt support type variables while union types should not</text>
  </message>
  <message>
    <ts>2017-06-19T15:25:47.969577</ts>
    <user>U5VFWL5MF</user>
    <text>This is according to TAPL </text>
  </message>
  <message>
    <ts>2017-06-19T15:26:14.978308</ts>
    <user>U5VFWL5MF</user>
    <text>(Types and Programming Languages book)</text>
  </message>
  <message>
    <ts>2017-06-19T15:26:36.985787</ts>
    <user>U2D7NUGS1</user>
    <text>My question leans toward practical experience. I'm looking for an alternative to elm-mdl and want something that "just works", so I can focus on business logic. I'd like to avoid being on a constant lookout for workarounds.</text>
  </message>
  <message>
    <ts>2017-06-19T15:27:14.998678</ts>
    <user>U0S6BNVNY</user>
    <text>&lt;@U2D7NUGS1&gt; I've built a production app using polymer/web components and elm. There are a few concerns that the talk mentioned above covers, I think. In general, it "Just Works" with a few caveats depending on the components you're using.</text>
  </message>
  <message>
    <ts>2017-06-19T15:27:41.008090</ts>
    <user>U2D7NUGS1</user>
    <text>Oh, that's great!</text>
  </message>
  <message>
    <ts>2017-06-19T15:28:19.020471</ts>
    <user>U2D7NUGS1</user>
    <text>Did you use a lot of "of the shelf" components, or created your own ones?</text>
  </message>
  <message>
    <ts>2017-06-19T15:29:32.044824</ts>
    <user>U0LPMPL2U</user>
    <text>What Elm refers to "Union Types" are allowed to have type variables</text>
  </message>
  <message>
    <ts>2017-06-19T15:29:57.053595</ts>
    <user>U5VFWL5MF</user>
    <text>Exactly. They are ADTs</text>
  </message>
  <message>
    <ts>2017-06-19T15:30:07.057010</ts>
    <user>U0LPMPL2U</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-19T15:30:17.060424</ts>
    <user>U2D7NUGS1</user>
    <text>The demo you've linked too looks like a great resource. Thanks &lt;@U0S6BNVNY&gt; ! I'll look deeper into it.</text>
  </message>
  <message>
    <ts>2017-06-19T15:31:27.083676</ts>
    <user>U5VFWL5MF</user>
    <text>Wouldn't it be better to call them what they are? I think it would unify a great abstraction common to many other functional languages </text>
  </message>
  <message>
    <ts>2017-06-19T15:33:13.120032</ts>
    <user>U0CL0AS3V</user>
    <text>Yeah! Haskell and Idris should get on board with what Elm and F# call them. :wink:

&lt;https://fsharpforfunandprofit.com/posts/designing-with-types-single-case-dus/&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T15:40:25.261989</ts>
    <user>U5VFWL5MF</user>
    <text>Probably not happening. I'll see if I can convince the F# and Idris people to name them ADTs :smiling_imp:</text>
  </message>
  <message>
    <ts>2017-06-19T15:49:48.448789</ts>
    <user>U2D7NUGS1</user>
    <text>That's a great video &lt;@U0S6BNVNY&gt; . I think I'm sold to at least try it. Also very good point about type safety. I guess it should be quite straight forward to make Elm wrappers for these `nodes` and `attributes`.</text>
  </message>
  <message>
    <ts>2017-06-19T17:08:20.033192</ts>
    <user>U3SQ42JJW</user>
    <text>Hi everyone. I have a problem and it look like this:
```
generateSet : List Question -&amp;gt; Question -&amp;gt; Clip
generateSet catalogue current =
    case catalogue of
        [] -&amp;gt;
            Clip Nothing Nothing Nothing

        x :: [] -&amp;gt;
            case current of
                x -&amp;gt;
                    Clip Nothing (Just x) Nothing

        x :: y :: [] -&amp;gt;
            case current of
                x -&amp;gt;
                    Clip Nothing (Just x) (Just y)

        x :: y :: z :: [] -&amp;gt;
            case current of
                x -&amp;gt;
                    Clip Nothing (Just x) (Just y)

                y -&amp;gt;
                    Clip (Just x) (Just y) (Just z)

                z -&amp;gt;
                    Clip (Just y) (Just z) Nothing

        x :: y :: z :: rest -&amp;gt;
            case current of
                z -&amp;gt;
                    Clip Nothing Nothing Nothing

                _ -&amp;gt;
                    generateSet rest current
```</text>
  </message>
  <message>
    <ts>2017-06-19T17:08:37.038317</ts>
    <user>U3SQ42JJW</user>
    <text>ups formatting fail…</text>
  </message>
  <message>
    <ts>2017-06-19T17:09:10.048248</ts>
    <user>U3SQ42JJW</user>
    <text>Compiler is saying: pattern y in branch 4 is redundant.</text>
  </message>
  <message>
    <ts>2017-06-19T17:09:12.048634</ts>
    <user>U0MDSQMUH</user>
    <text>you can use triple backticks to format multi-line chunks of code!</text>
  </message>
  <message>
    <ts>2017-06-19T17:09:24.052371</ts>
    <user>U0MDSQMUH</user>
    <text>(and don't forget slack lets you edit)</text>
  </message>
  <message>
    <ts>2017-06-19T17:09:38.056719</ts>
    <user>U0MDSQMUH</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-06-19T17:09:48.059459</ts>
    <user>U3SQ42JJW</user>
    <text>done :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T17:10:06.065267</ts>
    <user>U0MDSQMUH</user>
    <text>so, you can't do this:
```
case ... of
 x -&amp;gt; ...
 y -&amp;gt; ...
```</text>
  </message>
  <message>
    <ts>2017-06-19T17:10:24.070498</ts>
    <user>U0MDSQMUH</user>
    <text>because it's going to treat `x` and `y` as variables to bind to</text>
  </message>
  <message>
    <ts>2017-06-19T17:10:41.075773</ts>
    <user>U0MDSQMUH</user>
    <text>you can't pattern match against the contents of a variable, I'm afraid</text>
  </message>
  <message>
    <ts>2017-06-19T17:10:54.079465</ts>
    <user>U3SQ42JJW</user>
    <text>What i want to do is the following. I have a List of Question and want to traverse this list. When I find the current Question I want to resolve with a type Clip, that takes the previous item in the list, the current and the next one…</text>
  </message>
  <message>
    <ts>2017-06-19T17:11:23.088108</ts>
    <user>U3SQ42JJW</user>
    <text>&lt;@U0MDSQMUH&gt; ah… ok :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-19T17:11:26.089017</ts>
    <user>U3SQ42JJW</user>
    <text>hmmm…</text>
  </message>
  <message>
    <ts>2017-06-19T17:11:46.095258</ts>
    <user>U3SQ42JJW</user>
    <text>may be with if…then statements?</text>
  </message>
  <message>
    <ts>2017-06-19T17:12:04.100700</ts>
    <user>U0MDSQMUH</user>
    <text>lemme read your high level description and see what we can come up with</text>
  </message>
  <message>
    <ts>2017-06-19T17:13:14.121344</ts>
    <user>U0MDSQMUH</user>
    <text>so, one thing that jumps out at me:</text>
  </message>
  <message>
    <ts>2017-06-19T17:13:31.126623</ts>
    <user>U0MDSQMUH</user>
    <text>you have no guarantee (that the compiler can offer, anyway) that `current` is in `catalogue`</text>
  </message>
  <message>
    <ts>2017-06-19T17:14:02.135497</ts>
    <user>U0LPMPL2U</user>
    <text>It sounds like you may want a zip list?</text>
  </message>
  <message>
    <ts>2017-06-19T17:14:14.138819</ts>
    <user>U3SQ42JJW</user>
    <text>well it should be in there… but who knows…</text>
  </message>
  <message>
    <ts>2017-06-19T17:15:22.159117</ts>
    <user>U3SQ42JJW</user>
    <text>&lt;@U0LPMPL2U&gt; hmm… zip list means putting two list like a zipper together, or?</text>
  </message>
  <message>
    <ts>2017-06-19T17:15:48.166813</ts>
    <user>U0LPMPL2U</user>
    <text>It's  list that keeps track of it's currently focused element</text>
  </message>
  <message>
    <ts>2017-06-19T17:16:00.170371</ts>
    <user>U0LPMPL2U</user>
    <text>you can move the "cursor" forwards and backwards</text>
  </message>
  <message>
    <ts>2017-06-19T17:16:24.177226</ts>
    <user>U3SQ42JJW</user>
    <text>hmmm… sounds interesting… maybe this is what i am searching for.</text>
  </message>
  <message>
    <ts>2017-06-19T17:17:52.202019</ts>
    <user>U3SQ42JJW</user>
    <text>I think of a List of items and a kind of magnifying glass that traverses over the list. And all I see through that glass is the previous, the current and the next item…</text>
  </message>
  <message>
    <ts>2017-06-19T17:18:13.207988</ts>
    <user>U1CE9DL9H</user>
    <text>well, you can model that as data</text>
  </message>
  <message>
    <ts>2017-06-19T17:18:45.217296</ts>
    <user>U1CE9DL9H</user>
    <text>so `type alias MyStructure a = { toLeft : List a, selected = (a, a, a), toRight = List a } `</text>
  </message>
  <message>
    <ts>2017-06-19T17:19:15.225897</ts>
    <user>U1CE9DL9H</user>
    <text>then define a function `toTheLeft : MyStructure -&amp;gt; Maybe MyStructure`, similarly for moving to the right</text>
  </message>
  <message>
    <ts>2017-06-19T17:19:34.231413</ts>
    <user>U3SQ42JJW</user>
    <text>&lt;@U1CE9DL9H&gt; uh :slightly_smiling_face: that looks advanced :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T17:20:28.247311</ts>
    <user>U3SQ42JJW</user>
    <text>good idea… so the selected is alwas that tripple touple…?</text>
  </message>
  <message>
    <ts>2017-06-19T17:20:34.249129</ts>
    <user>U0LPMPL2U</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-06-19T17:23:30.299614</ts>
    <user>U3SQ42JJW</user>
    <text>So I do not ned to have a separate list, but model the whole list in the way of this “MyStruvture”, right?</text>
  </message>
  <message>
    <ts>2017-06-19T17:23:59.308083</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U3SQ42JJW&gt; &lt;https://ellie-app.com/3wPWjvN76C2a1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T17:26:01.342979</ts>
    <user>U48AEBJQ3</user>
    <text>It uses &lt;http://package.elm-lang.org/packages/wernerdegroot/listzipper/latest&gt; which implements a zipper already.</text>
  </message>
  <message>
    <ts>2017-06-19T17:27:24.365705</ts>
    <user>U3SQ42JJW</user>
    <text>&lt;@U48AEBJQ3&gt;  thanks… That looks easy with that package. I still have to think about &lt;@U1CE9DL9H&gt; approach.. Still do not get it ceompletely, but want to… I have to think a bout that…</text>
  </message>
  <message>
    <ts>2017-06-19T17:28:05.377243</ts>
    <user>U0LPMPL2U</user>
    <text>The &lt;@U1CE9DL9H&gt; approach is what that `List.Zipper` package implements</text>
  </message>
  <message>
    <ts>2017-06-19T17:28:23.382270</ts>
    <user>U48AEBJQ3</user>
    <text>The big difference between that library and the data structure above is that the custom one always has 3 (or more) elements and can never focus on the very head or tail, but you don't have `Maybe` results.</text>
  </message>
  <message>
    <ts>2017-06-19T17:29:35.402404</ts>
    <user>U1CE9DL9H</user>
    <text>so, if this kind of pattern match is something you will do in many locations, and your structures is only valid with 3+ elemens, it may be worth it to write a custom data structure. Otherwise the package is probably easier</text>
  </message>
  <message>
    <ts>2017-06-19T17:30:30.418533</ts>
    <user>U3SQ42JJW</user>
    <text>Ok. Thanks everybody for that. That is awesone input I got. Trying to understand this and will have a look into the List.Zipper implementation. Will come back if I dont understand it :wink: Thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T17:30:41.422098</ts>
    <user>U48AEBJQ3</user>
    <text>If you want to understand the structure, try watching &lt;https://www.youtube.com/watch?v=IcgmSRJHu_8&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T17:32:30.452478</ts>
    <user>U0LPMPL2U</user>
    <text>The section on zip lists starts at 11:20 but the whole video is worth watching :100:</text>
  </message>
  <message>
    <ts>2017-06-19T17:33:34.469530</ts>
    <user>U48AEBJQ3</user>
    <text>I should polish up this empty-list-zipper I wrote and publish it.</text>
  </message>
  <message>
    <ts>2017-06-19T17:46:23.670845</ts>
    <user>U3SQ42JJW</user>
    <text>I watched this video once and was huge to me… but I totally forgot that Richard did address this problem exactly :smile:</text>
  </message>
  <message>
    <ts>2017-06-19T17:47:13.683062</ts>
    <user>U3SQ42JJW</user>
    <text>He even has the example with Questions.. I feel stupid now… Brain forgets too fast… :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-19T17:56:50.830215</ts>
    <user>U2GPAEU1L</user>
    <text>marschro: That's why we have this slack :slightly_smiling_face: ~9000 brains forget less fast</text>
  </message>
  <message>
    <ts>2017-06-19T17:57:22.838187</ts>
    <user>U3SQ42JJW</user>
    <text>:grin:</text>
  </message>
  <message>
    <ts>2017-06-19T23:06:32.654063</ts>
    <user>U0FQ4UYRK</user>
    <text>This is possibly a &lt;#C0F2GS35Z|node&gt; thing, but is there anything that allows people to write simple command-line apps with Elm? I've found &lt;https://github.com/laszlopandy/elm-console&gt;, but it's intentionally semi-abandoned (not needed for the author's use-case anymore).</text>
  </message>
  <message>
    <ts>2017-06-19T23:07:00.656832</ts>
    <user>U0FQ4UYRK</user>
    <text>(Just interested in either taking lines of input from STDIN, or reading a file. The latter is optional.)</text>
  </message>
  <message>
    <ts>2017-06-20T01:44:47.659292</ts>
    <user>U2GPX0EKC</user>
    <text>&lt;@U0FQ4UYRK&gt; elm-repl?</text>
  </message>
  <message>
    <ts>2017-06-20T03:28:36.609306</ts>
    <user>U0FQ4UYRK</user>
    <text>&lt;@U2GPX0EKC&gt; Command-line app, as in:
```
$ cat mybigfile.txt | ./my-elm-app
Lines: 4000
Done.
```
... if `my-elm-app` were a command-line app that listed the number of lines from stdin and then printed Done.</text>
  </message>
  <message>
    <ts>2017-06-20T03:29:28.620233</ts>
    <user>U0FQ4UYRK</user>
    <text>Even having the capability for just goosing around with it. My options at the moment are "typing commands into elm-repl" or "writing a browser UI".</text>
  </message>
  <message>
    <ts>2017-06-20T03:29:48.624588</ts>
    <user>U2GPX0EKC</user>
    <text>Maybe they havent made that possible</text>
  </message>
  <message>
    <ts>2017-06-20T03:29:52.625235</ts>
    <user>U0FQ4UYRK</user>
    <text>That elm-console library above _used_ to do something like this, but it's pre-Signal-elimination.</text>
  </message>
  <message>
    <ts>2017-06-20T03:30:20.632184</ts>
    <user>U3SJEDR96</user>
    <text>so, you can set your elm app up as a worker (using `Platform.program`), and set up an incoming and outgoing port - incoming where you stream stdin to, outgoing you dump on the console</text>
  </message>
  <message>
    <ts>2017-06-20T03:30:36.635626</ts>
    <user>U0FQ4UYRK</user>
    <text>(&lt;@U2GPX0EKC&gt;: Yeah, I don't see this being something that comes out of the box. More interested in people who've tried to make it work.)</text>
  </message>
  <message>
    <ts>2017-06-20T03:31:07.642506</ts>
    <user>U0FQ4UYRK</user>
    <text>&lt;@U3SJEDR96&gt; Ah, okay; as in, wrapping it in a `#!/usr/bin/env node` script that calls the compiled Elm JS.</text>
  </message>
  <message>
    <ts>2017-06-20T03:31:24.645969</ts>
    <user>U3SJEDR96</user>
    <text>for a "write only" cli app, I had sometihng like this as the "runner":
```
const Elm = require('./elm.js');

const app = Elm.App.worker();

app.ports.emit.subscribe((msg) =&amp;gt; {
  console.log(msg);
});

```</text>
  </message>
  <message>
    <ts>2017-06-20T03:32:12.655985</ts>
    <user>U0FQ4UYRK</user>
    <text>Got it. Thanks. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T03:32:22.658384</ts>
    <user>U3SJEDR96</user>
    <text>note, also, that &lt;@U0JUBLV8F&gt; is exploring what the options are for elm cli apps, and how to make it the great experience we've come to expect from Elm</text>
  </message>
  <message>
    <ts>2017-06-20T03:32:56.665258</ts>
    <user>U0U6ML22H</user>
    <text>very interesting, thanks for the info!</text>
  </message>
  <message>
    <ts>2017-06-20T03:34:34.685395</ts>
    <user>U3SJEDR96</user>
    <text>playing around with that type of pattern, I managed to create a proof-of-concept cli benchmark runner - &lt;http://g.recordit.co/2tE7m7pAl0.gif&gt; - so it's a viable approach :wink:</text>
  </message>
  <message>
    <ts>2017-06-20T03:39:16.744936</ts>
    <user>U3SJEDR96</user>
    <text>and &lt;https://github.com/zwilias/elm-benchmark-cli&gt; for the code :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T03:44:23.810909</ts>
    <user>U0H3A9XLN</user>
    <text>Hello folks! Is anyone aware of a pure elm way to make tooltips? Something like in bootsrap.</text>
  </message>
  <message>
    <ts>2017-06-20T03:47:18.848783</ts>
    <user>U0CLDU8UB</user>
    <text>Pure CSS solutions exist</text>
  </message>
  <message>
    <ts>2017-06-20T03:48:17.861394</ts>
    <user>U0H3A9XLN</user>
    <text>Oh, thanks &lt;@U0CLDU8UB&gt;!</text>
  </message>
  <message>
    <ts>2017-06-20T04:26:25.418744</ts>
    <user>U5GJ5FEAU</user>
    <text>In the elm-spa-example &lt;@U0CL0AS3V&gt; mentions that most of the Main.elm would go away in Elm 0.19 . I'm curious what would go away, and maybe if we could help in the process. any idea where should i be looking :smile:</text>
  </message>
  <message>
    <ts>2017-06-20T04:31:49.503330</ts>
    <user>U5GJ5FEAU</user>
    <text>&lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L25&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T04:32:01.506355</ts>
    <user>U3SJEDR96</user>
    <text>so one of the features that's being considered for 0.19 is code splitting - a separate, minimal bundle per route. To enable that, routing and the concept of "pages" will become a first-level concept in Elm, most likely to be configured through a new type of `elm-package.json`. This should take care of routing, bundling, code splitting, and handling the boilerplate that's currently involved in managing SPA's</text>
  </message>
  <message>
    <ts>2017-06-20T04:32:37.516139</ts>
    <user>U3SJEDR96</user>
    <text>you can read some more of what the roadmap looks like here &lt;https://github.com/elm-lang/projects/blob/master/roadmap.md&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T04:38:26.605593</ts>
    <user>U5GJ5FEAU</user>
    <text>thanks &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T04:39:33.621973</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0FQ4UYRK&gt; I gave a talk about this at osloelmday, &lt;https://www.youtube.com/watch?v=FUHlnxQJTMM&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T04:40:28.636392</ts>
    <user>U0FQ4UYRK</user>
    <text>Ta. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T04:50:09.788141</ts>
    <user>U28J39X6J</user>
    <text>Hi there! 

Just published my first elm package &lt;https://github.com/amaksimov/elm-multikey-handling&gt; :relaxed: with some extra helpers for handling multiple key combinations on nodes.
Tell me please, this solution can be useful?</text>
  </message>
  <message>
    <ts>2017-06-20T04:52:26.824821</ts>
    <user>U4872964V</user>
    <text>is it useful for you? then yes :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T04:54:19.855079</ts>
    <user>U28J39X6J</user>
    <text>Of course, yes! Maybe I missed some functions and approaches in the core libs - and it all looks like crutches)</text>
  </message>
  <message>
    <ts>2017-06-20T04:55:46.878662</ts>
    <user>U0CLDU8UB</user>
    <text>You might consider utilizing the low level features of my keyboard-extra package to get type safe keys for your package, too :)</text>
  </message>
  <message>
    <ts>2017-06-20T04:57:11.901938</ts>
    <user>U0CLDU8UB</user>
    <text>Then you could have a `|&amp;gt; with CharC` sort of generic API</text>
  </message>
  <message>
    <ts>2017-06-20T04:58:55.930436</ts>
    <user>U28J39X6J</user>
    <text>Thank you, it sounds good! I’ll take a look at your package)</text>
  </message>
  <message>
    <ts>2017-06-20T05:18:18.243069</ts>
    <user>U3R7CKQRX</user>
    <text>Hi everyone, we at Shore in Munich we are looking for guys that are passionate about Elm. Our Elm codebase is increasing every day and we are hiring. If you are interested please ping me or apply directly &lt;https://www.shore.com/en/jobs?gh_jid=97893&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T05:18:48.250562</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U3R7CKQRX&gt; check out &lt;#C0LUAGWRK|jobs&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T05:19:01.254024</ts>
    <user>U3R7CKQRX</user>
    <text>oh cool, thanks</text>
  </message>
  <message>
    <ts>2017-06-20T05:19:02.254378</ts>
    <user>U3R7CKQRX</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T05:19:38.263536</ts>
    <user>U3SJEDR96</user>
    <text>there's a fixed format in that channel, so be sure to post it formatted correctly :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T05:23:32.323568</ts>
    <user>U0J8D9M2P</user>
    <text>How do you clean generated `tmp-[hash]/emiiter.js`?</text>
  </message>
  <message>
    <ts>2017-06-20T05:24:06.332492</ts>
    <user>U3SJEDR96</user>
    <text>the elm-test stuff? it it's autoremoved, afaik</text>
  </message>
  <message>
    <ts>2017-06-20T05:25:17.351616</ts>
    <user>U0J8D9M2P</user>
    <text>Every time I run `webpack` new files are generated, but old ones are not removed</text>
  </message>
  <message>
    <ts>2017-06-20T05:25:33.356106</ts>
    <user>U3SJEDR96</user>
    <text>oh, webpack. No idea, then :confused:</text>
  </message>
  <message>
    <ts>2017-06-20T05:29:36.419325</ts>
    <user>U41NK9BM4</user>
    <text>Webpack is like regular expressions.  You known that quote: «Some people, when confronted with a problem, think “I know, I’ll use Webpack.” Now they have two problems.»  :stuck_out_tongue_winking_eye:</text>
  </message>
  <message>
    <ts>2017-06-20T05:31:27.449225</ts>
    <user>U0J8D9M2P</user>
    <text>&lt;@U41NK9BM4&gt; what do you use to run server for elm?</text>
  </message>
  <message>
    <ts>2017-06-20T06:06:13.975060</ts>
    <user>U5GJ5FEAU</user>
    <text>christophp: sweet! some months ago and i'd have jumped to this opportunity. plus point, i was already in munich :smile:</text>
  </message>
  <message>
    <ts>2017-06-20T06:09:21.020168</ts>
    <user>U0U6ML22H</user>
    <text>hey, so I've just noticed that I'm suffering badly from the Elm compiler using too many CPUs when building (&lt;https://github.com/elm-lang/elm-make/issues/159&gt;)</text>
  </message>
  <message>
    <ts>2017-06-20T06:09:55.027953</ts>
    <user>U0U6ML22H</user>
    <text>building and using sysconfcpus (`sysconfcpus -n 1`) works, but I'm not sure how to do it with our webpack scripts</text>
  </message>
  <message>
    <ts>2017-06-20T06:10:05.030249</ts>
    <user>U0U6ML22H</user>
    <text>anyone encountered (and preferably solved ;)) this issue?</text>
  </message>
  <message>
    <ts>2017-06-20T06:10:16.032978</ts>
    <user>U0EUHKVGB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-20T06:10:25.035238</ts>
    <user>U0EUHKVGB</user>
    <text>Just call webpack with sysconfcpus</text>
  </message>
  <message>
    <ts>2017-06-20T06:10:37.037917</ts>
    <user>U0U6ML22H</user>
    <text>of course</text>
  </message>
  <message>
    <ts>2017-06-20T06:10:40.038579</ts>
    <user>U0EUHKVGB</user>
    <text>`sysconfcpus -n 1 webpack`</text>
  </message>
  <message>
    <ts>2017-06-20T06:10:58.042851</ts>
    <user>U0U6ML22H</user>
    <text>somehow, I got stuck trying to call elm make that way, but it obviously cascades...</text>
  </message>
  <message>
    <ts>2017-06-20T06:11:03.043958</ts>
    <user>U0U6ML22H</user>
    <text>thanks Noah, sorry about that</text>
  </message>
  <message>
    <ts>2017-06-20T06:22:49.204474</ts>
    <user>U0H3A9XLN</user>
    <text>What is the best way to represent relational data in Elm?

For example I do have two rest endpoints which I can use to fetch user and posts. Within user response I will get list of ids of posts of the user. Then I need to do separate requests to fetch each post.

```
user = {
  id : '123',
  posts: ['456', '789']
}

post = {
  id: '456',
  text: 'hello world'
}
```

Also I am using `RemoteData` to represent data which comes from the server.</text>
  </message>
  <message>
    <ts>2017-06-20T06:28:23.278055</ts>
    <user>U217F5W11</user>
    <text>&lt;@U0H3A9XLN&gt; not sure about "best" since that's a loaded term, but how would you plan to simply store the list of posts?</text>
  </message>
  <message>
    <ts>2017-06-20T06:29:36.293442</ts>
    <user>U0H3A9XLN</user>
    <text>That’s one of the questions. Ideally I would expect it to be something along the lines of `List (RemoteData Post)` since I’d like to be able to handle errors/loading states separately for each post.</text>
  </message>
  <message>
    <ts>2017-06-20T06:30:31.306024</ts>
    <user>U217F5W11</user>
    <text>Have you considered a `Dict Int Post`? Those can be advantageous when we have a bag of things like posts which might be dynamically loading or disappearing and for which we want to search by an id</text>
  </message>
  <message>
    <ts>2017-06-20T06:31:15.315786</ts>
    <user>U217F5W11</user>
    <text>Or even `Dict Int (RemoteData Post)` in your case</text>
  </message>
  <message>
    <ts>2017-06-20T06:31:25.317983</ts>
    <user>U4872964V</user>
    <text>I have `Dict String (RemoteData ...)` in one of my projects</text>
  </message>
  <message>
    <ts>2017-06-20T06:31:33.319807</ts>
    <user>U4872964V</user>
    <text>it works well</text>
  </message>
  <message>
    <ts>2017-06-20T06:31:44.322450</ts>
    <user>U0H3A9XLN</user>
    <text>Could you, please, write types for User and Post as you would do in your Elm code?</text>
  </message>
  <message>
    <ts>2017-06-20T06:32:38.334327</ts>
    <user>U217F5W11</user>
    <text>That may depend on how many posts a user might have, but here is one option</text>
  </message>
  <message>
    <ts>2017-06-20T06:32:46.335971</ts>
    <user>U0H3A9XLN</user>
    <text>The part I am more interesting about is how to handle relations within data, since originally you get fields as id’s</text>
  </message>
  <message>
    <ts>2017-06-20T06:34:10.354200</ts>
    <user>U3SJEDR96</user>
    <text>One option is to represent it very much like you wrote it before: `type alias User = { id : Int, posts : List Int }` and have a `Dict Int (RemoteData Post)` where you can look up those posts for displaying</text>
  </message>
  <message>
    <ts>2017-06-20T06:34:14.354879</ts>
    <user>U217F5W11</user>
    <text>```
type alias User =
  { id: Int
  , posts: List Int
  }

type alias Post =
  { id: Int
  , content : String
  }

type alias Posts = Dict Int (RemiteData Post)
```</text>
  </message>
  <message>
    <ts>2017-06-20T06:37:56.401935</ts>
    <user>U0H3A9XLN</user>
    <text>Ok, I see. Is there a way to use it “inline”.</text>
  </message>
  <message>
    <ts>2017-06-20T06:38:49.413435</ts>
    <user>U0H3A9XLN</user>
    <text>So If I have multiple users in my model I do not have to store all their posts in one `Dict`. This is due to skip cache invalidation problems.</text>
  </message>
  <message>
    <ts>2017-06-20T06:39:57.427959</ts>
    <user>U4872964V</user>
    <text>You can have `posts` be a `List (RemoteData Post)` in `User`</text>
  </message>
  <message>
    <ts>2017-06-20T06:40:45.439014</ts>
    <user>U4872964V</user>
    <text>but that won’t work, you’d need the id, so you probably want `List (Int, RemoteData Post)`</text>
  </message>
  <message>
    <ts>2017-06-20T06:41:03.442789</ts>
    <user>U4872964V</user>
    <text>or `String` as it seems your ids are strings</text>
  </message>
  <message>
    <ts>2017-06-20T06:41:46.452028</ts>
    <user>U4872964V</user>
    <text>it depends on what you actually want</text>
  </message>
  <message>
    <ts>2017-06-20T06:42:44.464493</ts>
    <user>U0H3A9XLN</user>
    <text>Ok, that seems reasonable. Thank you :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T06:48:10.532615</ts>
    <user>U217F5W11</user>
    <text>You can do the dict online too</text>
  </message>
  <message>
    <ts>2017-06-20T06:48:40.538854</ts>
    <user>U217F5W11</user>
    <text>And I would recommend converting to an Int id on load to remove that ambiguity</text>
  </message>
  <message>
    <ts>2017-06-20T06:57:17.647824</ts>
    <user>U0H3A9XLN</user>
    <text>Well, I can’t really convert it, because I have multiple relations in my “User” alternative. And `Task` do not provide any way to make requests in parallel.</text>
  </message>
  <message>
    <ts>2017-06-20T07:10:30.819406</ts>
    <user>U5T739RFW</user>
    <text>hardfire: I got scared reading that actually. What about my header and footer? I have complex header, with dropdown menu, and whole model/update/view of its own. Header is a not a page, so what will happen.</text>
  </message>
  <message>
    <ts>2017-06-20T07:13:55.861224</ts>
    <user>U3SJEDR96</user>
    <text>so do the pages in that example - I'm fairly confident that there will be a way to allow that type of behaviour in whatever Evan comes up with</text>
  </message>
  <message>
    <ts>2017-06-20T07:18:49.922007</ts>
    <user>U217F5W11</user>
    <text>&lt;@U0H3A9XLN&gt; what do you mean that you cannot convert it? also, why can you not make requests in parallel?</text>
  </message>
  <message>
    <ts>2017-06-20T07:19:57.935888</ts>
    <user>U5GJ5FEAU</user>
    <text>yes, true! I hope even if some abstraction over the pages is added, there is a way to handle the passing of Msg and everyting manually as now.</text>
  </message>
  <message>
    <ts>2017-06-20T07:20:25.941989</ts>
    <user>U5GJ5FEAU</user>
    <text>or that is kept in mind while designing the whole thing. Thus curious if there are any design docs, or what the final API would look like</text>
  </message>
  <message>
    <ts>2017-06-20T07:21:26.955077</ts>
    <user>U5T739RFW</user>
    <text>I guess we should not discuss all this at this juncture. I am sure such an obvious case they will consider, and no point giving feedback on / discussing things that are not finalized/proposed yet.</text>
  </message>
  <message>
    <ts>2017-06-20T07:37:28.159536</ts>
    <user>U0H3A9XLN</user>
    <text>&lt;@U217F5W11&gt; there is no `Task.parallel`. What I mean is that I’d be able to fetch all the data at once in the `Task` chain and then I don’t need to store ids somewhere.</text>
  </message>
  <message>
    <ts>2017-06-20T07:38:23.171554</ts>
    <user>U217F5W11</user>
    <text>do you mean parallel or sequential, like, get the user and then get all of the posts the user request referenced?</text>
  </message>
  <message>
    <ts>2017-06-20T07:38:35.173946</ts>
    <user>U217F5W11</user>
    <text>or, get these three things all at the same starting point</text>
  </message>
  <message>
    <ts>2017-06-20T07:39:10.181349</ts>
    <user>U0H3A9XLN</user>
    <text>In this case they are sequential, but in case user have posts and friends then I want all requests for posts and friends be parallel</text>
  </message>
  <message>
    <ts>2017-06-20T07:39:43.188339</ts>
    <user>U0H3A9XLN</user>
    <text>However I’ve already implemented things as tuples and it works more or less nice :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T07:39:55.190806</ts>
    <user>U217F5W11</user>
    <text>not sure Elm blocks you from doing that. We have `Task.andThen` to work with those data-sequential requests and `Cmd.batch` to dispatch multiple tasks at once</text>
  </message>
  <message>
    <ts>2017-06-20T07:41:09.206335</ts>
    <user>U0H3A9XLN</user>
    <text>Cmd do not have `andThen` so I can’t transform data inside task chains. I have to go through update with them. In this case I either have to store ids somewhere or have two different types for `User`.</text>
  </message>
  <message>
    <ts>2017-06-20T07:41:49.214928</ts>
    <user>U217F5W11</user>
    <text>you don’t need to store those ids though, you can pass them along in a new task</text>
  </message>
  <message>
    <ts>2017-06-20T07:41:49.214934</ts>
    <user>U0H3A9XLN</user>
    <text>This is basically continuation of

&amp;gt; What I mean is that I’d be able to fetch all the data at once in the `Task` chain and then I don’t need to store ids somewhere.</text>
  </message>
  <message>
    <ts>2017-06-20T07:42:15.220274</ts>
    <user>U0H3A9XLN</user>
    <text>So with current `Task` API it seems to be impossible for me</text>
  </message>
  <message>
    <ts>2017-06-20T07:42:39.225609</ts>
    <user>U0H3A9XLN</user>
    <text>But I do it through update and it seems fine</text>
  </message>
  <message>
    <ts>2017-06-20T07:42:46.227034</ts>
    <user>U0H3A9XLN</user>
    <text>So no big worries</text>
  </message>
  <message>
    <ts>2017-06-20T07:43:00.229977</ts>
    <user>U217F5W11</user>
    <text>so something like…

```
getUser : UserId -&amp;gt; Task String User
```

becomes

```
getUser : UserId -&amp;gt; Task String (User, Cmd msg)
```</text>
  </message>
  <message>
    <ts>2017-06-20T07:43:45.239855</ts>
    <user>U217F5W11</user>
    <text>and then…

```
getUser
  |&amp;gt; andThen (\user -&amp;gt; (user, getPosts user.postIds) )
```</text>
  </message>
  <message>
    <ts>2017-06-20T07:47:26.288190</ts>
    <user>U5GJ5FEAU</user>
    <text>i do something like `Task.map2 (\posts friends -&amp;gt; updateModel posts friends) Data.getPosts Data.getFriends` not sure if they are parallel or not. never thought of that</text>
  </message>
  <message>
    <ts>2017-06-20T07:47:39.290976</ts>
    <user>U5GJ5FEAU</user>
    <text>&lt;@U217F5W11&gt; ^</text>
  </message>
  <message>
    <ts>2017-06-20T07:48:36.303285</ts>
    <user>U3SJEDR96</user>
    <text>they're not</text>
  </message>
  <message>
    <ts>2017-06-20T07:48:41.304273</ts>
    <user>U217F5W11</user>
    <text>but you may be hitting an intrinsic semantic question (leading to needing to deal with it in update) - is there ever a time when you want to get the user but not the posts? if they are always together, is there a reason not to just handle it in the update function?

or, maybe that’s the question: what is it that leads you to not want to deal with it in the update function?</text>
  </message>
  <message>
    <ts>2017-06-20T07:48:44.304870</ts>
    <user>U0H3A9XLN</user>
    <text>Yeah, they are not :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T07:52:55.359942</ts>
    <user>U5GJ5FEAU</user>
    <text>dang! good to know :smile:</text>
  </message>
  <message>
    <ts>2017-06-20T07:53:20.365300</ts>
    <user>U5GJ5FEAU</user>
    <text>i always thought the Tasks were just sent off one after the other without waiting for the results</text>
  </message>
  <message>
    <ts>2017-06-20T08:53:49.305277</ts>
    <user>U0H3A9XLN</user>
    <text>Is there a way to pattern match on list field inside record which is inside union type tag? Something like:

```
Just { list = x :: xs } -&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-06-20T08:54:46.322510</ts>
    <user>U0U6ML22H</user>
    <text>I don't think you can pattern match on Records, no</text>
  </message>
  <message>
    <ts>2017-06-20T08:59:16.406155</ts>
    <user>U4872964V</user>
    <text>depending on your other matches, you can match on something like `case Maybe.map .list x of x :: xs -&amp;gt; ` though</text>
  </message>
  <message>
    <ts>2017-06-20T09:00:24.430527</ts>
    <user>U4872964V</user>
    <text>I sometimes do things like this to reduce duplication in `case`:
```
case (someFun x, someOtherFun x) of
```</text>
  </message>
  <message>
    <ts>2017-06-20T09:02:45.478112</ts>
    <user>U0U6ML22H</user>
    <text>it's a nice, handy trick, indeed</text>
  </message>
  <message>
    <ts>2017-06-20T09:05:35.534528</ts>
    <user>U4872964V</user>
    <text>but it would be great with more expressive case patterns, although i see the implementation problems with detecting  missing cases etc.</text>
  </message>
  <message>
    <ts>2017-06-20T09:10:23.629171</ts>
    <user>U2LAL86AY</user>
    <text>&lt;https://gist.github.com/druzn3k/d1ce5eda51a5398e0e93&gt; - here is a cheat sheet about destructuring.</text>
  </message>
  <message>
    <ts>2017-06-20T09:48:59.475954</ts>
    <user>U0LFFASSV</user>
    <text>am I the only one who has issue with installing elm 0.18.0 from npm on Linux (CI)?</text>
  </message>
  <message>
    <ts>2017-06-20T09:50:48.519527</ts>
    <user>U5U2SN24D</user>
    <text>Is there a specific error message you're getting?</text>
  </message>
  <message>
    <ts>2017-06-20T09:57:36.683118</ts>
    <user>U0LFFASSV</user>
    <text>yeah it's `incorrect header check`</text>
  </message>
  <message>
    <ts>2017-06-20T09:58:04.695136</ts>
    <user>U0LFFASSV</user>
    <text>on `Downloading Elm binaries from &lt;https://dl.bintray.com/elmlang/elm-platform/0.18.0/linux-x64.tar.gz&gt;`</text>
  </message>
  <message>
    <ts>2017-06-20T09:58:12.698303</ts>
    <user>U1CE9DL9H</user>
    <text>here we go again</text>
  </message>
  <message>
    <ts>2017-06-20T09:58:22.702995</ts>
    <user>U3SJEDR96</user>
    <text>retry. It's bintray having hiccups</text>
  </message>
  <message>
    <ts>2017-06-20T09:59:24.728542</ts>
    <user>U1CE9DL9H</user>
    <text>for context: bintray has been spotty for some weeks, some solution is being worked on</text>
  </message>
  <message>
    <ts>2017-06-20T09:59:42.735916</ts>
    <user>U0LFFASSV</user>
    <text>I'm tying to `wget` it on laptop now - seems to be working</text>
  </message>
  <message>
    <ts>2017-06-20T10:00:03.745289</ts>
    <user>U0LFFASSV</user>
    <text>btw CI is circleci</text>
  </message>
  <message>
    <ts>2017-06-20T10:00:23.755207</ts>
    <user>U0LFFASSV</user>
    <text>will try rebuild for 5th time :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-20T10:00:50.767316</ts>
    <user>U3SJEDR96</user>
    <text>Might want to wrap the `npm install` in a retry script for now :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-20T10:01:48.792954</ts>
    <user>U3SJEDR96</user>
    <text>something like &lt;https://github.com/NoRedInk/elm-ops-tooling/blob/master/with_retry.rb&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T10:03:12.827838</ts>
    <user>U0LFFASSV</user>
    <text>thx for tip. unfortunately it works this time</text>
  </message>
  <message>
    <ts>2017-06-20T11:25:33.957339</ts>
    <user>U177VRFJP</user>
    <text>can anyone help me understand the difference between `Html.Lazy` and `Html.Keyed` and when to use them?</text>
  </message>
  <message>
    <ts>2017-06-20T11:28:47.041427</ts>
    <user>U0EUHKVGB</user>
    <text>lazy is to reduce render time. Keyed is to make rendering more consistent.</text>
  </message>
  <message>
    <ts>2017-06-20T11:29:01.047572</ts>
    <user>U0EUHKVGB</user>
    <text>Use lazy when your views are slow to render. This will be rarely.</text>
  </message>
  <message>
    <ts>2017-06-20T11:29:28.059406</ts>
    <user>U0EUHKVGB</user>
    <text>Use keyed when you have lists of items, e.g in an `select`, to help Elm’s virtual-dom render things in the right way.</text>
  </message>
  <message>
    <ts>2017-06-20T11:29:45.067070</ts>
    <user>U0EUHKVGB</user>
    <text>This will also be rarely, but it depends a lot on your view.</text>
  </message>
  <message>
    <ts>2017-06-20T11:33:13.157325</ts>
    <user>U177VRFJP</user>
    <text>so if for example I have a list of 100 items that can be filtered based on an input field, will keyed help speed up rendering the filtered nodes?</text>
  </message>
  <message>
    <ts>2017-06-20T11:34:00.177985</ts>
    <user>U17R1GD96</user>
    <text>How to insert HTML into Elm? I have to do that because some chunks of HTML code comes from the database. I tried to follow this article &lt;https://www.reddit.com/r/elm/comments/49w48m/inserting_html_from_api/&gt; but Elm complains it cannot find VirtualDom package…</text>
  </message>
  <message>
    <ts>2017-06-20T11:34:00.178003</ts>
    <user>U0EUHKVGB</user>
    <text>Yes. But benchmark, always benchmark</text>
  </message>
  <message>
    <ts>2017-06-20T11:35:04.204822</ts>
    <user>U177VRFJP</user>
    <text>great, thanks noah</text>
  </message>
  <message>
    <ts>2017-06-20T11:36:00.228915</ts>
    <user>U17R1GD96</user>
    <text>found another solution at &lt;https://groups.google.com/forum/#!topic/elm-discuss/icpKL-AgRlg&gt;, checking…</text>
  </message>
  <message>
    <ts>2017-06-20T11:36:52.250459</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U17R1GD96&gt; you have to install virtualdom</text>
  </message>
  <message>
    <ts>2017-06-20T11:37:00.253929</ts>
    <user>U0EUHKVGB</user>
    <text>`elm-package install elm-lang/virtualdom`</text>
  </message>
  <message>
    <ts>2017-06-20T11:37:56.277350</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3x9wfvL5DKVa1/0&gt; and then use it something like this</text>
  </message>
  <message>
    <ts>2017-06-20T11:39:35.317936</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U17R1GD96&gt; I use `Markdown.toHtml` to insert html</text>
  </message>
  <message>
    <ts>2017-06-20T11:39:47.322642</ts>
    <user>U17R1GD96</user>
    <text>&lt;@U0EUHKVGB&gt; I don’t need it. This works: ```module DangerousHtml exposing (innerHtml)

import Html exposing (Html, span)
import Html.Attributes exposing (property)
import Json.Encode exposing (string)


innerHtml : String -&amp;gt; Html msg
innerHtml dangerousHtml =
    span [ property "innerHTML" &amp;lt;| string dangerousHtml ] []```</text>
  </message>
  <message>
    <ts>2017-06-20T11:40:56.351732</ts>
    <user>U0FP80EKB</user>
    <text>I ran into problems with `innerHTML`, as it didn’t seem Elm tracked changes to it. While using `Markdown.toHtml` creates actual virtual dom nodes.</text>
  </message>
  <message>
    <ts>2017-06-20T11:41:11.357837</ts>
    <user>U0FP80EKB</user>
    <text>&lt;http://package.elm-lang.org/packages/evancz/elm-markdown/3.0.2/Markdown&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T11:41:55.376093</ts>
    <user>U17R1GD96</user>
    <text>But I don’t have the source in the MarkDown format. It’s HTML.</text>
  </message>
  <message>
    <ts>2017-06-20T11:42:01.378809</ts>
    <user>U0FP80EKB</user>
    <text>HTML is markdown</text>
  </message>
  <message>
    <ts>2017-06-20T11:42:09.381999</ts>
    <user>U17R1GD96</user>
    <text>hehe, right :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T11:42:11.382848</ts>
    <user>U0FP80EKB</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T11:42:19.386122</ts>
    <user>U17R1GD96</user>
    <text>more or less</text>
  </message>
  <message>
    <ts>2017-06-20T11:42:21.387245</ts>
    <user>U0FP80EKB</user>
    <text>I use this in several places in my app (across two products), and it works great</text>
  </message>
  <message>
    <ts>2017-06-20T11:43:11.407931</ts>
    <user>U0FP80EKB</user>
    <text>And since it creates vdom nodes, elm can use it effectively for diffing and rendering</text>
  </message>
  <message>
    <ts>2017-06-20T11:43:21.412199</ts>
    <user>U17R1GD96</user>
    <text>I have `&amp;lt;a href="foo"&amp;gt;bar&amp;lt;/a&amp;gt;` inside. AFAIK, Markdown uses a different syntax`[foor](bar)`</text>
  </message>
  <message>
    <ts>2017-06-20T11:43:28.415061</ts>
    <user>U0FP80EKB</user>
    <text>No, that works</text>
  </message>
  <message>
    <ts>2017-06-20T11:43:31.416520</ts>
    <user>U0FP80EKB</user>
    <text>Html is a subset of markdown</text>
  </message>
  <message>
    <ts>2017-06-20T11:43:58.427929</ts>
    <user>U0FP80EKB</user>
    <text>So, `Markdown.toHtml [] "&amp;lt;a href="foo"&amp;gt;bar&amp;lt;/a&amp;gt;"` will yield `&amp;lt;a href="foo"&amp;gt;bar&amp;lt;/a&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-06-20T11:44:28.440836</ts>
    <user>U0FP80EKB</user>
    <text>In fact, if you want to add things, such as `target` to the link, you have to use the html form, not the `[foo](bar)` form (with standard Markdown parsers, that is)</text>
  </message>
  <message>
    <ts>2017-06-20T11:44:38.444955</ts>
    <user>U0FP80EKB</user>
    <text>Also, using `Markdown.toHtml` means you can pass in the sanitize option, if you want.</text>
  </message>
  <message>
    <ts>2017-06-20T12:03:14.923125</ts>
    <user>U17R1GD96</user>
    <text>&lt;@U0FP80EKB&gt; it does not work. My HTML is always escaped whatever `sanitize` value I use :disappointed:  I changed my code into 
```
module DangerousHtml exposing (dangerousHtml)

import Html exposing (Html)
import Markdown exposing (Options, defaultOptions, toHtmlWith)


options : Options
options =
    { defaultOptions | sanitize = False }


dangerousHtml : String -&amp;gt; Html msg
dangerousHtml userInput =
    Markdown.toHtmlWith options [] userInput

```</text>
  </message>
  <message>
    <ts>2017-06-20T12:06:20.999716</ts>
    <user>U17R1GD96</user>
    <text>Markdown also wraps my html into `&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;myhtml&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;`. I don’t want it.</text>
  </message>
  <message>
    <ts>2017-06-20T12:10:24.094989</ts>
    <user>U5T739RFW</user>
    <text>May be there is some indentation. If you use python you can call `textwrap.dedent()` on the html before handing it to client.</text>
  </message>
  <message>
    <ts>2017-06-20T12:13:26.163870</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U17R1GD96&gt; interesting. I’ve not run into that. I’d say try it without the options, which is what we tend to use. Just `Markdown.toHtml`</text>
  </message>
  <message>
    <ts>2017-06-20T12:13:33.167581</ts>
    <user>U0FP80EKB</user>
    <text>Yeah, I think indentation will hurt, too.</text>
  </message>
  <message>
    <ts>2017-06-20T12:15:50.221746</ts>
    <user>U17R1GD96</user>
    <text>What is textwrap.dedent? Which package?</text>
  </message>
  <message>
    <ts>2017-06-20T12:16:55.246206</ts>
    <user>U17R1GD96</user>
    <text>I don’t use Python. OK. I will fix it somehow.</text>
  </message>
  <message>
    <ts>2017-06-20T12:18:30.282695</ts>
    <user>U17R1GD96</user>
    <text>works. cool</text>
  </message>
  <message>
    <ts>2017-06-20T12:54:46.096214</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U17R1GD96&gt; it was the indentation?</text>
  </message>
  <message>
    <ts>2017-06-20T13:40:24.116170</ts>
    <user>U37HUSJ4R</user>
    <text>Hi everyone :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T13:40:52.126333</ts>
    <user>U37HUSJ4R</user>
    <text>is it possible to pass json as a flag into `programWithFlags`?</text>
  </message>
  <message>
    <ts>2017-06-20T13:40:58.128465</ts>
    <user>U0EUHKVGB</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-20T13:41:42.144909</ts>
    <user>U37HUSJ4R</user>
    <text>great</text>
  </message>
  <message>
    <ts>2017-06-20T13:44:46.213685</ts>
    <user>U37HUSJ4R</user>
    <text>what would the type signature of main be in this case then?</text>
  </message>
  <message>
    <ts>2017-06-20T13:44:52.215760</ts>
    <user>U37HUSJ4R</user>
    <text>`main : Program Json.Decode.Value Model Msg`?</text>
  </message>
  <message>
    <ts>2017-06-20T13:45:42.235281</ts>
    <user>U17R1GD96</user>
    <text> &lt;@U0FP80EKB&gt; yes, it was indentation</text>
  </message>
  <message>
    <ts>2017-06-20T13:46:20.250019</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U37HUSJ4R&gt; yes</text>
  </message>
  <message>
    <ts>2017-06-20T13:47:32.277218</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U0EUHKVGB&gt; whats the correct way to then call by decoder on the data then?</text>
  </message>
  <message>
    <ts>2017-06-20T13:47:43.281635</ts>
    <user>U0EUHKVGB</user>
    <text>`Json.Decode.decodeValue`</text>
  </message>
  <message>
    <ts>2017-06-20T13:47:46.282475</ts>
    <user>U37HUSJ4R</user>
    <text>do you know of any examples of flags/json decoding</text>
  </message>
  <message>
    <ts>2017-06-20T13:48:41.303461</ts>
    <user>U0EUHKVGB</user>
    <text>Do you just not know how to use a decoder?</text>
  </message>
  <message>
    <ts>2017-06-20T13:48:51.306834</ts>
    <user>U0EUHKVGB</user>
    <text>Or is the flag part?</text>
  </message>
  <message>
    <ts>2017-06-20T13:48:58.309620</ts>
    <user>U37HUSJ4R</user>
    <text>flag part, I have a decoder</text>
  </message>
  <message>
    <ts>2017-06-20T13:49:15.315864</ts>
    <user>U37HUSJ4R</user>
    <text>just want to know how to pass my flag json into the decoder</text>
  </message>
  <message>
    <ts>2017-06-20T13:49:47.328097</ts>
    <user>U0EUHKVGB</user>
    <text>so, you have a function which is like this: `init : Json.Value -&amp;gt; (Model, Cmd Msg)`</text>
  </message>
  <message>
    <ts>2017-06-20T13:49:55.330858</ts>
    <user>U0EUHKVGB</user>
    <text>then that wants to look something like this:</text>
  </message>
  <message>
    <ts>2017-06-20T13:50:32.346006</ts>
    <user>U0EUHKVGB</user>
    <text>```
init value =
  case Json.Decode.decodeValue myDecoder value of
    Err e -&amp;gt; some error model
    Ok actualModel -&amp;gt; (model, Cmd.none)
```</text>
  </message>
  <message>
    <ts>2017-06-20T13:50:40.349000</ts>
    <user>U0EUHKVGB</user>
    <text>where `myDecoder` is the decoder that you have.</text>
  </message>
  <message>
    <ts>2017-06-20T13:50:52.353214</ts>
    <user>U0EUHKVGB</user>
    <text>See here for more examples: &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Decode&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T13:52:08.382769</ts>
    <user>U37HUSJ4R</user>
    <text>I will take a look, thanks sir :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T13:54:23.433756</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U17R1GD96&gt; awesome! Thanks. Glad it worked.</text>
  </message>
  <message>
    <ts>2017-06-20T14:18:08.985806</ts>
    <user>U2LAL86AY</user>
    <text>what is the use/meaning of this function? &lt;http://package.elm-lang.org/packages/Fresheyeball/elm-function-extra/3.0.0/Function-Pro#mapAfter&gt; - i can't wrap my head around it :smile:</text>
  </message>
  <message>
    <ts>2017-06-20T14:19:38.020327</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U0EUHKVGB&gt; in the example above this words great if I `actualModel` is the model I wish to update, what happens when my model is something like:</text>
  </message>
  <message>
    <ts>2017-06-20T14:19:48.024256</ts>
    <user>U37HUSJ4R</user>
    <text>```
type alias Model =
    { application : Application
    }
```</text>
  </message>
  <message>
    <ts>2017-06-20T14:19:59.028167</ts>
    <user>U37HUSJ4R</user>
    <text>where Application is another type alias</text>
  </message>
  <message>
    <ts>2017-06-20T14:20:29.040255</ts>
    <user>U37HUSJ4R</user>
    <text>how do I pass `model` into the init function so i can do something like `{model | application = data}`</text>
  </message>
  <message>
    <ts>2017-06-20T14:21:25.061363</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U37HUSJ4R&gt; you have to define a static `defaultModel` or something</text>
  </message>
  <message>
    <ts>2017-06-20T14:21:43.067882</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2LAL86AY&gt; That library isn’t really very Elm-y</text>
  </message>
  <message>
    <ts>2017-06-20T14:22:26.083923</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U0EUHKVGB&gt; ok, do I pass this then as 2nd param of init?</text>
  </message>
  <message>
    <ts>2017-06-20T14:22:45.091181</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2LAL86AY&gt; but it’s basically mapping the function contained inside the `Arrow`.</text>
  </message>
  <message>
    <ts>2017-06-20T14:22:56.095025</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U37HUSJ4R&gt; You don’t - it’s a _static_ default</text>
  </message>
  <message>
    <ts>2017-06-20T14:23:20.104475</ts>
    <user>U0EUHKVGB</user>
    <text>e.g
```
defaultModel = { application = defaultApplication }

init flags = 
  { defaultModel | application = ... }
```</text>
  </message>
  <message>
    <ts>2017-06-20T14:25:04.144381</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U0EUHKVGB&gt; I see :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T14:26:08.169102</ts>
    <user>U2LAL86AY</user>
    <text>mapping functions instead of values? I'm familiar with mapping values - ex the maybe value.  this is what you mean by not Elm-y? 
pff - I still don't understand what mapping a function actually means :smile:</text>
  </message>
  <message>
    <ts>2017-06-20T14:28:42.227916</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2LAL86AY&gt; &lt;https://github.com/Fresheyeball/elm-function-extra/blob/3.0.0/Function.elm#L68&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T14:29:05.236510</ts>
    <user>U0EUHKVGB</user>
    <text>it’s basically just saying “call this first function, then pass the output to this second function</text>
  </message>
  <message>
    <ts>2017-06-20T14:29:56.255804</ts>
    <user>U0EUHKVGB</user>
    <text>In normal Elm, it looks like this:

```
mapAfter : a -&amp;gt; (a -&amp;gt; b) -&amp;gt; (b -&amp;gt; c) -&amp;gt; c
mapAfter value firstFn secondFn =
  secondFn (firstFn value)
```</text>
  </message>
  <message>
    <ts>2017-06-20T14:29:57.256473</ts>
    <user>U0EUHKVGB</user>
    <text>that’s all.</text>
  </message>
  <message>
    <ts>2017-06-20T14:36:23.405380</ts>
    <user>U2LAL86AY</user>
    <text>didn't thought of it as `mapping` - function composition is mapping. hmm.</text>
  </message>
  <message>
    <ts>2017-06-20T14:37:54.439248</ts>
    <user>U2GPAEU1L</user>
    <text>Hey everyone, was looking for some documentation on `Html.Keyed` but couldn't find anything that answered my questions.

So as far as I understand, if I have _different_ keys, then the VDOM will avoid doing patches (such as changing text) and realize that these nodes cannot be re-used with each other.

My question is, if I have the _same_ key, does it mean "these elements are the same" or does it mean that "these elements can be reused with eachother when doing diffs, but it doesn't mean they are the same"</text>
  </message>
  <message>
    <ts>2017-06-20T14:38:33.453796</ts>
    <user>U2GPAEU1L</user>
    <text>I feel like it's: "these elements can be reused with eachother when doing diffs, but it doesn't mean they are the same"</text>
  </message>
  <message>
    <ts>2017-06-20T14:39:27.473989</ts>
    <user>U0EUHKVGB</user>
    <text>It means “special case the diffing algorithm” &lt;https://github.com/elm-lang/virtual-dom/blob/master/src/Native/VirtualDom.js#L671&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T14:39:39.478427</ts>
    <user>U0EUHKVGB</user>
    <text>Or, sort of.</text>
  </message>
  <message>
    <ts>2017-06-20T14:40:06.488589</ts>
    <user>U0EUHKVGB</user>
    <text>Readthe code - it’ll give you the best idea of what’s going on, and it’s not hard to follow  it for that case.</text>
  </message>
  <message>
    <ts>2017-06-20T14:40:37.500135</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/elm-lang/virtual-dom/blob/master/src/Native/VirtualDom.js#L1002&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T14:43:22.562621</ts>
    <user>U1CF0N0MD</user>
    <text>More importantly it helps keeping the identity of elements, which helps with &amp;lt;img src&amp;gt; or CSS animation.</text>
  </message>
  <message>
    <ts>2017-06-20T14:44:36.590018</ts>
    <user>U0EUHKVGB</user>
    <text>&amp;gt; these elements can be reused with eachother when doing diffs, but it doesn’t mean they are the same
this is close, yeah</text>
  </message>
  <message>
    <ts>2017-06-20T14:55:44.844998</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2GPAEU1L&gt; this is a good read of the same principle in React: &lt;https://facebook.github.io/react/docs/reconciliation.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T15:00:55.965196</ts>
    <user>U0K92QFST</user>
    <text>&lt;@U2LAL86AY&gt; the pattern implied by "map" just means to piece of data with some typed structure, and to bypass that structure to apply a function to the data inside</text>
  </message>
  <message>
    <ts>2017-06-20T15:01:32.979393</ts>
    <user>U0K92QFST</user>
    <text>Think of a `List` -- `map` applies a function to each item in the List, but the structure remains intact.</text>
  </message>
  <message>
    <ts>2017-06-20T15:02:27.000482</ts>
    <user>U0K92QFST</user>
    <text>in the case of function composition, you're mapping a function over the structure of another function! kind of cool.</text>
  </message>
  <message>
    <ts>2017-06-20T15:04:13.039690</ts>
    <user>U2LAL86AY</user>
    <text>kind of mind bending too :smile:</text>
  </message>
  <message>
    <ts>2017-06-20T15:04:46.052098</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U0EUHKVGB&gt; Ah ok, read that, makes more sense. It mentions: "The key only has to be unique among its siblings, not globally unique." Is this true for Elm as well? It seems that it allows duplicates and manually adds a postfix to the key: &lt;https://github.com/elm-lang/virtual-dom/blob/master/src/Native/VirtualDom.js#L1040&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T15:04:50.053428</ts>
    <user>U3SJEDR96</user>
    <text>`Decode.map` basically takes a decoder (which you can think of as a function `Decoder a : Value -&amp;gt; Result String a`) and applies a function `a -&amp;gt; b`, giving you a new `Decoder b : Value -&amp;gt; Result String b`. So if you've ever used `Decode.map`, you've used a similar pattern :wink:</text>
  </message>
  <message>
    <ts>2017-06-20T15:05:34.069705</ts>
    <user>U3SJEDR96</user>
    <text>it should be unique among siblings, but yeah, it tries to rectify the situation if it isn't, &lt;@U2GPAEU1L&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T15:05:53.076472</ts>
    <user>U0K92QFST</user>
    <text>:point_up: exactly! The decoder is a piece of data which represents a mapping from Json to some type `a`, so you're mapping a function over the decoder to transform that mapping :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-20T15:06:10.082533</ts>
    <user>U3SJEDR96</user>
    <text>but it certainly doesn't need to be globally unique, &lt;@U2GPAEU1L&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T15:06:10.082645</ts>
    <user>U0K92QFST</user>
    <text>terms become conflated so quickly in category theory land</text>
  </message>
  <message>
    <ts>2017-06-20T15:06:16.084794</ts>
    <user>U0K92QFST</user>
    <text>which is why they invent nonsense terms</text>
  </message>
  <message>
    <ts>2017-06-20T15:06:36.092208</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U3SJEDR96&gt; But if it's changing all your same-keys to be different, then it doesn't need to be unique, right?</text>
  </message>
  <message>
    <ts>2017-06-20T15:07:13.104731</ts>
    <user>U3SJEDR96</user>
    <text>no, but then you're basically in the same situation as not having keys at all</text>
  </message>
  <message>
    <ts>2017-06-20T15:07:48.117410</ts>
    <user>U3SJEDR96</user>
    <text>and stuff like css animation would get messed up if you swapped the contents of two nodes with the same key</text>
  </message>
  <message>
    <ts>2017-06-20T15:10:00.162724</ts>
    <user>U2GPAEU1L</user>
    <text>Ah I see. Ya if every key is the same then it'll make every key different, and if every key is different it's doing the overhead of checking if anything moved without success because there are no same-keys</text>
  </message>
  <message>
    <ts>2017-06-20T15:11:13.188375</ts>
    <user>U2LAL86AY</user>
    <text>i will explain what i was thinking `map` means . there was this nice picture once done on `maybe` - which maybe is a container - the mapper - is an action of opening up the container - grabbing the value - give it to a function - take the result - put it inside the container - and close the cap. :smile: - this is me a couple months ago understanding `Maybe.map`. Then you say - this exact pattern is applied to a function. Inside my mind this analogy is broken now - or at least is confusing for now. But i guess i'm learning something. Here is a similar picture - i can't find that exact one..</text>
  </message>
  <message>
    <ts>2017-06-20T15:15:53.285491</ts>
    <user>U3SJEDR96</user>
    <text>And that's the _effect_ it has, if you consider a function as data, I like that drawing :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T15:17:31.319749</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U2LAL86AY&gt; That is not a bad way to think of things, but I like to think of it a bit differently. `map` is a function which transforms functions. If you have a function `a -&amp;gt; b` lying around, `Maybe.map` will transform it for you to a function of `Maybe a -&amp;gt; Maybe b`.</text>
  </message>
  <message>
    <ts>2017-06-20T15:18:56.348582</ts>
    <user>U0K92QFST</user>
    <text>&lt;@U3SJEDR96&gt; I do consider functions to be data! This is how you can tell I know a bit of Haskell :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-20T15:19:39.363500</ts>
    <user>U0K92QFST</user>
    <text>&lt;@U2LAL86AY&gt; I remember reading the same blog post; that's a very good way to think about it</text>
  </message>
  <message>
    <ts>2017-06-20T15:20:08.373368</ts>
    <user>U23SA861Y</user>
    <text>If you consider mapping to be "apply this function to this boxed data and return to me a box of the same shape", then you can expand this to functions where is the "data" is the algorithm and the box is the abstraction of a function. So now you apply a function to a function shaped box to get another function which just so happens to be composition.</text>
  </message>
  <message>
    <ts>2017-06-20T15:20:23.378777</ts>
    <user>U0K92QFST</user>
    <text>:point_up: great summary!</text>
  </message>
  <message>
    <ts>2017-06-20T15:23:23.440837</ts>
    <user>U23SA861Y</user>
    <text>```
type Function a b = Function (a-&amp;gt;b) 

map: (b-&amp;gt;c) -&amp;gt; Function a b -&amp;gt; Function a c
map f (Function g) = 
  Function (\x -&amp;gt; f (g x))
```</text>
  </message>
  <message>
    <ts>2017-06-20T15:27:03.517499</ts>
    <user>U23SA861Y</user>
    <text>In this case there are two types so there is an equally valid map of
```
map_: (a-&amp;gt;c) -&amp;gt; Function a b -&amp;gt; Function c b
map_ f (Function g) = 
  Function (\x -&amp;gt; g (f x))
```</text>
  </message>
  <message>
    <ts>2017-06-20T15:27:58.536843</ts>
    <user>U23SA861Y</user>
    <text>maybe call the first one `andThen` and the second `map`</text>
  </message>
  <message>
    <ts>2017-06-20T15:35:02.686881</ts>
    <user>U3SJEDR96</user>
    <text>`andThen` would _probably_ be something like `andThen : (a -&amp;gt; Function c b) -&amp;gt; Function c a -&amp;gt; Function c b` (i.e. `bind` in other languages)</text>
  </message>
  <message>
    <ts>2017-06-20T15:35:42.701359</ts>
    <user>U3SJEDR96</user>
    <text>in Elm, I think your second version of `map` would be something like `mapInput`, and you first one would be just `map`</text>
  </message>
  <message>
    <ts>2017-06-20T15:36:12.711404</ts>
    <user>U37HUSJ4R</user>
    <text>If my model looks like:
```
type alias Application =
    { id : Int
    , term : Int
    , amount : Int
    }


type alias Model =
    { application : Application
    }
```

and I am trying to update the `term` value, I have `onInput UpdateTerm` on an input</text>
  </message>
  <message>
    <ts>2017-06-20T15:36:27.717120</ts>
    <user>U37HUSJ4R</user>
    <text>inside my update case statement how do I update this value?</text>
  </message>
  <message>
    <ts>2017-06-20T15:36:52.725202</ts>
    <user>U23SA861Y</user>
    <text>sure...</text>
  </message>
  <message>
    <ts>2017-06-20T15:37:29.737358</ts>
    <user>U23SA861Y</user>
    <text>pretends to know what he's talking about</text>
  </message>
  <message>
    <ts>2017-06-20T15:37:54.746196</ts>
    <user>U2GPAEU1L</user>
    <text>btw was still reading, forgot to say thanks, thanks &lt;@U3SJEDR96&gt; and &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T15:38:30.758121</ts>
    <user>U0EUHKVGB</user>
    <text>jonf: Can you clarify what you mean by this? Comes across a little hostile</text>
  </message>
  <message>
    <ts>2017-06-20T15:38:53.765635</ts>
    <user>U23SA861Y</user>
    <text>as in I pretend to know what what I'm talking about</text>
  </message>
  <message>
    <ts>2017-06-20T15:39:25.776231</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U37HUSJ4R&gt; Try asking in &lt;#C192T0Q1E|beginners&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T15:40:09.791150</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U23SA861Y&gt; I don't mean anything by it, just pointing out how those names tend to be used in common Elm libraries :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T15:44:05.871876</ts>
    <user>U3SJEDR96</user>
    <text>good call that there are two valid ways to define a `map` for a `Function a b`, tho - in which case one usually guesses which one would be the most commonly used (like `Result.map` maps the `Ok`, not the `Err`), and defining an alternative for the other one (like `Result.mapError`)</text>
  </message>
  <message>
    <ts>2017-06-20T15:49:08.979185</ts>
    <user>U23SA861Y</user>
    <text>heh, I wasn't taking offense just derriding my own inabilities</text>
  </message>
  <message>
    <ts>2017-06-20T15:49:35.987997</ts>
    <user>U2LAL86AY</user>
    <text>Thanks all for your effort and explanations. I think i'm struggling to underestand this: `function shaped box` -  functions are supposed to be actions - they do stuff - i know that functions are values - but is not like i deeply agree with that :smile: - i mean it must be true - but i think this 2 views don't marry nice in my head. How an action can have a shape?!. 

I'm having assumptions that keep me form understanding this stuff more deeply.  I can use this `map`, `andThen == flatMap == bind == concatMap`, `function composition` all day- but still i feel like you guys have another level of insight into this. We are looking at the same stuff - but i don't see all there is :smile: Anyways, i guess it comes with time and a lot of practice.</text>
  </message>
  <message>
    <ts>2017-06-20T15:53:24.069947</ts>
    <user>U23SA861Y</user>
    <text>does slack have the *me* or \me thing</text>
  </message>
  <message>
    <ts>2017-06-20T15:54:04.084003</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U23SA861Y&gt; alright, gotcha :sweat_smile: - though there's no need for that, either! It's been 153 since I wrote "hello world" in Elm, which was my first ever encounter with FP and all that comes with it - I'm arguably still new to this, too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T16:31:57.881011</ts>
    <user>U5W50TZ6C</user>
    <text>Hi! Ready for a strange question? `elm-make` runs out of memory when compiling this file: &lt;https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T16:38:39.018548</ts>
    <user>U2LAL86AY</user>
    <text>```
Failed To Save Project11:38:14 PM
Ellie couldn't save your project. Here's what the server said:

An internal server error occurred
```</text>
  </message>
  <message>
    <ts>2017-06-20T16:39:06.027596</ts>
    <user>U2LAL86AY</user>
    <text>just loaded your code into ellie and got this.</text>
  </message>
  <message>
    <ts>2017-06-20T16:39:20.032277</ts>
    <user>U5W50TZ6C</user>
    <text>I just tried to save it as an ellie project too, same issue</text>
  </message>
  <message>
    <ts>2017-06-20T16:40:34.057595</ts>
    <user>U0LPMPL2U</user>
    <text>I've seen something like this happen once when the types wrong in a recursive function. Somehow the compiler seemed to go into an infinite loop trying to figure the types out.</text>
  </message>
  <message>
    <ts>2017-06-20T16:40:34.057910</ts>
    <user>U0EUHKVGB</user>
    <text>I suspect this line: &lt;https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L41&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T16:42:34.098279</ts>
    <user>U0EUHKVGB</user>
    <text>actually, i see it</text>
  </message>
  <message>
    <ts>2017-06-20T16:42:50.103929</ts>
    <user>U0EUHKVGB</user>
    <text>Your update has mis-matching cases.</text>
  </message>
  <message>
    <ts>2017-06-20T16:43:20.114688</ts>
    <user>U0K92QFST</user>
    <text>&lt;@U2LAL86AY&gt; this is stuff that I've learned over 3 years of functional programming, reading various books, watching talks and absorbing the chatter of everyone around me! I never just looked at the code and just "got" it. As with anything else, it's gradual and takes time!</text>
  </message>
  <message>
    <ts>2017-06-20T16:43:21.114852</ts>
    <user>U0EUHKVGB</user>
    <text>there’s actually a few weird things in here :thinking_face:</text>
  </message>
  <message>
    <ts>2017-06-20T16:43:54.126066</ts>
    <user>U0K92QFST</user>
    <text>If you're interested in learning more about this stuff I would recommend the Big Purple Haskell Book :stuck_out_tongue: &lt;http://haskellbook.com/&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T16:44:14.133101</ts>
    <user>U5W50TZ6C</user>
    <text>Unfortunately I didn't write it, nor am I an elm expert, so I've had quite the time debugging it :anguished:</text>
  </message>
  <message>
    <ts>2017-06-20T16:44:40.142163</ts>
    <user>U0EUHKVGB</user>
    <text>Okay</text>
  </message>
  <message>
    <ts>2017-06-20T16:47:26.199929</ts>
    <user>U5W50TZ6C</user>
    <text>&lt;@U0EUHKVGB&gt; Could you explain what you mean by "mis-matching cases" in the update? Any idea why that breaks the compiler?</text>
  </message>
  <message>
    <ts>2017-06-20T16:48:10.214398</ts>
    <user>U0EUHKVGB</user>
    <text>Yeah, one sec, I’m just making sure</text>
  </message>
  <message>
    <ts>2017-06-20T16:49:29.241093</ts>
    <user>U3SJEDR96</user>
    <text>it's a typo - `if config.hiddenFields then`  -&amp;gt; `if options.hiddenFields then`</text>
  </message>
  <message>
    <ts>2017-06-20T16:49:45.246736</ts>
    <user>U3SJEDR96</user>
    <text>first line of `view`</text>
  </message>
  <message>
    <ts>2017-06-20T16:50:05.253646</ts>
    <user>U14Q8S4EM</user>
    <text>Plus one on &lt;@U0K92QFST&gt; ‘s book suggestion.</text>
  </message>
  <message>
    <ts>2017-06-20T16:50:19.258769</ts>
    <user>U14Q8S4EM</user>
    <text>I read a bit of it after the NYC Haskell meet upgroup recommended it</text>
  </message>
  <message>
    <ts>2017-06-20T16:50:22.259843</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U14Q8S4EM&gt;  =&amp;gt; &lt;#C0CJ671HU|random&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T16:50:24.260545</ts>
    <user>U3SJEDR96</user>
    <text>oh, wait, that breaks it completely</text>
  </message>
  <message>
    <ts>2017-06-20T16:50:53.270504</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5W50TZ6C&gt;, &lt;https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L53&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T16:51:03.274269</ts>
    <user>U0EUHKVGB</user>
    <text>this is missing `! []` to match the other line</text>
  </message>
  <message>
    <ts>2017-06-20T16:51:47.289807</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L71&gt; is refering to a name that does not exist</text>
  </message>
  <message>
    <ts>2017-06-20T16:53:37.328360</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5W50TZ6C&gt; My suggestion would be to take it line-by-line and make it as explicit as possible, replacing parts with `Debug.crash ""` until it compiles.</text>
  </message>
  <message>
    <ts>2017-06-20T16:53:54.334557</ts>
    <user>U5W50TZ6C</user>
    <text>Yeah, that's probably the next step</text>
  </message>
  <message>
    <ts>2017-06-20T16:53:59.336080</ts>
    <user>U5W50TZ6C</user>
    <text>thank you for your help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T16:54:11.340251</ts>
    <user>U0EUHKVGB</user>
    <text>I suspect it’s a combination of using pattern matching on this line: &lt;https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L70&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T16:54:20.343754</ts>
    <user>U0EUHKVGB</user>
    <text>with the incorrect name used on this line: &lt;https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L71&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T16:55:23.365932</ts>
    <user>U3SJEDR96</user>
    <text>Also, `Config Msg &amp;lt;-&amp;gt; Config`</text>
  </message>
  <message>
    <ts>2017-06-20T16:58:14.424856</ts>
    <user>U5W50TZ6C</user>
    <text>&lt;@U3SJEDR96&gt; Changing `Config Msg` to `Config` makes the compiler complain about missing `msg`. But it doesn't crash! Adding `Msg` back makes it crash.</text>
  </message>
  <message>
    <ts>2017-06-20T16:58:16.425815</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3xgmV5BBJtma1/0&gt; which reveals a few more errors</text>
  </message>
  <message>
    <ts>2017-06-20T16:58:39.433786</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5W50TZ6C&gt; I mean that your `view` is missing the type parameter for config altogether</text>
  </message>
  <message>
    <ts>2017-06-20T17:00:56.482357</ts>
    <user>U3SJEDR96</user>
    <text>(the `indexedMap` in the view was missing `config` as a parameter to `viewFold`, so had to add that to the definition of `view`. the `onInput` in the `then` clause was also wrong, `&amp;lt;|` instead of `&amp;lt;&amp;lt;`</text>
  </message>
  <message>
    <ts>2017-06-20T17:06:42.595908</ts>
    <user>U5W50TZ6C</user>
    <text>Those changes fixed it, &lt;@U3SJEDR96&gt;! Anyone know why the original breaks the compiler though?</text>
  </message>
  <message>
    <ts>2017-06-20T17:07:53.617850</ts>
    <user>U3SJEDR96</user>
    <text>Probably type unification failing because of the missing type parameter, but hard to say tbh</text>
  </message>
  <message>
    <ts>2017-06-20T17:26:16.956302</ts>
    <user>U2HLL9C6Q</user>
    <text>I was just looking at &lt;https://github.com/elm-lang/persistent-cache&gt; is there any port that wraps access to localStorage for me?</text>
  </message>
  <message>
    <ts>2017-06-20T17:41:15.215809</ts>
    <user>U2Q3QE54G</user>
    <text>Hello everyone. My unindenting mechanism for a code editor in elm using `textarea`s does a strange thing. The unindenting works great, but with certain selection ranges the selection changes to a simple cursor at the selection end instead of keeping the selection range. I’ve created an SSCCE in Ellie to demonstrate. Curious why this is happening and how to fix?
&lt;https://ellie-app.com/3x2qQdLqpHga1/1&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T17:42:52.242099</ts>
    <user>U2Q3QE54G</user>
    <text>You can see that the selection range is from 5 to 12 and then changed to 5 to 10 (because 2 `tab`s were unindented). But the 5 to 10 selection range appears as 10 to 10 (just a cursor at position 10)</text>
  </message>
  <message>
    <ts>2017-06-20T18:16:32.751279</ts>
    <user>U1YUR8HRN</user>
    <text>&lt;@U2HLL9C6Q&gt; plain ol' ports are gonna be your best bet: it's the safest way to get unimplemented JS features into your app. There's a nice section in the elm guides on ports, and here's an example that deals with localStorage in particular: &lt;https://github.com/evancz/elm-todomvc/blob/master/index.html#L15-L20&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T18:16:42.753557</ts>
    <user>U1YUR8HRN</user>
    <text>elm gude: &lt;https://guide.elm-lang.org/interop/javascript.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T18:39:15.038523</ts>
    <user>U5LFUHH19</user>
    <text>I need to Json.Decode a dict where the values can be strings, numbers, and other dicts.  Is that possible?</text>
  </message>
  <message>
    <ts>2017-06-20T18:39:51.045499</ts>
    <user>U23SA861Y</user>
    <text>example?</text>
  </message>
  <message>
    <ts>2017-06-20T18:40:27.052414</ts>
    <user>U23SA861Y</user>
    <text>ahh yes, you want to use the one of decoder</text>
  </message>
  <message>
    <ts>2017-06-20T18:40:54.057560</ts>
    <user>U23SA861Y</user>
    <text>`Json.Decode.oneOf`</text>
  </message>
  <message>
    <ts>2017-06-20T18:41:19.062282</ts>
    <user>U23SA861Y</user>
    <text>and a union type to differentiate what is stored in the dict</text>
  </message>
  <message>
    <ts>2017-06-20T18:41:23.063010</ts>
    <user>U5LFUHH19</user>
    <text>```{ "_id": { "$oid": "592db11daecb553dde65eda5" }, "biological__chlorophyll": 1, "biological__prey_organism_if_applicable": "none" }```</text>
  </message>
  <message>
    <ts>2017-06-20T18:41:49.068258</ts>
    <user>U5LFUHH19</user>
    <text>OK!  Thanks, I will look at that.</text>
  </message>
  <message>
    <ts>2017-06-20T18:47:15.130793</ts>
    <user>U1CE9DL9H</user>
    <text>that json looks more like a record</text>
  </message>
  <message>
    <ts>2017-06-20T18:47:52.137895</ts>
    <user>U23SA861Y</user>
    <text>depends if you have for knowledge of the keys</text>
  </message>
  <message>
    <ts>2017-06-20T18:54:32.213438</ts>
    <user>U5LFUHH19</user>
    <text>Right, so the return is a list of dict/records that have loads of data about the objects (biological samples) that were found.  I'm struggling to understand how to deal with this, because some of the values are strings and some are numbers.  The fields vary and new ones could be introduced at any time.  If I define some sort of Record, would I have to account for every field/datatype?</text>
  </message>
  <message>
    <ts>2017-06-20T18:55:28.223924</ts>
    <user>U23SA861Y</user>
    <text>what are you ultimately doing with this data?</text>
  </message>
  <message>
    <ts>2017-06-20T18:57:54.251586</ts>
    <user>U5LFUHH19</user>
    <text>Users will search for sample using a form.  I want to display the results in a table and also use the returned data to narrow the search parameters.  E.g., if "chlorophyll" ranges from 0-100 for all samples in the db but then only from 0.5-2.3 for the subset returned, I will want to show that to the users as a pair of min/max inputs.  Likewise, the "Longhurst province" might just be a subset of 2-3 string values, in which case I'd construct a multi-select.</text>
  </message>
  <message>
    <ts>2017-06-20T18:58:36.259433</ts>
    <user>U5LFUHH19</user>
    <text>Looking at Json.Decode.oneOf, it looks like I'd have to coerce everything to a string?</text>
  </message>
  <message>
    <ts>2017-06-20T18:58:45.261075</ts>
    <user>U23SA861Y</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-06-20T18:59:22.268027</ts>
    <user>U23SA861Y</user>
    <text>do you need to recurse, as in some of your keys contain dicts or are you fine with strings and ints</text>
  </message>
  <message>
    <ts>2017-06-20T18:59:42.272055</ts>
    <user>U5LFUHH19</user>
    <text>Strings and numbers (ints and floats) are fine.</text>
  </message>
  <message>
    <ts>2017-06-20T19:00:01.275794</ts>
    <user>U5LFUHH19</user>
    <text>I should actually remove that one dict/object as it's the key from Mongo</text>
  </message>
  <message>
    <ts>2017-06-20T19:00:58.289052</ts>
    <user>U23SA861Y</user>
    <text>```
type Type = StrType String | IntType Int | ValueType Dec.Value

decoder : Dec.Decoder (Dict.Dict String Type)
decoder =
    [Dec.string |&amp;gt; Dec.map StrType, &lt;http://Dec.int|Dec.int&gt; |&amp;gt; Dec.map IntType, Dec.value |&amp;gt; Dec.map ValueType]
        |&amp;gt; Dec.oneOf
        |&amp;gt; Dec.dict 
```
something like this then</text>
  </message>
  <message>
    <ts>2017-06-20T19:05:21.340256</ts>
    <user>U23SA861Y</user>
    <text>Theres probably a way to structure this without the `ValueType` so that it just omits the key if it's not an int or string</text>
  </message>
  <message>
    <ts>2017-06-20T19:10:00.390119</ts>
    <user>U5LFUHH19</user>
    <text>Thanks!  I'm trying to work this into my code and understand all the implications.</text>
  </message>
  <message>
    <ts>2017-06-20T19:11:29.406346</ts>
    <user>U23SA861Y</user>
    <text>If you want to store two different types in a Dict then you need an alternation that allows you check whats stored</text>
  </message>
  <message>
    <ts>2017-06-20T19:41:33.713292</ts>
    <user>U5LFUHH19</user>
    <text>&lt;@U23SA861Y&gt; It took me a bit to fix all my types, but, true to form, when it compiled it, Elm worked and gave me what I wanted!</text>
  </message>
  <message>
    <ts>2017-06-20T19:42:27.722063</ts>
    <user>U5LFUHH19</user>
    <text>I'm still unsure what the "ValueType" holds.  Is this a catch-all for things that aren't strings or ints?</text>
  </message>
  <message>
    <ts>2017-06-20T19:42:46.725022</ts>
    <user>U5LFUHH19</user>
    <text>I'm seeing my floats are wrapped as ValueType.</text>
  </message>
  <message>
    <ts>2017-06-20T19:42:55.726435</ts>
    <user>U23SA861Y</user>
    <text>yeah, its going to decode as a Json.Value</text>
  </message>
  <message>
    <ts>2017-06-20T19:43:17.729799</ts>
    <user>U23SA861Y</user>
    <text>which is a generic container for json stuff</text>
  </message>
  <message>
    <ts>2017-06-20T19:43:29.731683</ts>
    <user>U23SA861Y</user>
    <text>you could also probably do something this Maybe types</text>
  </message>
  <message>
    <ts>2017-06-20T19:43:36.732809</ts>
    <user>U5LFUHH19</user>
    <text>Cool, I just added FloatType and it worked.</text>
  </message>
  <message>
    <ts>2017-06-20T19:52:45.821960</ts>
    <user>U23SA861Y</user>
    <text>If you don't like the values then you can do something like this
```

type Type
    = StrType String
    | IntType Int
    | FloatType Float


decoder : Dec.Decoder (Dict.Dict String Type)
decoder =
    [ Dec.string |&amp;gt; Dec.map (StrType &amp;gt;&amp;gt; Just)
    , &lt;http://Dec.int|Dec.int&gt; |&amp;gt; Dec.map (IntType &amp;gt;&amp;gt; Just)
    , Dec.float |&amp;gt; Dec.map (FloatType &amp;gt;&amp;gt; Just)
    , Dec.succeed Nothing
    ]
        |&amp;gt; Dec.oneOf
        |&amp;gt; Dec.keyValuePairs
        |&amp;gt; Dec.map (List.filterMap (\( n, v ) -&amp;gt; Maybe.map (\x -&amp;gt; ( n, x )) v))
        |&amp;gt; Dec.map Dict.fromList

```</text>
  </message>
  <message>
    <ts>2017-06-20T19:55:12.845241</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U5LFUHH19&gt; ^</text>
  </message>
  <message>
    <ts>2017-06-20T19:55:25.847377</ts>
    <user>U5LFUHH19</user>
    <text>That's going to take me a while to parse!  Thanks.</text>
  </message>
  <message>
    <ts>2017-06-20T19:55:38.849277</ts>
    <user>U5LFUHH19</user>
    <text>head == asplode :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T19:56:01.852768</ts>
    <user>U23SA861Y</user>
    <text>the only real complicated part is what I"m doing there with filterMap</text>
  </message>
  <message>
    <ts>2017-06-20T19:56:33.857714</ts>
    <user>U23SA861Y</user>
    <text>honestly I'm playing code golf here, that could easily be broken out to make it more readable</text>
  </message>
  <message>
    <ts>2017-06-20T19:58:00.871271</ts>
    <user>U5LFUHH19</user>
    <text>I have to head home, but thanks, again, for your help!</text>
  </message>
  <message>
    <ts>2017-06-20T19:58:42.877984</ts>
    <user>U23SA861Y</user>
    <text>no problem &lt;https://ellie-app.com/3xk5T6PDDNLa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T21:14:25.511216</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U2Q3QE54G&gt; have you tested the same functionlity in js -  to make sure that what you have there is not a browser problem ?!</text>
  </message>
  <message>
    <ts>2017-06-21T03:14:33.180305</ts>
    <user>U0JL9RPC4</user>
    <text>Hi! Do you think it would possible somehow to use Elm as a desktop native application in order to get access to local files, directories, etc?</text>
  </message>
  <message>
    <ts>2017-06-21T03:14:51.183490</ts>
    <user>U0JL9RPC4</user>
    <text>`elm-native-ui` seems to be mobile oriented</text>
  </message>
  <message>
    <ts>2017-06-21T03:15:23.189822</ts>
    <user>U35100SJD</user>
    <text>I never tried but maybe you should look at electon elm</text>
  </message>
  <message>
    <ts>2017-06-21T03:16:05.197939</ts>
    <user>U0JL9RPC4</user>
    <text>ho thanks, I found this &lt;https://medium.com/@ezekeal/building-an-electron-app-with-elm-part-1-boilerplate-3416a730731f&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T03:16:48.205818</ts>
    <user>U0U6ML22H</user>
    <text>Gnome3 extensions are in JS</text>
  </message>
  <message>
    <ts>2017-06-21T03:16:56.207289</ts>
    <user>U0U6ML22H</user>
    <text>there might be some bridges there</text>
  </message>
  <message>
    <ts>2017-06-21T03:18:37.226236</ts>
    <user>U0JL9RPC4</user>
    <text>I need a crossplatform solution (at least windows and linux)</text>
  </message>
  <message>
    <ts>2017-06-21T03:19:05.231375</ts>
    <user>U0PBSF05S</user>
    <text>&lt;@U0JL9RPC4&gt; See also &lt;#C0K90DV3M|electron&gt;. Recent discussion in &lt;#C0K8VHA6B|help&gt; too.</text>
  </message>
  <message>
    <ts>2017-06-21T03:19:43.238371</ts>
    <user>U0U6ML22H</user>
    <text>OK, I assumed you knew about &lt;#C0K90DV3M|electron&gt; and was offering other ideas :smiley:</text>
  </message>
  <message>
    <ts>2017-06-21T03:42:53.522323</ts>
    <user>U1R5JCM55</user>
    <text>Anyone got a good trick for moving all your Elm modules under a new namespace? i.e.
```
ModuleA =&amp;gt; NewNamespace.ModuleA
ModuleB =&amp;gt; NewNamespace.ModuleB
```</text>
  </message>
  <message>
    <ts>2017-06-21T04:12:43.940237</ts>
    <user>U37BWE0SU</user>
    <text>This is not elm-specific, but im throwing it out here: I realize again and again that I'm exceptionally terrible at web design. I can recognize good and bad design (most of the time) but I'm unable to create someting even remotely good looking from scratch. Are there some good "web design basics for hopeless developers" out there?</text>
  </message>
  <message>
    <ts>2017-06-21T04:13:46.955463</ts>
    <user>U37BWE0SU</user>
    <text>I love building web pages in elm, but it does not help me with my main problem, the lack of design skills...</text>
  </message>
  <message>
    <ts>2017-06-21T04:15:48.985488</ts>
    <user>U4PT7NG4V</user>
    <text>That's a very interesting question. You're absolutely not alone :slightly_smiling_face: I'd be interested in any resources like that too</text>
  </message>
  <message>
    <ts>2017-06-21T04:17:12.005803</ts>
    <user>U4PT7NG4V</user>
    <text>I've read some interesting articles that might be relevant at &lt;https://design.google/&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T04:24:07.106200</ts>
    <user>U0PBSF05S</user>
    <text>&lt;@U37BWE0SU&gt; I'm in the same boat. I try to leverage whatever "frameworks" I can. I have been recently using elm-mdl (see &lt;#C12KMAYJX|elm-mdl&gt;) but I'm not sure about the long term viability of it now that Google's Material Design Lite is being replaced by Material Design Components. There is elm-bootstrap (see &lt;#C3U2E3JRX|elm-bootstrap&gt;), but I have not tried it yet. I'm a bit gunshy of making a committment to something not knowing if it will be around for a while. There are &lt;#C13J25YQK|webcomponents&gt; but does not seem to be a solid consensus about how and what that looks like just yet. My tendency is to use something like purecss for it's classes just to make things look a bit better.</text>
  </message>
  <message>
    <ts>2017-06-21T04:31:25.216829</ts>
    <user>U1R5JCM55</user>
    <text>I wanted to move all of my elm files under a new directory, find and sed to the rescue…</text>
  </message>
  <message>
    <ts>2017-06-21T04:33:47.253867</ts>
    <user>U37BWE0SU</user>
    <text>interesting. I've used bootstrap a lot before, but i think it makes the dom too complicated. I'll check out your links, thanks a lot :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T04:35:56.286514</ts>
    <user>U1R5JCM55</user>
    <text>&lt;@U37BWE0SU&gt; I found this article on hierarchy was a good start, &lt;https://webdesign.tutsplus.com/articles/understanding-visual-hierarchy-in-web-design--webdesign-84&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T04:47:05.453077</ts>
    <user>U1R5JCM55</user>
    <text>I also found that Gestalt theory had a lot in common with how I organise code in projects, &lt;http://www.creativebloq.com/graphic-design/gestalt-theory-10134960&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T04:54:48.571652</ts>
    <user>U5GJ5FEAU</user>
    <text>yeah! sometimes i wish modules could be relatively namespaced based on the folder they were in. That'd be cool</text>
  </message>
  <message>
    <ts>2017-06-21T05:15:32.899525</ts>
    <user>U1R5JCM55</user>
    <text>When the elm-format AST is ready we should be able to put together a tool for applying refactorings like this.</text>
  </message>
  <message>
    <ts>2017-06-21T05:24:13.033268</ts>
    <user>U0J8D9M2P</user>
    <text>what to expect from 0.19 version?</text>
  </message>
  <message>
    <ts>2017-06-21T05:25:46.057084</ts>
    <user>U5SQ9CVLP</user>
    <text>&lt;https://github.com/elm-lang/projects/blob/master/roadmap.md&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T05:26:28.067419</ts>
    <user>U5SQ9CVLP</user>
    <text>The major focus of 0.19 will be creating “single-page apps” in Elm. The features that fall under that umbrella include:

   - Server-side rendering — sending HTML with the initial response
   - Tree shaking — trimming out unused code (usually called dead-code elimination or DCE)
   - Code splitting — cutting up code into smaller chunks for better caching
   -  Lazy loading — only sending the code chunks needed for a particular page</text>
  </message>
  <message>
    <ts>2017-06-21T05:52:17.453690</ts>
    <user>U17R1GD96</user>
    <text>Is there any Elm module for using media queries?</text>
  </message>
  <message>
    <ts>2017-06-21T05:53:15.467280</ts>
    <user>U17R1GD96</user>
    <text>Something like &lt;https://www.npmjs.com/package/match-media&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T05:57:20.528857</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U17R1GD96&gt; not directly, but style-elements has something like it &lt;http://package.elm-lang.org/packages/mdgriffith/style-elements/3.1.0/Element#classifyDevice&gt;, uses a subscription to catch scaling and such, parses it into a nice record that you can base whatever on.</text>
  </message>
  <message>
    <ts>2017-06-21T05:57:34.532466</ts>
    <user>U1CE9DL9H</user>
    <text>you can probably replicate that</text>
  </message>
  <message>
    <ts>2017-06-21T06:03:43.627417</ts>
    <user>U5GJ5FEAU</user>
    <text>0.19 is probably a little far off in the future. or is it coming soon?</text>
  </message>
  <message>
    <ts>2017-06-21T06:20:16.854491</ts>
    <user>U17R1GD96</user>
    <text>&lt;@U1CE9DL9H&gt; There are no useful examples showing how to use that. The only link to a real example about Element.classifyDevice works is dead :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-21T06:25:19.921130</ts>
    <user>U1CE9DL9H</user>
    <text>you can still replicate it. Set up a subscription to &lt;http://package.elm-lang.org/packages/elm-lang/window/1.0.1/Window#resizes&gt; to aquire a `Window.Size` value, then process that like here &lt;https://github.com/mdgriffith/style-elements/blob/032a0503ad3a7a32c8efc8fbc12c26dc4f211d0b/src/Element.elm#L1099&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T06:25:35.924949</ts>
    <user>U5T739RFW</user>
    <text>would like to know too.</text>
  </message>
  <message>
    <ts>2017-06-21T06:47:36.207050</ts>
    <user>U3KSN5MAL</user>
    <text>Heya guys. I have a problem and so far the webgl guys haven't been able to help. 

So i need to load in an obj using the elm-obj library, which works fine using elm-live</text>
  </message>
  <message>
    <ts>2017-06-21T06:48:57.223546</ts>
    <user>U3KSN5MAL</user>
    <text>But it seems that using elm make to make the js.file and loading it off my HDD (how it has to work in a photoshop plugin) tries to load the obj file as a html file and so it breaks the parsing</text>
  </message>
  <message>
    <ts>2017-06-21T06:49:36.231239</ts>
    <user>U3KSN5MAL</user>
    <text>Is there something i have to put in to make sure it actually loads in properly?</text>
  </message>
  <message>
    <ts>2017-06-21T06:51:36.256399</ts>
    <user>U1CE9DL9H</user>
    <text>how is the file loaded ? are you using some webserver?</text>
  </message>
  <message>
    <ts>2017-06-21T06:52:00.261373</ts>
    <user>U3KSN5MAL</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-06-21T06:52:12.263787</ts>
    <user>U3KSN5MAL</user>
    <text>it's not web stuff, it's a photoshop plugin</text>
  </message>
  <message>
    <ts>2017-06-21T06:52:44.270612</ts>
    <user>U3KSN5MAL</user>
    <text>The library creator identified it as a bug with elm-reactor, because the same thing happens with reactor, but it works with elm-live</text>
  </message>
  <message>
    <ts>2017-06-21T06:53:17.277198</ts>
    <user>U1CE9DL9H</user>
    <text>that's possible, elm-reactor, for a while, also tried to load css files as html files</text>
  </message>
  <message>
    <ts>2017-06-21T06:53:32.280172</ts>
    <user>U3KSN5MAL</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-06-21T06:53:34.280598</ts>
    <user>U1CE9DL9H</user>
    <text>I think it's a header issue</text>
  </message>
  <message>
    <ts>2017-06-21T06:53:57.285287</ts>
    <user>U3KSN5MAL</user>
    <text>Ok, is that something i can modify in my custom html file</text>
  </message>
  <message>
    <ts>2017-06-21T06:54:05.286828</ts>
    <user>U3KSN5MAL</user>
    <text>because this is proving to be a hard thing to google</text>
  </message>
  <message>
    <ts>2017-06-21T07:02:46.401349</ts>
    <user>U3KSN5MAL</user>
    <text>ianmackenzie mentioned headers with `Accept: text/plain` but i have no idea where that would even go</text>
  </message>
  <message>
    <ts>2017-06-21T07:03:37.411748</ts>
    <user>U1CE9DL9H</user>
    <text>so, how do you get the .obj file into your elm app?</text>
  </message>
  <message>
    <ts>2017-06-21T07:05:09.430961</ts>
    <user>U3KSN5MAL</user>
    <text>` Http.toTask (Http.getString url)`</text>
  </message>
  <message>
    <ts>2017-06-21T07:05:16.432415</ts>
    <user>U3KSN5MAL</user>
    <text>pretty sure that's the line that grabs it</text>
  </message>
  <message>
    <ts>2017-06-21T07:05:49.439472</ts>
    <user>U3KSN5MAL</user>
    <text>&lt;https://github.com/Zinggi/elm-obj-loader/blob/master/src/OBJ.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T07:06:07.443292</ts>
    <user>U1CE9DL9H</user>
    <text>you can add custom headers with &lt;http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#request&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T07:07:18.457363</ts>
    <user>U3KSN5MAL</user>
    <text>Neat! i'll have a look</text>
  </message>
  <message>
    <ts>2017-06-21T07:20:21.617269</ts>
    <user>U5SQ9CVLP</user>
    <text>We'd all like to know. But nobody does, including the main developpers :wink:</text>
  </message>
  <message>
    <ts>2017-06-21T08:09:10.248127</ts>
    <user>U41NK9BM4</user>
    <text>&lt;@U3KSN5MAL&gt; The thing I don't understand of how the file gets read from the filesystem. Do you have access to the code? Is it using some sort of File API &lt;https://developer.mozilla.org/en-US/docs/Web/API/FileReader&gt; or via HTTP?</text>
  </message>
  <message>
    <ts>2017-06-21T08:49:23.867791</ts>
    <user>U5GCK308N</user>
    <text>Is there a tool to make elm apps online like `ellie-app` but with `Html.program`?</text>
  </message>
  <message>
    <ts>2017-06-21T08:49:58.878310</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5GCK308N&gt; Yes, ellie-app</text>
  </message>
  <message>
    <ts>2017-06-21T08:50:27.886677</ts>
    <user>U0EUHKVGB</user>
    <text>Just change main to use `Html.program` as you would locally.</text>
  </message>
  <message>
    <ts>2017-06-21T08:50:31.887760</ts>
    <user>U0EUHKVGB</user>
    <text>It’s a valid Elm file.</text>
  </message>
  <message>
    <ts>2017-06-21T08:50:55.894864</ts>
    <user>U5GCK308N</user>
    <text>oops you are right</text>
  </message>
  <message>
    <ts>2017-06-21T08:51:00.896417</ts>
    <user>U5GCK308N</user>
    <text>Thank you</text>
  </message>
  <message>
    <ts>2017-06-21T09:22:39.518463</ts>
    <user>U5X2VC483</user>
    <text>Anyone working on a language server protocol server for elm?
Is there any other way to add completion/hover info/goto definition etc to an editor?</text>
  </message>
  <message>
    <ts>2017-06-21T09:31:19.705618</ts>
    <user>U4872964V</user>
    <text>&lt;@U5X2VC483&gt; check out &lt;https://www.youtube.com/watch?v=ExGkdmey0n4&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T09:31:41.714097</ts>
    <user>U4872964V</user>
    <text>not really a direct answer to your question, but anway :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T09:32:43.737392</ts>
    <user>U5X2VC483</user>
    <text>thanks &lt;@U4872964V&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T09:58:32.332705</ts>
    <user>U0J8D9M2P</user>
    <text>Is Prezi the first Elm in production?</text>
  </message>
  <message>
    <ts>2017-06-21T09:59:43.362109</ts>
    <user>U0K7EBT3J</user>
    <text>hello</text>
  </message>
  <message>
    <ts>2017-06-21T09:59:58.368556</ts>
    <user>U0K7EBT3J</user>
    <text>I'm getting an error installing elm packages in travis</text>
  </message>
  <message>
    <ts>2017-06-21T10:00:07.373414</ts>
    <user>U0K7EBT3J</user>
    <text>`rename: already exists (File exists)`</text>
  </message>
  <message>
    <ts>2017-06-21T10:00:41.388852</ts>
    <user>U0K7EBT3J</user>
    <text>errors like these:
`elm-make: evancz-url-parser-57d713a: rename: already exists (File exists)`
`elm-make: elm-lang-html-1208e71: rename: already exists (File exists)`</text>
  </message>
  <message>
    <ts>2017-06-21T10:00:43.389913</ts>
    <user>U0K7EBT3J</user>
    <text>any ideas?</text>
  </message>
  <message>
    <ts>2017-06-21T10:12:41.687745</ts>
    <user>U0EUHKVGB</user>
    <text>i think you're running elm package twice in two different threads.</text>
  </message>
  <message>
    <ts>2017-06-21T10:31:43.176831</ts>
    <user>U0K7EBT3J</user>
    <text>hmm yeah, i'm using `sysconfcpus -n 2` so elm-make can go faster</text>
  </message>
  <message>
    <ts>2017-06-21T10:31:55.182144</ts>
    <user>U0K7EBT3J</user>
    <text>i'll install before compiling then</text>
  </message>
  <message>
    <ts>2017-06-21T10:32:25.195945</ts>
    <user>U0K7EBT3J</user>
    <text>or I might change to circleci, where I don't need that sysconfcpus hack</text>
  </message>
  <message>
    <ts>2017-06-21T10:32:37.201039</ts>
    <user>U0EUHKVGB</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-06-21T10:32:59.210895</ts>
    <user>U0EUHKVGB</user>
    <text>I generally recommend running elm-package yourself before anything else, including webpack etc</text>
  </message>
  <message>
    <ts>2017-06-21T11:34:30.837415</ts>
    <user>U31AUNK6F</user>
    <text>Is it safe to say that everything in Elm is a function? So if i declare a "variable/constant" `ten = 10` is `ten` than a function of a value?</text>
  </message>
  <message>
    <ts>2017-06-21T11:35:27.862432</ts>
    <user>U1CE9DL9H</user>
    <text>you can think of constants as zero-argument functions</text>
  </message>
  <message>
    <ts>2017-06-21T11:36:17.884208</ts>
    <user>U1CE9DL9H</user>
    <text>so all elm values can be thought of as functions, if that helps</text>
  </message>
  <message>
    <ts>2017-06-21T11:36:33.891345</ts>
    <user>U31AUNK6F</user>
    <text>Alright thank you &lt;@U1CE9DL9H&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T11:53:47.333872</ts>
    <user>U4872964V</user>
    <text>&lt;@U31AUNK6F&gt; i think it depends on why you want to call it a function. mathematically it’s not a function</text>
  </message>
  <message>
    <ts>2017-06-21T11:55:08.368588</ts>
    <user>U1CE9DL9H</user>
    <text>but any value of type `a` is isomorphic to a function `() -&amp;gt; a` (in the sense that they contain the same amount of information). So, there is some theoretical base for considering them the same.</text>
  </message>
  <message>
    <ts>2017-06-21T12:03:58.601319</ts>
    <user>U4872964V</user>
    <text>Sure. As I said, it depends on why you want to call it a function. There is a useful distinction in Elm between values and functions, values being the end result of applying functions, where you can’t apply anything anymore.</text>
  </message>
  <message>
    <ts>2017-06-21T12:09:59.746360</ts>
    <user>U5DJNFLUD</user>
    <text>Thought y'all might enjoy &lt;https://twitter.com/mrb_bk/status/877558038030372869&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T12:59:01.855999</ts>
    <user>U35100SJD</user>
    <text>hi there</text>
  </message>
  <message>
    <ts>2017-06-21T12:59:49.874789</ts>
    <user>U35100SJD</user>
    <text>I made a new package : &lt;http://package.elm-lang.org/packages/FabienHenon/elm-infinite-list-view/latest&gt; . It's about rendering infinite lists, by displaying only visible elements. Feedback appreciated :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T13:30:51.577731</ts>
    <user>U0K92QFST</user>
    <text>&lt;@U31AUNK6F&gt; &lt;@U1CE9DL9H&gt; important to note that you can think of a constant as a zero-argument function, but it compiles to a Javascript variable, not a function.</text>
  </message>
  <message>
    <ts>2017-06-21T13:31:19.588921</ts>
    <user>U0K92QFST</user>
    <text>For example, the following is impossible in Elm:
```undefined = Debug.crash "Undefined"```</text>
  </message>
  <message>
    <ts>2017-06-21T13:33:07.631265</ts>
    <user>U3SJEDR96</user>
    <text>the joys of a strict language :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T13:36:22.706638</ts>
    <user>U5AQ585NH</user>
    <text>Does anybody know when [this](&lt;https://github.com/elm-lang/dom/blob/1.1.1/src/Dom/Size.elm&gt;) will be included in the library?</text>
  </message>
  <message>
    <ts>2017-06-21T14:22:24.764239</ts>
    <user>U21QZSK36</user>
    <text>Has anyone had any experience with contentEditable divs? More specifically, in binding the value of the div to some content. It appears that whenever the value of the content is updated, the cursor moves to the beginning of the input element, meaning that you'd be typing in reverse.  This seems to happen whether you set the value with Html.text or if you set the innerHTML directly from Html.Attributes.property. Has anyone else experienced this, or worked around it? I'm trying to avoid porting out to JS if possible.</text>
  </message>
  <message>
    <ts>2017-06-21T14:23:26.787986</ts>
    <user>U33N2MR2T</user>
    <text>&lt;@U21QZSK36&gt; I tried using one of those for a while and gave up on it.</text>
  </message>
  <message>
    <ts>2017-06-21T14:24:03.802297</ts>
    <user>U33N2MR2T</user>
    <text>If you insist on using contentEditable, I’d recommend just catching the `input` events in JS and forwarding the current value through to Elm on a port.</text>
  </message>
  <message>
    <ts>2017-06-21T14:24:33.813906</ts>
    <user>U33N2MR2T</user>
    <text>This kind of thing is a known issue with virtual-dom based renderers.</text>
  </message>
  <message>
    <ts>2017-06-21T14:24:49.820095</ts>
    <user>U33N2MR2T</user>
    <text>Basically, the element is being re-created and the editing state (such as where the cursor is) is lost.</text>
  </message>
  <message>
    <ts>2017-06-21T14:25:20.832514</ts>
    <user>U33N2MR2T</user>
    <text>You might be able to deal with it somewhat with `Html.Keyed.node`.</text>
  </message>
  <message>
    <ts>2017-06-21T14:25:30.836374</ts>
    <user>U33N2MR2T</user>
    <text>I hadn’t seen this until after I moved on to the JS side.</text>
  </message>
  <message>
    <ts>2017-06-21T14:25:51.844719</ts>
    <user>U21QZSK36</user>
    <text>oh, cool. That's a good idea. Let me experiment with that</text>
  </message>
  <message>
    <ts>2017-06-21T14:27:02.872178</ts>
    <user>U21QZSK36</user>
    <text>Basically, I'm trying to build a WYSIWG type of editor, but a requirement is the formatted text has to be inside the editor, ala TinyMCE kind of thing. I tried to pitch a different div sort of like &lt;http://Stackedit.io|Stackedit.io&gt;, but no luck :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-21T14:27:07.873790</ts>
    <user>U21QZSK36</user>
    <text>Thanks for your help.</text>
  </message>
  <message>
    <ts>2017-06-21T14:30:26.951185</ts>
    <user>U31AUNK6F</user>
    <text>&lt;@U0K92QFST&gt; aha is that not possible because it get executed on declaration and thereby you can not call `undefined` as a function?</text>
  </message>
  <message>
    <ts>2017-06-21T14:30:42.958039</ts>
    <user>U0K92QFST</user>
    <text>:point_up: correct</text>
  </message>
  <message>
    <ts>2017-06-21T14:30:54.962598</ts>
    <user>U0K92QFST</user>
    <text>because it's compiled as a variable, not a function</text>
  </message>
  <message>
    <ts>2017-06-21T14:32:49.007258</ts>
    <user>U31AUNK6F</user>
    <text>Thanks &lt;@U1CE9DL9H&gt; &lt;@U4872964V&gt; &lt;@U0K92QFST&gt; that all makes sense</text>
  </message>
  <message>
    <ts>2017-06-21T14:33:17.017957</ts>
    <user>U31AUNK6F</user>
    <text>So it is better to label `ten` in `ten = 10` as a Value</text>
  </message>
  <message>
    <ts>2017-06-21T14:33:48.029985</ts>
    <user>U31AUNK6F</user>
    <text>With the distinction between value and function is that you fully applied all the arguments</text>
  </message>
  <message>
    <ts>2017-06-21T14:36:47.098396</ts>
    <user>U0K92QFST</user>
    <text>It's correct to call it a value. I'd call it a "constant" because it is a value that can never change.</text>
  </message>
  <message>
    <ts>2017-06-21T14:37:55.123896</ts>
    <user>U0K92QFST</user>
    <text>in another language, `ten = 10` might be called an assignment or a variable declaration; in Elm it's actually a declaration of equivalency. `ten` is ALWAYS equal to the value `10`.</text>
  </message>
  <message>
    <ts>2017-06-21T14:40:05.171625</ts>
    <user>U31AUNK6F</user>
    <text>Alright thanks! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T14:43:01.238269</ts>
    <user>U3SJEDR96</user>
    <text>To be complete - Elm is strict, which means that expressions are evaluated as soon as all arguments are available. Say I have a function `foo : a -&amp;gt; b -&amp;gt; c -&amp;gt; d`. That's clearly a function. If I define that function as `foo = Debug.crash "buh bye!"`, though, and have that in a top-level value, your program will still crash before even starting.</text>
  </message>
  <message>
    <ts>2017-06-21T14:49:49.394377</ts>
    <user>U0EUHKVGB</user>
    <text>Unless you use a let binding.</text>
  </message>
  <message>
    <ts>2017-06-21T14:50:00.398540</ts>
    <user>U0EUHKVGB</user>
    <text>In which case, it will crash on evaluation of the function</text>
  </message>
  <message>
    <ts>2017-06-21T14:50:21.407054</ts>
    <user>U0EUHKVGB</user>
    <text>Same goes for if you wrap something in a case statement, or an if statement.</text>
  </message>
  <message>
    <ts>2017-06-21T14:50:26.408746</ts>
    <user>U31AUNK6F</user>
    <text>&lt;@U3SJEDR96&gt; ohw nice i did not know that is what strict mend. Useful thanks</text>
  </message>
  <message>
    <ts>2017-06-21T14:50:45.416291</ts>
    <user>U3SJEDR96</user>
    <text>it's also where the subtle difference between `always "foo"` and `(\_ -&amp;gt; "foo")` comes in</text>
  </message>
  <message>
    <ts>2017-06-21T14:51:45.438913</ts>
    <user>U0EUHKVGB</user>
    <text>Indeed, see number 4 in this: &lt;https://medium.com/@eeue56/top-6-ways-to-make-your-elm-app-crash-at-runtime-562b2fa92d70&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T14:52:42.460481</ts>
    <user>U5LFUHH19</user>
    <text>To pattern-match on an empty List, I use "[]."  So how do I match (in a "case") an empty Dict?</text>
  </message>
  <message>
    <ts>2017-06-21T14:52:57.466005</ts>
    <user>U23SA861Y</user>
    <text>yeah, regex... so infuriating</text>
  </message>
  <message>
    <ts>2017-06-21T14:53:17.473714</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5LFUHH19&gt; Use an if statement + `Dict.empty`</text>
  </message>
  <message>
    <ts>2017-06-21T14:54:39.505017</ts>
    <user>U3SJEDR96</user>
    <text>or `case Dict.toList myDict of [] -&amp;gt; "empty!"` (though, if it's not empty, that's a waste)</text>
  </message>
  <message>
    <ts>2017-06-21T14:58:03.584856</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U0EUHKVGB&gt; you list function equality as a runtime crash, but shouldn't (wouldn't) the compiler catch that?</text>
  </message>
  <message>
    <ts>2017-06-21T14:58:37.597793</ts>
    <user>U5LFUHH19</user>
    <text>```
case List.length (Dict.keys optionList) of 
    0 -&amp;gt; ...
    _ -&amp;gt; ...
```</text>
  </message>
  <message>
    <ts>2017-06-21T14:59:16.612582</ts>
    <user>U3SJEDR96</user>
    <text>could just match on `Dict.size` in that case :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T15:01:27.665278</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U23SA861Y&gt; it could, I suppose, if there were another pseudo-typeclass `equatable` or something like that, which would be "any value except functions, json-encode values, and possibly some others".</text>
  </message>
  <message>
    <ts>2017-06-21T15:03:38.716215</ts>
    <user>U5LFUHH19</user>
    <text>&lt;@U3SJEDR96&gt; I didn't know about Dict.size.  Thanks!</text>
  </message>
  <message>
    <ts>2017-06-21T15:04:26.734546</ts>
    <user>U236M9FH9</user>
    <text>If all you need from size is if it's 0 or something else, use `isEmpty` &amp;amp; and if/then like eeue56 said</text>
  </message>
  <message>
    <ts>2017-06-21T15:04:47.742517</ts>
    <user>U236M9FH9</user>
    <text>Otherwise you're traversing the whole dict</text>
  </message>
  <message>
    <ts>2017-06-21T15:07:27.801969</ts>
    <user>U5LFUHH19</user>
    <text>I tried `isEmpty` the other day, and it matched in all cases.  Or something like that.  &lt;@U0EUHKVGB&gt; helped me with it.  In this particular case, I'll need the keys anyway, so I can get them in a "let" .</text>
  </message>
  <message>
    <ts>2017-06-21T15:08:15.818768</ts>
    <user>U5LFUHH19</user>
    <text>The REPL doesn't like this: ```[first, rest] = split "__" "foo__bar_baz"```</text>
  </message>
  <message>
    <ts>2017-06-21T15:08:20.821045</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U3SJEDR96&gt;  umm why would you need that. If functions aren't comparable, they aren't comparable. Just don't define (==) for function types</text>
  </message>
  <message>
    <ts>2017-06-21T15:08:58.833986</ts>
    <user>U23SA861Y</user>
    <text>nvm, I got what your saying</text>
  </message>
  <message>
    <ts>2017-06-21T15:09:06.836906</ts>
    <user>U5LFUHH19</user>
    <text>Variations with `()` and nothing fail, too.</text>
  </message>
  <message>
    <ts>2017-06-21T15:09:15.840001</ts>
    <user>U23SA861Y</user>
    <text>but comparable is a thing?</text>
  </message>
  <message>
    <ts>2017-06-21T15:09:20.842009</ts>
    <user>U3SJEDR96</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-06-21T15:09:27.844325</ts>
    <user>U23SA861Y</user>
    <text>or is comparable considered to have an ordering</text>
  </message>
  <message>
    <ts>2017-06-21T15:09:48.852123</ts>
    <user>U0LPMPL2U</user>
    <text>comparable is if something is greater than or less than something else</text>
  </message>
  <message>
    <ts>2017-06-21T15:09:54.854056</ts>
    <user>U5LFUHH19</user>
    <text>`first :: rest = split "__" "foo__bar_baz"`</text>
  </message>
  <message>
    <ts>2017-06-21T15:10:00.856291</ts>
    <user>U3SJEDR96</user>
    <text>`comparable`, `number` and `appendable`, but they're explained in the faq better than I can do so here :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T15:10:19.863410</ts>
    <user>U23SA861Y</user>
    <text>hmm, so the Dict requirement of comparable is overkill infact</text>
  </message>
  <message>
    <ts>2017-06-21T15:10:34.868572</ts>
    <user>U3SJEDR96</user>
    <text>no, it's required because the keys need to be compared to get a balanced tree</text>
  </message>
  <message>
    <ts>2017-06-21T15:10:52.875118</ts>
    <user>U3SJEDR96</user>
    <text>which is how you get the fast lookups sorted out :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T15:11:18.884335</ts>
    <user>U0LPMPL2U</user>
    <text>That's why you can't use union types as Dict keys because they aren't comparable (for now)</text>
  </message>
  <message>
    <ts>2017-06-21T15:11:42.892847</ts>
    <user>U23SA861Y</user>
    <text>well I know they don't implement comparable</text>
  </message>
  <message>
    <ts>2017-06-21T15:11:50.895992</ts>
    <user>U236M9FH9</user>
    <text>&lt;@U5LFUHH19&gt; All the compiler knows is split returns a List, it doesn't know it can't be empty, so you have to handle the empty case as well</text>
  </message>
  <message>
    <ts>2017-06-21T15:12:02.899990</ts>
    <user>U5LFUHH19</user>
    <text>OK, I'm seeing that.</text>
  </message>
  <message>
    <ts>2017-06-21T15:12:49.916602</ts>
    <user>U5LFUHH19</user>
    <text>I would have been tempted to try `Regex` but now I know not to. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T15:12:54.918521</ts>
    <user>U23SA861Y</user>
    <text>so dicts are an ordered map then, because a general dict implementation it would need to simply be hashable</text>
  </message>
  <message>
    <ts>2017-06-21T15:13:31.931061</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U23SA861Y&gt; they're all compiler-supported _special_ type variables, though, more than actual typeclasses. I.e. you can use them as a prefix in a typesignature to say sometihng about the types you expect - `mapKeys : (comparable1 -&amp;gt; comparable2) -&amp;gt; Dict comparable1 v -&amp;gt; Dict comparable2 v`</text>
  </message>
  <message>
    <ts>2017-06-21T15:15:51.980953</ts>
    <user>U23SA861Y</user>
    <text>I'm more or less familiar with them (have used them).</text>
  </message>
  <message>
    <ts>2017-06-21T15:16:19.990476</ts>
    <user>U23SA861Y</user>
    <text>Just a curiousity because a balanced tree has logN look ups as opposed to a hash tables constant time</text>
  </message>
  <message>
    <ts>2017-06-21T15:16:59.004558</ts>
    <user>U23SA861Y</user>
    <text>Nothing I've dealt with is big enough for that to be really relavent, and if it was it probably shouldn't be in a browser so...</text>
  </message>
  <message>
    <ts>2017-06-21T15:18:40.039960</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, Array's are a little closer to what you mean (hash array mapped tries with buckets of 32 elements, or at least that's what they'll become soon enough). </text>
  </message>
  <message>
    <ts>2017-06-21T15:22:25.119070</ts>
    <user>U3L8MM10T</user>
    <text>Which is the best Elm-UI framework to use? Bootstrap, MDL, Polymer...?</text>
  </message>
  <message>
    <ts>2017-06-21T15:25:47.192174</ts>
    <user>U1CE9DL9H</user>
    <text>elm-bootstrap and elm-mdl are pretty solid. no idea about polymer</text>
  </message>
  <message>
    <ts>2017-06-21T15:28:01.238940</ts>
    <user>U0CL0AS3V</user>
    <text>from what I hear, &lt;#C3U2E3JRX|elm-bootstrap&gt; is more actively maintained right now</text>
  </message>
  <message>
    <ts>2017-06-21T15:58:30.877116</ts>
    <user>U1AN4JRFV</user>
    <text>Also, less state to be passed around in elm-bootstrap</text>
  </message>
  <message>
    <ts>2017-06-21T16:48:56.938727</ts>
    <user>U1AN4JRFV</user>
    <text>what ecmascript version does elm compile to and what does that imply in real-life for IE?</text>
  </message>
  <message>
    <ts>2017-06-21T16:49:52.957924</ts>
    <user>U23SA861Y</user>
    <text>If it works and is useful, it probably doesn't support IE</text>
  </message>
  <message>
    <ts>2017-06-21T16:49:57.959749</ts>
    <user>U23SA861Y</user>
    <text>:stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-21T16:51:04.982771</ts>
    <user>U1AN4JRFV</user>
    <text>looks like 3?</text>
  </message>
  <message>
    <ts>2017-06-21T16:51:04.982951</ts>
    <user>U0CL0AS3V</user>
    <text>it generally compiles to ~3, but uses `requestAnimationFrame` (with a built-in polyfill) and some other stuff...we used Elm 0.15 in production supporting IE9, and I don't know of any ES5 features other than `requestAnimationFrame` that have been added since</text>
  </message>
  <message>
    <ts>2017-06-21T16:51:22.989158</ts>
    <user>U1AN4JRFV</user>
    <text>very cool, ty.</text>
  </message>
  <message>
    <ts>2017-06-21T16:53:05.024697</ts>
    <user>U2QQ92V09</user>
    <text>are the elm europe videos up yet?</text>
  </message>
  <message>
    <ts>2017-06-21T16:53:55.041885</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2QQ92V09&gt; &lt;https://elmlang.slack.com/archives/C0MU81TEC/p1497729071419410&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T16:54:50.060709</ts>
    <user>U0EUHKVGB</user>
    <text>The ones from the OsloElmDay conference are up, if you haven't seen those yet: &lt;https://www.youtube.com/playlist?list=PLcAzxXzXQlPZsNcYycHittqeF3UG4dGli&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T16:56:23.092531</ts>
    <user>U2QQ92V09</user>
    <text>cool, thanks &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T16:59:52.165699</ts>
    <user>U1AN4JRFV</user>
    <text>just as a side to my question above, a quote from the internets from 1.5 years ago: "Internet Explorer versions 8, 9, and 10 will no longer be supported on Windows 7, Windows 8.1 and Windows 10 desktop operating systems." (by MS) (so, why worry?)</text>
  </message>
  <message>
    <ts>2017-06-21T17:03:18.239856</ts>
    <user>U23SA861Y</user>
    <text>Microsoft tried to help you by forcefully thrusting windows 10 onto unsuspecting computers</text>
  </message>
  <message>
    <ts>2017-06-21T18:06:28.325618</ts>
    <user>U23SA861Y</user>
    <text>welcome &lt;@U5XJY26Q4&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T18:07:19.337682</ts>
    <user>U5XJY26Q4</user>
    <text>thank you &lt;@U23SA861Y&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T19:01:24.010897</ts>
    <user>U2LAL86AY</user>
    <text>hmm for checking if an element is in a list i use `List.member` But in this case i needed to work with arrays. i can't find an equivalent `Array.member` to check if an element is inside the array. I think this should be a core function.</text>
  </message>
  <message>
    <ts>2017-06-21T19:02:30.023422</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0F01KLV6&gt; ^</text>
  </message>
  <message>
    <ts>2017-06-21T19:04:42.048116</ts>
    <user>U0EUHKVGB</user>
    <text>That is a very good point</text>
  </message>
  <message>
    <ts>2017-06-21T19:04:55.050568</ts>
    <user>U0EUHKVGB</user>
    <text>how did that never come up before?</text>
  </message>
  <message>
    <ts>2017-06-21T19:06:19.066253</ts>
    <user>U1AN4JRFV</user>
    <text>this comes up empty too: &lt;http://klaftertief.github.io/elm-search/?q=a+-%3E+Array+a+-%3E+Bool&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T19:06:33.068491</ts>
    <user>U0F01KLV6</user>
    <text>I made a point of not extending the Array API. Bur really, one should use Set for that purpose.</text>
  </message>
  <message>
    <ts>2017-06-21T19:06:42.070253</ts>
    <user>U0F01KLV6</user>
    <text>*but</text>
  </message>
  <message>
    <ts>2017-06-21T19:07:44.081488</ts>
    <user>U0F01KLV6</user>
    <text>I think .find would be better for Array.</text>
  </message>
  <message>
    <ts>2017-06-21T19:07:48.082114</ts>
    <user>U0EUHKVGB</user>
    <text>But it's also best not to convert a datastructure like that just to use `member`</text>
  </message>
  <message>
    <ts>2017-06-21T19:08:38.090980</ts>
    <user>U0F01KLV6</user>
    <text>True that.</text>
  </message>
  <message>
    <ts>2017-06-21T19:09:14.097292</ts>
    <user>U0EUHKVGB</user>
    <text>What is the type of the `find` you think would be better?</text>
  </message>
  <message>
    <ts>2017-06-21T19:10:20.109115</ts>
    <user>U0F01KLV6</user>
    <text>Find : (a -&amp;gt; Bool) -&amp;gt; Array a -&amp;gt; Maybe a</text>
  </message>
  <message>
    <ts>2017-06-21T19:10:31.111235</ts>
    <user>U0F01KLV6</user>
    <text>More flexible than .member</text>
  </message>
  <message>
    <ts>2017-06-21T19:10:38.112482</ts>
    <user>U0EUHKVGB</user>
    <text>Ah, right</text>
  </message>
  <message>
    <ts>2017-06-21T19:12:10.128969</ts>
    <user>U0F01KLV6</user>
    <text>I could hear if Evan is open to adding such a fn to core.</text>
  </message>
  <message>
    <ts>2017-06-21T19:25:28.268050</ts>
    <user>U2LAL86AY</user>
    <text>set instead of array? I thought that in sets is not allowed to have duplicate elements - and in array one can have duplicate elements. Is this actually false?</text>
  </message>
  <message>
    <ts>2017-06-21T19:27:44.291107</ts>
    <user>U0EUHKVGB</user>
    <text>No, you're right</text>
  </message>
  <message>
    <ts>2017-06-21T19:28:07.295073</ts>
    <user>U0EUHKVGB</user>
    <text>What robin means is that sets can implement `member` in like O(log(n))ish</text>
  </message>
  <message>
    <ts>2017-06-21T19:28:23.297688</ts>
    <user>U0EUHKVGB</user>
    <text>whereas in an array, it's O(N)</text>
  </message>
  <message>
    <ts>2017-06-21T19:28:51.302142</ts>
    <user>U0EUHKVGB</user>
    <text>So if you're finding yourself looking up if something is a member a lot, a set will be overall faster for that operation.</text>
  </message>
  <message>
    <ts>2017-06-21T20:54:33.056544</ts>
    <user>U5YDC1YUW</user>
    <text>Hello peeps, is there a simplistic way to create a timer in Elm? Literally something as simple as, start at 10, and every second decrement by 1 till you get to zero.</text>
  </message>
  <message>
    <ts>2017-06-21T20:55:28.063982</ts>
    <user>U17R26VR8</user>
    <text>i’d prolly start with something like this: &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Time#every&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T20:55:53.067217</ts>
    <user>U5YDC1YUW</user>
    <text>I have, my first attempt was using a subscription and running `Time.every second Tick`</text>
  </message>
  <message>
    <ts>2017-06-21T20:56:37.073026</ts>
    <user>U5YDC1YUW</user>
    <text>however, the event that starts the timer may fall on a sub-second mark, so that first decrement from 10 to 9 doesn't always happen over 1 full second</text>
  </message>
  <message>
    <ts>2017-06-21T20:57:29.079451</ts>
    <user>U1TMAG4FK</user>
    <text>There's also &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Process#sleep&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T20:57:53.082827</ts>
    <user>U0J1M0F32</user>
    <text>iirc, there are not many good ways around that (sub second issue), you may want to wait until the first tick and then start counting down.</text>
  </message>
  <message>
    <ts>2017-06-21T20:59:11.093093</ts>
    <user>U5YDC1YUW</user>
    <text>&lt;@U0J1M0F32&gt; hmm yeah I was heading towards that solution, was just hoping for something more elegant</text>
  </message>
  <message>
    <ts>2017-06-21T20:59:38.096709</ts>
    <user>U5YDC1YUW</user>
    <text>there is this... &lt;http://package.elm-lang.org/packages/simonewebdesign/elm-timer/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T21:00:15.102625</ts>
    <user>U17R26VR8</user>
    <text>the suggestion for Process.sleep should work, it isn’t based on the system time but rather a unit of time</text>
  </message>
  <message>
    <ts>2017-06-21T21:01:09.111043</ts>
    <user>U5YDC1YUW</user>
    <text>&lt;@U17R26VR8&gt; I'll have a look into it, may do the job</text>
  </message>
  <message>
    <ts>2017-06-21T21:01:57.118268</ts>
    <user>U17R26VR8</user>
    <text>hey… whadya know, i have done this already… &lt;https://github.com/mordrax/cotwelm/blob/b72efbb428a6d190ff8a8a9ba61638efa2b8e89e/src/Arena/PlayerArena.elm#L80&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T21:02:05.119208</ts>
    <user>U17R26VR8</user>
    <text>~hits it every~ waits for 150ms</text>
  </message>
  <message>
    <ts>2017-06-21T21:04:01.135585</ts>
    <user>U5YDC1YUW</user>
    <text>sweet, I'll have a dig into it. I've only been using Elm for a week or two, so still getting my head around it</text>
  </message>
  <message>
    <ts>2017-06-21T21:05:29.147683</ts>
    <user>U17R26VR8</user>
    <text>ah yeah, wouldn’t suggest you look too deep into that code… i don’t know what i was on when writing that, just how it’s called and threaded back into the Cmd.
ianmackenzie is on the ball with `Process.sleep 10000`</text>
  </message>
  <message>
    <ts>2017-06-21T21:06:34.156213</ts>
    <user>U5YDC1YUW</user>
    <text>yeah I can't say I quite fully understand what that one line is doing exactly</text>
  </message>
  <message>
    <ts>2017-06-21T21:07:20.161989</ts>
    <user>U5YDC1YUW</user>
    <text>is it basically sleeping the update function for 150ms?</text>
  </message>
  <message>
    <ts>2017-06-21T21:08:36.171550</ts>
    <user>U17R26VR8</user>
    <text>haha, ok so you’ve got: &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Process#sleep&gt;
that takes in a `Time` and gives out a `Task`

then you’ve got to perform that task
&lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Task#perform&gt;

which performs a task, and gives you back a msg ( you provide the `a -&amp;gt; msg` function</text>
  </message>
  <message>
    <ts>2017-06-21T21:09:59.182320</ts>
    <user>U5YDC1YUW</user>
    <text>ah right yeah, I see what's happening, you're then passing the message `Sleep (asyncCmd match matches resetCounter) resetCounter`</text>
  </message>
  <message>
    <ts>2017-06-21T21:10:10.183972</ts>
    <user>U17R26VR8</user>
    <text>so all i’m doing here:
```
 Task.perform (\_ -&amp;gt; Sleep (asyncCmd match matches resetCounter) resetCounter) (Process.sleep 150)

-- summarises to
Task.perform (\unused_ -&amp;gt; msg) (Process.sleep 150)
```</text>
  </message>
  <message>
    <ts>2017-06-21T21:10:11.184116</ts>
    <user>U5YDC1YUW</user>
    <text>which is then caught `Sleep cmd resetCounter -&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-06-21T21:10:35.187193</ts>
    <user>U17R26VR8</user>
    <text>exactly, the `msg -&amp;gt; Sleep ...`</text>
  </message>
  <message>
    <ts>2017-06-21T21:11:23.193341</ts>
    <user>U17R26VR8</user>
    <text>so chuck whatever you want to do into that first function `(\unused_ -&amp;gt; msg)`, then thread the output of the Task.peform which is a cmd into your update’s output (&lt;https://github.com/mordrax/cotwelm/blob/b72efbb428a6d190ff8a8a9ba61638efa2b8e89e/src/Arena/PlayerArena.elm#L103&gt;), then you’ve got your msg</text>
  </message>
  <message>
    <ts>2017-06-21T21:16:06.229474</ts>
    <user>U17R26VR8</user>
    <text>There is a purpose to all this madness! See Elm is declarative. Process.sleep doesn’t actually sleep, Task.perform doesn’t actually perform anything. They are all just declaring that, they will do something. You’ll find this with Generators, Decoders, pretty much everything!!!</text>
  </message>
  <message>
    <ts>2017-06-21T21:17:40.241482</ts>
    <user>U17R26VR8</user>
    <text>All these functions are pure, meaning they have no side effects, meaning they don’t do anything. O_O! So unlike in imperative languages where you go sleep 150 and expect it to sleep, here, Process.sleep 150 just gives back a Task that *will* sleep. Then it’s up to you when you call it.</text>
  </message>
  <message>
    <ts>2017-06-21T21:18:32.248431</ts>
    <user>U17R26VR8</user>
    <text>It’s only when you hook up all your declarative functions to the program’s subscription that then allows elm to drive effects through your app</text>
  </message>
  <message>
    <ts>2017-06-21T21:18:56.251360</ts>
    <user>U5YDC1YUW</user>
    <text>it's definitely something to wrap your head around! but I'm honestly enjoying it</text>
  </message>
  <message>
    <ts>2017-06-21T21:19:29.255563</ts>
    <user>U5YDC1YUW</user>
    <text>just having a look at how I would hook this up in my code, does something like this make sense?</text>
  </message>
  <message>
    <ts>2017-06-21T21:19:37.256552</ts>
    <user>U5YDC1YUW</user>
    <text>```
StartGame -&amp;gt;
            ( { model | status = Playing }, Task.perform (\_ -&amp;gt; Tick) (Process.sleep 1000) )
```</text>
  </message>
  <message>
    <ts>2017-06-21T21:20:21.262361</ts>
    <user>U17R26VR8</user>
    <text>that should trigger your Tick process ~1000ms after a StartGame msg comes through</text>
  </message>
  <message>
    <ts>2017-06-21T21:20:36.264271</ts>
    <user>U5YDC1YUW</user>
    <text>I know in this situation I'm expecting that Tick will only be called once after 1000ms</text>
  </message>
  <message>
    <ts>2017-06-21T21:20:47.265692</ts>
    <user>U5YDC1YUW</user>
    <text>alright, the compiler is having a fit haha.</text>
  </message>
  <message>
    <ts>2017-06-21T21:20:51.266249</ts>
    <user>U17R26VR8</user>
    <text>I say roughly because js has a error margin with setTimeout of &amp;lt; 8ms i think…</text>
  </message>
  <message>
    <ts>2017-06-21T21:21:34.271675</ts>
    <user>U17R26VR8</user>
    <text>if you can’t work it out, chuck the msg here and the community will help, according to some we’re ‘excessively’ helpful</text>
  </message>
  <message>
    <ts>2017-06-21T21:22:21.277715</ts>
    <user>U17R26VR8</user>
    <text>actually that is true, last time, i needed a foldl which reduced a Result, and got 3 answers in just as many minutes</text>
  </message>
  <message>
    <ts>2017-06-21T21:22:35.279569</ts>
    <user>U5YDC1YUW</user>
    <text>sure, incoming...</text>
  </message>
  <message>
    <ts>2017-06-21T21:22:40.280249</ts>
    <user>U5YDC1YUW</user>
    <text>```
The 1st and 2nd branches of this `case` produce different types of values.

12|     case msg of
13|         Clicked -&amp;gt;
14|             if model.status == Playing then
15|                 processClick model
16|             else
17|                 ( model, Cmd.none )
18| 
19|         StartGame -&amp;gt;
20|&amp;gt;            ( { model | status = Playing }, Task.perform (\_ -&amp;gt; Tick) (Process.sleep 1000) )
21| 
22|         Tick _ -&amp;gt;
23|             updateTime model

The 1st branch has this type:

    ( { click_count : Int
    , click_limit : Int
    , points : Int
    , status : Status
    , targets : List Target
    , time_elapsed : Int
    , time_limit : Int
    }
    , Cmd (Msg)
    )

But the 2nd is:

    ( { click_count : Int
    , click_limit : Int
    , points : Int
    , status : Status
    , targets : List Target
    , time_elapsed : Int
    , time_limit : Int
    }
    , Cmd (Time.Time -&amp;gt; Msg)
    )
```</text>
  </message>
  <message>
    <ts>2017-06-21T21:23:13.284391</ts>
    <user>U17R26VR8</user>
    <text>Your Tick tag doens’t have a value, but your update function is expecting one</text>
  </message>
  <message>
    <ts>2017-06-21T21:23:55.289885</ts>
    <user>U17R26VR8</user>
    <text>change ln 22: `Tick -&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-06-21T21:24:32.294572</ts>
    <user>U5YDC1YUW</user>
    <text>ah brilliant! good spot :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T21:25:03.298597</ts>
    <user>U5YDC1YUW</user>
    <text>that was leftover crud from when I was using `Time.every second Tick`</text>
  </message>
  <message>
    <ts>2017-06-21T21:25:34.302705</ts>
    <user>U17R26VR8</user>
    <text>yes, you can pass values along with the tick if you want and that’s how you’d do it</text>
  </message>
  <message>
    <ts>2017-06-21T21:26:02.306385</ts>
    <user>U17R26VR8</user>
    <text>`(\_ -&amp;gt; Tick valueToUpdateInASecond)`</text>
  </message>
  <message>
    <ts>2017-06-21T21:31:19.347186</ts>
    <user>U5YDC1YUW</user>
    <text>awesome, thanks for your help mate :slightly_smiling_face: got myself a working timer!</text>
  </message>
  <message>
    <ts>2017-06-21T21:31:53.351576</ts>
    <user>U17R26VR8</user>
    <text>My task is complete. I shall go back to work.</text>
  </message>
  <message>
    <ts>2017-06-21T21:33:18.362530</ts>
    <user>U5YDC1YUW</user>
    <text>:sunglasses:</text>
  </message>
  <message>
    <ts>2017-06-21T23:30:29.190809</ts>
    <user>U5YFL1QNB</user>
    <text>Hi folks, I'm hitting some 404 errors while downloading elm through npm install</text>
  </message>
  <message>
    <ts>2017-06-21T23:30:49.192914</ts>
    <user>U5YFL1QNB</user>
    <text>```
&amp;gt; node -p "process.platform + '|' + process.arch"   

darwin|x64                
npm WARN prefer global ycssmin@1.0.1 should be installed with -g                                         

&amp;gt; elm@0.18.0 install /Users/XXX/XXX/node_modules/elm                                 
&amp;gt; node install.js         

Unfortunately, there are currently no Elm Platform binaries available for your operating system and architecture.

If you would like to build Elm from source, there are instructions at &lt;https://github.com/elm-lang/elm-platform#build-from-source&gt;
```</text>
  </message>
  <message>
    <ts>2017-06-21T23:31:01.194229</ts>
    <user>U5YFL1QNB</user>
    <text>and on linux</text>
  </message>
  <message>
    <ts>2017-06-21T23:32:03.200990</ts>
    <user>U5YFL1QNB</user>
    <text>```
       &amp;gt; XXX@1.0.0 preinstall /tmp/build_b0cf21c8edb00556fe127d8976446f11/XXX-XXX-46d0c17018e4b2089692c41b81aee48b7a38c75e
       &amp;gt; node -p "process.platform + '|' + process.arch"

       linux|x64
       
       &amp;gt; elm@0.18.0 install /tmp/build_b0cf21c8edb00556fe127d8976446f11/XXX-46d0c17018e4b2089692c41b81aee48b7a38c75e/node_modules/elm
       &amp;gt; node install.js

       Unfortunately, there are currently no Elm Platform binaries available for your operating system and architecture.

       If you would like to build Elm from source, there are instructions at &lt;https://github.com/elm-lang/elm-platform#build-from-source&gt;
```</text>
  </message>
  <message>
    <ts>2017-06-21T23:33:08.207226</ts>
    <user>U5YFL1QNB</user>
    <text>Is anyone else having these difficulties?</text>
  </message>
  <message>
    <ts>2017-06-22T01:33:19.969446</ts>
    <user>U5YFL1QNB</user>
    <text>Ah! The issue is caused by the new package-lock.json</text>
  </message>
  <message>
    <ts>2017-06-22T04:33:13.872077</ts>
    <user>U17J54S2U</user>
    <text>Yeah I’ve encountered so many errors when I upgraded to node 8 and npm 5, I just downgraded to LTS 6 and npm 4.</text>
  </message>
  <message>
    <ts>2017-06-22T05:49:40.035403</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5YFL1QNB&gt; That seems very strange, can you open an issue forit here? &lt;https://github.com/elm-lang/elm-platform&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T06:34:43.648322</ts>
    <user>U5YFL1QNB</user>
    <text>Will do</text>
  </message>
  <message>
    <ts>2017-06-22T06:38:30.695761</ts>
    <user>U5YFL1QNB</user>
    <text>&lt;https://github.com/elm-lang/elm-platform/issues/210&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T06:39:21.706551</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5YFL1QNB&gt; Can you amend it to have the smallest possible reproduction steps?</text>
  </message>
  <message>
    <ts>2017-06-22T06:56:14.911030</ts>
    <user>U5YFL1QNB</user>
    <text>Done</text>
  </message>
  <message>
    <ts>2017-06-22T06:56:44.916959</ts>
    <user>U5YFL1QNB</user>
    <text>Let me know if that's OK with you, otherwise please point me in the right direction</text>
  </message>
  <message>
    <ts>2017-06-22T07:12:51.116401</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5YFL1QNB&gt; Think about it in terms of all the things you need to make the error happen again.</text>
  </message>
  <message>
    <ts>2017-06-22T07:13:01.118158</ts>
    <user>U0EUHKVGB</user>
    <text>You need to provide an example `package.json` file, for example</text>
  </message>
  <message>
    <ts>2017-06-22T07:13:20.122030</ts>
    <user>U0EUHKVGB</user>
    <text>See this: &lt;http://sscce.org/&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T07:36:57.403808</ts>
    <user>U0EEGSF35</user>
    <text>been writing way to much js and jquery last 1/2 year.</text>
  </message>
  <message>
    <ts>2017-06-22T09:08:55.769711</ts>
    <user>U0U6ML22H</user>
    <text>I encountered a problem, using Html.form and an input and a custom "on blur" event: the submit event is fired before the blur event, so my model is not updated properly. Anyone has an idea of how I could circumvent that? Thanks :smiley:</text>
  </message>
  <message>
    <ts>2017-06-22T09:12:42.842411</ts>
    <user>U3SJEDR96</user>
    <text>assuming this is related to the cursor jump thing, you might want to try this workaround instead &lt;https://github.com/elm-lang/html/issues/105#issuecomment-309524197&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T09:14:21.873747</ts>
    <user>U1D7SLE4Q</user>
    <text>&lt;@U0U6ML22H&gt; I don’t know much about your case, but probably you could run the “on blur” handler inside the “on submit” handler?</text>
  </message>
  <message>
    <ts>2017-06-22T09:14:38.879405</ts>
    <user>U3SJEDR96</user>
    <text>you don't have access to the field there</text>
  </message>
  <message>
    <ts>2017-06-22T09:14:43.881025</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U1D7SLE4Q&gt; unfortunately, I wouldn't get the value from the on blur event</text>
  </message>
  <message>
    <ts>2017-06-22T09:14:51.883530</ts>
    <user>U0U6ML22H</user>
    <text>yeah, what &lt;@U3SJEDR96&gt; said :smiley:</text>
  </message>
  <message>
    <ts>2017-06-22T09:14:55.884855</ts>
    <user>U1D7SLE4Q</user>
    <text>meh(</text>
  </message>
  <message>
    <ts>2017-06-22T09:15:20.893834</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U3SJEDR96&gt; thanks for the link to the issue; the problem here is that we need to use "on blur" because... our behat tests don't seem to work with onInput</text>
  </message>
  <message>
    <ts>2017-06-22T09:15:36.899249</ts>
    <user>U0U6ML22H</user>
    <text>I know, it's gotta be the lamest reason ever to use blur over onInput</text>
  </message>
  <message>
    <ts>2017-06-22T09:15:56.905688</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U1D7SLE4Q&gt; thanks for trying to help :smiley:</text>
  </message>
  <message>
    <ts>2017-06-22T11:24:45.035235</ts>
    <user>U5DJNFLUD</user>
    <text>Anyone have experience using ports with file uploads? Is &lt;https://www.paramander.com/blog/using-ports-to-deal-with-files-in-elm-0-17&gt; still a good approach?</text>
  </message>
  <message>
    <ts>2017-06-22T11:26:50.089052</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U5DJNFLUD&gt; that's what we're currently doing</text>
  </message>
  <message>
    <ts>2017-06-22T11:27:33.106992</ts>
    <user>U5DJNFLUD</user>
    <text>&lt;@U0U6ML22H&gt; Cool thanks -- I need to process some CSV files</text>
  </message>
  <message>
    <ts>2017-06-22T11:28:42.137279</ts>
    <user>U0U6ML22H</user>
    <text>we're just using it to turn files into base64 and send them to the server like that; it works mostly fine</text>
  </message>
  <message>
    <ts>2017-06-22T11:29:07.147947</ts>
    <user>U0U6ML22H</user>
    <text>bear in mind that file processing is asynchronous, so you should watch out for that</text>
  </message>
  <message>
    <ts>2017-06-22T11:29:22.154192</ts>
    <user>U5DJNFLUD</user>
    <text>Yeah makes sense</text>
  </message>
  <message>
    <ts>2017-06-22T11:29:23.154735</ts>
    <user>U5DJNFLUD</user>
    <text>Thanks though</text>
  </message>
  <message>
    <ts>2017-06-22T11:30:43.190114</ts>
    <user>U0U6ML22H</user>
    <text>sure</text>
  </message>
  <message>
    <ts>2017-06-22T11:37:40.366837</ts>
    <user>U3SJEDR96</user>
    <text>I think I have something highly similar as an ellie, somewhere</text>
  </message>
  <message>
    <ts>2017-06-22T11:37:47.370366</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3qpgdbQFFfqa1/0&gt; yep :smile:</text>
  </message>
  <message>
    <ts>2017-06-22T11:44:12.532403</ts>
    <user>U40QW928G</user>
    <text>Are there any elm tutorials on forms?</text>
  </message>
  <message>
    <ts>2017-06-22T11:44:24.537436</ts>
    <user>U40QW928G</user>
    <text>like input type=text and selects, checkboxes, etc</text>
  </message>
  <message>
    <ts>2017-06-22T11:47:20.612316</ts>
    <user>U0J1M0F32</user>
    <text>&lt;@U3SJEDR96&gt; I'm sad you can't just shove that base64 string into the src attribute of an image tag.</text>
  </message>
  <message>
    <ts>2017-06-22T11:50:35.693875</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0J1M0F32&gt; that was laziness on my side - &lt;https://ellie-app.com/3qpgdbQFFfqa1/1&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T11:51:21.713117</ts>
    <user>U0J1M0F32</user>
    <text>:eyes:</text>
  </message>
  <message>
    <ts>2017-06-22T11:51:31.717333</ts>
    <user>U0J1M0F32</user>
    <text>I did that and it didn't work for me. wat.</text>
  </message>
  <message>
    <ts>2017-06-22T11:52:42.746748</ts>
    <user>U0J1M0F32</user>
    <text>Ah, I see the change you made :thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-22T12:16:15.324479</ts>
    <user>U40QW928G</user>
    <text>for modules is there an equivilient to like __init__.py?</text>
  </message>
  <message>
    <ts>2017-06-22T12:17:09.344913</ts>
    <user>U40QW928G</user>
    <text>like if I make a folder called, `Players` is there a file I can make where I can then import stuff like models via `import Players exposing (Player)` ?</text>
  </message>
  <message>
    <ts>2017-06-22T12:21:18.440264</ts>
    <user>U0H3A9XLN</user>
    <text>&lt;@U40QW928G&gt; you can: import Players.Player as Player</text>
  </message>
  <message>
    <ts>2017-06-22T13:23:31.838237</ts>
    <user>U3LUC6SNS</user>
    <text>Regarding the infamous "jumping cursor bug":  I've been converting my app to use the `style-elements` package and have this snippet:
```
named "content"
            (EL.textArea None [ padding 8, EE.onInput InputContent ] (model.current_document.content))
```
Strangely (and wondrously), text input in this element, according to my first tests, does not suffer from the bug -- no need to use `defaultValue` etc. 

I don't have an explanation for this.  Will inform &lt;@U0JFXEUCT&gt;  at `style-elements`</text>
  </message>
  <message>
    <ts>2017-06-22T14:40:35.587220</ts>
    <user>U5AQ585NH</user>
    <text>Just finished a preliminary version of multiselect control in pure elm: &lt;https://inkuzmin.github.io/elm-multiselect/&gt; (repo: &lt;https://github.com/inkuzmin/elm-multiselect&gt;)
Any suggestions or comments are very welcomed!</text>
  </message>
  <message>
    <ts>2017-06-22T14:47:08.734847</ts>
    <user>U0JFGGZS6</user>
    <text>^ &lt;@U5ABF3BH7&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T15:31:47.686222</ts>
    <user>U1AN4JRFV</user>
    <text>good evening, gentle people! :tophat: let me see how condensed i can ask this...: my JSON contains URLs to imgs, but they're 404, so I do `onerror setAttribute`.</text>
  </message>
  <message>
    <ts>2017-06-22T15:32:05.692488</ts>
    <user>U1AN4JRFV</user>
    <text>i am looking for a more elmish and beginner-friendly way.</text>
  </message>
  <message>
    <ts>2017-06-22T15:33:21.717850</ts>
    <user>U0LPMPL2U</user>
    <text>I'm not sure I understand what you're trying to do</text>
  </message>
  <message>
    <ts>2017-06-22T15:33:44.725807</ts>
    <user>U0LPMPL2U</user>
    <text>you're validating that the URLs aren't dead as part of decoding?</text>
  </message>
  <message>
    <ts>2017-06-22T15:33:45.726248</ts>
    <user>U1AN4JRFV</user>
    <text>i have a view, where I show an image with an url that does not exist (404)</text>
  </message>
  <message>
    <ts>2017-06-22T15:33:51.727934</ts>
    <user>U1AN4JRFV</user>
    <text>no, I don't. is that what you would suggest?</text>
  </message>
  <message>
    <ts>2017-06-22T15:34:21.737947</ts>
    <user>U0LPMPL2U</user>
    <text>not necessarily :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-22T15:34:43.745415</ts>
    <user>U1AN4JRFV</user>
    <text>i was thinking of requesting them all with Http, and yes, when if not during decoding?</text>
  </message>
  <message>
    <ts>2017-06-22T15:35:19.757584</ts>
    <user>U1AN4JRFV</user>
    <text>i am actually soon having a workshop with beginners and critical people and i hate to have that in my example app</text>
  </message>
  <message>
    <ts>2017-06-22T15:36:15.775884</ts>
    <user>U1AN4JRFV</user>
    <text>so I guess I could just `List.map Task.perform` something something?</text>
  </message>
  <message>
    <ts>2017-06-22T15:36:31.781589</ts>
    <user>U1AN4JRFV</user>
    <text>as an andThen? i'll give it a shot. thanks!</text>
  </message>
  <message>
    <ts>2017-06-22T15:37:11.795200</ts>
    <user>U1AN4JRFV</user>
    <text>(not that that's any easier to grasp than injecting javascript)</text>
  </message>
  <message>
    <ts>2017-06-22T15:37:26.800303</ts>
    <user>U0JFGGZS6</user>
    <text>don't know what control you have over the server side, but sounds like something you might want to do before even sending to the client if you can?</text>
  </message>
  <message>
    <ts>2017-06-22T15:37:44.806489</ts>
    <user>U1AN4JRFV</user>
    <text>yes i had thought of that as my last resort excuse</text>
  </message>
  <message>
    <ts>2017-06-22T15:37:46.806922</ts>
    <user>U23SA861Y</user>
    <text>can't out put stuff in the img tag specifically to handle this case?</text>
  </message>
  <message>
    <ts>2017-06-22T15:37:57.810930</ts>
    <user>U1AN4JRFV</user>
    <text>:slightly_smiling_face: should be handled on the server, uhm</text>
  </message>
  <message>
    <ts>2017-06-22T15:38:39.825362</ts>
    <user>U1AN4JRFV</user>
    <text>&lt;@U23SA861Y&gt; please explain?</text>
  </message>
  <message>
    <ts>2017-06-22T15:38:51.829435</ts>
    <user>U0JFGGZS6</user>
    <text>(where it can be done in parallel etc.)</text>
  </message>
  <message>
    <ts>2017-06-22T15:39:38.845149</ts>
    <user>U0LPMPL2U</user>
    <text>Have your server guarantee that all urls in the JSON are good</text>
  </message>
  <message>
    <ts>2017-06-22T15:40:12.855960</ts>
    <user>U23SA861Y</user>
    <text>hmm never mind, I thought the brower would handle it different</text>
  </message>
  <message>
    <ts>2017-06-22T15:41:36.884015</ts>
    <user>U1AN4JRFV</user>
    <text>&lt;@U0LPMPL2U&gt; sure, i am just stuck with the situation of having to dissect this app in a company-internal workshop scenario, and it's critical that it is a smooth experience for the success of elm with my company.</text>
  </message>
  <message>
    <ts>2017-06-22T15:42:05.893964</ts>
    <user>U1AN4JRFV</user>
    <text>so the server side does not matter, somehow. because it's not going to change until then</text>
  </message>
  <message>
    <ts>2017-06-22T15:42:19.898691</ts>
    <user>U0LPMPL2U</user>
    <text>OK</text>
  </message>
  <message>
    <ts>2017-06-22T15:43:59.931944</ts>
    <user>U23SA861Y</user>
    <text>```
&amp;lt;object data="avatar.jpg" type="image/jpg"&amp;gt;
    &amp;lt;img src="default.jpg" /&amp;gt;
&amp;lt;/object&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-06-22T15:44:00.932113</ts>
    <user>U1AN4JRFV</user>
    <text>this is probably about to not be elm-related much longer, as I might just have to not bring it up and explain the ways it could be solved, if it does</text>
  </message>
  <message>
    <ts>2017-06-22T15:44:01.932577</ts>
    <user>U23SA861Y</user>
    <text>might work</text>
  </message>
  <message>
    <ts>2017-06-22T15:44:08.934899</ts>
    <user>U1AN4JRFV</user>
    <text>oh, hey</text>
  </message>
  <message>
    <ts>2017-06-22T15:44:31.942599</ts>
    <user>U0JFGGZS6</user>
    <text>do you know exactly what the URLs will be ahead of time?  You could special-case the bad ones just for the demo</text>
  </message>
  <message>
    <ts>2017-06-22T15:45:08.955359</ts>
    <user>U1AN4JRFV</user>
    <text>they are all ok now, it's just the code that will be iffy (and we are heavily looking at it together and there will be eyebrow-raising)</text>
  </message>
  <message>
    <ts>2017-06-22T15:45:33.963917</ts>
    <user>U0LPMPL2U</user>
    <text>Typically, broken image links on the web are handled by the browser by showing some default "broken image" thumbnail</text>
  </message>
  <message>
    <ts>2017-06-22T15:45:49.969513</ts>
    <user>U0LPMPL2U</user>
    <text>Are you trying to do something different?</text>
  </message>
  <message>
    <ts>2017-06-22T15:45:56.971664</ts>
    <user>U1AN4JRFV</user>
    <text>good point</text>
  </message>
  <message>
    <ts>2017-06-22T15:46:08.975640</ts>
    <user>U23SA861Y</user>
    <text>the html I posted allows you to do just that</text>
  </message>
  <message>
    <ts>2017-06-22T15:46:27.981712</ts>
    <user>U1AN4JRFV</user>
    <text>i am about to try that, too</text>
  </message>
  <message>
    <ts>2017-06-22T15:46:27.981834</ts>
    <user>U23SA861Y</user>
    <text>put the placeholder image in the img tag and the actual image from the json in the data field</text>
  </message>
  <message>
    <ts>2017-06-22T15:47:10.996147</ts>
    <user>U1AN4JRFV</user>
    <text>i forgot to mention that it is an Svg.img... hope that won't matter...</text>
  </message>
  <message>
    <ts>2017-06-22T15:47:31.003694</ts>
    <user>U1AN4JRFV</user>
    <text>`Svg.image` even, oh boy</text>
  </message>
  <message>
    <ts>2017-06-22T15:48:05.015141</ts>
    <user>U23SA861Y</user>
    <text>umm, the placeholder is Svg.image or you have preloaded to data and generated an Svg.image</text>
  </message>
  <message>
    <ts>2017-06-22T15:48:22.020679</ts>
    <user>U1AN4JRFV</user>
    <text>` xlinkHref snack.imagepath`</text>
  </message>
  <message>
    <ts>2017-06-22T15:48:36.025300</ts>
    <user>U1AN4JRFV</user>
    <text>crazy, i know</text>
  </message>
  <message>
    <ts>2017-06-22T15:49:41.046958</ts>
    <user>U0JFGGZS6</user>
    <text>haha fun fun</text>
  </message>
  <message>
    <ts>2017-06-22T15:50:31.064033</ts>
    <user>U0LPMPL2U</user>
    <text>This is a table of users with broken avatars</text>
  </message>
  <message>
    <ts>2017-06-22T15:50:39.066710</ts>
    <user>U1AN4JRFV</user>
    <text>yes, i like that best. i just remove the `onerror`-handler</text>
  </message>
  <message>
    <ts>2017-06-22T15:50:43.068066</ts>
    <user>U0LPMPL2U</user>
    <text>would you want to now show a row at all if the image was missing?</text>
  </message>
  <message>
    <ts>2017-06-22T15:50:54.071558</ts>
    <user>U1AN4JRFV</user>
    <text>thanks joel. that, and that it should be checked server-side, is good now.</text>
  </message>
  <message>
    <ts>2017-06-22T15:50:56.072463</ts>
    <user>U0LPMPL2U</user>
    <text>or show a different image than the browser default thumbnail?</text>
  </message>
  <message>
    <ts>2017-06-22T15:51:02.074340</ts>
    <user>U1AN4JRFV</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-22T15:51:06.075675</ts>
    <user>U1AN4JRFV</user>
    <text>that's what i did</text>
  </message>
  <message>
    <ts>2017-06-22T15:51:19.080341</ts>
    <user>U1AN4JRFV</user>
    <text>```unknownImage : Float -&amp;gt; String
unknownImage size =
    let
        center =
            -(round (size / 2))
    in
    setAttributePx "width" (round size)
        ++ setAttributePx "height" (round size)
        ++ setAttributePx "x" center
        ++ setAttributePx "y" center
        ++ "setAttributeNS('&lt;http://www.w3.org/1999/xlink&gt;', 'href', '"
        ++ Config.fallbackImageUrl
        ++ "');"```</text>
  </message>
  <message>
    <ts>2017-06-22T15:51:36.086021</ts>
    <user>U1AN4JRFV</user>
    <text>but I don't like it to be in the code when i show the gang</text>
  </message>
  <message>
    <ts>2017-06-22T15:52:08.097097</ts>
    <user>U1AN4JRFV</user>
    <text>this is called `onerror` as an attribute of the image</text>
  </message>
  <message>
    <ts>2017-06-22T15:52:32.105802</ts>
    <user>U1AN4JRFV</user>
    <text>but do you want to explain this to a beginner?</text>
  </message>
  <message>
    <ts>2017-06-22T15:52:46.110727</ts>
    <user>U1AN4JRFV</user>
    <text>that's what i was going for and I got two solid outs. thanks again!</text>
  </message>
  <message>
    <ts>2017-06-22T17:51:41.386264</ts>
    <user>U0EUHKVGB</user>
    <text>Yes, you are right</text>
  </message>
  <message>
    <ts>2017-06-22T17:52:10.393609</ts>
    <user>U0EUHKVGB</user>
    <text>Think of the type of update syntax. It’s basically `record -&amp;gt; record`, so it can’t change the fields</text>
  </message>
  <message>
    <ts>2017-06-22T17:52:26.398122</ts>
    <user>U4872964V</user>
    <text>it can change the type of the fields, but not add fields</text>
  </message>
  <message>
    <ts>2017-06-22T17:52:39.401539</ts>
    <user>U4872964V</user>
    <text>it’s a pretty arbitrary restriction though, but one that exists</text>
  </message>
  <message>
    <ts>2017-06-22T17:52:39.401595</ts>
    <user>U0EUHKVGB</user>
    <text>That is a flaw rather than a feature</text>
  </message>
  <message>
    <ts>2017-06-22T17:53:29.414016</ts>
    <user>U2HFK584C</user>
    <text>Right. that is an inconvenience.</text>
  </message>
  <message>
    <ts>2017-06-22T17:55:02.437338</ts>
    <user>U4872964V</user>
    <text>I think this was restricted to avoid typos, like if you spell a field name wrong it would be an error</text>
  </message>
  <message>
    <ts>2017-06-22T17:59:10.500161</ts>
    <user>U0EUHKVGB</user>
    <text>See this: &lt;http://elm-lang.org/blog/compilers-as-assistants#simplified-records&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T19:33:32.609539</ts>
    <user>U5LFUHH19</user>
    <text>I see there is `List.unzip`, but where is `zip`?</text>
  </message>
  <message>
    <ts>2017-06-22T19:34:11.615694</ts>
    <user>U5LFUHH19</user>
    <text>That is, I have two Lists and I want to create `List Tuple`</text>
  </message>
  <message>
    <ts>2017-06-22T19:34:40.620274</ts>
    <user>U5LFUHH19</user>
    <text>Oh, is that `map2`?</text>
  </message>
  <message>
    <ts>2017-06-22T19:35:24.627753</ts>
    <user>U5LFUHH19</user>
    <text>Sorry, it's right there in the examples.</text>
  </message>
  <message>
    <ts>2017-06-22T19:41:58.691224</ts>
    <user>U2LAL86AY</user>
    <text>i'm having a big update function - 11 constructors on Msg - - there are no pattern matches on tuple - but i do a lot of dict update and nested update.  

I have visible lag when compiling - my atom editor is freezing and i can't even scroll at times. I have compile on save turned on. And i hit ctrl-s a lot - it's like instinct.

Right now all the logic lives inside the update.  Will it help if i have small functions doing their specific thing? Like 

```
case msg of 
      SomeMsg -&amp;gt; 
          smallUpdateFunction model
               =&amp;gt; []
```
Making everything one liner.?! Will this help? Or i'll end up making all this functions for nothing. I don't understand enough about how the compiler works to say..
Any insights into this?</text>
  </message>
  <message>
    <ts>2017-06-22T19:44:58.719882</ts>
    <user>U2LAL86AY</user>
    <text>could it be that the compiler will cash all this `smallUpdate` functions - and only compiles the ones i changed? making this compilation a lot more faster?</text>
  </message>
  <message>
    <ts>2017-06-22T19:46:39.736331</ts>
    <user>U5LFUHH19</user>
    <text>Best way to unique a list `uniq = Set.fromList [4,1,2,3,1] |&amp;gt; Set.toList`?</text>
  </message>
  <message>
    <ts>2017-06-22T19:48:33.753850</ts>
    <user>U2LAL86AY</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-community/list-extra/6.1.0/List-Extra#unique&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T19:49:15.760470</ts>
    <user>U2LAL86AY</user>
    <text>```
unique : List comparable -&amp;gt; List comparable
unique list =
    uniqueHelp identity Set.empty list
```</text>
  </message>
  <message>
    <ts>2017-06-22T19:49:20.761460</ts>
    <user>U5LFUHH19</user>
    <text>Nice, thanks.</text>
  </message>
  <message>
    <ts>2017-06-22T19:49:27.762461</ts>
    <user>U2LAL86AY</user>
    <text>&lt;https://github.com/elm-community/list-extra/blob/6.1.0/src/List/Extra.elm#L315&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T21:56:59.783157</ts>
    <user>U1SQLHY1G</user>
    <text>with evan saying 0.19 was going to be all about SPA, what happens to elm-ui and elm-mdl</text>
  </message>
  <message>
    <ts>2017-06-23T00:15:42.700064</ts>
    <user>U0F7JPK36</user>
    <text>&lt;@U1SQLHY1G&gt; can you say more about how those are related</text>
  </message>
  <message>
    <ts>2017-06-23T00:21:05.733743</ts>
    <user>U4F64AKQV</user>
    <text>What does a high std dev mean in terms of elm-benchmark? What would make a function perform so inconsistently?</text>
  </message>
  <message>
    <ts>2017-06-23T00:22:16.741316</ts>
    <user>U4F64AKQV</user>
    <text>kyclark: There’s also `List.Extra.zip`, which is implemented as `map2 (,)` iirc.</text>
  </message>
  <message>
    <ts>2017-06-23T00:24:51.756882</ts>
    <user>U4F64AKQV</user>
    <text>Also note that the implementation I am comparing it against has a very small std dev.</text>
  </message>
  <message>
    <ts>2017-06-23T01:58:03.330679</ts>
    <user>U1TMAG4FK</user>
    <text>&lt;@U4F64AKQV&gt; just a wild guess but maybe the one function causes more memory allocation/deallocation and is therefore more likely to trigger garbage collection while it's running? If sometimes the GC ran and other times it didn't that could explain it...</text>
  </message>
  <message>
    <ts>2017-06-23T01:59:43.341412</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U1TMAG4FK&gt; that sounds reasonable. The function with high std dev is creating more intermediate data structures.</text>
  </message>
  <message>
    <ts>2017-06-23T02:02:07.360583</ts>
    <user>U1TMAG4FK</user>
    <text>&lt;@U4F64AKQV&gt; might be able to check it with something like Chrome dev tools performance monitoring - it calls out GC pauses separately</text>
  </message>
  <message>
    <ts>2017-06-23T03:09:09.895875</ts>
    <user>U3SJEDR96</user>
    <text>yeah, that would be my guess, too. Is the stddev higher than the performance diff, tho, &lt;@U4F64AKQV&gt; ?</text>
  </message>
  <message>
    <ts>2017-06-23T04:40:54.972054</ts>
    <user>U1NME8MS8</user>
    <text>The moment of shock you realize there is not a single JS library doing something an elm library solves already quite well</text>
  </message>
  <message>
    <ts>2017-06-23T04:41:03.974109</ts>
    <user>U1NME8MS8</user>
    <text>&lt;@U0K92QFST&gt;++</text>
  </message>
  <message>
    <ts>2017-06-23T06:55:18.692351</ts>
    <user>U0H3A9XLN</user>
    <text>Is there a way to know how many packages elm-package have? How many of them are up-to-date with language version?</text>
  </message>
  <message>
    <ts>2017-06-23T06:56:06.701452</ts>
    <user>U3SJEDR96</user>
    <text>&lt;http://package.elm-lang.org/new-packages&gt; &amp;lt;- 0.18 compatible</text>
  </message>
  <message>
    <ts>2017-06-23T06:56:20.704001</ts>
    <user>U3SJEDR96</user>
    <text>so 607 currently</text>
  </message>
  <message>
    <ts>2017-06-23T06:56:40.707558</ts>
    <user>U0H3A9XLN</user>
    <text>Cool!</text>
  </message>
  <message>
    <ts>2017-06-23T06:56:46.708715</ts>
    <user>U0H3A9XLN</user>
    <text>How much in total?</text>
  </message>
  <message>
    <ts>2017-06-23T06:57:08.712627</ts>
    <user>U0H3A9XLN</user>
    <text>Sorry, I am from the phone, can't try it myself</text>
  </message>
  <message>
    <ts>2017-06-23T06:57:44.719519</ts>
    <user>U3SJEDR96</user>
    <text>926</text>
  </message>
  <message>
    <ts>2017-06-23T06:58:20.726453</ts>
    <user>U0H3A9XLN</user>
    <text>Ok, thanks!</text>
  </message>
  <message>
    <ts>2017-06-23T07:20:05.962169</ts>
    <user>U2D7NUGS1</user>
    <text>Good day everybody!</text>
  </message>
  <message>
    <ts>2017-06-23T07:20:56.970827</ts>
    <user>U2D7NUGS1</user>
    <text>If I've run into an error message that IMO could be more helpful, where do I look for existing issues or file a new one?</text>
  </message>
  <message>
    <ts>2017-06-23T07:21:24.975509</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/elm-lang/error-message-catalog&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T07:21:57.981219</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks &lt;@U0EUHKVGB&gt; !</text>
  </message>
  <message>
    <ts>2017-06-23T07:27:06.034127</ts>
    <user>U0U6ML22H</user>
    <text>Just checking: there's no way to share the Elm runtime between many apps, right? We're serving many Elm mini-apps on the same page, and don't want to serve several megs of the same thing...</text>
  </message>
  <message>
    <ts>2017-06-23T07:28:16.046122</ts>
    <user>U3SJEDR96</user>
    <text>What does "sharing the elm runtime" mean, exactly? They need a separate model, and update; but the actual functions and whatnot _are_ shared, they just get separate structures for what's actually _going on_</text>
  </message>
  <message>
    <ts>2017-06-23T07:28:27.048025</ts>
    <user>U3SJEDR96</user>
    <text>shouldn't be several megs unless you have a large model, though</text>
  </message>
  <message>
    <ts>2017-06-23T07:28:59.053661</ts>
    <user>U0EUHKVGB</user>
    <text>You can compile it into a single bundle, &lt;@U0U6ML22H&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T07:29:03.054474</ts>
    <user>U0EUHKVGB</user>
    <text>`elm-make A.elm B.elm`</text>
  </message>
  <message>
    <ts>2017-06-23T07:29:04.054558</ts>
    <user>U3SJEDR96</user>
    <text>i.e. if you bundle multiple modules `elm-make Module1.elm Module2.elm --output bundle.js`, it's just one defintion for everything</text>
  </message>
  <message>
    <ts>2017-06-23T07:30:38.072076</ts>
    <user>U0EUHKVGB</user>
    <text>there is a PR for adding support to webpack: &lt;https://github.com/elm-community/elm-webpack-loader/pull/119&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T07:34:22.110608</ts>
    <user>U2D7NUGS1</user>
    <text>Hmm... now I'm confused. I have a following Elm module in file `View.elm`.

```
 module View
```

There is an accidental whitespace before module definition. `elm-live` tells me this:

```
The module name is messed up for ././src/View.elm

    According to the file's name it should be View
    According to the source code it should be Main

Which is it?
```

This IMO is a little bit confusing. I thought it's coming from `elm-make` and wanted to report this, but apparently it's not. :

```
$ ./node_modules/.bin/elm-make src/View.elm
-- SYNTAX PROBLEM ------------------------------------------------- src/View.elm

I need a fresh line to start a new declaration. This means a new line that
starts with stuff, not with spaces or comments.

1|  module View
    ^
I am looking for one of the following things:

    whitespace

Detected errors in 1 module. 
```

Where is the `elm-live` output coming from?</text>
  </message>
  <message>
    <ts>2017-06-23T07:35:27.121522</ts>
    <user>U3SJEDR96</user>
    <text>might just be elm-live getting confused by files being created/renamed/..? not sure</text>
  </message>
  <message>
    <ts>2017-06-23T07:36:07.128332</ts>
    <user>U2D7NUGS1</user>
    <text>The file was there when I started it. The space was new, so no rename there.</text>
  </message>
  <message>
    <ts>2017-06-23T07:36:13.129237</ts>
    <user>U3SJEDR96</user>
    <text>what happens if you `elm-make src/Main.elm`, &lt;@U2D7NUGS1&gt; ?</text>
  </message>
  <message>
    <ts>2017-06-23T07:36:27.131730</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U0EUHKVGB&gt; &lt;@U3SJEDR96&gt; hmm OK, let me explain: our backend serves pages with different small Elm apps in them (one or more per page/route). These are all compiled to their own .js. They, I believe, all include the Elm runtime. The thing is, one page/route might embed several of those apps, and each of those will, as established, contain the Elm runtime. I'd like it if it was possible to have only the Elm runtime as one file, and the remaining apps as their own file. In the app, each page/route could theoretically need to embed one or more Elm apps (by that I mean it's important to keep the apps independent)</text>
  </message>
  <message>
    <ts>2017-06-23T07:36:41.134047</ts>
    <user>U0EUHKVGB</user>
    <text>No, you can’t do that</text>
  </message>
  <message>
    <ts>2017-06-23T07:36:52.135853</ts>
    <user>U0EUHKVGB</user>
    <text>You have to create one big bundle</text>
  </message>
  <message>
    <ts>2017-06-23T07:36:59.137048</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U3SJEDR96&gt; bingo!</text>
  </message>
  <message>
    <ts>2017-06-23T07:37:35.143143</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2D7NUGS1&gt;, when you run `elm-make` directly on a file, it will assume the name is `Main.elm` unless it finds a valid module decleration telling it otherwise.</text>
  </message>
  <message>
    <ts>2017-06-23T07:37:50.145594</ts>
    <user>U0EUHKVGB</user>
    <text>Hence why the errors are different.</text>
  </message>
  <message>
    <ts>2017-06-23T07:38:09.148945</ts>
    <user>U2D7NUGS1</user>
    <text>Yeah, I get this. I just think the error could be improved.</text>
  </message>
  <message>
    <ts>2017-06-23T07:38:35.153473</ts>
    <user>U0EUHKVGB</user>
    <text>Yep. Just explaining how it works</text>
  </message>
  <message>
    <ts>2017-06-23T07:38:43.154678</ts>
    <user>U2D7NUGS1</user>
    <text>Sure. Thanks.</text>
  </message>
  <message>
    <ts>2017-06-23T07:39:15.159970</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U0EUHKVGB&gt; yeah, the big bundle won't work in that case :smiley: Do you think that the compiler improvements in 0.19 could help with that use case, or is it completely out of scope?</text>
  </message>
  <message>
    <ts>2017-06-23T07:40:19.171343</ts>
    <user>U2D7NUGS1</user>
    <text>I didn't find any issue about it, so I guess I can  file a new one at &lt;https://github.com/elm-lang/error-message-catalog/issues&gt; as you suggested &lt;@U0EUHKVGB&gt; .</text>
  </message>
  <message>
    <ts>2017-06-23T07:42:05.189634</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0U6ML22H&gt; Yes, but it would work based on compiling multiple entry points together, I suspect.</text>
  </message>
  <message>
    <ts>2017-06-23T07:43:45.207233</ts>
    <user>U0U6ML22H</user>
    <text>do you mean that the improvements are geared more towards optimizing "one big Elm app with several Elm-pages served by Navigation" instead of optimizing our use case of serving several small (but full-fledged) Elm apps in one single HTML page?</text>
  </message>
  <message>
    <ts>2017-06-23T07:44:06.211262</ts>
    <user>U0EUHKVGB</user>
    <text>We don’t know</text>
  </message>
  <message>
    <ts>2017-06-23T07:44:14.212767</ts>
    <user>U0U6ML22H</user>
    <text>OK</text>
  </message>
  <message>
    <ts>2017-06-23T07:44:17.213245</ts>
    <user>U0EUHKVGB</user>
    <text>I’m only guessing</text>
  </message>
  <message>
    <ts>2017-06-23T07:44:32.215892</ts>
    <user>U0U6ML22H</user>
    <text>all right, thanks for your help :smiley:</text>
  </message>
  <message>
    <ts>2017-06-23T07:49:18.265981</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0U6ML22H&gt; it will depend on how many of those apps exist in your ecosystem, but if you have, say, on average 60% of those active in a single user-session, it might be worth bundling _all_ of them in a single file and trying to send it to the user gzipped and minified. It's a trade-off; but perhaps it's better to have them download 1 larger file, rather than 20 slightly-less-large files over the course of a single session</text>
  </message>
  <message>
    <ts>2017-06-23T07:49:59.273019</ts>
    <user>U3SJEDR96</user>
    <text>especially considering the sum of those files will be larger than the single large bundle (due to duplication)</text>
  </message>
  <message>
    <ts>2017-06-23T07:50:14.275936</ts>
    <user>U0U6ML22H</user>
    <text>yup, I agree with that kind of reasoning; I was just thinking it should be easy to share the Elm runtime as a side-dependency</text>
  </message>
  <message>
    <ts>2017-06-23T07:50:31.279053</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, I don't think that can be (easily) done</text>
  </message>
  <message>
    <ts>2017-06-23T07:50:54.282953</ts>
    <user>U0U6ML22H</user>
    <text>I'm probably not good enough to understand why ^^</text>
  </message>
  <message>
    <ts>2017-06-23T07:52:12.296645</ts>
    <user>U0EUHKVGB</user>
    <text>It can be done, but right now you will be fighting more than you are achieving.</text>
  </message>
  <message>
    <ts>2017-06-23T07:52:30.299986</ts>
    <user>U0EUHKVGB</user>
    <text>I _suspect_ that this is what is coming with 0.19.</text>
  </message>
  <message>
    <ts>2017-06-23T07:55:08.328023</ts>
    <user>U5ZANGQ14</user>
    <text>:wave:</text>
  </message>
  <message>
    <ts>2017-06-23T07:58:22.363980</ts>
    <user>U0U6ML22H</user>
    <text>thanks &lt;@U0EUHKVGB&gt; and &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T08:15:18.569226</ts>
    <user>U3R7CKQRX</user>
    <text>does anyone know what the most elegant way is to conditionally render an attribute in elm?</text>
  </message>
  <message>
    <ts>2017-06-23T08:16:01.578164</ts>
    <user>U3R7CKQRX</user>
    <text>with html you can just do `if someBool then p [] [] else text ""`. what is the equivalent for attributes?</text>
  </message>
  <message>
    <ts>2017-06-23T08:16:35.585017</ts>
    <user>U0U6ML22H</user>
    <text>what we do is append to a list</text>
  </message>
  <message>
    <ts>2017-06-23T08:17:23.594631</ts>
    <user>U3R7CKQRX</user>
    <text>yeah that's why I asked for the most elegant way. That was the only one I could come up with and it not that nice to use. :confused:</text>
  </message>
  <message>
    <ts>2017-06-23T08:17:45.599250</ts>
    <user>U0U6ML22H</user>
    <text>so something like
```
let
attrsForAll = [ onClick Bleh ]
conditionalAttrs = if (cond) then [ class "condIsTrue" ] else []
in
div (attrsForAll ++ conditionalAttrs) []```</text>
  </message>
  <message>
    <ts>2017-06-23T08:18:03.602875</ts>
    <user>U0U6ML22H</user>
    <text>what do you think is not nice about it?</text>
  </message>
  <message>
    <ts>2017-06-23T08:18:53.613222</ts>
    <user>U3R7CKQRX</user>
    <text>I was hoping for a shorter solution. But I guess that's the only way to do it.</text>
  </message>
  <message>
    <ts>2017-06-23T08:19:06.615961</ts>
    <user>U0EUHKVGB</user>
    <text>`none = attribute "" ""`</text>
  </message>
  <message>
    <ts>2017-06-23T08:19:30.620987</ts>
    <user>U0EUHKVGB</user>
    <text>`if someBool then none else class "hello"`</text>
  </message>
  <message>
    <ts>2017-06-23T08:19:46.624363</ts>
    <user>U3R7CKQRX</user>
    <text>ah that's nice</text>
  </message>
  <message>
    <ts>2017-06-23T08:20:00.627119</ts>
    <user>U3R7CKQRX</user>
    <text>that's the shorty I was looking for :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T08:20:28.633268</ts>
    <user>U3R7CKQRX</user>
    <text>thank you &lt;@U0U6ML22H&gt; and &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T08:21:55.651609</ts>
    <user>U3SJEDR96</user>
    <text>I think that'll blow up</text>
  </message>
  <message>
    <ts>2017-06-23T08:22:37.660504</ts>
    <user>U3SJEDR96</user>
    <text>empty string isn't a valid attribute name, so the eventual `setAttrbute` would blow up</text>
  </message>
  <message>
    <ts>2017-06-23T08:23:12.667614</ts>
    <user>U3SJEDR96</user>
    <text>try something non-sensical like `none = attribute "foo" ""` which... shouldn't blow up</text>
  </message>
  <message>
    <ts>2017-06-23T08:23:38.673272</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3yrYYJzM6mVa1/0&gt; for example</text>
  </message>
  <message>
    <ts>2017-06-23T08:24:50.688825</ts>
    <user>U0EUHKVGB</user>
    <text>Yes, or `data-foo`</text>
  </message>
  <message>
    <ts>2017-06-23T08:25:02.691297</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T08:25:16.694587</ts>
    <user>U3SJEDR96</user>
    <text>oh yeah, that's probably safer even</text>
  </message>
  <message>
    <ts>2017-06-23T08:28:03.730970</ts>
    <user>U3R7CKQRX</user>
    <text>yeah it does blow up `ncaught DOMException: Failed to execute 'setAttribute' on 'Element': '' is not a valid attribute name.`</text>
  </message>
  <message>
    <ts>2017-06-23T08:28:15.733386</ts>
    <user>U0EUHKVGB</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-06-23T08:28:38.738320</ts>
    <user>U3R7CKQRX</user>
    <text>so I guess appending to the list is what I will use</text>
  </message>
  <message>
    <ts>2017-06-23T08:28:51.741007</ts>
    <user>U0EUHKVGB</user>
    <text>Hm?</text>
  </message>
  <message>
    <ts>2017-06-23T08:28:58.742420</ts>
    <user>U0EUHKVGB</user>
    <text>`none = attribute "data-foo" ""`</text>
  </message>
  <message>
    <ts>2017-06-23T08:28:59.742635</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U3R7CKQRX&gt; using "data-foo" will not blow up</text>
  </message>
  <message>
    <ts>2017-06-23T08:29:01.743189</ts>
    <user>U0EUHKVGB</user>
    <text>this will work</text>
  </message>
  <message>
    <ts>2017-06-23T08:29:23.748003</ts>
    <user>U0U6ML22H</user>
    <text>it'll remain shorter if you have one conditional attribute</text>
  </message>
  <message>
    <ts>2017-06-23T08:30:57.770037</ts>
    <user>U0U6ML22H</user>
    <text>I checked in Ellie, and it seems it's OK to have several of the same attributes in the Elm code</text>
  </message>
  <message>
    <ts>2017-06-23T08:31:11.773091</ts>
    <user>U3SJEDR96</user>
    <text>they'll just override, last one wins</text>
  </message>
  <message>
    <ts>2017-06-23T08:31:30.777544</ts>
    <user>U3SJEDR96</user>
    <text>(except for `style` and `class` which get special treatment)</text>
  </message>
  <message>
    <ts>2017-06-23T08:31:40.779703</ts>
    <user>U0U6ML22H</user>
    <text>they do?</text>
  </message>
  <message>
    <ts>2017-06-23T08:31:51.782190</ts>
    <user>U0U6ML22H</user>
    <text>don't tell me they add up automatically?</text>
  </message>
  <message>
    <ts>2017-06-23T08:31:56.783226</ts>
    <user>U3SJEDR96</user>
    <text>they do</text>
  </message>
  <message>
    <ts>2017-06-23T08:32:19.788702</ts>
    <user>U0U6ML22H</user>
    <text>all that time wasted manually doing something that other, more clever people, did for me... ^^</text>
  </message>
  <message>
    <ts>2017-06-23T08:33:15.800818</ts>
    <user>U0EUHKVGB</user>
    <text>It doesn’t require intelligence, it requires the ability to modify the internals of the virtual-dom :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-23T08:34:22.816052</ts>
    <user>U2D7NUGS1</user>
    <text>Ok, done: &lt;https://github.com/elm-lang/error-message-catalog/issues/223&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T08:34:52.823260</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks for help &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T08:46:46.989690</ts>
    <user>U0K92QFST</user>
    <text>dawehner: you mean `elm-jsonapi`?</text>
  </message>
  <message>
    <ts>2017-06-23T08:48:43.017606</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U0EUHKVGB&gt; &lt;@U3SJEDR96&gt; &lt;@U0U6ML22H&gt; that was actuaaly The first time ever i caused a runtime error in elm. :-) Crazy that getting errors in Elm seems so weird where in js it happens all the time. Those solutions will get me where I need to go. Thank you.</text>
  </message>
  <message>
    <ts>2017-06-23T08:49:24.027321</ts>
    <user>U1NME8MS8</user>
    <text>I totally do. It's far more complete than many other things I've seen out there. For me at least though I'm wondering whether inlining those includes in the first place might be the better solution</text>
  </message>
  <message>
    <ts>2017-06-23T08:52:55.079807</ts>
    <user>U0GR6DHEK</user>
    <text>Hi all. Is there a way to handle a missing flag in Elm? I tried 
`init : { queryString : String, debug : Maybe Bool } -&amp;gt; ( Model, Cmd Msg )` where debug may or may not be present when elm is started as embedded</text>
  </message>
  <message>
    <ts>2017-06-23T08:53:22.086696</ts>
    <user>U0GR6DHEK</user>
    <text>but it complains debug is missing, rather than just giving me `Nothing` as I had hoped</text>
  </message>
  <message>
    <ts>2017-06-23T08:53:26.087898</ts>
    <user>U0EUHKVGB</user>
    <text>You can bring flags in as json and decode them</text>
  </message>
  <message>
    <ts>2017-06-23T08:53:40.091250</ts>
    <user>U0GR6DHEK</user>
    <text>aha</text>
  </message>
  <message>
    <ts>2017-06-23T08:53:41.091657</ts>
    <user>U0EUHKVGB</user>
    <text>`debug` should be `null` if you’re trying to use a maybe</text>
  </message>
  <message>
    <ts>2017-06-23T08:53:54.094874</ts>
    <user>U0EUHKVGB</user>
    <text>But I would use a decoder myself</text>
  </message>
  <message>
    <ts>2017-06-23T08:54:14.099684</ts>
    <user>U0GPGFQQY</user>
    <text>Hello! Is it generally a bad idea to have recursive Msg definition and keep message in the model? In my case I would like to have a generic confirmation box, and I would like it to keep the original message for the `onClick` handler.</text>
  </message>
  <message>
    <ts>2017-06-23T08:54:31.104295</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0GPGFQQY&gt; Can you explain by code what you mean by that?</text>
  </message>
  <message>
    <ts>2017-06-23T08:54:47.108309</ts>
    <user>U0EUHKVGB</user>
    <text>Recursive Msg definition in particular</text>
  </message>
  <message>
    <ts>2017-06-23T08:55:10.114398</ts>
    <user>U0GPGFQQY</user>
    <text>`type Msg = Something1 | Something2 | Confirm Msg`</text>
  </message>
  <message>
    <ts>2017-06-23T08:55:50.124931</ts>
    <user>U0EUHKVGB</user>
    <text>Why is it recursive?</text>
  </message>
  <message>
    <ts>2017-06-23T08:55:51.125042</ts>
    <user>U0GPGFQQY</user>
    <text>`type alias Model = { confirmation : Maybe Msg }`</text>
  </message>
  <message>
    <ts>2017-06-23T08:56:12.130647</ts>
    <user>U0GPGFQQY</user>
    <text>cause it can be infinitely nested</text>
  </message>
  <message>
    <ts>2017-06-23T08:56:40.137882</ts>
    <user>U0GPGFQQY</user>
    <text>maybe I used a wrong word to describe this :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T08:56:47.139679</ts>
    <user>U0GR6DHEK</user>
    <text>thanks &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T08:57:12.146018</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0GPGFQQY&gt; Why does it need to be nested - what is it trying to represent?</text>
  </message>
  <message>
    <ts>2017-06-23T08:58:03.159880</ts>
    <user>U0GPGFQQY</user>
    <text>So instead of having an command that sends `Something1` I would send `Confirm Something1`, and then put it into the confirmation submodel</text>
  </message>
  <message>
    <ts>2017-06-23T08:58:13.162662</ts>
    <user>U0K92QFST</user>
    <text>Thank you for the compliment! I actually consider it very basic still :smile: There’s a lot more functionality I’d like to include and definitely a few API design passes</text>
  </message>
  <message>
    <ts>2017-06-23T08:58:33.168119</ts>
    <user>U0GPGFQQY</user>
    <text>Then I would render a confirmation box, that would take this msg out and put it onto `onClick` on the Confirm button</text>
  </message>
  <message>
    <ts>2017-06-23T08:58:45.171606</ts>
    <user>U0K92QFST</user>
    <text>By inlining the includes, you mean allowing the user to access the `included` array rather than abstracting the relationships away from them?</text>
  </message>
  <message>
    <ts>2017-06-23T08:58:55.173975</ts>
    <user>U0EUHKVGB</user>
    <text>So, that already sounds a bit fishy to me</text>
  </message>
  <message>
    <ts>2017-06-23T08:59:28.182635</ts>
    <user>U0EUHKVGB</user>
    <text>```
module Confirm exposing (view)

view : msg -&amp;gt; String -&amp;gt; Html msg
view onConfirm str = ...
```</text>
  </message>
  <message>
    <ts>2017-06-23T08:59:37.185155</ts>
    <user>U0EUHKVGB</user>
    <text>How does your view look?</text>
  </message>
  <message>
    <ts>2017-06-23T08:59:45.186983</ts>
    <user>U0EUHKVGB</user>
    <text>in terms of types of the generic thingy</text>
  </message>
  <message>
    <ts>2017-06-23T09:00:23.200133</ts>
    <user>U0GPGFQQY</user>
    <text>I have no idea yet, could be just an overlay on top of everything if there is something to confirm.</text>
  </message>
  <message>
    <ts>2017-06-23T09:01:37.221814</ts>
    <user>U0GPGFQQY</user>
    <text>I would check if there is smth to confirm, then show the overlay on top of the content with Yes and No buttons</text>
  </message>
  <message>
    <ts>2017-06-23T09:02:49.242060</ts>
    <user>U0EUHKVGB</user>
    <text>Why do you want to store the message in the model?</text>
  </message>
  <message>
    <ts>2017-06-23T09:03:10.247762</ts>
    <user>U0EUHKVGB</user>
    <text>Why not just trigger it when the confirm button is clicked?</text>
  </message>
  <message>
    <ts>2017-06-23T09:03:58.260931</ts>
    <user>U0GPGFQQY</user>
    <text>Because then I could reuse this for any confirmation, and I would just have to change `onClick Whatever` to `onClick (Confirm Whatever)`.</text>
  </message>
  <message>
    <ts>2017-06-23T09:05:46.291523</ts>
    <user>U0EUHKVGB</user>
    <text>```
module Confirm exposing (view)


view : msg -&amp;gt; msg -&amp;gt; String -&amp;gt; Html msg
view onConfirm onCancel str = ...
  Html.div
    []
    [ Html.button [ onClick onConfirm ] [ text "Confirm" ]
    , Html.button [ onClick onCancel ] [ text "Cancel" ]
    ]
```</text>
  </message>
  <message>
    <ts>2017-06-23T09:06:10.298065</ts>
    <user>U0EUHKVGB</user>
    <text>this is reusable for any confirmation and does not require storing any message in the model, nor creating a recursive constructor</text>
  </message>
  <message>
    <ts>2017-06-23T09:07:04.312930</ts>
    <user>U0GPGFQQY</user>
    <text>hm, but how do I trigger this? e.g. I have a delete button, and I want to show this confirmation when this button is clicked, and then re-trigger the actual delete msg</text>
  </message>
  <message>
    <ts>2017-06-23T09:08:10.331066</ts>
    <user>U0EUHKVGB</user>
    <text>So then you just have a field in your model which is like `showConfirm : Bool`</text>
  </message>
  <message>
    <ts>2017-06-23T09:08:38.339004</ts>
    <user>U0EUHKVGB</user>
    <text>One for each confirm case (start here - you might find a nicer representation later)</text>
  </message>
  <message>
    <ts>2017-06-23T09:09:12.348052</ts>
    <user>U0GPGFQQY</user>
    <text>I've got a list of items with delete buttons, but I also have a delete button on the item's page</text>
  </message>
  <message>
    <ts>2017-06-23T09:09:31.353381</ts>
    <user>U0EUHKVGB</user>
    <text>And then the same for opening the confirm, you’ll have `type Msg = OpenConfirm String | CloseConfirm String | Confirm String`</text>
  </message>
  <message>
    <ts>2017-06-23T09:09:44.357179</ts>
    <user>U0EUHKVGB</user>
    <text>then use `OpenConfirm buttonId` or something to pass to this view</text>
  </message>
  <message>
    <ts>2017-06-23T09:10:15.365976</ts>
    <user>U0EUHKVGB</user>
    <text>e.g `Confirm.view (Confirm button.id) (CloseConfirm button.id) button.text`</text>
  </message>
  <message>
    <ts>2017-06-23T09:11:08.381201</ts>
    <user>U0GPGFQQY</user>
    <text>I'm not sure what you mean, what is a `buttonId`?</text>
  </message>
  <message>
    <ts>2017-06-23T09:11:35.388608</ts>
    <user>U0EUHKVGB</user>
    <text>Are you generating the delete buttons via `List.map` and friends?</text>
  </message>
  <message>
    <ts>2017-06-23T09:11:47.391868</ts>
    <user>U0GPGFQQY</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-23T09:11:59.395583</ts>
    <user>U0EUHKVGB</user>
    <text>I’m imaging you have something like this `List.map viewDeleteThing buttons`</text>
  </message>
  <message>
    <ts>2017-06-23T09:12:22.401963</ts>
    <user>U0EUHKVGB</user>
    <text>where `buttons : List Button`, and `type alias Button = { id : String, text : String, thing : a}`</text>
  </message>
  <message>
    <ts>2017-06-23T09:12:54.410742</ts>
    <user>U0EUHKVGB</user>
    <text>It can be anything which is uniquely identifiable about each element</text>
  </message>
  <message>
    <ts>2017-06-23T09:13:26.419897</ts>
    <user>U0EUHKVGB</user>
    <text>Avoid using `indexedMap` as the id - this can change each render! So if you need to, apply `indexedMap` when you _load_ the button data to get an id</text>
  </message>
  <message>
    <ts>2017-06-23T09:14:53.444567</ts>
    <user>U0GPGFQQY</user>
    <text>Ok, let's assume I got an id of each item from the backend. But this is only needed for the Delete message, and Confirm message is needed to confirm that Delete</text>
  </message>
  <message>
    <ts>2017-06-23T09:17:24.488149</ts>
    <user>U0GPGFQQY</user>
    <text>So my original plan was to dispatch `Confirm (Delete itemId)`, that would put `Delete itemId` into `confirm: Maybe Msg`, and that would result in the view, that shows a button with `onClick msgToConfirm` if it is `Just msgToConfirm`</text>
  </message>
  <message>
    <ts>2017-06-23T09:20:01.533980</ts>
    <user>U0EUHKVGB</user>
    <text>just store it as a maybe of the id :)</text>
  </message>
  <message>
    <ts>2017-06-23T09:21:32.561695</ts>
    <user>U0GPGFQQY</user>
    <text>I guess I can live with that, I was thinking that there may be more things to confirm, besides just deleting</text>
  </message>
  <message>
    <ts>2017-06-23T09:23:28.596725</ts>
    <user>U1N4KAHT6</user>
    <text>Why does this compile? ```range : number -&amp;gt; number -&amp;gt; number -&amp;gt; List number
range start stop step =
    let
        n =
            (stop - start)
                / step
                |&amp;gt; ceiling
                -- get rid of NaN
                |&amp;gt; Bitwise.or 0
                |&amp;gt; max 0

        helper i list =
            if i &amp;gt;= 0 then
                helper (i - 1) &amp;lt;| start + step * i :: list
            else
                list
    in
        helper (n - 1) []
```? Given that `/` says it’s arguments need to be `Float`, but the type declaration says it’s `number`?</text>
  </message>
  <message>
    <ts>2017-06-23T09:23:57.605635</ts>
    <user>U0EUHKVGB</user>
    <text>then you just change the onConfrim message you pass to the view </text>
  </message>
  <message>
    <ts>2017-06-23T09:25:29.634125</ts>
    <user>U0GPGFQQY</user>
    <text>model field `confirm: Maybe String` should change then</text>
  </message>
  <message>
    <ts>2017-06-23T09:25:45.638873</ts>
    <user>U0GPGFQQY</user>
    <text>because I can confirm more things than just deleting by id</text>
  </message>
  <message>
    <ts>2017-06-23T09:26:30.652986</ts>
    <user>U0GPGFQQY</user>
    <text>Does it make sense to just use Msg there, or I should create my own union `type Confirm : Delete String | OtherThingToConfirm`</text>
  </message>
  <message>
    <ts>2017-06-23T09:27:42.675119</ts>
    <user>U0EUHKVGB</user>
    <text>Generally, I prefer to keep the Msg focused on UI interactions, rather than logic</text>
  </message>
  <message>
    <ts>2017-06-23T09:27:58.680224</ts>
    <user>U0EUHKVGB</user>
    <text>So I would make a new union</text>
  </message>
  <message>
    <ts>2017-06-23T09:28:17.686330</ts>
    <user>U0GPGFQQY</user>
    <text>ok, thanks, this was helpful!</text>
  </message>
  <message>
    <ts>2017-06-23T09:29:37.711023</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U1N4KAHT6&gt; &lt;https://github.com/elm-lang/elm-compiler/issues/1373&gt; it shouldn't, and it's a bug (with some known variations)</text>
  </message>
  <message>
    <ts>2017-06-23T09:33:17.783497</ts>
    <user>U1N4KAHT6</user>
    <text>I thought so</text>
  </message>
  <message>
    <ts>2017-06-23T09:34:06.799283</ts>
    <user>U1N4KAHT6</user>
    <text>I wish there was a way to convert any number to Float, it would make sticking to your own type signatures a lot easier</text>
  </message>
  <message>
    <ts>2017-06-23T09:35:37.829851</ts>
    <user>U3SJEDR96</user>
    <text>There is an issue for possibly changing `toFloat : number -&amp;gt; Float` which would help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T09:36:11.840556</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/core/issues/721&gt; tracked in that meta issue</text>
  </message>
  <message>
    <ts>2017-06-23T09:45:28.022300</ts>
    <user>U1N4KAHT6</user>
    <text>Thanks, you seem to remember all the GH issues :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T09:48:34.084114</ts>
    <user>U1NME8MS8</user>
    <text>If you want to write down your ideas, I might be able to help. Its fun to dive into those topics</text>
  </message>
  <message>
    <ts>2017-06-23T09:48:52.090190</ts>
    <user>U3LT1UTPF</user>
    <text>I have a record Product which I need to convert to a Javascript object to pass it to a custom element as a property: node "leaflet-map" [property "product" (Json.Encode.object model.currentProduct) ][]. The compiler says: Function 'object' is expecting the argument to be List (String, Value), but it is Product. Any hint?</text>
  </message>
  <message>
    <ts>2017-06-23T09:49:07.094959</ts>
    <user>U1NME8MS8</user>
    <text>What I mean by inlining is to move the data from the includes into the main attributes in the first plcae, so the includes are no longer needed</text>
  </message>
  <message>
    <ts>2017-06-23T09:50:29.123118</ts>
    <user>U0EUHKVGB</user>
    <text>You need to build up a list of (String, Value) from your product</text>
  </message>
  <message>
    <ts>2017-06-23T09:50:51.130837</ts>
    <user>U0EUHKVGB</user>
    <text>For example: 
```
encodeProduct : Product -&amp;gt; Json.Encode.Value
encodeProduct record =
    Json.Encode.object
        [ ("name",  Json.Encode.string &amp;lt;| record.name)
        ]
```</text>
  </message>
  <message>
    <ts>2017-06-23T09:51:11.137474</ts>
    <user>U0EUHKVGB</user>
    <text>If you want to get a better idea of what it might look like, paste your type alias into here: &lt;http://eeue56.github.io/json-to-elm/&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T09:52:19.161256</ts>
    <user>U3LT1UTPF</user>
    <text>The type alias is actually nested. Is that a problem in this case?</text>
  </message>
  <message>
    <ts>2017-06-23T09:53:25.183733</ts>
    <user>U3LT1UTPF</user>
    <text>I mean, one of the fields of Product is a list of another record</text>
  </message>
  <message>
    <ts>2017-06-23T09:53:39.188645</ts>
    <user>U3SJEDR96</user>
    <text>then you'll need to encode those, first :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T09:53:51.192708</ts>
    <user>U3SJEDR96</user>
    <text>but yeah, eeue56's tool should help with tht</text>
  </message>
  <message>
    <ts>2017-06-23T09:54:42.209805</ts>
    <user>U3LT1UTPF</user>
    <text>Great! Thank you, &lt;@U0EUHKVGB&gt; and &lt;@U3SJEDR96&gt; :smile:</text>
  </message>
  <message>
    <ts>2017-06-23T10:03:14.396268</ts>
    <user>U1KES8JGK</user>
    <text>does anyone know of an auto-complete menu written in Elm? the one at &lt;http://gregziegan.com/elm-autocomplete/&gt; looked promising, but doesn't scroll the menu when the selection moves below what's currently shown.</text>
  </message>
  <message>
    <ts>2017-06-23T10:08:01.498635</ts>
    <user>U57KYFW67</user>
    <text>It's not possible to include two .js files created by Elm on one page, is it? It looks like by default, elm-make defines the Elm object in Javascript without checking to see if it's already defined.</text>
  </message>
  <message>
    <ts>2017-06-23T10:08:20.505174</ts>
    <user>U3SJEDR96</user>
    <text>I think it checks if it's already defined and merges them</text>
  </message>
  <message>
    <ts>2017-06-23T10:08:33.509539</ts>
    <user>U3SJEDR96</user>
    <text>but might want to verify that :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-23T10:08:42.512699</ts>
    <user>U57KYFW67</user>
    <text>If it does, I should go back and try again. I ran a test, and it failed</text>
  </message>
  <message>
    <ts>2017-06-23T10:08:48.514999</ts>
    <user>U0EUHKVGB</user>
    <text>It is definitely possible.</text>
  </message>
  <message>
    <ts>2017-06-23T10:08:50.515437</ts>
    <user>U57KYFW67</user>
    <text>But I wanted to consult the wisdom of the channel</text>
  </message>
  <message>
    <ts>2017-06-23T10:09:27.528296</ts>
    <user>U3SJEDR96</user>
    <text>they shouldn't contain the same modules-that-have-a-main, though; iirc</text>
  </message>
  <message>
    <ts>2017-06-23T10:10:24.549216</ts>
    <user>U3SJEDR96</user>
    <text>i.e. `elm-make A.elm --output a.js` and `elm-make B.elm --output b.js` -&amp;gt; should be possible to include both on the same page and access both `Elm.A` and `Elm.B`</text>
  </message>
  <message>
    <ts>2017-06-23T10:13:18.610836</ts>
    <user>U57KYFW67</user>
    <text>oh, durr, yeah, I have my texteditor opened up just to that line.... I must have messed up my test</text>
  </message>
  <message>
    <ts>2017-06-23T10:14:26.635115</ts>
    <user>U57KYFW67</user>
    <text>sure enough, I forgot to close a &amp;lt;script&amp;gt; tag. Thanks for pointing that out to me guys.</text>
  </message>
  <message>
    <ts>2017-06-23T10:17:06.694855</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U3SJEDR96&gt; They're roughly equal. Performance diff is around 65%, high std dev is around 60%, low is around 2%. </text>
  </message>
  <message>
    <ts>2017-06-23T10:19:04.737561</ts>
    <user>U3SJEDR96</user>
    <text>hm, yeah, attempting to see what goes on with memory for both those functions seems worthwhile (i.e. run benchmark for just one of those functions, keep memory info, run benchmark for the other, keep memory info, compare)</text>
  </message>
  <message>
    <ts>2017-06-23T10:19:54.755414</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U41NK9BM4&gt;, not quite the correct response tbh.</text>
  </message>
  <message>
    <ts>2017-06-23T10:21:17.785233</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U1KES8JGK&gt;, there’s this one &lt;http://package.elm-lang.org/packages/ericgj/elm-autoinput/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T10:21:45.795305</ts>
    <user>U1KES8JGK</user>
    <text>thanks. I'll check it out.</text>
  </message>
  <message>
    <ts>2017-06-23T11:10:08.906397</ts>
    <user>U5ABF3BH7</user>
    <text>Hello! I have to load a bunch of data from Json into my page,  I am wondering what is the best way to do accomplish that without slowing down the loading of the page too much. Is it better to load all the data at the beginning, or to add a command  to fetch the data when the user selects a certain type. For example, I have hospitals, nursing homes, hospices, etc.. data, is it better to fetch the data only when needed or to load everything in a model?</text>
  </message>
  <message>
    <ts>2017-06-23T11:10:57.925717</ts>
    <user>U5ABF3BH7</user>
    <text>by a model I mean a record.</text>
  </message>
  <message>
    <ts>2017-06-23T11:11:13.931733</ts>
    <user>U0FP80EKB</user>
    <text>I would start by loading the data at the beginning, then see if it slows down the page</text>
  </message>
  <message>
    <ts>2017-06-23T11:11:21.934970</ts>
    <user>U0FP80EKB</user>
    <text>Then see what parts slow it down.</text>
  </message>
  <message>
    <ts>2017-06-23T11:12:14.955547</ts>
    <user>U0FP80EKB</user>
    <text>How much data are you talking about?</text>
  </message>
  <message>
    <ts>2017-06-23T11:20:44.151963</ts>
    <user>U5ABF3BH7</user>
    <text>It takes about 5 to 7 seconds to load it.</text>
  </message>
  <message>
    <ts>2017-06-23T11:26:04.277776</ts>
    <user>U1CE9DL9H</user>
    <text>In a typical session, how much of that will your users have to load?</text>
  </message>
  <message>
    <ts>2017-06-23T11:28:05.324602</ts>
    <user>U5ABF3BH7</user>
    <text>It all depends. Some my need all of that</text>
  </message>
  <message>
    <ts>2017-06-23T11:28:18.329576</ts>
    <user>U5ABF3BH7</user>
    <text>sorry might need</text>
  </message>
  <message>
    <ts>2017-06-23T11:28:31.334878</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5ABF3BH7&gt;, what you are asking is a issue to do with the user experience and single page application design in general.</text>
  </message>
  <message>
    <ts>2017-06-23T11:28:45.340363</ts>
    <user>U5ABF3BH7</user>
    <text>Right</text>
  </message>
  <message>
    <ts>2017-06-23T11:29:06.348676</ts>
    <user>U0EUHKVGB</user>
    <text>First, identify the minimal amount of data required to display something useful to the user.</text>
  </message>
  <message>
    <ts>2017-06-23T11:29:08.349436</ts>
    <user>U5ABF3BH7</user>
    <text>I am wondering what is the best practice</text>
  </message>
  <message>
    <ts>2017-06-23T11:29:18.353320</ts>
    <user>U0EUHKVGB</user>
    <text>This might be nothing, this might just hospitals.</text>
  </message>
  <message>
    <ts>2017-06-23T11:29:51.366083</ts>
    <user>U0EUHKVGB</user>
    <text>The initial request should as small as possible. 5-7 seconds is a long time to wait for a page to load.</text>
  </message>
  <message>
    <ts>2017-06-23T11:30:43.387681</ts>
    <user>U2JA29EKF</user>
    <text>can you page through the data? I have a page that fetches 10 items, which is pretty quick, then fetches 100, then collects the rest in chunks of 1000. user sees something quickly, but all the data gets pulled eventually</text>
  </message>
  <message>
    <ts>2017-06-23T11:31:02.395141</ts>
    <user>U5ABF3BH7</user>
    <text>I was a bit unclear, the page doesn't take that long to load but the data takes that long to be fetched.</text>
  </message>
  <message>
    <ts>2017-06-23T11:31:53.415100</ts>
    <user>U0FP80EKB</user>
    <text>Like &lt;@U0EUHKVGB&gt; is saying, I’d load the minimal amount to show something on the page, then load the rest in the background.</text>
  </message>
  <message>
    <ts>2017-06-23T11:33:24.451212</ts>
    <user>U5ABF3BH7</user>
    <text>Adding a div on the page with ```div [] [ text (toString model.rolodexlists)]```, where rolodexList is the array of the data I am getting takes that long to be updated</text>
  </message>
  <message>
    <ts>2017-06-23T11:34:33.477760</ts>
    <user>U5ABF3BH7</user>
    <text>I am wondering if it is better to get the data in batches later instead of in the initialModel through an initial Command</text>
  </message>
  <message>
    <ts>2017-06-23T11:35:35.501248</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0FP80EKB&gt; How do you load it in the background?</text>
  </message>
  <message>
    <ts>2017-06-23T11:36:29.522143</ts>
    <user>U0FP80EKB</user>
    <text>The same way to load it, create a cmd to load the data</text>
  </message>
  <message>
    <ts>2017-06-23T11:36:44.527850</ts>
    <user>U0FP80EKB</user>
    <text>don’t think of it as background, I guess, as much as thinking of it as loading it second</text>
  </message>
  <message>
    <ts>2017-06-23T11:37:05.535540</ts>
    <user>U5ABF3BH7</user>
    <text>Where do you add the command for it to be in the background? (I am pretty new to Elm)</text>
  </message>
  <message>
    <ts>2017-06-23T11:38:10.559889</ts>
    <user>U0FP80EKB</user>
    <text>Sort of a process like this
1) from `init` return the cmd (http request) to load the initial data
2) when the data arrives in your `update`, set it in your model, then return the cmd (next http request) from this `update`</text>
  </message>
  <message>
    <ts>2017-06-23T11:40:11.607383</ts>
    <user>U0FP80EKB</user>
    <text>My first pass would be to load it all initially, though, not sorry about it.  Get the system working even with the 7 seconds. Then, once you have it working (slowly), then you can start peeling it away. I like the old saying
Make it work, make it right, make it fast (in that order)</text>
  </message>
  <message>
    <ts>2017-06-23T11:41:43.643519</ts>
    <user>U0K92QFST</user>
    <text>Ah right, we had discussed this. Writing down my ideas would be a useful exercise for me as well! Hopefully I have some time for higher-level design thoughts this Sunday.</text>
  </message>
  <message>
    <ts>2017-06-23T11:55:25.951674</ts>
    <user>U2LAL86AY</user>
    <text>wow!  I've just seen `elm-benchmark` in action. I'm blown away - super useful library, thanks so much &lt;@U19JQD9DF&gt; Hicks :smile: . &lt;https://elmseeds.thaterikperson.com/elm-benchmark&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T12:04:29.159361</ts>
    <user>U5Q42DDMJ</user>
    <text>Hi all</text>
  </message>
  <message>
    <ts>2017-06-23T12:05:06.172733</ts>
    <user>U5Q42DDMJ</user>
    <text>I have an app (dashboard with widgets) in which I'm constantly editing the model and then running PUT requests to save it</text>
  </message>
  <message>
    <ts>2017-06-23T12:05:25.179380</ts>
    <user>U5Q42DDMJ</user>
    <text>I'm wondering what's the best way to be sure all the save requests are executed in the right order</text>
  </message>
  <message>
    <ts>2017-06-23T12:05:56.189992</ts>
    <user>U5Q42DDMJ</user>
    <text>(with js I was storing a promise and chaining future requests to the globally saved promise inside a service)</text>
  </message>
  <message>
    <ts>2017-06-23T12:06:50.209008</ts>
    <user>U5Q42DDMJ</user>
    <text>is it possible to have something like saving a Task is the model and adding andThen at each update ?</text>
  </message>
  <message>
    <ts>2017-06-23T12:08:24.241600</ts>
    <user>U5Q42DDMJ</user>
    <text>and of course I also want to use debouncing and I'm wondering how to best implement it (there seem to be several libraries on the subject but do you have any recommandation?)</text>
  </message>
  <message>
    <ts>2017-06-23T12:09:05.255517</ts>
    <user>U1CE9DL9H</user>
    <text>you can store a `Task` in the model and andThen, but the task isn't actually evaluated when you do that</text>
  </message>
  <message>
    <ts>2017-06-23T12:09:20.260499</ts>
    <user>U2LAL86AY</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Task#sequence&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T12:09:39.266826</ts>
    <user>U1CE9DL9H</user>
    <text>also, elm is fundamentally asynchronous, so you'll have to deal with that</text>
  </message>
  <message>
    <ts>2017-06-23T12:10:12.277839</ts>
    <user>U1CE9DL9H</user>
    <text>one solution could be to wait till the put request is finished before sending the next one</text>
  </message>
  <message>
    <ts>2017-06-23T12:12:23.322732</ts>
    <user>U5Q42DDMJ</user>
    <text>yes that's what I want to do (what I'm doing actually in js today)</text>
  </message>
  <message>
    <ts>2017-06-23T12:13:27.344073</ts>
    <user>U5Q42DDMJ</user>
    <text>when I need to save a new version, I get my promise and use a `promise = promise.then(() =&amp;gt; { return model.put(); }`</text>
  </message>
  <message>
    <ts>2017-06-23T12:14:24.364264</ts>
    <user>U5Q42DDMJ</user>
    <text>using Task sequence seems right in elm but the first task needs to start as soon as possible, but if a second one arrives it must wait for the first one to complete</text>
  </message>
  <message>
    <ts>2017-06-23T12:14:34.367712</ts>
    <user>U57KYFW67</user>
    <text>Are there any ways to create a nontrival Task (ie not one created through succeed or fail) in the core package?</text>
  </message>
  <message>
    <ts>2017-06-23T12:14:59.376106</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U57KYFW67&gt; define non-trivial?</text>
  </message>
  <message>
    <ts>2017-06-23T12:15:06.378853</ts>
    <user>U57KYFW67</user>
    <text>I did :X</text>
  </message>
  <message>
    <ts>2017-06-23T12:15:28.386333</ts>
    <user>U1CE9DL9H</user>
    <text>well, you can combine primitives with `map` and `andThen`</text>
  </message>
  <message>
    <ts>2017-06-23T12:15:36.389451</ts>
    <user>U1CE9DL9H</user>
    <text>so, yes</text>
  </message>
  <message>
    <ts>2017-06-23T12:17:21.425438</ts>
    <user>U57KYFW67</user>
    <text>`map` and `andThen` both require you already have a `Task`... so I guess to be more precise, one which does not contain any reference to `succeed` or `fail`. So `map (\x -&amp;gt; x) (succeed True)` wouldn't really count, either.</text>
  </message>
  <message>
    <ts>2017-06-23T12:17:59.438138</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U5Q42DDMJ&gt; so I think you need to pick some nice data type to model what you want to do, for instance `type BackupRequest a = Sending { waiting : Maybe (Task Http.Error a) } | Done `</text>
  </message>
  <message>
    <ts>2017-06-23T12:18:00.438525</ts>
    <user>U5Q42DDMJ</user>
    <text>it seems I need to chain Cmd, not Tasks, which is not possible without a custom manual implementation... ?</text>
  </message>
  <message>
    <ts>2017-06-23T12:18:13.442877</ts>
    <user>U1CE9DL9H</user>
    <text>for custom stuff, tasks are the way to go</text>
  </message>
  <message>
    <ts>2017-06-23T12:18:43.452628</ts>
    <user>U57KYFW67</user>
    <text>Ah, it looks like the `Process` module exposes a few</text>
  </message>
  <message>
    <ts>2017-06-23T12:18:58.457787</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U57KYFW67&gt; well, `Time.now`</text>
  </message>
  <message>
    <ts>2017-06-23T12:19:01.458615</ts>
    <user>U5Q42DDMJ</user>
    <text>yes but once the task is started (attempt ?), you can't use it any more for `andThen`</text>
  </message>
  <message>
    <ts>2017-06-23T12:19:11.461835</ts>
    <user>U1CE9DL9H</user>
    <text>true</text>
  </message>
  <message>
    <ts>2017-06-23T12:19:21.465391</ts>
    <user>U1CE9DL9H</user>
    <text>so you create a new empty task</text>
  </message>
  <message>
    <ts>2017-06-23T12:19:36.470465</ts>
    <user>U5Q42DDMJ</user>
    <text>what for?</text>
  </message>
  <message>
    <ts>2017-06-23T12:19:59.478089</ts>
    <user>U1CE9DL9H</user>
    <text>actually, create a new task, that will be the next put</text>
  </message>
  <message>
    <ts>2017-06-23T12:20:21.485713</ts>
    <user>U57KYFW67</user>
    <text>Maybe I'm wrong, but `Task`s seem like they would be well-suited for working with random numbers.</text>
  </message>
  <message>
    <ts>2017-06-23T12:20:55.497284</ts>
    <user>U1CE9DL9H</user>
    <text>then as long as we're waiting for the server, swapping out that task with a newer version when the model is updated. once the request resolves, send the new task</text>
  </message>
  <message>
    <ts>2017-06-23T12:21:41.512762</ts>
    <user>U5Q42DDMJ</user>
    <text>yes that's even an improved version</text>
  </message>
  <message>
    <ts>2017-06-23T12:22:00.519116</ts>
    <user>U5Q42DDMJ</user>
    <text>but the implementation is completely manual, no help form the core library</text>
  </message>
  <message>
    <ts>2017-06-23T12:22:55.537742</ts>
    <user>U1CE9DL9H</user>
    <text>what would you like to see in core? it seems simple enough to implement and may give you material to publish a package</text>
  </message>
  <message>
    <ts>2017-06-23T12:23:31.549507</ts>
    <user>U5Q42DDMJ</user>
    <text>not sure to be at the package level yet :wink:</text>
  </message>
  <message>
    <ts>2017-06-23T12:24:27.567908</ts>
    <user>U5Q42DDMJ</user>
    <text>but yes ok I'll try something like that with a pendingModelToBeSaved, swapping it with a new one when an update is made</text>
  </message>
  <message>
    <ts>2017-06-23T12:26:31.609310</ts>
    <user>U0FP80EKB</user>
    <text>For the data that changes, we usually have it in a type like (simplified)
```
type Savable a
    = Saved a
    | Saving a
```
Then, when a save is triggered, we don’t do it until it makes it back to `Saved`
If you want to have a way to say “I want to save it when finished” then you can add another state to it, something like `SavePending`</text>
  </message>
  <message>
    <ts>2017-06-23T12:26:52.616511</ts>
    <user>U0FP80EKB</user>
    <text>So, the code only creates the PUT if it is in `Saved` state</text>
  </message>
  <message>
    <ts>2017-06-23T12:29:03.660819</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0FP80EKB&gt; Thanks for the explanations, they are helpful!</text>
  </message>
  <message>
    <ts>2017-06-23T12:29:16.665087</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U5ABF3BH7&gt; Good luck.</text>
  </message>
  <message>
    <ts>2017-06-23T12:29:32.670514</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0FP80EKB&gt; Thanks!</text>
  </message>
  <message>
    <ts>2017-06-23T12:31:19.707861</ts>
    <user>U5Q42DDMJ</user>
    <text>yes thx for the ideas</text>
  </message>
  <message>
    <ts>2017-06-23T12:44:21.962063</ts>
    <user>U0HMZCR5W</user>
    <text>&lt;@U4F64AKQV&gt; I’m wondering what the absolute timings in your benchmark are. I’ve found that for very short tasks things like requestAnimationFrame can add noise to Elm results</text>
  </message>
  <message>
    <ts>2017-06-23T12:44:35.966883</ts>
    <user>U0HMZCR5W</user>
    <text>another thing that chrome tools can help tell you…</text>
  </message>
  <message>
    <ts>2017-06-23T12:45:00.974940</ts>
    <user>U5FU80S06</user>
    <text>Can I get an _object id_ for an Elm _object_? I want to have a JS cmd pass back the id into Elm so I can locate a tree-node that needs highlighting.</text>
  </message>
  <message>
    <ts>2017-06-23T12:45:16.980192</ts>
    <user>U0EUHKVGB</user>
    <text>No, you have to create them.</text>
  </message>
  <message>
    <ts>2017-06-23T12:45:28.984571</ts>
    <user>U0EUHKVGB</user>
    <text>There are not objects in Elm in the same sense as elsewhere.</text>
  </message>
  <message>
    <ts>2017-06-23T12:46:38.007111</ts>
    <user>U5FU80S06</user>
    <text>Is there a library for generating ids?</text>
  </message>
  <message>
    <ts>2017-06-23T12:47:34.025439</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0HMZCR5W&gt; elm-benchmark uses interleaved samples of sufficient size, requestanimationframe isn't really that relevant here :slightly_smiling_face: (and the high-precision timing api)</text>
  </message>
  <message>
    <ts>2017-06-23T12:47:57.032975</ts>
    <user>U0HMZCR5W</user>
    <text>right on</text>
  </message>
  <message>
    <ts>2017-06-23T12:48:15.038757</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/BrianHicks/elm-benchmark#how-are-my-benchmarks-measured&gt; it's pretty cool, actually</text>
  </message>
  <message>
    <ts>2017-06-23T12:50:35.085415</ts>
    <user>U23SA861Y</user>
    <text>If you are rendering a bunch of objects in a list or a tree or something, then likely you have some identifier you can tag each node with that the js can pass back.</text>
  </message>
  <message>
    <ts>2017-06-23T12:50:47.089323</ts>
    <user>U3FJSB596</user>
    <text>lohabuyshan: &lt;http://package.elm-lang.org/packages/danyx23/elm-uuid/2.0.2/Uuid&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T12:50:49.089801</ts>
    <user>U23SA861Y</user>
    <text>a name perhaps</text>
  </message>
  <message>
    <ts>2017-06-23T12:53:46.148566</ts>
    <user>U5FU80S06</user>
    <text>The tree nodes can be identical in all respects, except ancestry of course.</text>
  </message>
  <message>
    <ts>2017-06-23T12:54:09.156295</ts>
    <user>U23SA861Y</user>
    <text>the they can be uniquely identified by a path then</text>
  </message>
  <message>
    <ts>2017-06-23T12:55:03.174253</ts>
    <user>U5FU80S06</user>
    <text>Would you go with that, as opposed to an id per-se?</text>
  </message>
  <message>
    <ts>2017-06-23T12:55:05.175209</ts>
    <user>U0HMZCR5W</user>
    <text>this does seem cool</text>
  </message>
  <message>
    <ts>2017-06-23T12:55:38.186177</ts>
    <user>U23SA861Y</user>
    <text>what's the difference between and uniquely identifing ID and a uniquely identifying path?</text>
  </message>
  <message>
    <ts>2017-06-23T12:56:13.197645</ts>
    <user>U23SA861Y</user>
    <text>aside from one being slightly more opaque</text>
  </message>
  <message>
    <ts>2017-06-23T12:56:37.205640</ts>
    <user>U0JUBLV8F</user>
    <text>&lt;@U4F64AKQV&gt; responding here since the conversation has moved on a ways. The things that cause high stddev are usually other processes running or window painting happening. Browser benchmarks are tricky since it's basically a miniature operating system inside another OS.</text>
  </message>
  <message>
    <ts>2017-06-23T12:57:22.220618</ts>
    <user>U0JUBLV8F</user>
    <text>so: quit browser tabs, run in an incognito window if you have a lot of extensions, and quit any electron apps (especially Slack, which spikes CPU randomly.)</text>
  </message>
  <message>
    <ts>2017-06-23T12:57:49.229709</ts>
    <user>U0JUBLV8F</user>
    <text>I'm happy to answer more questions in &lt;#C3Y7SC0HF|elm-benchmark&gt;; threads are a bit awkward :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-23T12:58:02.234056</ts>
    <user>U5FU80S06</user>
    <text>I may want to account for situation where in the interim the user can re-order the tree (for non-unique names of course), hence even though the path is fixed for now, path is not a universal solution.</text>
  </message>
  <message>
    <ts>2017-06-23T12:58:42.246900</ts>
    <user>U23SA861Y</user>
    <text>I see</text>
  </message>
  <message>
    <ts>2017-06-23T13:03:56.357397</ts>
    <user>U23SA861Y</user>
    <text>Random ids are going to require a task or some sort</text>
  </message>
  <message>
    <ts>2017-06-23T13:15:32.587537</ts>
    <user>U2LAL86AY</user>
    <text>not necesarely. you can use `step` function - is pseudo random - meaning if you call it with the same inputs you get the same outputs. See this mgold package. But you have a seed which you can store on your model - and you update the seed - and place it back on the model - every time you generate this random id. 

&lt;http://package.elm-lang.org/packages/mgold/elm-random-pcg/5.0.0/Random-Pcg#step&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T13:16:11.599774</ts>
    <user>U23SA861Y</user>
    <text>I suppose a PRNG in your model would also work :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-23T13:17:56.633862</ts>
    <user>U5YKRLXGT</user>
    <text>Hi peeps! Just started out with Elm and I am trying to change the elm-styled module to collect css rules while rendering a view and emit them in a single virtualdom style tag at the end. I got really excited thinking I could use Mailboxes and foldp to achieve this nicely and then my text editor pointed out they no longer exist anymore. I can't create a closure with a mutable list to keep track of the rules, I can't traverse through the virtualdom nodes collecting data attributes - I'm about ready to give up! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:18:22.642287</ts>
    <user>U5YKRLXGT</user>
    <text>Any suggestions, or is this a lost cause?</text>
  </message>
  <message>
    <ts>2017-06-23T13:24:24.761529</ts>
    <user>U23SA861Y</user>
    <text>Your're going to have to slow down there, what are you trying to do?</text>
  </message>
  <message>
    <ts>2017-06-23T13:26:07.796077</ts>
    <user>U5YKRLXGT</user>
    <text>This library uses a nasty impure function to inject styles into a style tag:</text>
  </message>
  <message>
    <ts>2017-06-23T13:26:08.796179</ts>
    <user>U5YKRLXGT</user>
    <text>&lt;https://github.com/styled-components/elm-styled/blob/master/src/Styled.elm#L681&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T13:26:33.804757</ts>
    <user>U5YKRLXGT</user>
    <text>I am pretty sure the performance is not great, plus you could have hash collisions on rules</text>
  </message>
  <message>
    <ts>2017-06-23T13:26:58.813618</ts>
    <user>U5YKRLXGT</user>
    <text>I imagined a world where you passed in an address as an argument to style and it would collect them all up in a mailbox while rendering a view</text>
  </message>
  <message>
    <ts>2017-06-23T13:27:14.818711</ts>
    <user>U5YKRLXGT</user>
    <text>then at the end of the view render you could dump them into a virtualdom style tab</text>
  </message>
  <message>
    <ts>2017-06-23T13:27:19.820634</ts>
    <user>U0EUHKVGB</user>
    <text>Google Richard Feldman oslo elm day and watch that video</text>
  </message>
  <message>
    <ts>2017-06-23T13:31:16.902694</ts>
    <user>U5YKRLXGT</user>
    <text>That's about elm-css though right?</text>
  </message>
  <message>
    <ts>2017-06-23T13:31:59.917744</ts>
    <user>U0EUHKVGB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-23T13:32:03.919161</ts>
    <user>U0EUHKVGB</user>
    <text>Uses the same approach.</text>
  </message>
  <message>
    <ts>2017-06-23T13:32:10.921340</ts>
    <user>U5YKRLXGT</user>
    <text>Well they use an npm module right?</text>
  </message>
  <message>
    <ts>2017-06-23T13:32:23.925892</ts>
    <user>U5YKRLXGT</user>
    <text>Or inline styles</text>
  </message>
  <message>
    <ts>2017-06-23T13:32:30.928337</ts>
    <user>U0EUHKVGB</user>
    <text>Inline styles via a style tag</text>
  </message>
  <message>
    <ts>2017-06-23T13:32:33.929272</ts>
    <user>U0EUHKVGB</user>
    <text>wait</text>
  </message>
  <message>
    <ts>2017-06-23T13:32:35.929866</ts>
    <user>U0EUHKVGB</user>
    <text>hang on</text>
  </message>
  <message>
    <ts>2017-06-23T13:32:46.933692</ts>
    <user>U0EUHKVGB</user>
    <text>No, it does things differently</text>
  </message>
  <message>
    <ts>2017-06-23T13:32:46.933724</ts>
    <user>U5YKRLXGT</user>
    <text>I thought they applied the styles to the actual dom nodes</text>
  </message>
  <message>
    <ts>2017-06-23T13:33:01.939079</ts>
    <user>U0EUHKVGB</user>
    <text>I don’t know why on earth they’re using a native function to inject css to the style tag.</text>
  </message>
  <message>
    <ts>2017-06-23T13:33:04.939964</ts>
    <user>U0EUHKVGB</user>
    <text>It’s not needed.</text>
  </message>
  <message>
    <ts>2017-06-23T13:33:26.947859</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5YKRLXGT&gt; Nope. We put styles into an explicit style tag.</text>
  </message>
  <message>
    <ts>2017-06-23T13:33:34.950515</ts>
    <user>U0EUHKVGB</user>
    <text>You _can_ use it for compiled CSS</text>
  </message>
  <message>
    <ts>2017-06-23T13:33:49.955734</ts>
    <user>U0EUHKVGB</user>
    <text>but if you watch the talk by Richard, he talks about the different approaches a bit in there.</text>
  </message>
  <message>
    <ts>2017-06-23T13:34:27.968654</ts>
    <user>U0EUHKVGB</user>
    <text>FWIW we tested performance with real, production code</text>
  </message>
  <message>
    <ts>2017-06-23T13:34:45.974819</ts>
    <user>U5YKRLXGT</user>
    <text>I'll take a look, but does that mean there is no pithy "replace mailbox/foldp with X" statement :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:34:47.975446</ts>
    <user>U0EUHKVGB</user>
    <text>And the approach that the styled-css thing is taking is actually slower than using a reguarl &amp;lt;style&amp;gt; in the body.</text>
  </message>
  <message>
    <ts>2017-06-23T13:34:58.979294</ts>
    <user>U5YKRLXGT</user>
    <text>That's what I'm trying to fix :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:35:09.983052</ts>
    <user>U0EUHKVGB</user>
    <text>what are you trying to fix?</text>
  </message>
  <message>
    <ts>2017-06-23T13:35:21.987638</ts>
    <user>U0EUHKVGB</user>
    <text>It’s easy to fix that - just use a style tag in the body.</text>
  </message>
  <message>
    <ts>2017-06-23T13:36:01.001782</ts>
    <user>U0EUHKVGB</user>
    <text>Collisions aren’t an issue, if you use namespacing (which is general best practice for large production sites)</text>
  </message>
  <message>
    <ts>2017-06-23T13:36:04.002807</ts>
    <user>U5YKRLXGT</user>
    <text>Ok, hang on  - let me try and explain this again one more time :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:36:23.009919</ts>
    <user>U5YKRLXGT</user>
    <text>Ignoring the CSS part, which I think is a bit of a red herring</text>
  </message>
  <message>
    <ts>2017-06-23T13:36:25.010478</ts>
    <user>U5YKRLXGT</user>
    <text>I have a view</text>
  </message>
  <message>
    <ts>2017-06-23T13:36:46.017563</ts>
    <user>U5YKRLXGT</user>
    <text>As it builds up the virtual dom, I would like to accumulate some state</text>
  </message>
  <message>
    <ts>2017-06-23T13:36:55.020658</ts>
    <user>U5YKRLXGT</user>
    <text>that I can then append in a new node at the end</text>
  </message>
  <message>
    <ts>2017-06-23T13:37:02.023379</ts>
    <user>U0EUHKVGB</user>
    <text>What state?</text>
  </message>
  <message>
    <ts>2017-06-23T13:37:08.025368</ts>
    <user>U5YKRLXGT</user>
    <text>In this case, CSS rules :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:37:16.028083</ts>
    <user>U0EUHKVGB</user>
    <text>What do you mean by “builds up the virtual dom”?</text>
  </message>
  <message>
    <ts>2017-06-23T13:37:19.029625</ts>
    <user>U5YKRLXGT</user>
    <text>Ok, so:</text>
  </message>
  <message>
    <ts>2017-06-23T13:37:33.034243</ts>
    <user>U5YKRLXGT</user>
    <text>This guy:</text>
  </message>
  <message>
    <ts>2017-06-23T13:37:36.035334</ts>
    <user>U5YKRLXGT</user>
    <text>```view model =
    div []
        [ h1 [] [ text "Hi" ]
        , console [ Html.Attributes.id consoleId ] [ text model.lines ]
        , button [ onClick (Send "Hello") ] [ text "Append" ]
        ]
```</text>
  </message>
  <message>
    <ts>2017-06-23T13:37:48.039618</ts>
    <user>U5YKRLXGT</user>
    <text>The console function is actually a styled div</text>
  </message>
  <message>
    <ts>2017-06-23T13:38:01.044347</ts>
    <user>U5YKRLXGT</user>
    <text>Inside that function, it's generating some namespaced css rules</text>
  </message>
  <message>
    <ts>2017-06-23T13:38:25.052693</ts>
    <user>U5YKRLXGT</user>
    <text>but I don't want to create a &amp;lt;style&amp;gt; tag for every styled component - I could, but it would be nasty</text>
  </message>
  <message>
    <ts>2017-06-23T13:38:48.060276</ts>
    <user>U0EUHKVGB</user>
    <text>So, two questions:
- Why do you think it would be nasty?
- What is the type of the console function?</text>
  </message>
  <message>
    <ts>2017-06-23T13:39:09.067331</ts>
    <user>U5YKRLXGT</user>
    <text>Doesn't IE have a hard limit on the number of style tags you can have in a document for starters?</text>
  </message>
  <message>
    <ts>2017-06-23T13:39:33.075431</ts>
    <user>U5YKRLXGT</user>
    <text>Console looks like this:</text>
  </message>
  <message>
    <ts>2017-06-23T13:39:34.075933</ts>
    <user>U5YKRLXGT</user>
    <text>```console =
    styled Html.pre
        [ padding (em 4)
        , backgroundColor (hex "000")
        , color (hex "fff")
        , height (px 300)
        , overflowY scroll
        ]
```</text>
  </message>
  <message>
    <ts>2017-06-23T13:39:52.081621</ts>
    <user>U2LAL86AY</user>
    <text>is not clear why this can't be  done using just function application. console is a specialized version of some div - with styles applied. is it not?</text>
  </message>
  <message>
    <ts>2017-06-23T13:40:19.090615</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5YKRLXGT&gt;, what is the _type_ of that function?</text>
  </message>
  <message>
    <ts>2017-06-23T13:40:46.100279</ts>
    <user>U5YKRLXGT</user>
    <text>It returns a `-&amp;gt; Html.Html msg` right?</text>
  </message>
  <message>
    <ts>2017-06-23T13:41:04.106254</ts>
    <user>U5YKRLXGT</user>
    <text>I literally started programming Elm today :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:41:20.112027</ts>
    <user>U0EUHKVGB</user>
    <text>No, I don’t think it does.</text>
  </message>
  <message>
    <ts>2017-06-23T13:41:24.113336</ts>
    <user>U5YKRLXGT</user>
    <text>In another language I might do this:</text>
  </message>
  <message>
    <ts>2017-06-23T13:41:25.113898</ts>
    <user>U5YKRLXGT</user>
    <text>```
view model =
    stylesheet (\css -&amp;gt;
        div []
            [ h1 [] [ text "Hi" ]
            , css `console [ Html.Attributes.id consoleId ] [ text model.lines ]
            , button [ onClick (Send "Hello") ] [ text "Append" ]
            ]
    )
```</text>
  </message>
  <message>
    <ts>2017-06-23T13:41:29.115128</ts>
    <user>U0EUHKVGB</user>
    <text>Depends on the type of that `styled` function.</text>
  </message>
  <message>
    <ts>2017-06-23T13:41:53.123496</ts>
    <user>U5YKRLXGT</user>
    <text>and have `css` evaluate a literal and then save the rules into a list</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:02.126460</ts>
    <user>U5YKRLXGT</user>
    <text>and then at the end of the stylesheet function, dump out a &amp;lt;style&amp;gt; tag</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:04.127113</ts>
    <user>U0EUHKVGB</user>
    <text>That is not how Elm works nor will it ever be</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:09.128746</ts>
    <user>U5YKRLXGT</user>
    <text>No, exactly!</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:19.132417</ts>
    <user>U0EUHKVGB</user>
    <text>Great, so we’re on the same page.</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:21.132967</ts>
    <user>U5YKRLXGT</user>
    <text>```view model =
    stylesheet (\mailbox -&amp;gt;
        div []
            [ h1 [] [ text "Hi" ]
            , console mailbox [ Html.Attributes.id consoleId ] [ text model.lines ]
            , button [ onClick (Send "Hello") ] [ text "Append" ]
            ]
    )
```</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:26.134526</ts>
    <user>U5YKRLXGT</user>
    <text>So then I thought this, with a foldp at the end</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:37.138402</ts>
    <user>U5YKRLXGT</user>
    <text>imagine mailbox is accumulating rules as the view runs</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:42.140273</ts>
    <user>U0EUHKVGB</user>
    <text>:scream:</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:52.143844</ts>
    <user>U5YKRLXGT</user>
    <text>haha :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:42:57.145364</ts>
    <user>U5YKRLXGT</user>
    <text>I want the output to be:</text>
  </message>
  <message>
    <ts>2017-06-23T13:43:01.146886</ts>
    <user>U0EUHKVGB</user>
    <text>That would not have been a good idea even in 0.15.</text>
  </message>
  <message>
    <ts>2017-06-23T13:43:07.148927</ts>
    <user>U0EUHKVGB</user>
    <text>Okay, hold up a sec</text>
  </message>
  <message>
    <ts>2017-06-23T13:43:20.153086</ts>
    <user>U5YKRLXGT</user>
    <text>``````div []
    [ h1 [] [ text "Hi" ]
    , div [ Html.Attributes.id consoleId ] [ text model.lines ]
    , button [ onClick (Send "Hello") ] [ text "Append" ]
    ]
style
    ...rules from every styled element```</text>
  </message>
  <message>
    <ts>2017-06-23T13:43:30.156438</ts>
    <user>U0EUHKVGB</user>
    <text>That library has sadly led you down a bad path - in Elm, we _like_ things to be pure</text>
  </message>
  <message>
    <ts>2017-06-23T13:43:37.158876</ts>
    <user>U5YKRLXGT</user>
    <text>Yup, I like that also</text>
  </message>
  <message>
    <ts>2017-06-23T13:43:44.161622</ts>
    <user>U0EUHKVGB</user>
    <text>So, don’t think about side effects or magic or mutation</text>
  </message>
  <message>
    <ts>2017-06-23T13:43:52.164747</ts>
    <user>U0EUHKVGB</user>
    <text>Think about it in terms of pureness</text>
  </message>
  <message>
    <ts>2017-06-23T13:44:07.170475</ts>
    <user>U5YKRLXGT</user>
    <text>I just don't know how I do it without some kind of Monad type thing and forcing the user to totally rewrite the structure to be functors or something</text>
  </message>
  <message>
    <ts>2017-06-23T13:44:10.171173</ts>
    <user>U0EUHKVGB</user>
    <text>If you want to return two things from a pure function, how would you do that?</text>
  </message>
  <message>
    <ts>2017-06-23T13:45:03.189743</ts>
    <user>U5YKRLXGT</user>
    <text>In this case, I really do just want to accumulate elements in a list. I know that is naughty, but I don't want to have to insert a bunch of boilerplate in front of every function call</text>
  </message>
  <message>
    <ts>2017-06-23T13:45:23.197061</ts>
    <user>U5YKRLXGT</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:45:36.201368</ts>
    <user>U0EUHKVGB</user>
    <text>Ignore the boilerplate, ignore the the elements, ignore everything else</text>
  </message>
  <message>
    <ts>2017-06-23T13:45:46.204864</ts>
    <user>U0EUHKVGB</user>
    <text>If you wanted to return two things from a function, how would you do that?</text>
  </message>
  <message>
    <ts>2017-06-23T13:45:54.207250</ts>
    <user>U5YKRLXGT</user>
    <text>I have rewritten styled, this third party library to return a record with a node and a list of Strings</text>
  </message>
  <message>
    <ts>2017-06-23T13:46:03.210500</ts>
    <user>U5YKRLXGT</user>
    <text>in one of my many iterations on this problem</text>
  </message>
  <message>
    <ts>2017-06-23T13:46:23.217201</ts>
    <user>U5YKRLXGT</user>
    <text>Then I still struggle to collect those all together without having to modify the way a view normally looks</text>
  </message>
  <message>
    <ts>2017-06-23T13:46:59.230150</ts>
    <user>U5YKRLXGT</user>
    <text>I've also tried adding the css as `data-css` attribute. That's nice, except VirtualDom wont let you traverse and transform the output :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:47:13.234509</ts>
    <user>U0EUHKVGB</user>
    <text>So then your type looks like this, right? `styled : List (Html msg) -&amp;gt; List (Attribute Msg) -&amp;gt; (Html.Html msg, Css)`</text>
  </message>
  <message>
    <ts>2017-06-23T13:47:37.242795</ts>
    <user>U5YKRLXGT</user>
    <text>The stock library looks like this:</text>
  </message>
  <message>
    <ts>2017-06-23T13:47:38.243329</ts>
    <user>U5YKRLXGT</user>
    <text>```styled : (List (Property msg) -&amp;gt; List (Node msg) -&amp;gt; Node msg)
    -&amp;gt; List Rule
    -&amp;gt; List (Property msg)
    -&amp;gt; List (Node msg)
    -&amp;gt; address
    -&amp;gt; Node msg```</text>
  </message>
  <message>
    <ts>2017-06-23T13:47:44.245277</ts>
    <user>U0EUHKVGB</user>
    <text>You’re going to have a bad time if you keep trying to think of things in terms of mutating away and doing everything to avoid boilerplate</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:05.253051</ts>
    <user>U0EUHKVGB</user>
    <text>So that code isn’t even 0.17</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:12.255560</ts>
    <user>U5YKRLXGT</user>
    <text>OH, sorry</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:17.257541</ts>
    <user>U5YKRLXGT</user>
    <text>I added the signal earlier</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:18.257727</ts>
    <user>U5YKRLXGT</user>
    <text>haha</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:21.259103</ts>
    <user>U5YKRLXGT</user>
    <text>that's what led me here</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:25.260314</ts>
    <user>U5YKRLXGT</user>
    <text>Ignore that part :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:36.264356</ts>
    <user>U5YKRLXGT</user>
    <text>NOT HELPING :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:38.265059</ts>
    <user>U5YKRLXGT</user>
    <text>haha, sorry</text>
  </message>
  <message>
    <ts>2017-06-23T13:48:58.272019</ts>
    <user>U5YKRLXGT</user>
    <text>I don't think transforming a tree is particularly naughty - it's still pure</text>
  </message>
  <message>
    <ts>2017-06-23T13:49:06.275034</ts>
    <user>U0EUHKVGB</user>
    <text>That type signature does not make sense to me still. By property do you mean `Attribute msg`?</text>
  </message>
  <message>
    <ts>2017-06-23T13:49:23.281225</ts>
    <user>U0EUHKVGB</user>
    <text>Or is it some custom type the library uses?</text>
  </message>
  <message>
    <ts>2017-06-23T13:49:37.285756</ts>
    <user>U5YKRLXGT</user>
    <text>&lt;https://github.com/styled-components/elm-styled/blob/master/src/Styled.elm#L658&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T13:49:44.288398</ts>
    <user>U5YKRLXGT</user>
    <text>Is that helpful?</text>
  </message>
  <message>
    <ts>2017-06-23T13:49:50.290698</ts>
    <user>U5YKRLXGT</user>
    <text>Should take you straight to the line</text>
  </message>
  <message>
    <ts>2017-06-23T13:50:02.294910</ts>
    <user>U0EUHKVGB</user>
    <text>I see, so it’s a custom type they’ve invented.</text>
  </message>
  <message>
    <ts>2017-06-23T13:50:14.299090</ts>
    <user>U0EUHKVGB</user>
    <text>Let’s take a step back: Why are you trying to use this library?</text>
  </message>
  <message>
    <ts>2017-06-23T13:50:25.303328</ts>
    <user>U5YKRLXGT</user>
    <text>`import VirtualDom exposing (Node, Property)`</text>
  </message>
  <message>
    <ts>2017-06-23T13:50:35.306939</ts>
    <user>U5YKRLXGT</user>
    <text>It's just a `VirtualDom.Property`</text>
  </message>
  <message>
    <ts>2017-06-23T13:50:36.307276</ts>
    <user>U0EUHKVGB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-23T13:51:04.316705</ts>
    <user>U5YKRLXGT</user>
    <text>I'm using the library because it handles hashing the contents of a stylesheet to create a namespace, which elm-css does not (yet)</text>
  </message>
  <message>
    <ts>2017-06-23T13:51:30.325506</ts>
    <user>U5YKRLXGT</user>
    <text>and because I think it could be wicked cool if I can get it to collect all the rules, emit one style at the end and leverage the virtualdom to no-op if no styles have changed</text>
  </message>
  <message>
    <ts>2017-06-23T13:51:43.329828</ts>
    <user>U5YKRLXGT</user>
    <text>No weird external build process, just pure elm</text>
  </message>
  <message>
    <ts>2017-06-23T13:51:57.334533</ts>
    <user>U0EUHKVGB</user>
    <text>The virtualdom will already do that for you.</text>
  </message>
  <message>
    <ts>2017-06-23T13:52:08.338233</ts>
    <user>U5YKRLXGT</user>
    <text>Yes, exactly :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:52:08.338292</ts>
    <user>U0EUHKVGB</user>
    <text>This is premature optimization for sure.</text>
  </message>
  <message>
    <ts>2017-06-23T13:52:19.342376</ts>
    <user>U5YKRLXGT</user>
    <text>I'm not saying I will do that - I'm saying it does that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:52:33.346952</ts>
    <user>U0EUHKVGB</user>
    <text>There is no need to collect all the rules, is what I am saying.</text>
  </message>
  <message>
    <ts>2017-06-23T13:52:48.352298</ts>
    <user>U5YKRLXGT</user>
    <text>If I don't collect the rules, I have to emit one style per element:</text>
  </message>
  <message>
    <ts>2017-06-23T13:52:52.353715</ts>
    <user>U0EUHKVGB</user>
    <text>I’ve benchmarked it :wink:</text>
  </message>
  <message>
    <ts>2017-06-23T13:52:55.354652</ts>
    <user>U5YKRLXGT</user>
    <text>```nodeWithClassName =
            node (classNameProperty :: properties) ((VirtualDom.node "style" [] [Html.text (String.join "\n" css)]) :: children)```</text>
  </message>
  <message>
    <ts>2017-06-23T13:53:08.358736</ts>
    <user>U0EUHKVGB</user>
    <text>It does not need to be one per element.</text>
  </message>
  <message>
    <ts>2017-06-23T13:53:18.362211</ts>
    <user>U5YKRLXGT</user>
    <text>That's the level this library emits rules at</text>
  </message>
  <message>
    <ts>2017-06-23T13:53:30.366153</ts>
    <user>U5YKRLXGT</user>
    <text>when it renders a component, it emits the rules</text>
  </message>
  <message>
    <ts>2017-06-23T13:53:37.368615</ts>
    <user>U5YKRLXGT</user>
    <text>Hence trying to gather them up :_)</text>
  </message>
  <message>
    <ts>2017-06-23T13:53:47.372045</ts>
    <user>U0EUHKVGB</user>
    <text>What I am saying is that this library does not follow good Elm best practices</text>
  </message>
  <message>
    <ts>2017-06-23T13:54:14.381765</ts>
    <user>U5YKRLXGT</user>
    <text>The only thing it seems to do wrong is use a nasty native function</text>
  </message>
  <message>
    <ts>2017-06-23T13:54:15.382167</ts>
    <user>U0EUHKVGB</user>
    <text>Any kind of trying to manpiluate and collect styles will be counter productive, since that will happen _on every re-render_</text>
  </message>
  <message>
    <ts>2017-06-23T13:54:28.386328</ts>
    <user>U5YKRLXGT</user>
    <text>Yup</text>
  </message>
  <message>
    <ts>2017-06-23T13:54:39.390179</ts>
    <user>U0EUHKVGB</user>
    <text>So, why are you trying to collect the styles?</text>
  </message>
  <message>
    <ts>2017-06-23T13:55:21.404952</ts>
    <user>U0EUHKVGB</user>
    <text>Here’s another tact</text>
  </message>
  <message>
    <ts>2017-06-23T13:55:27.407149</ts>
    <user>U5YKRLXGT</user>
    <text>Because as I understand it, having lots of &amp;lt;style&amp;gt; tags is bad, but you cant do @keyframe animations using javascript properties</text>
  </message>
  <message>
    <ts>2017-06-23T13:55:51.415240</ts>
    <user>U5YKRLXGT</user>
    <text>this namespaces those too</text>
  </message>
  <message>
    <ts>2017-06-23T13:55:59.418122</ts>
    <user>U0EUHKVGB</user>
    <text>Having benchmarked it, in Elm, lots of style tags does not have negative performance impacts.</text>
  </message>
  <message>
    <ts>2017-06-23T13:56:06.420349</ts>
    <user>U5YKRLXGT</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-06-23T13:56:18.424127</ts>
    <user>U0EUHKVGB</user>
    <text>New statement: let’s forget all about that library</text>
  </message>
  <message>
    <ts>2017-06-23T13:56:24.426239</ts>
    <user>U0EUHKVGB</user>
    <text>Have a look at this example: &lt;https://github.com/mdgriffith/style-elements/blob/3.1.0/examples/Chat.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T13:57:00.438727</ts>
    <user>U0EUHKVGB</user>
    <text>And read this README: &lt;http://package.elm-lang.org/packages/mdgriffith/style-elements/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T13:57:14.443349</ts>
    <user>U0EUHKVGB</user>
    <text>Does that seem more like something you would like?</text>
  </message>
  <message>
    <ts>2017-06-23T13:57:38.451806</ts>
    <user>U5YKRLXGT</user>
    <text>I found the documentation on that library to be a bit obtuse to be honest :slightly_smiling_face: But yeah, it looked promising</text>
  </message>
  <message>
    <ts>2017-06-23T13:57:55.457848</ts>
    <user>U5YKRLXGT</user>
    <text>It feels like a lot of the documentation floating about is out of date or ... terse :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T13:58:02.460260</ts>
    <user>U0EUHKVGB</user>
    <text>Well, here’s a little secret</text>
  </message>
  <message>
    <ts>2017-06-23T13:58:13.464173</ts>
    <user>U5YKRLXGT</user>
    <text>I'm not complaining! haha</text>
  </message>
  <message>
    <ts>2017-06-23T13:58:27.469342</ts>
    <user>U5YKRLXGT</user>
    <text>I'm just trying to explain why I went to all this batshit trouble instead of just using that library</text>
  </message>
  <message>
    <ts>2017-06-23T13:58:41.474431</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0JFXEUCT&gt; seems to sit on slack and watch &lt;#C4F9NBLR1|style-elements&gt; like a hawk, and answers everyone’s questions about it there</text>
  </message>
  <message>
    <ts>2017-06-23T13:59:01.482104</ts>
    <user>U0EUHKVGB</user>
    <text>Including “How do I get start with style-elements?”</text>
  </message>
  <message>
    <ts>2017-06-23T14:00:09.507134</ts>
    <user>U5YKRLXGT</user>
    <text>Ok, that's a good suggestion thanks. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T14:00:12.508083</ts>
    <user>U0EUHKVGB</user>
    <text>My recommendation would be this: play around with style-elements for a bit. Try elm-css out too, to see how it feels. Once you have a practical understanding of how those libraries work, come back here and let’s chat about it</text>
  </message>
  <message>
    <ts>2017-06-23T14:00:52.523249</ts>
    <user>U0EUHKVGB</user>
    <text>I recommend watching this video: &lt;https://www.youtube.com/watch?v=n5faeSW71ko&gt; and the video about style-elements when that gets released.</text>
  </message>
  <message>
    <ts>2017-06-23T14:01:37.539422</ts>
    <user>U23SA861Y</user>
    <text>I get the feeling that &lt;@U0JFXEUCT&gt; is watching this right now</text>
  </message>
  <message>
    <ts>2017-06-23T14:01:47.543411</ts>
    <user>U5YKRLXGT</user>
    <text>My neck is tingling</text>
  </message>
  <message>
    <ts>2017-06-23T14:01:50.544495</ts>
    <user>U5YKRLXGT</user>
    <text>OH GOD HE IS BEHIND ME</text>
  </message>
  <message>
    <ts>2017-06-23T14:02:05.549867</ts>
    <user>U5YKRLXGT</user>
    <text>Oh, thank christ - it's just my pet house ghost</text>
  </message>
  <message>
    <ts>2017-06-23T14:02:14.552929</ts>
    <user>U5YKRLXGT</user>
    <text>NOT NOW DEAD GHOST</text>
  </message>
  <message>
    <ts>2017-06-23T14:02:22.555823</ts>
    <user>U5YKRLXGT</user>
    <text>BAD GHOST</text>
  </message>
  <message>
    <ts>2017-06-23T14:02:44.563549</ts>
    <user>U0EUHKVGB</user>
    <text>Hmmm :thinking_face:</text>
  </message>
  <message>
    <ts>2017-06-23T14:04:25.599332</ts>
    <user>U5YKRLXGT</user>
    <text>Does the elm virtual dom implementation have any performance shortcuts deep down like react-id / key</text>
  </message>
  <message>
    <ts>2017-06-23T14:05:12.615696</ts>
    <user>U0EUHKVGB</user>
    <text>Generally, if you’re asking questions like that before writing any Elm, then you’re asking them at the wrong time entirely</text>
  </message>
  <message>
    <ts>2017-06-23T14:05:24.620001</ts>
    <user>U0EUHKVGB</user>
    <text>But yes: `Html.Lazy` and `Html.Keyed`</text>
  </message>
  <message>
    <ts>2017-06-23T14:05:27.621192</ts>
    <user>U5YKRLXGT</user>
    <text>Ok, great</text>
  </message>
  <message>
    <ts>2017-06-23T14:05:52.629612</ts>
    <user>U5YKRLXGT</user>
    <text>I'm just looking for common ground :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T14:06:34.644212</ts>
    <user>U5YKRLXGT</user>
    <text>Ah, great</text>
  </message>
  <message>
    <ts>2017-06-23T14:07:18.659280</ts>
    <user>U5YKRLXGT</user>
    <text>I've written a looooot in react :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T14:14:00.793142</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; I've written a looooot in react

in my experience, this is unfortunately a disadvantage in coming to Elm</text>
  </message>
  <message>
    <ts>2017-06-23T14:14:28.802890</ts>
    <user>U0CL0AS3V</user>
    <text>a tiny bit of React experience can be a springboard in that you already are familiar with the Virtual DOM concept</text>
  </message>
  <message>
    <ts>2017-06-23T14:14:36.805593</ts>
    <user>U0CL0AS3V</user>
    <text>but that's all they have in common</text>
  </message>
  <message>
    <ts>2017-06-23T14:14:52.810767</ts>
    <user>U0CL0AS3V</user>
    <text>and everything after that is more and more knowledge that no longer applies, and is challenging to unlearn :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-23T14:15:47.829590</ts>
    <user>U0CL0AS3V</user>
    <text>so as far as looking for common ground goes - I'd say "the idea of a Virtual DOM data structure that describes how you want the page to look" and then absolutely nothing else</text>
  </message>
  <message>
    <ts>2017-06-23T14:15:58.833363</ts>
    <user>U0CL0AS3V</user>
    <text>and trying as hard as possible to mentally reset :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T14:16:07.836345</ts>
    <user>U5YKRLXGT</user>
    <text>I don't know, redux isn't that dissimilar to the Elm Architecture right?</text>
  </message>
  <message>
    <ts>2017-06-23T14:16:32.844394</ts>
    <user>U0EUHKVGB</user>
    <text>Redux was based on the Elm architecture.</text>
  </message>
  <message>
    <ts>2017-06-23T14:16:42.847834</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; I don't know

this is a good mindset to have

&amp;gt; redux isn't that dissimilar to the Elm Architecture right?

I think this mindset is going to make life harder :wink:</text>
  </message>
  <message>
    <ts>2017-06-23T14:16:46.849200</ts>
    <user>U0EUHKVGB</user>
    <text>However, it heavily relies on mutation and the lack of type safety to achieve some things</text>
  </message>
  <message>
    <ts>2017-06-23T14:17:16.859143</ts>
    <user>U0EUHKVGB</user>
    <text>Such as how reducers get merged, etc.</text>
  </message>
  <message>
    <ts>2017-06-23T14:17:45.868602</ts>
    <user>U0EUHKVGB</user>
    <text>And every time you have some localized state, then you are fighting against the principles that Elm tries to stick to.</text>
  </message>
  <message>
    <ts>2017-06-23T14:18:21.880718</ts>
    <user>U0EUHKVGB</user>
    <text>In Elm, it’s best to stick to functions whereever possible, and just take a model, an update loop, and a view, and work with that.</text>
  </message>
  <message>
    <ts>2017-06-23T14:18:37.885804</ts>
    <user>U0EUHKVGB</user>
    <text>Just like Elm is not ML or Haskell, Redux is not Elm</text>
  </message>
  <message>
    <ts>2017-06-23T14:18:57.892069</ts>
    <user>U5YKRLXGT</user>
    <text>Oh, &lt;@U0CL0AS3V&gt; hi you are the guy from the video</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:03.894125</ts>
    <user>U5YKRLXGT</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:07.895490</ts>
    <user>U0CL0AS3V</user>
    <text>:wave:</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:14.897685</ts>
    <user>U5YKRLXGT</user>
    <text>That is very weird, I am on the other side of the world from you</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:16.898345</ts>
    <user>U0CL0AS3V</user>
    <text>hello and welcome!</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:25.901616</ts>
    <user>U32H3RA87</user>
    <text>My brother, who has never done any programming or anything similar, asked me today to help him learn. Obviously going with elm, going to be fun to see if he takes to it at all!</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:28.902421</ts>
    <user>U0CL0AS3V</user>
    <text>the Internet is a great thing :smile:</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:39.906056</ts>
    <user>U5YKRLXGT</user>
    <text>A great and Terrible thing :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:50.909623</ts>
    <user>U0CL0AS3V</user>
    <text>depending on how it's used, yes :wink:</text>
  </message>
  <message>
    <ts>2017-06-23T14:21:13.937109</ts>
    <user>U5YKRLXGT</user>
    <text>Well, for what it is worth I have been doing a prototype for work and I've implemented it in Typescript React Styled-Components and Mobx and it was quite similar to pulling teeth</text>
  </message>
  <message>
    <ts>2017-06-23T14:21:32.943269</ts>
    <user>U5YKRLXGT</user>
    <text>and then I did it in Elm, and the only thing that hasn't been literally perfect is the out of the box CSS answer</text>
  </message>
  <message>
    <ts>2017-06-23T14:21:50.949414</ts>
    <user>U5YKRLXGT</user>
    <text>:shrug:</text>
  </message>
  <message>
    <ts>2017-06-23T14:22:11.956529</ts>
    <user>U5YKRLXGT</user>
    <text>Oh shit, you don't even have the non-commital emoji. That's how pure you guys are</text>
  </message>
  <message>
    <ts>2017-06-23T14:22:30.963112</ts>
    <user>U5ABF3BH7</user>
    <text>Hi, has anyone implemented select2 type dropdown in Elm (&lt;https://select2.github.io/examples.html&gt;) . I am still struggling with it and would appreciate an example if you have done something similar.</text>
  </message>
  <message>
    <ts>2017-06-23T14:22:57.972492</ts>
    <user>U32H3RA87</user>
    <text>at least twice a day now I say to my colleagues "this would not be an issue if we used elm instead of react"</text>
  </message>
  <message>
    <ts>2017-06-23T14:22:59.973359</ts>
    <user>U5ABF3BH7</user>
    <text>I am supposed to create something similar in Elm and struggling a big</text>
  </message>
  <message>
    <ts>2017-06-23T14:23:58.993458</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5ABF3BH7&gt;, does this example help you much? &lt;https://ellie-app.com/3tm2WSV9JTza1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T14:26:32.046258</ts>
    <user>U5ABF3BH7</user>
    <text>It is helpful thanks,  as toggling is part of what I need.</text>
  </message>
  <message>
    <ts>2017-06-23T14:27:39.068886</ts>
    <user>U5ABF3BH7</user>
    <text>Someone must have already implemented a select2 in Elm though.</text>
  </message>
  <message>
    <ts>2017-06-23T14:27:54.073801</ts>
    <user>U5ABF3BH7</user>
    <text>Thanks &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T14:28:07.078240</ts>
    <user>U0EUHKVGB</user>
    <text>I don’t really know what you mean by select2</text>
  </message>
  <message>
    <ts>2017-06-23T14:28:14.080722</ts>
    <user>U0EUHKVGB</user>
    <text>which particular feature do you need?</text>
  </message>
  <message>
    <ts>2017-06-23T14:29:33.107799</ts>
    <user>U0EUHKVGB</user>
    <text>there’s this too: &lt;https://sporto.github.io/elm-dropdown/&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T14:29:46.111854</ts>
    <user>U0EUHKVGB</user>
    <text>and this: &lt;http://package.elm-lang.org/packages/jschonenberg/elm-dropdown/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T14:29:52.113966</ts>
    <user>U0EUHKVGB</user>
    <text>and this: &lt;http://package.elm-lang.org/packages/ericgj/elm-autoinput/1.0.0/Autoinput&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T14:39:45.313517</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0EUHKVGB&gt; Thanks. By select2, I mean an example exactly like in the first example in the link (&lt;https://select2.github.io/examples.html&gt;).  Clicking on the bar gives you a search bar and selections that can be arranged in subcategories,  instead of a regular select dropdown. So there are 3 elements: dropdown, search bar and clicking on the input selects the element in the main input</text>
  </message>
  <message>
    <ts>2017-06-23T14:41:08.340909</ts>
    <user>U5ABF3BH7</user>
    <text>the elm-dropdown gives me the dropdown but not the search ability</text>
  </message>
  <message>
    <ts>2017-06-23T14:41:40.351516</ts>
    <user>U5ABF3BH7</user>
    <text>I don't really get autoinput</text>
  </message>
  <message>
    <ts>2017-06-23T14:42:29.367619</ts>
    <user>U5ABF3BH7</user>
    <text>That may be what I need. Does anyone have an example of auto input?</text>
  </message>
  <message>
    <ts>2017-06-23T14:44:59.415936</ts>
    <user>U5LFUHH19</user>
    <text>Are there any good example for merging two Dicts?  I actually have a List Dict that I want to merge into one giangantor Dict.</text>
  </message>
  <message>
    <ts>2017-06-23T14:46:24.443983</ts>
    <user>U23SA861Y</user>
    <text>I believe there is a function for that</text>
  </message>
  <message>
    <ts>2017-06-23T14:46:53.453464</ts>
    <user>U23SA861Y</user>
    <text>`Dict.merge`</text>
  </message>
  <message>
    <ts>2017-06-23T14:47:11.459400</ts>
    <user>U23SA861Y</user>
    <text>you can also use `Dict.union`</text>
  </message>
  <message>
    <ts>2017-06-23T14:48:47.491084</ts>
    <user>U5LFUHH19</user>
    <text>Sorry, I meant I'm looking at `Dict.merge` and not grokking the type signature, was hoping for example code.</text>
  </message>
  <message>
    <ts>2017-06-23T14:49:05.496783</ts>
    <user>U23SA861Y</user>
    <text>depending on how you want to merge the dicts you can do `List.foldl Dict.union Dict.empty yourlist`</text>
  </message>
  <message>
    <ts>2017-06-23T14:49:46.510094</ts>
    <user>U23SA861Y</user>
    <text>it gives you a description of what those functions do right in the doc</text>
  </message>
  <message>
    <ts>2017-06-23T14:50:12.518910</ts>
    <user>U23SA861Y</user>
    <text>you need to manually specify what happens when a key is in the the left, both, and the right</text>
  </message>
  <message>
    <ts>2017-06-23T14:50:20.521443</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5LFUHH19&gt; `Dict.merge` basically takes functions for all cases: an element that only appears in the left dict, one that lets you choose what to do when an element appears in both dicts, and one that lets you handle an element that only appears in the right dict</text>
  </message>
  <message>
    <ts>2017-06-23T14:50:50.531583</ts>
    <user>U23SA861Y</user>
    <text>in this case result need not be a dict, so it's more like a fold</text>
  </message>
  <message>
    <ts>2017-06-23T14:50:54.532868</ts>
    <user>U5LFUHH19</user>
    <text>Right, but I'm just not following what `result` means &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Dict&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T14:51:08.537342</ts>
    <user>U23SA861Y</user>
    <text>you get total freedom as to what type it is</text>
  </message>
  <message>
    <ts>2017-06-23T14:51:10.537983</ts>
    <user>U3SJEDR96</user>
    <text>but yeah, if you just want to merge them all into to one, you can do sometihng like `List.foldl (Dict.union) Dict.empty [ dict, otherDict, moreDict ]`</text>
  </message>
  <message>
    <ts>2017-06-23T14:52:00.553950</ts>
    <user>U5LFUHH19</user>
    <text>I would like to go from `Dict String a` to `Dict String (List a)` or something where I have all the values together.</text>
  </message>
  <message>
    <ts>2017-06-23T14:52:27.562749</ts>
    <user>U23SA861Y</user>
    <text>right so then you need merge for that</text>
  </message>
  <message>
    <ts>2017-06-23T14:52:39.566575</ts>
    <user>U23SA861Y</user>
    <text>```
Dict.merge
    (\key a -&amp;gt; Dict.insert key [a])
    (\key a b -&amp;gt; Dict.insert key [a,b])
   (\key b -&amp;gt; Dict.insert key [b])
  first
  second
  Dict.empty
```</text>
  </message>
  <message>
    <ts>2017-06-23T14:53:37.586259</ts>
    <user>U5LFUHH19</user>
    <text>Why are there two `result`s at the end of `merge`?</text>
  </message>
  <message>
    <ts>2017-06-23T14:53:47.589358</ts>
    <user>U3SJEDR96</user>
    <text>`Dict.merge (\key val dict -&amp;gt; Dict.insert key [ val ]) (\key val otherVal dict -&amp;gt; Dict.insert key [ val otherVal dict ]) (\key val dict -&amp;gt; Dict.insert key [ val ]) leftDict rightDict Dict.empty`</text>
  </message>
  <message>
    <ts>2017-06-23T14:54:00.593725</ts>
    <user>U3SJEDR96</user>
    <text>the first one is your "initial" result, much like you have with foldl and foldr</text>
  </message>
  <message>
    <ts>2017-06-23T14:54:06.595726</ts>
    <user>U3SJEDR96</user>
    <text>the second is your return value</text>
  </message>
  <message>
    <ts>2017-06-23T14:54:13.597676</ts>
    <user>U5LFUHH19</user>
    <text>Oh!</text>
  </message>
  <message>
    <ts>2017-06-23T14:54:27.602692</ts>
    <user>U5LFUHH19</user>
    <text>Makes sense now.</text>
  </message>
  <message>
    <ts>2017-06-23T15:06:06.837129</ts>
    <user>U2LAL86AY</user>
    <text>elm reactor doesn't work with native modules??</text>
  </message>
  <message>
    <ts>2017-06-23T15:08:05.874084</ts>
    <user>U2LAL86AY</user>
    <text>```
Example.elm:12095 Uncaught ReferenceError: _user$project$Native is not defined
    at Function.func (Example.elm:12095)
    at A2 (Example.elm:92)
    at Example.elm:12210
    at Example.elm:7
    at Example.elm:3187
    at A2 (Example.elm:93)
    at Function.func (Example.elm:11553)
    at A4 (Example.elm:104)
    at Example.elm:11605
    at Example.elm:26
```</text>
  </message>
  <message>
    <ts>2017-06-23T15:08:22.879257</ts>
    <user>U0EUHKVGB</user>
    <text>your native code does not match your project name</text>
  </message>
  <message>
    <ts>2017-06-23T15:08:57.889879</ts>
    <user>U2LAL86AY</user>
    <text>my project name is `elm-pdf`</text>
  </message>
  <message>
    <ts>2017-06-23T15:09:05.892327</ts>
    <user>U2LAL86AY</user>
    <text>so it will look like this:</text>
  </message>
  <message>
    <ts>2017-06-23T15:09:20.897068</ts>
    <user>U2LAL86AY</user>
    <text>`_user$elm-pdf$Native`</text>
  </message>
  <message>
    <ts>2017-06-23T15:09:22.897637</ts>
    <user>U2LAL86AY</user>
    <text>?</text>
  </message>
  <message>
    <ts>2017-06-23T15:09:42.904077</ts>
    <user>U0EUHKVGB</user>
    <text>dashes are replaced by underscores</text>
  </message>
  <message>
    <ts>2017-06-23T15:09:53.907393</ts>
    <user>U2LAL86AY</user>
    <text>ah :smile:!</text>
  </message>
  <message>
    <ts>2017-06-23T15:10:04.911045</ts>
    <user>U0EUHKVGB</user>
    <text>the user and package come from your repo url in your elm package file </text>
  </message>
  <message>
    <ts>2017-06-23T15:29:24.257919</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2LAL86AY&gt; =&amp;gt; &lt;#C0K9JFCKV|native&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T15:36:01.374396</ts>
    <user>U5QV0AZM3</user>
    <text>Is there a Svg to Fast Svg converter?</text>
  </message>
  <message>
    <ts>2017-06-23T15:43:23.498566</ts>
    <user>U0EUHKVGB</user>
    <text>?</text>
  </message>
  <message>
    <ts>2017-06-23T15:43:34.501462</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5QV0AZM3&gt; what do you mean by fast svg?</text>
  </message>
  <message>
    <ts>2017-06-23T15:44:32.517722</ts>
    <user>U5AQ585NH</user>
    <text>Yay! Just figured out how to make reusable widgets. Updated repo. Tomorrow will try to create package from it.</text>
  </message>
  <message>
    <ts>2017-06-23T15:46:46.556617</ts>
    <user>U5QV0AZM3</user>
    <text>&lt;@U0EUHKVGB&gt; elm-lang/svg, my friend sent me a SVG and I wanted to put it in Elm Svg directly without converting it manually</text>
  </message>
  <message>
    <ts>2017-06-23T15:46:57.559734</ts>
    <user>U0EUHKVGB</user>
    <text>one sec</text>
  </message>
  <message>
    <ts>2017-06-23T15:47:05.562115</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://gist.github.com/eeue56/d0ab060828bf3b64922ac9172ee430c3&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T15:47:21.566702</ts>
    <user>U0EUHKVGB</user>
    <text>change `example.svg` to the name of your file</text>
  </message>
  <message>
    <ts>2017-06-23T15:47:35.570788</ts>
    <user>U0EUHKVGB</user>
    <text>on this line: &lt;https://gist.github.com/eeue56/d0ab060828bf3b64922ac9172ee430c3#file-xml_to_elm-py-L56&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T15:47:48.574291</ts>
    <user>U0EUHKVGB</user>
    <text>`output.elm` will contain the svg.</text>
  </message>
  <message>
    <ts>2017-06-23T15:47:59.577591</ts>
    <user>U5AQ585NH</user>
    <text>&lt;@U0J1M0F32&gt; this one &lt;https://github.com/inkuzmin/elm-multiselect&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T15:48:17.582727</ts>
    <user>U5QV0AZM3</user>
    <text>&lt;@U0EUHKVGB&gt; no way!!! Thank you so much :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T15:48:44.590580</ts>
    <user>U0EUHKVGB</user>
    <text>or, you can just try this if you don’t want to convert it at all to elm-svg: &lt;https://stackoverflow.com/a/4482962/2985975&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T15:51:40.640835</ts>
    <user>U5QV0AZM3</user>
    <text>&lt;@U0EUHKVGB&gt; Gonna try both even if the second one seems smarter! Thank you</text>
  </message>
  <message>
    <ts>2017-06-23T16:12:16.995358</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5QV0AZM3&gt; also, &lt;https://mbylstra.github.io/html-to-elm/&gt; _might_ support SVG</text>
  </message>
  <message>
    <ts>2017-06-23T16:20:10.125591</ts>
    <user>U5ABF3BH7</user>
    <text>I get autoinput now, but still having trouble figuring out how to make the search and select together to create a select2 type dropdown ( single entry)</text>
  </message>
  <message>
    <ts>2017-06-23T18:08:36.700297</ts>
    <user>U5LFUHH19</user>
    <text>Re: merging a `List (Dict String a) -&amp;gt; Dict String (List a)`: &lt;http://lpaste.net/3343297668142071808&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T18:09:31.709978</ts>
    <user>U5LFUHH19</user>
    <text>Some commentary in there.  I think I figured it out, but I was hoping to confirm my suspicions.  Basically I think I need to first change my `List (Dict String a)` to `List (Dict String (List a))`</text>
  </message>
  <message>
    <ts>2017-06-23T18:10:38.721968</ts>
    <user>U5LFUHH19</user>
    <text>I tried variations on the "merge" argument where the `key` is found in both Dicts where I assumed that the `a` is a `List` and so did `a ++ [b]` but that won't even compile.</text>
  </message>
  <message>
    <ts>2017-06-23T18:14:47.763452</ts>
    <user>U23SA861Y</user>
    <text>you want a function which goes  from List (Dict key a) to Dict key (List a) correct?</text>
  </message>
  <message>
    <ts>2017-06-23T18:27:17.885072</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3yD7XSLcDHna1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T18:28:07.892906</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3yD7XSLcDHna1/1&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T18:29:09.902697</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U5LFUHH19&gt; ^</text>
  </message>
  <message>
    <ts>2017-06-23T18:30:02.911645</ts>
    <user>U5LFUHH19</user>
    <text>Woah!  That works!  &lt;https://ellie-app.com/3yD9JfQC9rfa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T18:30:29.916329</ts>
    <user>U5LFUHH19</user>
    <text>OK, I'm seeing my mistake(s).</text>
  </message>
  <message>
    <ts>2017-06-23T18:30:39.918045</ts>
    <user>U5LFUHH19</user>
    <text>Thansk, &lt;@U23SA861Y&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T19:13:57.288349</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U5ABF3BH7&gt;  here's a select2-ish thing just posted yesterday</text>
  </message>
  <message>
    <ts>2017-06-23T19:41:26.484233</ts>
    <user>U2LAL86AY</user>
    <text>how i'm supposed to use the DOM?</text>
  </message>
  <message>
    <ts>2017-06-23T19:42:32.491169</ts>
    <user>U2LAL86AY</user>
    <text>```

myButton : Html Float
myButton =
  button
    [ on "click" (target offsetWidth) ]
    [ text "Click me!" ]
```
I need Html Msg not Html Float :smile: What html Float even means in terms of elm architecture?</text>
  </message>
  <message>
    <ts>2017-06-23T19:43:01.494264</ts>
    <user>U2LAL86AY</user>
    <text>&lt;http://package.elm-lang.org/packages/MichaelCombs28/elm-dom/1.0.0/DOM#target&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T19:46:23.515972</ts>
    <user>U23SA861Y</user>
    <text>well if you had only one single message type Float then you could use that, but otherwise you need to map in a message constructor of type (Float -&amp;gt; Msg)</text>
  </message>
  <message>
    <ts>2017-06-23T19:47:51.525318</ts>
    <user>U2LAL86AY</user>
    <text>so i need to use `Json.map MyMessageTag` and then this code.. ok that makes sense. thanks :thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-24T02:51:39.858513</ts>
    <user>U3S3S7J06</user>
    <text>is there a way to deconstruct a type and have the type assigned? like `Point 3 4` used in the way `(Point x y) = pt = Point 3 4`</text>
  </message>
  <message>
    <ts>2017-06-24T02:52:21.860134</ts>
    <user>U3S3S7J06</user>
    <text>or is it just accept `pt` and deconstruct in the function?</text>
  </message>
  <message>
    <ts>2017-06-24T03:20:40.928411</ts>
    <user>U0H3A9XLN</user>
    <text>You can do it using pattern matching</text>
  </message>
  <message>
    <ts>2017-06-24T03:21:28.930414</ts>
    <user>U0H3A9XLN</user>
    <text>Or, if you have only 1 union type you can deconstruct within arguments </text>
  </message>
  <message>
    <ts>2017-06-24T03:39:52.973942</ts>
    <user>U2LAL86AY</user>
    <text>how do i read the width of the parent of an element? what ii have right now is: 
` on "click" &amp;lt;| Json.map (ReceiveWidthOfParent id) &amp;lt;| DOM.parentElement &amp;lt;| DOM.offsetWidth `
But there are no msg shown.</text>
  </message>
  <message>
    <ts>2017-06-24T03:44:43.984740</ts>
    <user>U2LAL86AY</user>
    <text>for the element itself i can get the width using:
` on "click" &amp;lt;| Json.map (ReceiveWidthOfParent id) &amp;lt;| DOM.target &amp;lt;| DOM.offsetWidth`</text>
  </message>
  <message>
    <ts>2017-06-24T03:45:05.985592</ts>
    <user>U2LAL86AY</user>
    <text>not sure how to combine this decoders to get the parent</text>
  </message>
  <message>
    <ts>2017-06-24T03:47:15.990642</ts>
    <user>U2LAL86AY</user>
    <text>doh! simple stuff - now i know :smile:
`on "click" &amp;lt;| Json.map (ReceiveWidthOfParent id) &amp;lt;| DOM.target &amp;lt;| DOM.parentElement &amp;lt;| DOM.offsetWidth`</text>
  </message>
  <message>
    <ts>2017-06-24T05:20:04.217892</ts>
    <user>U0F01KLV6</user>
    <text>&lt;@U3S3S7J06&gt;: Try `(Point x y as pt)`</text>
  </message>
  <message>
    <ts>2017-06-24T05:20:18.218683</ts>
    <user>U0F01KLV6</user>
    <text>or `((Point x y) as pt)`</text>
  </message>
  <message>
    <ts>2017-06-24T06:42:00.423141</ts>
    <user>U3YDBDP4Z</user>
    <text>`elm-format` adds the standard space of 2 lines between a comment and a function.
Is that really correct formatting?</text>
  </message>
  <message>
    <ts>2017-06-24T06:42:21.424061</ts>
    <user>U3YDBDP4Z</user>
    <text>Looks terribly awkward to have such distance between a comment related to a function and the function in question</text>
  </message>
  <message>
    <ts>2017-06-24T06:45:16.431553</ts>
    <user>U0EUHKVGB</user>
    <text>Use a `{-|` comment</text>
  </message>
  <message>
    <ts>2017-06-24T06:45:24.432003</ts>
    <user>U0EUHKVGB</user>
    <text>it’s only single line comments that that happens to</text>
  </message>
  <message>
    <ts>2017-06-24T06:54:14.453868</ts>
    <user>U3YDBDP4Z</user>
    <text>Alright. But is it a bug or is it deliberate?</text>
  </message>
  <message>
    <ts>2017-06-24T06:55:20.456559</ts>
    <user>U3YDBDP4Z</user>
    <text>No matter if it's a single or multi-line comment, having such a space between a comment and the thing the comment is related to feels wrong.</text>
  </message>
  <message>
    <ts>2017-06-24T06:59:47.467352</ts>
    <user>U0F01KLV6</user>
    <text>&lt;@U3YDBDP4Z&gt; It's deliberate. The reason is that comments between functions which are not "function comments " (`{-|`) are used as dividers.</text>
  </message>
  <message>
    <ts>2017-06-24T07:01:13.472128</ts>
    <user>U0F01KLV6</user>
    <text>So...
```
{- TYPES -}


type Person = Person String Int


{- FUNCTIONS -}


{-| This function extracts the name from a person -}
name : Person -&amp;gt; String
name (Person name _) = name
```</text>
  </message>
  <message>
    <ts>2017-06-24T07:01:51.473755</ts>
    <user>U0F01KLV6</user>
    <text>It only happens at top level though. Single or multi-line comments within function bodies or type definitions do not get that treatment.</text>
  </message>
  <message>
    <ts>2017-06-24T07:04:57.481637</ts>
    <user>U0F01KLV6</user>
    <text>Pay attention to the `|` in the comment above the function. That's the difference. Same thing applies to type definitions as well.</text>
  </message>
  <message>
    <ts>2017-06-24T07:12:24.500110</ts>
    <user>U0GPGFQQY</user>
    <text>Is it possible to implement this function in a point free style without mentioning `b c d` arguments?

```
f : (a -&amp;gt; b -&amp;gt; c -&amp;gt; d -&amp;gt; x) -&amp;gt; a -&amp;gt; b -&amp;gt; c -&amp;gt; d -&amp;gt; ( a, x )
f fn a b c d =
    ( a, fn a b c d )
```</text>
  </message>
  <message>
    <ts>2017-06-24T07:12:54.501162</ts>
    <user>U0F01KLV6</user>
    <text>Wouldn't think so</text>
  </message>
  <message>
    <ts>2017-06-24T07:14:44.505143</ts>
    <user>U0F01KLV6</user>
    <text>why would you want to?</text>
  </message>
  <message>
    <ts>2017-06-24T07:16:18.509320</ts>
    <user>U0GPGFQQY</user>
    <text>Just as a brain bending exercise. `a` is an `id`, and `fn` is a constructor of the record, I want to have tuples with `(id, record)` to create a Dict out of them</text>
  </message>
  <message>
    <ts>2017-06-24T07:16:19.509374</ts>
    <user>U17MSA88M</user>
    <text>&lt;@U0GPGFQQY&gt; does elm have something like tuple sections?</text>
  </message>
  <message>
    <ts>2017-06-24T07:17:57.513237</ts>
    <user>U17MSA88M</user>
    <text>if there is a tuple constructor function you definitely can</text>
  </message>
  <message>
    <ts>2017-06-24T07:18:14.514047</ts>
    <user>U0GPGFQQY</user>
    <text>`(,)` is a tuple constructor</text>
  </message>
  <message>
    <ts>2017-06-24T07:18:17.514150</ts>
    <user>U17MSA88M</user>
    <text>`(,) :: a -&amp;gt; b -&amp;gt; (a, b)`</text>
  </message>
  <message>
    <ts>2017-06-24T07:18:19.514245</ts>
    <user>U17MSA88M</user>
    <text>?</text>
  </message>
  <message>
    <ts>2017-06-24T07:19:55.517998</ts>
    <user>U0GPGFQQY</user>
    <text>Yes, this would construct a tuple</text>
  </message>
  <message>
    <ts>2017-06-24T07:20:35.520180</ts>
    <user>U17MSA88M</user>
    <text>&lt;http://pointfree.io/&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T07:20:41.520454</ts>
    <user>U17MSA88M</user>
    <text>returns `f = ap ((.) . (.) . (.) . (,))`</text>
  </message>
  <message>
    <ts>2017-06-24T07:22:39.525396</ts>
    <user>U17MSA88M</user>
    <text>`ap` is defined as `ap f g = \x -&amp;gt; f x (g x)`</text>
  </message>
  <message>
    <ts>2017-06-24T07:28:06.538703</ts>
    <user>U0GPGFQQY</user>
    <text>oh my god

```
f : (a -&amp;gt; b -&amp;gt; c -&amp;gt; d -&amp;gt; x) -&amp;gt; a -&amp;gt; b -&amp;gt; c -&amp;gt; d -&amp;gt; ( a, x )
f fn a =
    ((&amp;lt;&amp;lt;) &amp;lt;&amp;lt; (&amp;lt;&amp;lt;) &amp;lt;&amp;lt; (&amp;lt;&amp;lt;) &amp;lt;&amp;lt; (,)) a (fn a)
```</text>
  </message>
  <message>
    <ts>2017-06-24T07:28:39.540008</ts>
    <user>U17MSA88M</user>
    <text>do you not have `ap` in Elm? ^^ It's the applicative instance for Function or S combinator</text>
  </message>
  <message>
    <ts>2017-06-24T07:30:58.546403</ts>
    <user>U0GPGFQQY</user>
    <text>It's not included in the Higher-Order Helpers section here &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Basics&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T07:31:23.547428</ts>
    <user>U0GPGFQQY</user>
    <text>But I guess it's fine cause it is easy to define myself</text>
  </message>
  <message>
    <ts>2017-06-24T07:31:58.549026</ts>
    <user>U17MSA88M</user>
    <text>I think we're obscure enough at this point</text>
  </message>
  <message>
    <ts>2017-06-24T07:32:04.549336</ts>
    <user>U17MSA88M</user>
    <text>marvelous :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-24T07:34:19.555000</ts>
    <user>U0GPGFQQY</user>
    <text>My original code is much better and more understandable</text>
  </message>
  <message>
    <ts>2017-06-24T07:34:21.555098</ts>
    <user>U0F01KLV6</user>
    <text>Wow... That is sick</text>
  </message>
  <message>
    <ts>2017-06-24T07:35:13.557249</ts>
    <user>U17MSA88M</user>
    <text>&amp;gt; My original code is much better and more understandable

Oh no doubt :smile:</text>
  </message>
  <message>
    <ts>2017-06-24T07:36:35.560718</ts>
    <user>U17MSA88M</user>
    <text>This talk describes the trade-offs in point free and how it's actually a spectrum really well &lt;https://www.youtube.com/watch?v=seVSlKazsNk&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T07:37:45.563626</ts>
    <user>U0GPGFQQY</user>
    <text>Oh, cool, thanks for reminding that I should watch this video. Amar is my colleague at SoundCloud</text>
  </message>
  <message>
    <ts>2017-06-24T07:38:21.565182</ts>
    <user>U17MSA88M</user>
    <text>Oh wow, you're lucky! Extend my thanks to him for the talk if you happen to talk to him :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-24T07:51:49.598149</ts>
    <user>U3LUC6SNS</user>
    <text>To the extent that this has value (other than fun), it is more esthetic than scientific. He he he! :slightly_smiling_face:  

It is important to have alpha &amp;lt; 1.0 so that colors mix.</text>
  </message>
  <message>
    <ts>2017-06-24T07:52:26.599902</ts>
    <user>U17MSA88M</user>
    <text>Pretty :star:</text>
  </message>
  <message>
    <ts>2017-06-24T07:52:37.600319</ts>
    <user>U3LUC6SNS</user>
    <text>Thx!</text>
  </message>
  <message>
    <ts>2017-06-24T07:56:53.611231</ts>
    <user>U0GPGFQQY</user>
    <text>kritzcreek: 

this may look a little nicer

```
((&amp;lt;&amp;lt;) &amp;lt;&amp;lt; (&amp;lt;&amp;lt;) &amp;lt;&amp;lt; (&amp;lt;&amp;lt;)) ((,) a) (fn a)
```</text>
  </message>
  <message>
    <ts>2017-06-24T08:01:17.624285</ts>
    <user>U3LUC6SNS</user>
    <text>That is beginning to look like Lisp</text>
  </message>
  <message>
    <ts>2017-06-24T08:54:55.772867</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U3LUC6SNS&gt; super ! Can this be used for creating particle effects? Is it performant ?</text>
  </message>
  <message>
    <ts>2017-06-24T09:21:19.857767</ts>
    <user>U3LUC6SNS</user>
    <text>I don't know how performant it is -- I should try with many particles.  For best results, I think the `Graph` library that I wrote for this is an interface to SVG.  I don't thinks it is very efficient; it should be redone in WebGL.  &lt;@U2FP79HN3&gt; posted something very interesting in this regard -- please see his Ellie: &lt;https://ellie-app.com/3vwGN4c4fTga1/0&gt; .  I plan to rewrite `Graph` in the next few days in WebGL following &lt;@U2FP79HN3&gt; and will post the code for you.</text>
  </message>
  <message>
    <ts>2017-06-24T09:26:38.874483</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U2LAL86AY&gt; Here is the reference for WebGL: &lt;http://package.elm-lang.org/packages/elm-community/webgl/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T09:41:54.921773</ts>
    <user>U2FP79HN3</user>
    <text>Heehee</text>
  </message>
  <message>
    <ts>2017-06-24T09:42:02.922218</ts>
    <user>U2FP79HN3</user>
    <text>Triangles and squares were fun</text>
  </message>
  <message>
    <ts>2017-06-24T09:42:09.922560</ts>
    <user>U2FP79HN3</user>
    <text>this was more fun &lt;http://cloud.jorisooms.be/1s3J3R1p0U13&gt; &lt;@U3LUC6SNS&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T09:44:19.929556</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U2FP79HN3&gt;, that is beautiful!</text>
  </message>
  <message>
    <ts>2017-06-24T09:45:49.934415</ts>
    <user>U55CZT6T1</user>
    <text>What are the common approaches to profiling Elm apps?</text>
  </message>
  <message>
    <ts>2017-06-24T10:54:24.163914</ts>
    <user>U3YDBDP4Z</user>
    <text>Thanks &lt;@U0F01KLV6&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T11:20:55.262321</ts>
    <user>U2LAL86AY</user>
    <text>how can i read DOM information about an element - immediately after it has been created - but with no interaction form the user? 

I'm showing text inside some boxes - and this boxes are layd out in 2d plane - and i need to detect if they collide or not - - for that i need their dimension - width height- and absolute positioning.

I use &lt;http://package.elm-lang.org/packages/MichaelCombs28/elm-dom/1.0.0/DOM#boundingClientRect&gt;
But how can i get this info without no user interaction? How do i know how to lay out this boxes - up front? Calculating their future dimensions in pure elm is not an option. 

I need to render them first, then get their dimensions and positions. all this without the user doing anything... hmm any ideas? :thinking_face:</text>
  </message>
  <message>
    <ts>2017-06-24T11:25:22.278477</ts>
    <user>U2LAL86AY</user>
    <text>i need to go, but please if you have any ideas on how this can be done - let me know :smile:</text>
  </message>
  <message>
    <ts>2017-06-24T11:44:36.348991</ts>
    <user>U0GPGFQQY</user>
    <text>&lt;@U2LAL86AY&gt; there is no way to do this without ports</text>
  </message>
  <message>
    <ts>2017-06-24T11:49:46.366907</ts>
    <user>U0JFGGZS6</user>
    <text>you can't use CSS for this somehow?</text>
  </message>
  <message>
    <ts>2017-06-24T11:56:09.389824</ts>
    <user>U0GPGFQQY</user>
    <text>&lt;@U2LAL86AY&gt; if you explain layout, maybe we can come up with a different solution</text>
  </message>
  <message>
    <ts>2017-06-24T12:18:02.473613</ts>
    <user>U2LAL86AY</user>
    <text>hey i'm back</text>
  </message>
  <message>
    <ts>2017-06-24T12:18:12.474200</ts>
    <user>U2LAL86AY</user>
    <text>yes, i'll show you a picture.</text>
  </message>
  <message>
    <ts>2017-06-24T12:23:36.492890</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0GPGFQQY&gt; loading..</text>
  </message>
  <message>
    <ts>2017-06-24T12:29:59.515229</ts>
    <user>U2LAL86AY</user>
    <text>for generating what i have here - i only rely on the relative/absolute positioning - and i only need to know the height of the orange box - and the width of the blue box - and using this alternation of relative/absolute positioning i generate this.
The orange boxes contain blue boxes and the blue boxes contain orange boxes. And what i'm trying to solve is:
1. when adding a new box - i need to make sure it doesn't collide with an already expanded column or row.
2. when expanding a row - i need to make sure it doesn't collide with an already expanded row or column.

And this can be at any level of nesting.. So that's why i need all this dom info - because this boxes will contain UI stuff inside - like text - that can;t be calculated up front - only after i render them - i get their widths and heights- and the absolute positioning related to the the viewport / document.</text>
  </message>
  <message>
    <ts>2017-06-24T12:38:22.546341</ts>
    <user>U2LAL86AY</user>
    <text>so just to explain some more.
```
type BlueBox = { id: Int, width: Int, orangeBoxes : List Int }
type OrangeBox = { id: Int, height: Int, blueBoxes: List Int } 
```
So i only keep a reference &amp;gt; i don't store them literally  inside one another. It's a flat data structure. In a dict. 

Now i want this to be transformed into:
```
type BlueBox = { id: Int, width: Int, orangeBoxes : List Int, geometryStuff: Dom.BoundingClientStuff }
type OrangeBox = { id: Int, height: Int, blueBoxes: List Int,  geometryStuff: Dom.BoundingClientStuff } 
```
And load this geometry in - somehow - after everything is rendered using this absolute/relative stuff i have.</text>
  </message>
  <message>
    <ts>2017-06-24T12:46:12.574136</ts>
    <user>U0JFGGZS6</user>
    <text>it seems like you could trigger the port cmd to update the dimensions on those 2 actions you mention (adding a new box and expanding a row).</text>
  </message>
  <message>
    <ts>2017-06-24T12:47:53.579919</ts>
    <user>U0JFGGZS6</user>
    <text>If the dimensions of the new box are fixed, and expanding a row is a pixel at a time etc., you could check for collisions ahead of time - no?</text>
  </message>
  <message>
    <ts>2017-06-24T12:48:47.582971</ts>
    <user>U2LAL86AY</user>
    <text>ok. i need to go for a few minutes, but i'm back real soon - that souds interesting - not sure if i got it yet.</text>
  </message>
  <message>
    <ts>2017-06-24T12:49:08.584102</ts>
    <user>U0JFGGZS6</user>
    <text>interesting looking project...</text>
  </message>
  <message>
    <ts>2017-06-24T12:50:53.590252</ts>
    <user>U0F01KLV6</user>
    <text>Reducing code size even without minifying.</text>
  </message>
  <message>
    <ts>2017-06-24T13:03:36.634348</ts>
    <user>U0GPGFQQY</user>
    <text>is it an option to fix the dimensions and then calculate the positioning?</text>
  </message>
  <message>
    <ts>2017-06-24T13:03:52.635238</ts>
    <user>U0GPGFQQY</user>
    <text>you seem to keep the size somewhere because you allow resizing</text>
  </message>
  <message>
    <ts>2017-06-24T13:04:10.636463</ts>
    <user>U0GPGFQQY</user>
    <text>what if everything was positioned absolutely?</text>
  </message>
  <message>
    <ts>2017-06-24T13:11:40.662243</ts>
    <user>U2LAL86AY</user>
    <text>ok, i think i partially underestand what you say -
when having any action for creatiing stuff - you say to command a port to get the rendered stuff back.
So it goes like this: -&amp;gt;` i receive the message createBlueBox` -&amp;gt; `i add it to the model in a "not ready yet state" AND then send the port command.` -&amp;gt;` then in the view this new box get's rendered` - and `js listens for when this is rendered`. When this render happens - the `js sends me back the geometry info` -&amp;gt; `and i move the model in "ready/complete state"`

So the hole point is to have this intermediary step - where i render - and wait for js to give me back what i need.

What  was confusing at first - is that the first time the app loads -  i have many boxes not just one. 

But i will solve that by storing all this geometry information in firebase or something - and when it comes all at once - i already have all this info from before. So the problem then becomes - making sure that each box that i add - will get the the geometry information individually. And this is not that bad. I only need 2 ports i think. Hmm we will see - thanks so much for now :smiley: .

And no, - positioning everything absolutely i try to avoid that - because will require even more manual computation. I want to let the browser do as much as i can.
But maybe i will be forced to do that. I'm in experimenting phase now - not sure about anything yet.</text>
  </message>
  <message>
    <ts>2017-06-24T13:14:58.672898</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0JFGGZS6&gt; i'll keep you in the loop :smile:</text>
  </message>
  <message>
    <ts>2017-06-24T13:30:31.725614</ts>
    <user>U0GPGFQQY</user>
    <text>aion: good luck! ps you mentioned a wrong person</text>
  </message>
  <message>
    <ts>2017-06-24T13:40:12.758405</ts>
    <user>U2LAL86AY</user>
    <text>very true :smile: you too.</text>
  </message>
  <message>
    <ts>2017-06-24T14:14:28.873760</ts>
    <user>U5XQNLRLP</user>
    <text>Hello Everyone :smile:</text>
  </message>
  <message>
    <ts>2017-06-24T14:18:20.885789</ts>
    <user>U5XQNLRLP</user>
    <text>So I have a quick question for you folks. I am creating a game with elm and I am trying to figure out something. So i am creating an Hacking simulation game where my main app is an OS. I want to put buttons in where it allows me to open a small window within the page. I am not sure where to start with that.</text>
  </message>
  <message>
    <ts>2017-06-24T14:21:39.896588</ts>
    <user>U2LAL86AY</user>
    <text>how can i receive a `Result Error Success` type - inside my inbound port - instead of a normal type `string / list` . I mean i want js to tell me if i got a succes or error. And not use 2 different ports for that.</text>
  </message>
  <message>
    <ts>2017-06-24T14:22:46.900051</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U5XQNLRLP&gt; so this `small window within the page` - is just a normal div - that is styled to look like a window?</text>
  </message>
  <message>
    <ts>2017-06-24T14:26:03.910755</ts>
    <user>U0JFGGZS6</user>
    <text>what I was thinking was you might not need a "not ready" state for individual boxes, if the boxes are initialized to a fixed size, and you have the geometry of the rest of the boxes.</text>
  </message>
  <message>
    <ts>2017-06-24T14:26:13.911237</ts>
    <user>U5XQNLRLP</user>
    <text>So essential it will be like this.....You are in windows and you click on the chrome icon and chrome browser pops up. I will be able to do things within that window.</text>
  </message>
  <message>
    <ts>2017-06-24T14:27:26.915049</ts>
    <user>U5XQNLRLP</user>
    <text>I haven't officially started coding it yet. I am kind of making small plans and seeing if my ideas can actually work.</text>
  </message>
  <message>
    <ts>2017-06-24T14:29:06.920290</ts>
    <user>U0JFGGZS6</user>
    <text>`I receive the message CreateBlueBox` -&amp;gt;
`I check if it would collide with any existing box based on its default geometry` -&amp;gt;
`If so, handle the error case; if not, render the new box and send out a port request to re-fetch geometry`</text>
  </message>
  <message>
    <ts>2017-06-24T14:30:29.925409</ts>
    <user>U0JFGGZS6</user>
    <text>you'd just need a global "not ready" state for when you fetch the geometry of the first box</text>
  </message>
  <message>
    <ts>2017-06-24T14:35:16.941007</ts>
    <user>U2LAL86AY</user>
    <text>hmm - i made a mistake when i mention that i know the length of the orange boxes. I know it here - in this demo - i generated randomly as you can see  - but in reality will be calculated based on the text it contains. So there is no inititial/default geometry. 

A `Global not ready state` sounds like an interesting idea.  :smiley:</text>
  </message>
  <message>
    <ts>2017-06-24T14:35:41.942343</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U2LAL86AY&gt; Elm can automatically handle Maybe's coming from javascript (`null` turns into `Nothing`)</text>
  </message>
  <message>
    <ts>2017-06-24T14:36:03.943439</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;https://guide.elm-lang.org/interop/javascript.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T14:36:22.944420</ts>
    <user>U0JFGGZS6</user>
    <text>if that helps</text>
  </message>
  <message>
    <ts>2017-06-24T14:37:52.948900</ts>
    <user>U2LAL86AY</user>
    <text>Result allows for a string to be passed in, in the case of Error.. Maybe is just Nothing -&amp;gt; that's why i'm interested in Result type..</text>
  </message>
  <message>
    <ts>2017-06-24T14:37:57.949211</ts>
    <user>U0JFGGZS6</user>
    <text>ah ok</text>
  </message>
  <message>
    <ts>2017-06-24T14:39:06.953047</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U2LAL86AY&gt; you could pass in an `Decode.Value` and then decode it into a `Result`</text>
  </message>
  <message>
    <ts>2017-06-24T14:39:26.954198</ts>
    <user>U0JFGGZS6</user>
    <text>right, sometimes you don't care about the error message so Maybe would work.. if you need a Result yes exactly what coreyhaines said</text>
  </message>
  <message>
    <ts>2017-06-24T15:15:21.075014</ts>
    <user>U14Q8S4EM</user>
    <text>&lt;@U5XQNLRLP&gt; , I recently made this in Elm :  &lt;http://www.ct-os.us|www.ct-os.us&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T15:16:19.078087</ts>
    <user>U14Q8S4EM</user>
    <text>Sounds similar to what you are going for. I would be happy to share the code or tell you about it.</text>
  </message>
  <message>
    <ts>2017-06-24T15:21:16.093684</ts>
    <user>U5XQNLRLP</user>
    <text>&lt;@U14Q8S4EM&gt; That is exactly what I am looking for :smile:</text>
  </message>
  <message>
    <ts>2017-06-24T16:32:16.306487</ts>
    <user>U55CZT6T1</user>
    <text>Still wondering about measuring performance: a variant of Debug.log that would log a timestamp with each message would let me collect timings for critical parts of my program. Is something like this possible?</text>
  </message>
  <message>
    <ts>2017-06-24T16:34:25.312541</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U55CZT6T1&gt; no, but there is &lt;http://package.elm-lang.org/packages/BrianHicks/elm-benchmark/latest&gt; if you suspect something is slow</text>
  </message>
  <message>
    <ts>2017-06-24T16:40:46.330368</ts>
    <user>U55CZT6T1</user>
    <text>&lt;@U1CE9DL9H&gt; : Thanks!</text>
  </message>
  <message>
    <ts>2017-06-24T16:47:54.349604</ts>
    <user>U2D7NUGS1</user>
    <text>Hello, good folks! Is there a way of setting custom HTML attribute to a boolean value (i.e. `true` or `false` instead of string `"true"` or `"false"`)? I'm fighting with Polymer custom elements and their attributes and string doesn't do the trick.</text>
  </message>
  <message>
    <ts>2017-06-24T16:49:05.352650</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U2D7NUGS1&gt; what are you using now?</text>
  </message>
  <message>
    <ts>2017-06-24T16:49:52.354604</ts>
    <user>U1CE9DL9H</user>
    <text>because `property "x" "false"` will produce `x=false` (so no qoutes)</text>
  </message>
  <message>
    <ts>2017-06-24T16:50:36.356915</ts>
    <user>U2D7NUGS1</user>
    <text>Hmm... let me check it. Maybe the problem is elsewhere.</text>
  </message>
  <message>
    <ts>2017-06-24T16:54:42.367513</ts>
    <user>U5Z6J0VNJ</user>
    <text>Three problem might be that the HTML spec only allows strings for attribute values. I believe the previous elm diff patch was vdom and there are issues reported against the vdom library asking for the same.

&lt;https://www.w3.org/TR/html51/syntax.html#elements-attributes&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T16:55:47.370577</ts>
    <user>U5Z6J0VNJ</user>
    <text>Im not being definitive here wrt elm... Just trying to add some hopefully helpful context I've seen in other libraries</text>
  </message>
  <message>
    <ts>2017-06-24T16:56:21.371967</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U1CE9DL9H&gt; are you sure? I'm trying it on standard `main` like that: ```
view : Model -&amp;gt; Html Msg
view model =
    main_
        [ attribute "test" "true" ]
        []
``` and in chrome I see: ```
&amp;lt;main test="true"&amp;gt;&amp;lt;/main&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-06-24T16:57:29.375134</ts>
    <user>U1CE9DL9H</user>
    <text>hmm, right</text>
  </message>
  <message>
    <ts>2017-06-24T16:59:33.381022</ts>
    <user>U1CE9DL9H</user>
    <text>so, &lt;https://github.com/elm-lang/html/blob/2.0.0/src/Html/Attributes.elm#L177&gt; has a `boolProperty` function</text>
  </message>
  <message>
    <ts>2017-06-24T17:00:19.383899</ts>
    <user>U1CE9DL9H</user>
    <text>I think that is what you want to replicate that using &lt;http://package.elm-lang.org/packages/elm-lang/virtual-dom/2.0.4/VirtualDom#property&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T17:04:38.396857</ts>
    <user>U2D7NUGS1</user>
    <text>Mhm... it's not exposed and looks like an internal helper. How would I use it?</text>
  </message>
  <message>
    <ts>2017-06-24T17:04:52.397522</ts>
    <user>U1CE9DL9H</user>
    <text>replicate it</text>
  </message>
  <message>
    <ts>2017-06-24T17:05:18.398877</ts>
    <user>U2D7NUGS1</user>
    <text>But I think it will still output quoted value, wouldn't it?</text>
  </message>
  <message>
    <ts>2017-06-24T17:06:39.402289</ts>
    <user>U1CE9DL9H</user>
    <text>I think it wouldn't</text>
  </message>
  <message>
    <ts>2017-06-24T17:07:07.403417</ts>
    <user>U2D7NUGS1</user>
    <text>Ok, let me try.</text>
  </message>
  <message>
    <ts>2017-06-24T17:08:34.407230</ts>
    <user>U1CE9DL9H</user>
    <text>wait, this is for something else, like things that are present or not</text>
  </message>
  <message>
    <ts>2017-06-24T17:08:50.407918</ts>
    <user>U1CE9DL9H</user>
    <text>like `hidden` or `selected`, that's not what you want right?</text>
  </message>
  <message>
    <ts>2017-06-24T17:10:28.412374</ts>
    <user>U2D7NUGS1</user>
    <text>Actually this would work too.</text>
  </message>
  <message>
    <ts>2017-06-24T17:12:47.418384</ts>
    <user>U2D7NUGS1</user>
    <text>Yeah, this does the job: ```
opened : Bool -&amp;gt; Html.Attribute msg
opened value =
    property "opened" (Json.Encode.bool value)
```</text>
  </message>
  <message>
    <ts>2017-06-24T17:13:19.419800</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks &lt;@U1CE9DL9H&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T17:13:39.420600</ts>
    <user>U1CE9DL9H</user>
    <text>cool</text>
  </message>
  <message>
    <ts>2017-06-24T17:16:39.428232</ts>
    <user>U2D7NUGS1</user>
    <text>Now I just need to figure out how to decode custom event `opened-changed` from `app-drawer`. Is there a way to print raw event data to console? I guess `Debug.log` but how?</text>
  </message>
  <message>
    <ts>2017-06-24T17:17:57.431486</ts>
    <user>U1CE9DL9H</user>
    <text>yes, you'll need to use &lt;http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Events#on&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T17:21:18.440092</ts>
    <user>U1CE9DL9H</user>
    <text>then use the &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Decode#value&gt; like `Decode.map (Debug.log "event data") Decode.value`</text>
  </message>
  <message>
    <ts>2017-06-24T17:21:26.440385</ts>
    <user>U1CE9DL9H</user>
    <text>and that will print the complete object</text>
  </message>
  <message>
    <ts>2017-06-24T17:33:21.471033</ts>
    <user>U2D7NUGS1</user>
    <text>Lost connectivity for a while.</text>
  </message>
  <message>
    <ts>2017-06-24T17:34:25.473876</ts>
    <user>U2D7NUGS1</user>
    <text>I assume I have to pass the `Decode.Value` to my `Msg`, and then `Debug.log` in the `update`. Right?</text>
  </message>
  <message>
    <ts>2017-06-24T17:34:30.474064</ts>
    <user>U2D7NUGS1</user>
    <text>Or is there a better way?</text>
  </message>
  <message>
    <ts>2017-06-24T17:34:48.474842</ts>
    <user>U1CE9DL9H</user>
    <text>do you have some NoOp in your `Msg`?</text>
  </message>
  <message>
    <ts>2017-06-24T17:35:05.475544</ts>
    <user>U2D7NUGS1</user>
    <text>Oh, not yet. Good idea!</text>
  </message>
  <message>
    <ts>2017-06-24T17:36:24.478949</ts>
    <user>U2D7NUGS1</user>
    <text>Then where should I put the call to `Debug.log`?</text>
  </message>
  <message>
    <ts>2017-06-24T17:37:09.480773</ts>
    <user>U2D7NUGS1</user>
    <text>In the `view`? I feel these are silly questions, but I'm still wrapping my head around Elm (and FP).</text>
  </message>
  <message>
    <ts>2017-06-24T17:37:15.481085</ts>
    <user>U1CE9DL9H</user>
    <text>before turning to NoOp</text>
  </message>
  <message>
    <ts>2017-06-24T17:37:51.482548</ts>
    <user>U1CE9DL9H</user>
    <text>so `Decode.map ((\_ -&amp;gt; NoOp) &amp;lt;&amp;lt; Debug.log "event data") Decode.value`</text>
  </message>
  <message>
    <ts>2017-06-24T17:38:19.483898</ts>
    <user>U2D7NUGS1</user>
    <text>Like that: `on "opened-changed" (Decode.map ((\_ -&amp;gt; NoOp) &amp;lt;&amp;lt; Debug.log "event data") Decode.value)`?</text>
  </message>
  <message>
    <ts>2017-06-24T17:38:36.484590</ts>
    <user>U1CE9DL9H</user>
    <text>yup</text>
  </message>
  <message>
    <ts>2017-06-24T17:41:06.490700</ts>
    <user>U2D7NUGS1</user>
    <text>:shit: I must have broke something else. I'm getting `Maximum call stack size exceeded`. Let me figure this out first and I'll get back with the results.</text>
  </message>
  <message>
    <ts>2017-06-24T17:41:18.491159</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks for your help so far.</text>
  </message>
  <message>
    <ts>2017-06-24T17:43:21.495739</ts>
    <user>U57KYFW67</user>
    <text>Elm doesn't try to emulate tail recursion, does it?</text>
  </message>
  <message>
    <ts>2017-06-24T17:43:34.496228</ts>
    <user>U57KYFW67</user>
    <text>I came across that the other day</text>
  </message>
  <message>
    <ts>2017-06-24T17:43:42.496500</ts>
    <user>U1CE9DL9H</user>
    <text>it does</text>
  </message>
  <message>
    <ts>2017-06-24T17:44:06.497425</ts>
    <user>U57KYFW67</user>
    <text>maybe my issue was something else then.</text>
  </message>
  <message>
    <ts>2017-06-24T17:44:21.498169</ts>
    <user>U0GPGFQQY</user>
    <text>tactics40: &lt;https://evancz.gitbooks.io/functional-programming-in-elm/recursion/tail-call-elimination.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T17:45:05.499921</ts>
    <user>U57KYFW67</user>
    <text>thanks.</text>
  </message>
  <message>
    <ts>2017-06-24T17:47:20.505486</ts>
    <user>U0JFGGZS6</user>
    <text>lazurski I've gotten that too, I think because the event object contains circular references... there may be a way with `Decode.lazy`</text>
  </message>
  <message>
    <ts>2017-06-24T17:48:24.508422</ts>
    <user>U1CE9DL9H</user>
    <text>isn't there just some documentation for the event you want to decode?</text>
  </message>
  <message>
    <ts>2017-06-24T17:48:56.509855</ts>
    <user>U0JFGGZS6</user>
    <text>:point_up:</text>
  </message>
  <message>
    <ts>2017-06-24T17:51:10.515878</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U0JFGGZS6&gt; that's likely. &lt;@U1CE9DL9H&gt; doesn't look that way, unless you call this a documentation: &lt;https://www.webcomponents.org/element/PolymerElements/app-layout/app-drawer#event-opened-changed&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T17:51:47.517522</ts>
    <user>U2D7NUGS1</user>
    <text>I've briefly googled it and figured I can just try to see for myself.</text>
  </message>
  <message>
    <ts>2017-06-24T17:52:08.518508</ts>
    <user>U2D7NUGS1</user>
    <text>I guess I just `console.log` it in javascript land.</text>
  </message>
  <message>
    <ts>2017-06-24T17:52:18.518979</ts>
    <user>U1CE9DL9H</user>
    <text>so, what do you actually want to do with that event?</text>
  </message>
  <message>
    <ts>2017-06-24T17:52:47.520173</ts>
    <user>U2D7NUGS1</user>
    <text>I need to know what the change was (opened or closed) to update my model accordingly.</text>
  </message>
  <message>
    <ts>2017-06-24T17:53:35.522175</ts>
    <user>U2D7NUGS1</user>
    <text>Maybe I can just assume that it's in sync and do `{ model | drawerOpened = not model.drawerOpened }` but it doesn't seem safe.</text>
  </message>
  <message>
    <ts>2017-06-24T17:54:02.523347</ts>
    <user>U2D7NUGS1</user>
    <text>I'd prefer to extract it from the event.</text>
  </message>
  <message>
    <ts>2017-06-24T17:54:21.524208</ts>
    <user>U1CE9DL9H</user>
    <text>yea that makes sense</text>
  </message>
  <message>
    <ts>2017-06-24T17:54:41.525082</ts>
    <user>U1CE9DL9H</user>
    <text>guess  a quick trip to the js console is the quickest option</text>
  </message>
  <message>
    <ts>2017-06-24T17:59:38.538293</ts>
    <user>U2D7NUGS1</user>
    <text>Yeah, got it. Thanks again &lt;@U1CE9DL9H&gt; and &lt;@U0JFGGZS6&gt;. Now off to learn about `Json.Decode` :smile:</text>
  </message>
  <message>
    <ts>2017-06-24T18:00:39.542071</ts>
    <user>U1CE9DL9H</user>
    <text>the source code for events might be helpful &lt;https://github.com/elm-lang/html/blob/2.0.0/src/Html/Events.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T18:02:14.546957</ts>
    <user>U2D7NUGS1</user>
    <text>Yeah, good tip.</text>
  </message>
  <message>
    <ts>2017-06-24T18:03:03.549071</ts>
    <user>U2D7NUGS1</user>
    <text>If I know the exact path do I still need to worry about circular references in the object I am decoding ?</text>
  </message>
  <message>
    <ts>2017-06-24T18:03:58.551558</ts>
    <user>U1CE9DL9H</user>
    <text>I don't think so</text>
  </message>
  <message>
    <ts>2017-06-24T18:04:19.552667</ts>
    <user>U1CE9DL9H</user>
    <text>but only one way to find out :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-24T18:05:03.554618</ts>
    <user>U2D7NUGS1</user>
    <text>:construction_worker:</text>
  </message>
  <message>
    <ts>2017-06-24T18:29:20.614965</ts>
    <user>U2D7NUGS1</user>
    <text>My drawer works like a charm :thumbsup: You were right about Events module source code &lt;@U1CE9DL9H&gt;.</text>
  </message>
  <message>
    <ts>2017-06-24T19:48:07.802518</ts>
    <user>U5XHTBFS6</user>
    <text>Hi yall, any easy way to *encode* a data structure given its *decoder*?</text>
  </message>
  <message>
    <ts>2017-06-24T19:59:45.827912</ts>
    <user>U0JFGGZS6</user>
    <text>haven't used it at all but this came around a while back.  &lt;http://package.elm-lang.org/packages/prozacchiwawa/elm-json-codec/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T20:02:41.836654</ts>
    <user>U5XHTBFS6</user>
    <text>Hmmm looks interesting. thanks &lt;@U0JFGGZS6&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T20:48:00.940109</ts>
    <user>U0EUHKVGB</user>
    <text>json-to-elm can do that for you</text>
  </message>
  <message>
    <ts>2017-06-24T22:55:40.216045</ts>
    <user>U5XHTBFS6</user>
    <text>wow that's very handy</text>
  </message>
  <message>
    <ts>2017-06-24T22:57:25.219124</ts>
    <user>U5XHTBFS6</user>
    <text>But I do feel that having to create separate encoders and decoders could be better abstracted, such as that elm-json-codec project above</text>
  </message>
  <message>
    <ts>2017-06-24T23:09:10.242989</ts>
    <user>U5XHTBFS6</user>
    <text>How to use the browser's local storage from elm? I can't find any packages on elm-package for that. I did find this repo, but it doesn't seem to be elm-package installable: &lt;https://github.com/gdotdesign/elm-storage&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T23:14:18.252725</ts>
    <user>U0JFGGZS6</user>
    <text>ports, at the moment</text>
  </message>
  <message>
    <ts>2017-06-24T23:17:18.258696</ts>
    <user>U0JFGGZS6</user>
    <text>rfeldman's SPA example I found extremely useful to look at.  
&lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm&gt;
&lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Ports.elm&gt;
&lt;https://github.com/rtfeldman/elm-spa-example/blob/master/index.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T23:18:55.261720</ts>
    <user>U5XHTBFS6</user>
    <text>thanks &lt;@U0JFGGZS6&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T03:34:20.749425</ts>
    <user>U2D7NUGS1</user>
    <text>Hello! I want to fork and hack on an Elm library simultaneously with building my application and eventually PR the upstream repo. How would I set this up locally? In NPM land I would use `npm link`. Are there any established practices for Elm?</text>
  </message>
  <message>
    <ts>2017-06-25T03:37:59.755963</ts>
    <user>U3SJEDR96</user>
    <text>you could use `elm_self_publish.py` found here: &lt;https://github.com/NoRedInk/elm-ops-tooling&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T03:38:14.756466</ts>
    <user>U3SJEDR96</user>
    <text>which allows you to locally install a package into another package</text>
  </message>
  <message>
    <ts>2017-06-25T03:38:42.757362</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks &lt;@U3SJEDR96&gt;. Let me take a look.</text>
  </message>
  <message>
    <ts>2017-06-25T03:44:48.768203</ts>
    <user>U2D7NUGS1</user>
    <text>Related question: is there a way to install forked Elm pacakge from git repo, like NPM can do?</text>
  </message>
  <message>
    <ts>2017-06-25T03:45:06.768822</ts>
    <user>U2D7NUGS1</user>
    <text>I see this &lt;https://github.com/gdotdesign/elm-github-install&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T03:45:39.769999</ts>
    <user>U2D7NUGS1</user>
    <text>Can I do it with standard Elm tools?</text>
  </message>
  <message>
    <ts>2017-06-25T03:48:01.774253</ts>
    <user>U3SJEDR96</user>
    <text>Nope, standard elm package can't do that - since then all limitations like "no packages with native" are essentially out of the window...</text>
  </message>
  <message>
    <ts>2017-06-25T03:52:12.781684</ts>
    <user>U2D7NUGS1</user>
    <text>Hmm. Ok. I'll try simply link forked library's `src/` into my app's `src/` and see how it flies. I'm using `elm-live` for my app development and would like to preserve the rebuild on save for the library as well.</text>
  </message>
  <message>
    <ts>2017-06-25T04:13:38.827323</ts>
    <user>U3SJEDR96</user>
    <text>Then you could add a `vendor` library, clone the project in there, and add `vendor/somelib/src` to the `source-directories` of your `elm-package.json`</text>
  </message>
  <message>
    <ts>2017-06-25T04:13:56.827833</ts>
    <user>U3SJEDR96</user>
    <text>though, take care, because that allows using the non-exposed modules from that library, too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T07:09:22.180703</ts>
    <user>U2LAL86AY</user>
    <text>rcook: check this out -  very nice intro : &lt;https://elmseeds.thaterikperson.com/elm-benchmark&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T07:12:29.187374</ts>
    <user>U2LAL86AY</user>
    <text>hmm it is possible to use decoder pipeline - with NO TYPE ALIAS for a record? do I have to build all this type aliases if i have objects inside objects??</text>
  </message>
  <message>
    <ts>2017-06-25T07:14:37.191514</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; `decode (\name age occupation -&amp;gt; { name = name, age = age, occupation = occupation })`</text>
  </message>
  <message>
    <ts>2017-06-25T07:14:53.191923</ts>
    <user>U3SJEDR96</user>
    <text>the type alias just gives you this constructor for free</text>
  </message>
  <message>
    <ts>2017-06-25T07:15:37.193734</ts>
    <user>U2LAL86AY</user>
    <text>ah! Yes lambda :purple_heart:</text>
  </message>
  <message>
    <ts>2017-06-25T07:53:13.271388</ts>
    <user>U2LAL86AY</user>
    <text>if i have a record with a filed that contains a union type - what can i do to it to send it to js / what is the best way to store union types in json ?!
Say i need them for firebase or something.
`{ field = IsRootNode 1 } ` =&amp;gt; Where `IsRootNode` is the union type constructor.</text>
  </message>
  <message>
    <ts>2017-06-25T07:55:23.275616</ts>
    <user>U1CE9DL9H</user>
    <text>one option is to do it the same way elm objects are represented in js: construct an json object that looks like `{ constructor : "IsRootNode", value : 1 } `</text>
  </message>
  <message>
    <ts>2017-06-25T08:02:44.293424</ts>
    <user>U2LAL86AY</user>
    <text>aha, that makes sense.  
And for decoding them back?
```
case constructor of 
   "IsRootNode" -&amp;gt; IsRootNode  -- But the constructor will generate different function types depending on how many arguments it has,
```
Will this play nice with the generic value? The arguments have different types - and there can be any number of arguments.</text>
  </message>
  <message>
    <ts>2017-06-25T08:03:48.295849</ts>
    <user>U2LAL86AY</user>
    <text>`{ field : IsRootNode 1 "someString" True }`</text>
  </message>
  <message>
    <ts>2017-06-25T08:05:07.298891</ts>
    <user>U2LAL86AY</user>
    <text>using a ~~list of values can work for encoding~~ - Edit: Only if they are the same type of value i guess.. But is not so clear to me how i use this list of values in the decoding step.</text>
  </message>
  <message>
    <ts>2017-06-25T08:07:55.305263</ts>
    <user>U1CE9DL9H</user>
    <text>you'll need to use `andThen` a lot, but it's possible</text>
  </message>
  <message>
    <ts>2017-06-25T08:09:38.309042</ts>
    <user>U2LAL86AY</user>
    <text>hmm ok, `possible` -&amp;gt;  that's the important part.  :smile: thanks. Guess this is not very recommended.?! - given that is harder to decode.</text>
  </message>
  <message>
    <ts>2017-06-25T08:09:54.309692</ts>
    <user>U1CE9DL9H</user>
    <text>it's the only way really</text>
  </message>
  <message>
    <ts>2017-06-25T08:10:32.311701</ts>
    <user>U2LAL86AY</user>
    <text>no, i mean is not recommended to store stuff inside union constructors?</text>
  </message>
  <message>
    <ts>2017-06-25T08:11:02.312767</ts>
    <user>U2LAL86AY</user>
    <text>seems to be better to keep them in normal records fields if possible.</text>
  </message>
  <message>
    <ts>2017-06-25T08:12:01.315073</ts>
    <user>U3SJEDR96</user>
    <text>I don't see the difference?</text>
  </message>
  <message>
    <ts>2017-06-25T08:12:45.316841</ts>
    <user>U3SJEDR96</user>
    <text>In a record, the fields are labeled, in a union tag, they're positional. When decoding, they're positional anyway... Anyway, you could do something like this: &lt;https://ellie-app.com/3zkrBCHtz39a1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T09:17:01.472243</ts>
    <user>U2LAL86AY</user>
    <text>regarding previous question, how can i make this `Decode.andThen` fit with the `Decode.Pipeline`? I have the `geometry` field after the filed with the `union decoder` - and it changes things a bit form what you provided there in ellie. &lt;@U3SJEDR96&gt;
```
(Pipeline.decode (\elementIdAndType geometry -&amp;gt; { elementIdAndType = elementIdAndType, geometry = geometry })
                    |&amp;gt; Pipeline.required "elementIdAndType" Decode.string
                            |&amp;gt;  Decode.andThen decodeElement - here decodeElement is the union decoder.

                    |&amp;gt; Pipeline.required "geometry" Decode.string --for now.
                )
```
:thinking_face:</text>
  </message>
  <message>
    <ts>2017-06-25T09:18:06.475443</ts>
    <user>U3SJEDR96</user>
    <text>add some parens, `|&amp;gt; Pipeline.required "elementIdAndType" (Decode.string |&amp;gt; Decode.andThen decodeElement)`</text>
  </message>
  <message>
    <ts>2017-06-25T09:25:45.495954</ts>
    <user>U2LAL86AY</user>
    <text>he he works :smile:</text>
  </message>
  <message>
    <ts>2017-06-25T09:28:25.503006</ts>
    <user>U5Z8CN2SZ</user>
    <text>hi all, has anyone experience with elm-plot?</text>
  </message>
  <message>
    <ts>2017-06-25T09:28:51.503998</ts>
    <user>U5Z8CN2SZ</user>
    <text>I am just wondering if histogram plots are possible with horizontal bars. Could not find hints in the docs.</text>
  </message>
  <message>
    <ts>2017-06-25T09:29:22.505319</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U5Z8CN2SZ&gt; there is an &lt;#C2W8GFQF9|elm-plot&gt; channel</text>
  </message>
  <message>
    <ts>2017-06-25T09:29:41.506121</ts>
    <user>U5Z8CN2SZ</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-06-25T09:36:11.523345</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U5Z8CN2SZ&gt; i'm sure this is a good tutorial &lt;https://elmseeds.thaterikperson.com/elm-plot&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T10:31:43.675163</ts>
    <user>U38FTJUPP</user>
    <text>Does anyone know a good elm-expressjs boilerplate? I was trying to do a small SPA with a small GraphQL server but I was wondering how to best organize my repo</text>
  </message>
  <message>
    <ts>2017-06-25T11:52:33.918397</ts>
    <user>U2LAL86AY</user>
    <text>what is necessary to do for elm to interact with the file system?
I just finished configuring `web-pack` for an older project - and i lost like 2-3 hours - jumping form one error to another. And i'm not the only one - i see all over i look in Github - ton of people commenting about this errors and showing different solutions.. it's a phenomena..

Complex  tools like `web-pack` will greatly benefit for being implemented in a language like elm. I know elm can't do that right now - but just want to get a glimpse of what are the major challendges that need to be overcomed for doing stuff like this.</text>
  </message>
  <message>
    <ts>2017-06-25T12:13:33.983671</ts>
    <user>U5YJVL3B7</user>
    <text>hello, can I turn a custom type into a `comparable` type?</text>
  </message>
  <message>
    <ts>2017-06-25T12:15:47.990345</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U5YJVL3B7&gt; No.</text>
  </message>
  <message>
    <ts>2017-06-25T12:16:53.993599</ts>
    <user>U5YJVL3B7</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-06-25T12:17:01.994002</ts>
    <user>U5YJVL3B7</user>
    <text>regarding list</text>
  </message>
  <message>
    <ts>2017-06-25T12:17:20.995202</ts>
    <user>U5YJVL3B7</user>
    <text>I'm building a `List a`</text>
  </message>
  <message>
    <ts>2017-06-25T12:17:32.995796</ts>
    <user>U5YJVL3B7</user>
    <text>and I need to upsert items from that list</text>
  </message>
  <message>
    <ts>2017-06-25T12:18:21.998339</ts>
    <user>U5YJVL3B7</user>
    <text>but in elm you don't update items right?</text>
  </message>
  <message>
    <ts>2017-06-25T12:18:26.998556</ts>
    <user>U5YJVL3B7</user>
    <text>should I build a new list?</text>
  </message>
  <message>
    <ts>2017-06-25T12:18:29.998683</ts>
    <user>U5YJVL3B7</user>
    <text>every time/</text>
  </message>
  <message>
    <ts>2017-06-25T12:26:08.021664</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U5YJVL3B7&gt; everything in elm is imutable - and you can't change that - check this article out : &lt;https://www.sitepoint.com/immutability-javascript/&gt;
There is no updating, anywhere in the real sense of the word.</text>
  </message>
  <message>
    <ts>2017-06-25T12:26:24.022525</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U5YJVL3B7&gt; There are helpers for updating items in elm-community/list-extra</text>
  </message>
  <message>
    <ts>2017-06-25T12:26:48.023732</ts>
    <user>U4F64AKQV</user>
    <text>Use them sparingly though because they actually need to create a new copy of your data</text>
  </message>
  <message>
    <ts>2017-06-25T12:29:30.032065</ts>
    <user>U4F64AKQV</user>
    <text>Regarding `comparable`, for most functions that accept a `comparable` there is a variant that accepts a `(a -&amp;gt; comparable)` function that allows you to “treat the elements as comparable” for the purposes of that function.</text>
  </message>
  <message>
    <ts>2017-06-25T12:30:11.034669</ts>
    <user>U4F64AKQV</user>
    <text>In practice, the lack of the ability to make custom types `comparable` is rarely a problem</text>
  </message>
  <message>
    <ts>2017-06-25T12:33:26.045910</ts>
    <user>U0FP80EKB</user>
    <text>As with everything, though, measure to make sure that the data structures are the problem. For example, in our system, we use lists as the underlying collection type for all our stuff, and we do a good amount of updating. We haven’t found the performance to be an issue. The list implementation is done well, so, unless you are holding A LOT of items in it, you probably won’t see a problem.</text>
  </message>
  <message>
    <ts>2017-06-25T12:34:24.048842</ts>
    <user>U0FP80EKB</user>
    <text>Also, it doesn’t actually have to update your data. If it is implemented as a traditional linked list, then it doesn’t even have to update the whole list, only those nodes that are before the updated one, keeping the ones after it the same exact ones.</text>
  </message>
  <message>
    <ts>2017-06-25T12:35:10.051382</ts>
    <user>U0FP80EKB</user>
    <text>For us, the uniformity and ease of working with lists makes it really nice, so we don’t have to think “oh, this is a `Dict`” or “oh, we used an `Array` here”. Of course, as with everything, YMMV</text>
  </message>
  <message>
    <ts>2017-06-25T12:37:34.059040</ts>
    <user>U0FP80EKB</user>
    <text>`List.Extra` has a nice `updateIf` function, that we use. It is also constructable from `List.map` if you don’t want to import `List.Extra`, although I’d recommend it. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T12:49:46.097630</ts>
    <user>U5YJVL3B7</user>
    <text>thanks &lt;@U4F64AKQV&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T12:50:02.098559</ts>
    <user>U5YJVL3B7</user>
    <text>now, let's say I have a chat app, which displays messages, like slack,</text>
  </message>
  <message>
    <ts>2017-06-25T12:50:25.100031</ts>
    <user>U5YJVL3B7</user>
    <text>every time a new message comes in, it's appended into the list of messages,</text>
  </message>
  <message>
    <ts>2017-06-25T12:50:41.100951</ts>
    <user>U5YJVL3B7</user>
    <text>assuming the chat box have millions of messages</text>
  </message>
  <message>
    <ts>2017-06-25T12:50:51.101518</ts>
    <user>U5YJVL3B7</user>
    <text>how efficient is to copy data each time?</text>
  </message>
  <message>
    <ts>2017-06-25T12:51:08.102390</ts>
    <user>U4F64AKQV</user>
    <text>Appending to the front should be constant time. </text>
  </message>
  <message>
    <ts>2017-06-25T12:51:31.103569</ts>
    <user>U4F64AKQV</user>
    <text>Or I guess I should just say "prepending"</text>
  </message>
  <message>
    <ts>2017-06-25T12:52:07.105519</ts>
    <user>U5YJVL3B7</user>
    <text>but it creates a copy anyway</text>
  </message>
  <message>
    <ts>2017-06-25T12:52:31.106623</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U5YJVL3B7&gt; it is a pretty standard linked list implementation. </text>
  </message>
  <message>
    <ts>2017-06-25T12:53:05.108280</ts>
    <user>U4F64AKQV</user>
    <text>Copying without modification is pretty fast iirc</text>
  </message>
  <message>
    <ts>2017-06-25T12:54:15.111663</ts>
    <user>U1CE9DL9H</user>
    <text>pretty sure the when you prepend, the tail is actually shared. At least in haskell, there are some further tricks to minimize actual copying</text>
  </message>
  <message>
    <ts>2017-06-25T12:55:01.113780</ts>
    <user>U5YJVL3B7</user>
    <text>ok, that makes sense</text>
  </message>
  <message>
    <ts>2017-06-25T12:57:10.120141</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, prepending is constant time</text>
  </message>
  <message>
    <ts>2017-06-25T12:58:40.124964</ts>
    <user>U48AEBJQ3</user>
    <text>Still, don't worry too much about lists unless you are experiencing actual problems. Refactoring to another data structure might take some time, but the compiler provides so much support that it is surprisingly safe.</text>
  </message>
  <message>
    <ts>2017-06-25T12:59:40.128052</ts>
    <user>U1CE9DL9H</user>
    <text>and updating the dom often takes orders of magnitude more time than data processing if you're not doing anything crazy</text>
  </message>
  <message>
    <ts>2017-06-25T13:09:20.160528</ts>
    <user>U0FP80EKB</user>
    <text>And, don’t mix up “making a copy of the list” with “making a copy of your data.”</text>
  </message>
  <message>
    <ts>2017-06-25T13:09:51.161929</ts>
    <user>U0FP80EKB</user>
    <text>So, if you replace a specific item in the list, nothing is actually copied.</text>
  </message>
  <message>
    <ts>2017-06-25T13:13:47.174059</ts>
    <user>U0FP80EKB</user>
    <text>The beauty of persistent data structures</text>
  </message>
  <message>
    <ts>2017-06-25T13:33:06.234360</ts>
    <user>U0JFGGZS6</user>
    <text>Upsert is kind of interesting to consider. Obviously Set or Dict would be preferable, but we'd lose the list order. Doing it with a list (List.Extra functions or a custom fold) is less than ideal.</text>
  </message>
  <message>
    <ts>2017-06-25T13:35:47.242573</ts>
    <user>U0JFGGZS6</user>
    <text>If you have a limited set of functions to do on your list, let's say just upsert and remove, you could write your own data structure that combines the best of both worlds.  I had a play around with doing this:  &lt;https://runelm.io/c/x5m&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T14:01:58.326394</ts>
    <user>U3YDBDP4Z</user>
    <text>How do people deal with authorization? I'm having so much trouble creating Route types where I can combine route with route privacy</text>
  </message>
  <message>
    <ts>2017-06-25T14:04:14.334728</ts>
    <user>U5YLMAM8X</user>
    <text>etected errors in 1 module.


-- NAMING ERROR ----------------------------------------------------------------

Cannot find type `Model`

25| update : Action -&amp;gt; Model -&amp;gt; Model
                      ^^^^^




-- NAMING ERROR ----------------------------------------------------------------

Cannot find type `Model`

25| update : Action -&amp;gt; Model -&amp;gt; Model</text>
  </message>
  <message>
    <ts>2017-06-25T14:04:28.335513</ts>
    <user>U5YLMAM8X</user>
    <text>please, what am i doing wrong...</text>
  </message>
  <message>
    <ts>2017-06-25T14:04:57.337029</ts>
    <user>U1CE9DL9H</user>
    <text>well, you don't define a `Model`</text>
  </message>
  <message>
    <ts>2017-06-25T14:05:21.338660</ts>
    <user>U1CE9DL9H</user>
    <text>at least, not as a type alias</text>
  </message>
  <message>
    <ts>2017-06-25T14:06:06.341076</ts>
    <user>U1CE9DL9H</user>
    <text>so you should add
```
type alias Model = { cat : Int } 

-- model
model : Model
model = 
  { cat = 1 }
```</text>
  </message>
  <message>
    <ts>2017-06-25T14:07:16.344646</ts>
    <user>U5YLMAM8X</user>
    <text>thanks, it works.</text>
  </message>
  <message>
    <ts>2017-06-25T14:09:18.350630</ts>
    <user>U1G51S63S</user>
    <text>what do you think is the better way to store data between outgoing port calls (I will need it in port callbacks at JS side) - global vars or store it on Elm side (`Json.Encode.Value`) and then pass to port?</text>
  </message>
  <message>
    <ts>2017-06-25T14:11:32.357982</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U1G51S63S&gt; what are you trying to do exactly?</text>
  </message>
  <message>
    <ts>2017-06-25T14:12:25.360931</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U1CE9DL9H&gt; google maps for example. I have 2 ports `loadMap` and `setMarkers`. second port will need `map` instance from first port</text>
  </message>
  <message>
    <ts>2017-06-25T14:13:11.363194</ts>
    <user>U1G51S63S</user>
    <text>so when map is initializing within `loadMap` callback - I will need to store `map` instance somewhere. I can put it into something like `window.map` or send back to elm side and store inside my model</text>
  </message>
  <message>
    <ts>2017-06-25T14:13:33.364341</ts>
    <user>U1G51S63S</user>
    <text>and I am trying to find more idiomatic way of doing it</text>
  </message>
  <message>
    <ts>2017-06-25T14:13:43.364782</ts>
    <user>U1CE9DL9H</user>
    <text>well that would absolutely be to store it in the model</text>
  </message>
  <message>
    <ts>2017-06-25T14:14:10.366047</ts>
    <user>U1CE9DL9H</user>
    <text>global variables and pure functional languages don't play well together</text>
  </message>
  <message>
    <ts>2017-06-25T14:14:33.367242</ts>
    <user>U1G51S63S</user>
    <text>but js is not functional and I will use it on js side only :smile:</text>
  </message>
  <message>
    <ts>2017-06-25T14:15:29.370562</ts>
    <user>U1CE9DL9H</user>
    <text>sure, but using elm more and js less - especially for managing state - sounds like the better idea</text>
  </message>
  <message>
    <ts>2017-06-25T14:16:21.373311</ts>
    <user>U1G51S63S</user>
    <text>yeah, sounds like a better way anyway :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T14:18:53.381419</ts>
    <user>U3YDBDP4Z</user>
    <text>Would it be a correct assumption that the `init` function usually resembles some branch of the `update` function as well?</text>
  </message>
  <message>
    <ts>2017-06-25T14:19:37.383724</ts>
    <user>U3YDBDP4Z</user>
    <text>Atleast that's the feeling I'm having :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T14:20:31.386816</ts>
    <user>U1CE9DL9H</user>
    <text>not always. if it's the case for you, create a separate function and call it from both init and update</text>
  </message>
  <message>
    <ts>2017-06-25T14:21:16.389155</ts>
    <user>U3YDBDP4Z</user>
    <text>Sure. Then it comes down to naming. That's the hardest part! :smile:</text>
  </message>
  <message>
    <ts>2017-06-25T14:21:43.390583</ts>
    <user>U3YDBDP4Z</user>
    <text>And where to keep this shared function</text>
  </message>
  <message>
    <ts>2017-06-25T14:55:22.500897</ts>
    <user>U0EUHKVGB</user>
    <text>`init` rarely looks like update</text>
  </message>
  <message>
    <ts>2017-06-25T14:56:08.503310</ts>
    <user>U0EUHKVGB</user>
    <text>It’s hard to say where things should go without knowing in what way they look similar :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T15:11:11.554568</ts>
    <user>U37HUSJ4R</user>
    <text>is there a simple way in Elm to tell if a date is today in elm?</text>
  </message>
  <message>
    <ts>2017-06-25T15:30:12.615649</ts>
    <user>U36C7SUAX</user>
    <text>&lt;@U37HUSJ4R&gt; Storing the current date in the model and comparing it in some function?</text>
  </message>
  <message>
    <ts>2017-06-25T15:49:09.674316</ts>
    <user>U2D7NUGS1</user>
    <text>Quick question: `import Polymer.Paper.IconButton as Paper.IconButton` gives me syntax error. Does it mean that I cannot have dot in a qualified import name?</text>
  </message>
  <message>
    <ts>2017-06-25T16:02:29.717517</ts>
    <user>U1CE9DL9H</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-25T16:42:26.843855</ts>
    <user>U57KYFW67</user>
    <text>Do `Cmd` ports have any access to which embedded Elm application called them?</text>
  </message>
  <message>
    <ts>2017-06-25T16:43:58.848245</ts>
    <user>U57KYFW67</user>
    <text>That is, if I have more than one Elm app embedded on the page (likely, two copies of the same Elm app), and the app makes use of a port, can I somehow find out which instance (ie, which DOM node is associated) sent a command to the port?</text>
  </message>
  <message>
    <ts>2017-06-25T16:51:06.870326</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks &lt;@U1CE9DL9H&gt;.</text>
  </message>
  <message>
    <ts>2017-06-25T16:59:59.896920</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U57KYFW67&gt; I would do that on the js side. When you subscribe to a port, you can build a function that contains an identifier of which elm app, something like (pseudo-code)
```
Elm.App1.subscribe("myPort1", buildHandler("App1"));
Elm.App2.subscribe("myPort2", buildHandler("App2"));

function buildHandler(appId) {
    return function(portData) { process(appId, portData); }
}
```
Definitely pseudo-code, but you can do something like that.</text>
  </message>
  <message>
    <ts>2017-06-25T17:01:46.903693</ts>
    <user>U57KYFW67</user>
    <text>I guess I could do that</text>
  </message>
  <message>
    <ts>2017-06-25T18:05:35.099796</ts>
    <user>U0FP80EKB</user>
    <text>As always, this could be an instance of the XY problem, so perhaps if you talked a bit more about what your problem is, there might be a different solution.</text>
  </message>
  <message>
    <ts>2017-06-25T18:09:49.112149</ts>
    <user>U57KYFW67</user>
    <text>I don't have any immediate problem to solve, but for my blog, I imagine having multiple elm applets running on a single page. Likely all close variants of each other, even being the same module with different parameters passed, as to build up to an idea I want to illustrate and talk about.</text>
  </message>
  <message>
    <ts>2017-06-25T18:09:49.112157</ts>
    <user>U0FP80EKB</user>
    <text>&lt;http://xyproblem.info/&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T18:10:37.114935</ts>
    <user>U0FP80EKB</user>
    <text>I would probably build my initial idea if I was looking for a way to specify which app’s port was firing.</text>
  </message>
  <message>
    <ts>2017-06-25T18:10:50.115474</ts>
    <user>U57KYFW67</user>
    <text>Yes, I know what the phrase means. I just think it's a bad term for the notion.</text>
  </message>
  <message>
    <ts>2017-06-25T18:11:11.116604</ts>
    <user>U0FP80EKB</user>
    <text>Alas, it is the term we have. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T18:11:55.118877</ts>
    <user>U0FP80EKB</user>
    <text>But, since the ports aren’t shared across apps, and you have to subscribe to them on the js side independently, I’d probably use my original idea</text>
  </message>
  <message>
    <ts>2017-06-25T18:12:09.119677</ts>
    <user>U0FP80EKB</user>
    <text>If I wanted to have a single function that handled them the same.</text>
  </message>
  <message>
    <ts>2017-06-25T18:13:25.123334</ts>
    <user>U57KYFW67</user>
    <text>Ahh. I forgot you have to wire them up manually anyway. Ack.</text>
  </message>
  <message>
    <ts>2017-06-25T18:13:52.124640</ts>
    <user>U57KYFW67</user>
    <text>Yeah. That's something I need to take into account with my design.</text>
  </message>
  <message>
    <ts>2017-06-25T18:16:14.131720</ts>
    <user>U0FP80EKB</user>
    <text>Alternatively, you could pass an identifier into the init function, have that includes in all port calls.</text>
  </message>
  <message>
    <ts>2017-06-25T18:16:24.132186</ts>
    <user>U0FP80EKB</user>
    <text>That strikes me as a bit over-complicated, though.</text>
  </message>
  <message>
    <ts>2017-06-25T18:16:36.132746</ts>
    <user>U0FP80EKB</user>
    <text>Also asks the elm app to be responsible for something that isn’t really relevant to itself</text>
  </message>
  <message>
    <ts>2017-06-25T18:19:21.141235</ts>
    <user>U57KYFW67</user>
    <text>Well, to be a little more concrete, I currently have a rough draft of a system where my blog posts are structured as xml files which specify which parts are Markdown and which parts are Elm, leaving me plenty of room to add things like LaTeX support, images, or other fun things</text>
  </message>
  <message>
    <ts>2017-06-25T18:19:53.142830</ts>
    <user>U57KYFW67</user>
    <text>It looks like `&amp;lt;elm module="Main"/&amp;gt;` right now, which pulls in `Main.js` (compiled from `Main.elm`) and `Main.ports.js` if it exists</text>
  </message>
  <message>
    <ts>2017-06-25T18:21:00.146425</ts>
    <user>U57KYFW67</user>
    <text>But it looks like I might need to actually try building something with multiple apps and non-trivial ports to see how I need to change my design.</text>
  </message>
  <message>
    <ts>2017-06-25T18:21:53.148995</ts>
    <user>U57KYFW67</user>
    <text>and the one really important use case I know I'm going to need is the ability to track mouse movement and mouse clicks relative to each app</text>
  </message>
  <message>
    <ts>2017-06-25T18:22:41.151150</ts>
    <user>U57KYFW67</user>
    <text>I got some suggestions on how to do this the other day, but it's finally time for me to code it.</text>
  </message>
  <message>
    <ts>2017-06-25T18:22:50.151555</ts>
    <user>U0FP80EKB</user>
    <text>sounds interesting.</text>
  </message>
  <message>
    <ts>2017-06-25T18:24:49.157289</ts>
    <user>U0EUHKVGB</user>
    <text>My advice is to not overthink it.</text>
  </message>
  <message>
    <ts>2017-06-25T18:24:58.157667</ts>
    <user>U0EUHKVGB</user>
    <text>Just dive in and you’ll find something that works.</text>
  </message>
  <message>
    <ts>2017-06-25T18:25:11.158404</ts>
    <user>U57KYFW67</user>
    <text>Indeed.</text>
  </message>
  <message>
    <ts>2017-06-25T18:26:20.161832</ts>
    <user>U57KYFW67</user>
    <text>But at the same time, I want to get to a point where I can just drag&amp;amp;drop my folder with the XML and the .js files (or ideally, the .elm files) and have it just kind of appear on my site</text>
  </message>
  <message>
    <ts>2017-06-25T18:26:42.162903</ts>
    <user>U57KYFW67</user>
    <text>The old way I was doing things made it so tedious to actually upload anything that I never bothered :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-25T18:49:09.230861</ts>
    <user>U57KYFW67</user>
    <text>What would you name a callback that subscribes to all the necessary ports... `subscribeToPorts()`? `installApplet()`? `wireItAllTogether()`?</text>
  </message>
  <message>
    <ts>2017-06-25T18:52:36.241668</ts>
    <user>U0EUHKVGB</user>
    <text>This counts as over-thinking it</text>
  </message>
  <message>
    <ts>2017-06-25T18:52:49.242386</ts>
    <user>U0EUHKVGB</user>
    <text>Go for whatever name makes best sense to you :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T18:53:13.243516</ts>
    <user>U0EUHKVGB</user>
    <text>I would personally go for `subscribeToPorts` if it’s only subscribing to ports, since the other two names don’t make it clear what’s happening.</text>
  </message>
  <message>
    <ts>2017-06-25T18:53:28.244252</ts>
    <user>U0EUHKVGB</user>
    <text>But naming is very subjective</text>
  </message>
  <message>
    <ts>2017-06-25T18:53:47.245083</ts>
    <user>U0EUHKVGB</user>
    <text>names can be changed later :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T19:01:58.271931</ts>
    <user>U57KYFW67</user>
    <text>it looks like app.ports will be undefined unless the module has at least one port. That seems like it should be useful.</text>
  </message>
  <message>
    <ts>2017-06-25T19:43:13.409297</ts>
    <user>U57KYFW67</user>
    <text>Well, I got the local mouse coordinates working pretty well. I just can't shake the nagging feeling that, ideally, this should all be expressible in pure elm code.</text>
  </message>
  <message>
    <ts>2017-06-25T19:46:35.421097</ts>
    <user>U57KYFW67</user>
    <text>It looks like the `elm-lang/mouse` library does it using the `Dom` module... but the `Dom` module looks a bit underdeveloped currently. At the very least, the embedded elm instance doesn't get a reference to the very DOM element it has been embedded in.</text>
  </message>
  <message>
    <ts>2017-06-25T19:47:06.422838</ts>
    <user>U0EUHKVGB</user>
    <text>Use a `mousemove` event.</text>
  </message>
  <message>
    <ts>2017-06-25T19:47:32.424431</ts>
    <user>U0EUHKVGB</user>
    <text>The mouse package is intended to be used for mouse position relative to the window.</text>
  </message>
  <message>
    <ts>2017-06-25T19:49:17.430102</ts>
    <user>U2SR9DL7Q</user>
    <text>hey everyone, does anyone have experience deploying an elm project on github pages?</text>
  </message>
  <message>
    <ts>2017-06-25T19:50:52.436433</ts>
    <user>U0EUHKVGB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-25T19:51:02.436972</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U2SR9DL7Q&gt; I’ve done it once. Since an Elm app is compiled into javascript, you can host both your html page and the js file and just include it as normal.</text>
  </message>
  <message>
    <ts>2017-06-25T19:51:06.437181</ts>
    <user>U0FP80EKB</user>
    <text>Are you running into issues?</text>
  </message>
  <message>
    <ts>2017-06-25T19:51:10.437399</ts>
    <user>U0EUHKVGB</user>
    <text>That’s how &lt;http://json2elm.com&gt; is hosted</text>
  </message>
  <message>
    <ts>2017-06-25T19:53:01.443673</ts>
    <user>U2SR9DL7Q</user>
    <text>yes. i made a small one pager with elm-mdl that holds a crude sample resume. i've been using elm reactor up till now. I followed these intructions &lt;https://jasonneylon.wordpress.com/2015/11/08/quickly-create-github-io-pages-for-your-elm-projects/&gt; to try it out on github pages but when i visit the site, I just get the default readme</text>
  </message>
  <message>
    <ts>2017-06-25T19:53:42.445964</ts>
    <user>U0FP80EKB</user>
    <text>If you are getting the default readme, then this is probably an issue with your configuration for github pages, rather than an elm issue.</text>
  </message>
  <message>
    <ts>2017-06-25T19:53:52.446520</ts>
    <user>U0FP80EKB</user>
    <text>I would recommend making a static index.html and have it just say “Hello, world”</text>
  </message>
  <message>
    <ts>2017-06-25T19:53:55.446634</ts>
    <user>U0FP80EKB</user>
    <text>Get that working first</text>
  </message>
  <message>
    <ts>2017-06-25T19:54:12.447627</ts>
    <user>U0FP80EKB</user>
    <text>Then, once you have that, you’ll know that you configuration is good. Then you can include the js file</text>
  </message>
  <message>
    <ts>2017-06-25T19:54:17.447942</ts>
    <user>U0EUHKVGB</user>
    <text>Follow this: &lt;https://pages.github.com/&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T19:54:26.448412</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;https://github.com/tkshill/tkshill.github.io&gt; is my repo. It's a bit raw. I threw everything up there (dont even have a proper gitignore yet)</text>
  </message>
  <message>
    <ts>2017-06-25T19:54:47.449588</ts>
    <user>U2SR9DL7Q</user>
    <text>i followed that for the github process i think. I'll take another look though.</text>
  </message>
  <message>
    <ts>2017-06-25T19:54:53.449942</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://tkshill.github.io/&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T19:54:53.449950</ts>
    <user>U0FP80EKB</user>
    <text>You’ll need to compile the js file</text>
  </message>
  <message>
    <ts>2017-06-25T19:54:56.450084</ts>
    <user>U0EUHKVGB</user>
    <text>works for me</text>
  </message>
  <message>
    <ts>2017-06-25T19:55:09.451008</ts>
    <user>U0EUHKVGB</user>
    <text>Yeah. You need to check in the compiled JS</text>
  </message>
  <message>
    <ts>2017-06-25T19:55:32.452561</ts>
    <user>U0FP80EKB</user>
    <text>Oh, this is the index.html that elm make generates</text>
  </message>
  <message>
    <ts>2017-06-25T19:55:33.452598</ts>
    <user>U0EUHKVGB</user>
    <text>You are deploying the _end_ result of your build process</text>
  </message>
  <message>
    <ts>2017-06-25T19:55:46.453295</ts>
    <user>U0FP80EKB</user>
    <text>That explains it</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:02.454328</ts>
    <user>U0FP80EKB</user>
    <text>So, looking at it, you did an `elm make` and checked in the index.html</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:05.454586</ts>
    <user>U0FP80EKB</user>
    <text>It is there and appears to be working fine</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:08.454753</ts>
    <user>U0EUHKVGB</user>
    <text>Oh, I see</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:10.454874</ts>
    <user>U2SR9DL7Q</user>
    <text>actually... yeah, it's working now. strange,</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:18.455363</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2SR9DL7Q&gt; The readme will always be the README</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:31.456210</ts>
    <user>U0EUHKVGB</user>
    <text>On the github repo page - it will never show index.html, it will show the README</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:32.456277</ts>
    <user>U0FP80EKB</user>
    <text>Although I’d highly recommend switching to something like `elm make Main.elm --out elm.js` and then include that in a static html page</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:40.456709</ts>
    <user>U2SR9DL7Q</user>
    <text>I... normally dislike when things start working and I don't know why.</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:41.456756</ts>
    <user>U0EUHKVGB</user>
    <text>You have to go to &lt;https://tkshill.github.io/&gt; to see the index.html</text>
  </message>
  <message>
    <ts>2017-06-25T19:56:59.457853</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/tkshill/tkshill.github.io&gt; -&amp;gt; README.md
&lt;https://tkshill.github.io/&gt; -&amp;gt; index.html</text>
  </message>
  <message>
    <ts>2017-06-25T19:57:52.461121</ts>
    <user>U2SR9DL7Q</user>
    <text>So... next I should compile to elm.js, and refer to that in my index.html file?</text>
  </message>
  <message>
    <ts>2017-06-25T19:57:59.461592</ts>
    <user>U0FP80EKB</user>
    <text>I’d recommend that</text>
  </message>
  <message>
    <ts>2017-06-25T19:58:25.463361</ts>
    <user>U0EUHKVGB</user>
    <text>Eh, you don’t really need to</text>
  </message>
  <message>
    <ts>2017-06-25T19:58:31.463789</ts>
    <user>U0FP80EKB</user>
    <text>Yeah, you don’t have to</text>
  </message>
  <message>
    <ts>2017-06-25T19:58:40.464319</ts>
    <user>U0FP80EKB</user>
    <text>If this is just a resume site like this, could be simpler to just keep index.html</text>
  </message>
  <message>
    <ts>2017-06-25T19:58:52.465125</ts>
    <user>U0FP80EKB</user>
    <text>But, if you are building something larger, could be good to separate them out.</text>
  </message>
  <message>
    <ts>2017-06-25T19:58:55.465287</ts>
    <user>U0EUHKVGB</user>
    <text>You can if you want to. It can be handy if you want to do some fancy html things like put stuff in the head.</text>
  </message>
  <message>
    <ts>2017-06-25T19:58:56.465336</ts>
    <user>U0FP80EKB</user>
    <text>But, of course, context</text>
  </message>
  <message>
    <ts>2017-06-25T19:59:14.466482</ts>
    <user>U2SR9DL7Q</user>
    <text>Cool. Thank you both. I've come to elm from a few years in python. And a few months dabbling in haskell but never managing to be very useful.</text>
  </message>
  <message>
    <ts>2017-06-25T19:59:18.466723</ts>
    <user>U0EUHKVGB</user>
    <text>But it’s not needed, and I personally avoid it unless I really need a seperate index.html :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T19:59:25.467145</ts>
    <user>U2SR9DL7Q</user>
    <text>the project will eventually expand.</text>
  </message>
  <message>
    <ts>2017-06-25T19:59:36.467929</ts>
    <user>U0FP80EKB</user>
    <text>Opengraph stuff, etc, in the head (as &lt;@U0EUHKVGB&gt; mentions) would need to have your own index.html that references the js</text>
  </message>
  <message>
    <ts>2017-06-25T19:59:58.469425</ts>
    <user>U0FP80EKB</user>
    <text>If you are just learning, I’d probably recommend it just as a next step.</text>
  </message>
  <message>
    <ts>2017-06-25T20:00:05.470725</ts>
    <user>U0FP80EKB</user>
    <text>Get used to that.</text>
  </message>
  <message>
    <ts>2017-06-25T20:00:51.474949</ts>
    <user>U2SR9DL7Q</user>
    <text>Elm is pretty brilliant (I've never enjoyed debugging before), but I'm new to serious web dev and front end design.</text>
  </message>
  <message>
    <ts>2017-06-25T20:01:09.476331</ts>
    <user>U0FP80EKB</user>
    <text>Welcome!</text>
  </message>
  <message>
    <ts>2017-06-25T20:01:14.476710</ts>
    <user>U0FP80EKB</user>
    <text>Elm is a great way to get into it.</text>
  </message>
  <message>
    <ts>2017-06-25T20:01:25.477559</ts>
    <user>U0FP80EKB</user>
    <text>I’ve been working in Elm for a little over a year now. Loving it.</text>
  </message>
  <message>
    <ts>2017-06-25T20:02:39.482926</ts>
    <user>U2SR9DL7Q</user>
    <text>My brief experience with javascript... gave me VBA flashbacks. elm reminds me of python from the practicality standpoint, but you know... delightfully static.</text>
  </message>
  <message>
    <ts>2017-06-25T20:03:46.487257</ts>
    <user>U0FP80EKB</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T20:04:05.488591</ts>
    <user>U0FP80EKB</user>
    <text>One of my first contracts was building an app in Excel in VBA :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T20:04:45.491394</ts>
    <user>U0FP80EKB</user>
    <text>Back in about 94. Built a small relational database. :slightly_smiling_face: (of course, we are getting into &lt;#C0CJ671HU|random&gt; channel territory here, so I’ll pause)</text>
  </message>
  <message>
    <ts>2017-06-25T20:05:21.493843</ts>
    <user>U2SR9DL7Q</user>
    <text>indeed, thank you again &lt;@U0FP80EKB&gt; and &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T20:05:40.495030</ts>
    <user>U0FP80EKB</user>
    <text>Oh, looking at your repo, might I recommend you pull everything into `Main.elm` for now. Don’t prematurely pull things out into `Types.elm` and `Views.elm`</text>
  </message>
  <message>
    <ts>2017-06-25T20:06:33.498384</ts>
    <user>U2SR9DL7Q</user>
    <text>I kind of really like pulling it apart though... it forced me to get used to the import system. and there's quite a bit on the way.</text>
  </message>
  <message>
    <ts>2017-06-25T20:07:25.501742</ts>
    <user>U2SR9DL7Q</user>
    <text>I originally wanted the resume to be a json file that i would decode, but i wasnt sure how to configure the http request when working locally</text>
  </message>
  <message>
    <ts>2017-06-25T20:09:22.508807</ts>
    <user>U2SR9DL7Q</user>
    <text>I figured out the decoders, but I typically work locally, and wasnt how the http requests would work to get to the file.</text>
  </message>
  <message>
    <ts>2017-06-25T20:09:36.509683</ts>
    <user>U0FP80EKB</user>
    <text>My one recommendation is to wait until things force you separate them out, so you get a sense of how you want to extract things. For example, I’m not a fan of the `Types.elm` `Views.elm` etc extractions. I prefer to extract modules around data structures.</text>
  </message>
  <message>
    <ts>2017-06-25T20:09:45.510138</ts>
    <user>U0EUHKVGB</user>
    <text>Use `python3 -m http.server` and serve the json locally.</text>
  </message>
  <message>
    <ts>2017-06-25T20:09:58.510979</ts>
    <user>U0FP80EKB</user>
    <text>So, prematurely picking an extraction style might calcify before developing the feeling for yourself.</text>
  </message>
  <message>
    <ts>2017-06-25T20:10:14.512352</ts>
    <user>U0FP80EKB</user>
    <text>But, as with everything, when you are learning, it is probably one of the lesser of important things. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T20:12:06.519879</ts>
    <user>U2SR9DL7Q</user>
    <text>I see your point. I read as many docs as I could on abstraction style before I started, and checked through some of the popular repos. In the end, this one seemed to make sense for this small project, but I'm not committed to keeping if if it grows a bit more.</text>
  </message>
  <message>
    <ts>2017-06-25T20:12:21.520916</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0FP80EKB&gt; do you have an example of the structure that you mentioned?</text>
  </message>
  <message>
    <ts>2017-06-25T20:13:24.524678</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0EUHKVGB&gt; I'll look into that.</text>
  </message>
  <message>
    <ts>2017-06-25T20:16:08.535133</ts>
    <user>U2SR9DL7Q</user>
    <text>for now, the elm type mimics the structure I'd like, but json will let me be a lot more flexible with the data (next step is looking into exporting a pdf from the site)</text>
  </message>
  <message>
    <ts>2017-06-25T20:17:00.538659</ts>
    <user>U0FP80EKB</user>
    <text>I don’t really have an example to show. But, I generally start with a file, then, start grouping the types and records and functions together that seem to work on a similar thing, then, eventually those move into a module with a name around the domain concept.</text>
  </message>
  <message>
    <ts>2017-06-25T20:17:08.539162</ts>
    <user>U0FP80EKB</user>
    <text>Let me look at your repo for a second</text>
  </message>
  <message>
    <ts>2017-06-25T20:18:27.544449</ts>
    <user>U0FP80EKB</user>
    <text>Just a cursory glance, i wouldn’t be surprised if I ended up with a `Resume.elm` that contained the type alias. That module would then contain the views associated with displaying it. It would also potentially include the decoders for pulling it out of the json.</text>
  </message>
  <message>
    <ts>2017-06-25T20:18:30.544631</ts>
    <user>U0FP80EKB</user>
    <text>That would be the start</text>
  </message>
  <message>
    <ts>2017-06-25T20:18:49.545787</ts>
    <user>U0FP80EKB</user>
    <text>Then, as it grew, I would start noticing other structures.</text>
  </message>
  <message>
    <ts>2017-06-25T20:19:14.547333</ts>
    <user>U0FP80EKB</user>
    <text>In this case, since it is a read-only thing, nothing too interactive, then you aren’t going to have a lot of functions associated with manipulating the resume. If there were, they would go there.</text>
  </message>
  <message>
    <ts>2017-06-25T20:19:30.548323</ts>
    <user>U0FP80EKB</user>
    <text>I like to group things together based on how related they are in the domain, rather than how related they are by programming language feature</text>
  </message>
  <message>
    <ts>2017-06-25T20:19:54.549981</ts>
    <user>U0FP80EKB</user>
    <text>When I’m going into the system to work on it, I’m usually thinking “I want to work on things around the Resume” rather than “I want to work on something with Types”</text>
  </message>
  <message>
    <ts>2017-06-25T20:20:02.550495</ts>
    <user>U0FP80EKB</user>
    <text>So, I like things related to Resume to be together</text>
  </message>
  <message>
    <ts>2017-06-25T20:20:34.552794</ts>
    <user>U2SR9DL7Q</user>
    <text>hmm. I'm so used to MVC architecture... so I immediately thought Model (core types), Views (views) with 'controller' facilitated by elm itself.</text>
  </message>
  <message>
    <ts>2017-06-25T20:20:47.553670</ts>
    <user>U0FP80EKB</user>
    <text>Understandable totally</text>
  </message>
  <message>
    <ts>2017-06-25T20:21:12.555367</ts>
    <user>U0FP80EKB</user>
    <text>This is why I mentioned pulling everything back into a single file until you feel the pressure to pull some stuff out into a module. It helps break out of other architectural mindsets.</text>
  </message>
  <message>
    <ts>2017-06-25T20:21:26.556340</ts>
    <user>U0FP80EKB</user>
    <text>If you think “I want to extract some modules” then old habits come in when there isn’t much guidance</text>
  </message>
  <message>
    <ts>2017-06-25T20:21:57.558513</ts>
    <user>U0FP80EKB</user>
    <text>I try to only extract a module when I am doing it as a form of refactoring.</text>
  </message>
  <message>
    <ts>2017-06-25T20:22:31.560882</ts>
    <user>U2SR9DL7Q</user>
    <text>Yeah. I think most of my mental resistance is just me considering the sunk costs of the time i spent figuring out how to pull it all out... which rationally, shouldn't weigh on my decision to pull back.</text>
  </message>
  <message>
    <ts>2017-06-25T20:22:49.561960</ts>
    <user>U0FP80EKB</user>
    <text>So, I have a bunch of functions that like 
```
resumeX
resumeY
doSomethingelseToResume
```
and I say to myself “that’s duplicate code, the knowledge that these work on Resume” so I eliminate that duplication by grouping them in `Resume.elm` and removing `Resume` from their name</text>
  </message>
  <message>
    <ts>2017-06-25T20:23:13.563555</ts>
    <user>U0FP80EKB</user>
    <text>Consider it that you’ve learned a lot about building modules and importing them. That skill will come in VERY handy when you extract something out for real</text>
  </message>
  <message>
    <ts>2017-06-25T20:23:36.565022</ts>
    <user>U0FP80EKB</user>
    <text>One of the great things about deleting learning stuff is that it almost always is less than optimal. If you delete it, then you don’t have to live with it later.</text>
  </message>
  <message>
    <ts>2017-06-25T20:23:52.566094</ts>
    <user>U0FP80EKB</user>
    <text>And who knows, you might end up liking that structure. It seems like there are people who do structure their stuff that way.</text>
  </message>
  <message>
    <ts>2017-06-25T20:24:25.568299</ts>
    <user>U0FP80EKB</user>
    <text>I’m a big fan of deleting things I’ve done and starting over</text>
  </message>
  <message>
    <ts>2017-06-25T20:24:53.570079</ts>
    <user>U0FP80EKB</user>
    <text>I even wrote a blog post about it. #shamelessplug &lt;http://articles.coreyhaines.com/posts/short-lived-branches&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T20:26:44.577028</ts>
    <user>U2SR9DL7Q</user>
    <text>that... gets easier with practice. one of the hang ups of the beginner life is that every line seems so much more precious. I spent hours understanding some of the pipes... I don't want to lose them. But what you're saying is exactly what I told my interns learning python for the first time.</text>
  </message>
  <message>
    <ts>2017-06-25T20:27:00.578085</ts>
    <user>U0FP80EKB</user>
    <text>:slightly_smiling_face: definitely</text>
  </message>
  <message>
    <ts>2017-06-25T20:27:57.581784</ts>
    <user>U0FP80EKB</user>
    <text>Well, I’m off to get a porter-infused milkshake. Welcome to Elm, &lt;@U2SR9DL7Q&gt; ! It is a wonderful way to write software!</text>
  </message>
  <message>
    <ts>2017-06-25T20:30:17.591874</ts>
    <user>U2SR9DL7Q</user>
    <text>for the first time, i dont feel like i'm stepping in a mine field learning web development &lt;@U0FP80EKB&gt; my brain is glad, my heart rejoices. have a good night.</text>
  </message>
  <message>
    <ts>2017-06-25T21:35:06.892578</ts>
    <user>U602PHK2S</user>
    <text>This is probably a question that has been beaten to death. Is there a good way to do drag and drop. Basicaly my interface looks like this (&lt;http://imgur.com/a/XYqBL&gt;) and I want to be able to drag (to reorder) the lists, as well as the list items, which can also be dragged between lists.</text>
  </message>
  <message>
    <ts>2017-06-25T21:47:02.952829</ts>
    <user>U17R26VR8</user>
    <text>there’s a couple of dragdrop packages on &lt;http://package.elm-lang.org/&gt;
otherwise you can always write your own like this:
&lt;https://github.com/mordrax/cotwelm/blob/master/src/Utils/DragDrop.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T21:48:12.958776</ts>
    <user>U17R26VR8</user>
    <text>mine was inspired by React DnD ( great design, very hard to debug errs… ), in contrast, i spent a few days 2 weeks into Elm to write it and it’s been solid ever since</text>
  </message>
  <message>
    <ts>2017-06-25T21:49:45.966628</ts>
    <user>U602PHK2S</user>
    <text>&lt;@U17R26VR8&gt; thanks, I fear is most example are only dragging on type of item and I have two (one being nested)</text>
  </message>
  <message>
    <ts>2017-06-25T21:49:52.967229</ts>
    <user>U602PHK2S</user>
    <text>so updating the model also seems difficult</text>
  </message>
  <message>
    <ts>2017-06-25T21:50:14.969363</ts>
    <user>U602PHK2S</user>
    <text>That's a problem outside of drag and drop though</text>
  </message>
  <message>
    <ts>2017-06-25T21:51:10.974129</ts>
    <user>U17R26VR8</user>
    <text>i drag items which are a union type, and inside, they hold composite records… the dragdrop module is flexible enough to allow different ‘types’ of things to be dragged</text>
  </message>
  <message>
    <ts>2017-06-25T21:52:06.979022</ts>
    <user>U17R26VR8</user>
    <text>e.g: &lt;https://github.com/mordrax/cotwelm/blob/b72efbb428a6d190ff8a8a9ba61638efa2b8e89e/src/Inventory.elm#L51&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T21:52:37.981707</ts>
    <user>U602PHK2S</user>
    <text>Alright, I'll take a look at it.</text>
  </message>
  <message>
    <ts>2017-06-25T21:52:53.983007</ts>
    <user>U17R26VR8</user>
    <text>then when you drop it off, you need to handle which ( of the two types ) you need to update in your model</text>
  </message>
  <message>
    <ts>2017-06-25T21:57:25.007016</ts>
    <user>U17R26VR8</user>
    <text>if you’re looking at my version, it might be useful to have a quick read of react-dnd, esp dragsource and droptarget, i found the concept to be really great and it would explain my code alot better than me or looking at the code ( &lt;https://react-dnd.github.io/react-dnd/docs-drag-source.html&gt; )</text>
  </message>
  <message>
    <ts>2017-06-25T21:58:09.010920</ts>
    <user>U17R26VR8</user>
    <text>it’s a layer that abstracts what you’re dragging (html) from where (source) to where (html) into what (target)</text>
  </message>
  <message>
    <ts>2017-06-25T21:58:24.012417</ts>
    <user>U602PHK2S</user>
    <text>okay, I'll give that a read too.</text>
  </message>
  <message>
    <ts>2017-06-25T21:59:16.017084</ts>
    <user>U602PHK2S</user>
    <text>I'm a little surprised this hasn't been abstracted into something painstakingly easy to do yet. I would think that it's such a common problem, it could be generalized over.</text>
  </message>
  <message>
    <ts>2017-06-25T21:59:47.019788</ts>
    <user>U17R26VR8</user>
    <text>check out the elm packages, there’s a few of them, i haven’t tried them yet, haven’t needed to</text>
  </message>
  <message>
    <ts>2017-06-25T22:05:37.053348</ts>
    <user>U602PHK2S</user>
    <text>will do</text>
  </message>
  <message>
    <ts>2017-06-25T23:42:18.529708</ts>
    <user>U3KSN5MAL</user>
    <text>does anyone have a clean way to write a msg where i can just specify what item in the model i want a textinput to update?</text>
  </message>
  <message>
    <ts>2017-06-25T23:42:54.532432</ts>
    <user>U3KSN5MAL</user>
    <text>i normally use ID's but i want something a bit more generic</text>
  </message>
  <message>
    <ts>2017-06-25T23:45:22.544116</ts>
    <user>U55CZT6T1</user>
    <text>Thanks!</text>
  </message>
  <message>
    <ts>2017-06-25T23:48:44.559748</ts>
    <user>U14Q8S4EM</user>
    <text>&lt;@U3KSN5MAL&gt;, I do something like `type Field = Username | Password` `Type Message = UpdateField Field String | ..`</text>
  </message>
  <message>
    <ts>2017-06-25T23:49:10.561592</ts>
    <user>U3KSN5MAL</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-06-25T23:50:23.567641</ts>
    <user>U3KSN5MAL</user>
    <text>so you would still have to specify a case in the update for explicit types</text>
  </message>
  <message>
    <ts>2017-06-25T23:52:16.576587</ts>
    <user>U3KSN5MAL</user>
    <text>thanks though</text>
  </message>
  <message>
    <ts>2017-06-26T04:04:32.315812</ts>
    <user>U2LAL86AY</user>
    <text>couple of days ago i asked here in chat - about a performance problem i had with the compiler.

I was having all my update logic directly inside my update function.
No helpers. Compilation took around 8-12 seconds on each save.

Now, i build this update helpers - and the compile time is almost ZERO.

So in my experience, it matters to not have everything inside update. (I don't have any big tuples - just some nested dict updates ). 
Anyway, i think is useful know this - especially if you notice it takes longer to compile. :simple_smile:</text>
  </message>
  <message>
    <ts>2017-06-26T04:15:38.450441</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, sometimes that works, sometimes that doesn't - there are a lot of factors that influence compile times, and those factors tend to shift around between releases :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T04:17:37.475468</ts>
    <user>U3SJEDR96</user>
    <text>sometimes you end up with a helpers file that is referenced basically everywhere, and that can actually slow you down because every module that uses it, needs to be recompiled whenever you touch those helpers... Having simple, clear functions that do one thing does tend to make life easier, though, and having `update` act as a dispatcher more than anything is always nice, lessens the mental burden, too</text>
  </message>
  <message>
    <ts>2017-06-26T04:22:42.540262</ts>
    <user>U2LAL86AY</user>
    <text>hmm interesting .. also i think if one puts the update helpers inside another module - and only use them in the update main module - no other places - the problem you say will be solved. 
And for the shared helpers - use a specialized `shared` module. So when working only with update logic - all other modules will not be impacted. good to know :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T05:13:34.233134</ts>
    <user>U4LKS2ZTR</user>
    <text>I have got an odd behaviour when using elm with Chrome (version 58.0.3029.110). I have a page that renders a dashboard by fetching a json using elm-rails. When I leave this page by clicking a link and then use the back-button to go back to the dashboard, I get the JSON and not the rendered page.  On safari this does not happen.</text>
  </message>
  <message>
    <ts>2017-06-26T05:21:32.341042</ts>
    <user>U3SJEDR96</user>
    <text>Heh, that is really weird. Fetching this JSON happens within your init, I suppose? (to verify your elm app gets started at all)</text>
  </message>
  <message>
    <ts>2017-06-26T05:46:25.677422</ts>
    <user>U5X2VC483</user>
    <text>Anyone working on adding effect types a'la Koka to Elm?</text>
  </message>
  <message>
    <ts>2017-06-26T05:51:21.741950</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U5X2VC483&gt; most likely not. Elm intentionally has a very simple type system</text>
  </message>
  <message>
    <ts>2017-06-26T05:52:55.762907</ts>
    <user>U5X2VC483</user>
    <text>Seeing that it already has row/label polymorphism for records inspired by Leijen it looks like the natural next step to to take</text>
  </message>
  <message>
    <ts>2017-06-26T05:53:11.766473</ts>
    <user>U5X2VC483</user>
    <text>The type system wouldn't need to be changed much</text>
  </message>
  <message>
    <ts>2017-06-26T05:54:13.779622</ts>
    <user>U1CE9DL9H</user>
    <text>elm is a little atypical: to add something to the language, an actual compelling use case is needed, rather than "it would not be a lot of work to add feature x". So, how would those effect types make creating interactive web apps easier/nicer?</text>
  </message>
  <message>
    <ts>2017-06-26T05:54:39.785307</ts>
    <user>U1CE9DL9H</user>
    <text>taking into consideration that the benefits have to outweigh that we have to teach beginners how it works</text>
  </message>
  <message>
    <ts>2017-06-26T05:55:32.796958</ts>
    <user>U1CE9DL9H</user>
    <text>The answer to those questions is not immediately clear for a lot of fancy type stuff, and so elm has put off extending the type system</text>
  </message>
  <message>
    <ts>2017-06-26T05:55:44.799874</ts>
    <user>U5X2VC483</user>
    <text>I just wondered if someone else besides me is interested in it</text>
  </message>
  <message>
    <ts>2017-06-26T05:59:03.843422</ts>
    <user>U3SJEDR96</user>
    <text>hadn't heard about koka before, looks like something I'll have to investigate</text>
  </message>
  <message>
    <ts>2017-06-26T06:00:09.859002</ts>
    <user>U57KYFW67</user>
    <text>It looked pretty neat. I remember seeing it a few years ago on reddit.</text>
  </message>
  <message>
    <ts>2017-06-26T06:01:03.872018</ts>
    <user>U57KYFW67</user>
    <text>I remember it had a particularly simple effect system. If any effect system would be Elm-ish, it would be that one.</text>
  </message>
  <message>
    <ts>2017-06-26T06:01:49.883425</ts>
    <user>U57KYFW67</user>
    <text>(In my experience, effect systems can very easily grow to to become monsters. I spent a few months learning DDC aka "Disciple" and... dear god)</text>
  </message>
  <message>
    <ts>2017-06-26T06:01:53.884362</ts>
    <user>U1CE9DL9H</user>
    <text>it looks neat on paper, are there examples of larger programs using the effects now?</text>
  </message>
  <message>
    <ts>2017-06-26T06:02:23.891710</ts>
    <user>U5X2VC483</user>
    <text>The madoko markdown editor is written in it</text>
  </message>
  <message>
    <ts>2017-06-26T06:02:43.896181</ts>
    <user>U5X2VC483</user>
    <text>(which was around already when the popl-paper was written)</text>
  </message>
  <message>
    <ts>2017-06-26T06:03:40.908716</ts>
    <user>U5X2VC483</user>
    <text>Here's the paper btw: &lt;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/algeff.pdf&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T06:07:06.952958</ts>
    <user>U1CE9DL9H</user>
    <text>any particular part of the editor that is interesting? most seems pure functions or IO</text>
  </message>
  <message>
    <ts>2017-06-26T06:52:22.477068</ts>
    <user>U2W22AHNU</user>
    <text>Hi there,</text>
  </message>
  <message>
    <ts>2017-06-26T06:53:08.485360</ts>
    <user>U2W22AHNU</user>
    <text>Got a question that Google isn't helping me with so far :slightly_smiling_face: I need to select all text when a text input get's focus. Can I do that in pure Elm or do I need to use a port for that?</text>
  </message>
  <message>
    <ts>2017-06-26T06:55:34.512826</ts>
    <user>U3SJEDR96</user>
    <text>I don't think there's a `setSelectionRange` type thing in Elm, triggering that over a port when an element gets focus is probably your best bet atm :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T07:05:35.627065</ts>
    <user>U2W22AHNU</user>
    <text>Thanks &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T10:38:27.165621</ts>
    <user>U4Z4NEUQG</user>
    <text>I'm diving in elm code after 2 week break, it's so easy to get back into, I don't need to re-create a full mental image of the app, I can just continue where I left.</text>
  </message>
  <message>
    <ts>2017-06-26T10:39:51.198324</ts>
    <user>U4Z4NEUQG</user>
    <text>I read there way no "official support", but do you know what is the elm browser support?</text>
  </message>
  <message>
    <ts>2017-06-26T10:40:40.217424</ts>
    <user>U4Z4NEUQG</user>
    <text>And if some browser is not supported, can we easily polyfill it? I saw somewhere that Object.assign was necessary.</text>
  </message>
  <message>
    <ts>2017-06-26T10:41:12.229666</ts>
    <user>U3SJEDR96</user>
    <text>Compiler compiles to ~ES3, mostly. RequestAnimationFrame is also used, but has a builtin fallback.</text>
  </message>
  <message>
    <ts>2017-06-26T10:42:30.259888</ts>
    <user>U3SJEDR96</user>
    <text>I don't think Object.assign is used at all, or at least not in core+vdom</text>
  </message>
  <message>
    <ts>2017-06-26T10:43:24.281000</ts>
    <user>U4Z4NEUQG</user>
    <text>Apparently it is used only in dev tools (searching the mailing list now). So I guess it's safe.</text>
  </message>
  <message>
    <ts>2017-06-26T10:44:41.311575</ts>
    <user>U4Z4NEUQG</user>
    <text>But I guess it would help to throw "wide browser support" somewhere on the elm home page. I am working with a lot of enterprises still under IE 9.</text>
  </message>
  <message>
    <ts>2017-06-26T10:45:17.326012</ts>
    <user>U41NK9BM4</user>
    <text>The bleeding edge, apparently</text>
  </message>
  <message>
    <ts>2017-06-26T10:46:13.348277</ts>
    <user>U3SJEDR96</user>
    <text>oh, indeed, elm-hot-loader (which I also encountered on my GH search) seems to be about the only thing, but that's only tangential anyway</text>
  </message>
  <message>
    <ts>2017-06-26T10:46:41.359548</ts>
    <user>U4Z4NEUQG</user>
    <text>Yeah</text>
  </message>
  <message>
    <ts>2017-06-26T10:54:46.554884</ts>
    <user>U1G51S63S</user>
    <text>Hi folks! What do you think is the best way to make a tree-like structure? I have this types ```type alias AreasTree =
    { id : String
    , name : String
    , path : String
    , children : AreasTreeChildren
    }


type AreasTreeChildren
    = AreasTreeChildren (List AreasTree)
```

and get just a plain list via API where `path` is a key like `a.b.c`</text>
  </message>
  <message>
    <ts>2017-06-26T10:55:15.566816</ts>
    <user>U1G51S63S</user>
    <text>at the end I want tree like AreasTree(a) -&amp;gt; children (AreasTree(b)) -&amp;gt; children(AreasTree(c))</text>
  </message>
  <message>
    <ts>2017-06-26T10:56:04.586657</ts>
    <user>U1G51S63S</user>
    <text>I think fold will fit my needs, but I am not sure what is the best way to put `c` for example into nested structure</text>
  </message>
  <message>
    <ts>2017-06-26T10:56:54.607981</ts>
    <user>U1G51S63S</user>
    <text>what I get from API is a list of ```type alias Area =
    { id : String
    , name : String
    , path : String
    }```</text>
  </message>
  <message>
    <ts>2017-06-26T11:20:54.210999</ts>
    <user>U0LPMPL2U</user>
    <text>You may find this useful: &lt;https://evancz.gitbooks.io/functional-programming-in-elm/recursion/binary-trees.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T11:21:13.218646</ts>
    <user>U0LPMPL2U</user>
    <text>particularly the section on insertion</text>
  </message>
  <message>
    <ts>2017-06-26T11:39:09.659864</ts>
    <user>U34MW57SN</user>
    <text>hi. So I have a bit of experience doing elm - have a few simple things in production but havent written elm in a few months. I would like to follow a series to nail the basics again and get onto much more advanced tutorials. Any recommendations (free is best)</text>
  </message>
  <message>
    <ts>2017-06-26T11:47:13.851493</ts>
    <user>U2W8J47KQ</user>
    <text>if you haven't done it already, I found &lt;https://www.elm-tutorial.org/en/&gt; to be very helpful</text>
  </message>
  <message>
    <ts>2017-06-26T12:12:28.447708</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; thanks, reading it already :thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-26T12:15:53.522551</ts>
    <user>U1T0RKXDX</user>
    <text>Hey everybody, I wanted to ask if some of you are from Slack, and if we could find a way to have a great slack plan to have access to history ?</text>
  </message>
  <message>
    <ts>2017-06-26T12:16:07.527243</ts>
    <user>U101G7VEX</user>
    <text>I'm interested in building an interactive map with Elm (like this &lt;https://dl.dropboxusercontent.com/s/ir26ue9lftzoqzr/2017-06-26%20at%2019.14.png&gt;) and I'm not really sure what the best approach would be. Has anyone done anything similar and can share some tips?</text>
  </message>
  <message>
    <ts>2017-06-26T12:35:05.945972</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0CK8CJ5D&gt;’s your person for maps in Elm :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T12:35:16.949825</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U1T0RKXDX&gt; We already have slack history</text>
  </message>
  <message>
    <ts>2017-06-26T12:35:23.952644</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U1T0RKXDX&gt; &lt;http://elmlang.slackarchive.io/&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T12:35:49.961561</ts>
    <user>U0EUHKVGB</user>
    <text>You have to invite the bot to the channel you wish to archive, via `/invite @archivebot`</text>
  </message>
  <message>
    <ts>2017-06-26T12:37:47.004065</ts>
    <user>U2MLC3R4G</user>
    <text>Hello all,
I need a little thoughts on the below code 
```
type Route
         = Companies
          | EditCompany String
route : Route
route = EditCompany "first"

&amp;lt;--After I set the route above How do I extract the "first" from variable route --&amp;gt;
&amp;lt;-- I did use a case like below --&amp;gt;

companyId = case route of
  EditCompany someString -&amp;gt; someString
  _ -&amp;gt; Debug.crash "this will never happened" &amp;lt;-- Is there another thing to use instead of Debug.crash here . Given we definitely know this will never happened.--&amp;gt;
```

I wonder what to use in the case that will never happened. like in the above example.
Now I could noly use Debug.crash</text>
  </message>
  <message>
    <ts>2017-06-26T12:38:26.018346</ts>
    <user>U0EUHKVGB</user>
    <text>You’re going to need to explain a bit more what thoughts you’d like to hear :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T12:39:08.033101</ts>
    <user>U101G7VEX</user>
    <text>&lt;@U0EUHKVGB&gt; It looks like this map thingy is doable with just CSS and SVG... &lt;https://www.youtube.com/watch?v=2TM63ing6jY&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T12:39:32.041690</ts>
    <user>U0EUHKVGB</user>
    <text>Yeah, that map would be pretty easy to make in Elm.</text>
  </message>
  <message>
    <ts>2017-06-26T12:39:46.046600</ts>
    <user>U101G7VEX</user>
    <text>it would?</text>
  </message>
  <message>
    <ts>2017-06-26T12:41:11.076530</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2MLC3R4G&gt;, please use ``` ``` for code blocks</text>
  </message>
  <message>
    <ts>2017-06-26T12:42:04.095595</ts>
    <user>U2MLC3R4G</user>
    <text>thank you &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T12:42:09.097302</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U101G7VEX&gt; Yep, very easy. Make the SVG shapes in an editor as they did, then use `elm-svg`: &lt;http://package.elm-lang.org/packages/elm-lang/svg/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T12:42:56.113543</ts>
    <user>U101G7VEX</user>
    <text>interesting, I'll look into it... thanks</text>
  </message>
  <message>
    <ts>2017-06-26T12:44:35.148083</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U2MLC3R4G&gt; the compiler can't guarantee that the other cases won't hapen</text>
  </message>
  <message>
    <ts>2017-06-26T12:45:42.171444</ts>
    <user>U0LPMPL2U</user>
    <text>same reason you need the `_` case here:
```
case 1 of
  1 -&amp;gt; "one"
  _ -&amp;gt; "other"
```</text>
  </message>
  <message>
    <ts>2017-06-26T12:46:11.181613</ts>
    <user>U2MLC3R4G</user>
    <text>Yes &lt;@U0LPMPL2U&gt;. What would we use instead of Debug.crash here. 
Do you have any alternatives. To make it compiles.</text>
  </message>
  <message>
    <ts>2017-06-26T12:46:12.181886</ts>
    <user>U5ABF3BH7</user>
    <text>hi everyone. I am getting a list ‘rolodexList’ from my decoder. From it I want to build my sub model location with the values I am getting to build the field hospitals, hospices, etc..  location should look like { location | hospitals = hospitals, hospices = hospices..}
The following code gives me an error that I have the same variable used twice in my let—in statement.  ```Types.LoadRolodexLists (Ok rolodexList) -&amp;gt;
    let
        hospitals =
            getInstitutions rolodexList "hospital"
        updatedLocation = Types.UpdateLocation (Location.ChgHospitals hospitals)

        hospices =
            getInstitutions rolodexList "hospice"
        updatedLocation = Types.UpdateLocation (Location.ChgHospices hospices)

  …….

    in
    ( { model | location = updatedLocation}, Cmd.none )```</text>
  </message>
  <message>
    <ts>2017-06-26T12:46:15.182998</ts>
    <user>U5ABF3BH7</user>
    <text>If I use different name, I will not get all the updates I need. 
How can I update the submodels in one shot?</text>
  </message>
  <message>
    <ts>2017-06-26T12:47:14.203165</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U2MLC3R4G&gt; based on the types, it looks like the case statement needs to return a string</text>
  </message>
  <message>
    <ts>2017-06-26T12:47:35.210937</ts>
    <user>U0LPMPL2U</user>
    <text>Is there some string that makes sense to return for that case?</text>
  </message>
  <message>
    <ts>2017-06-26T12:49:09.243831</ts>
    <user>U2MLC3R4G</user>
    <text>&lt;@U0LPMPL2U&gt; I might use some other strings. But If you use some strings there instead of Debug.crash "something".. 
Some reader might thinks that this branch will be possible to happen</text>
  </message>
  <message>
    <ts>2017-06-26T12:49:31.251964</ts>
    <user>U0LPMPL2U</user>
    <text>Hmm,  I think I see what you're trying to do. You want to get the string parameter out of the route?</text>
  </message>
  <message>
    <ts>2017-06-26T12:49:40.255033</ts>
    <user>U2MLC3R4G</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-26T12:50:01.262534</ts>
    <user>U0LPMPL2U</user>
    <text>Your problem is that `companyId` doesn't always exist. Only for certain routes</text>
  </message>
  <message>
    <ts>2017-06-26T12:50:24.271166</ts>
    <user>U5ZKYURNY</user>
    <text>hi all, I’d like to try to set focus on an input element but don’t care whether it succeeds or not, I know I could simply return the original model and Cmd.none in the update function for the result message but just curious is it possible to convert a Task to “Cmd Never”? So that I don’t need to handle the result message at all, something like ``` attemptIgnoreResult : Task x a -&amp;gt; Cmd Never ```</text>
  </message>
  <message>
    <ts>2017-06-26T12:50:25.271315</ts>
    <user>U0LPMPL2U</user>
    <text>The signature should probably be:
```
companyId -&amp;gt; Route -&amp;gt; Maybe String
```</text>
  </message>
  <message>
    <ts>2017-06-26T12:50:40.276580</ts>
    <user>U0LPMPL2U</user>
    <text>since the company id only exists in some cases</text>
  </message>
  <message>
    <ts>2017-06-26T12:51:34.295998</ts>
    <user>U0LPMPL2U</user>
    <text>Alternatively, have some top-level "dispatching" case statement that destructures all routes and then passes the unwrapped string into other functions</text>
  </message>
  <message>
    <ts>2017-06-26T12:55:43.385025</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U5ABF3BH7&gt;  are you sure those lines shouldn't be `updatedLocation = Types.updateLocation ...`  (i.e. you are calling the `updateLocation` function in `Types` correct?)</text>
  </message>
  <message>
    <ts>2017-06-26T12:56:08.394235</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5ZKYURNY&gt; no because `Html.program` expects your `update` function to return commands of the same type as the messages it takes as input</text>
  </message>
  <message>
    <ts>2017-06-26T12:56:25.400219</ts>
    <user>U0LPMPL2U</user>
    <text>`update : msg -&amp;gt; model -&amp;gt; ( model, Platform.Cmd.Cmd msg )`</text>
  </message>
  <message>
    <ts>2017-06-26T12:57:25.422362</ts>
    <user>U2MLC3R4G</user>
    <text>&lt;@U0LPMPL2U&gt; I could do that. But the laid down logic for the rest program have to change. I think I have to avoid your recommended function signature.
Workaround could be I could create another function and send it the route to get an id.
But as it's a functional language you should everything should return some value. It's not a good code to use Debug.crash to handle the never happen case.</text>
  </message>
  <message>
    <ts>2017-06-26T12:57:56.433525</ts>
    <user>U5ABF3BH7</user>
    <text>@ericgi, it is Types.UpdateLocation, it is a msg in my Types model (it is the upper model)</text>
  </message>
  <message>
    <ts>2017-06-26T12:58:29.445095</ts>
    <user>U2MLC3R4G</user>
    <text>@joeql I think. I could use the Never type. but after look into that. I didn't understand it well.  I think it's use with some Html Never. Html that doesn't has a message</text>
  </message>
  <message>
    <ts>2017-06-26T12:58:41.449397</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U2MLC3R4G&gt; right. I think the problem comes from the way your code is probably structured</text>
  </message>
  <message>
    <ts>2017-06-26T12:58:54.454311</ts>
    <user>U0LPMPL2U</user>
    <text>you probably want a top-level `case` that handles all possible routes</text>
  </message>
  <message>
    <ts>2017-06-26T12:59:19.463587</ts>
    <user>U0LPMPL2U</user>
    <text>now any sub functions can be passed the necessary strings or integers extracted from the current route</text>
  </message>
  <message>
    <ts>2017-06-26T12:59:47.473831</ts>
    <user>U0LPMPL2U</user>
    <text>and the routes don't get passed around to other functions</text>
  </message>
  <message>
    <ts>2017-06-26T13:02:27.535603</ts>
    <user>U2MLC3R4G</user>
    <text>Do you have anything friendlier than Debug.crash for this case. @joeql</text>
  </message>
  <message>
    <ts>2017-06-26T13:03:08.550927</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0JFGGZS6&gt; I ended up creating a function that updates everything at once</text>
  </message>
  <message>
    <ts>2017-06-26T13:06:28.623520</ts>
    <user>U5AEH3L05</user>
    <text>If there's a question I have about a package that isn't necessarily a bug, what's the right place to do so? In the github issues?</text>
  </message>
  <message>
    <ts>2017-06-26T13:08:15.659712</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U2MLC3R4G&gt; I'm saying you don't want to write that function at all. Instead you should handle all routes in a single place and eliminate the problem altogether. Something like:

```
setRoute : Route -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)
setRoute route model =
  case route of
    Companies -&amp;gt; (model, Cmd.none)
    EditCompany id -&amp;gt; doSomethingWithId id
```</text>
  </message>
  <message>
    <ts>2017-06-26T13:08:46.670749</ts>
    <user>U0LPMPL2U</user>
    <text>you can use this approach both for changing state on the model when changing routes or to display different views</text>
  </message>
  <message>
    <ts>2017-06-26T13:09:33.686529</ts>
    <user>U0LPMPL2U</user>
    <text>See the `setRoute` and `viewPage` functions in this example app: &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T13:17:39.854937</ts>
    <user>U5ZKYURNY</user>
    <text>&lt;@U0LPMPL2U&gt; thanks, I guess I will simply define an Ignore message and use it for all kinds of Task/Cmd whose result I don’t care, like ``` Task.attempt (always Ignore) (Dom.focus elementId) ```</text>
  </message>
  <message>
    <ts>2017-06-26T13:21:42.939282</ts>
    <user>U2MLC3R4G</user>
    <text>@joeql, My logic for the route is like that
But In my case I am doing something different here. 
I am updating the model that can allow update there primary key. 
This is the part where the user click the update button (all routing logic has been done') and sending the Cmd to the api end. But since this model allow it to update the primary key also. I will have to find a way to get the primary key from the route instead of form model here.</text>
  </message>
  <message>
    <ts>2017-06-26T13:23:24.975460</ts>
    <user>U0LPMPL2U</user>
    <text>Can you extract the id when you're doing the routing logic and set it on the model or pass it into whatever function is building the Cmd?</text>
  </message>
  <message>
    <ts>2017-06-26T13:25:38.022446</ts>
    <user>U0LPMPL2U</user>
    <text>If you have a `viewPage` function like the one I linked, you can do something like:
```
viewPage : Route -&amp;gt; Model -&amp;gt; Html Msg
viewPage route model =
  case route of
    Companies -&amp;gt; viewCompaniesList
    EditCompany companyId -&amp;gt; viewEditForm companyId model
```</text>
  </message>
  <message>
    <ts>2017-06-26T13:26:38.043899</ts>
    <user>U1G51S63S</user>
    <text>there is a pretty simple example since node can be empty or have 2 childs max :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-26T13:26:46.046648</ts>
    <user>U2MLC3R4G</user>
    <text>@joeql yes that would one of alternative here.</text>
  </message>
  <message>
    <ts>2017-06-26T13:27:23.059844</ts>
    <user>U1G51S63S</user>
    <text>it will not solve problem when I  need to find node in a deeply nested list and updated it :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-26T13:29:39.108387</ts>
    <user>U2MLC3R4G</user>
    <text>@joeql this would be a better way. by adding one more input to the view function will allow avoid looking at the route information when we send Cmd after the form submitted.</text>
  </message>
  <message>
    <ts>2017-06-26T13:29:48.111342</ts>
    <user>U2MLC3R4G</user>
    <text>thank you @joeql</text>
  </message>
  <message>
    <ts>2017-06-26T13:29:55.114233</ts>
    <user>U0LPMPL2U</user>
    <text>Glad to help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T13:31:47.156148</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U1G51S63S&gt; since you have the idea of "paths" and everything seems to be keyed to an id, thoughts on using a `Dict` for children instead of a `List`? It might make it easier to look up deeply nested children</text>
  </message>
  <message>
    <ts>2017-06-26T13:35:42.241773</ts>
    <user>U1HSH8SSE</user>
    <text>&lt;@U101G7VEX&gt; - amCharts has free svg maps you can use here &lt;https://www.amcharts.com/svg-maps/&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T13:37:19.276379</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; yeah, it will be easier to do with dicts, I have piece of Elixir code already which doing same thing. just trying to figure out how to do it with lists :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T13:39:21.319973</ts>
    <user>U101G7VEX</user>
    <text>sweet! thanks &lt;@U1HSH8SSE&gt; </text>
  </message>
  <message>
    <ts>2017-06-26T13:40:27.343774</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U1G51S63S&gt; gotcha :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T13:41:05.357451</ts>
    <user>U0LPMPL2U</user>
    <text>I'm guessing you'll need a combination of `List.filter`, `List.head`, and some case statements</text>
  </message>
  <message>
    <ts>2017-06-26T13:41:07.358076</ts>
    <user>U1G51S63S</user>
    <text>yeah, more like exercise</text>
  </message>
  <message>
    <ts>2017-06-26T13:42:12.380897</ts>
    <user>U1G51S63S</user>
    <text>hmm, I am really thought about some recursive function which will go deeply in, update node and then go up again :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T13:42:39.390570</ts>
    <user>U1HSH8SSE</user>
    <text>&lt;@U101G7VEX&gt; -also, I think you should be able to use the HtmlParser package to parse a dynamically loaded map. Have not verified that.</text>
  </message>
  <message>
    <ts>2017-06-26T13:43:07.400571</ts>
    <user>U1G51S63S</user>
    <text>so like find A -&amp;gt; find B inside A -&amp;gt; insert node into B.children -&amp;gt; set A.B to new B -&amp;gt; return A</text>
  </message>
  <message>
    <ts>2017-06-26T13:43:46.414541</ts>
    <user>U1G51S63S</user>
    <text>but not sure how it should look :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T13:43:48.415291</ts>
    <user>U0LPMPL2U</user>
    <text>Ah, you could probably just do that with a recursive function + case statement</text>
  </message>
  <message>
    <ts>2017-06-26T13:44:47.436801</ts>
    <user>U0LPMPL2U</user>
    <text>You can probably break it into two parts: recursion and setting the child</text>
  </message>
  <message>
    <ts>2017-06-26T13:45:09.444744</ts>
    <user>U0LPMPL2U</user>
    <text>figure out setting the child for leaf nodes first</text>
  </message>
  <message>
    <ts>2017-06-26T13:45:19.448808</ts>
    <user>U0LPMPL2U</user>
    <text>then figure out how to apply that function recursively to the tree</text>
  </message>
  <message>
    <ts>2017-06-26T13:45:30.452772</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U1G51S63S&gt; Didn’t read everything but maybe `List.Extra.updateIf` would work?</text>
  </message>
  <message>
    <ts>2017-06-26T13:45:39.456245</ts>
    <user>U0LPMPL2U</user>
    <text>essentially, figure out the base case, then the recursion</text>
  </message>
  <message>
    <ts>2017-06-26T13:49:25.537577</ts>
    <user>U1G51S63S</user>
    <text>setting a child for leaf is pretty simple like `newChild :: node.children` if you mean that</text>
  </message>
  <message>
    <ts>2017-06-26T13:49:49.546212</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U4F64AKQV&gt; yeah, looks like this will not work for my case :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-26T13:50:24.559143</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; so recursive + reduce (fold) should work, right?</text>
  </message>
  <message>
    <ts>2017-06-26T13:50:57.570662</ts>
    <user>U0LPMPL2U</user>
    <text>fold _is_ recursion</text>
  </message>
  <message>
    <ts>2017-06-26T13:51:48.588783</ts>
    <user>U0LPMPL2U</user>
    <text>If you have a `fold` defined it becomes pretty easy. Just return the current node if it isn't the one you want to update, otherwise update the node</text>
  </message>
  <message>
    <ts>2017-06-26T13:52:02.593678</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U1G51S63S&gt; What are you using the tree for? This seems like an XY problem to me.</text>
  </message>
  <message>
    <ts>2017-06-26T13:52:04.594505</ts>
    <user>U1G51S63S</user>
    <text>I thought to have a fold for reducing a list of values into another list and separated recursive function for updating values in accumulator</text>
  </message>
  <message>
    <ts>2017-06-26T13:52:39.607655</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U4F64AKQV&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T13:52:51.612004</ts>
    <user>U1G51S63S</user>
    <text>I want to display thing like this</text>
  </message>
  <message>
    <ts>2017-06-26T13:53:14.620708</ts>
    <user>U0LPMPL2U</user>
    <text>`List.foldl` is recursion over a list. You could also implement a `Tree.fold`</text>
  </message>
  <message>
    <ts>2017-06-26T13:53:28.625762</ts>
    <user>U1G51S63S</user>
    <text>but from API I got plain list of records with LTREE keys (postgresql thing) like `Mahnattan.Bedford-St.Ocean_hill`</text>
  </message>
  <message>
    <ts>2017-06-26T13:55:34.672764</ts>
    <user>U0LPMPL2U</user>
    <text>In your case, what your probably want a tree map function. Something like:
```
Tree.map (\node -&amp;gt; if node.key == "some.key" then Tree.addChild child node else node)
```</text>
  </message>
  <message>
    <ts>2017-06-26T13:55:41.675115</ts>
    <user>U0LPMPL2U</user>
    <text>none of these functions exist though :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-26T13:55:52.679319</ts>
    <user>U4F64AKQV</user>
    <text>So the issue is parsing the strings to create a tree structure?</text>
  </message>
  <message>
    <ts>2017-06-26T13:59:25.759048</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U4F64AKQV&gt; creating a tree structure yeah. this is Elixir code which doing what I need but with dicts and not lists ```      |&amp;gt; Enum.reduce(%{}, fn (area, acc) -&amp;gt;
      {name, path} =
        area.path
        |&amp;gt; String.split(".")
        |&amp;gt; List.pop_at(-1)

      node = %{children: %{},
               id: area.id,
               name: area.name}

      case path do
        [] -&amp;gt;
          Map.put_new(acc, name, node)
        path -&amp;gt;
          full_path =
            Enum.intersperse(path, :children) ++ [:children, name]
          put_in(acc, full_path, node)
      end
```</text>
  </message>
  <message>
    <ts>2017-06-26T14:01:38.811456</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; I thought reducing is a `n - 1` op, where recursion is here?</text>
  </message>
  <message>
    <ts>2017-06-26T14:02:20.827142</ts>
    <user>U1G51S63S</user>
    <text>so basically it's iterating over all items while keeping acc, no?</text>
  </message>
  <message>
    <ts>2017-06-26T14:02:42.835262</ts>
    <user>U1G51S63S</user>
    <text>or you mean under hood with head/tail?</text>
  </message>
  <message>
    <ts>2017-06-26T14:03:18.848583</ts>
    <user>U4F64AKQV</user>
    <text>So why not use an Elm `Dict` then?</text>
  </message>
  <message>
    <ts>2017-06-26T14:03:20.849264</ts>
    <user>U1G51S63S</user>
    <text>btw I can't get you idea with Tree.map :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-26T14:03:41.857306</ts>
    <user>U0LPMPL2U</user>
    <text>`List` is a recursive structure, therefore "iterating" is done recursively (although the compiler may turn that back into iteration)</text>
  </message>
  <message>
    <ts>2017-06-26T14:03:57.863417</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U4F64AKQV&gt; a I am figured out how to do it with Dict already, just want to try with List :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T14:05:30.897470</ts>
    <user>U4F64AKQV</user>
    <text>The current impl of `foldr` happens to use a for loop. It converts the list to a JS array and iterates over it.</text>
  </message>
  <message>
    <ts>2017-06-26T14:06:43.923196</ts>
    <user>U0LPMPL2U</user>
    <text>So if you wanted to update a value in a list, you could do something like this right?

```
updateList : a -&amp;gt; a -&amp;gt; List a -&amp;gt; List a
updateList oldValue newValue list =
  List.map (\val -&amp;gt; if val ==  oldValue then newValue else n) list
```</text>
  </message>
  <message>
    <ts>2017-06-26T14:07:52.947822</ts>
    <user>U1G51S63S</user>
    <text>yep, correct. but problem is with nested update</text>
  </message>
  <message>
    <ts>2017-06-26T14:08:23.958857</ts>
    <user>U1G51S63S</user>
    <text>so as I thought it should be recursion like a -&amp;gt; b -&amp;gt; insert c to b.children -&amp;gt; b -&amp;gt; a</text>
  </message>
  <message>
    <ts>2017-06-26T14:08:34.962811</ts>
    <user>U0LPMPL2U</user>
    <text>Imagine that `Tree.map` visits all children recursively, just like `List.map` can do for a list</text>
  </message>
  <message>
    <ts>2017-06-26T14:09:11.975019</ts>
    <user>U1G51S63S</user>
    <text>ok, done :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T14:09:27.981045</ts>
    <user>U0LPMPL2U</user>
    <text>This discusses `Tree.map` and an implementation for a binary tree &lt;https://evancz.gitbooks.io/functional-programming-in-elm/recursion/binary-trees.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T14:16:56.140101</ts>
    <user>U1G51S63S</user>
    <text>&amp;gt; A binary tree is either empty or it is a node with a value and *two subtrees*</text>
  </message>
  <message>
    <ts>2017-06-26T14:17:34.153269</ts>
    <user>U23SA861Y</user>
    <text>yes, either one of which could be empty</text>
  </message>
  <message>
    <ts>2017-06-26T14:21:16.234432</ts>
    <user>U0LPMPL2U</user>
    <text>Notice that node 9 has two children: 7 and "empty"</text>
  </message>
  <message>
    <ts>2017-06-26T14:24:51.311982</ts>
    <user>U1G51S63S</user>
    <text>hmm, yeah. just read again Insert section and got idea. will try to implement it now for my case :thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-26T14:46:53.799072</ts>
    <user>U1G51S63S</user>
    <text>no, I don't :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T14:50:29.876814</ts>
    <user>U23SA861Y</user>
    <text>bwa?</text>
  </message>
  <message>
    <ts>2017-06-26T14:56:21.003717</ts>
    <user>U1G51S63S</user>
    <text>what is it? I am still not sure how to update it in nested list even on the paper...</text>
  </message>
  <message>
    <ts>2017-06-26T14:57:01.017373</ts>
    <user>U1G51S63S</user>
    <text>will try to draw it step-by step for each foldl callback now</text>
  </message>
  <message>
    <ts>2017-06-26T14:57:44.033672</ts>
    <user>U23SA861Y</user>
    <text>if you want/can post some example code to ellie then there are plenty of *folks* that can help you out</text>
  </message>
  <message>
    <ts>2017-06-26T15:00:17.091130</ts>
    <user>U1G51S63S</user>
    <text>I am going outside right now, but absolutely will post it within next hour, thank you :thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-26T15:00:53.104735</ts>
    <user>U23SA861Y</user>
    <text>*pfft* outside, such a mythical place doesn't actually exist</text>
  </message>
  <message>
    <ts>2017-06-26T15:02:29.140116</ts>
    <user>U23SA861Y</user>
    <text>&lt;http://i1.kym-cdn.com/photos/images/facebook/000/915/472/13e.jpg&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T15:20:27.502263</ts>
    <user>U5ABF3BH7</user>
    <text>Hi everyone! Does anyone have a very basic example of searchable. What I mean by searchable  is I have a list of records listed by name and the list shows the results according to what is typed in the box (showing the number of records that match what is entered).</text>
  </message>
  <message>
    <ts>2017-06-26T15:23:05.553635</ts>
    <user>U2UGVS24E</user>
    <text>`List.filter (\record -&amp;gt; String.contains (String.toUpper model.searchString) (String.toUpper .name record)) recordList`</text>
  </message>
  <message>
    <ts>2017-06-26T15:23:52.568425</ts>
    <user>U2UGVS24E</user>
    <text>This would return a new `recordList` where the `name` contains a substring of `model.searchString`</text>
  </message>
  <message>
    <ts>2017-06-26T15:24:21.577939</ts>
    <user>U2UGVS24E</user>
    <text>Just populate `model.searchString` from an `onInput` of the searchbox</text>
  </message>
  <message>
    <ts>2017-06-26T15:24:57.589671</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U5ABF3BH7&gt;  in terms of UI, this is basically an autocomplete control, isn't it?</text>
  </message>
  <message>
    <ts>2017-06-26T15:26:11.614503</ts>
    <user>U5ABF3BH7</user>
    <text>Yes, I am looking for something similar to elm-searchable-menu, but looking for a straight forward example</text>
  </message>
  <message>
    <ts>2017-06-26T15:28:11.654573</ts>
    <user>U2UGVS24E</user>
    <text>&lt;@U5ABF3BH7&gt;: You'd want to store a `recordList` and the `searchString` in your model and then apply the `List.filter ...` line above at some point in your view before displaying the list of records.  If you're familiar with the Elm Architecture, this would really only require a single `Msg` to update the search string in the model</text>
  </message>
  <message>
    <ts>2017-06-26T15:28:55.669421</ts>
    <user>U0JFGGZS6</user>
    <text>there are quite a few autocomplete libraries people have done.

I have one (&lt;http://package.elm-lang.org/packages/ericgj/elm-autoinput/latest&gt;), I can't make any claims to it being extremely polished though.  Example code here: &lt;https://github.com/ericgj/elm-autoinput/blob/1.0.0/examples/Demo.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T15:29:29.680668</ts>
    <user>U5ABF3BH7</user>
    <text>Thanks a lot &lt;@U2UGVS24E&gt;  and &lt;@U0JFGGZS6&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T15:31:45.727267</ts>
    <user>U5ABF3BH7</user>
    <text>What does Attribute Never really mean?</text>
  </message>
  <message>
    <ts>2017-06-26T15:32:11.736036</ts>
    <user>U23SA861Y</user>
    <text>you can't return messages</text>
  </message>
  <message>
    <ts>2017-06-26T15:32:19.738704</ts>
    <user>U5GCK308N</user>
    <text>Anyone tried composing? &lt;https://www.elm-tutorial.org/en-v01/02-elm-arch/06-composing.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T15:32:40.745743</ts>
    <user>U40QW928G</user>
    <text>Hey everyone I'm having an issue importing modules in my project, in my source tree I have a `src` folder with my Main.elm, but I have a `src/Players/Model.elm` does seem to work when I import it with `import Player.Model exposing(..)`</text>
  </message>
  <message>
    <ts>2017-06-26T15:34:08.775436</ts>
    <user>U23SA861Y</user>
    <text>does or does not seem to work with 'import Player.Model'?</text>
  </message>
  <message>
    <ts>2017-06-26T15:34:18.778860</ts>
    <user>U23SA861Y</user>
    <text>is the folder in your elm-projectfile</text>
  </message>
  <message>
    <ts>2017-06-26T15:34:39.785503</ts>
    <user>U40QW928G</user>
    <text>no it doesn't work</text>
  </message>
  <message>
    <ts>2017-06-26T15:34:46.787926</ts>
    <user>U23SA861Y</user>
    <text>in elm-package.json</text>
  </message>
  <message>
    <ts>2017-06-26T15:34:47.788329</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5ABF3BH7&gt; here's a super simple example built from scratch &lt;https://ellie-app.com/3zTWfXHQpDwa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T15:35:03.793443</ts>
    <user>U40QW928G</user>
    <text>I set my source directories to `"./src"`</text>
  </message>
  <message>
    <ts>2017-06-26T15:35:25.800980</ts>
    <user>U5GCK308N</user>
    <text>What error message you get?</text>
  </message>
  <message>
    <ts>2017-06-26T15:35:46.808308</ts>
    <user>U40QW928G</user>
    <text>&lt;@U23SA861Y&gt; &lt;https://gist.github.com/JosephShering/5bf2ad4ffaab16ac26c3438359ad6cb6&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T15:36:01.813002</ts>
    <user>U40QW928G</user>
    <text>```I cannot find module 'Players.Models'.

Module 'Main' is trying to import it.
```</text>
  </message>
  <message>
    <ts>2017-06-26T15:36:09.815844</ts>
    <user>U2UGVS24E</user>
    <text>&lt;@U5ABF3BH7&gt; : &lt;https://ellie-app.com/3zTXMKzwTq7a1/1&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T15:36:34.823986</ts>
    <user>U5GCK308N</user>
    <text>The last S</text>
  </message>
  <message>
    <ts>2017-06-26T15:36:38.825276</ts>
    <user>U2UGVS24E</user>
    <text>hah.  basically the same thing &lt;@U0LPMPL2U&gt; made</text>
  </message>
  <message>
    <ts>2017-06-26T15:36:41.826479</ts>
    <user>U40QW928G</user>
    <text>sorry `Players.Model`</text>
  </message>
  <message>
    <ts>2017-06-26T15:36:46.827827</ts>
    <user>U5GCK308N</user>
    <text>Oh mmh</text>
  </message>
  <message>
    <ts>2017-06-26T15:36:46.827921</ts>
    <user>U5ABF3BH7</user>
    <text>Thanks</text>
  </message>
  <message>
    <ts>2017-06-26T15:37:40.845617</ts>
    <user>U5GCK308N</user>
    <text>`Players.Model` but you are importing `Player.Model`</text>
  </message>
  <message>
    <ts>2017-06-26T15:41:45.925404</ts>
    <user>U0JFGGZS6</user>
    <text>sylviecottrell: haven't gotten that far in documenting it, but basically this library -- not your own code-- handles rendering the input box. But, you can specify a list of custom attributes for the input box. The idea of `Never` is to prevent any event handlers from being passed in that might interfere with the autocomplete behavior. I got the idea from the original autocomplete library, &lt;http://package.elm-lang.org/packages/thebritican/elm-autocomplete/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T15:42:41.943829</ts>
    <user>U40QW928G</user>
    <text>no I'm importing `Players.Model`</text>
  </message>
  <message>
    <ts>2017-06-26T15:44:16.975060</ts>
    <user>U5ABF3BH7</user>
    <text>I see, thanks for the explanation</text>
  </message>
  <message>
    <ts>2017-06-26T15:46:42.023339</ts>
    <user>U40QW928G</user>
    <text>do I have to add source directories for every folder I have with elm code in it?</text>
  </message>
  <message>
    <ts>2017-06-26T15:47:17.034943</ts>
    <user>U40QW928G</user>
    <text>Looks like there is a `exposed-modules` keyword as well</text>
  </message>
  <message>
    <ts>2017-06-26T15:47:23.037064</ts>
    <user>U40QW928G</user>
    <text>seems relevant</text>
  </message>
  <message>
    <ts>2017-06-26T15:48:09.052969</ts>
    <user>U0EUHKVGB</user>
    <text>exposed-modules only applies if you are publishing a package.</text>
  </message>
  <message>
    <ts>2017-06-26T15:48:46.065497</ts>
    <user>U0FP80EKB</user>
    <text>`Players.Model` is a module that lives in `Players/Model.elm`</text>
  </message>
  <message>
    <ts>2017-06-26T15:48:54.068160</ts>
    <user>U40QW928G</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-26T15:48:56.068771</ts>
    <user>U0FP80EKB</user>
    <text>There is a 1-1 mapping between namespaces and directories</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:07.072458</ts>
    <user>U0FP80EKB</user>
    <text>If you don’t want to have that, you can just put `Model.elm` in the `src`</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:11.073722</ts>
    <user>U0EUHKVGB</user>
    <text>What OS are you on?</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:17.075748</ts>
    <user>U0FP80EKB</user>
    <text>You don’t have to add it to `src` in the package, though</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:21.077314</ts>
    <user>U0FP80EKB</user>
    <text>It should look up fine</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:33.081110</ts>
    <user>U40QW928G</user>
    <text>Do I need the line `module Players.Model exposing (..)` then in that Model file?</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:37.082367</ts>
    <user>U0EUHKVGB</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:41.083799</ts>
    <user>U40QW928G</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-06-26T15:50:12.094421</ts>
    <user>U40QW928G</user>
    <text>does elm-reactor look at the elm-package.json?</text>
  </message>
  <message>
    <ts>2017-06-26T15:50:29.100375</ts>
    <user>U0EUHKVGB</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-26T15:50:52.108167</ts>
    <user>U40QW928G</user>
    <text>hmmm</text>
  </message>
  <message>
    <ts>2017-06-26T15:51:07.112904</ts>
    <user>U40QW928G</user>
    <text>When I run elm-reactor I have to click on `src` and then `Main.elm` is that correct?</text>
  </message>
  <message>
    <ts>2017-06-26T15:51:14.115420</ts>
    <user>U0EUHKVGB</user>
    <text>Sure</text>
  </message>
  <message>
    <ts>2017-06-26T15:51:16.116211</ts>
    <user>U40QW928G</user>
    <text>Or should I have it setup to auto run Main.elm</text>
  </message>
  <message>
    <ts>2017-06-26T15:51:25.119151</ts>
    <user>U0EUHKVGB</user>
    <text>either way</text>
  </message>
  <message>
    <ts>2017-06-26T15:52:05.133080</ts>
    <user>U0EUHKVGB</user>
    <text>In your terminal, in the same folder as your `elm-package.json`, run `elm-make src/Main.elm` and see what happens</text>
  </message>
  <message>
    <ts>2017-06-26T15:52:32.142296</ts>
    <user>U40QW928G</user>
    <text>same error</text>
  </message>
  <message>
    <ts>2017-06-26T15:52:42.145563</ts>
    <user>U0EUHKVGB</user>
    <text>Okay, do this:</text>
  </message>
  <message>
    <ts>2017-06-26T15:52:45.146640</ts>
    <user>U0EUHKVGB</user>
    <text>`ls -la src/`</text>
  </message>
  <message>
    <ts>2017-06-26T15:53:05.153594</ts>
    <user>U40QW928G</user>
    <text>```
drwxr-xr-x  6 joseph  staff  204 Jun 26 15:29 .
drwxr-xr-x  6 joseph  staff  204 Jun 26 15:29 ..
-rw-r--r--  1 joseph  staff  747 Jun 26 15:52 Main.elm
-rw-r--r--  1 joseph  staff  130 Jun 22 12:19 Messages.elm
drwxr-xr-x  5 joseph  staff  170 Jun 26 15:36 Players
-rw-r--r--  1 joseph  staff  481 Jun 26 15:48 elm-package.json
```</text>
  </message>
  <message>
    <ts>2017-06-26T15:53:14.156569</ts>
    <user>U40QW928G</user>
    <text>oh wait</text>
  </message>
  <message>
    <ts>2017-06-26T15:53:19.158560</ts>
    <user>U40QW928G</user>
    <text>that elm-package should not be there</text>
  </message>
  <message>
    <ts>2017-06-26T15:53:19.158658</ts>
    <user>U0EUHKVGB</user>
    <text>there’s your problem</text>
  </message>
  <message>
    <ts>2017-06-26T15:53:33.163152</ts>
    <user>U0EUHKVGB</user>
    <text>elm-reactor uses the elm-package.json closest to the source file you use</text>
  </message>
  <message>
    <ts>2017-06-26T15:53:46.167756</ts>
    <user>U0EUHKVGB</user>
    <text>delete that and you should be good to go :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T15:53:55.171034</ts>
    <user>U40QW928G</user>
    <text>WOOO</text>
  </message>
  <message>
    <ts>2017-06-26T15:53:56.171434</ts>
    <user>U40QW928G</user>
    <text>it worked</text>
  </message>
  <message>
    <ts>2017-06-26T15:54:21.179626</ts>
    <user>U40QW928G</user>
    <text>i probably ran it inside src at one point and it generated that</text>
  </message>
  <message>
    <ts>2017-06-26T15:58:19.262414</ts>
    <user>U0EUHKVGB</user>
    <text>Yeah, easy mistake to make</text>
  </message>
  <message>
    <ts>2017-06-26T16:16:06.624500</ts>
    <user>U40QW928G</user>
    <text>how do you humans break up your Msg when you start getting a lot of them? I have almost 15 now and I feel like it's going to grow out of proportion</text>
  </message>
  <message>
    <ts>2017-06-26T16:22:46.756708</ts>
    <user>U3ZNWN526</user>
    <text>&lt;@U40QW928G&gt; Mine are broken into modules.  However, I wouldn't say 20-30 is necessarily... something that needs to be broken up, unless you feel like you want to break them up (if there's a clear distinction by which you can separate them and it would make maintenance easier)</text>
  </message>
  <message>
    <ts>2017-06-26T16:23:11.765082</ts>
    <user>U3ZNWN526</user>
    <text>Might be that you just need to break up your update function?  (i.e. into several separate functions, possibly even modules)</text>
  </message>
  <message>
    <ts>2017-06-26T16:23:12.765272</ts>
    <user>U40QW928G</user>
    <text>yeah I have actions I'd much rather limit to players</text>
  </message>
  <message>
    <ts>2017-06-26T16:23:33.772187</ts>
    <user>U40QW928G</user>
    <text>that sounds like a potential solution, how do you break up your update function?</text>
  </message>
  <message>
    <ts>2017-06-26T16:24:35.793128</ts>
    <user>U3ZNWN526</user>
    <text>Well, step 1 would be to separate the logic into smaller functions (if it's all inline in the update function currently)</text>
  </message>
  <message>
    <ts>2017-06-26T16:25:21.809232</ts>
    <user>U0LPMPL2U</user>
    <text>I like to extract everything in my `update` to other functions so that `update` is just dispatching</text>
  </message>
  <message>
    <ts>2017-06-26T16:26:05.824381</ts>
    <user>U3ZNWN526</user>
    <text>that is, something like:
```
case msg of
  PlayerMessage1 -&amp;gt; handlePlayerMessage1 -- (or whatever you want to call it)
  PlayerMessage2 -&amp;gt; handlePlayerMessage2
  OtherMessage -&amp;gt; handleOtherMessage
```</text>
  </message>
  <message>
    <ts>2017-06-26T16:26:43.837334</ts>
    <user>U3ZNWN526</user>
    <text>(and obviously you wrangle your parameters there however you need to as well)</text>
  </message>
  <message>
    <ts>2017-06-26T16:27:31.853569</ts>
    <user>U3ZNWN526</user>
    <text>Then, if you have too much to fit in a single file, you can split the player message handler functions into a `Player.Update` module</text>
  </message>
  <message>
    <ts>2017-06-26T16:27:41.856799</ts>
    <user>U40QW928G</user>
    <text>I might do that</text>
  </message>
  <message>
    <ts>2017-06-26T16:27:49.859777</ts>
    <user>U40QW928G</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-06-26T16:28:03.864313</ts>
    <user>U3ZNWN526</user>
    <text>No problem! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T16:31:03.926104</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U40QW928G&gt; you can see what it looks like in a larger app: &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L224&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T16:31:57.944238</ts>
    <user>U0LPMPL2U</user>
    <text>note that this means you need to use `Cmd.map` and `Html.map` to make sure your types line up</text>
  </message>
  <message>
    <ts>2017-06-26T16:33:27.975307</ts>
    <user>U40QW928G</user>
    <text>Ok I'll look more into that project</text>
  </message>
  <message>
    <ts>2017-06-26T16:34:47.001794</ts>
    <user>U0LPMPL2U</user>
    <text>There's an accompanying blog post explaining the source: &lt;https://dev.to/rtfeldman/tour-of-an-open-source-elm-spa&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T16:35:41.019789</ts>
    <user>U3ZNWN526</user>
    <text>Now here's another question: Does anybody have a good/recommended way of dealing with elm-package dependencies in CI/CD environments?</text>
  </message>
  <message>
    <ts>2017-06-26T16:36:17.031399</ts>
    <user>U23SA861Y</user>
    <text>the package file enforces semantic versioning so it's all good</text>
  </message>
  <message>
    <ts>2017-06-26T16:36:38.038310</ts>
    <user>U0EUHKVGB</user>
    <text>Eh, not quite.</text>
  </message>
  <message>
    <ts>2017-06-26T16:36:57.044755</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3ZNWN526&gt; You can use `3.0.0 &amp;lt;= v &amp;lt; 3.0.1` to lock it to a version</text>
  </message>
  <message>
    <ts>2017-06-26T16:37:02.046237</ts>
    <user>U0EUHKVGB</user>
    <text>that’s what I did at NRI.</text>
  </message>
  <message>
    <ts>2017-06-26T16:37:19.052048</ts>
    <user>U3ZNWN526</user>
    <text>Hmm... well I have an app that currently compiles using webpack, and we have a CD script that just runs npm build and then copies the build to S3.  But I just added a new package to `elm-package.json` and it bombed, saying it couldn't find the new package (because I hadn't run elm-package install as part of the build)</text>
  </message>
  <message>
    <ts>2017-06-26T16:37:22.053024</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U23SA861Y&gt; patch changes can still break site functionality, due to logic changes.</text>
  </message>
  <message>
    <ts>2017-06-26T16:37:38.058283</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3ZNWN526&gt; oh, you just need to run elm-package on your CI</text>
  </message>
  <message>
    <ts>2017-06-26T16:38:20.072310</ts>
    <user>U3ZNWN526</user>
    <text>Okay, so you do run it during CI and CD?  So then normally it will ask me to approve a plan, and I see there is an option `-y` to auto-accept the prompt, which seems to work, but... is that safe?</text>
  </message>
  <message>
    <ts>2017-06-26T16:39:30.095122</ts>
    <user>U3ZNWN526</user>
    <text>The only other option I can think of I guess is to check elm-stuff into the repo, which seems silly.  I was expecting there to me something analogous to Gemfile.lock (from rails)</text>
  </message>
  <message>
    <ts>2017-06-26T16:40:03.105795</ts>
    <user>U3ZNWN526</user>
    <text>So that I could handle that prompt manually (if necessary), and then just allow CI/CD to install the same versions without asking again...</text>
  </message>
  <message>
    <ts>2017-06-26T16:41:45.139716</ts>
    <user>U0EUHKVGB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-26T16:41:48.140829</ts>
    <user>U0EUHKVGB</user>
    <text>it is safe.</text>
  </message>
  <message>
    <ts>2017-06-26T16:41:52.141994</ts>
    <user>U3ZNWN526</user>
    <text>But I guess I don't *really* know what that prompt is for.  (Like... it's either yes or no right?  it's not like I have other choices of what to install)</text>
  </message>
  <message>
    <ts>2017-06-26T16:41:54.142840</ts>
    <user>U3ZNWN526</user>
    <text>Okay :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T16:41:57.143602</ts>
    <user>U0EUHKVGB</user>
    <text>As long as you’ve locked the deps down like I said</text>
  </message>
  <message>
    <ts>2017-06-26T16:42:17.150404</ts>
    <user>U0EUHKVGB</user>
    <text>Otherwise it will install newer packages when they get released</text>
  </message>
  <message>
    <ts>2017-06-26T16:42:46.159868</ts>
    <user>U3ZNWN526</user>
    <text>Ah, sure, right... I guess that makes the difference.</text>
  </message>
  <message>
    <ts>2017-06-26T16:43:43.178407</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U23SA861Y&gt; &lt;@U0LPMPL2U&gt; ok, I am done ellie with example code &lt;https://ellie-app.com/3zVTgFLNprxa1/3&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T16:44:45.198867</ts>
    <user>U1G51S63S</user>
    <text>so it looks like I should have some kind of recursion inside `insertItem` function, right?</text>
  </message>
  <message>
    <ts>2017-06-26T16:45:25.211682</ts>
    <user>U3ZNWN526</user>
    <text>Doesn't the make updating a little annoying though?  Like, then for each library you have to extend the max number as far as you want, run an install, see where it ends up and constrain it to the new version manually?</text>
  </message>
  <message>
    <ts>2017-06-26T16:46:41.237421</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U1G51S63S&gt; I think there are three cases: 1) the current node is not an ancestors 2) the current node is an ancestor 2) the current node is the parent</text>
  </message>
  <message>
    <ts>2017-06-26T16:46:57.243086</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U1G51S63S&gt; datastructures in elm are immutable so thing about how you would go about constructing a new tree with one new element in it</text>
  </message>
  <message>
    <ts>2017-06-26T16:47:03.245091</ts>
    <user>U0LPMPL2U</user>
    <text>You will want to map over the list, and check the three cases</text>
  </message>
  <message>
    <ts>2017-06-26T16:47:07.246039</ts>
    <user>U1LB50NAU</user>
    <text>&lt;@U40QW928G&gt; I'd also consider breaking it up only when it actually /is/ a problem, rather than when it feels like one. The thing is that the big update case statement isn't that hard to parse or search, and it's super-easy to re-factor or hoist out functions if it really does get complicated. If you're feeling the urge because it feels like a really long function, think of it insted as just a bunch of separate functions, because that's actually closer to what it is..</text>
  </message>
  <message>
    <ts>2017-06-26T16:48:41.277475</ts>
    <user>U1G51S63S</user>
    <text>yep, I am imagine if it will be easier to have a fake root node so `a` will be child of this root</text>
  </message>
  <message>
    <ts>2017-06-26T16:49:22.291184</ts>
    <user>U3ZNWN526</user>
    <text>Wait a minute...  &lt;@U0EUHKVGB&gt; - should I just be checking in `elm-stuff/exact-dependencies.json`?</text>
  </message>
  <message>
    <ts>2017-06-26T16:49:27.292825</ts>
    <user>U23SA861Y</user>
    <text>Is this a balanced tree or are you trying to attach nodes to a specifc location</text>
  </message>
  <message>
    <ts>2017-06-26T16:49:32.294430</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3ZNWN526&gt; No, don’t do that.</text>
  </message>
  <message>
    <ts>2017-06-26T16:49:36.295793</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; map inside `insertItem`?</text>
  </message>
  <message>
    <ts>2017-06-26T16:49:47.299507</ts>
    <user>U0EUHKVGB</user>
    <text>That is not for you to check in, and can break things if it is checked in</text>
  </message>
  <message>
    <ts>2017-06-26T16:50:09.307440</ts>
    <user>U3ZNWN526</user>
    <text>Oh.  Dang :slightly_smiling_face:  Okay.</text>
  </message>
  <message>
    <ts>2017-06-26T16:52:04.345840</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U1G51S63S&gt; I'm thinking something like:
```
insertItem : Item -&amp;gt; Tree -&amp;gt; Tree
insertItem item tree =
    if parentOf item tree then
      appendChild item tree
    else if ancestorOf item tree
      List.map (insertItem item) tree.children -- make this return a Tree, not a list
    else
      tree
```</text>
  </message>
  <message>
    <ts>2017-06-26T16:55:26.413880</ts>
    <user>U1G51S63S</user>
    <text>so have a root node is a good idea? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T16:56:09.428846</ts>
    <user>U0LPMPL2U</user>
    <text>All trees must have a root node :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T16:58:30.476859</ts>
    <user>U1G51S63S</user>
    <text>ok, ty. let me some time to figure out how it works :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T16:58:51.483751</ts>
    <user>U5LFUHH19</user>
    <text>Hi, I would love some feedback on a little game I made. &lt;https://ellie-app.com/3zW9S8VjvSVa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T17:11:59.735195</ts>
    <user>U3ZNWN526</user>
    <text>Hmm &lt;@U5LFUHH19&gt; - doesn't seem to compile... ?</text>
  </message>
  <message>
    <ts>2017-06-26T17:12:43.748204</ts>
    <user>U5LFUHH19</user>
    <text>Hmm, sorry.  Try again? &lt;https://ellie-app.com/3zW9S8VjvSVa1/2&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T17:13:07.754823</ts>
    <user>U3ZNWN526</user>
    <text>Aha! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T17:13:36.763451</ts>
    <user>U5LFUHH19</user>
    <text>BTW, I came across this game at a science center yesterday.  I've yet to solve it (move all the frogs to the other side)</text>
  </message>
  <message>
    <ts>2017-06-26T17:13:57.769977</ts>
    <user>U5LFUHH19</user>
    <text>But I thought it might help me to learn Elm, think about state, explore new modules, etc.</text>
  </message>
  <message>
    <ts>2017-06-26T17:14:59.787794</ts>
    <user>U3ZNWN526</user>
    <text>Ah!  Interesting :smile:  Hmm, when I click on Frog 2 at the beginning of the game, it doesn't do what I'd expect</text>
  </message>
  <message>
    <ts>2017-06-26T17:15:10.791263</ts>
    <user>U3ZNWN526</user>
    <text>(move the open space to space 2)</text>
  </message>
  <message>
    <ts>2017-06-26T17:15:31.797807</ts>
    <user>U5LFUHH19</user>
    <text>Frogs can only jump over one other frog to get to empty space or move to immediately adjacent space.</text>
  </message>
  <message>
    <ts>2017-06-26T17:15:49.803091</ts>
    <user>U3ZNWN526</user>
    <text>Sorry, I mean the Frog in Space 2</text>
  </message>
  <message>
    <ts>2017-06-26T17:15:51.803640</ts>
    <user>U5LFUHH19</user>
    <text>Sorry, I should have more boilerplate about the rules and goals.</text>
  </message>
  <message>
    <ts>2017-06-26T17:16:02.806868</ts>
    <user>U3ZNWN526</user>
    <text>(that one should be able to jump right?)</text>
  </message>
  <message>
    <ts>2017-06-26T17:18:55.856589</ts>
    <user>U5LFUHH19</user>
    <text>Yes, Frog 2 should be able to leap over 3 to get to the space in slot 4 (all assuming 0-based indexing)</text>
  </message>
  <message>
    <ts>2017-06-26T17:20:29.884000</ts>
    <user>U3ZNWN526</user>
    <text>kyclark: Okay, yeah (Right, I'm just using the numbers as labeled on the spaces).  Looks like it is instead moving the Frog in space 3 for some reason.</text>
  </message>
  <message>
    <ts>2017-06-26T17:20:59.892718</ts>
    <user>U5LFUHH19</user>
    <text>Solution: &lt;http://britton.disted.camosun.bc.ca/frog_puzzle_sol.htm&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T17:21:44.906134</ts>
    <user>U5LFUHH19</user>
    <text>I think I should make a version with 2-4 frogs to warmup!</text>
  </message>
  <message>
    <ts>2017-06-26T17:22:34.920202</ts>
    <user>U5LFUHH19</user>
    <text>Oh, and I should add a counter to keep track of how many moves.</text>
  </message>
  <message>
    <ts>2017-06-26T17:22:51.925240</ts>
    <user>U3ZNWN526</user>
    <text>I think line 120 is where the bug is</text>
  </message>
  <message>
    <ts>2017-06-26T17:23:12.931096</ts>
    <user>U3ZNWN526</user>
    <text>Should be `[ Space, y, x ]` right?</text>
  </message>
  <message>
    <ts>2017-06-26T17:23:30.936306</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; why `List.map (insertItem item) tree.children -- make this return a Tree, not a list` is here?</text>
  </message>
  <message>
    <ts>2017-06-26T17:24:04.946020</ts>
    <user>U1G51S63S</user>
    <text>I thought things like `appendChild` should return a `Tree` instance then, no?</text>
  </message>
  <message>
    <ts>2017-06-26T17:24:22.951511</ts>
    <user>U1G51S63S</user>
    <text>and in such case branch 1 returning `Tree` and branch 2 `List Tree`</text>
  </message>
  <message>
    <ts>2017-06-26T17:27:20.002638</ts>
    <user>U3ZNWN526</user>
    <text>(and Also line 132?)</text>
  </message>
  <message>
    <ts>2017-06-26T17:30:29.057540</ts>
    <user>U5LFUHH19</user>
    <text>OK, I'm going to really think about those lines.  I'm not at all sure I have the logic correct.</text>
  </message>
  <message>
    <ts>2017-06-26T17:31:49.080720</ts>
    <user>U3ZNWN526</user>
    <text>:smile: (Mostly I just noticed that when I click the frog, the wrong frog moves! Hehe)</text>
  </message>
  <message>
    <ts>2017-06-26T17:33:52.114869</ts>
    <user>U5LFUHH19</user>
    <text>Yes, you are correct!  Thanks bigly</text>
  </message>
  <message>
    <ts>2017-06-26T17:35:17.138406</ts>
    <user>U3ZNWN526</user>
    <text>:laughing: Any time!</text>
  </message>
  <message>
    <ts>2017-06-26T17:37:13.169426</ts>
    <user>U3ZNWN526</user>
    <text>Oh, interesting - almost had it solved, but I just noticed that when I get the last right-frog to Space 1, (with space 0 open) I can't move it over for some reason.  Must be some small logic error there too...</text>
  </message>
  <message>
    <ts>2017-06-26T17:37:15.170091</ts>
    <user>U3ZNWN526</user>
    <text>(possibly `slots` isn't what you're expecting it to be, since it's usually the frog and the two spaces in front of it, but that frog only has 1 space in front of it?)</text>
  </message>
  <message>
    <ts>2017-06-26T17:39:34.207071</ts>
    <user>U5LFUHH19</user>
    <text>Yes, I was just seeing this, too.  It helped me to 1) find the solution and 2) step through with only 3 frogs.  I need to iron out that bug.</text>
  </message>
  <message>
    <ts>2017-06-26T17:51:56.399702</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U1G51S63S&gt; yeah, my comment there was to say return a `Tree`, not a `List Tree` in branch 2</text>
  </message>
  <message>
    <ts>2017-06-26T17:54:04.433505</ts>
    <user>U0LPMPL2U</user>
    <text>Branch 2 would actually look like:
```
Tree { tree | children = (List.map (insertItem item) tree.children) }
```</text>
  </message>
  <message>
    <ts>2017-06-26T18:27:41.887930</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; ah, got it. thanks! just didn't fully understood comment :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T18:27:45.888649</ts>
    <user>U1G51S63S</user>
    <text>will try it now</text>
  </message>
  <message>
    <ts>2017-06-26T18:28:26.897047</ts>
    <user>U1G51S63S</user>
    <text>and parentOf/ancestorOf checks if item is parent/ancestor of tree or reversed?</text>
  </message>
  <message>
    <ts>2017-06-26T18:33:02.953062</ts>
    <user>U0LPMPL2U</user>
    <text>It checks if the item should be a direct child of the tree</text>
  </message>
  <message>
    <ts>2017-06-26T19:06:17.333426</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; and `ancestorOf` is not for direct ancestor right? just any ancestor?</text>
  </message>
  <message>
    <ts>2017-06-26T19:07:29.346185</ts>
    <user>U0LPMPL2U</user>
    <text>Correct. Non-direct ancestor (direct is checked by the parentOf function)</text>
  </message>
  <message>
    <ts>2017-06-26T19:08:22.355346</ts>
    <user>U1G51S63S</user>
    <text>hmm, should it be in reversed order than?</text>
  </message>
  <message>
    <ts>2017-06-26T19:08:49.360022</ts>
    <user>U1G51S63S</user>
    <text>ah, no</text>
  </message>
  <message>
    <ts>2017-06-26T19:08:51.360396</ts>
    <user>U1G51S63S</user>
    <text>sorry :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T19:11:59.393191</ts>
    <user>U1G51S63S</user>
    <text>oh god, looks like it working :smile:</text>
  </message>
  <message>
    <ts>2017-06-26T19:12:58.402890</ts>
    <user>U1G51S63S</user>
    <text>&lt;https://ellie-app.com/3zYfQbMWvMKa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T19:13:51.411597</ts>
    <user>U1G51S63S</user>
    <text>I am not sure if `unwrapChildren` is the best I can do for self-referenced type alias</text>
  </message>
  <message>
    <ts>2017-06-26T19:15:03.423756</ts>
    <user>U1G51S63S</user>
    <text>&lt;https://ellie-app.com/3zYfQbMWvMKa1/1&gt; - I think this is more expressive</text>
  </message>
  <message>
    <ts>2017-06-26T19:25:04.523457</ts>
    <user>U1G51S63S</user>
    <text>really thank you a lot :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T19:42:45.694422</ts>
    <user>U5ABF3BH7</user>
    <text>Hi again. I am still working at creating a select2 (single select -&lt;https://select2.github.io/examples.html&gt;). I got the search box working, thanks to &lt;@U2UGVS24E&gt;  and &lt;@U0JFGGZS6&gt;. Now, I need to implement that clicking on a li will actually select the item just like for select2,  and close the searching div. Has anyone implemented something similar or has examples, especially simple examples to start with?</text>
  </message>
  <message>
    <ts>2017-06-26T19:43:12.698732</ts>
    <user>U57KYFW67</user>
    <text>Is there a way to install elm packages in a system-wide fashion?</text>
  </message>
  <message>
    <ts>2017-06-26T19:58:03.835178</ts>
    <user>U5LFUHH19</user>
    <text>Much better, but probably not perfect: &lt;https://github.com/kyclark/elm/blob/master/frogs/Main.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T22:18:03.946228</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U57KYFW67&gt; As in like NPM global? Isn’t that practice looked down upon these days?</text>
  </message>
  <message>
    <ts>2017-06-26T22:19:52.958462</ts>
    <user>U5V0HVAKB</user>
    <text>&lt;@U57KYFW67&gt; it's better to never install npm packages globally maybe you have a really specific usecase?</text>
  </message>
  <message>
    <ts>2017-06-26T23:04:11.261973</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5ABF3BH7&gt; you'll want to add some `onClick` handlers to the `li`s, create a few more Msg types for selecting a value and opening the dropdown. Your model will need to track some extra state such as open/closed and what the selected value is</text>
  </message>
  <message>
    <ts>2017-06-26T23:04:41.265285</ts>
    <user>U0LPMPL2U</user>
    <text>Here's a simple example: &lt;https://ellie-app.com/3B3JQDgRCqga1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T23:05:48.272688</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0LPMPL2U&gt; Thanks a lot, it is very helpful!</text>
  </message>
  <message>
    <ts>2017-06-26T23:06:53.279448</ts>
    <user>U0LPMPL2U</user>
    <text>Glad to help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T23:07:00.280168</ts>
    <user>U0LPMPL2U</user>
    <text>good luck with your project</text>
  </message>
  <message>
    <ts>2017-06-27T00:35:49.823016</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0LPMPL2U&gt; Thanks!</text>
  </message>
  <message>
    <ts>2017-06-27T00:47:52.894069</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U5V0HVAKB&gt; &lt;@U4F64AKQV&gt; It feels like a waste to have to redownload and recompile every time. Especially if everything is semantically versioned. That's a big difference between what npm does and what a typed language should be able to do.</text>
  </message>
  <message>
    <ts>2017-06-27T00:49:06.901075</ts>
    <user>U57KYFW67</user>
    <text>But if it's not possible, oh well. It was just a curiosity</text>
  </message>
  <message>
    <ts>2017-06-27T01:00:44.972705</ts>
    <user>U4LKS2ZTR</user>
    <text>The reason behind chrome showing the JSON instead of the page has to do with the fact that I was differentiating between the 2 on the backend. So chrome sees the same URL and caches it wrongly. I specifically added `.json` to the URL and now it doesn’t happen anymore.</text>
  </message>
  <message>
    <ts>2017-06-27T03:20:10.060506</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4LKS2ZTR&gt; ooh, right! another thing that might work is adding content-type headers on the backend, and possible `vary`, too, though I _think_ content-type should be enough to have chrome see the difference</text>
  </message>
  <message>
    <ts>2017-06-27T03:23:54.102241</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U57KYFW67&gt; that's actually quite possibly part of 0.19 - install everything, versioned, in your home-folder, and pull it from there when you install something in a project.</text>
  </message>
  <message>
    <ts>2017-06-27T03:25:03.115256</ts>
    <user>U3SJEDR96</user>
    <text>though you won't do a `--global` or something, it would just be default behaviour</text>
  </message>
  <message>
    <ts>2017-06-27T04:47:24.197566</ts>
    <user>U5V0HVAKB</user>
    <text>&lt;@U57KYFW67&gt; you can use yarn it's a lot of faster than npm</text>
  </message>
  <message>
    <ts>2017-06-27T05:33:36.884771</ts>
    <user>U0L93MVJN</user>
    <text>Does anyone use folkertdev/outmessage ?</text>
  </message>
  <message>
    <ts>2017-06-27T05:34:01.890522</ts>
    <user>U0L93MVJN</user>
    <text>Someone was telling me about it at elmconf Europe and I was about to give it a go</text>
  </message>
  <message>
    <ts>2017-06-27T05:35:53.918063</ts>
    <user>U1CE9DL9H</user>
    <text>Haven't needed it for most actual apps, but I guess you have chatty components?</text>
  </message>
  <message>
    <ts>2017-06-27T05:36:30.927206</ts>
    <user>U0L93MVJN</user>
    <text>Mostly not, but there is the odd one</text>
  </message>
  <message>
    <ts>2017-06-27T05:36:46.930942</ts>
    <user>U0L93MVJN</user>
    <text>Currently I am intercepting messages in `Msg` from the level above, but its ugly and hacky</text>
  </message>
  <message>
    <ts>2017-06-27T05:37:54.947708</ts>
    <user>U0L93MVJN</user>
    <text>Hey, you are the author of that library :slightly_smiling_face:  How about that</text>
  </message>
  <message>
    <ts>2017-06-27T05:38:02.949499</ts>
    <user>U1CE9DL9H</user>
    <text>Yea, well I think you should start out by returning more from update, maybe a sum type, but without using the package at first</text>
  </message>
  <message>
    <ts>2017-06-27T05:40:02.979019</ts>
    <user>U0L93MVJN</user>
    <text>I've actually done that before and got annoyed with it because of the wiring issues you mention in the README</text>
  </message>
  <message>
    <ts>2017-06-27T05:42:45.019276</ts>
    <user>U1CE9DL9H</user>
    <text>well, that is just sort of how elm works. The more time passes, the less I'm satisfied with the outmessage package. It doesn't actually make the code that much shorter; it's not that much better to justify pulling a package in for the projects I've worked on</text>
  </message>
  <message>
    <ts>2017-06-27T05:42:55.021456</ts>
    <user>U1CE9DL9H</user>
    <text>if you have some example of nasty code we can look at it together</text>
  </message>
  <message>
    <ts>2017-06-27T05:44:19.041915</ts>
    <user>U0L93MVJN</user>
    <text>Hmm - well, if that's coming from the package author then fair enough :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T05:44:50.049345</ts>
    <user>U0L93MVJN</user>
    <text>Ok, I'll write it without the library and see how it looks</text>
  </message>
  <message>
    <ts>2017-06-27T05:47:23.087694</ts>
    <user>U1CE9DL9H</user>
    <text>well given elm's architecture there just isn't that much you can do. If you see the `OutMsg` as the api of your component, then write `OutMsg -&amp;gt; Cmd Msg` and pipe that into your update function that is very clear and simple. Wrapping in helper functions doesn't give you much extra</text>
  </message>
  <message>
    <ts>2017-06-27T09:59:16.968540</ts>
    <user>U3KSN5MAL</user>
    <text>hmm, need a bit of help finding an answer</text>
  </message>
  <message>
    <ts>2017-06-27T09:59:32.975570</ts>
    <user>U3KSN5MAL</user>
    <text>what's the best way to open a save as, or open dialog from elm</text>
  </message>
  <message>
    <ts>2017-06-27T09:59:56.986028</ts>
    <user>U3KSN5MAL</user>
    <text>so i can throw the file url to some js fileapi stuff?</text>
  </message>
  <message>
    <ts>2017-06-27T10:02:16.047874</ts>
    <user>U3SJEDR96</user>
    <text>for opening: using an &amp;lt;input type="file"&amp;gt;, probably. Save as, I'm not too sure. &amp;lt;a download="filename" href="path_to_file"&amp;gt; might work but depends on what you actually need to happen, I suppose</text>
  </message>
  <message>
    <ts>2017-06-27T10:03:10.070177</ts>
    <user>U3KSN5MAL</user>
    <text>Can i make that input type in elm?</text>
  </message>
  <message>
    <ts>2017-06-27T10:03:29.078011</ts>
    <user>U3KSN5MAL</user>
    <text>I couldn't find it in the reference</text>
  </message>
  <message>
    <ts>2017-06-27T10:03:51.086988</ts>
    <user>U3SJEDR96</user>
    <text>`input [ type_ "file" ] []` will probably do. It's just a generic file-upload element, but you can handle it with elm+ports :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T10:03:54.088357</ts>
    <user>U3KSN5MAL</user>
    <text>I really need to be able to call it from an update</text>
  </message>
  <message>
    <ts>2017-06-27T10:04:06.093257</ts>
    <user>U3KSN5MAL</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-06-27T10:04:11.095399</ts>
    <user>U3KSN5MAL</user>
    <text>ok i'll try that</text>
  </message>
  <message>
    <ts>2017-06-27T10:04:26.101695</ts>
    <user>U3SJEDR96</user>
    <text>I think I have an example somewhere</text>
  </message>
  <message>
    <ts>2017-06-27T10:04:29.102977</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3qpgdbQFFfqa1/1&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T10:04:59.115011</ts>
    <user>U3KSN5MAL</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-06-27T10:05:14.121199</ts>
    <user>U3SJEDR96</user>
    <text>ah. Yeah, I'm fairly sure there's no cross-browser way to trigger such a thing if you're already outside a user-event</text>
  </message>
  <message>
    <ts>2017-06-27T10:05:41.132593</ts>
    <user>U3KSN5MAL</user>
    <text>don't need cross browser, only chromium. (photoshop plugin)</text>
  </message>
  <message>
    <ts>2017-06-27T10:06:16.146739</ts>
    <user>U3KSN5MAL</user>
    <text>maybe adobe has implemented something</text>
  </message>
  <message>
    <ts>2017-06-27T10:06:20.148106</ts>
    <user>U3KSN5MAL</user>
    <text>i'll have a look</text>
  </message>
  <message>
    <ts>2017-06-27T10:06:26.150704</ts>
    <user>U3KSN5MAL</user>
    <text>thanks for the help!</text>
  </message>
  <message>
    <ts>2017-06-27T10:06:42.157076</ts>
    <user>U3SJEDR96</user>
    <text>yeah, I'd guess they would have, definitely worth checking that out</text>
  </message>
  <message>
    <ts>2017-06-27T10:06:56.163019</ts>
    <user>U3KSN5MAL</user>
    <text>hard to say with this stuff</text>
  </message>
  <message>
    <ts>2017-06-27T10:07:11.168820</ts>
    <user>U3KSN5MAL</user>
    <text>they don't even give me access to make hotkeys -_-</text>
  </message>
  <message>
    <ts>2017-06-27T10:09:08.216377</ts>
    <user>U3KSN5MAL</user>
    <text>AH found it!</text>
  </message>
  <message>
    <ts>2017-06-27T10:09:14.218600</ts>
    <user>U3KSN5MAL</user>
    <text>wasn't where i was looking</text>
  </message>
  <message>
    <ts>2017-06-27T10:12:15.291907</ts>
    <user>U3SJEDR96</user>
    <text>is it just me or is their plugin SDK documentation absolutely horrible?</text>
  </message>
  <message>
    <ts>2017-06-27T10:14:33.347963</ts>
    <user>U3KSN5MAL</user>
    <text>makes me want to die tbh</text>
  </message>
  <message>
    <ts>2017-06-27T10:14:47.353876</ts>
    <user>U3KSN5MAL</user>
    <text>the examples plugin is so amazingly bad</text>
  </message>
  <message>
    <ts>2017-06-27T10:15:06.361675</ts>
    <user>U3KSN5MAL</user>
    <text>the amount of nested tables is some horrible abortion</text>
  </message>
  <message>
    <ts>2017-06-27T10:15:35.374142</ts>
    <user>U3KSN5MAL</user>
    <text>as far as i know i'm the only person to use elm for this stuff so far too</text>
  </message>
  <message>
    <ts>2017-06-27T10:24:39.601454</ts>
    <user>U3KSN5MAL</user>
    <text>look at this crap -_-</text>
  </message>
  <message>
    <ts>2017-06-27T10:26:42.655453</ts>
    <user>U3KSN5MAL</user>
    <text>how this is supposed to be clear example code i'll never know</text>
  </message>
  <message>
    <ts>2017-06-27T10:26:54.660877</ts>
    <user>U41NK9BM4</user>
    <text>Crystal clear…</text>
  </message>
  <message>
    <ts>2017-06-27T10:28:10.693950</ts>
    <user>U3KSN5MAL</user>
    <text>there was only one relevant line of code...</text>
  </message>
  <message>
    <ts>2017-06-27T10:28:17.697386</ts>
    <user>U3KSN5MAL</user>
    <text>` var result = window.cep.fs.showOpenDialogEx(...); `</text>
  </message>
  <message>
    <ts>2017-06-27T10:28:52.712402</ts>
    <user>U3KSN5MAL</user>
    <text>the rest was just silly verbose html</text>
  </message>
  <message>
    <ts>2017-06-27T10:37:59.950822</ts>
    <user>U382GQ6KH</user>
    <text>Hello. I want to use &lt;http://package.elm-lang.org/packages/abadi199/datetimepicker/latest&gt;. In the documentation it is said to use css class `"my-datetimepicker"` but i can't find it anywhere. Any suggestion?</text>
  </message>
  <message>
    <ts>2017-06-27T10:45:26.144674</ts>
    <user>U3KSN5MAL</user>
    <text>it doesn't work if you use that?</text>
  </message>
  <message>
    <ts>2017-06-27T10:46:36.174510</ts>
    <user>U382GQ6KH</user>
    <text>&lt;@U3KSN5MAL&gt; yeah, the shape broke</text>
  </message>
  <message>
    <ts>2017-06-27T10:47:30.197586</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U382GQ6KH&gt; you probably don't really need that, but you will need to add the actual css somewhere, either using `elm-css` and `DateTimePicker.Css.css` or by adding &lt;https://raw.githubusercontent.com/abadi199/datetimepicker/3.0.3/styles/styles.css&gt; somewhere</text>
  </message>
  <message>
    <ts>2017-06-27T10:47:43.203162</ts>
    <user>U3KSN5MAL</user>
    <text>yeah i was about to say, looks like a css thing</text>
  </message>
  <message>
    <ts>2017-06-27T10:47:52.206967</ts>
    <user>U3KSN5MAL</user>
    <text>have a look at the demos on the github page</text>
  </message>
  <message>
    <ts>2017-06-27T10:47:54.207623</ts>
    <user>U3KSN5MAL</user>
    <text>&lt;https://github.com/abadi199/datetimepicker/blob/3.0.3/demo/Demo.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T10:48:06.212497</ts>
    <user>U41NK9BM4</user>
    <text>Yep, sounds like a custom CSS class you can use to tweak/augment styling</text>
  </message>
  <message>
    <ts>2017-06-27T10:48:09.213705</ts>
    <user>U3KSN5MAL</user>
    <text>they are usually better than looking at the reference if you are stuck</text>
  </message>
  <message>
    <ts>2017-06-27T10:48:54.233512</ts>
    <user>U3KSN5MAL</user>
    <text>in this demo he doesn't even seem to be referencing a class in the view</text>
  </message>
  <message>
    <ts>2017-06-27T10:48:59.235569</ts>
    <user>U3KSN5MAL</user>
    <text>so try without it</text>
  </message>
  <message>
    <ts>2017-06-27T10:49:49.257599</ts>
    <user>U41NK9BM4</user>
    <text>Most probably because it is blindly applied to the generated date picker</text>
  </message>
  <message>
    <ts>2017-06-27T10:50:37.278483</ts>
    <user>U3SJEDR96</user>
    <text>yup; the custom class referenced in the docs is probably just to show that you can add further styling yourself; or for an older version</text>
  </message>
  <message>
    <ts>2017-06-27T10:53:43.360705</ts>
    <user>U382GQ6KH</user>
    <text>&lt;@U3SJEDR96&gt; &lt;@U3KSN5MAL&gt; &lt;@U41NK9BM4&gt; yeah i know it's css problem but i can't find the class in documentation. too bad i'm a newbie so i only know injecting the css to css file but not `elm-css`. thanks for the answer :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T10:54:21.377535</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, it's a little weird to have that unrelated class in the examples there</text>
  </message>
  <message>
    <ts>2017-06-27T10:55:37.411347</ts>
    <user>U3KSN5MAL</user>
    <text>No worries, we are all noobies at some point</text>
  </message>
  <message>
    <ts>2017-06-27T10:55:57.419773</ts>
    <user>U0LPMPL2U</user>
    <text>The name `"my-datetimepicker"` implies user-defined class to me, but I agree it should probably be mentioned explicitly.</text>
  </message>
  <message>
    <ts>2017-06-27T10:56:03.422719</ts>
    <user>U0LPMPL2U</user>
    <text>doc PR maybe? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T10:56:15.427845</ts>
    <user>U3SJEDR96</user>
    <text>junior for life :sign_of_the_horns:</text>
  </message>
  <message>
    <ts>2017-06-27T10:56:59.447669</ts>
    <user>U3KSN5MAL</user>
    <text>i constantly think i'm a shit coder as i only ever work by myself so i have nothing to judge myself by xD</text>
  </message>
  <message>
    <ts>2017-06-27T11:01:52.585619</ts>
    <user>U382GQ6KH</user>
    <text>&lt;@U3SJEDR96&gt; &lt;@U3KSN5MAL&gt; :smile:
&lt;@U0LPMPL2U&gt; i thought the author is a bit busy now. so many unresolved issues on this project</text>
  </message>
  <message>
    <ts>2017-06-27T11:05:50.695736</ts>
    <user>U41NK9BM4</user>
    <text>I would use `&amp;lt;input type="date"… &amp;gt;` for now :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T11:22:45.141275</ts>
    <user>U382GQ6KH</user>
    <text>&lt;@U41NK9BM4&gt; :facepalm: why i forgot about this? any suggestion for time type?</text>
  </message>
  <message>
    <ts>2017-06-27T11:23:51.170287</ts>
    <user>U41NK9BM4</user>
    <text>There’s `datetime` and `datetime-local` it is helps :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T11:25:19.208381</ts>
    <user>U41NK9BM4</user>
    <text>But really, my suggestion was that if this was really blocking you there are temporary shortcuts.</text>
  </message>
  <message>
    <ts>2017-06-27T11:28:12.283261</ts>
    <user>U382GQ6KH</user>
    <text>&lt;@U41NK9BM4&gt; nice suggestion. i'm thinking too hard that i forgot these simple solutions. thank very much :smile:</text>
  </message>
  <message>
    <ts>2017-06-27T11:29:06.307511</ts>
    <user>U41NK9BM4</user>
    <text>Support is not so good, that’s why is a temporary patch: &lt;https://caniuse.com/#search=datetime&gt;    :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T11:29:17.312209</ts>
    <user>U5DJNFLUD</user>
    <text>New post!</text>
  </message>
  <message>
    <ts>2017-06-27T11:29:19.313013</ts>
    <user>U5DJNFLUD</user>
    <text>&lt;https://blog.reifyworks.com/fuzz-testing-makes-you-a-better-programmer-e065b04e7d32&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T11:32:04.386926</ts>
    <user>U0RPQMZ9S</user>
    <text>&lt;@U5DJNFLUD&gt; &lt;#C0K384K4Y|news-and-links&gt; is also good for such things</text>
  </message>
  <message>
    <ts>2017-06-27T11:35:39.480384</ts>
    <user>U5DJNFLUD</user>
    <text>&lt;@U0RPQMZ9S&gt; Oh cool thanks</text>
  </message>
  <message>
    <ts>2017-06-27T11:39:13.572096</ts>
    <user>U382GQ6KH</user>
    <text>&lt;@U41NK9BM4&gt; 82.67% looks good for me :grimacing:</text>
  </message>
  <message>
    <ts>2017-06-27T11:39:32.580436</ts>
    <user>U41NK9BM4</user>
    <text>Hehehe.</text>
  </message>
  <message>
    <ts>2017-06-27T12:27:35.768490</ts>
    <user>U37HUSJ4R</user>
    <text>I’ve watched a talk by &lt;@U0CL0AS3V&gt; where he mentions that some super long form in the No Red Ink application is much easier in elm than react ever was. I was wondering how the validation for this form is handled? The reason for my question is I am thinking of using Elm for a fairly complex form in my application, I need to do such things as ‘if input x is 5 then throw a error on field y’ 

I’ve noticed in &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Page/Login.elm#L183&gt; Richard is using his validation lib but this only seems to include simple validation rules. Is there an community agreed way on how to handle long/complex forms? Should I find a package? Or will vanilla Elm be enough?</text>
  </message>
  <message>
    <ts>2017-06-27T12:38:14.014116</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; I was wondering how the validation for this form is handled?

we use &lt;http://package.elm-lang.org/packages/rtfeldman/elm-validate/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T12:40:51.072968</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U0CL0AS3V&gt; Thanks for the response :slightly_smiling_face: I assume you then write your own custom validators?</text>
  </message>
  <message>
    <ts>2017-06-27T12:43:14.125891</ts>
    <user>U0CL0AS3V</user>
    <text>yeah when necessary</text>
  </message>
  <message>
    <ts>2017-06-27T12:54:18.378401</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U0CL0AS3V&gt; Am I correct in saying `ifInvalid` is the method used to build up custom validators?</text>
  </message>
  <message>
    <ts>2017-06-27T13:06:53.672366</ts>
    <user>U37HUSJ4R</user>
    <text>could you share an example of a custom validation (if possible, would be a great help :))</text>
  </message>
  <message>
    <ts>2017-06-27T13:11:57.785100</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U37HUSJ4R&gt; Look at the examples.</text>
  </message>
  <message>
    <ts>2017-06-27T13:12:10.789822</ts>
    <user>U0EUHKVGB</user>
    <text>It shows how to make a custom validator for a model</text>
  </message>
  <message>
    <ts>2017-06-27T13:12:31.797927</ts>
    <user>U0EUHKVGB</user>
    <text>```
validateModel : Model -&amp;gt; List (Field, String)
validateModel model =
    Validate.all
        [ .name  &amp;gt;&amp;gt; ifBlank (Name, "Please enter a name.")
        , .email &amp;gt;&amp;gt; ifBlank (Email, "Please enter an email address.")
        , .age   &amp;gt;&amp;gt; ifNotInt (Age, "Age must be a whole number.")
        ]
       model
```</text>
  </message>
  <message>
    <ts>2017-06-27T13:12:32.798105</ts>
    <user>U6083PEG3</user>
    <text>Hello everyone! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T13:13:04.809906</ts>
    <user>U0EUHKVGB</user>
    <text>`.name` is a function that will take the model, and get the `name` field from it</text>
  </message>
  <message>
    <ts>2017-06-27T13:13:16.814451</ts>
    <user>U0EUHKVGB</user>
    <text>`&amp;gt;&amp;gt;` is the syntax for combining two functions into one</text>
  </message>
  <message>
    <ts>2017-06-27T13:14:04.832428</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U37HUSJ4R&gt; If you are just starting with Elm, I would recommend maybe just writing your own code for now.</text>
  </message>
  <message>
    <ts>2017-06-27T13:15:48.871073</ts>
    <user>U37HUSJ4R</user>
    <text>thanks &lt;@U0EUHKVGB&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T13:16:13.879995</ts>
    <user>U37HUSJ4R</user>
    <text>so what would the type signature look like for a custom validator? for example `ifFoo`</text>
  </message>
  <message>
    <ts>2017-06-27T13:16:38.889321</ts>
    <user>U37HUSJ4R</user>
    <text>`ifFoo : Model -&amp;gt; Validator error String`?</text>
  </message>
  <message>
    <ts>2017-06-27T13:17:18.904176</ts>
    <user>U0EUHKVGB</user>
    <text>No, `Validator error String`</text>
  </message>
  <message>
    <ts>2017-06-27T13:17:33.909841</ts>
    <user>U0EUHKVGB</user>
    <text>It is confusing because in that library, `Validator` is a type alias for a function</text>
  </message>
  <message>
    <ts>2017-06-27T13:17:43.913748</ts>
    <user>U0EUHKVGB</user>
    <text>`type alias Validator error  = subject -&amp;gt; List error`</text>
  </message>
  <message>
    <ts>2017-06-27T13:17:56.918597</ts>
    <user>U0EUHKVGB</user>
    <text>notice how `subject -&amp;gt; List error` matches our `validateModel` example</text>
  </message>
  <message>
    <ts>2017-06-27T13:18:17.926392</ts>
    <user>U0EUHKVGB</user>
    <text>where the `subject` is `Model`, and the `error` is `(Field, String)`</text>
  </message>
  <message>
    <ts>2017-06-27T13:18:39.934389</ts>
    <user>U0EUHKVGB</user>
    <text>Does that make sense to you?</text>
  </message>
  <message>
    <ts>2017-06-27T13:18:43.935937</ts>
    <user>U37HUSJ4R</user>
    <text>it does</text>
  </message>
  <message>
    <ts>2017-06-27T13:18:56.940694</ts>
    <user>U0EUHKVGB</user>
    <text>So, our `validateModel` _is_ a custom validator</text>
  </message>
  <message>
    <ts>2017-06-27T13:19:09.945202</ts>
    <user>U0EUHKVGB</user>
    <text>it just doesn’t take an error message, which the other validators do</text>
  </message>
  <message>
    <ts>2017-06-27T13:20:45.980831</ts>
    <user>U37HUSJ4R</user>
    <text>so if I wanted to create my own `if..` where I could pass my model and then do a custom assertion, what would that look like?</text>
  </message>
  <message>
    <ts>2017-06-27T13:22:46.026446</ts>
    <user>U0EUHKVGB</user>
    <text>```
validateModel : Model -&amp;gt; List (Field, String)
validateModel model =
    Validate.all
        [ .name  &amp;gt;&amp;gt; ifBlank (Name, "Please enter a name.")
        , .email &amp;gt;&amp;gt; ifBlank (Email, "Please enter an email address.")
        , .age   &amp;gt;&amp;gt; ifNotInt (Age, "Age must be a whole number.")
        ]
       model
```</text>
  </message>
  <message>
    <ts>2017-06-27T13:23:05.034019</ts>
    <user>U0EUHKVGB</user>
    <text>This _is_ a custom assertion</text>
  </message>
  <message>
    <ts>2017-06-27T13:23:22.040352</ts>
    <user>U37HUSJ4R</user>
    <text>what if I wanted</text>
  </message>
  <message>
    <ts>2017-06-27T13:23:35.045151</ts>
    <user>U37HUSJ4R</user>
    <text>`.age   &amp;gt;&amp;gt; ifNumberIsGreaterThan (Age, "Age must be a whole number.")`</text>
  </message>
  <message>
    <ts>2017-06-27T13:23:43.048372</ts>
    <user>U37HUSJ4R</user>
    <text>where `ifNumberIsGreaterThan` is my own function</text>
  </message>
  <message>
    <ts>2017-06-27T13:25:27.088880</ts>
    <user>U0EUHKVGB</user>
    <text>```
ifNumberIsGreaterThanTen : error -&amp;gt; (number -&amp;gt; List error)
ifNumberIsGreaterThanTen error =
  \number -&amp;gt; if number &amp;gt; 10 then [] else [ error ]
```</text>
  </message>
  <message>
    <ts>2017-06-27T13:25:50.097287</ts>
    <user>U0EUHKVGB</user>
    <text>which is the same as `ifNumberIsGreaterThanTen : error -&amp;gt; Validator error number`</text>
  </message>
  <message>
    <ts>2017-06-27T13:26:25.110926</ts>
    <user>U37HUSJ4R</user>
    <text>:smile:</text>
  </message>
  <message>
    <ts>2017-06-27T13:26:52.121495</ts>
    <user>U0EUHKVGB</user>
    <text>Does that make sense to you?</text>
  </message>
  <message>
    <ts>2017-06-27T13:27:13.129084</ts>
    <user>U37HUSJ4R</user>
    <text>yeh, you’ve been a great help. thanks kind sir</text>
  </message>
  <message>
    <ts>2017-06-27T14:21:26.403626</ts>
    <user>U4JT89FGB</user>
    <text>validate’s `all` function says, regardless the number of errors, return me all of them</text>
  </message>
  <message>
    <ts>2017-06-27T15:49:44.361590</ts>
    <user>U2LAL86AY</user>
    <text>hmm this is odd:
```
test s =
    Just s
        |&amp;gt; Maybe.map
            (\s -&amp;gt;
                Debug.log "just clause" s
            )
        |&amp;gt; Maybe.withDefault (Debug.log "nothing clause" "")

```
and when i run it:
```
&amp;gt; test "bu"
nothing clause: ""
just clause: "bu"
"bu" : String
&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-06-27T15:50:19.373714</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; eager language :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-27T15:50:38.380407</ts>
    <user>U3SJEDR96</user>
    <text>every expression that has all of its parameters available is executed</text>
  </message>
  <message>
    <ts>2017-06-27T15:51:30.398846</ts>
    <user>U2LAL86AY</user>
    <text>i was reling on the `Maybe.withDefault` to do a `Debug.crash`.-&amp;gt; and every time when it run - even with a `Just value` - it was crashing my app .. good to know :smile:</text>
  </message>
  <message>
    <ts>2017-06-27T15:52:08.412091</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, you'd have to do that in a `case of` (or, better yet, _not at all_ ; ))</text>
  </message>
  <message>
    <ts>2017-06-27T15:57:18.524802</ts>
    <user>U2LAL86AY</user>
    <text>ok so just to underestand - `case of statements` are not eagerly evaluated. And also `functions that are generated by function application`. 
And also `if else` i think. 

But any other expressions will have this behavior?</text>
  </message>
  <message>
    <ts>2017-06-27T16:00:34.599009</ts>
    <user>U2LAL86AY</user>
    <text>hmm also doing this doesn't help :
```
test s =
    Just s
        |&amp;gt; Maybe.map
            (\s -&amp;gt;
                Debug.log "just clause" s
            )
        |&amp;gt; Maybe.withDefault
            (let
                _ =
                    Debug.crash "nothing clause" ""
             in
                ""
            )
```</text>
  </message>
  <message>
    <ts>2017-06-27T16:01:33.621632</ts>
    <user>U0LPMPL2U</user>
    <text>I don't think `let`  `in` is lazy</text>
  </message>
  <message>
    <ts>2017-06-27T16:02:07.634416</ts>
    <user>U23SA861Y</user>
    <text>I like how all of this discussion is necessary simply because a function with sideeffects exists.</text>
  </message>
  <message>
    <ts>2017-06-27T16:33:32.302328</ts>
    <user>U37HUSJ4R</user>
    <text>is there an online tool where you can see the compiled JS elm creates?</text>
  </message>
  <message>
    <ts>2017-06-27T16:33:47.307388</ts>
    <user>U37HUSJ4R</user>
    <text>something like &lt;https://lebab.io/try-it&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T18:44:41.527170</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U37HUSJ4R&gt; Not that I know of, but I will usually compile with elm-make and then look at the JS output in my text editor when I need to do that.</text>
  </message>
  <message>
    <ts>2017-06-27T18:47:48.564562</ts>
    <user>U0EUHKVGB</user>
    <text>There was something that luke hadmade a while ago to do just that.</text>
  </message>
  <message>
    <ts>2017-06-27T19:57:02.295372</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U37HUSJ4R&gt; There is this documentation that I started writing to cover some of the info required: &lt;https://github.com/eeue56/elm-ffi/tree/master/docs#elm-compiled-documentation&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T02:16:27.036907</ts>
    <user>U3KSN5MAL</user>
    <text>what was that library for checking an old model against the new model and discarding anything that doesn't match?</text>
  </message>
  <message>
    <ts>2017-06-28T02:37:25.211010</ts>
    <user>U3KSN5MAL</user>
    <text>oh, is it elm-validate?</text>
  </message>
  <message>
    <ts>2017-06-28T03:44:34.929225</ts>
    <user>U5Q42DDMJ</user>
    <text>Is it possible to combine union types and extensible records?</text>
  </message>
  <message>
    <ts>2017-06-28T03:44:52.933069</ts>
    <user>U5Q42DDMJ</user>
    <text>Here are my types:
```
type alias Entity a =
    { a | uuid : String }


type ApiState a
    = Saved a
    | Saving a Bool
```</text>
  </message>
  <message>
    <ts>2017-06-28T03:45:35.942701</ts>
    <user>U5Q42DDMJ</user>
    <text>I can write something like that then : 
```
type alias ApiEntity a =
    ApiState (Entity a)
```</text>
  </message>
  <message>
    <ts>2017-06-28T03:46:01.947911</ts>
    <user>U5Q42DDMJ</user>
    <text>but I get errors such as ```Hint: Looks like a record is missing the `uuid` field.```</text>
  </message>
  <message>
    <ts>2017-06-28T03:46:01.948053</ts>
    <user>U3SJEDR96</user>
    <text>I think that should work, yes</text>
  </message>
  <message>
    <ts>2017-06-28T03:47:43.969454</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3BzRvvyshnya1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T03:49:05.986242</ts>
    <user>U5Q42DDMJ</user>
    <text>yes it works but not in every case</text>
  </message>
  <message>
    <ts>2017-06-28T03:49:38.993146</ts>
    <user>U5Q42DDMJ</user>
    <text>I'll try to reduce my problem to a simple example I can share</text>
  </message>
  <message>
    <ts>2017-06-28T03:50:15.000902</ts>
    <user>U3SJEDR96</user>
    <text>In every case where you actually _have_  a uuid field, that should work. If you can share something that doesn't, I'm sure we can help figure out what goes wrong :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T03:51:42.019264</ts>
    <user>U5Q42DDMJ</user>
    <text>it's when I try to use type constructor like Saved on an Entity for instance</text>
  </message>
  <message>
    <ts>2017-06-28T03:51:51.021241</ts>
    <user>U5Q42DDMJ</user>
    <text>bu yes I'm working on a small example</text>
  </message>
  <message>
    <ts>2017-06-28T03:53:32.042844</ts>
    <user>U0CLDU8UB</user>
    <text>Maybe this is the problematic situation? &lt;https://ellie-app.com/3BzWtRXHTdJa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T04:00:45.140915</ts>
    <user>U5Q42DDMJ</user>
    <text>Here it is:</text>
  </message>
  <message>
    <ts>2017-06-28T04:00:47.141254</ts>
    <user>U5Q42DDMJ</user>
    <text>&lt;https://ellie-app.com/3BzX7Fs78m5a1/2&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T04:02:48.169616</ts>
    <user>U3SJEDR96</user>
    <text>`fromList` can't work on `users`, since that's a `List User`, not `List (Entity User)`</text>
  </message>
  <message>
    <ts>2017-06-28T04:02:59.172063</ts>
    <user>U3SJEDR96</user>
    <text>OH wait</text>
  </message>
  <message>
    <ts>2017-06-28T04:03:07.173955</ts>
    <user>U3SJEDR96</user>
    <text>nevermind that</text>
  </message>
  <message>
    <ts>2017-06-28T04:03:31.179543</ts>
    <user>U5Q42DDMJ</user>
    <text>yes but I thought that's what extensible records were for</text>
  </message>
  <message>
    <ts>2017-06-28T04:06:30.220345</ts>
    <user>U1B8JE3Q9</user>
    <text>&lt;@U5Q42DDMJ&gt; I think the clue is in the error message:
```The type annotation for userEntities says it is a:

List UserEntity

But the definition (shown above) is a:

List (ApiEntity { username : String })```</text>
  </message>
  <message>
    <ts>2017-06-28T04:07:35.234980</ts>
    <user>U1B8JE3Q9</user>
    <text>Since the type variable in `Entity a` is a row type, your type alias should be `type alias UserEntity = ApiEntity {username : String}`</text>
  </message>
  <message>
    <ts>2017-06-28T04:09:29.260901</ts>
    <user>U5Q42DDMJ</user>
    <text>I'm not sure to get it</text>
  </message>
  <message>
    <ts>2017-06-28T04:10:01.267902</ts>
    <user>U5Q42DDMJ</user>
    <text>Ideally I don't want to change my `User` type which contains an uuid already</text>
  </message>
  <message>
    <ts>2017-06-28T04:10:15.271317</ts>
    <user>U5Q42DDMJ</user>
    <text>and so is an `Entity` no?</text>
  </message>
  <message>
    <ts>2017-06-28T04:10:24.273774</ts>
    <user>U1B8JE3Q9</user>
    <text>`User == Entity { username : String }`</text>
  </message>
  <message>
    <ts>2017-06-28T04:11:08.283992</ts>
    <user>U0CLDU8UB</user>
    <text>The only problem you have is the annotation on fromList. Change it to `fromList : List a -&amp;gt; List (ApiState a)` and it compiles.</text>
  </message>
  <message>
    <ts>2017-06-28T04:11:59.296030</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;https://ellie-app.com/3BBdsVGkq6da1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T04:12:06.297607</ts>
    <user>U5Q42DDMJ</user>
    <text>ok but that's weird</text>
  </message>
  <message>
    <ts>2017-06-28T04:12:20.300876</ts>
    <user>U5Q42DDMJ</user>
    <text>the type shouldn't be constrained on `a` ?</text>
  </message>
  <message>
    <ts>2017-06-28T04:13:32.317408</ts>
    <user>U0CLDU8UB</user>
    <text>The more specific version `fromList : List User -&amp;gt; List UserEntity` works too</text>
  </message>
  <message>
    <ts>2017-06-28T04:13:37.318562</ts>
    <user>U5Q42DDMJ</user>
    <text>ah I didn't see you changed ApiEntity to ApiState</text>
  </message>
  <message>
    <ts>2017-06-28T04:13:41.319389</ts>
    <user>U5Q42DDMJ</user>
    <text>of course it compiles</text>
  </message>
  <message>
    <ts>2017-06-28T04:13:49.321269</ts>
    <user>U5Q42DDMJ</user>
    <text>but that's not what I want</text>
  </message>
  <message>
    <ts>2017-06-28T04:14:32.331262</ts>
    <user>U0CLDU8UB</user>
    <text>what do you want?</text>
  </message>
  <message>
    <ts>2017-06-28T04:19:04.394294</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5Q42DDMJ&gt; `type alias ApiEntity a = ApiState (Entity a)` if `a` _is_ an `Entity something` means you have `Entity (Entity something)`, no?</text>
  </message>
  <message>
    <ts>2017-06-28T04:20:28.413911</ts>
    <user>U5Q42DDMJ</user>
    <text>ah yes brilliant &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T04:20:58.421123</ts>
    <user>U1B8JE3Q9</user>
    <text>&lt;@U5Q42DDMJ&gt; if you expand the type aliases you have , you get the following:
```
type UserEntity = ApiEntity User
{substitute ApiEntity}
type UserEntity = ApiState (Entity User)
{substitute Entity}
type UserEntity = ApiState ( User | uuid : String }
type UserEntity = ApiState ( username : String , uuid : String, uuid : String }
```</text>
  </message>
  <message>
    <ts>2017-06-28T04:21:02.421965</ts>
    <user>U5Q42DDMJ</user>
    <text>&lt;@U1B8JE3Q9&gt; your solution was working but I need to redefine everything twice (for `User` and then for `UserEntity` )</text>
  </message>
  <message>
    <ts>2017-06-28T04:21:49.433093</ts>
    <user>U5Q42DDMJ</user>
    <text>&lt;@U1B8JE3Q9&gt;  yes :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T04:23:15.452238</ts>
    <user>U5Q42DDMJ</user>
    <text>but the compiler would be more helpful if it said "Looks like a record has 2 fields uuid" instead of "missing a uuid field"</text>
  </message>
  <message>
    <ts>2017-06-28T04:23:19.453457</ts>
    <user>U5Q42DDMJ</user>
    <text>thx!!</text>
  </message>
  <message>
    <ts>2017-06-28T04:24:04.463962</ts>
    <user>U1B8JE3Q9</user>
    <text>I'm actually a bit surprised it lets you define that</text>
  </message>
  <message>
    <ts>2017-06-28T04:27:37.515292</ts>
    <user>U5Q42DDMJ</user>
    <text>anyway thanks folks for the help, very much appreciated! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T04:36:48.652205</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U1B8JE3Q9&gt; I think there's an open bug that you can currently have a record with duplicate fields, actually</text>
  </message>
  <message>
    <ts>2017-06-28T04:43:33.751044</ts>
    <user>U3SJEDR96</user>
    <text>`type alias Foo = { a : String, a : Int }` &amp;lt;- even with conflicting types, actually :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-06-28T05:25:15.379724</ts>
    <user>U41NK9BM4</user>
    <text>Oops.</text>
  </message>
  <message>
    <ts>2017-06-28T05:38:00.567550</ts>
    <user>U0NCP4NC9</user>
    <text>did we have elm-make 64bit?   my project showing "elm-make.exe: out of memory" on win10</text>
  </message>
  <message>
    <ts>2017-06-28T05:41:08.613466</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0NCP4NC9&gt;, if it is out of memory then there is something else wrong</text>
  </message>
  <message>
    <ts>2017-06-28T05:41:30.618812</ts>
    <user>U0EUHKVGB</user>
    <text>Does this happen on a particular project?</text>
  </message>
  <message>
    <ts>2017-06-28T05:42:48.637250</ts>
    <user>U4PT7NG4V</user>
    <text>I've seen some out of memory bugs in the compiler repo. Might be worth searching there :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T05:54:48.813392</ts>
    <user>U0NCP4NC9</user>
    <text>&lt;@U0EUHKVGB&gt; 3Q for answer ,  there is so many file in my project , and i changing some like the "foundation"  ... maybe it's to many error will coming out ..   I 'm spliting  piece by piece ..</text>
  </message>
  <message>
    <ts>2017-06-28T06:27:35.261935</ts>
    <user>U0CLDU8UB</user>
    <text>ilias, adrien and enetsee, I'm pretty sure this is a product of a core feature of the record system in Elm. This episode of Elm Town discusses the problem field in more detail: &lt;https://elmtown.github.io/2017/04/26/history-in-elm-town-records-episode-12.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T06:29:48.290055</ts>
    <user>U3SJEDR96</user>
    <text>True, but it's a bug nevertheless (and fixed in `dev` :partypuffin: )</text>
  </message>
  <message>
    <ts>2017-06-28T06:31:44.315423</ts>
    <user>U2LAL86AY</user>
    <text>found a runtime error in the svg library.
```
Svg.svg
            [ class ""
            ]
            []
```
```
bundle.js:12333 Uncaught TypeError: Cannot assign to read only property 'className' of object '#&amp;lt;SVGSVGElement&amp;gt;'
    at applyFacts (bundle.js:12333)
    at render (bundle.js:12262)
    at render (bundle.js:12268)
    at render (bundle.js:12250)
    at bundle.js:13576
    at Object.&amp;lt;anonymous&amp;gt; (bundle.js:10017)
    at Object.def.callback (bundle.js:23128)
    at step (bundle.js:10662)
    at work (bundle.js:10720)
```
So i can't use Html.Attributes.class inside svg element - but this should work according to the type annotation.
```
svg : List (Attribute msg) -&amp;gt; List (Svg msg) -&amp;gt; Html msg
```</text>
  </message>
  <message>
    <ts>2017-06-28T06:32:43.328534</ts>
    <user>U1B8JE3Q9</user>
    <text>isn't that `Svg.Attribute` rather than `Html.Attribute`?</text>
  </message>
  <message>
    <ts>2017-06-28T06:33:38.339979</ts>
    <user>U2LAL86AY</user>
    <text>ah yes that's true.:smile:</text>
  </message>
  <message>
    <ts>2017-06-28T06:35:48.367116</ts>
    <user>U2LAL86AY</user>
    <text>but then is the job ov the compiler to catch this.
```
import Html.Attributes exposing (class)
import Svg
import Svg.Attributes as SA

view : Model -&amp;gt; Html Msg
view model =
    Svg.svg [ class "" ] []
```
Hmm this is the second time i found a run-time exception in the long time - errors are becoming like unicorns in elm :smile:</text>
  </message>
  <message>
    <ts>2017-06-28T06:36:11.371800</ts>
    <user>U3SJEDR96</user>
    <text>yeah, so basically the difference is that `Html.Attributes.class` uses `className` under the hood, while `Svg.Attributes.class` uses `class`</text>
  </message>
  <message>
    <ts>2017-06-28T06:37:23.386923</ts>
    <user>U3SJEDR96</user>
    <text>_but_ `Html.Attribute` (the type) and `Svg.Attribute` (the type) are both simple aliases for `VirtualDom.Property`</text>
  </message>
  <message>
    <ts>2017-06-28T06:37:44.391565</ts>
    <user>U3SJEDR96</user>
    <text>which means you can indeed use them when they don't really make sense</text>
  </message>
  <message>
    <ts>2017-06-28T06:39:09.408674</ts>
    <user>U0CLDU8UB</user>
    <text>That's awesome and cool!</text>
  </message>
  <message>
    <ts>2017-06-28T06:39:10.408705</ts>
    <user>U2LAL86AY</user>
    <text>thanks for explanation</text>
  </message>
  <message>
    <ts>2017-06-28T06:40:06.420120</ts>
    <user>U3SJEDR96</user>
    <text>I know it doesn't really solve your issue, but it's nice to know :wink:</text>
  </message>
  <message>
    <ts>2017-06-28T06:40:43.427740</ts>
    <user>U3SJEDR96</user>
    <text>(also, the html `class` can be safely used multiple times on a single node, and the classes will be appended, but there is no such thing for the svg `class` )</text>
  </message>
  <message>
    <ts>2017-06-28T06:42:07.444805</ts>
    <user>U3SJEDR96</user>
    <text>(as well as the dreaded "_`Module.point.x` gives a compiler error_" thing, btw)</text>
  </message>
  <message>
    <ts>2017-06-28T06:58:15.639319</ts>
    <user>U5GSVKPJS</user>
    <text>Hey folks. Got a bit of an odd one. I have an `&amp;lt;input&amp;gt;` that is a dynamic search query filter box. The problem is, it filters content both above and below the search box. By default, you are viewing all items, and a `&amp;lt;ul&amp;gt;` is above the search box. But the moment you type a search query in, that `&amp;lt;ul&amp;gt;` might entirely disappear. This results in Elm recreating the DOM around that, which creates a _new_ `&amp;lt;input&amp;gt;`, and the input I was just typing in loses focus (as it's destroyed)</text>
  </message>
  <message>
    <ts>2017-06-28T06:58:19.640064</ts>
    <user>U5GSVKPJS</user>
    <text>What should I do to work around this?</text>
  </message>
  <message>
    <ts>2017-06-28T06:58:24.641074</ts>
    <user>U5GSVKPJS</user>
    <text>Key all my top-level elements?</text>
  </message>
  <message>
    <ts>2017-06-28T07:02:37.696272</ts>
    <user>U3SJEDR96</user>
    <text>Hmm. Sounds like you'll need to key enough to ensure that element isn't recreated. assuming you have `ul, input, ul` as siblings, keying those should suffice (as long as the tree that `input` is in isn't destroyed)</text>
  </message>
  <message>
    <ts>2017-06-28T07:33:31.065711</ts>
    <user>U5GSVKPJS</user>
    <text>Keying the top level elements has worked, so I guess I'll do that</text>
  </message>
  <message>
    <ts>2017-06-28T07:33:40.067443</ts>
    <user>U5GSVKPJS</user>
    <text>thanks &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T07:51:38.285270</ts>
    <user>U3AAB7A4C</user>
    <text>hey there, I am writing my first bigger app and stumbled over a problem with combined / recursive union types</text>
  </message>
  <message>
    <ts>2017-06-28T07:53:18.305628</ts>
    <user>U3AAB7A4C</user>
    <text>I have a module ```Data.Button``` which has following types:</text>
  </message>
  <message>
    <ts>2017-06-28T07:53:26.307316</ts>
    <user>U3AAB7A4C</user>
    <text>```
type Size
    = Small
    | Medium
    | Large


type Alignment
    = Left
    | Right
    | NoAlign


type Type
    = Primary
    | Secondary
    | Composed Type Size Alignment
```</text>
  </message>
  <message>
    <ts>2017-06-28T07:54:38.321772</ts>
    <user>U3AAB7A4C</user>
    <text>the Composed tag causes the compiler to drain my resources, couple of minutes to compile / elm-make takes as much RAM that is left</text>
  </message>
  <message>
    <ts>2017-06-28T07:55:19.330263</ts>
    <user>U3AAB7A4C</user>
    <text>over 4 GB of RAM</text>
  </message>
  <message>
    <ts>2017-06-28T07:56:08.340321</ts>
    <user>U17J54S2U</user>
    <text>Hey all, is there any way to do a “cleanup” before an Elm application is destroyed?</text>
  </message>
  <message>
    <ts>2017-06-28T07:56:35.345979</ts>
    <user>U17J54S2U</user>
    <text>I’m using ports to do some stateful stuff.</text>
  </message>
  <message>
    <ts>2017-06-28T07:57:33.357918</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U17J54S2U&gt; no</text>
  </message>
  <message>
    <ts>2017-06-28T07:57:48.361279</ts>
    <user>U0EUHKVGB</user>
    <text>You’ll need to send a message out of the port to say that the elm app is going away.</text>
  </message>
  <message>
    <ts>2017-06-28T07:58:20.367977</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3AAB7A4C&gt; try changing the name of `Type` to something else</text>
  </message>
  <message>
    <ts>2017-06-28T07:58:59.376572</ts>
    <user>U17J54S2U</user>
    <text>Got it</text>
  </message>
  <message>
    <ts>2017-06-28T08:00:39.400233</ts>
    <user>U3AAB7A4C</user>
    <text>&lt;@U0EUHKVGB&gt; okay thanks I’ll try that</text>
  </message>
  <message>
    <ts>2017-06-28T08:00:55.404078</ts>
    <user>U0EUHKVGB</user>
    <text>That’s just a guess. But I actually doubt that is the issue</text>
  </message>
  <message>
    <ts>2017-06-28T08:01:09.407145</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3AAB7A4C&gt; you probably have a large case..of statement or something?</text>
  </message>
  <message>
    <ts>2017-06-28T08:02:37.427910</ts>
    <user>U4PT7NG4V</user>
    <text>I've seen that issue a few times. What's considered a "large" `case .. of`?</text>
  </message>
  <message>
    <ts>2017-06-28T08:03:01.433062</ts>
    <user>U3AAB7A4C</user>
    <text>according to the tag Composed it is and will be large yeah</text>
  </message>
  <message>
    <ts>2017-06-28T08:03:25.439498</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3AAB7A4C&gt; I don’t understand what you mean by that</text>
  </message>
  <message>
    <ts>2017-06-28T08:04:14.450138</ts>
    <user>U3AAB7A4C</user>
    <text>it was kind of larger already, the compiler now says there are missing some branches after minutes of compile time</text>
  </message>
  <message>
    <ts>2017-06-28T08:04:58.460438</ts>
    <user>U3AAB7A4C</user>
    <text>if I remove the last type of the constructor label it’s fast as alwazs</text>
  </message>
  <message>
    <ts>2017-06-28T08:05:00.461019</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U4PT7NG4V&gt; I would say more than 16 branches is worth investigating</text>
  </message>
  <message>
    <ts>2017-06-28T08:05:01.461074</ts>
    <user>U3AAB7A4C</user>
    <text>always</text>
  </message>
  <message>
    <ts>2017-06-28T08:05:17.464867</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3AAB7A4C&gt; Yes, you have too many branches in your case..of</text>
  </message>
  <message>
    <ts>2017-06-28T08:05:22.466111</ts>
    <user>U0EUHKVGB</user>
    <text>Split your pattern matching up.</text>
  </message>
  <message>
    <ts>2017-06-28T08:06:18.478601</ts>
    <user>U0EUHKVGB</user>
    <text>```
typeToString : Type -&amp;gt; String
typeToString type = 
  case type of 
    Primary -&amp;gt; "P"
    Secondary -&amp;gt; "S"
    Composed type2 size alignment -&amp;gt;
       typeToString type2
```</text>
  </message>
  <message>
    <ts>2017-06-28T08:06:19.478792</ts>
    <user>U0EUHKVGB</user>
    <text>etc</text>
  </message>
  <message>
    <ts>2017-06-28T08:10:26.533267</ts>
    <user>U4PT7NG4V</user>
    <text>Oh... I think I might be getting close to that... I'll keep an eye on it</text>
  </message>
  <message>
    <ts>2017-06-28T08:10:58.540508</ts>
    <user>U4PT7NG4V</user>
    <text>I have a fairly large update that handles Http responses. And I've got separate branches for success and failure. Could just combine them</text>
  </message>
  <message>
    <ts>2017-06-28T08:16:27.615374</ts>
    <user>U3AAB7A4C</user>
    <text>&lt;@U0EUHKVGB&gt; I am not sure if my pattern matching is the actual problem..</text>
  </message>
  <message>
    <ts>2017-06-28T08:18:10.638361</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3AAB7A4C&gt; how many branches do you have?</text>
  </message>
  <message>
    <ts>2017-06-28T08:18:49.647078</ts>
    <user>U3AAB7A4C</user>
    <text>21.. and compilers said I need to account for further ones</text>
  </message>
  <message>
    <ts>2017-06-28T08:19:46.660433</ts>
    <user>U3AAB7A4C</user>
    <text>But I dont understand how the way I pattern match influences that the compiler is ‘satisfied’</text>
  </message>
  <message>
    <ts>2017-06-28T08:19:46.660498</ts>
    <user>U0EUHKVGB</user>
    <text>21 is too many</text>
  </message>
  <message>
    <ts>2017-06-28T08:20:46.675383</ts>
    <user>U0EUHKVGB</user>
    <text>Here’s how many branches you need, if you are unrolling them all: 1 + 1 + 3 + 3 + 3 + infinity</text>
  </message>
  <message>
    <ts>2017-06-28T08:21:07.680230</ts>
    <user>U3AAB7A4C</user>
    <text>yeah .. :smile:</text>
  </message>
  <message>
    <ts>2017-06-28T08:21:09.680832</ts>
    <user>U0EUHKVGB</user>
    <text>I’m guessing you are trying to unroll the `type` from the `Composed` branch</text>
  </message>
  <message>
    <ts>2017-06-28T08:21:24.684336</ts>
    <user>U0EUHKVGB</user>
    <text>Don’t do that - simply match it as a variable as I showed in my example</text>
  </message>
  <message>
    <ts>2017-06-28T08:21:39.687869</ts>
    <user>U0EUHKVGB</user>
    <text>and then call your function recursively :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T08:22:17.696756</ts>
    <user>U3AAB7A4C</user>
    <text>ok I’' try, thanks so far, I think I learned the lesson :wink:</text>
  </message>
  <message>
    <ts>2017-06-28T10:37:23.549360</ts>
    <user>U17MHJ12N</user>
    <text>Hello everyone - quick question about structure. In our app we have set of types that I would describe as Data Models, they describe basic entities in our system e.g. Basket and they are stored in modules on their own. We also have a bunch of functions that operate on those types e.g. getTotalCost : Basket -&amp;gt; Float or something. I have tended to co-locate the functions with the types, but others feel the functions should be somewhere else e.g. some sort of Helpers module. Any thoughts?</text>
  </message>
  <message>
    <ts>2017-06-28T10:40:06.619447</ts>
    <user>U0EUHKVGB</user>
    <text>Co-locate them.</text>
  </message>
  <message>
    <ts>2017-06-28T10:40:26.628448</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/noredink/elm-style-guide#data&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T10:41:57.668005</ts>
    <user>U0LPMPL2U</user>
    <text>Elm's core library is organized like this. For example: the `Maybe` type and the functions that operate on it are co-located in the same module.</text>
  </message>
  <message>
    <ts>2017-06-28T10:44:30.734260</ts>
    <user>U0FP80EKB</user>
    <text>I like to colocate things. When I’m updating my system, I generally am focused on a specific thing, like a Basket, so it is nice to know where to look.</text>
  </message>
  <message>
    <ts>2017-06-28T10:44:53.744848</ts>
    <user>U0FP80EKB</user>
    <text>I think of my system in terms of the domain concepts, not in terms of the language constructs.</text>
  </message>
  <message>
    <ts>2017-06-28T10:46:36.791060</ts>
    <user>U17MHJ12N</user>
    <text>Well that's nice, people seem to agree with _me_ - looks like I have some persuading to do.</text>
  </message>
  <message>
    <ts>2017-06-28T10:46:38.792065</ts>
    <user>U4PT7NG4V</user>
    <text>Kinda nice if you want to hide some implementation details too</text>
  </message>
  <message>
    <ts>2017-06-28T10:47:31.814825</ts>
    <user>U41NK9BM4</user>
    <text>It’s cool but I’ve found that sometimes this creates circular references. Not sure if I’m doing it wrong.</text>
  </message>
  <message>
    <ts>2017-06-28T10:47:55.825553</ts>
    <user>U0FP80EKB</user>
    <text>That being said, it seems like there are folks here who are enjoying the whole “Types.elm, Update.elm, Views.elm” stuff.</text>
  </message>
  <message>
    <ts>2017-06-28T10:48:18.836063</ts>
    <user>U17MHJ12N</user>
    <text>I think that's slightly different</text>
  </message>
  <message>
    <ts>2017-06-28T10:48:24.838464</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U41NK9BM4&gt; generally solved with extracting the common stuff</text>
  </message>
  <message>
    <ts>2017-06-28T10:48:48.848865</ts>
    <user>U4PT7NG4V</user>
    <text>I can see a use case for both ways. But I *think* they're for slightly different things.</text>
  </message>
  <message>
    <ts>2017-06-28T10:48:55.851739</ts>
    <user>U0EUHKVGB</user>
    <text>Going crazy with too many modules is a good way to go crazy</text>
  </message>
  <message>
    <ts>2017-06-28T10:48:58.853160</ts>
    <user>U0FP80EKB</user>
    <text>The circular reference often means you are missing an abstraction</text>
  </message>
  <message>
    <ts>2017-06-28T10:49:20.862687</ts>
    <user>U41NK9BM4</user>
    <text>Could well be. I need to take a further look.</text>
  </message>
  <message>
    <ts>2017-06-28T10:49:28.866560</ts>
    <user>U0FP80EKB</user>
    <text>I really liked Evan’s talk from elm europe “life of a file”. That’s the way we do things mostly.</text>
  </message>
  <message>
    <ts>2017-06-28T10:49:50.875957</ts>
    <user>U41NK9BM4</user>
    <text>Yes, it’s a very interesting talk</text>
  </message>
  <message>
    <ts>2017-06-28T10:50:35.896669</ts>
    <user>U4PT7NG4V</user>
    <text>Oh they've posted the talks on Youtube now!</text>
  </message>
  <message>
    <ts>2017-06-28T10:50:52.904597</ts>
    <user>U4PT7NG4V</user>
    <text>Well, that's my evening sorted :smile:</text>
  </message>
  <message>
    <ts>2017-06-28T10:50:56.906108</ts>
    <user>U41NK9BM4</user>
    <text>Ah, great. They were private!</text>
  </message>
  <message>
    <ts>2017-06-28T10:51:18.916115</ts>
    <user>U41NK9BM4</user>
    <text>&lt;https://www.youtube.com/channel/UCT5HLUjjXdqUSUnpblFNOwQ&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T10:51:30.921440</ts>
    <user>U41NK9BM4</user>
    <text>Yes, my evening is sorted too. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T11:35:27.115188</ts>
    <user>U1HSH8SSE</user>
    <text>I think this was a bit rough on Elm - from: &lt;https://elixirforum.com/t/front-end-development-options-2017/3832/49&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T11:38:21.190982</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U1HSH8SSE&gt;, that particular poster has frequented the mailing list and not the Slack, and so they have this weird perception of Elm’s issues.</text>
  </message>
  <message>
    <ts>2017-06-28T11:38:47.201727</ts>
    <user>U0EUHKVGB</user>
    <text>&amp;gt;  Don’t forget it runs on Javascript and javascript is weird, 
Is an entirely weird statement to make. Javascript is to Elm what assembly is to C.</text>
  </message>
  <message>
    <ts>2017-06-28T11:39:04.208746</ts>
    <user>U0EUHKVGB</user>
    <text>Javascript is an implementation detail — Elm is _far_ less like JS than Bucklescript.</text>
  </message>
  <message>
    <ts>2017-06-28T11:39:34.221522</ts>
    <user>U0EUHKVGB</user>
    <text>&amp;gt; event handlers in the DOM break in subtle ways in Elm unless you know just how the DOM works
I would be very interested to know what event handlers these are.</text>
  </message>
  <message>
    <ts>2017-06-28T11:40:05.235037</ts>
    <user>U0EUHKVGB</user>
    <text>&amp;gt; In addition it has a lot of typing-system bugs because it is trying to fake a limited set of typeclasses
That’s not true - it has built in typeclasses for 3 different things. Users are not exposed to them, and cannot write their own.</text>
  </message>
  <message>
    <ts>2017-06-28T11:40:34.248054</ts>
    <user>U0EUHKVGB</user>
    <text>&amp;gt;  slow compilation
This is not true either, unless you run into a compiler bug. Also, work is being done _all the time_ to improve the speed of Elm.</text>
  </message>
  <message>
    <ts>2017-06-28T11:41:16.265807</ts>
    <user>U0EUHKVGB</user>
    <text>Bugs are to be expected in any project, and this poster has chosen to highlight minor ones which _people do not run into_ to make them seem like Elm is broken.</text>
  </message>
  <message>
    <ts>2017-06-28T11:41:59.284364</ts>
    <user>U0EUHKVGB</user>
    <text>They do not do Elm justice at all - Where is the user-friendly error messages for Bucklescript? Where is the purity? Where is elm-format, where is API-locked packages, where is the reactor?</text>
  </message>
  <message>
    <ts>2017-06-28T11:42:04.286240</ts>
    <user>U0QS3QAS3</user>
    <text>Any chance u can reply in the forum itself, Noah? I realise it's extra hassle, but it'd be nice to have a reasoned reply...</text>
  </message>
  <message>
    <ts>2017-06-28T11:42:19.292611</ts>
    <user>U41NK9BM4</user>
    <text>Some are really weird arguments</text>
  </message>
  <message>
    <ts>2017-06-28T11:42:29.296752</ts>
    <user>U0QS3QAS3</user>
    <text>i think Elm is a victim of its own success...</text>
  </message>
  <message>
    <ts>2017-06-28T11:42:33.298852</ts>
    <user>U41NK9BM4</user>
    <text>" Don’t forget it runs on Javascript and javascript is weird”, so we are all doomed, it seems.</text>
  </message>
  <message>
    <ts>2017-06-28T11:42:53.306926</ts>
    <user>U0EUHKVGB</user>
    <text>I hate answering on forums, sadly. Especially when it will come across like a flamewar.</text>
  </message>
  <message>
    <ts>2017-06-28T11:43:06.312569</ts>
    <user>U0QS3QAS3</user>
    <text>yeh ok...</text>
  </message>
  <message>
    <ts>2017-06-28T11:43:28.321674</ts>
    <user>U0EUHKVGB</user>
    <text>But if someone else wants to, I am more than happy to provide editing help on that reply :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T11:43:29.322380</ts>
    <user>U1HSH8SSE</user>
    <text>Agree - This is not my experience with Elm at all and this deserves a well-reflected reply. Why do people flame like this?</text>
  </message>
  <message>
    <ts>2017-06-28T11:43:56.333835</ts>
    <user>U0EUHKVGB</user>
    <text>That particular user probably came to Elm, and expected it to be something other than what it is.</text>
  </message>
  <message>
    <ts>2017-06-28T11:44:32.349054</ts>
    <user>U0EUHKVGB</user>
    <text>It’s very important that we encourage and spread the philosophies of Elm when people start using Elm — otherwise they will only get frustrated or disappointed.</text>
  </message>
  <message>
    <ts>2017-06-28T11:44:39.352316</ts>
    <user>U0QS3QAS3</user>
    <text>i like overmind - but yeh, Elm is not Ocaml - argument over : )</text>
  </message>
  <message>
    <ts>2017-06-28T11:45:10.365671</ts>
    <user>U0EUHKVGB</user>
    <text>It’s okay if they decide they don’t want to use Elm! And it’s our responsiblity as a community to make sure people know what they’re getting in to :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T11:45:24.371953</ts>
    <user>U0QS3QAS3</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-06-28T11:45:49.383132</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U1HSH8SSE&gt; If you are serious about wanting to know why people flame, I would suggest: &lt;http://righteousmind.com/&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T11:45:52.384455</ts>
    <user>U0QS3QAS3</user>
    <text>i think it's seasoned FPers who *sometimes* have differing expectations</text>
  </message>
  <message>
    <ts>2017-06-28T11:45:53.384862</ts>
    <user>U0EUHKVGB</user>
    <text>However, that post is not responsible. None of those issues are big issues in Elm. They are bugs which will be fixed, but aren’t at the top of the list because nobody is running in to them!</text>
  </message>
  <message>
    <ts>2017-06-28T11:47:54.435905</ts>
    <user>U0EUHKVGB</user>
    <text>To be fair, scaling Elm apps has been an issue for newcomers. I myself have raised this as an issue, and so Richard made the SPA Example, Evan talked about scaling up a file at Elm Europe, and Richard talked about scaling up an application at Elm Europe</text>
  </message>
  <message>
    <ts>2017-06-28T11:48:31.452030</ts>
    <user>U0EUHKVGB</user>
    <text>So if anyone is thinking of replying, there are now 3 great resources discussing scaling in Elm. I still don’t think it is fixed — but it is also one of the focuses of 0.19.</text>
  </message>
  <message>
    <ts>2017-06-28T11:50:55.515042</ts>
    <user>U41NK9BM4</user>
    <text>Sometimes I feel that Elm is “oversold”, and so then come disappointment.</text>
  </message>
  <message>
    <ts>2017-06-28T11:51:41.534795</ts>
    <user>U41NK9BM4</user>
    <text>Like this expcept: “...Like, ultra amazing. If you code compiles, it works!”</text>
  </message>
  <message>
    <ts>2017-06-28T11:52:12.548294</ts>
    <user>U41NK9BM4</user>
    <text>I would not approach things that way.</text>
  </message>
  <message>
    <ts>2017-06-28T11:52:13.548307</ts>
    <user>U4PT7NG4V</user>
    <text>FWIW, that's often my experience. Unless I've done something silly :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T11:52:49.564045</ts>
    <user>U41NK9BM4</user>
    <text>It’s a difficult balance</text>
  </message>
  <message>
    <ts>2017-06-28T11:54:12.598975</ts>
    <user>U0EUHKVGB</user>
    <text>Actually, my talk at OsloElmDay covered this: &lt;https://www.youtube.com/watch?v=FUHlnxQJTMM&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T11:54:27.605363</ts>
    <user>U0EUHKVGB</user>
    <text>Somewhat :slightly_smiling_face: Pitching for “you don’t need to write the whole world in Elm”</text>
  </message>
  <message>
    <ts>2017-06-28T11:54:46.613216</ts>
    <user>U41NK9BM4</user>
    <text>Still to see it, my fault!</text>
  </message>
  <message>
    <ts>2017-06-28T11:54:59.618869</ts>
    <user>U0EUHKVGB</user>
    <text>and therefore don’t get disappointed when trying to write something like stateful animations in straight Elm.</text>
  </message>
  <message>
    <ts>2017-06-28T11:55:07.622135</ts>
    <user>U0QS3QAS3</user>
    <text>well, the goal of "it compiles, it works" it much harder, but much more worthwhile, than whatever React / Vue / PureScript claims to do...</text>
  </message>
  <message>
    <ts>2017-06-28T11:55:26.630676</ts>
    <user>U0QS3QAS3</user>
    <text>oh and add it, it's user friendly</text>
  </message>
  <message>
    <ts>2017-06-28T11:55:42.637766</ts>
    <user>U0EUHKVGB</user>
    <text>We should be weary not to fall into a flamewar ourselves</text>
  </message>
  <message>
    <ts>2017-06-28T11:56:17.653085</ts>
    <user>U0EUHKVGB</user>
    <text>Purescript has it’s own goals, and that’s great! Go Purescript! We just happen to prefer Elm’s, for the most part :slightly_smiling_face: And that’s great! Go Elm!</text>
  </message>
  <message>
    <ts>2017-06-28T11:56:32.659008</ts>
    <user>U1HSH8SSE</user>
    <text>I think FP'ers in general should embrace other FP languages, not start flame wars. Posts like this can cause many potential FP'ers avoid FP and attract a few to the language beeing promoted.</text>
  </message>
  <message>
    <ts>2017-06-28T11:57:08.674617</ts>
    <user>U0QS3QAS3</user>
    <text>oh i agree</text>
  </message>
  <message>
    <ts>2017-06-28T11:57:35.686894</ts>
    <user>U0QS3QAS3</user>
    <text>i see purescript as - "abstract the world - in a more modern way than Haskell"</text>
  </message>
  <message>
    <ts>2017-06-28T11:57:37.687852</ts>
    <user>U4PT7NG4V</user>
    <text>"Why can't we all just ~get along~ keep learning new stuff!"</text>
  </message>
  <message>
    <ts>2017-06-28T11:58:01.698333</ts>
    <user>U0QS3QAS3</user>
    <text>yeh, i would love to spend more time w purescript / ocaml etc : )</text>
  </message>
  <message>
    <ts>2017-06-28T11:59:22.734047</ts>
    <user>U0QS3QAS3</user>
    <text>i just think, ppl don't "get" the furrow Elm is trying to plough - perhaps because it's sorta unique</text>
  </message>
  <message>
    <ts>2017-06-28T12:00:39.770300</ts>
    <user>U0EUHKVGB</user>
    <text>This theme song from a kids TV from the 90s sums it up for me: &lt;https://www.youtube.com/watch?v=7zkX6kfnWbk&gt;

“Everyday when you’re walking down the street, everybody that you meet
Has an original point of view
What a wonderful kind of day, where you can learn to work and play, and get along with each other
Open up your eyes, open up your ears
Get together and make things better by working together”</text>
  </message>
  <message>
    <ts>2017-06-28T12:00:46.773521</ts>
    <user>U3LUC6SNS</user>
    <text>I think it is best to emphasize the positive and the factual and to mostly ignore the negative.  One of the things that struck me at Elm Europe were the reports from companies that were doing mission-critical work with Elm.  I forget the names and details, but for example there was the talk by the CTO of a company that does broadcast video distribution ...  These are the stories that should be told.  Meanwhile, let's build great apps and get out the good word on them.</text>
  </message>
  <message>
    <ts>2017-06-28T12:01:58.805559</ts>
    <user>U0QS3QAS3</user>
    <text>yup true, i suppose compared to JS, all these arguments are largely academic : )</text>
  </message>
  <message>
    <ts>2017-06-28T12:02:46.826908</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3LUC6SNS&gt;, I think that the negative needs to be assessed to see how much of an issue it really is. If it’s a reported bug, great. If it’s an ideological issue, what is the differences that people run into? If it’s a bug that hasn’t been reported, report it! If someone is stuck trying to solve something, how and _why_ are they stuck?</text>
  </message>
  <message>
    <ts>2017-06-28T12:03:02.833851</ts>
    <user>U0EUHKVGB</user>
    <text>This feedback is especially important to help Elm grow as a language.</text>
  </message>
  <message>
    <ts>2017-06-28T12:03:23.842779</ts>
    <user>U17MSA88M</user>
    <text>`largely academic` &amp;lt;- what does that even mean though. We use this stuff to build better software, period. Everyone on this Slack has experienced that. Where it originated doesn't matter for its usefulness at all</text>
  </message>
  <message>
    <ts>2017-06-28T12:03:31.845906</ts>
    <user>U0EUHKVGB</user>
    <text>If no problems were raised, then nothing would be fixed</text>
  </message>
  <message>
    <ts>2017-06-28T12:04:12.863252</ts>
    <user>U3LUC6SNS</user>
    <text>True!  I just think we should avoid the flames. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T12:04:52.879945</ts>
    <user>U0EUHKVGB</user>
    <text>Avoid the flames, but at the same time, ensure that experience reports are accurate</text>
  </message>
  <message>
    <ts>2017-06-28T12:05:12.888505</ts>
    <user>U0QS3QAS3</user>
    <text>&lt;@U17MSA88M&gt; oh I mean that the improvement vis a vis JS are so large, whether you jump to PureScript or Elm etc, that the pluses or minuses /between/ FP languages can be quite marginal</text>
  </message>
  <message>
    <ts>2017-06-28T12:05:34.898098</ts>
    <user>U0EUHKVGB</user>
    <text>It’s okay to say “Hey, this post about Elm being bad at X is a misrepresentation because Y”. It’s not okay to say “Hey, this post is awful cause purescript is awful and so is anyone who uses it!”</text>
  </message>
  <message>
    <ts>2017-06-28T12:10:09.007830</ts>
    <user>U4PT7NG4V</user>
    <text>The latter sounds like the sort of thing Linus Torvalds would say</text>
  </message>
  <message>
    <ts>2017-06-28T12:14:57.121701</ts>
    <user>U41NK9BM4</user>
    <text>Yeah. The man about the commenting style the networking code: “I’m sure that looks really nice if you are out of your mind on LSD” ~ Linus  (&lt;https://lkml.org/lkml/2016/7/8/625&gt;)</text>
  </message>
  <message>
    <ts>2017-06-28T12:23:09.313185</ts>
    <user>U0EUHKVGB</user>
    <text>Linus can do what he wants -- it's his community. That is not our community. </text>
  </message>
  <message>
    <ts>2017-06-28T12:27:16.410085</ts>
    <user>U0QS3QAS3</user>
    <text>maybe if Elm took a page out of Ruby's book, just repeat developer-happiness over and over again, linke a Hari-Krishna style mantra...</text>
  </message>
  <message>
    <ts>2017-06-28T12:27:35.417495</ts>
    <user>U0QS3QAS3</user>
    <text>then ppl would finally understand : )</text>
  </message>
  <message>
    <ts>2017-06-28T12:28:46.444799</ts>
    <user>U4PT7NG4V</user>
    <text>Maybe if Evan would pull a Steve Ballmer....</text>
  </message>
  <message>
    <ts>2017-06-28T12:29:00.450450</ts>
    <user>U3Z3A2TM5</user>
    <text>I kind of agree with Linus, although his delivery of his opinion is not very diplomatic</text>
  </message>
  <message>
    <ts>2017-06-28T12:30:50.494769</ts>
    <user>U3Z3A2TM5</user>
    <text>&lt;@U0QS3QAS3&gt; It's undeniable that the Ruby language grew in popularity largely due to how they chose to write their documentation.  I think it was a smart move, and maybe Elm *should* do that</text>
  </message>
  <message>
    <ts>2017-06-28T12:31:36.512699</ts>
    <user>U0J1M0F32</user>
    <text>simongustavsson: Developers Developers Developers</text>
  </message>
  <message>
    <ts>2017-06-28T12:31:54.519610</ts>
    <user>U0EUHKVGB</user>
    <text>I think we are reaching the start of &lt;#C0CJ671HU|random&gt; category, though I know the line is blury</text>
  </message>
  <message>
    <ts>2017-06-28T12:31:56.520258</ts>
    <user>U0J1M0F32</user>
    <text>This is feeling a bit &lt;#C0CJ671HU|random&gt; (?)</text>
  </message>
  <message>
    <ts>2017-06-28T12:32:00.521879</ts>
    <user>U0J1M0F32</user>
    <text>lol</text>
  </message>
  <message>
    <ts>2017-06-28T12:34:20.575858</ts>
    <user>U17MHJ12N</user>
    <text>Don't agree with much that he said, but I will say that I am still facing very slow (and deteriorating) build times. Fingers tightly crossed for 0.19</text>
  </message>
  <message>
    <ts>2017-06-28T12:35:01.590464</ts>
    <user>U0QS3QAS3</user>
    <text>imo they're comparable to react build times... not great, but not terrible</text>
  </message>
  <message>
    <ts>2017-06-28T12:35:18.596674</ts>
    <user>U0QS3QAS3</user>
    <text>*react-babel or whatever</text>
  </message>
  <message>
    <ts>2017-06-28T12:37:17.641371</ts>
    <user>U17MHJ12N</user>
    <text>I think I must have something pathological going on I just don't know what it is. I have 60,000 lines of typescript that compiles in no time, but Elm takes up to 2 minutes for ~20,000 lines.</text>
  </message>
  <message>
    <ts>2017-06-28T12:38:46.674606</ts>
    <user>U0QS3QAS3</user>
    <text>suspect TS is the best of the best</text>
  </message>
  <message>
    <ts>2017-06-28T12:39:51.698956</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U17MHJ12N&gt;, there are numerous speed improvements coming in 0.19</text>
  </message>
  <message>
    <ts>2017-06-28T12:40:25.711786</ts>
    <user>U0EUHKVGB</user>
    <text>However, based on what you previously discussed in here regarding modules, it might be that you have simply too many modules.</text>
  </message>
  <message>
    <ts>2017-06-28T12:40:49.721178</ts>
    <user>U0EUHKVGB</user>
    <text>It could also be that you have large case..of statements, which takes elm-make a while to digest.</text>
  </message>
  <message>
    <ts>2017-06-28T12:41:06.727840</ts>
    <user>U0EUHKVGB</user>
    <text>Do you have a rough idea of how many files you have?</text>
  </message>
  <message>
    <ts>2017-06-28T12:41:38.739822</ts>
    <user>U17MHJ12N</user>
    <text>but interestingly one way to reduce the size of you case statements is to have more modules. Hang on, let me run elm-analyse on it quickly</text>
  </message>
  <message>
    <ts>2017-06-28T12:44:41.807586</ts>
    <user>U17MHJ12N</user>
    <text>237 modules, 1103 imports</text>
  </message>
  <message>
    <ts>2017-06-28T12:45:46.832734</ts>
    <user>U0FP80EKB</user>
    <text>whoa!</text>
  </message>
  <message>
    <ts>2017-06-28T12:45:50.834177</ts>
    <user>U0FP80EKB</user>
    <text>237 modules?</text>
  </message>
  <message>
    <ts>2017-06-28T12:46:16.843884</ts>
    <user>U0J1M0F32</user>
    <text>:eyes:</text>
  </message>
  <message>
    <ts>2017-06-28T12:46:25.847278</ts>
    <user>U0FP80EKB</user>
    <text>I’d love to see the structure</text>
  </message>
  <message>
    <ts>2017-06-28T12:46:41.852999</ts>
    <user>U0EUHKVGB</user>
    <text>Is that including tests, &lt;@U17MHJ12N&gt;?</text>
  </message>
  <message>
    <ts>2017-06-28T12:47:24.869284</ts>
    <user>U17MHJ12N</user>
    <text>don't hate me, but we don't have any tests. The compiler seems to do enough for us so far.</text>
  </message>
  <message>
    <ts>2017-06-28T12:47:54.880507</ts>
    <user>U0EUHKVGB</user>
    <text>Okay, so for that amount of code, I would say that you have a lot of modules.</text>
  </message>
  <message>
    <ts>2017-06-28T12:48:15.888239</ts>
    <user>U0FP80EKB</user>
    <text>No, no hate at all. I’m personally interested in seeing the structure you have.</text>
  </message>
  <message>
    <ts>2017-06-28T12:48:30.894357</ts>
    <user>U0FP80EKB</user>
    <text>That is, say, around 100 lines per module?</text>
  </message>
  <message>
    <ts>2017-06-28T12:48:33.895651</ts>
    <user>U0EUHKVGB</user>
    <text>~90 lines of code per file on average is extremely small</text>
  </message>
  <message>
    <ts>2017-06-28T12:49:10.909223</ts>
    <user>U0EUHKVGB</user>
    <text>A good place to start: put decoders/encoders in the same file as the `Data` file.</text>
  </message>
  <message>
    <ts>2017-06-28T12:49:18.912477</ts>
    <user>U0FP80EKB</user>
    <text>Ah, so, for example, we tend to group our encoders/decoders in with the record</text>
  </message>
  <message>
    <ts>2017-06-28T12:49:25.914998</ts>
    <user>U0FP80EKB</user>
    <text>Since they tend to be changed together</text>
  </message>
  <message>
    <ts>2017-06-28T12:49:30.917039</ts>
    <user>U0EUHKVGB</user>
    <text>e.g if you have a `Barrow` or whatever, then `decodeBarrow` should be in there too</text>
  </message>
  <message>
    <ts>2017-06-28T12:49:52.925156</ts>
    <user>U0EUHKVGB</user>
    <text>There’s your slowness right there!</text>
  </message>
  <message>
    <ts>2017-06-28T12:50:11.932615</ts>
    <user>U0FP80EKB</user>
    <text>Interesting.</text>
  </message>
  <message>
    <ts>2017-06-28T12:50:37.943106</ts>
    <user>U0FP80EKB</user>
    <text>It would make a fascinating screencast to walk through and collapse some of these together, see the impact.</text>
  </message>
  <message>
    <ts>2017-06-28T12:50:44.945616</ts>
    <user>U17MHJ12N</user>
    <text>But it seems mildly disappointing to have to restrict the way you choose to structure and organise your code due for compiler reasons.</text>
  </message>
  <message>
    <ts>2017-06-28T12:51:06.953663</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U17MHJ12N&gt;, you can do that if you want. But parsing more files than needed is always going to be slower.</text>
  </message>
  <message>
    <ts>2017-06-28T12:51:24.960317</ts>
    <user>U0EUHKVGB</user>
    <text>For each new file you add, for each new imports you have in that file, the more work that has to be done by the compiler.</text>
  </message>
  <message>
    <ts>2017-06-28T12:51:50.970311</ts>
    <user>U0EUHKVGB</user>
    <text>The file structure you are following right now is kind-of an anti-pattern. i suspect you have a lot of boilerplate ATM</text>
  </message>
  <message>
    <ts>2017-06-28T12:51:53.971639</ts>
    <user>U0FP80EKB</user>
    <text>What is in `Cmds.elm` ?</text>
  </message>
  <message>
    <ts>2017-06-28T12:51:59.973917</ts>
    <user>U0FP80EKB</user>
    <text>And `Actions.elm` ?</text>
  </message>
  <message>
    <ts>2017-06-28T12:52:01.974485</ts>
    <user>U17MHJ12N</user>
    <text>Understood, it just isn't a compromise I am used to having to make in e.g. c#</text>
  </message>
  <message>
    <ts>2017-06-28T12:52:21.982217</ts>
    <user>U0EUHKVGB</user>
    <text>I also suspect that you have large `case..of` statements in there too</text>
  </message>
  <message>
    <ts>2017-06-28T12:52:41.989735</ts>
    <user>U0EUHKVGB</user>
    <text>One day the compiler will be fast enough to not worry about this :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T12:52:45.991425</ts>
    <user>U17MHJ12N</user>
    <text>Actions.elm will define the Msg type for the component. Cmds.elm if it exists will contain kind of api type things</text>
  </message>
  <message>
    <ts>2017-06-28T12:52:56.995420</ts>
    <user>U0FP80EKB</user>
    <text>Do all the components have that similar structure of “Actions/Cmds/Update/View/ViewModels” ?</text>
  </message>
  <message>
    <ts>2017-06-28T12:52:56.995515</ts>
    <user>U0EUHKVGB</user>
    <text>But IMO it’s good that it is slow enough for you to come talk to us about it :smile:</text>
  </message>
  <message>
    <ts>2017-06-28T12:53:06.999192</ts>
    <user>U0QS3QAS3</user>
    <text>optimising files for compile times seems a bit odd - but everythingÄs a compromise I suppose...</text>
  </message>
  <message>
    <ts>2017-06-28T12:53:19.003909</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U17MHJ12N&gt; I would definitely merge Actions and Update</text>
  </message>
  <message>
    <ts>2017-06-28T12:53:19.004082</ts>
    <user>U17MHJ12N</user>
    <text>I certainly _could_ collapse some of these things, just wasn't aware that I would actually _have_ to.</text>
  </message>
  <message>
    <ts>2017-06-28T12:53:36.010208</ts>
    <user>U0EUHKVGB</user>
    <text>You don’t gain much by having them seperate.</text>
  </message>
  <message>
    <ts>2017-06-28T12:53:39.011119</ts>
    <user>U0FP80EKB</user>
    <text>I would look at collapsing things that change together.</text>
  </message>
  <message>
    <ts>2017-06-28T12:53:42.012144</ts>
    <user>U17MHJ12N</user>
    <text>yes Actions and Update a good place to start I agree</text>
  </message>
  <message>
    <ts>2017-06-28T12:53:59.018768</ts>
    <user>U0EUHKVGB</user>
    <text>I would also investigate how many of these views actually need a `view model`</text>
  </message>
  <message>
    <ts>2017-06-28T12:54:02.019882</ts>
    <user>U0FP80EKB</user>
    <text>So, for example, if changing `Actions` means you have to change `Update` then they can be collapsed together</text>
  </message>
  <message>
    <ts>2017-06-28T12:54:13.023724</ts>
    <user>U0EUHKVGB</user>
    <text>Perhaps they just need a config.</text>
  </message>
  <message>
    <ts>2017-06-28T12:54:19.026357</ts>
    <user>U0EUHKVGB</user>
    <text>Perhaps they don’t even need that</text>
  </message>
  <message>
    <ts>2017-06-28T12:54:28.029741</ts>
    <user>U0EUHKVGB</user>
    <text>It’s hard to say without seeing the code.</text>
  </message>
  <message>
    <ts>2017-06-28T12:54:42.035218</ts>
    <user>U0FP80EKB</user>
    <text>We tend to lean towards structural typing in our view’s signature in place of a view model in a lot of places.</text>
  </message>
  <message>
    <ts>2017-06-28T12:54:56.040406</ts>
    <user>U0FP80EKB</user>
    <text>Then move to a full-blown view model when it gets very complicated</text>
  </message>
  <message>
    <ts>2017-06-28T12:55:20.050057</ts>
    <user>U0EUHKVGB</user>
    <text>I would _also_ recommend that if your code can be published as a package, using things as packages can (sometimes) cut down build times quite a bit.</text>
  </message>
  <message>
    <ts>2017-06-28T12:56:08.068182</ts>
    <user>U17MHJ12N</user>
    <text>we could package our auto completer and some other bits I think</text>
  </message>
  <message>
    <ts>2017-06-28T12:57:01.088216</ts>
    <user>U17MHJ12N</user>
    <text>OK some things to try. I'm reasonably content as long as the aspiration is that I _should_ be able to structure the code however I want and not have too serious a problem. Thanks for the advice.</text>
  </message>
  <message>
    <ts>2017-06-28T12:58:05.112542</ts>
    <user>U0EUHKVGB</user>
    <text>Well, it depends: I think anti-patterns are a good thing to discourage :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T12:58:22.119187</ts>
    <user>U0EUHKVGB</user>
    <text>But also: the compiler is always getting faster</text>
  </message>
  <message>
    <ts>2017-06-28T12:58:24.120035</ts>
    <user>U0FP80EKB</user>
    <text>So, for comparison, our system has 12kloc and 75 modules</text>
  </message>
  <message>
    <ts>2017-06-28T12:59:31.145465</ts>
    <user>U37HUSJ4R</user>
    <text>Using &lt;@U0FBZ4J5V&gt; great package &lt;http://package.elm-lang.org/packages/krisajenkins/remotedata/4.3.0/RemoteData&gt;, was wondering how people handle things list filtering with this? how can you filter a `WebData (List Foo)`</text>
  </message>
  <message>
    <ts>2017-06-28T12:59:50.152901</ts>
    <user>U17MHJ12N</user>
    <text>Yes that's interesting. It seems quite personal. Had a lively debate today with someone at work who is adamant that things should be in smaller pieces because it is better organisation and better separation of concerns. I see his point. And I certainly get the distaste that this should be dictated by the compiler in the end.</text>
  </message>
  <message>
    <ts>2017-06-28T13:00:06.159696</ts>
    <user>U23SA861Y</user>
    <text>does remote data implement map?</text>
  </message>
  <message>
    <ts>2017-06-28T13:00:24.167300</ts>
    <user>U0FBZ4J5V</user>
    <text>It does. </text>
  </message>
  <message>
    <ts>2017-06-28T13:00:29.169457</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U17MHJ12N&gt; It’s like elm-format — if the compiler does it for you, you no longer need to argue about it at work :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T13:00:36.172631</ts>
    <user>U0FP80EKB</user>
    <text>I’d very much watch Evan’s talk, as I think he puts a good spin on the smaller pieces.</text>
  </message>
  <message>
    <ts>2017-06-28T13:01:02.183251</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U37HUSJ4R&gt; then use map to map in a list filtering function</text>
  </message>
  <message>
    <ts>2017-06-28T13:01:13.187212</ts>
    <user>U17MHJ12N</user>
    <text>I will but it's not on youtube yet is it?</text>
  </message>
  <message>
    <ts>2017-06-28T13:01:44.200107</ts>
    <user>U0FP80EKB</user>
    <text>&lt;https://www.youtube.com/watch?v=2ihTgEYiKpI&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T13:01:49.201924</ts>
    <user>U37HUSJ4R</user>
    <text>this is what I though, but (guess this is aimed at &lt;@U0FBZ4J5V&gt;) how do I transform that back in `WebData` type?</text>
  </message>
  <message>
    <ts>2017-06-28T13:02:00.205891</ts>
    <user>U17MHJ12N</user>
    <text>oh great thanks.</text>
  </message>
  <message>
    <ts>2017-06-28T13:02:18.213425</ts>
    <user>U23SA861Y</user>
    <text>WebData is just a type alias for when your error is a specific type</text>
  </message>
  <message>
    <ts>2017-06-28T13:02:33.219132</ts>
    <user>U17MHJ12N</user>
    <text>I will try to document my steps to improve things and see if it's of interest to anyone.</text>
  </message>
  <message>
    <ts>2017-06-28T13:02:58.228807</ts>
    <user>U0FBZ4J5V</user>
    <text>`RemoteData.map (List.filter f) yourRemoteData` should do it. </text>
  </message>
  <message>
    <ts>2017-06-28T13:03:07.232221</ts>
    <user>U5DJNFLUD</user>
    <text>Ooh thanks &lt;@U0FP80EKB&gt; I'm looking forward to watching that</text>
  </message>
  <message>
    <ts>2017-06-28T13:04:19.259810</ts>
    <user>U37HUSJ4R</user>
    <text>ah perfect, my issue was with my `f` function</text>
  </message>
  <message>
    <ts>2017-06-28T13:04:31.264777</ts>
    <user>U37HUSJ4R</user>
    <text>great thanks &lt;@U0FBZ4J5V&gt; and &lt;@U23SA861Y&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T13:04:37.266904</ts>
    <user>U37HUSJ4R</user>
    <text>love this slack, so helpful!</text>
  </message>
  <message>
    <ts>2017-06-28T13:06:30.310185</ts>
    <user>U0J1M0F32</user>
    <text>coreyhaines: I'd be very interested in a state-of-elm style survey that only asks for LOCs, modules, and 3rd party packages.</text>
  </message>
  <message>
    <ts>2017-06-28T13:10:51.408155</ts>
    <user>U37HUSJ4R</user>
    <text>is there a tried and tested pattern for handling something like a reset button? Say I had a Msg that filtered all the even ids, I want to then reset back to all again. I could have two props on my model, `data` and `originalData` and just never update `originalData` but kind of feels wrong</text>
  </message>
  <message>
    <ts>2017-06-28T13:11:44.428559</ts>
    <user>U0FP80EKB</user>
    <text>I would have `data` and `filteredData` as a first pass</text>
  </message>
  <message>
    <ts>2017-06-28T13:11:55.432428</ts>
    <user>U23SA861Y</user>
    <text>either that or a seperate view mask</text>
  </message>
  <message>
    <ts>2017-06-28T13:12:13.439164</ts>
    <user>U0FP80EKB</user>
    <text>Although, I’d probably do something like (very much pseudo code to get the names there)
```
type Data = Data original filtered
```</text>
  </message>
  <message>
    <ts>2017-06-28T13:12:28.444839</ts>
    <user>U0FP80EKB</user>
    <text>Yeah, or do the filtering at the view level, which is what I would start with.</text>
  </message>
  <message>
    <ts>2017-06-28T13:12:29.445522</ts>
    <user>U0J1M0F32</user>
    <text>Or `data` and a `filter` which is a union type of the kind of filter, then the filter is applied dynamically. (Only works if its a small data set)</text>
  </message>
  <message>
    <ts>2017-06-28T13:12:42.450152</ts>
    <user>U0FP80EKB</user>
    <text>Ask why you need to keep the filtered data vs just the filters and apply them when rendering</text>
  </message>
  <message>
    <ts>2017-06-28T13:12:49.452925</ts>
    <user>U0J1M0F32</user>
    <text>`type Filter = All | Unread | Replied | None`</text>
  </message>
  <message>
    <ts>2017-06-28T13:13:05.458745</ts>
    <user>U0FP80EKB</user>
    <text>caching the filtered data feels like an optimization that leads to this potentially unnecessary complexity</text>
  </message>
  <message>
    <ts>2017-06-28T13:13:34.469731</ts>
    <user>U23SA861Y</user>
    <text>yeah this, apply the filter at render time</text>
  </message>
  <message>
    <ts>2017-06-28T13:13:54.477305</ts>
    <user>U37HUSJ4R</user>
    <text>so don’t have a filter msg?</text>
  </message>
  <message>
    <ts>2017-06-28T13:14:04.480740</ts>
    <user>U0FP80EKB</user>
    <text>We have a situation like this in our system, and we just store which filter they want (since we have a set number)</text>
  </message>
  <message>
    <ts>2017-06-28T13:14:23.488061</ts>
    <user>U0FP80EKB</user>
    <text>I would have a filter msg `Filter FilterType`</text>
  </message>
  <message>
    <ts>2017-06-28T13:14:27.489458</ts>
    <user>U37HUSJ4R</user>
    <text>instead of doing it in the update, do in a view type function?</text>
  </message>
  <message>
    <ts>2017-06-28T13:14:31.491070</ts>
    <user>U0FP80EKB</user>
    <text>Then, in your model, store the `currentFilterType : FilterType`</text>
  </message>
  <message>
    <ts>2017-06-28T13:14:43.495208</ts>
    <user>U0FP80EKB</user>
    <text>Save what filter they are looking for, not the filtered data.</text>
  </message>
  <message>
    <ts>2017-06-28T13:14:48.497030</ts>
    <user>U0FP80EKB</user>
    <text>Then, when rendering the view, filter the data</text>
  </message>
  <message>
    <ts>2017-06-28T13:14:52.498629</ts>
    <user>U37HUSJ4R</user>
    <text>nice</text>
  </message>
  <message>
    <ts>2017-06-28T13:14:54.499456</ts>
    <user>U37HUSJ4R</user>
    <text>I like it!</text>
  </message>
  <message>
    <ts>2017-06-28T13:15:12.506366</ts>
    <user>U0FP80EKB</user>
    <text>`filter : FilterType -&amp;gt; Data -&amp;gt; Data`</text>
  </message>
  <message>
    <ts>2017-06-28T13:15:36.515364</ts>
    <user>U0FP80EKB</user>
    <text>The general approach is to calculate everything you can until you need to optimise. Then insert a cache.</text>
  </message>
  <message>
    <ts>2017-06-28T13:27:48.796581</ts>
    <user>U37HUSJ4R</user>
    <text>just implemented that soluition &lt;@U0FP80EKB&gt;, really nice and elegant!</text>
  </message>
  <message>
    <ts>2017-06-28T13:30:03.849434</ts>
    <user>U3SJEDR96</user>
    <text>It's basically also how elm-sortable-table works, fyi.</text>
  </message>
  <message>
    <ts>2017-06-28T13:30:28.860633</ts>
    <user>U3SJEDR96</user>
    <text>if time comes to optimize, a light salting of `lazy` and possible `keyed` should do the trick</text>
  </message>
  <message>
    <ts>2017-06-28T13:43:33.165996</ts>
    <user>U0FP80EKB</user>
    <text>yup</text>
  </message>
  <message>
    <ts>2017-06-28T14:04:45.677147</ts>
    <user>U3GHR2G91</user>
    <text>hey everyone.  i have a quick question.  does Elm have any particular solutions for problems related to windowing, a la Reacts `fixed-data-table` or `react-virtualized`?</text>
  </message>
  <message>
    <ts>2017-06-28T14:06:28.719378</ts>
    <user>U0FP80EKB</user>
    <text>what are those?</text>
  </message>
  <message>
    <ts>2017-06-28T14:06:33.721750</ts>
    <user>U0FP80EKB</user>
    <text>Just something like `List.filter` ?</text>
  </message>
  <message>
    <ts>2017-06-28T14:06:55.730378</ts>
    <user>U0LPMPL2U</user>
    <text>From a quick look at `react-virtualized`'s GitHub page, it seems kinda like Elm's `Html.Lazy` ?</text>
  </message>
  <message>
    <ts>2017-06-28T14:07:16.738678</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U3GHR2G91&gt; what do they do?</text>
  </message>
  <message>
    <ts>2017-06-28T14:07:58.754712</ts>
    <user>U0JFGGZS6</user>
    <text>is it something like  &lt;http://package.elm-lang.org/packages/FabienHenon/elm-infinite-list-view/latest&gt; ?</text>
  </message>
  <message>
    <ts>2017-06-28T14:09:28.789454</ts>
    <user>U3GHR2G91</user>
    <text>let's say you have a long list</text>
  </message>
  <message>
    <ts>2017-06-28T14:09:41.794324</ts>
    <user>U3GHR2G91</user>
    <text>with sorting or something like that</text>
  </message>
  <message>
    <ts>2017-06-28T14:09:46.796559</ts>
    <user>U3GHR2G91</user>
    <text>ahh, hold on, brb</text>
  </message>
  <message>
    <ts>2017-06-28T14:10:47.820182</ts>
    <user>U0FP80EKB</user>
    <text>I bet the answer is `List.filter` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T14:11:21.833392</ts>
    <user>U0EUHKVGB</user>
    <text>don’t jump to conclusions, folks</text>
  </message>
  <message>
    <ts>2017-06-28T14:11:34.838317</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3GHR2G91&gt;, what are you trying to do?</text>
  </message>
  <message>
    <ts>2017-06-28T14:12:02.849039</ts>
    <user>U3GHR2G91</user>
    <text>let's say you have a very long list, it doesn't make sense to pay the cost of rendering every item</text>
  </message>
  <message>
    <ts>2017-06-28T14:12:17.854971</ts>
    <user>U3GHR2G91</user>
    <text>these solutions give you an aperture (i.e. calculate the portion of you rlist that is visible in browser)</text>
  </message>
  <message>
    <ts>2017-06-28T14:12:32.861003</ts>
    <user>U3GHR2G91</user>
    <text>it can vastly improve perf</text>
  </message>
  <message>
    <ts>2017-06-28T14:12:50.867757</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3GHR2G91&gt; have you run in to this as a real issue in Elm yet?</text>
  </message>
  <message>
    <ts>2017-06-28T14:13:15.877267</ts>
    <user>U3GHR2G91</user>
    <text>nope</text>
  </message>
  <message>
    <ts>2017-06-28T14:13:30.883076</ts>
    <user>U3GHR2G91</user>
    <text>but i have in React, using immutable data structures</text>
  </message>
  <message>
    <ts>2017-06-28T14:13:47.889566</ts>
    <user>U3GHR2G91</user>
    <text>i could put together a POC pretty easily</text>
  </message>
  <message>
    <ts>2017-06-28T14:13:54.892415</ts>
    <user>U0EUHKVGB</user>
    <text>That would be best :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T14:14:15.900948</ts>
    <user>U0EUHKVGB</user>
    <text>There are many possible ways to solve a problem like this, hence why you got three different answers.</text>
  </message>
  <message>
    <ts>2017-06-28T14:14:37.909337</ts>
    <user>U0EUHKVGB</user>
    <text>However, the best way to know how to solve your problem is to have an example of _your_ problem :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T14:22:10.085382</ts>
    <user>U0JFGGZS6</user>
    <text>has anyone worked on a stats package in elm?  even basic descriptive stats?</text>
  </message>
  <message>
    <ts>2017-06-28T14:22:46.098661</ts>
    <user>U0JFGGZS6</user>
    <text>I found &lt;http://package.elm-lang.org/packages/myrho/elm-statistics/latest&gt;  but it looks like just a bare beginning</text>
  </message>
  <message>
    <ts>2017-06-28T14:23:19.112260</ts>
    <user>U5DJNFLUD</user>
    <text>&lt;@U0JFGGZS6&gt; I'm using that for R7 but would appreciate more :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T14:24:10.131616</ts>
    <user>U0JFGGZS6</user>
    <text>I played around with implementing quantiles last night off the wikipedia page</text>
  </message>
  <message>
    <ts>2017-06-28T14:24:32.140374</ts>
    <user>U0JFGGZS6</user>
    <text>(amazing how little stats you need to know if you have some formulas/algorithms!)</text>
  </message>
  <message>
    <ts>2017-06-28T14:26:37.189617</ts>
    <user>U0JFGGZS6</user>
    <text>but ended up with a lot of questions in my mind about api design. which is maybe where I should ask these questions -&amp;gt; &lt;#C2MFMKHDX|api-design&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T14:26:53.195819</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;https://runelm.io/c/66v&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T14:30:09.273617</ts>
    <user>U3SJEDR96</user>
    <text>You probably don't need a phantom type there, tbh. It doesn't really add anything at this point :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T14:32:24.328185</ts>
    <user>U0JFGGZS6</user>
    <text>OK, this was one of my basic questions. With stats functions you often need a sorted list/array. And often you need it at several different points. So rather than sort multiple times, it makes sense to require that the calling context pass it in sorted.</text>
  </message>
  <message>
    <ts>2017-06-28T14:33:30.354037</ts>
    <user>U0JFGGZS6</user>
    <text>The phantom type there was a way of enforcing that the passed in list is sorted</text>
  </message>
  <message>
    <ts>2017-06-28T14:35:09.393093</ts>
    <user>U0LPMPL2U</user>
    <text>I'm not sure I understand how that type enforces that the list is sorted? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T14:35:54.410482</ts>
    <user>U0JFGGZS6</user>
    <text>you would have to call `Quantiles.sort myData`  to pass your data in to `quantile`</text>
  </message>
  <message>
    <ts>2017-06-28T14:35:58.412265</ts>
    <user>U23SA861Y</user>
    <text>at present it doesn't but if this was in a module and the FVector constructor was not exported then it would have to be obtained by that modules sort call</text>
  </message>
  <message>
    <ts>2017-06-28T14:36:22.421288</ts>
    <user>U0JFGGZS6</user>
    <text>right exactly</text>
  </message>
  <message>
    <ts>2017-06-28T14:36:48.431372</ts>
    <user>U0LPMPL2U</user>
    <text>Ah, so it's a way to tag data to say "this has already been through our sort function" ?</text>
  </message>
  <message>
    <ts>2017-06-28T14:36:58.435044</ts>
    <user>U0JFGGZS6</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-06-28T14:37:05.437773</ts>
    <user>U0LPMPL2U</user>
    <text>nice!</text>
  </message>
  <message>
    <ts>2017-06-28T14:38:06.461239</ts>
    <user>U0LPMPL2U</user>
    <text>that's clever, I wouldn't have thought of that :thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-28T14:39:12.486430</ts>
    <user>U0LPMPL2U</user>
    <text>What is the advantage of:
```
type Sorted= Sorted

type FVector sorted = FVector (List Float)
```

versus something like:

```
type Sorted = Sorted (List Float)
```</text>
  </message>
  <message>
    <ts>2017-06-28T14:39:33.494786</ts>
    <user>U0LPMPL2U</user>
    <text>does it give you flexibility to tag with multiple different sortings/non-sortings?</text>
  </message>
  <message>
    <ts>2017-06-28T14:40:03.506303</ts>
    <user>U3SJEDR96</user>
    <text>Basically you can also write function that work on an `FVector`, regardless of if its sorted or not</text>
  </message>
  <message>
    <ts>2017-06-28T14:40:06.507753</ts>
    <user>U0JFGGZS6</user>
    <text>well I guess I was thinking for other purposes (not here) you might want a sorted `(List String)` etc.</text>
  </message>
  <message>
    <ts>2017-06-28T14:40:53.525929</ts>
    <user>U0JFGGZS6</user>
    <text>right that too.</text>
  </message>
  <message>
    <ts>2017-06-28T14:41:46.546003</ts>
    <user>U0JFGGZS6</user>
    <text>the other question that seems to come up often with stats function is whether you are acting on a `List (Maybe Float)` or `List Float`.</text>
  </message>
  <message>
    <ts>2017-06-28T14:42:02.552154</ts>
    <user>U0JFGGZS6</user>
    <text>i.e. dealing with missing values</text>
  </message>
  <message>
    <ts>2017-06-28T14:44:15.602431</ts>
    <user>U23SA861Y</user>
    <text>umm, doesn't nan exist for that reason</text>
  </message>
  <message>
    <ts>2017-06-28T14:47:04.667715</ts>
    <user>U0JFGGZS6</user>
    <text>Well `R` distinguishes null and NaN I think... and anyway looking at their quantile function, they deal with missing values and NaN within the function rather than force you to strip them out first.</text>
  </message>
  <message>
    <ts>2017-06-28T14:48:24.698394</ts>
    <user>U0JFGGZS6</user>
    <text>so there are a whole set of concerns that a stats library would have to work out...</text>
  </message>
  <message>
    <ts>2017-06-28T14:49:23.720636</ts>
    <user>U0JFGGZS6</user>
    <text>that's why I was hoping someone else had worked them out before :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T15:43:34.898946</ts>
    <user>U2LAL86AY</user>
    <text>can somebody explain what `EveryDict` is supposed to do? is explained here in : &lt;http://package.elm-lang.org/packages/Gizra/elm-dictlist/2.0.0/EveryDictList&gt;
But i can't find it on package elm'</text>
  </message>
  <message>
    <ts>2017-06-28T15:44:34.920018</ts>
    <user>U2LAL86AY</user>
    <text>`EveryDict` and `EveryDictList` are presented as different things. But first i want to underestand the `EveryDict`</text>
  </message>
  <message>
    <ts>2017-06-28T15:45:28.938549</ts>
    <user>U0LPMPL2U</user>
    <text>So the regular `Dict` in Elm only allows `comparable` values as keys</text>
  </message>
  <message>
    <ts>2017-06-28T15:45:39.942313</ts>
    <user>U0LPMPL2U</user>
    <text>this means you can't use union type values as keys</text>
  </message>
  <message>
    <ts>2017-06-28T15:46:46.965347</ts>
    <user>U2LAL86AY</user>
    <text>so we are just messing with the `key`. that's it.</text>
  </message>
  <message>
    <ts>2017-06-28T15:47:09.973138</ts>
    <user>U0LPMPL2U</user>
    <text>`AllDict` is an third-party library that gets around this by providing a conversion function that allows you convert your union types into `comparable` values</text>
  </message>
  <message>
    <ts>2017-06-28T15:47:31.980591</ts>
    <user>U0LPMPL2U</user>
    <text>`EveryDict` is like an `AllDict` but always uses `toString` as the conversion function</text>
  </message>
  <message>
    <ts>2017-06-28T15:47:48.986630</ts>
    <user>U3SJEDR96</user>
    <text>fwiw, that package does not give you the same performance guarantees as regular dict; just so you know :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T15:48:06.992974</ts>
    <user>U0LPMPL2U</user>
    <text>check out &lt;http://package.elm-lang.org/packages/eeue56/elm-all-dict/latest&gt; for more details on both `AllDict` and `EveryDict`</text>
  </message>
  <message>
    <ts>2017-06-28T15:52:02.076695</ts>
    <user>U2LAL86AY</user>
    <text>it is possible to have a data structure that acts as a `list` - but can be `accessed from both ends` - and also it has `dict` like keys? I don't know it's name.</text>
  </message>
  <message>
    <ts>2017-06-28T15:53:36.110665</ts>
    <user>U2SR9DL7Q</user>
    <text>i think that's typically called a deque... at least in other languages like python</text>
  </message>
  <message>
    <ts>2017-06-28T15:53:49.115473</ts>
    <user>U2LAL86AY</user>
    <text>aa so it exists :smile:</text>
  </message>
  <message>
    <ts>2017-06-28T15:54:55.138924</ts>
    <user>U3SJEDR96</user>
    <text>doesn't really have dict-like keys, though, it's basically two lists that work together to make a *d*ouble *e*nded queue</text>
  </message>
  <message>
    <ts>2017-06-28T15:58:52.225304</ts>
    <user>U4F64AKQV</user>
    <text>It depends on the implementation. If it is doubly linked, then each node just has a pointer to the previous and next node in the list.</text>
  </message>
  <message>
    <ts>2017-06-28T15:59:37.242436</ts>
    <user>U4F64AKQV</user>
    <text>Doing something like that would be hard in Elm though.</text>
  </message>
  <message>
    <ts>2017-06-28T16:00:46.270360</ts>
    <user>U2LAL86AY</user>
    <text>I think sometimes is useful to have this 2 abilities :for example in my case i have a chat with messages - and because is a crazy layout i need to calculate the height of the chat.. 
So I will `add the new message to the bottom`. And `read` the height of the chat `from the beginning to the first message`. And i want to be able to `delete` stuff like in a dict. `Just by providing the id`.
So it would be nice to have this deque with keys if possible. I don't fully underestand why it's not implemented as  a library yet. Could it be that such a thing is not performant?

This data-structure will be at the core of what i need to do, and it needs to be rely performant. THis is why i want to delete the messages by id and not go trough all the list for finding that id.</text>
  </message>
  <message>
    <ts>2017-06-28T16:01:32.287941</ts>
    <user>U2SR9DL7Q</user>
    <text>yeah... the advantage of a deque is O(1) time for certain operations on both ends. I'm not certain how to provide both that _and_ dict functionality though. Still not as great at custom types in elm as I am in python.</text>
  </message>
  <message>
    <ts>2017-06-28T16:01:34.288346</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U2LAL86AY&gt; What you want sounds almost like an ordered dict?</text>
  </message>
  <message>
    <ts>2017-06-28T16:02:31.309644</ts>
    <user>U2LAL86AY</user>
    <text>oh yes and should also be ordered.</text>
  </message>
  <message>
    <ts>2017-06-28T16:02:45.314876</ts>
    <user>U2LAL86AY</user>
    <text>but can i access this ordered dict form the front and from the back?</text>
  </message>
  <message>
    <ts>2017-06-28T16:04:39.356881</ts>
    <user>U2LAL86AY</user>
    <text>&lt;http://package.elm-lang.org/packages/wittjosiah/elm-ordered-dict/1.0.0/OrderedDict&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T16:05:38.377816</ts>
    <user>U2LAL86AY</user>
    <text>this doesn't seem to have a way to access elements in a certain direction.</text>
  </message>
  <message>
    <ts>2017-06-28T16:06:03.386658</ts>
    <user>U2SR9DL7Q</user>
    <text>the main purpose of an ordered dict typically is the order preservation for later recall of items in the same order they were placed. it's access behaviour mimics the standard list, not a double ended list.</text>
  </message>
  <message>
    <ts>2017-06-28T16:06:54.404776</ts>
    <user>U2LAL86AY</user>
    <text>Yes seems that way, i don't think this datastructure is implemented yet. But what i'm more interesteed to know is : 
Why that is the case - is not performant enough? it is not a good idea?</text>
  </message>
  <message>
    <ts>2017-06-28T16:07:34.419148</ts>
    <user>U0LPMPL2U</user>
    <text>Likely because of low demand for such a data structure?</text>
  </message>
  <message>
    <ts>2017-06-28T16:07:55.426488</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U2LAL86AY&gt; Which data structure? There are already some packages for deque implementations.</text>
  </message>
  <message>
    <ts>2017-06-28T16:09:37.461947</ts>
    <user>U2SR9DL7Q</user>
    <text>i've never heard of anyone wanting a deque dictionary before. I'm sure it's been done, but it's not common enough to be made a standard feature. typically, the 'dict' type in a language is a hash anyway, so the advantage of optimized sequencial access from both ends is limited.</text>
  </message>
  <message>
    <ts>2017-06-28T16:10:46.486307</ts>
    <user>U2LAL86AY</user>
    <text>yes i see : &lt;http://package.elm-lang.org/packages/folkertdev/elm-deque/1.0.1/Deque&gt;
Ah ok, i wanted to know if there is some mathematical limitation to this. Like is not worth it not only because is rare but mainly because is bad design. Or something that i don't fully underestand.</text>
  </message>
  <message>
    <ts>2017-06-28T16:11:35.503186</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U2SR9DL7Q&gt; i never needed a `dict-deque?` - just this project is a little bit more crazy :smile:</text>
  </message>
  <message>
    <ts>2017-06-28T16:11:40.505179</ts>
    <user>U2SR9DL7Q</user>
    <text>perhaps there may be a way to combine the deque you've presented with that orderec dict type</text>
  </message>
  <message>
    <ts>2017-06-28T16:13:18.540232</ts>
    <user>U2SR9DL7Q</user>
    <text>but also, what if you simply started with the ordered dict, _and then_ checked performance. then, if it turns out you dont need more optimal performance, you saved the time of messing around with custom data types.</text>
  </message>
  <message>
    <ts>2017-06-28T16:14:36.567401</ts>
    <user>U2SR9DL7Q</user>
    <text>my old mentor would warn me against finding the *most* performant structures before verifying that i actually needed them. otherwise  i had a habit of spending way too much time pre-optimizing.</text>
  </message>
  <message>
    <ts>2017-06-28T16:20:17.688343</ts>
    <user>U2LAL86AY</user>
    <text>Yes i agree with that in general, but actually for what i need here - i think will use a `deque` - 

because i need this height calculation to be very performant (will mostly be calculating the first few items and then stop.) - and the function doing this will be called a lot.
- and also because is better for pushing new messages into the back. I need the order.

And the dict part - i only wanted that for convenience. See what's available. But anyways - nice explanations, thanks everybody :smile:</text>
  </message>
  <message>
    <ts>2017-06-28T16:23:13.750048</ts>
    <user>U0F01KLV6</user>
    <text>If you need to access elements at the end, what's wrong with an Array?</text>
  </message>
  <message>
    <ts>2017-06-28T16:24:20.773451</ts>
    <user>U2SR9DL7Q</user>
    <text>sounds good &lt;@U2LAL86AY&gt; . sorry I couldnt be more help. I used deques in a small game with similar requirements and it worked out great though.</text>
  </message>
  <message>
    <ts>2017-06-28T16:24:41.781364</ts>
    <user>U0F01KLV6</user>
    <text>The regular `Dict` in elm is also ordered.</text>
  </message>
  <message>
    <ts>2017-06-28T16:25:03.789021</ts>
    <user>U0F01KLV6</user>
    <text>No wait, sorry, I misunderstood what you meant.</text>
  </message>
  <message>
    <ts>2017-06-28T16:25:56.807852</ts>
    <user>U0F01KLV6</user>
    <text>But really, you could do the thing you want with a `Dict`.</text>
  </message>
  <message>
    <ts>2017-06-28T16:26:06.811246</ts>
    <user>U0F01KLV6</user>
    <text>Just make the `id` a timestamp.</text>
  </message>
  <message>
    <ts>2017-06-28T16:26:22.816610</ts>
    <user>U0F01KLV6</user>
    <text>`Dict` keys are stored in sorted order.</text>
  </message>
  <message>
    <ts>2017-06-28T16:28:09.854607</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0F01KLV6&gt; would aion be able to access the first element in the dict and the last element with equal performance? that seems to be the core value being sought out.</text>
  </message>
  <message>
    <ts>2017-06-28T16:28:21.859107</ts>
    <user>U0F01KLV6</user>
    <text>yes, he would</text>
  </message>
  <message>
    <ts>2017-06-28T16:28:49.868920</ts>
    <user>U0F01KLV6</user>
    <text>Problem is that one would need to know "what" the first and last element is. But other than that.</text>
  </message>
  <message>
    <ts>2017-06-28T16:35:19.009701</ts>
    <user>U0F01KLV6</user>
    <text>You could probably do it with a list as well. It seems you're only adding at one end? Do you know a list is not fast enough?</text>
  </message>
  <message>
    <ts>2017-06-28T16:42:20.158634</ts>
    <user>U2LAL86AY</user>
    <text>so let's explore this a bit.

`a :: someList` -&amp;gt; very performant 
`someList ++ [ a ] ` -&amp;gt; adding to the back or reading to the back -&amp;gt; Not performant

`Array.push a someArray` -&amp;gt; add to the back - very performant
`(arrayA) append someOtherArrayB` -&amp;gt; add stuff to the front of an array -  - think is not very performant?! It's like list but reversed?

`a :: deque -&amp;gt; very performant`
`deque :: a -&amp;gt; very performant `----&amp;gt; i assume that's the point of a deque - making things performant when adding or removing them - both form the front - and form the back. So a deque here sould do what array and list does at the same time.

Now the `deque` and `List` miss the dict powers. 
`Dict` is also not ordered - which is exactly what i needed - is ordered by key - but i need the order i made the insertion - i don't care about alphabetical order.
Now using timestamp as you proposed is a great idea - not sure why i didn't thought about it before:smile:

Hmm not sure about everything here - but please tell me if i got something wrong. 
`Array` has very nice - `dict abilities`, but not custom keys.. so this is my current understanding of out basic data-strcutures in elm.</text>
  </message>
  <message>
    <ts>2017-06-28T16:45:05.216658</ts>
    <user>U0F01KLV6</user>
    <text>Well yeah, but are you actually adding things on both ends?</text>
  </message>
  <message>
    <ts>2017-06-28T16:45:21.222475</ts>
    <user>U0LPMPL2U</user>
    <text>Also it's worth noting that with small enough sizes, none of these performance characteristics matter :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T16:46:03.237260</ts>
    <user>U0F01KLV6</user>
    <text>And are you sure it's going to be too slow? Keep in mind, on my macbook air (slow cpu) I can run through a list of 10.000 elements several thousand times per second.</text>
  </message>
  <message>
    <ts>2017-06-28T16:49:53.318818</ts>
    <user>U2LAL86AY</user>
    <text>yes unthil i try it out i will not know for sure. Some stuff will be calculated on resize (mouse move) - which are a ton of events in a short time - and we will se how it performs when the chats contain lots of messages. Is not one chat - there are many in the same canvas. Just wanted to pick a good enough solution form the start.</text>
  </message>
  <message>
    <ts>2017-06-28T16:50:41.336265</ts>
    <user>U2LAL86AY</user>
    <text>:beers::beers::beers::beers:</text>
  </message>
  <message>
    <ts>2017-06-28T16:50:58.342228</ts>
    <user>U0F01KLV6</user>
    <text>Try doing it the easy way first. Then optimize if that is too slow.</text>
  </message>
  <message>
    <ts>2017-06-28T16:51:28.352370</ts>
    <user>U0F01KLV6</user>
    <text>It might be that rendering the view (creating the Html) is so slow that it doesn't matter what datastructure you use.</text>
  </message>
  <message>
    <ts>2017-06-28T16:52:23.371436</ts>
    <user>U0F01KLV6</user>
    <text>I'm not saying that you shouldn't use a deque, just that you shouldn't pick a datastructure based on performance.</text>
  </message>
  <message>
    <ts>2017-06-28T16:52:28.373448</ts>
    <user>U0F01KLV6</user>
    <text>(at least initially)</text>
  </message>
  <message>
    <ts>2017-06-28T17:00:18.538075</ts>
    <user>U0JL9RPC4</user>
    <text>excepted for obvious reasons (for instance, if you need random accesses, go with `Array`)</text>
  </message>
  <message>
    <ts>2017-06-28T17:01:06.555886</ts>
    <user>U0JL9RPC4</user>
    <text>who said "premature optimization is the root of all evil."?</text>
  </message>
  <message>
    <ts>2017-06-28T17:02:11.579010</ts>
    <user>U0JFGGZS6</user>
    <text>you can always throw it behind an opaque type to limit places you'd have to change if you change the implementation later</text>
  </message>
  <message>
    <ts>2017-06-28T18:15:25.827928</ts>
    <user>U5YDC1YUW</user>
    <text>Yo, so I've got an HTML structure like this:

```
&amp;lt;div class="Quiz"&amp;gt;
    &amp;lt;div class="Quiz__header"&amp;gt;
        &amp;lt;!-- Header stuff --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="Quiz__section"&amp;gt;
        &amp;lt;!-- Question + answers --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="Quiz__section"&amp;gt;
        &amp;lt;!-- Question + answers --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="Quiz__section"&amp;gt;
        &amp;lt;!-- Question + answers --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="Quiz__footer"&amp;gt;
        &amp;lt;!-- Footer stuff --&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-06-28T18:16:06.837417</ts>
    <user>U5YDC1YUW</user>
    <text>what's the best way to dynamically generated those `Quiz__section`'s base off a list on the model?</text>
  </message>
  <message>
    <ts>2017-06-28T18:16:21.840776</ts>
    <user>U5YDC1YUW</user>
    <text>currently I have something looking like this:</text>
  </message>
  <message>
    <ts>2017-06-28T18:16:25.841487</ts>
    <user>U5YDC1YUW</user>
    <text>```
view : Model -&amp;gt; Html Msg
view model =
    div [ class "Quiz" ]
        ((div [ class "Quiz__header" ] [ h3 [] [ text model.heading ] ])
            :: renderSections model
        )
```</text>
  </message>
  <message>
    <ts>2017-06-28T18:16:26.841884</ts>
    <user>U0EUHKVGB</user>
    <text>`List.map viewSection model.secions`</text>
  </message>
  <message>
    <ts>2017-06-28T18:16:35.843753</ts>
    <user>U5YDC1YUW</user>
    <text>but that's missing the footer section still</text>
  </message>
  <message>
    <ts>2017-06-28T18:17:38.858104</ts>
    <user>U0EUHKVGB</user>
    <text>You’ll probably want to do something like this:
```
let
  header = ...
  sections =  List.map viewSection model.sections
  footer = ...
in
  header :: sections ++ [ footer ]
```</text>
  </message>
  <message>
    <ts>2017-06-28T18:20:22.895381</ts>
    <user>U5YDC1YUW</user>
    <text>yeah just ends up looking a bit gnarly... wondering if I shouldn't just wrap the sections in another div then the function returning a list can just be the function call to `renderSections`</text>
  </message>
  <message>
    <ts>2017-06-28T18:20:52.901920</ts>
    <user>U0EUHKVGB</user>
    <text>sure, that’s a valid option</text>
  </message>
  <message>
    <ts>2017-06-28T18:23:12.932011</ts>
    <user>U5YDC1YUW</user>
    <text>```
view : Model -&amp;gt; Html Msg
view model =
    div [ class "Quiz" ]
        [ div [ class "Quiz__header" ] [ h3 [] [ text model.heading ] ]
        , div [] (renderSections model)
        , div [ class "Quiz__footer" ] []
        ]
```</text>
  </message>
  <message>
    <ts>2017-06-28T18:23:21.933983</ts>
    <user>U5YDC1YUW</user>
    <text>Look's a bit nicer I think?</text>
  </message>
  <message>
    <ts>2017-06-28T18:23:38.937530</ts>
    <user>U0EUHKVGB</user>
    <text>Looks great</text>
  </message>
  <message>
    <ts>2017-06-28T18:23:51.940242</ts>
    <user>U0EUHKVGB</user>
    <text>That’s how I would’ve done it :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T18:24:52.953150</ts>
    <user>U5YDC1YUW</user>
    <text>sweet! just trying to figure out best practices here, fairly new to Elm</text>
  </message>
  <message>
    <ts>2017-06-28T19:01:32.405361</ts>
    <user>U5YDC1YUW</user>
    <text>Any good examples out there of POST'ing a JSON payload to an endpoint using HTTP basic auth?</text>
  </message>
  <message>
    <ts>2017-06-28T22:06:40.032201</ts>
    <user>U5YDC1YUW</user>
    <text>Anyone know what the heck is going on here?

```
The 2nd argument to function `send` is causing a mismatch.

19|     Http.send ServerResult
20|&amp;gt;        (Http.request
21|&amp;gt;            { method = "POST"
22|&amp;gt;            , headers = []
23|&amp;gt;            , url = "&lt;http://example.com&gt;"
24|&amp;gt;            , body = Http.emptyBody
25|&amp;gt;            , expect = Http.expectString
26|&amp;gt;            , timeout = Nothing
27|&amp;gt;            , withCredentials = False
28|&amp;gt;            }

Function `send` is expecting the 2nd argument to be:

    Request Msg

But it is:

    Request String
```</text>
  </message>
  <message>
    <ts>2017-06-28T22:11:09.065959</ts>
    <user>U17R26VR8</user>
    <text>here is send: &lt;http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#send&gt;

it’s expecting a `Request a` which is the same as your `Result Error a`</text>
  </message>
  <message>
    <ts>2017-06-28T22:13:29.082658</ts>
    <user>U17R26VR8</user>
    <text>your `ServerResult : Result Error Msg` …. actually i’m confused</text>
  </message>
  <message>
    <ts>2017-06-28T22:14:04.086752</ts>
    <user>U5YDC1YUW</user>
    <text>you and me both</text>
  </message>
  <message>
    <ts>2017-06-28T22:14:11.087591</ts>
    <user>U17R26VR8</user>
    <text>what’s your ServerResult sig?</text>
  </message>
  <message>
    <ts>2017-06-28T22:14:23.088927</ts>
    <user>U5YDC1YUW</user>
    <text>`ServerResult (Result Http.Error Msg)`</text>
  </message>
  <message>
    <ts>2017-06-28T22:14:48.092009</ts>
    <user>U5YDC1YUW</user>
    <text>honestly I don't even know if that's what it's supposed to be?</text>
  </message>
  <message>
    <ts>2017-06-28T22:15:09.094519</ts>
    <user>U5YDC1YUW</user>
    <text>first time trying to do any kind of HTTP request and it's properly rustling my jimmies</text>
  </message>
  <message>
    <ts>2017-06-28T22:15:19.095944</ts>
    <user>U17R26VR8</user>
    <text>crap, gtg… soz will help later if anyone else hasn’t jumped in</text>
  </message>
  <message>
    <ts>2017-06-28T22:28:15.188841</ts>
    <user>U236M9FH9</user>
    <text>&lt;@U5YDC1YUW&gt; Should be `ServerResult (Result Http.Error String)`</text>
  </message>
  <message>
    <ts>2017-06-28T22:29:43.199323</ts>
    <user>U236M9FH9</user>
    <text>Compiler assumes first type is correct(`ServerResult (Result Error Msg)`), so it complains when you give it a `Request String`, even though `Request String` is actually what you want.</text>
  </message>
  <message>
    <ts>2017-06-28T22:31:01.209929</ts>
    <user>U5YDC1YUW</user>
    <text>hmmm true that, found the error really cryptic</text>
  </message>
  <message>
    <ts>2017-06-28T23:11:33.493619</ts>
    <user>U1FCZNA7R</user>
    <text>Hello. I'm trying to setup elm-test in my project using these steps (on Fedora 25): &lt;https://github.com/elm-community/elm-test#running-tests-locally&gt;
But I'm getting the following error after running step 5 (run elm-test):
`Error extracting &lt;https://dl.bintray.com/elmlang/elm-test/0.18.6/linux-x64.tar.gz&gt; - Error: EACCES: permission denied, open '/usr/lib/node_modules/elm-test/bin/elm-interface-to-json'`</text>
  </message>
  <message>
    <ts>2017-06-28T23:13:29.505918</ts>
    <user>U1FCZNA7R</user>
    <text>Anyone has seen/resolved this? Looking at the dir mentioned I see it doesn't exist. Also looking at  `elm-test --help` output suggests that it has been installed</text>
  </message>
  <message>
    <ts>2017-06-28T23:19:21.543968</ts>
    <user>U1FCZNA7R</user>
    <text>Additional info: I had to run `npm install -g elm-test` using `sudo` (otherwise I was getting errors). Another observation: It seems to work when I run the tests using `sudo elm-test` but this doesn't seem desirable</text>
  </message>
  <message>
    <ts>2017-06-29T00:05:16.833491</ts>
    <user>U236M9FH9</user>
    <text>&lt;@U1FCZNA7R&gt; I used to do `npm i -g --prefix ~/.node_modules elm-test` along w/ `PATH="~/.node_modules/bin:$PATH"`, but now I either use NVM or if I have a `package.json` I do `npm i -S elm-test` &amp;amp; add a `"test": "elm-test"`script to `package.json`.</text>
  </message>
  <message>
    <ts>2017-06-29T03:32:27.440058</ts>
    <user>U0D4VR7BP</user>
    <text>I don't know if anybody here plans to visit *Colours of Ostrava* (music festival in Czech Republic), but we're going to do an Elm meetup right before the festival starts! So feel free to come, and/or ping me with any questions :slightly_smiling_face:
&lt;http://blog.newired.com/2017/06/27/3rd-javascript-meetup-ostrava-19-7-2017/&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T03:51:20.674298</ts>
    <user>U2LAL86AY</user>
    <text>if i have a union case with many constructors. and inside a function i do:
```
case union of
    Constructor 1 -&amp;gt; 
    Constructor2 -&amp;gt; 
    ...
```
If my `Constructor 1` is the most `frequent case` for this union. Meaning 95% of the time a value of this type (`union`) will be `Constructor 1`

Does it matter form a performance standpoint to put`Consructor 1` first in the case statement. or is more preformant to add it to the back? - or it doesn't matter? 

So doing this is less performant:
```
case union of
  Constructor2 -&amp;gt; 
  Constructor 1 -&amp;gt;  -- or course i'm talking about 10 -13 constructors here. not just 2. 
  ...
```</text>
  </message>
  <message>
    <ts>2017-06-29T03:54:32.714491</ts>
    <user>U4SM7ECAG</user>
    <text>julianjelfs: I am! I come from the ember world so I tend to split everything into small bits like I did with Ember out of habits :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T03:54:50.718265</ts>
    <user>U0EUHKVGB</user>
    <text>Benchmark.</text>
  </message>
  <message>
    <ts>2017-06-29T03:55:37.728558</ts>
    <user>U17MHJ12N</user>
    <text>OK I'm just averaging some baseline build times now and then will try to incrementally squash things up and see how I can improve it</text>
  </message>
  <message>
    <ts>2017-06-29T03:57:27.752230</ts>
    <user>U4SM7ECAG</user>
    <text>Ok, that will be an interesting "study", I'm curious of how it turns out :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T04:08:50.911141</ts>
    <user>U3SJEDR96</user>
    <text>And once you've done that, figure out if it really matters. If you're writing application code, it seems unlikely that this would make a perceptible difference, and will most likely be completely dwarfed by the cost of rendering..</text>
  </message>
  <message>
    <ts>2017-06-29T05:34:18.185010</ts>
    <user>U17MHJ12N</user>
    <text>Gaaa it's a fine line between consolidating modules and entering into circular reference hell</text>
  </message>
  <message>
    <ts>2017-06-29T06:34:56.040698</ts>
    <user>U5GSVKPJS</user>
    <text>```
The 1st branch has this type:

    elm-make: Type applications without concrete names should not get here.
```</text>
  </message>
  <message>
    <ts>2017-06-29T06:34:57.040958</ts>
    <user>U5GSVKPJS</user>
    <text>amazing.</text>
  </message>
  <message>
    <ts>2017-06-29T06:35:58.053741</ts>
    <user>U0EUHKVGB</user>
    <text>If you want help, you’re going to have to share code :wink:</text>
  </message>
  <message>
    <ts>2017-06-29T06:36:07.055587</ts>
    <user>U5GSVKPJS</user>
    <text>haha, it was more me laughing at the error message</text>
  </message>
  <message>
    <ts>2017-06-29T06:36:46.063173</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/elm-lang/elm-compiler/issues/1390&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T06:36:52.064525</ts>
    <user>U3SJEDR96</user>
    <text>Feels like a result of no kind checking &lt;https://github.com/elm-lang/elm-compiler/issues/1373&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T06:36:53.064697</ts>
    <user>U3SJEDR96</user>
    <text>:smile:</text>
  </message>
  <message>
    <ts>2017-06-29T06:37:46.075400</ts>
    <user>U5GSVKPJS</user>
    <text>```

createFirmware apiContext projectId url name =
    Http.postJson
        (let
            opts =
                Http.defaultJsonArgs apiContext
         in
            { opts
                | path =
                    [ "project-firmware", toString projectId ]
                , value =
                    Just &amp;lt;|
                        EncodeJson.object []
            }
        )
```

Seems to do it. If I comment out the `value` assignment, all is well</text>
  </message>
  <message>
    <ts>2017-06-29T06:51:52.248216</ts>
    <user>U5GSVKPJS</user>
    <text>Now I've got
```
-- TYPE MISMATCH ----------------------------- ././src/Page/Project/Firmware.elm

The right side of (|&amp;gt;) is causing a type mismatch.

69|               Task.sequence (createFirmwares apiContext model.projectId files)
70|&amp;gt;                |&amp;gt; Task.perform (always FirmwareChanged)

(|&amp;gt;) is expecting the right side to be a:

    elm-make: type applications should start with a type atom
```</text>
  </message>
  <message>
    <ts>2017-06-29T06:52:14.252572</ts>
    <user>U5GSVKPJS</user>
    <text>And I'm truly stuck. I'm not sure what to do next, is there any obvious code to look at?</text>
  </message>
  <message>
    <ts>2017-06-29T06:52:28.255381</ts>
    <user>U5GSVKPJS</user>
    <text>I moved `createFirmwares` (and `createFirmware`) to a separate module, and that module now compiles just fine</text>
  </message>
  <message>
    <ts>2017-06-29T06:53:11.264067</ts>
    <user>U5GSVKPJS</user>
    <text>I'll rip out other code from this module and see if it's something else interacting badly</text>
  </message>
  <message>
    <ts>2017-06-29T06:53:14.264911</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5GSVKPJS&gt; My advice when debugging things like this: use more type annotations</text>
  </message>
  <message>
    <ts>2017-06-29T06:53:31.268392</ts>
    <user>U0EUHKVGB</user>
    <text>Put things into let bindings, and write the type signature by hand</text>
  </message>
  <message>
    <ts>2017-06-29T06:54:47.283696</ts>
    <user>U5GSVKPJS</user>
    <text>yea, I did that, and now I'm at this, which is super suspicious:</text>
  </message>
  <message>
    <ts>2017-06-29T06:54:57.285820</ts>
    <user>U5GSVKPJS</user>
    <text>```
Function `createFirmwares` is expecting the 3rd argument to be:

    List { a | name : String, url : String }

But it is:

    List
```</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:04.287347</ts>
    <user>U5GSVKPJS</user>
    <text>I should be able to fix that, but gotta go grab lunch</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:12.288938</ts>
    <user>U5GSVKPJS</user>
    <text>And indeed:</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:14.289427</ts>
    <user>U5GSVKPJS</user>
    <text>`    | FilesUploaded List`</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:19.290565</ts>
    <user>U5GSVKPJS</user>
    <text>Whoops!</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:21.291078</ts>
    <user>U0EUHKVGB</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:23.291361</ts>
    <user>U3SJEDR96</user>
    <text>:smile:</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:26.291948</ts>
    <user>U0EUHKVGB</user>
    <text>It’s a tricky one to debug</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:47.296513</ts>
    <user>U5GSVKPJS</user>
    <text>Is it worth reporting that, or is this particular instance of the bug known?</text>
  </message>
  <message>
    <ts>2017-06-29T06:55:52.297483</ts>
    <user>U0EUHKVGB</user>
    <text>It is known</text>
  </message>
  <message>
    <ts>2017-06-29T06:56:11.301281</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/elm-lang/elm-compiler/issues/1238&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T08:03:22.149355</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5GSVKPJS&gt; Actually, I think it’s worth reporting again. There’s no open issue related to it, and your example is _slightly_ different to the problem the other people have run into (though it is the same core problem)</text>
  </message>
  <message>
    <ts>2017-06-29T08:08:21.218091</ts>
    <user>U2LAL86AY</user>
    <text>it's related with this? &lt;https://stackoverflow.com/questions/44228017/specifying-parametric-type-is-not-enforced-by-the-compiler-is-this-a-bug-or-is&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T08:13:41.292406</ts>
    <user>U0EUHKVGB</user>
    <text>Eh, yes</text>
  </message>
  <message>
    <ts>2017-06-29T08:13:47.293859</ts>
    <user>U0EUHKVGB</user>
    <text>Somewhat</text>
  </message>
  <message>
    <ts>2017-06-29T08:15:09.313285</ts>
    <user>U3SJEDR96</user>
    <text>I've logged that already, tho</text>
  </message>
  <message>
    <ts>2017-06-29T08:15:44.322014</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/elm-compiler/issues/1598&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T08:18:25.359861</ts>
    <user>U0EUHKVGB</user>
    <text>It’s hard to find that issue since it doesn’t contain the error message we got in this case, which means it’s hard to point people to it</text>
  </message>
  <message>
    <ts>2017-06-29T08:18:43.363810</ts>
    <user>U0EUHKVGB</user>
    <text>Perhaps you can add another example which gets the error that ocharles was seeing?</text>
  </message>
  <message>
    <ts>2017-06-29T08:23:36.433574</ts>
    <user>U3SJEDR96</user>
    <text>I'll attempt to create SSCCE's for those errors &lt;@U5GSVKPJS&gt; mentioned, though if I fail at that, I might resort to just mentioning how this can lead to those errors further down the line</text>
  </message>
  <message>
    <ts>2017-06-29T08:26:49.481568</ts>
    <user>U5GSVKPJS</user>
    <text>Thanks &lt;@U3SJEDR96&gt; !</text>
  </message>
  <message>
    <ts>2017-06-29T09:15:19.333798</ts>
    <user>U17MHJ12N</user>
    <text>don't know where to start untangling this!</text>
  </message>
  <message>
    <ts>2017-06-29T09:18:05.389319</ts>
    <user>U17U6GYKW</user>
    <text>Hi folks, I'm gonna teach functional programming at the university and I want to use Elm for that. Any good resource you would recommend?</text>
  </message>
  <message>
    <ts>2017-06-29T09:19:51.425367</ts>
    <user>U0K92QFST</user>
    <text>I'd take a look at this: &lt;https://github.com/rtfeldman/elm-workshop&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T09:47:29.043617</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U17MHJ12N&gt; yikes! Might I recommend looking at each individual pair, seeing if there exists a pair that could have a single thing pulled out that they both rely on. That would break the chain.</text>
  </message>
  <message>
    <ts>2017-06-29T09:47:46.050025</ts>
    <user>U0FP80EKB</user>
    <text>Not sure if that makes sense.</text>
  </message>
  <message>
    <ts>2017-06-29T09:48:13.060658</ts>
    <user>U17MHJ12N</user>
    <text>It does, but this is the thing, that's what led me to having so many modules!</text>
  </message>
  <message>
    <ts>2017-06-29T09:48:15.061243</ts>
    <user>U0FP80EKB</user>
    <text>Often there will be a pair in that chain that can be broken easily by identifying a small extraction, perhaps a record that is shared</text>
  </message>
  <message>
    <ts>2017-06-29T09:48:48.074604</ts>
    <user>U17MHJ12N</user>
    <text>It seems to most often be the Msg type. That's why I ended up pulling those out of Update in the first place I think.</text>
  </message>
  <message>
    <ts>2017-06-29T09:49:09.082065</ts>
    <user>U17MHJ12N</user>
    <text>I'm going back a step and try to go a bit more incrementally this time ...</text>
  </message>
  <message>
    <ts>2017-06-29T09:49:27.089127</ts>
    <user>U0FP80EKB</user>
    <text>cool. Thanks for keeping us updated; this is an interesting procedure.</text>
  </message>
  <message>
    <ts>2017-06-29T09:49:37.093171</ts>
    <user>U0FP80EKB</user>
    <text>I kind of wish I worked with you, so I could dive in together. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T09:49:53.099152</ts>
    <user>U3SJEDR96</user>
    <text>I wonder why a "component" would relyon the viewmodel ofa specific page, tho... As for `Msg`, passing in a configuration record with msg's to use for specific actions allows breaking things up, too</text>
  </message>
  <message>
    <ts>2017-06-29T09:50:59.125951</ts>
    <user>U0EUHKVGB</user>
    <text>It is really hard to provide any info on good refactoring here without seeing some of the code. I suspect there is a lot that could be stripped down into just a single file and function</text>
  </message>
  <message>
    <ts>2017-06-29T09:52:15.156804</ts>
    <user>U17MHJ12N</user>
    <text>Yes I appreciate the moral support at least! I think I just need to back up a bit and go a bit more slowly to try to avoid the dreaded circular refs.</text>
  </message>
  <message>
    <ts>2017-06-29T09:52:40.166765</ts>
    <user>U0EUHKVGB</user>
    <text>A great thing is that you can just compile things to see if you untangled it correctly :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T09:52:49.170220</ts>
    <user>U3LUC6SNS</user>
    <text>Re the conversation yesterday about Elm -- adoption, growth curve, etc. -- here is an interesting post from a year ago on Reddit:

Yes, 100% of my production work is now in Elm and I couldn't be happier. I make educational computer games for children at TVO in Canada, and I'm using Elm where, 5 years ago, I would have used Flash. We're doing a systematic conversion of many of our old Flash games into Elm, and the results have been spectacularly successfully - way beyond expectations.
The time it's been taking me to learn Elm was paid back by Elm itself - the compiler has saved me days, if not weeks of debugging time. And, referential transparency has made a whole classes of typical problems simply evaporate. All the defensive coding that I used to have to do in JS or ActionScript is a thing of the past.

&lt;https://www.reddit.com/r/elm/comments/4avsh1/how_do_you_chain_tasks/&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T09:54:03.200042</ts>
    <user>U60SXAF96</user>
    <text>Hey there. I'm working at &lt;http://getbeewell.com&gt; and we are using Elm on Cordova for our mobile app development.</text>
  </message>
  <message>
    <ts>2017-06-29T09:55:48.242723</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U60SXAF96&gt; sounds great! how's that working out for you?</text>
  </message>
  <message>
    <ts>2017-06-29T09:55:59.247207</ts>
    <user>U60SXAF96</user>
    <text>So far, Elm is the best part of that plan. :smile:</text>
  </message>
  <message>
    <ts>2017-06-29T09:56:21.256024</ts>
    <user>U0U6ML22H</user>
    <text>=P</text>
  </message>
  <message>
    <ts>2017-06-29T09:56:47.266865</ts>
    <user>U0U6ML22H</user>
    <text>we're gonna need to go mobile at some point, and I'm not sure how to do that</text>
  </message>
  <message>
    <ts>2017-06-29T09:57:05.274069</ts>
    <user>U0U6ML22H</user>
    <text>so obviously, any feedback is great :smiley:</text>
  </message>
  <message>
    <ts>2017-06-29T09:57:24.281703</ts>
    <user>U60SXAF96</user>
    <text>I'm happy to discuss that with you. Our apps are very simple for the time being, and we're building out the mobile app and a web app at the same time using Cordova.</text>
  </message>
  <message>
    <ts>2017-06-29T09:58:36.311382</ts>
    <user>U60SXAF96</user>
    <text>&lt;https://play.google.com/store/apps/details?id=com.getbeewell.beewellorthoknee&amp;amp;hl=en&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T09:58:41.313359</ts>
    <user>U60SXAF96</user>
    <text>&lt;https://itunes.apple.com/us/app/beewell-orthopaedic-knee/id1181056767?mt=8&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T09:59:37.337144</ts>
    <user>U0U6ML22H</user>
    <text>interesting, thanks!</text>
  </message>
  <message>
    <ts>2017-06-29T10:04:13.459504</ts>
    <user>U60SXAF96</user>
    <text>The tricky/hard/interesting part is how to integrate with the sensors and the like. Right now, we're using ports to JS to really frustrating JS code.</text>
  </message>
  <message>
    <ts>2017-06-29T10:06:21.513621</ts>
    <user>U60SXAF96</user>
    <text>I'd much prefer to be able to subscribe to the sensors, but now you're going to be in the game of developing and maintaining a whole world of plugins with "Quirks" based on platforms: e.g. &lt;https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-battery-status/index.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T10:06:40.521499</ts>
    <user>U60SXAF96</user>
    <text>Better example: &lt;https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/index.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T10:06:48.524513</ts>
    <user>U60SXAF96</user>
    <text>And you won't even have the W3C standards to piggyback on, which JS does.</text>
  </message>
  <message>
    <ts>2017-06-29T10:06:59.529049</ts>
    <user>U0U6ML22H</user>
    <text>yeah, we probably won't need that yet, so that's OK :smiley:</text>
  </message>
  <message>
    <ts>2017-06-29T10:07:43.547221</ts>
    <user>U60SXAF96</user>
    <text>If you don't need that, then Elm has already "gone mobile" -- webpack + Cordova + Elm is fine.</text>
  </message>
  <message>
    <ts>2017-06-29T10:08:04.555571</ts>
    <user>U0U6ML22H</user>
    <text>you used a boilerplate of some kind?</text>
  </message>
  <message>
    <ts>2017-06-29T10:09:22.587003</ts>
    <user>U60SXAF96</user>
    <text>We spun  it up ourselves, but it's pretty simple.</text>
  </message>
  <message>
    <ts>2017-06-29T10:09:31.591140</ts>
    <user>U60SXAF96</user>
    <text>I'd be happy to publish it.</text>
  </message>
  <message>
    <ts>2017-06-29T10:09:55.601207</ts>
    <user>U60SXAF96</user>
    <text>(As a Cordova template, or whatever.)</text>
  </message>
  <message>
    <ts>2017-06-29T10:10:52.625880</ts>
    <user>U0U6ML22H</user>
    <text>we're not going down that road yet, but we'll need it at some point, soonish</text>
  </message>
  <message>
    <ts>2017-06-29T10:11:13.634124</ts>
    <user>U0U6ML22H</user>
    <text>I was gonna look into Elm Native UI or Fuse, but if you say Cordova is also a decent contender, then sure</text>
  </message>
  <message>
    <ts>2017-06-29T10:11:23.638620</ts>
    <user>U60SXAF96</user>
    <text>Feel free to ping me when the time comes. I'm happy to extract the MVP out of it.</text>
  </message>
  <message>
    <ts>2017-06-29T10:11:24.639376</ts>
    <user>U60SXAF96</user>
    <text>Fuse?</text>
  </message>
  <message>
    <ts>2017-06-29T10:11:30.641655</ts>
    <user>U60SXAF96</user>
    <text>The userspace filesystem?</text>
  </message>
  <message>
    <ts>2017-06-29T10:11:52.651023</ts>
    <user>U0U6ML22H</user>
    <text>not a great choice of name from their part, eh? ^^</text>
  </message>
  <message>
    <ts>2017-06-29T10:12:01.654511</ts>
    <user>U0U6ML22H</user>
    <text>&lt;https://www.fusetools.com/&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T10:12:34.668880</ts>
    <user>U0U6ML22H</user>
    <text>I believe &lt;@U0EUHKVGB&gt; was talking about some kind of tooling to use Elm with it, but I don't know the current state of that</text>
  </message>
  <message>
    <ts>2017-06-29T10:13:24.690035</ts>
    <user>U0U6ML22H</user>
    <text>for now, it's not on Linux, so I haven't tried it</text>
  </message>
  <message>
    <ts>2017-06-29T10:13:32.693186</ts>
    <user>U60SXAF96</user>
    <text>Yeah, that's a nonstarter for us.</text>
  </message>
  <message>
    <ts>2017-06-29T10:13:52.701547</ts>
    <user>U60SXAF96</user>
    <text>"Elm Native UI"?</text>
  </message>
  <message>
    <ts>2017-06-29T10:14:27.716074</ts>
    <user>U0U6ML22H</user>
    <text>&lt;https://github.com/ohanhi/elm-native-and&gt; &lt;#C11N4S6QK|elm-native-ui&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T10:15:16.736480</ts>
    <user>U3SJEDR96</user>
    <text>and &lt;https://robots.thoughtbot.com/elm-native-ui-in-production&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T10:16:01.755063</ts>
    <user>U60SXAF96</user>
    <text>Elm on top of React Native was tempting, but 1) I found integrating Elm to be much harder, and 2) I didn't see an easy way to get at the sensors.</text>
  </message>
  <message>
    <ts>2017-06-29T10:17:22.788594</ts>
    <user>U60SXAF96</user>
    <text>Conceptually, it seems to be a nicer match with Elm.</text>
  </message>
  <message>
    <ts>2017-06-29T10:17:25.790185</ts>
    <user>U0U6ML22H</user>
    <text>(kinda disappointed that the article about "Elm Native UI in production" is mostly about "Elm Native UI is not ready for production" =P)</text>
  </message>
  <message>
    <ts>2017-06-29T10:17:45.798428</ts>
    <user>U0EUHKVGB</user>
    <text>Just use cordova and use ports</text>
  </message>
  <message>
    <ts>2017-06-29T10:18:29.816904</ts>
    <user>U60SXAF96</user>
    <text>That's exactly what we're doing. :smile:</text>
  </message>
  <message>
    <ts>2017-06-29T10:19:11.834682</ts>
    <user>U0EUHKVGB</user>
    <text>&amp;gt;  Right now, we’re using ports to JS to really frustrating JS code
:thinking_face: I don’t know what this means</text>
  </message>
  <message>
    <ts>2017-06-29T10:20:11.860536</ts>
    <user>U3SJEDR96</user>
    <text>dealing with cordova sensons and whatnot tends to be quite hairy</text>
  </message>
  <message>
    <ts>2017-06-29T10:20:31.868931</ts>
    <user>U60SXAF96</user>
    <text>It is. But it's possible and at least moderately documented.</text>
  </message>
  <message>
    <ts>2017-06-29T10:20:39.872548</ts>
    <user>U0EUHKVGB</user>
    <text>One of the first projects I did with Elm in production was with Cordova :wink:</text>
  </message>
  <message>
    <ts>2017-06-29T10:20:39.872592</ts>
    <user>U60SXAF96</user>
    <text>Which is better than the alternatives that I've been looking into.</text>
  </message>
  <message>
    <ts>2017-06-29T10:26:13.017310</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U0EUHKVGB&gt; was I wrong about you saying Fusetools had Elm tooling coming?</text>
  </message>
  <message>
    <ts>2017-06-29T10:26:31.025402</ts>
    <user>U0EUHKVGB</user>
    <text>:scream: I have never made such claim</text>
  </message>
  <message>
    <ts>2017-06-29T10:26:37.027970</ts>
    <user>U0EUHKVGB</user>
    <text>You can use Elm with fuse today</text>
  </message>
  <message>
    <ts>2017-06-29T10:26:42.030553</ts>
    <user>U0EUHKVGB</user>
    <text>Via workers and ports.</text>
  </message>
  <message>
    <ts>2017-06-29T10:27:04.040067</ts>
    <user>U0EUHKVGB</user>
    <text>You can also try out elm-fuse, which is my PoC repo to show off how pure-Elm might work with Fuse.</text>
  </message>
  <message>
    <ts>2017-06-29T10:27:15.044875</ts>
    <user>U0EUHKVGB</user>
    <text>(I made a prezi-like animation in it the other day)</text>
  </message>
  <message>
    <ts>2017-06-29T10:27:55.062945</ts>
    <user>U0EUHKVGB</user>
    <text>Here it is. All written in Elm, compiled via Fuse (which means it runs on Android + iOS at 60 FPS)</text>
  </message>
  <message>
    <ts>2017-06-29T10:28:09.069024</ts>
    <user>U0EUHKVGB</user>
    <text>sadly the animation looks slow on the gif because I recorded it at a low framerate</text>
  </message>
  <message>
    <ts>2017-06-29T10:28:26.076480</ts>
    <user>U0U6ML22H</user>
    <text>OK, so I hadn't dreamed that "Fuse + Elm" was a thing and it was related to you somehow =P</text>
  </message>
  <message>
    <ts>2017-06-29T10:28:28.077609</ts>
    <user>U0U6ML22H</user>
    <text>thanks for the gif</text>
  </message>
  <message>
    <ts>2017-06-29T10:29:02.092552</ts>
    <user>U0EUHKVGB</user>
    <text>Until tomorrow, I work at Fuse, so that’s why it exists :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T10:29:11.096241</ts>
    <user>U0EUHKVGB</user>
    <text>But yeah, totally easy to use Elm with Fuse.</text>
  </message>
  <message>
    <ts>2017-06-29T10:30:04.120042</ts>
    <user>U0U6ML22H</user>
    <text>OK, cool! you know when Linux support is coming? =P</text>
  </message>
  <message>
    <ts>2017-06-29T10:31:34.160999</ts>
    <user>U0EUHKVGB</user>
    <text>It’s not on the roadmap, but some people are pretty keen to move it there. But I’ll send along the requests as extra data points.</text>
  </message>
  <message>
    <ts>2017-06-29T10:32:04.174774</ts>
    <user>U0U6ML22H</user>
    <text>thanks a bunch :smiley:</text>
  </message>
  <message>
    <ts>2017-06-29T10:33:39.216791</ts>
    <user>U60SXAF96</user>
    <text>+1</text>
  </message>
  <message>
    <ts>2017-06-29T10:34:01.226366</ts>
    <user>U17J54S2U</user>
    <text>&lt;@U0EUHKVGB&gt; You’re on an answering spree :slightly_smiling_face: I once asked a question during a Q&amp;amp;A stream with Luke. It was about hot reloading code. And you mentioned you had hooked up Elm to Firebase to sync the app model to Firebase so it would retain the state through refreshes. Do you have this available somewhere?</text>
  </message>
  <message>
    <ts>2017-06-29T10:34:05.228006</ts>
    <user>U60SXAF96</user>
    <text>We build our iOS apps on old mac in the corner; otherwise, our development team is all adamantly Linux FOSS.</text>
  </message>
  <message>
    <ts>2017-06-29T10:35:18.260041</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U17J54S2U&gt; I’ll see if I can find it when I get home</text>
  </message>
  <message>
    <ts>2017-06-29T10:35:31.265691</ts>
    <user>U0EUHKVGB</user>
    <text>But it was like 30 lines of code or something</text>
  </message>
  <message>
    <ts>2017-06-29T10:44:04.485084</ts>
    <user>U3L8MM10T</user>
    <text>Maybe.Extra.unwrap (&lt;http://package.elm-lang.org/packages/elm-community/maybe-extra/4.0.0/Maybe-Extra#unwrap&gt;) takes a default value.  Is there a way to lazily calc the default value? Most times it may not be needed altogether, and the default value may be expensive to derive.</text>
  </message>
  <message>
    <ts>2017-06-29T10:45:08.513235</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3L8MM10T&gt; You will have to write your own function which takes `() -&amp;gt; b` as an arg</text>
  </message>
  <message>
    <ts>2017-06-29T10:48:06.591353</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3L8MM10T&gt; `() -&amp;gt; b` is known as a thunk</text>
  </message>
  <message>
    <ts>2017-06-29T10:48:17.596160</ts>
    <user>U3L8MM10T</user>
    <text>I see.</text>
  </message>
  <message>
    <ts>2017-06-29T10:48:30.602453</ts>
    <user>U0EUHKVGB</user>
    <text>this is a function which will produce an value, but is unevaluated until you call it</text>
  </message>
  <message>
    <ts>2017-06-29T10:48:39.606504</ts>
    <user>U3L8MM10T</user>
    <text>cool</text>
  </message>
  <message>
    <ts>2017-06-29T10:49:22.625749</ts>
    <user>U0EUHKVGB</user>
    <text>so for example, 

```
unwrap : (() -&amp;gt; b) -&amp;gt; (a -&amp;gt; b) -&amp;gt; Maybe a -&amp;gt; b
unwrap thunk fn maybe =
  case maybe of 
    Just thing -&amp;gt; fn thing
    Nothing -&amp;gt; thunk ()
```</text>
  </message>
  <message>
    <ts>2017-06-29T10:49:53.639721</ts>
    <user>U0EUHKVGB</user>
    <text>which you can now use like this:

```
unwrap (\() -&amp;gt; someExpensiveDefault 5 6) fn maybeThing
```</text>
  </message>
  <message>
    <ts>2017-06-29T10:50:23.652984</ts>
    <user>U0EUHKVGB</user>
    <text>Now `someExpensiveDefault 5 6` will only be evaluated when there is a `Nothing` called.</text>
  </message>
  <message>
    <ts>2017-06-29T10:50:58.669033</ts>
    <user>U0EUHKVGB</user>
    <text>Note, this may not solve your performance issues. You might better off doing:
```
ourDefault = someExpensiveDefault 5 6

unwrap ourDefault fn MaybeThing
```</text>
  </message>
  <message>
    <ts>2017-06-29T10:51:10.674266</ts>
    <user>U0EUHKVGB</user>
    <text>this way the expensive calculation is run only once, and on startup.</text>
  </message>
  <message>
    <ts>2017-06-29T10:51:29.682880</ts>
    <user>U0EUHKVGB</user>
    <text>If it is a static default, then this is probably your best bet for performance.</text>
  </message>
  <message>
    <ts>2017-06-29T10:51:51.692434</ts>
    <user>U3L8MM10T</user>
    <text>Thanks. This should be added to FAQ.</text>
  </message>
  <message>
    <ts>2017-06-29T10:52:04.698338</ts>
    <user>U3SJEDR96</user>
    <text>It's not exactly frequently asked, tho :smile:</text>
  </message>
  <message>
    <ts>2017-06-29T10:55:14.785052</ts>
    <user>U0J1M0F32</user>
    <text>IFAQ (`InFrequently Asked Questions`)</text>
  </message>
  <message>
    <ts>2017-06-29T10:56:26.817824</ts>
    <user>U2SR9DL7Q</user>
    <text>"thunk" is a great name for what this is and what it does.</text>
  </message>
  <message>
    <ts>2017-06-29T10:56:28.819019</ts>
    <user>U2D0V2SAC</user>
    <text>Hey everyone.
Lets say i add a BIG MODULE (Say a List.Extra module) in my elm app.
If, within my elm app i only import one or two functions of this module, will the build step cut the useless weight? Or will i carry over ALL the List.Extra module at runtime?

This would be a deciding factor for us between importing helper libraries, versus only copying or implementing our own 2-3 functions that we use.

Thanks!</text>
  </message>
  <message>
    <ts>2017-06-29T10:56:32.820357</ts>
    <user>U3SJEDR96</user>
    <text>though I suppose having an article about explicit laziness in Elm somewhere would be itneresting</text>
  </message>
  <message>
    <ts>2017-06-29T10:57:22.843285</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2D0V2SAC&gt; Is the question “how can I make my bundles smaller?”</text>
  </message>
  <message>
    <ts>2017-06-29T10:57:50.856251</ts>
    <user>U0U6ML22H</user>
    <text>tree-shaking-like</text>
  </message>
  <message>
    <ts>2017-06-29T10:58:19.869482</ts>
    <user>U2D0V2SAC</user>
    <text>Its "does elm include and bundle ONLY the imported parts of the modules i use (tree shaking like), or the entire things",</text>
  </message>
  <message>
    <ts>2017-06-29T10:58:28.873548</ts>
    <user>U0EUHKVGB</user>
    <text>We call tree-shaking dead code elimination</text>
  </message>
  <message>
    <ts>2017-06-29T10:58:56.886616</ts>
    <user>U0EUHKVGB</user>
    <text>Only things you import get included in the output</text>
  </message>
  <message>
    <ts>2017-06-29T10:59:33.903605</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U3SJEDR96&gt; &lt;@U3L8MM10T&gt; The README for this library is pretty comprehensive &lt;http://package.elm-lang.org/packages/elm-lang/lazy/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T10:59:40.906720</ts>
    <user>U2D0V2SAC</user>
    <text>So if i have a module A exposing (fn1, .... fn1000)

and i only import A exposing (fn1, fn2),

All the fn3 to fn1000 won't be bundled in the output</text>
  </message>
  <message>
    <ts>2017-06-29T11:00:43.938193</ts>
    <user>U0EUHKVGB</user>
    <text>Sorry, _modules_ that you import</text>
  </message>
  <message>
    <ts>2017-06-29T11:01:16.953481</ts>
    <user>U3SJEDR96</user>
    <text>(and any modules that this imports)</text>
  </message>
  <message>
    <ts>2017-06-29T11:01:53.971244</ts>
    <user>U3SJEDR96</user>
    <text>though do note that DCE will be a thing in Elm sooner or later, and then it shouldn't really matter anymore :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T11:02:10.978612</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U3SJEDR96&gt; DCE?</text>
  </message>
  <message>
    <ts>2017-06-29T11:02:20.983441</ts>
    <user>U3SJEDR96</user>
    <text>dead code elimination / tree shaking</text>
  </message>
  <message>
    <ts>2017-06-29T11:02:20.983607</ts>
    <user>U0EUHKVGB</user>
    <text>Dead code elimination</text>
  </message>
  <message>
    <ts>2017-06-29T11:02:25.985635</ts>
    <user>U2D0V2SAC</user>
    <text>So, will module A fn3 to fn1000, which are all unused functions of the module, be included in the output?</text>
  </message>
  <message>
    <ts>2017-06-29T11:02:43.993911</ts>
    <user>U3SJEDR96</user>
    <text>currently, yes</text>
  </message>
  <message>
    <ts>2017-06-29T11:02:44.994446</ts>
    <user>U60SXAF96</user>
    <text>I'd be happy to contribute towards DCE/tree-shaking.</text>
  </message>
  <message>
    <ts>2017-06-29T11:02:56.000162</ts>
    <user>U60SXAF96</user>
    <text>Because that's a seriously non-trivial advantage.</text>
  </message>
  <message>
    <ts>2017-06-29T11:03:03.002954</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2D0V2SAC&gt; Yes, but you can run it through google closure compiler</text>
  </message>
  <message>
    <ts>2017-06-29T11:03:10.006081</ts>
    <user>U0EUHKVGB</user>
    <text>which will strip some of those away.</text>
  </message>
  <message>
    <ts>2017-06-29T11:03:19.010367</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U60SXAF96&gt; I think they're already implemented, afaik, but hasn't made it into a release yet</text>
  </message>
  <message>
    <ts>2017-06-29T11:03:31.015777</ts>
    <user>U2D0V2SAC</user>
    <text>Ok thanks.</text>
  </message>
  <message>
    <ts>2017-06-29T11:04:03.030597</ts>
    <user>U60SXAF96</user>
    <text>Babel / Babili has DCE, too: &lt;https://babeljs.io/docs/plugins/minify-dead-code-elimination/&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T11:04:27.041454</ts>
    <user>U60SXAF96</user>
    <text>We're currently feeding Elm's output into Babili. Haven't measured if it's actually valuable.</text>
  </message>
  <message>
    <ts>2017-06-29T11:04:48.051450</ts>
    <user>U0EUHKVGB</user>
    <text>0.19 has numerous planned changes in this sort of space.</text>
  </message>
  <message>
    <ts>2017-06-29T11:06:07.087004</ts>
    <user>U3L8MM10T</user>
    <text>&lt;@U0LPMPL2U&gt; Thanks. Better to use this `Lazy`stuff (wraps thunking) because it conveys intent to reader.</text>
  </message>
  <message>
    <ts>2017-06-29T11:06:11.088733</ts>
    <user>U2SR9DL7Q</user>
    <text>so am i correct in understanding that this DCE lets you keep only the functions you import (and consequently, only the functions that those imported ones import) and doesnt carry over the non-essential parts of the module?</text>
  </message>
  <message>
    <ts>2017-06-29T11:06:37.100874</ts>
    <user>U0EUHKVGB</user>
    <text>Not in Elm.</text>
  </message>
  <message>
    <ts>2017-06-29T11:06:47.105029</ts>
    <user>U0EUHKVGB</user>
    <text>Google Closure Compiler may do that for you.</text>
  </message>
  <message>
    <ts>2017-06-29T11:06:56.109164</ts>
    <user>U2SR9DL7Q</user>
    <text>gotcha.</text>
  </message>
  <message>
    <ts>2017-06-29T11:07:04.112810</ts>
    <user>U0EUHKVGB</user>
    <text>Elms DCE currently is only limited to not including modules that are not imported anywhere.</text>
  </message>
  <message>
    <ts>2017-06-29T11:07:36.126912</ts>
    <user>U0EUHKVGB</user>
    <text>(so it’s not really DCE)</text>
  </message>
  <message>
    <ts>2017-06-29T11:07:58.136829</ts>
    <user>U2SR9DL7Q</user>
    <text>i believe standard python also just grabs the entire imported module's contents, so the idea of a selective approach seems interesting.</text>
  </message>
  <message>
    <ts>2017-06-29T11:17:33.390599</ts>
    <user>U0F01KLV6</user>
    <text>UglifyJs is also great at stripping away unused functions in elm, and it doesn't require a Java runtime :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T11:21:17.489805</ts>
    <user>U0F01KLV6</user>
    <text>Also important to note. Elm is only compatible with "simple optimisations" mode in google closure.</text>
  </message>
  <message>
    <ts>2017-06-29T11:33:41.822782</ts>
    <user>U3ZNWN526</user>
    <text>Very nice! :smile: (I can totally win with this one, hehe)</text>
  </message>
  <message>
    <ts>2017-06-29T11:45:06.117980</ts>
    <user>U1CKM8DGT</user>
    <text>&lt;http://clojutre.org/2017/small-fp/&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T11:50:45.265254</ts>
    <user>U60SXAF96</user>
    <text>Why is this?</text>
  </message>
  <message>
    <ts>2017-06-29T11:51:55.295236</ts>
    <user>U60SXAF96</user>
    <text>Until Uglify-harmony comes out, though, it barfs on modern JS.  We're running on the "90% rule" -- we support 90% of users in the wild, which means IE 11 and the last 3 versions of the big browsers -- and Uglify can't handle the output from Babel.</text>
  </message>
  <message>
    <ts>2017-06-29T12:56:28.825254</ts>
    <user>U1CE9DL9H</user>
    <text></text>
  </message>
  <message>
    <ts>2017-06-29T12:56:42.830547</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U60SXAF96&gt; ^</text>
  </message>
  <message>
    <ts>2017-06-29T13:05:07.028458</ts>
    <user>U60SXAF96</user>
    <text>Gotcha. So it's this: &lt;https://developers.google.com/closure/compiler/docs/api-tutorial3#propnames&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T13:05:14.031221</ts>
    <user>U60SXAF96</user>
    <text>To which Google says, "Don't do that." :confused:</text>
  </message>
  <message>
    <ts>2017-06-29T13:42:48.871450</ts>
    <user>U23SA861Y</user>
    <text>getting an odd install error trying to install elm globally via npm on a linux system 
```
&amp;gt; elm@0.18.0 install /usr/lib/node_modules/elm
&amp;gt; node install.js

Error extracting linux-x64.tar.gz - Error: EACCES: permission denied, mkdir '/usr/lib64/node_modules/elm/Elm-Platform'
npm WARN /usr/lib64/node_modules/elm is not a child of /usr/lib
```</text>
  </message>
  <message>
    <ts>2017-06-29T13:43:03.877226</ts>
    <user>U23SA861Y</user>
    <text>attempting to install via sudo so this is odd</text>
  </message>
  <message>
    <ts>2017-06-29T13:43:42.891716</ts>
    <user>U0J1M0F32</user>
    <text>Sounds like an issue with npm permissions</text>
  </message>
  <message>
    <ts>2017-06-29T13:43:54.896494</ts>
    <user>U23SA861Y</user>
    <text>right, but sudo</text>
  </message>
  <message>
    <ts>2017-06-29T13:45:12.925433</ts>
    <user>U0CLDU8UB</user>
    <text>did you try `npm i -g elm` without sudo?</text>
  </message>
  <message>
    <ts>2017-06-29T13:45:26.931277</ts>
    <user>U23SA861Y</user>
    <text>thats a global install, it should never work</text>
  </message>
  <message>
    <ts>2017-06-29T13:45:32.933378</ts>
    <user>U0CLDU8UB</user>
    <text>on some systems that works out of the box, just installs it for your user</text>
  </message>
  <message>
    <ts>2017-06-29T13:45:50.939804</ts>
    <user>U23SA861Y</user>
    <text>then npm is broken and doing things it shouldn't be</text>
  </message>
  <message>
    <ts>2017-06-29T13:45:58.942793</ts>
    <user>U0CLDU8UB</user>
    <text>as in `~/.node_modules` or something</text>
  </message>
  <message>
    <ts>2017-06-29T13:46:32.955557</ts>
    <user>U23SA861Y</user>
    <text>no -g tries to install globally</text>
  </message>
  <message>
    <ts>2017-06-29T13:47:59.988451</ts>
    <user>U0CLDU8UB</user>
    <text>Hmm, I got it installed globally with npm 4 on my Fedora.</text>
  </message>
  <message>
    <ts>2017-06-29T13:48:11.993135</ts>
    <user>U23SA861Y</user>
    <text>hmm, attempting to install locally to the project is also giving me grief</text>
  </message>
  <message>
    <ts>2017-06-29T13:48:48.006609</ts>
    <user>U36C7SUAX</user>
    <text>Have you installed your node with `nvm`?</text>
  </message>
  <message>
    <ts>2017-06-29T13:49:07.014076</ts>
    <user>U23SA861Y</user>
    <text>node is installed via the system package manager</text>
  </message>
  <message>
    <ts>2017-06-29T13:49:28.021917</ts>
    <user>U36C7SUAX</user>
    <text>If you install it with `nvm`, everything should work.</text>
  </message>
  <message>
    <ts>2017-06-29T13:49:42.027114</ts>
    <user>U36C7SUAX</user>
    <text>And it is also very comfortable.</text>
  </message>
  <message>
    <ts>2017-06-29T13:49:49.030123</ts>
    <user>U0CLDU8UB</user>
    <text>Which distro are you on, and which version of `npm` are you running?</text>
  </message>
  <message>
    <ts>2017-06-29T13:50:25.044364</ts>
    <user>U23SA861Y</user>
    <text>anything which suggests this as an install pattern `wget -qO- &lt;https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh&gt; | bash` is not touching my system</text>
  </message>
  <message>
    <ts>2017-06-29T13:50:43.051448</ts>
    <user>U23SA861Y</user>
    <text>I'm running gentoo with npm version 5.0.4</text>
  </message>
  <message>
    <ts>2017-06-29T13:51:27.068679</ts>
    <user>U36C7SUAX</user>
    <text>You can read the code before piping it if you are afraid.</text>
  </message>
  <message>
    <ts>2017-06-29T13:52:50.100928</ts>
    <user>U0CLDU8UB</user>
    <text>So then this won't help you either: &lt;https://github.com/nodesource/distributions&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T13:56:24.184236</ts>
    <user>U23SA861Y</user>
    <text>node seems to be installed fine, other node tools I have seem to work</text>
  </message>
  <message>
    <ts>2017-06-29T13:56:27.185781</ts>
    <user>U23SA861Y</user>
    <text>it's just elm</text>
  </message>
  <message>
    <ts>2017-06-29T13:58:07.225394</ts>
    <user>U23SA861Y</user>
    <text>I think it's because the script doesn't realize that /usr/lib is a symlink for /usr/lib64</text>
  </message>
  <message>
    <ts>2017-06-29T13:58:13.227696</ts>
    <user>U23SA861Y</user>
    <text>or something like that</text>
  </message>
  <message>
    <ts>2017-06-29T13:59:41.262591</ts>
    <user>U0CLDU8UB</user>
    <text>Well the error message is pretty clear: the installation starts at `/usr/lib/..` and tries to put the `/usr/lib64/..`, which your system does not allow.</text>
  </message>
  <message>
    <ts>2017-06-29T13:59:49.265672</ts>
    <user>U0CLDU8UB</user>
    <text>right, what you said</text>
  </message>
  <message>
    <ts>2017-06-29T14:00:21.279590</ts>
    <user>U23SA861Y</user>
    <text>despite a sudo user having full permissions to do so</text>
  </message>
  <message>
    <ts>2017-06-29T14:00:58.294938</ts>
    <user>U23SA861Y</user>
    <text>also, some of the install folders where my local user despite me installing with sudo</text>
  </message>
  <message>
    <ts>2017-06-29T14:01:08.299147</ts>
    <user>U23SA861Y</user>
    <text>I think npm is just broken and forking wrong</text>
  </message>
  <message>
    <ts>2017-06-29T14:01:33.309424</ts>
    <user>U0CLDU8UB</user>
    <text>Yeah, it's strange. Does your system have any sort of SELinux set up? I think I may have seen something like that some time ago with some npm packages.</text>
  </message>
  <message>
    <ts>2017-06-29T14:01:58.319512</ts>
    <user>U23SA861Y</user>
    <text>nope, its just a desktop all of that jaz is disabled</text>
  </message>
  <message>
    <ts>2017-06-29T14:03:39.360728</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U0EUHKVGB&gt; would you have any idea about this npm install issue?</text>
  </message>
  <message>
    <ts>2017-06-29T14:03:55.367430</ts>
    <user>U23SA861Y</user>
    <text>hold on something is strange here</text>
  </message>
  <message>
    <ts>2017-06-29T14:04:07.372295</ts>
    <user>U23SA861Y</user>
    <text>despite me running as sudo it keeps creating folders as my local user</text>
  </message>
  <message>
    <ts>2017-06-29T14:05:44.410529</ts>
    <user>U2LAL86AY</user>
    <text>hmm i just seen that the compiler doesn't notify me when i have the same record field defined 2 times. Is this some wired bug i have on my machine - or this is expected? And if it is - why is not considered an error? example
`someRecord = { field1 : String, field1: String }`</text>
  </message>
  <message>
    <ts>2017-06-29T14:05:55.415066</ts>
    <user>U2LAL86AY</user>
    <text>wait</text>
  </message>
  <message>
    <ts>2017-06-29T14:06:11.420994</ts>
    <user>U2LAL86AY</user>
    <text>&lt;https://ellie-app.com/3Cd35KmNBpba1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T14:06:23.425647</ts>
    <user>U2LAL86AY</user>
    <text>yes it compiles. but why?</text>
  </message>
  <message>
    <ts>2017-06-29T14:06:46.434716</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0CLDU8UB&gt; what error?</text>
  </message>
  <message>
    <ts>2017-06-29T14:07:06.442238</ts>
    <user>U0EUHKVGB</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-06-29T14:07:08.442945</ts>
    <user>U0CLDU8UB</user>
    <text></text>
  </message>
  <message>
    <ts>2017-06-29T14:07:25.449637</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U23SA861Y&gt; are you trying to install it in docker?</text>
  </message>
  <message>
    <ts>2017-06-29T14:07:36.453773</ts>
    <user>U0EUHKVGB</user>
    <text>What distro?</text>
  </message>
  <message>
    <ts>2017-06-29T14:07:38.454951</ts>
    <user>U23SA861Y</user>
    <text>`sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}` and this is probably why npm is broken given that those instructions comp from &lt;http://npmjs.com|npmjs.com&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T14:07:50.459383</ts>
    <user>U23SA861Y</user>
    <text>no, base system</text>
  </message>
  <message>
    <ts>2017-06-29T14:08:06.465357</ts>
    <user>U23SA861Y</user>
    <text>gentoo is the distro</text>
  </message>
  <message>
    <ts>2017-06-29T14:08:18.469987</ts>
    <user>U0EUHKVGB</user>
    <text>Eh</text>
  </message>
  <message>
    <ts>2017-06-29T14:08:26.472891</ts>
    <user>U0EUHKVGB</user>
    <text>compile elm yourself :wink:</text>
  </message>
  <message>
    <ts>2017-06-29T14:08:30.474803</ts>
    <user>U23SA861Y</user>
    <text>how does npm think that command is acceptable</text>
  </message>
  <message>
    <ts>2017-06-29T14:08:37.477240</ts>
    <user>U23SA861Y</user>
    <text>yeah, I suppose I can do it from source</text>
  </message>
  <message>
    <ts>2017-06-29T14:08:48.481588</ts>
    <user>U23SA861Y</user>
    <text>maybe even make a ebuild</text>
  </message>
  <message>
    <ts>2017-06-29T14:09:03.487207</ts>
    <user>U23SA861Y</user>
    <text>unless it needs some extreme version of ghc to work</text>
  </message>
  <message>
    <ts>2017-06-29T14:09:05.488068</ts>
    <user>U0EUHKVGB</user>
    <text>Personally, I would not really recommend using gentoo for anything you want to get work done on</text>
  </message>
  <message>
    <ts>2017-06-29T14:09:18.492901</ts>
    <user>U23SA861Y</user>
    <text>I would if you are doing embedded development</text>
  </message>
  <message>
    <ts>2017-06-29T14:09:19.493385</ts>
    <user>U0EUHKVGB</user>
    <text>But it’s your life :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T14:09:52.505577</ts>
    <user>U0EUHKVGB</user>
    <text>You can compile things from source on other platforms, and get minimal linux installs without needing recompile the world from source</text>
  </message>
  <message>
    <ts>2017-06-29T14:09:54.506508</ts>
    <user>U23SA861Y</user>
    <text>lets put it this way, my two coworkers are running ubuntu and they've encountered far more issues</text>
  </message>
  <message>
    <ts>2017-06-29T14:10:11.512884</ts>
    <user>U0EUHKVGB</user>
    <text>I would not recommend Ubuntu either :wink:</text>
  </message>
  <message>
    <ts>2017-06-29T14:10:14.513912</ts>
    <user>U0EUHKVGB</user>
    <text>Anyway</text>
  </message>
  <message>
    <ts>2017-06-29T14:10:42.525194</ts>
    <user>U0EUHKVGB</user>
    <text>If you do `npm install -g elm`, then it will install elm globally into your user’s directory</text>
  </message>
  <message>
    <ts>2017-06-29T14:10:46.526373</ts>
    <user>U0EUHKVGB</user>
    <text>if you have that set up</text>
  </message>
  <message>
    <ts>2017-06-29T14:10:50.528113</ts>
    <user>U0EUHKVGB</user>
    <text>(without sudo)</text>
  </message>
  <message>
    <ts>2017-06-29T14:11:00.531822</ts>
    <user>U23SA861Y</user>
    <text>it's trying the the permissions npm is using are screwed up</text>
  </message>
  <message>
    <ts>2017-06-29T14:11:17.538467</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U2LAL86AY&gt; It's a remnant of the time when records' fields could be added and removed. Back then it would've been very hard to make the compiler not allow them. Since those things are not in the language anymore, it's now a bug and apparently it has been fixed in the current development branch.</text>
  </message>
  <message>
    <ts>2017-06-29T14:11:50.550958</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U23SA861Y&gt; see this: &lt;https://docs.npmjs.com/getting-started/fixing-npm-permissions#option-2-change-npms-default-directory-to-another-directory&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T14:11:58.554063</ts>
    <user>U23SA861Y</user>
    <text>I was looking at that</text>
  </message>
  <message>
    <ts>2017-06-29T14:12:04.556141</ts>
    <user>U0EUHKVGB</user>
    <text>do that :+1:</text>
  </message>
  <message>
    <ts>2017-06-29T14:12:12.559029</ts>
    <user>U23SA861Y</user>
    <text>that line of code should never be run on any linux system</text>
  </message>
  <message>
    <ts>2017-06-29T14:12:12.559142</ts>
    <user>U0EUHKVGB</user>
    <text>you’ll need to install elm-test etc anyway</text>
  </message>
  <message>
    <ts>2017-06-29T14:12:21.562633</ts>
    <user>U0EUHKVGB</user>
    <text>You’re not looking at the same thing as me :wink:</text>
  </message>
  <message>
    <ts>2017-06-29T14:12:31.566270</ts>
    <user>U0EUHKVGB</user>
    <text>Click the link I shared</text>
  </message>
  <message>
    <ts>2017-06-29T14:12:38.568777</ts>
    <user>U0EUHKVGB</user>
    <text>`Option 2: Change npm's default directory to another directory`</text>
  </message>
  <message>
    <ts>2017-06-29T14:13:08.579977</ts>
    <user>U23SA861Y</user>
    <text>that is more tolerable</text>
  </message>
  <message>
    <ts>2017-06-29T14:15:22.631103</ts>
    <user>U23SA861Y</user>
    <text>ok, that fixed everything. Why would `npm` as a default try to install to the system folders as an ordinary user. That's insane</text>
  </message>
  <message>
    <ts>2017-06-29T14:20:02.737713</ts>
    <user>U0CLDU8UB</user>
    <text>Glad you got it worked out!</text>
  </message>
  <message>
    <ts>2017-06-29T15:35:03.408190</ts>
    <user>U5VTA57UN</user>
    <text>I've got a weird issue with SVG updates.  Minimal test case: &lt;https://ellie-app.com/3CfnB4gyTRCa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T15:36:29.437782</ts>
    <user>U5VTA57UN</user>
    <text>Essentially, when I change alignmentBaselines on text, if the structure of the SVG nodes doesn't change, the rendered image doesn't update.  I can see the properties change in the dom browser in chrome, but the actual rendered image doesn't update.</text>
  </message>
  <message>
    <ts>2017-06-29T15:41:32.540140</ts>
    <user>U5VTA57UN</user>
    <text>Also, if I hit `(ctrl+shift+m)` (toggle device toolbar) that will get the SVG rendering to update once.</text>
  </message>
  <message>
    <ts>2017-06-29T15:41:52.547084</ts>
    <user>U40QW928G</user>
    <text>What router does everyone use?</text>
  </message>
  <message>
    <ts>2017-06-29T15:42:42.564076</ts>
    <user>U5LFUHH19</user>
    <text>I'm trying to modify the "elm-spa-template" to create a SPA (&lt;https://github.com/hurwitzlab/elm-imicrobe-spa&gt;).  I basically decided to jump into the deep end and see if I could swim.  I'm merging in code from &lt;https://github.com/rtfeldman/elm-spa-example&gt; to fetch my data, and I'm getting a compile error when I try to expand my Page.Investigator (&lt;https://github.com/hurwitzlab/elm-imicrobe-spa/blob/master/src/Page/Investigator.elm&gt;) to include the (currently commented-out) "investigators"/"loadInvestigators."  I have it down to this one change, so I'm hoping maybe someone can look at this and see my problem because I'm totes stuck.</text>
  </message>
  <message>
    <ts>2017-06-29T15:46:06.633744</ts>
    <user>U0CLDU8UB</user>
    <text>boons: `elm-lang/navigation` and `evancz/url-parser`</text>
  </message>
  <message>
    <ts>2017-06-29T15:46:11.635334</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U5LFUHH19&gt; what is the error?</text>
  </message>
  <message>
    <ts>2017-06-29T15:48:48.689446</ts>
    <user>U5LFUHH19</user>
    <text>&lt;https://gist.github.com/kyclark/f4fbac36c207880ef3871ad0a456916b&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T15:49:16.699319</ts>
    <user>U5LFUHH19</user>
    <text>Errors are coming from Main.elm, but I can't find how it's connected to what I'm doing in Page.Investigator.</text>
  </message>
  <message>
    <ts>2017-06-29T15:51:33.747743</ts>
    <user>U1CE9DL9H</user>
    <text>is this intented `| InvestigatorLoaded (Result PageLoadError About.Model)`?</text>
  </message>
  <message>
    <ts>2017-06-29T15:51:53.754645</ts>
    <user>U1CE9DL9H</user>
    <text>because you treat this record later on as if it is a `Investigator.Model`</text>
  </message>
  <message>
    <ts>2017-06-29T15:51:56.755484</ts>
    <user>U2GPX0EKC</user>
    <text>&lt;@U40QW928G&gt; ? You mean like Navigation?</text>
  </message>
  <message>
    <ts>2017-06-29T15:51:59.756596</ts>
    <user>U1CE9DL9H</user>
    <text>at line 132</text>
  </message>
  <message>
    <ts>2017-06-29T15:52:11.760685</ts>
    <user>U40QW928G</user>
    <text>yes navigation for a spa</text>
  </message>
  <message>
    <ts>2017-06-29T15:52:22.764659</ts>
    <user>U285A8S8H</user>
    <text>I'm trying to generate a random exercise
```
type alias Exercise =
    { note : Note
    , scale : Scale
    , kind : ExerciseKind
    }
```
I have defined lists of all Notes, Scales and ExerciseKinds - now I need to pick a random item from each list. Any tips where to start?</text>
  </message>
  <message>
    <ts>2017-06-29T15:52:39.770685</ts>
    <user>U2GPX0EKC</user>
    <text>&lt;@U40QW928G&gt; Well i use that that elm-navigation</text>
  </message>
  <message>
    <ts>2017-06-29T15:52:53.775436</ts>
    <user>U40QW928G</user>
    <text>nice thanks, I just saw those two in the elm tutorial</text>
  </message>
  <message>
    <ts>2017-06-29T15:52:54.775656</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U285A8S8H&gt; have you used random generators yet?</text>
  </message>
  <message>
    <ts>2017-06-29T15:53:04.779118</ts>
    <user>U40QW928G</user>
    <text>I'll check it out</text>
  </message>
  <message>
    <ts>2017-06-29T15:53:11.781541</ts>
    <user>U285A8S8H</user>
    <text>&lt;@U0LPMPL2U&gt; nah</text>
  </message>
  <message>
    <ts>2017-06-29T15:53:14.782508</ts>
    <user>U5LFUHH19</user>
    <text>Gah!  That's it, &lt;@U1CE9DL9H&gt; !</text>
  </message>
  <message>
    <ts>2017-06-29T15:53:27.787066</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U285A8S8H&gt; I think random.pcg and random.extra have nice options for picking a random item from a list</text>
  </message>
  <message>
    <ts>2017-06-29T15:53:58.798150</ts>
    <user>U0LPMPL2U</user>
    <text>They work a bit like JSON decoders. You build simple generators and combine them into a more complex one</text>
  </message>
  <message>
    <ts>2017-06-29T15:54:08.801575</ts>
    <user>U285A8S8H</user>
    <text>that's cool</text>
  </message>
  <message>
    <ts>2017-06-29T15:54:26.808033</ts>
    <user>U5LFUHH19</user>
    <text>Mind you, I'm still pretty lost, but I just could not see that bug.  Thanks!  I'll go back to figuring this out, now.</text>
  </message>
  <message>
    <ts>2017-06-29T15:55:34.831678</ts>
    <user>U285A8S8H</user>
    <text>so is it going to look like
`generate notes |&amp;gt; andThen (generate scales) |&amp;gt; ...`?</text>
  </message>
  <message>
    <ts>2017-06-29T15:56:11.844654</ts>
    <user>U0LPMPL2U</user>
    <text>more like `Random.map3 Exercise randomNote randomScale randomKind`</text>
  </message>
  <message>
    <ts>2017-06-29T15:56:31.851365</ts>
    <user>U285A8S8H</user>
    <text>oh right</text>
  </message>
  <message>
    <ts>2017-06-29T15:56:38.854045</ts>
    <user>U0LPMPL2U</user>
    <text>you only need `andThen` if the rolls are dependent on each other</text>
  </message>
  <message>
    <ts>2017-06-29T15:57:59.882388</ts>
    <user>U285A8S8H</user>
    <text>thanks, I'll play with that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T15:58:23.891171</ts>
    <user>U0CLDU8UB</user>
    <text>If you've worked with Tasks before, that's also a helpful frame of reference.</text>
  </message>
  <message>
    <ts>2017-06-29T15:58:46.899502</ts>
    <user>U0LPMPL2U</user>
    <text>In your case you probably want something like:
```
randomNote : Generator Note
randomNote =
  Random.Extra.sample [Note1, Note2, Note3]
    |&amp;gt; Random.map (Maybe.withDefault Note1)

randomScale : Generator Scale
randomScale =
  Random.Extra.sample [Scale1, Scale2, Scale3]
    |&amp;gt; Random.map (Maybe.withDefault Scale1)

randomScale : Generator Kind
randomScale =
  Random.Extra.sample [Kind1, Kind2, Kind3]
    |&amp;gt; Random.map (Maybe.withDefault Kind1)

randomExercise : Generator Exercise
randomExercise =
  Random.map3 Exercise randomNote randomScale randomKind
```</text>
  </message>
  <message>
    <ts>2017-06-29T15:59:19.911203</ts>
    <user>U0LPMPL2U</user>
    <text>You need that `Maybe.withDefault` because picking a random element from a list returns a `Maybe` since the list might be empty</text>
  </message>
  <message>
    <ts>2017-06-29T15:59:19.911287</ts>
    <user>U285A8S8H</user>
    <text>well I _can_ get these to work but I'm not 100% clear how to use them yet :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-06-29T15:59:30.915328</ts>
    <user>U285A8S8H</user>
    <text>&lt;@U0LPMPL2U&gt; thanks! I didn't actually need a ready-to-go example :smile:</text>
  </message>
  <message>
    <ts>2017-06-29T16:00:10.930251</ts>
    <user>U0LPMPL2U</user>
    <text>I hope I didn't spoil the fun of figuring it out for you :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-29T16:01:00.948802</ts>
    <user>U285A8S8H</user>
    <text>don't worry!</text>
  </message>
  <message>
    <ts>2017-06-29T16:01:59.969942</ts>
    <user>U285A8S8H</user>
    <text>btw I was _this_ close to getting Elm at work but the CTO decided to use vue + vuex instead. Why? because that's what they're using at his other job</text>
  </message>
  <message>
    <ts>2017-06-29T16:02:24.979355</ts>
    <user>U0LPMPL2U</user>
    <text>If you're interested in digging more into Random, I gave a talk about it at ElmConf last year: &lt;https://www.youtube.com/watch?v=YxGWQdFo2Yc&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T16:04:09.015681</ts>
    <user>U285A8S8H</user>
    <text>oh, I remember watching some of that! I enjoyed it, though it was difficult to grasp two new concepts (roman names and random in elm) at the same time. Nevertheless it was helpful</text>
  </message>
  <message>
    <ts>2017-06-29T16:04:47.029262</ts>
    <user>U0CLDU8UB</user>
    <text>That was one of my favorite talks last year! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T16:05:29.043928</ts>
    <user>U285A8S8H</user>
    <text>my problem with Elm is that I don't use it often enough to get comfortable with some advanced concepts</text>
  </message>
  <message>
    <ts>2017-06-29T16:05:47.050020</ts>
    <user>U285A8S8H</user>
    <text>I'd usually start a new project, set up the boilerplate and abandon it within a week :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-29T16:06:09.057326</ts>
    <user>U40QW928G</user>
    <text>to be fair the barrier for entry is much lower with vue</text>
  </message>
  <message>
    <ts>2017-06-29T16:06:15.059520</ts>
    <user>U40QW928G</user>
    <text>and a safer bet</text>
  </message>
  <message>
    <ts>2017-06-29T16:06:56.073187</ts>
    <user>U0LPMPL2U</user>
    <text>Once you get comfortable with using `map`, `map2`, `andThen` on various data structures, so many patterns start falling into place</text>
  </message>
  <message>
    <ts>2017-06-29T16:07:18.080823</ts>
    <user>U285A8S8H</user>
    <text>I couldn't care less for vue, but vuex is the bees knees when compared to redux</text>
  </message>
  <message>
    <ts>2017-06-29T16:15:17.242333</ts>
    <user>U285A8S8H</user>
    <text>why does `Random.map` need `Maybe.withDefault`? is this for case when a list is empty?</text>
  </message>
  <message>
    <ts>2017-06-29T16:15:25.245152</ts>
    <user>U0LPMPL2U</user>
    <text>correct</text>
  </message>
  <message>
    <ts>2017-06-29T16:15:45.251882</ts>
    <user>U0LPMPL2U</user>
    <text>It will never be empty because you gave it a hard-coded list</text>
  </message>
  <message>
    <ts>2017-06-29T16:16:13.261196</ts>
    <user>U0LPMPL2U</user>
    <text>but the function doesn't know that. You _could_ have passed in an empty list</text>
  </message>
  <message>
    <ts>2017-06-29T16:16:43.271513</ts>
    <user>U285A8S8H</user>
    <text>sure</text>
  </message>
  <message>
    <ts>2017-06-29T16:17:03.278389</ts>
    <user>U285A8S8H</user>
    <text>btw how would you write such generator without Random.Extra?</text>
  </message>
  <message>
    <ts>2017-06-29T16:17:59.297735</ts>
    <user>U0LPMPL2U</user>
    <text>One way would be to randomly get a number between 0 and the length of the list, extract that number element from the list</text>
  </message>
  <message>
    <ts>2017-06-29T16:20:38.352624</ts>
    <user>U5XC2FJ1Y</user>
    <text>if you know your list is nonempty then mgold/nonempty provides a `sample : Nonempty a -&amp;gt; Generator a` method</text>
  </message>
  <message>
    <ts>2017-06-29T16:24:15.427968</ts>
    <user>U0LPMPL2U</user>
    <text>Looking at the implementation of `Random.Extra.sample`, it looks like they do just just that &lt;https://github.com/elm-community/random-extra/blob/2.0.0/src/Random/Extra.elm#L190-L204&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T16:43:31.825839</ts>
    <user>U5LFUHH19</user>
    <text>Coming from Perl/Mojolicious, I'm not familiar with the conventions of writing an SPA.  It looks like I should do "/investigators" to get a list, and "/investigators/&amp;lt;id&amp;gt;" to get one.  So, inside Elm, would it be best to have a "Page.Investigators" to give me that list view and a "Page.Investigator" to take an id (Int) and get just one record?</text>
  </message>
  <message>
    <ts>2017-06-29T16:48:12.921990</ts>
    <user>U285A8S8H</user>
    <text>sure, that makes sense</text>
  </message>
  <message>
    <ts>2017-06-29T16:48:54.936537</ts>
    <user>U5LFUHH19</user>
    <text>I guess a Page can have only one Model, so they would have to be two different Pages.</text>
  </message>
  <message>
    <ts>2017-06-29T16:49:04.940052</ts>
    <user>U2D0V2SAC</user>
    <text>Is ELM supposed to be compatible with google-closure-compiler-js as of today ? I'm getting 6 errors during my webpack build, coming from Elm generated code.</text>
  </message>
  <message>
    <ts>2017-06-29T16:51:56.998448</ts>
    <user>U5LFUHH19</user>
    <text>In the REPL, after I `g = Http.get url decoder` what can I do with `g` to look at the results?</text>
  </message>
  <message>
    <ts>2017-06-29T16:52:25.007705</ts>
    <user>U5LFUHH19</user>
    <text>It says it's a `Http.Request (List (Dict.Dict String String))` and I want to see if the decoding works.</text>
  </message>
  <message>
    <ts>2017-06-29T16:53:37.032792</ts>
    <user>U0LPMPL2U</user>
    <text>The request hasn't been made yet</text>
  </message>
  <message>
    <ts>2017-06-29T16:53:51.037489</ts>
    <user>U285A8S8H</user>
    <text>the repl is quite limited unfortunately, it doesn't give you the full elm runtime</text>
  </message>
  <message>
    <ts>2017-06-29T16:54:29.050027</ts>
    <user>U285A8S8H</user>
    <text>what you have there is data that represents your request</text>
  </message>
  <message>
    <ts>2017-06-29T16:54:44.054909</ts>
    <user>U285A8S8H</user>
    <text>you'd need to pass it to elm runtime to see some results</text>
  </message>
  <message>
    <ts>2017-06-29T16:56:03.081719</ts>
    <user>U0LPMPL2U</user>
    <text>you do that by converting to a `Cmd` and returning it from `update`</text>
  </message>
  <message>
    <ts>2017-06-29T17:13:00.415808</ts>
    <user>U5FU80S06</user>
    <text>&lt;@U0EUHKVGB&gt; Regarding &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1498747762625749&gt;, it seems that the technique hinges on creating a function which does not evaluate right away, which means a function that takes an arg (otherwise, the 'function' is simply a value definition which of course happens right away). But this arg could in fact be anything, an `Int` for example, and does not have to be the special `()` value.  So why insist on using `()`?  Is it simply convention?</text>
  </message>
  <message>
    <ts>2017-06-29T17:15:20.457944</ts>
    <user>U1CE9DL9H</user>
    <text>convention I guess. plus the argument is evaluated, so we may as well guide people into the right direction by enforcing `()`</text>
  </message>
  <message>
    <ts>2017-06-29T17:19:22.530182</ts>
    <user>U0EUHKVGB</user>
    <text>convention. `()` is known as `unit`</text>
  </message>
  <message>
    <ts>2017-06-29T17:19:28.531933</ts>
    <user>U0EUHKVGB</user>
    <text>it is the only possible value of it’s type</text>
  </message>
  <message>
    <ts>2017-06-29T17:19:47.537305</ts>
    <user>U0EUHKVGB</user>
    <text>aand that makes it perfect for when you want to show that something has no value</text>
  </message>
  <message>
    <ts>2017-06-29T17:20:19.547151</ts>
    <user>U0EUHKVGB</user>
    <text>Consider this API:

```
unwrap : (() -&amp;gt; b) -&amp;gt; (a -&amp;gt; b) -&amp;gt; Maybe a -&amp;gt; b
```
vs
```
unwrap : (Int -&amp;gt; b) -&amp;gt; (a -&amp;gt; b) -&amp;gt; Maybe a -&amp;gt; b
```</text>
  </message>
  <message>
    <ts>2017-06-29T17:20:30.550383</ts>
    <user>U0EUHKVGB</user>
    <text>It looks like the second `unwrap` does something with an int!</text>
  </message>
  <message>
    <ts>2017-06-29T17:20:51.556517</ts>
    <user>U0EUHKVGB</user>
    <text>Whereas with the first, we know that the first argument to the function we pass in is useless.</text>
  </message>
  <message>
    <ts>2017-06-29T17:21:45.571781</ts>
    <user>U5FU80S06</user>
    <text>Yes, I just wanted a sanity check that the technique is nomal Elm with no special magic.</text>
  </message>
  <message>
    <ts>2017-06-29T17:22:37.587436</ts>
    <user>U5FU80S06</user>
    <text>Is the `()` syntax guaranteed to stick around?</text>
  </message>
  <message>
    <ts>2017-06-29T17:22:53.591897</ts>
    <user>U0EUHKVGB</user>
    <text>Err.. Yes?</text>
  </message>
  <message>
    <ts>2017-06-29T17:23:03.594902</ts>
    <user>U0EUHKVGB</user>
    <text>Hard to answer that really, but yes.</text>
  </message>
  <message>
    <ts>2017-06-29T17:23:28.602147</ts>
    <user>U0EUHKVGB</user>
    <text>It’s as guaranteed as tuples, functions and lists.</text>
  </message>
  <message>
    <ts>2017-06-29T17:24:06.613194</ts>
    <user>U23SA861Y</user>
    <text>It's an empty tuple</text>
  </message>
  <message>
    <ts>2017-06-29T17:34:46.796269</ts>
    <user>U0F01KLV6</user>
    <text>jfbourget: It's not compatible with advanced optimizations. Should work fine in "simple" mode though.</text>
  </message>
  <message>
    <ts>2017-06-29T17:36:11.819622</ts>
    <user>U0F01KLV6</user>
    <text>I know there has been some discussion on removing `()`, as you can always use `{}`. But that seem like something `elm-upgrade` would handle if that were to happen.</text>
  </message>
  <message>
    <ts>2017-06-29T17:36:57.832246</ts>
    <user>U2D0V2SAC</user>
    <text>Thanks.</text>
  </message>
  <message>
    <ts>2017-06-29T17:41:56.911283</ts>
    <user>U0EUHKVGB</user>
    <text>There will always be a way to represent unit, and it will be a trivial upgrade if the time comes for that, yeah.</text>
  </message>
  <message>
    <ts>2017-06-29T17:46:54.989455</ts>
    <user>U23SA861Y</user>
    <text>I wonder if anyone has rolled an elm app up into a web component?</text>
  </message>
  <message>
    <ts>2017-06-29T17:56:05.129923</ts>
    <user>U0EUHKVGB</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-06-29T17:56:39.138358</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/ohanhi/elm-ement&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T18:06:20.284229</ts>
    <user>U23SA861Y</user>
    <text>huh</text>
  </message>
  <message>
    <ts>2017-06-29T18:13:10.377207</ts>
    <user>U23SA861Y</user>
    <text>does that still work, it seems to consume Signal</text>
  </message>
  <message>
    <ts>2017-06-29T18:29:48.593025</ts>
    <user>U0EUHKVGB</user>
    <text>The concept is exactly the same today.</text>
  </message>
  <message>
    <ts>2017-06-29T19:04:14.004411</ts>
    <user>U23SA861Y</user>
    <text>umm, I see no signal in core today. I was under the impression all the FRP stuff was stripped out</text>
  </message>
  <message>
    <ts>2017-06-29T19:05:45.021731</ts>
    <user>U23SA861Y</user>
    <text>oh never mind those are just ports so they would be replaced with subscriptions</text>
  </message>
  <message>
    <ts>2017-06-29T19:05:50.022729</ts>
    <user>U0EUHKVGB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-29T19:11:34.085986</ts>
    <user>U0EUHKVGB</user>
    <text>```
port module Hello where

import Html exposing (Html, program)

port increment : (() -&amp;gt; msg) -&amp;gt; Sub msg
port greeting : (String -&amp;gt; msg) -&amp;gt; Sub msg

type alias Model = { clicks : Int, greeting : String }

defaultModel : Model
defaultModel = { clicks = 0, greeting = ""}

type Msg = Click | Greet String
update : Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)
update msg model =
  case msg of 
    Click -&amp;gt; { model | clicks = clicks + 1 }, Cmd.none
    Greet greeting -&amp;gt; { model | greeting = greeting }, Cmd.none

view : Model -&amp;gt; Html Msg
view model =
  Html.text (model.greeting ++ " Web Components! Click count: " ++ toString model.clicks)

subs : Model -&amp;gt; Sub Msg
subs model =
  Sub.batch [ increment (\_ -&amp;gt; Click), greeting Greet ] 

main :  Program
main = { view = view, update = update, init = \_ -&amp;gt; (defaultModel, Cmd.none) , subscriptions = subs }
```</text>
  </message>
  <message>
    <ts>2017-06-29T19:15:07.124731</ts>
    <user>U0EUHKVGB</user>
    <text>I only compiled by eye, so bits might be a bit off. But that’s basically all you need to do to make it work on 0.18.</text>
  </message>
  <message>
    <ts>2017-06-29T19:15:30.128847</ts>
    <user>U0EUHKVGB</user>
    <text>Plus change the ports so that now it’s `app.module.ports.portname`</text>
  </message>
  <message>
    <ts>2017-06-29T19:16:02.134739</ts>
    <user>U0EUHKVGB</user>
    <text>and delete the elm-package.json, and just recreate it via `elm-package install --yes`</text>
  </message>
  <message>
    <ts>2017-06-29T19:31:30.298099</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3CjXtn88X6Ma1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T19:37:49.361106</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://ellie-app.com/3Ck4498RrTHa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T19:38:15.365384</ts>
    <user>U23SA861Y</user>
    <text>what did you change there</text>
  </message>
  <message>
    <ts>2017-06-29T19:38:38.369052</ts>
    <user>U0EUHKVGB</user>
    <text>changes:
- send `null` instead of `[]` for `()`
- bind the click event listeners to the buttons by id, rather than using `onclick=..`</text>
  </message>
  <message>
    <ts>2017-06-29T19:39:19.375414</ts>
    <user>U23SA861Y</user>
    <text>ahh, was the second step nessecary</text>
  </message>
  <message>
    <ts>2017-06-29T19:39:25.376298</ts>
    <user>U23SA861Y</user>
    <text>my javascript is terrible</text>
  </message>
  <message>
    <ts>2017-06-29T19:39:57.381261</ts>
    <user>U0EUHKVGB</user>
    <text>it shouldn’t have been</text>
  </message>
  <message>
    <ts>2017-06-29T19:40:09.383165</ts>
    <user>U0EUHKVGB</user>
    <text>But it did :thinking_face:</text>
  </message>
  <message>
    <ts>2017-06-29T19:40:18.384609</ts>
    <user>U0EUHKVGB</user>
    <text>Not elm related, anyway</text>
  </message>
  <message>
    <ts>2017-06-29T19:40:26.385908</ts>
    <user>U23SA861Y</user>
    <text>fair enough</text>
  </message>
  <message>
    <ts>2017-06-29T19:40:36.387405</ts>
    <user>U0EUHKVGB</user>
    <text>Generally best practice to do it via `id` anyway :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T19:41:12.392836</ts>
    <user>U23SA861Y</user>
    <text>now this is where the web-component elm app creates a new web component</text>
  </message>
  <message>
    <ts>2017-06-29T19:41:15.393157</ts>
    <user>U23SA861Y</user>
    <text>:stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-29T19:44:43.425233</ts>
    <user>U23SA861Y</user>
    <text>which is another elm app</text>
  </message>
  <message>
    <ts>2017-06-29T19:51:33.490026</ts>
    <user>U23SA861Y</user>
    <text>lol, I broke it &lt;https://ellie-app.com/3Ckf6fVvXMGa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T20:00:22.573507</ts>
    <user>U23SA861Y</user>
    <text>apparently recursively defined web-components are a thing</text>
  </message>
  <message>
    <ts>2017-06-29T20:01:22.583656</ts>
    <user>U2LAL86AY</user>
    <text>any timeline when we might get string interpolation in elm. I find myself doing a lot of `"string before " ++ (toString value ) ++ " string after"` ?! - something like this would be better: `"string before {{ value }} string after"` :yum:</text>
  </message>
  <message>
    <ts>2017-06-29T20:02:54.598602</ts>
    <user>U23SA861Y</user>
    <text>is that actually less typing?</text>
  </message>
  <message>
    <ts>2017-06-29T20:03:16.602421</ts>
    <user>U601ELFEG</user>
    <text>is toString idempotent on strings?</text>
  </message>
  <message>
    <ts>2017-06-29T20:04:34.614200</ts>
    <user>U23SA861Y</user>
    <text>appears to add quotes</text>
  </message>
  <message>
    <ts>2017-06-29T20:04:35.614437</ts>
    <user>U2LAL86AY</user>
    <text>if you mean `toString "a string"` -&amp;gt; it returns `""a string""`</text>
  </message>
  <message>
    <ts>2017-06-29T20:04:54.617192</ts>
    <user>U601ELFEG</user>
    <text>what about `unwords ["string before", toString value, "string after"]`  -- mind you, `String.unwords` is missing from the library</text>
  </message>
  <message>
    <ts>2017-06-29T20:05:54.626569</ts>
    <user>U601ELFEG</user>
    <text>&lt;@U2LAL86AY&gt; - that's not idempotent! So if, in your syntax, `{{ }}` means calling `toString` on the value (which `toString`... wish elm had type classes...)  it won't work right for string values</text>
  </message>
  <message>
    <ts>2017-06-29T20:06:50.635164</ts>
    <user>U23SA861Y</user>
    <text>umm it is idempotent, it's not identity?</text>
  </message>
  <message>
    <ts>2017-06-29T20:07:06.637476</ts>
    <user>U2LAL86AY</user>
    <text>hmm still i don't underestand what it means: `idempotent: denoting an element of a set which is unchanged in value when multiplied or otherwise operated on by itself.` - why we are talking about multiplying.</text>
  </message>
  <message>
    <ts>2017-06-29T20:07:08.637840</ts>
    <user>U601ELFEG</user>
    <text>if you keep calling it, you add more and more quotes</text>
  </message>
  <message>
    <ts>2017-06-29T20:07:09.637892</ts>
    <user>U23SA861Y</user>
    <text>err, I 'm thinking more web request</text>
  </message>
  <message>
    <ts>2017-06-29T20:07:25.640358</ts>
    <user>U23SA861Y</user>
    <text>I guess in the form of results and repeated applications idempotent and identity converge</text>
  </message>
  <message>
    <ts>2017-06-29T20:08:12.647053</ts>
    <user>U23SA861Y</user>
    <text>it means a |&amp;gt; fn |&amp;gt; fn = a |&amp;gt; fn</text>
  </message>
  <message>
    <ts>2017-06-29T20:08:40.651190</ts>
    <user>U23SA861Y</user>
    <text>repeated application does not continue to change the results</text>
  </message>
  <message>
    <ts>2017-06-29T20:09:45.660621</ts>
    <user>U23SA861Y</user>
    <text>for example the result of a "PUT" operation in http should be idempotent. It shouldn't matter if a single request succeeds or 100, the resulting state is the same</text>
  </message>
  <message>
    <ts>2017-06-29T20:10:07.664240</ts>
    <user>U2LAL86AY</user>
    <text>yes thanks, good example :smile:</text>
  </message>
  <message>
    <ts>2017-06-29T21:01:17.074473</ts>
    <user>U2FPUTJAJ</user>
    <text>Hi, I think I have some coporate proxy issue, I'm now viewing &lt;http://package.elm-lang.org|package.elm-lang.org&gt; as text/plain response, but I can view &lt;http://elm-lang.org|elm-lang.org&gt; just fine.</text>
  </message>
  <message>
    <ts>2017-06-29T23:31:35.140612</ts>
    <user>U601ELFEG</user>
    <text>yikes - I'm a little overwhelmed: `elm-bootstrap` or `elm-mdl`?</text>
  </message>
  <message>
    <ts>2017-06-29T23:40:22.192838</ts>
    <user>U17R26VR8</user>
    <text>elm-css</text>
  </message>
  <message>
    <ts>2017-06-29T23:50:00.250070</ts>
    <user>U601ELFEG</user>
    <text>nah - I don't have time to do all my own pixel nudging!</text>
  </message>
  <message>
    <ts>2017-06-30T01:05:41.712500</ts>
    <user>U61RNCASK</user>
    <text>To draw charts (line charts, bar charts) should I use charty, elm-visualisation, elm-charts, &amp;lt;something else&amp;gt;? Any recommendations?</text>
  </message>
  <message>
    <ts>2017-06-30T01:38:06.912150</ts>
    <user>U17SFNGD8</user>
    <text>I would add Elm Plot to that list, and look over the features and APIs of them all to see what you like the most. &lt;https://github.com/terezka/elm-plot&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T01:42:11.938444</ts>
    <user>U61RNCASK</user>
    <text>&lt;@U17SFNGD8&gt; thank you</text>
  </message>
  <message>
    <ts>2017-06-30T02:35:49.337575</ts>
    <user>U3UDDA4R5</user>
    <text>Is anyone here using Algolia search and Elm? I’ve used Algolia with React before but I’d love to talk to someone who used it with Elm (ports or not).</text>
  </message>
  <message>
    <ts>2017-06-30T03:34:16.917926</ts>
    <user>U44CPUA82</user>
    <text>mzero: of these two would stick with `elm-bootstrap`. in my (limited) experience `elm-mdl` requires quite a bit of tedious manual "plumbing". also MDL is now kind of deprecated by Google in favor of Material Design Components</text>
  </message>
  <message>
    <ts>2017-06-30T03:45:18.045667</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U23SA861Y&gt;, I updated the repo to Elm 0.18 now: &lt;https://github.com/ohanhi/elm-ement&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T03:53:05.139970</ts>
    <user>U31AUNK6F</user>
    <text>Where does "Elm" stands for? Where did the name came from?</text>
  </message>
  <message>
    <ts>2017-06-30T03:55:49.173996</ts>
    <user>U0CLDU8UB</user>
    <text>Here's the genesis story I've heard: Evan liked trees (the data structures) and so thought of looking through a list of trees (the plant kind) to name his project by. "Elm" was short and nice.</text>
  </message>
  <message>
    <ts>2017-06-30T03:55:51.174555</ts>
    <user>U3SJEDR96</user>
    <text>&lt;http://faq.elm-community.org/#what-does-the-name-elm-stand-for&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T03:56:53.187275</ts>
    <user>U0CLDU8UB</user>
    <text>Hey, I probably didn't say that wrong! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T03:57:06.190003</ts>
    <user>U3SJEDR96</user>
    <text>:smile:</text>
  </message>
  <message>
    <ts>2017-06-30T04:32:41.668657</ts>
    <user>U2W22AHNU</user>
    <text>Just curious, but what it the state of ELM itself, I know it has active development, but I also see issues of many many months old at GitHub that are not answered like &lt;https://github.com/elm-lang/dom/issues&gt; none closed either. Is this the wrong place?</text>
  </message>
  <message>
    <ts>2017-06-30T04:33:33.680694</ts>
    <user>U1CE9DL9H</user>
    <text>that work is often batched, so then  a bunch of issues is closed at once</text>
  </message>
  <message>
    <ts>2017-06-30T04:34:42.696676</ts>
    <user>U1CE9DL9H</user>
    <text>you can also see that those issues are mostly requests for extending the library, which doesn't happen "on a whim"</text>
  </message>
  <message>
    <ts>2017-06-30T04:37:27.734254</ts>
    <user>U2W22AHNU</user>
    <text>Thanks, I understand that last part (and I 100% agree), but it seemed completely dead (i.e. also no comments even to let people know this is how it works). Maybe it would be something to setup a bot to auto comment on new issues explaining how the Elm team likes to work?</text>
  </message>
  <message>
    <ts>2017-06-30T04:37:58.741315</ts>
    <user>U1CE9DL9H</user>
    <text>there is &lt;https://github.com/process-bot&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T04:38:12.744434</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;https://github.com/elm-lang/dom/issues/16&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T04:38:25.747657</ts>
    <user>U1CE9DL9H</user>
    <text>you can see it links to some resources in every issue/pr</text>
  </message>
  <message>
    <ts>2017-06-30T04:38:45.752119</ts>
    <user>U1CE9DL9H</user>
    <text>specifically &lt;https://github.com/process-bot/contribution-checklist/blob/master/expectations.md&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T04:39:05.756709</ts>
    <user>U2W22AHNU</user>
    <text>lol I completely missed that... sorry</text>
  </message>
  <message>
    <ts>2017-06-30T04:40:41.779561</ts>
    <user>U2W22AHNU</user>
    <text>Very good explanation actually, should have seen that instead.</text>
  </message>
  <message>
    <ts>2017-06-30T04:44:45.836151</ts>
    <user>U2W22AHNU</user>
    <text>Especially the last two paragraphs</text>
  </message>
  <message>
    <ts>2017-06-30T04:45:25.845792</ts>
    <user>U0CLDU8UB</user>
    <text>This talk is probably the best answer to your questions available: &lt;https://www.youtube.com/watch?v=DSjbTC-hvqQ&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T04:46:44.864532</ts>
    <user>U2W22AHNU</user>
    <text>Now is there an overview or something that indicates when the team might switch (roadmap) I mean the oldest issue in the Dom one is about a year old. Btw this is not complaining, more a question on my own approach on solving the issues.</text>
  </message>
  <message>
    <ts>2017-06-30T04:47:27.874890</ts>
    <user>U2W22AHNU</user>
    <text>ohanhi: Thanks, will watch it tonight at home :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T04:49:26.903180</ts>
    <user>U31AUNK6F</user>
    <text>Thanks &lt;@U0CLDU8UB&gt; , &lt;@U3SJEDR96&gt; !</text>
  </message>
  <message>
    <ts>2017-06-30T04:49:49.908475</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2W22AHNU&gt; &lt;https://github.com/elm-lang/projects/blob/master/roadmap.md&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T04:51:14.928958</ts>
    <user>U2LAL86AY</user>
    <text>:smile: I Never seen this before.
`In the year 2017 or 2030, users will only know if things are nice or if they suck. January or July of 2016 makes no difference to them. So waiting a few months feels like a long time to us, but it is not about us!`</text>
  </message>
  <message>
    <ts>2017-06-30T04:51:31.933262</ts>
    <user>U2LAL86AY</user>
    <text>so much commitment :heart:</text>
  </message>
  <message>
    <ts>2017-06-30T04:52:23.945711</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, Evan's commitment to his vision is quite extra-ordinary</text>
  </message>
  <message>
    <ts>2017-06-30T05:50:42.782793</ts>
    <user>U44CPUA82</user>
    <text>&lt;@U2W22AHNU&gt; &lt;https://github.com/process-bot/contribution-checklist/blob/master/expectations.md&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T06:04:27.975505</ts>
    <user>U0GR6DHEK</user>
    <text>Hi, I'm having an issue with drag-drop. Basically I have an element that is `dragable` with `dragstart` and `dragend` event listeners. And I have a target with `dragenter` and `dragleave` event handlers that set/remove the target in the model. I expect to take action on `dragend` as long as the model has a target in it. But on a drop, `dragleave` fires before `dragend` and the model has had the target removed. As a result, no drop happens. Is there a different way</text>
  </message>
  <message>
    <ts>2017-06-30T06:06:16.000083</ts>
    <user>U0CLDU8UB</user>
    <text>Are you doing the preventDefault thing?</text>
  </message>
  <message>
    <ts>2017-06-30T06:06:40.005240</ts>
    <user>U0CLDU8UB</user>
    <text>To mark the elements as drop zones</text>
  </message>
  <message>
    <ts>2017-06-30T06:07:36.017282</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API#Define_a_drop_zone&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T06:08:40.030850</ts>
    <user>U0GR6DHEK</user>
    <text>ah, let me play around with ondrop some more</text>
  </message>
  <message>
    <ts>2017-06-30T06:10:46.058275</ts>
    <user>U0CLDU8UB</user>
    <text>Note that you need both `ondragover` and `ondrop` to preventDefault</text>
  </message>
  <message>
    <ts>2017-06-30T06:11:57.073397</ts>
    <user>U0CLDU8UB</user>
    <text>I think this package may be helpful, but I haven't tried it myself: &lt;http://package.elm-lang.org/packages/norpan/elm-html5-drag-drop/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T06:16:19.127671</ts>
    <user>U0GR6DHEK</user>
    <text>I looked at that but it had a line `attribute "ondragover" "event.stopPropagation(); event.preventDefault();"` that left me a little queezy</text>
  </message>
  <message>
    <ts>2017-06-30T06:16:35.131008</ts>
    <user>U0GR6DHEK</user>
    <text>&lt;https://github.com/norpan/elm-html5-drag-drop/blob/1.1.0/src/Html5/DragDrop.elm#L190&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T06:18:08.150425</ts>
    <user>U4872964V</user>
    <text>Html5 drag and drop is a bit peculiar</text>
  </message>
  <message>
    <ts>2017-06-30T06:18:59.160818</ts>
    <user>U4872964V</user>
    <text>You need that ondragover for it to work properly</text>
  </message>
  <message>
    <ts>2017-06-30T06:40:35.420637</ts>
    <user>U17J54S2U</user>
    <text>norpan: Cant you achieve the same using `onWithOptions "ondragover"` again? I’m curious as to why `Html.Attributes.attribute` was needed :smile:</text>
  </message>
  <message>
    <ts>2017-06-30T06:41:25.430580</ts>
    <user>U4872964V</user>
    <text>You can, but then it sends a message</text>
  </message>
  <message>
    <ts>2017-06-30T06:45:09.474098</ts>
    <user>U2LAL86AY</user>
    <text>it is possible to have a `reduce/fold` method that `breaks`? like a `for loop` does, but in a pure functional programming language like elm. 
Sometimes is useful to not go trough the hole list if you find what you are looking for.</text>
  </message>
  <message>
    <ts>2017-06-30T06:47:41.503370</ts>
    <user>U2LAL86AY</user>
    <text>i got this - `reduce with breakes`
```
var EXIT_REDUCE = {};

function reduce(a, f, result) {
  for (let i = 0; i &amp;lt; a.length; i++) {
    let val = f(result, a[i], i, a);
    if (val === EXIT_REDUCE) break;
    result = val;
  }
  return result;
}
```
from here : &lt;https://stackoverflow.com/questions/36144406/how-to-break-on-reduce-method&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T06:48:58.518217</ts>
    <user>U0GR6DHEK</user>
    <text>then you need a json decoder that always fails</text>
  </message>
  <message>
    <ts>2017-06-30T06:50:28.535570</ts>
    <user>U0GR6DHEK</user>
    <text>i always understood that the answer was that you should not code breaks, but an optimized compiler would insert them</text>
  </message>
  <message>
    <ts>2017-06-30T06:53:41.572542</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3Cxhjfm6Qrga1/1&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T06:53:52.574674</ts>
    <user>U2LAL86AY</user>
    <text>aa super :smile: - so somehow it is possible for the compiler to detect if it should break -and will write the appropriate code with a break statement automatically - so that i shouldn't worry to much about going trough the hole list?

So elm doesn't have this ability at the moment? Or it does? -&amp;gt; i rather not worry about this breaking and let the compiler do it for me.</text>
  </message>
  <message>
    <ts>2017-06-30T06:54:07.577668</ts>
    <user>U3SJEDR96</user>
    <text>you can open the dev console and verify it doesn't examine past 5</text>
  </message>
  <message>
    <ts>2017-06-30T06:55:02.588787</ts>
    <user>U3SJEDR96</user>
    <text>though it's hard to come up with a good use case for this that can't be covered more efficiently?</text>
  </message>
  <message>
    <ts>2017-06-30T06:59:49.644582</ts>
    <user>U2LAL86AY</user>
    <text>:smile: maybe not. - in reality i was building a function in js, not in elm - that was iterating the DOM - and started with reduce -because i like reducing :smile: - but i needed to exit quickly. Found that answer,
Than i thought this should be useful in elm sometimes. Thanks for that example. :smile:</text>
  </message>
  <message>
    <ts>2017-06-30T06:59:55.645799</ts>
    <user>U3SJEDR96</user>
    <text>but then it won't prevent defaults</text>
  </message>
  <message>
    <ts>2017-06-30T07:00:23.652565</ts>
    <user>U3SJEDR96</user>
    <text>afaik, this is the only option to get it done _without_ a no-op message</text>
  </message>
  <message>
    <ts>2017-06-30T07:07:14.732674</ts>
    <user>U0GR6DHEK</user>
    <text>Ok, looks like I can confirm this from my own code just now</text>
  </message>
  <message>
    <ts>2017-06-30T07:18:15.856797</ts>
    <user>U2JFD9ALE</user>
    <text>Are you able to `Debug.log "foo"` when you build without `elm-make --debug`?</text>
  </message>
  <message>
    <ts>2017-06-30T07:18:23.858568</ts>
    <user>U2JFD9ALE</user>
    <text>If yes, why? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T07:22:25.903928</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2JFD9ALE&gt; currently, yes; but I believe that might be changing in an upcoming version.</text>
  </message>
  <message>
    <ts>2017-06-30T07:24:10.923609</ts>
    <user>U2JFD9ALE</user>
    <text>OK, that would be really nice. I know that you can _*explode*_ the app by `Debug.crash` but I'm not really keen to that :wink:</text>
  </message>
  <message>
    <ts>2017-06-30T07:24:27.927091</ts>
    <user>U4872964V</user>
    <text>&lt;@U0GR6DHEK&gt; if you find a good way I'll gladly incorporate it :)</text>
  </message>
  <message>
    <ts>2017-06-30T07:26:32.950862</ts>
    <user>U3SJEDR96</user>
    <text>True. Once in a blue moon, that makes sense, though</text>
  </message>
  <message>
    <ts>2017-06-30T07:30:02.990182</ts>
    <user>U2DSBB76Y</user>
    <text>Does anyone know if Evans talk from Elm-Europe will get uploaded anytime soon? Or am I just bad at finding it? :smile:</text>
  </message>
  <message>
    <ts>2017-06-30T07:34:41.043179</ts>
    <user>U5DJNFLUD</user>
    <text>It has been posted </text>
  </message>
  <message>
    <ts>2017-06-30T07:35:15.049240</ts>
    <user>U5DJNFLUD</user>
    <text>&lt;https://www.youtube.com/watch?v=2ihTgEYiKpI&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T07:35:38.053623</ts>
    <user>U5DJNFLUD</user>
    <text>Worth watching</text>
  </message>
  <message>
    <ts>2017-06-30T07:36:25.062606</ts>
    <user>U0GR6DHEK</user>
    <text>&lt;@U4872964V&gt; will do. I have just used a NoOp instead, but i can see that that is not very appropriate for a library</text>
  </message>
  <message>
    <ts>2017-06-30T07:39:49.101031</ts>
    <user>U2DSBB76Y</user>
    <text>Cool! Any particular reason keeping it hidden?</text>
  </message>
  <message>
    <ts>2017-06-30T07:42:07.126676</ts>
    <user>U3SJEDR96</user>
    <text>editing might not be completely done yet</text>
  </message>
  <message>
    <ts>2017-06-30T07:46:21.174662</ts>
    <user>U17R26VR8</user>
    <text>it’s taken a while, was up a couple of days afterwards but now it’s been 3 weeks</text>
  </message>
  <message>
    <ts>2017-06-30T07:49:20.208771</ts>
    <user>U44CPUA82</user>
    <text>I find that a bit weird too. it's not like they hired David Fincher to handle post-production of these videos :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T07:49:32.210978</ts>
    <user>U3SJEDR96</user>
    <text>most video's are released, though - &lt;https://www.youtube.com/channel/UCT5HLUjjXdqUSUnpblFNOwQ&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T07:50:16.219866</ts>
    <user>U3SJEDR96</user>
    <text>well sure, but consider these people need to get plenty of things still sorted out - catching up on whatever they missed while preparing the conf, getting all the paperwork sorted out, paying their dues, day jobs, etc.</text>
  </message>
  <message>
    <ts>2017-06-30T07:50:24.221414</ts>
    <user>U17R26VR8</user>
    <text>ah, my bad, i didn’t see that… i watched evan’s and richard’s talk pretty much as soon as they came out 3 weeks ago</text>
  </message>
  <message>
    <ts>2017-06-30T07:51:35.235403</ts>
    <user>U17R26VR8</user>
    <text>evan’s talk was good, it really reaffirmed the way that i was approaching breaking things out</text>
  </message>
  <message>
    <ts>2017-06-30T10:28:08.039672</ts>
    <user>U601ELFEG</user>
    <text>thanks - I was also tilting in favor of `elm-bootstrap` - I sort of didn't my thing to look like every Google app!</text>
  </message>
  <message>
    <ts>2017-06-30T10:30:31.097389</ts>
    <user>U601ELFEG</user>
    <text>Are type classes on elm's horizon?</text>
  </message>
  <message>
    <ts>2017-06-30T10:31:06.111917</ts>
    <user>U17B2R554</user>
    <text>Has anyone had success with getting hot-swapping to work with elm in an IDE environment?  He is coming from javascript land where he is able to hotswap components without refreshing the whole page.  As far as I am aware, I'm not sure if this is possible, at least in a single-page web app.</text>
  </message>
  <message>
    <ts>2017-06-30T10:31:28.120486</ts>
    <user>U17B2R554</user>
    <text>a friend is coming from js is what i meant to say</text>
  </message>
  <message>
    <ts>2017-06-30T10:37:57.272014</ts>
    <user>U4872964V</user>
    <text>&lt;@U601ELFEG&gt; type classes Haskell style? Probably not. &lt;https://github.com/elm-lang/elm-compiler/issues/1039&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T10:39:27.307921</ts>
    <user>U0QS3QAS3</user>
    <text>sometime ago, i heard there ppl were thinking about some type of "getter-setter simplification of type classes" -&amp;gt; super vague, and I never understood it properly, perhaps someone can elaborate</text>
  </message>
  <message>
    <ts>2017-06-30T10:40:59.344812</ts>
    <user>U601ELFEG</user>
    <text>I just read that. I'm surprised because the proliferation of things like Xxx.map and Xxx.map2 would be cleaned up by having type classes.</text>
  </message>
  <message>
    <ts>2017-06-30T10:44:34.431195</ts>
    <user>U601ELFEG</user>
    <text>Grrr... there is no way to write `Array.map2` safely!  Missing something like mapMaybe, or any _filter and map_ construct.</text>
  </message>
  <message>
    <ts>2017-06-30T10:44:39.432948</ts>
    <user>U4872964V</user>
    <text>&lt;@U601ELFEG&gt; also this: &lt;https://medium.com/@eeue56/why-type-classes-arent-important-in-elm-yet-dd55be125c81&gt; (taking up your point with the maps)</text>
  </message>
  <message>
    <ts>2017-06-30T10:47:59.511794</ts>
    <user>U0QS3QAS3</user>
    <text>nice link! good point</text>
  </message>
  <message>
    <ts>2017-06-30T10:48:00.512114</ts>
    <user>U601ELFEG</user>
    <text>But I think he misses a point about `map`: While I agree that the user knows when they are mapping `List` vs. `Array` vs. `MyFunkyTree` - and I'm willing to get used to prefixing everything with the module name - You lose the ability to write generic, high order functions about things that "are mappable"</text>
  </message>
  <message>
    <ts>2017-06-30T10:49:02.536438</ts>
    <user>U601ELFEG</user>
    <text>(Mind you, I made the exact counter argument in the Haskell community about turning everything into `Foldable`... though there are more complex issues at stake there.)</text>
  </message>
  <message>
    <ts>2017-06-30T10:50:31.572067</ts>
    <user>U60SXAF96</user>
    <text>Who do I talk to about helping out with DCE/tree-shaking and making the codebase `ADVANCED_OPTIMIZATIONS`-safe for Closure (cite:  &lt;https://developers.google.com/closure/compiler/docs/limitations&gt; )? I'd like to put in effort on those fronts, for both professional (great for my work product at my job) and personal (I'm tired of hearing people whine) reasons.</text>
  </message>
  <message>
    <ts>2017-06-30T10:51:32.596274</ts>
    <user>U60SXAF96</user>
    <text>Doesn't `fold` do that for you?</text>
  </message>
  <message>
    <ts>2017-06-30T10:52:10.611643</ts>
    <user>U0J1M0F32</user>
    <text>&lt;@U60SXAF96&gt; Ultimately, you need to talk to Evan, I think in the short term, getting involved in the elm-dev mailing list and the progress on github would be a start.</text>
  </message>
  <message>
    <ts>2017-06-30T10:52:32.620799</ts>
    <user>U0J1M0F32</user>
    <text>To see exactly what has already been done and what is planned on being done next.</text>
  </message>
  <message>
    <ts>2017-06-30T10:52:43.624995</ts>
    <user>U60SXAF96</user>
    <text>K.</text>
  </message>
  <message>
    <ts>2017-06-30T11:02:24.866715</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U60SXAF96&gt; perhaps you've heard it talked about many times, so I can understand some exhaustion on it, but I don't think that a desire for Closure advanced optimizations counts as "whining" -- having used advanced optimizations for several years in clojurescript, i can say they are really great to have.</text>
  </message>
  <message>
    <ts>2017-06-30T11:04:15.912078</ts>
    <user>U5QJW0DDE</user>
    <text>one really great feature of advanced optimizations is that the entire language itself gets optimized away after it has gone through first pass basic compilation. clojurescript is a large project, but the "hello world" in clojurescript is just a single line of emitted JS with no external dependency because of advanced</text>
  </message>
  <message>
    <ts>2017-06-30T11:05:51.952058</ts>
    <user>U60SXAF96</user>
    <text>&lt;@U5QJW0DDE&gt;: I agree that it would be great to have. It would also save the language development team a lot of time/headache implementing optimizations within the language itself. But it also seems like people make it into a bigger deal than it is -- people seem to act like if it's not "closure-compatible", then it's just no good.</text>
  </message>
  <message>
    <ts>2017-06-30T11:06:27.967048</ts>
    <user>U60SXAF96</user>
    <text>&lt;@U5QJW0DDE&gt; This isn't just you, for the record. I've discovered that "Elm's JS isn't safe for closure" is one of the few things people seem to know about Elm. :confused:</text>
  </message>
  <message>
    <ts>2017-06-30T11:06:38.971572</ts>
    <user>U5QJW0DDE</user>
    <text>doesn't mean "no good" but it can certainly mean "not optimized" and a large SPA on a professional level really benefits from those optimizations, so without them it can be an obstacle to adoption of Elm</text>
  </message>
  <message>
    <ts>2017-06-30T11:07:25.990485</ts>
    <user>U60SXAF96</user>
    <text>&lt;@U5QJW0DDE&gt;: ...which is exactly why I'm volunteering to put effort into fixing that.</text>
  </message>
  <message>
    <ts>2017-06-30T11:07:55.002354</ts>
    <user>U5QJW0DDE</user>
    <text>the reason people know this about Elm is because for many product types, it is very important to be safe/compatible for Closure</text>
  </message>
  <message>
    <ts>2017-06-30T11:08:51.024988</ts>
    <user>U2SR9DL7Q</user>
    <text>silly side note but, I was just about to ask what SPA means... and then suddenly realized what SPA means. #contextclues</text>
  </message>
  <message>
    <ts>2017-06-30T11:12:25.111671</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U601ELFEG&gt; Believe me, I do not _miss_ a point about `map` :wink:</text>
  </message>
  <message>
    <ts>2017-06-30T11:12:36.115818</ts>
    <user>U0EUHKVGB</user>
    <text>And I have made this exact point previously.</text>
  </message>
  <message>
    <ts>2017-06-30T11:12:54.123216</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5QJW0DDE&gt; it might be good to know that SPA's is an important focus for Elm 0.19 - hence most features in it will be aimed at making that process better, easier and overall more Elm-y</text>
  </message>
  <message>
    <ts>2017-06-30T11:13:16.132307</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/projects/blob/master/roadmap.md&gt; this is very relevant</text>
  </message>
  <message>
    <ts>2017-06-30T11:13:18.133048</ts>
    <user>U0EUHKVGB</user>
    <text>Type classes are contracts that help design an API. In Elm, we generally stick to conventions for that.</text>
  </message>
  <message>
    <ts>2017-06-30T11:13:32.138717</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U3SJEDR96&gt; what else is being looked at for SPA-type work than just DCE?</text>
  </message>
  <message>
    <ts>2017-06-30T11:13:44.143697</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U60SXAF96&gt; Make a post on elm-discuss asking what the state of DCE is.</text>
  </message>
  <message>
    <ts>2017-06-30T11:13:52.147109</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5QJW0DDE&gt;, please read the link ilias just shared.</text>
  </message>
  <message>
    <ts>2017-06-30T11:14:22.158494</ts>
    <user>U0EUHKVGB</user>
    <text>It is likely what you desire is already being worked on.</text>
  </message>
  <message>
    <ts>2017-06-30T11:15:02.174318</ts>
    <user>U5QJW0DDE</user>
    <text>i missed that link, sorry!</text>
  </message>
  <message>
    <ts>2017-06-30T11:17:39.235799</ts>
    <user>U0CLDU8UB</user>
    <text>&amp;gt; the ability to write generic, high order functions about things that "are mappable"

I must admit that in my two years of using Elm almost day to day, I have never felt the need to do this.</text>
  </message>
  <message>
    <ts>2017-06-30T11:18:52.263522</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0CLDU8UB&gt;, while I agree, there are places in Elm where it would be useful.</text>
  </message>
  <message>
    <ts>2017-06-30T11:19:04.268211</ts>
    <user>U0CLDU8UB</user>
    <text>I am coming from JavaScript like the ~90%(?) of people in the Elm community at the moment</text>
  </message>
  <message>
    <ts>2017-06-30T11:19:29.278446</ts>
    <user>U0EUHKVGB</user>
    <text>For example, there is a lot of confusion about how a view should work or look — a typeclasss for what a view should be makes those questions go away</text>
  </message>
  <message>
    <ts>2017-06-30T11:19:43.284389</ts>
    <user>U0EUHKVGB</user>
    <text>However, I don’t think that will solve any issues and will cause more chaos</text>
  </message>
  <message>
    <ts>2017-06-30T11:19:55.288896</ts>
    <user>U0CLDU8UB</user>
    <text>So I can't properly spot the places where I could use them.</text>
  </message>
  <message>
    <ts>2017-06-30T11:20:01.291461</ts>
    <user>U0K92QFST</user>
    <text>My feeling about type classes is that they would be neat, but features that will make Elm a superb front-end language are more important than features that will make it a more-powerful functional language.</text>
  </message>
  <message>
    <ts>2017-06-30T11:20:24.300820</ts>
    <user>U0EUHKVGB</user>
    <text>If you want to use typeclasses, Purescript is out there! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T11:20:32.303910</ts>
    <user>U0EUHKVGB</user>
    <text>Elm getting typeclasses is not a priority</text>
  </message>
  <message>
    <ts>2017-06-30T11:20:50.310817</ts>
    <user>U0EUHKVGB</user>
    <text>Even though there are benefits that we are aware of</text>
  </message>
  <message>
    <ts>2017-06-30T11:21:53.336227</ts>
    <user>U3LUC6SNS</user>
    <text>What is DCE?</text>
  </message>
  <message>
    <ts>2017-06-30T11:22:04.340802</ts>
    <user>U0CLDU8UB</user>
    <text>Great, I think we got through this discussion very nicely this time!</text>
  </message>
  <message>
    <ts>2017-06-30T11:22:24.348642</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U3LUC6SNS&gt; Dead Code Elimination</text>
  </message>
  <message>
    <ts>2017-06-30T11:22:32.352057</ts>
    <user>U3SJEDR96</user>
    <text>jxxcarlson: dead code elimination - removal of all code that isn't going to be used</text>
  </message>
  <message>
    <ts>2017-06-30T11:23:14.368467</ts>
    <user>U0EUHKVGB</user>
    <text>We had a panel talk about typeclasses at OsloElmDay, actually. It was meant to be a quick question but it ended up taking longer to answer than the others, and we kept talking about it for like 20 minutes after!</text>
  </message>
  <message>
    <ts>2017-06-30T11:26:31.447038</ts>
    <user>U2CUK7KQA</user>
    <text>Every time I read about the typeclasses topic I went to check out purescript and closed the tab again after seeing the hello world sample...
```
import Control.Monad.Eff.Console (log)
```
no thanks</text>
  </message>
  <message>
    <ts>2017-06-30T11:26:36.449098</ts>
    <user>U3LUC6SNS</user>
    <text>I am looking forward to that!</text>
  </message>
  <message>
    <ts>2017-06-30T11:29:08.509233</ts>
    <user>U0EUHKVGB</user>
    <text>One of the benefits that we love about Elm is that it is a well designed, small language. I could say that any bit of Elm code I see, I understand. One of the important ways of managing and achieving that is to only add language features once they have been excessively thought out.</text>
  </message>
  <message>
    <ts>2017-06-30T11:29:47.524676</ts>
    <user>U0EUHKVGB</user>
    <text>This is why Elm releases may take a while to come about. It’s also why Elm feels even better with every release. Try to revisit 0.15 code and you’ll see what I mean :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T11:29:51.526167</ts>
    <user>U2CUK7KQA</user>
    <text>&lt;@U0EUHKVGB&gt; exactly my thoughts</text>
  </message>
  <message>
    <ts>2017-06-30T11:47:15.929001</ts>
    <user>U601ELFEG</user>
    <text>&lt;@U0EUHKVGB&gt; - agreed on Elm being small is a big benefit - and no disrespect meant on the mappable comment - I was only into my first half cup of coffee....</text>
  </message>
  <message>
    <ts>2017-06-30T11:48:17.952177</ts>
    <user>U0CLDU8UB</user>
    <text>Ahaha, I just updated a 0.15 thing from two years ago. I do agree Elm has gone in a nice direction since then.</text>
  </message>
  <message>
    <ts>2017-06-30T11:49:39.983730</ts>
    <user>U601ELFEG</user>
    <text>And, as a member of the Haskell development team - I actually fought _against_ the set of generalizations that went in over the last few years. I agree that things like dependent types, impredicative types, module parameterization, rank-n types, etc... are rarely needed, even in Haskell, and certainly shouldn't be in something like Elm.</text>
  </message>
  <message>
    <ts>2017-06-30T11:49:52.988794</ts>
    <user>U619DD78U</user>
    <text>For larger elm projects, is there any reason to break it up into smaller projects or would it be ok to have it be a single large project?</text>
  </message>
  <message>
    <ts>2017-06-30T11:50:15.997399</ts>
    <user>U601ELFEG</user>
    <text>The only case I'd make that type classes are perhaps different and the first step is this: The Basic library uses them!</text>
  </message>
  <message>
    <ts>2017-06-30T11:51:05.017216</ts>
    <user>U601ELFEG</user>
    <text>That said, I'll go back to my Missing module and write `Array.map2`, and `List.mapMaybe` and a few other things I'm missing - while otherwise *really* enjoying building my first real Elm app.</text>
  </message>
  <message>
    <ts>2017-06-30T11:51:57.036676</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U619DD78U&gt; If it's just a single app, I see no reason to break it up.</text>
  </message>
  <message>
    <ts>2017-06-30T11:52:21.046032</ts>
    <user>U601ELFEG</user>
    <text>And.. looking for others working on music and Elm - MIDI, browser MIDI support, etc....</text>
  </message>
  <message>
    <ts>2017-06-30T11:53:07.062984</ts>
    <user>U0CLDU8UB</user>
    <text>I have implemented `maybeToList` several times myself :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T11:59:54.217493</ts>
    <user>U3SJEDR96</user>
    <text>What's the type signature? Not sure I'm following</text>
  </message>
  <message>
    <ts>2017-06-30T12:01:04.247962</ts>
    <user>U0K92QFST</user>
    <text>mzero: &lt;@U0JFXEUCT&gt; :point_up:</text>
  </message>
  <message>
    <ts>2017-06-30T12:01:26.256661</ts>
    <user>U0K92QFST</user>
    <text>also &lt;@U0F5SH6UQ&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T12:02:05.271862</ts>
    <user>U1CE9DL9H</user>
    <text>`Maybe a -&amp;gt; List a`, creates a singleton list for just, empty list otherwise</text>
  </message>
  <message>
    <ts>2017-06-30T12:02:55.291040</ts>
    <user>U1CE9DL9H</user>
    <text>also the first example of a natural transformation in a programming context</text>
  </message>
  <message>
    <ts>2017-06-30T12:03:25.301999</ts>
    <user>U5FU80S06</user>
    <text>Is there by any chance a browser debugger tool where I can see the state of the _model_ at any time?</text>
  </message>
  <message>
    <ts>2017-06-30T12:03:34.305471</ts>
    <user>U0K92QFST</user>
    <text>&lt;@U5FU80S06&gt; you bet there is!</text>
  </message>
  <message>
    <ts>2017-06-30T12:03:47.310414</ts>
    <user>U0K92QFST</user>
    <text>if you start your app with `elm-reactor` you'll see it</text>
  </message>
  <message>
    <ts>2017-06-30T12:04:06.317497</ts>
    <user>U0CLDU8UB</user>
    <text>Yep. I like to use it for conditional views:
```
div [] (maybeToList maybeThis ++ maybeToList maybeThat)
```</text>
  </message>
  <message>
    <ts>2017-06-30T12:06:25.368564</ts>
    <user>U5FU80S06</user>
    <text>I have been using `elm-make Main.elm --output elm.js` and then simply opening _index.html_. How would I use `elm-reactor`?</text>
  </message>
  <message>
    <ts>2017-06-30T12:06:55.379232</ts>
    <user>U3SJEDR96</user>
    <text>Right, gotcha, makes sense :slightly_smiling_face: I wonder if it's worth having in an -extra package somewhere, even if it's just `Maybe.map List.singleton |&amp;gt; withDefault []`</text>
  </message>
  <message>
    <ts>2017-06-30T12:07:13.385415</ts>
    <user>U0J1M0F32</user>
    <text>&lt;@U5FU80S06&gt; `elm-reactor Main.elm`</text>
  </message>
  <message>
    <ts>2017-06-30T12:07:20.387863</ts>
    <user>U0K92QFST</user>
    <text>simply start `elm-reactor` (it should come with the runtime) and go to localhost:8000</text>
  </message>
  <message>
    <ts>2017-06-30T12:07:26.390067</ts>
    <user>U0J1M0F32</user>
    <text>^</text>
  </message>
  <message>
    <ts>2017-06-30T12:08:14.406769</ts>
    <user>U0K92QFST</user>
    <text>If it shows you your file tree, just click on `Main.elm`. It will run your app with a live debugger.</text>
  </message>
  <message>
    <ts>2017-06-30T12:08:33.413572</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U3SJEDR96&gt; it already exists &lt;http://package.elm-lang.org/packages/elm-community/maybe-extra/4.0.0/Maybe-Extra#toList&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T12:08:45.417880</ts>
    <user>U3SJEDR96</user>
    <text>:smile: Ah. Figures :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T12:09:08.425566</ts>
    <user>U2CUK7KQA</user>
    <text>&lt;@U5FU80S06&gt; IIRC you can also use `elm-make --debug`</text>
  </message>
  <message>
    <ts>2017-06-30T12:11:03.466445</ts>
    <user>U0K92QFST</user>
    <text>:point_up: i didn't know about that!</text>
  </message>
  <message>
    <ts>2017-06-30T12:13:40.520445</ts>
    <user>U5FU80S06</user>
    <text>&lt;@U0K92QFST&gt; I get ```Oops! Something went wrong when starting your Elm program.

Trying to initialize the `Main` module with an unexpected flag.
I tried to convert it to an Elm value, but ran into this problem:

Expecting an Int but instead got: undefined``` Note that I'm using `main = Html.programWithFlags...` and passing in an `Int` from JS.</text>
  </message>
  <message>
    <ts>2017-06-30T12:14:35.539514</ts>
    <user>U0K92QFST</user>
    <text>Unfortunately: &lt;https://github.com/elm-lang/elm-reactor/issues/199&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T12:15:08.550943</ts>
    <user>U0K92QFST</user>
    <text>but you can try the `elm make --debug Main.elm `</text>
  </message>
  <message>
    <ts>2017-06-30T12:15:13.552462</ts>
    <user>U3SJEDR96</user>
    <text>Eh, don't let that stop you, &lt;@U0CLDU8UB&gt; to the rescue</text>
  </message>
  <message>
    <ts>2017-06-30T12:15:15.553233</ts>
    <user>U0CLDU8UB</user>
    <text>But if you use an index.html like this &lt;https://github.com/ohanhi/elm-taco/blob/master/index.html&gt; , you can point the browser to the index.html while `elm-reactor` is running and it'll work!</text>
  </message>
  <message>
    <ts>2017-06-30T12:15:20.555197</ts>
    <user>U3SJEDR96</user>
    <text>(told ya)</text>
  </message>
  <message>
    <ts>2017-06-30T12:15:29.558216</ts>
    <user>U0K92QFST</user>
    <text>lol</text>
  </message>
  <message>
    <ts>2017-06-30T12:15:36.561008</ts>
    <user>U0CLDU8UB</user>
    <text>literally lol</text>
  </message>
  <message>
    <ts>2017-06-30T12:22:48.709752</ts>
    <user>U17J54S2U</user>
    <text>lohabuyshan: What does your `Flags` type look like?</text>
  </message>
  <message>
    <ts>2017-06-30T12:23:13.718060</ts>
    <user>U17J54S2U</user>
    <text>And what are you passing at init</text>
  </message>
  <message>
    <ts>2017-06-30T12:23:15.718985</ts>
    <user>U5FU80S06</user>
    <text>&lt;@U0CLDU8UB&gt;  So do I have two _.html_ files, or do I modify the one and only?</text>
  </message>
  <message>
    <ts>2017-06-30T12:25:19.761437</ts>
    <user>U0CLDU8UB</user>
    <text>You only need the one, for development. You will need another later (a modified version) if you're going to deploy the app somewhere.</text>
  </message>
  <message>
    <ts>2017-06-30T12:27:09.799567</ts>
    <user>U601ELFEG</user>
    <text>I don't think so - you need `(a -&amp;gt; b -&amp;gt; c) -&amp;gt; Array a -&amp;gt; Array b -&amp;gt; Array c` , doing pairwise application, yielding an array the length of the smaller. You could `fold` over `Array a`, but when accessing `Array b` with `Array.get` you get a `Maybe b` , and even if you've limited `i` so you know it fits, you need to some icky stuff to "escape the `Maybe`".</text>
  </message>
  <message>
    <ts>2017-06-30T12:27:27.806195</ts>
    <user>U601ELFEG</user>
    <text>This is why it is nice to have such a thing in the library!</text>
  </message>
  <message>
    <ts>2017-06-30T12:28:13.822109</ts>
    <user>U601ELFEG</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-06-30T12:29:04.840318</ts>
    <user>U619DD78U</user>
    <text>&lt;@U0CLDU8UB&gt; Two reasons that would make me want to break things up are if (a) the javascript file that elm generates is large or (b) the upgrade policy is loose.  For example, in the angular world since the size of the generated was so large, it behooved teams to split up the code into modules for faster loading.  And because the upgrade from 1 - 2 was originally so painful, it again made more sense to split up large apps into a series of smaller apps.</text>
  </message>
  <message>
    <ts>2017-06-30T12:32:48.918220</ts>
    <user>U0CLDU8UB</user>
    <text>Take a look at your dev tools' network panel when you load up &lt;http://yksille.fi|yksille.fi&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T12:34:31.954025</ts>
    <user>U0CLDU8UB</user>
    <text>It's 10kloc Elm application plus some JS in the main JavaScript file</text>
  </message>
  <message>
    <ts>2017-06-30T12:37:23.012103</ts>
    <user>U0CLDU8UB</user>
    <text>Likely in 0.19 different pages of the application can be split into their own JS files, too</text>
  </message>
  <message>
    <ts>2017-06-30T12:39:28.055107</ts>
    <user>U0F5SH6UQ</user>
    <text>I did some stuff last year, but very little. Mostly it was just interfacing with Tone.js over ports</text>
  </message>
  <message>
    <ts>2017-06-30T12:46:25.192990</ts>
    <user>U601ELFEG</user>
    <text>I want to code MIDI device access - so I can get SysEx. from a device</text>
  </message>
  <message>
    <ts>2017-06-30T12:49:10.248030</ts>
    <user>U5FU80S06</user>
    <text>&lt;@U0CLDU8UB&gt;  I cannot get it to work, probably because I'm doing something wrong. This is what I have: ```    &amp;lt;body&amp;gt;
        &amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script src="/_compile/src/Main.elm"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script&amp;gt;
            Elm.Main.embed(document.getElementById('app'),
                {randomInt: Math.floor(Math.random()*0x0FFFFFFF)});

            // ...

        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
``` And I also tried record-free to no avail: ```Elm.Main.embed(document.getElementById('app'),
                Math.floor(Math.random()*0x0FFFFFFF));```</text>
  </message>
  <message>
    <ts>2017-06-30T12:53:42.340290</ts>
    <user>U0CLDU8UB</user>
    <text>Is your Elm code in src/Main.elm?</text>
  </message>
  <message>
    <ts>2017-06-30T12:58:06.433101</ts>
    <user>U0JFXEUCT</user>
    <text>I haven’t touched MIDI yet, but would be very interested if you find any existing work</text>
  </message>
  <message>
    <ts>2017-06-30T13:00:28.484724</ts>
    <user>U5FU80S06</user>
    <text>yes, it starts there, and the rest of the elm code is all under _src_.</text>
  </message>
  <message>
    <ts>2017-06-30T13:04:06.561949</ts>
    <user>U5FU80S06</user>
    <text>Not to worry, it's not a biggie. I can always do a Debug.log...</text>
  </message>
  <message>
    <ts>2017-06-30T13:06:18.607106</ts>
    <user>U2LAL86AY</user>
    <text>what's the error message?</text>
  </message>
  <message>
    <ts>2017-06-30T13:07:14.625262</ts>
    <user>U2GPAEU1L</user>
    <text>Hey everyone, I was thinking _next remote meetup_, we could do a meetup targeted at people new to  Elm and managers who aren't sure that they want to use Elm.

*How many people have managers that they have been trying to convince to switch to Elm (even just for a small project/feature)?*

If there are enough people who would appreciate if we tried to convince their managers, then I think it would be well worth it for one meetup.

Please comment in the thread so we have all the comments in one place for reference.

I will post this in the general channel as well.</text>
  </message>
  <message>
    <ts>2017-06-30T13:10:26.687890</ts>
    <user>U5FU80S06</user>
    <text>&lt;@U2LAL86AY&gt; ```Oops! Something went wrong when starting your Elm program.

Trying to initialize the `Main` module with an unexpected flag.
I tried to convert it to an Elm value, but ran into this problem:

Expecting an Int but instead got: undefined``` I click on _Main.elm_ from _File Navigation_.</text>
  </message>
  <message>
    <ts>2017-06-30T13:13:07.740927</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U5FFVDC4W&gt; can I see your flags defined in Elm?</text>
  </message>
  <message>
    <ts>2017-06-30T13:15:19.784826</ts>
    <user>U5FU80S06</user>
    <text>```main =
  Html.programWithFlags 
    { init = init
    , view = view
    , update = update
    , subscriptions = subscriptions
    }``` and ```init : Int -&amp;gt; ( Model, Cmd Msg )
init jsSeed = ...```</text>
  </message>
  <message>
    <ts>2017-06-30T13:19:25.867852</ts>
    <user>U2GPAEU1L</user>
    <text>Ah I see this is a reactor issue, nvm, I came in late :sweat:</text>
  </message>
  <message>
    <ts>2017-06-30T13:22:30.930189</ts>
    <user>U5FU80S06</user>
    <text>Note that I am doing `elm-make Main.elm --output elm.js`</text>
  </message>
  <message>
    <ts>2017-06-30T13:26:16.006145</ts>
    <user>U0CLDU8UB</user>
    <text>Oh, you should run `elm-reactor` and then go to &lt;http://localhost:8000/index.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T13:30:30.093690</ts>
    <user>U5FU80S06</user>
    <text>&lt;@U0CLDU8UB&gt;  That gives me a totally blank page</text>
  </message>
  <message>
    <ts>2017-06-30T13:40:10.292242</ts>
    <user>U0CL0AS3V</user>
    <text>we use it at NRI via ports</text>
  </message>
  <message>
    <ts>2017-06-30T13:44:14.372942</ts>
    <user>U5FU80S06</user>
    <text>Actually I can run my original index.html (no taco) via reactor and app comes up fine (at &lt;http://localhost:8000/index.html&gt;) -- I just don't see the state of the model anywhere.</text>
  </message>
  <message>
    <ts>2017-06-30T13:45:22.395959</ts>
    <user>U3SJEDR96</user>
    <text>do you see a little "history" thing in the bottom right?</text>
  </message>
  <message>
    <ts>2017-06-30T13:45:42.402826</ts>
    <user>U0CLDU8UB</user>
    <text>A black "tab" of sorts</text>
  </message>
  <message>
    <ts>2017-06-30T13:45:57.407630</ts>
    <user>U5FU80S06</user>
    <text>nope</text>
  </message>
  <message>
    <ts>2017-06-30T13:46:47.424931</ts>
    <user>U3SJEDR96</user>
    <text>Wait a moment</text>
  </message>
  <message>
    <ts>2017-06-30T13:47:00.429125</ts>
    <user>U3SJEDR96</user>
    <text>you compile with `elm-make Main.elm` right?</text>
  </message>
  <message>
    <ts>2017-06-30T13:47:35.440571</ts>
    <user>U2LAL86AY</user>
    <text>did you checked the output file? Sometimes i use an `old output file` without realizing -&amp;gt; (from a previous run of elm make in another directory for ex).</text>
  </message>
  <message>
    <ts>2017-06-30T13:47:44.443493</ts>
    <user>U3SJEDR96</user>
    <text>the index.html file you're using for the taco stuff, does it refer to `/_compile/src/Main.elm` or `/_compile/Main.elm`?</text>
  </message>
  <message>
    <ts>2017-06-30T13:49:41.482868</ts>
    <user>U5FU80S06</user>
    <text>`&amp;lt;script src="/_compile/src/Main.elm"&amp;gt;&amp;lt;/script&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-06-30T13:50:47.505488</ts>
    <user>U3SJEDR96</user>
    <text>right, so what basically happens is it's trying to find a `src/Main.elm` but (judging by your compile command) your `Main.elm` is in the same directory as your `elm-package.json`</text>
  </message>
  <message>
    <ts>2017-06-30T13:50:58.509398</ts>
    <user>U3SJEDR96</user>
    <text>so adapting that to simply `/_compile/Main.elm` should help a bunch</text>
  </message>
  <message>
    <ts>2017-06-30T13:53:19.557815</ts>
    <user>U5FU80S06</user>
    <text>I still do not see the hoped-for widgetry</text>
  </message>
  <message>
    <ts>2017-06-30T13:54:15.577177</ts>
    <user>U3SJEDR96</user>
    <text>Do you see your app at all, &lt;@U5FU80S06&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T13:54:21.579180</ts>
    <user>U2LAL86AY</user>
    <text>please show us the relevant directory structure you have: the parent of the `elm-package.json` - and the path to `Main.elm`</text>
  </message>
  <message>
    <ts>2017-06-30T13:54:42.586228</ts>
    <user>U2LAL86AY</user>
    <text>i think you have</text>
  </message>
  <message>
    <ts>2017-06-30T13:55:05.594382</ts>
    <user>U2LAL86AY</user>
    <text>projectDirectory
  //elm-package.json
  // Main.elm</text>
  </message>
  <message>
    <ts>2017-06-30T13:55:12.596807</ts>
    <user>U2LAL86AY</user>
    <text>no src?</text>
  </message>
  <message>
    <ts>2017-06-30T13:58:20.663889</ts>
    <user>U5FU80S06</user>
    <text>```projectDirectory
          src
                    elm-package.json
                    Main.elm``` and yes the app comes up and runs fine</text>
  </message>
  <message>
    <ts>2017-06-30T13:59:09.680821</ts>
    <user>U3SJEDR96</user>
    <text>right. And you place your `index.html` at the same level as `elm-package.json` and run `elm-reactor` from that same directory, correct?</text>
  </message>
  <message>
    <ts>2017-06-30T13:59:31.688791</ts>
    <user>U3SJEDR96</user>
    <text>so everything happens _within_ that `projectDirectory/src` folder</text>
  </message>
  <message>
    <ts>2017-06-30T14:00:08.702682</ts>
    <user>U2LAL86AY</user>
    <text>i don't think `elm-package.json` likes to be placed in src :smile:</text>
  </message>
  <message>
    <ts>2017-06-30T14:00:34.712393</ts>
    <user>U5FU80S06</user>
    <text>yes yes, and I even deleted elm-stuff and elm.js to re-generate</text>
  </message>
  <message>
    <ts>2017-06-30T14:01:47.739579</ts>
    <user>U2LAL86AY</user>
    <text>can you please put it your code on ellie? i will try it here with elm-make see what comes up.</text>
  </message>
  <message>
    <ts>2017-06-30T14:02:14.749318</ts>
    <user>U2LAL86AY</user>
    <text>maybe not</text>
  </message>
  <message>
    <ts>2017-06-30T14:02:35.756562</ts>
    <user>U5FU80S06</user>
    <text>ok, shall I bump up `elm-package.json` ?</text>
  </message>
  <message>
    <ts>2017-06-30T14:02:44.759846</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; as long as you run your `elm-*` commands from that directory and `elm-package.json` has `source-directories: ["."]` (which is the default), that should work fine</text>
  </message>
  <message>
    <ts>2017-06-30T14:03:38.779123</ts>
    <user>U5FU80S06</user>
    <text>yes that what I do, and that's what it is.</text>
  </message>
  <message>
    <ts>2017-06-30T14:04:36.800354</ts>
    <user>U5FU80S06</user>
    <text>I don't want to make an ellie, and surmise I can survive quite nicely with Debug.log :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T14:05:21.816909</ts>
    <user>U3SJEDR96</user>
    <text>alright, so one last attempt... if you go into a dev console and enter `document.getElementsByClassName('elm-mini-controls-button')`, what does it tell you?</text>
  </message>
  <message>
    <ts>2017-06-30T14:06:21.838135</ts>
    <user>U5FU80S06</user>
    <text>`[]`</text>
  </message>
  <message>
    <ts>2017-06-30T14:07:06.853426</ts>
    <user>U3SJEDR96</user>
    <text>Alright. I have a feeling it's still loading the `index.html` you created using `elm-make` rather than the "taco"-y one</text>
  </message>
  <message>
    <ts>2017-06-30T14:08:00.871231</ts>
    <user>U5FU80S06</user>
    <text>Yes, that's what I wrote above. The taco version gives me blank page, but my original works with reactor.</text>
  </message>
  <message>
    <ts>2017-06-30T14:08:41.884796</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, so let's fix the taco-version - which means you can reload without manual compiling, _and_ use programWithFlags :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T14:09:12.895192</ts>
    <user>U3SJEDR96</user>
    <text>in the taco-version, you refer to `/_compile/src/Main.elm` while there is no `src` directory that the reactor knows about</text>
  </message>
  <message>
    <ts>2017-06-30T14:09:24.899457</ts>
    <user>U3SJEDR96</user>
    <text>changing that to `/_compile/Main.elm` should do the trick</text>
  </message>
  <message>
    <ts>2017-06-30T14:12:26.962387</ts>
    <user>U5FU80S06</user>
    <text>Yay!</text>
  </message>
  <message>
    <ts>2017-06-30T14:12:27.962923</ts>
    <user>U3SJEDR96</user>
    <text>Awesome! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T14:12:30.963835</ts>
    <user>U0K92QFST</user>
    <text>Woohoo! :left_shark: :rightparrot:</text>
  </message>
  <message>
    <ts>2017-06-30T14:12:52.971206</ts>
    <user>U3SJEDR96</user>
    <text>So now, whenever you reload that page, it will recompile your elm if necessary :thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-30T14:13:13.977846</ts>
    <user>U3SJEDR96</user>
    <text>and allow you to explore the history, which will show you all messages and how they affected your model</text>
  </message>
  <message>
    <ts>2017-06-30T14:14:34.005137</ts>
    <user>U2LAL86AY</user>
    <text>i don't fully underestand how this `/_ compile/src/Main.elm` works :simple_smile:  - he has the `Main.elm` and `elm-package.json` inside `src` 
So it's safe to say that the `&amp;lt;script&amp;gt;` link should be a directory above? What if you have no `src` folder. It's just plane..</text>
  </message>
  <message>
    <ts>2017-06-30T14:14:42.008126</ts>
    <user>U5FU80S06</user>
    <text>The only problem is that when I click on it, nothing happens.</text>
  </message>
  <message>
    <ts>2017-06-30T14:14:54.012278</ts>
    <user>U2LAL86AY</user>
    <text>oh !</text>
  </message>
  <message>
    <ts>2017-06-30T14:15:20.021298</ts>
    <user>U5FU80S06</user>
    <text>Just tell me how to arrange my dir structure, and I'll do it.</text>
  </message>
  <message>
    <ts>2017-06-30T14:16:14.039181</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; it all depends on where your `elm-package.json` is</text>
  </message>
  <message>
    <ts>2017-06-30T14:16:15.039666</ts>
    <user>U2LAL86AY</user>
    <text>i use this, works for bigger aps also - no need to webpack - just take a look</text>
  </message>
  <message>
    <ts>2017-06-30T14:16:18.040420</ts>
    <user>U2LAL86AY</user>
    <text>&lt;https://github.com/elm-community/elm-webpack-starter&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T14:16:46.049672</ts>
    <user>U3SJEDR96</user>
    <text>the path there is `/_compile/*path from elm-packae.json TO your elm/Main.elm`</text>
  </message>
  <message>
    <ts>2017-06-30T14:25:50.233473</ts>
    <user>U5FU80S06</user>
    <text>I haven't re-arranged anything, but just noticed that the app is now *not* working 100%.  It no longer plays audio, whereas before it used to.</text>
  </message>
  <message>
    <ts>2017-06-30T14:28:39.290915</ts>
    <user>U2LAL86AY</user>
    <text>i don't see any reason</text>
  </message>
  <message>
    <ts>2017-06-30T14:29:08.300706</ts>
    <user>U2LAL86AY</user>
    <text>when you compile with elm make all dependencies are pulled inside elm.js or whatever is in memory.</text>
  </message>
  <message>
    <ts>2017-06-30T14:29:22.305652</ts>
    <user>U3SJEDR96</user>
    <text>Audio.. Does it use ports that you haven't hooked up, perhaps?</text>
  </message>
  <message>
    <ts>2017-06-30T14:31:40.354302</ts>
    <user>U5FU80S06</user>
    <text>All, I'll put this on the back-burner for now.  Thanks for all your help.</text>
  </message>
  <message>
    <ts>2017-06-30T14:33:08.384774</ts>
    <user>U3SJEDR96</user>
    <text>No problem, hope you manage to figure things out :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T14:57:16.863974</ts>
    <user>U2LAL86AY</user>
    <text>hmm - i have a medium size app - and i find myself frequently opening up nested records inside the Debugger - to check their values - but when i click on the next message - everything i had opened just collapses - and i need to do it all over again. Does anyone has a fix to this? It is just me?  

Doing this every time is such a time taker.. i prefer to use debug.log calls just to avoid this expanding.</text>
  </message>
  <message>
    <ts>2017-06-30T14:59:00.899277</ts>
    <user>U4872964V</user>
    <text>yes, a “watch” feature would be great</text>
  </message>
  <message>
    <ts>2017-06-30T14:59:29.909087</ts>
    <user>U3SJEDR96</user>
    <text>not sure if this is still ongoing (&lt;@U0F7JPK36&gt;) but that type of feedback is exactly what we're looking for with &lt;https://www.surveymonkey.com/r/D5QTSW2&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T14:59:30.909226</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; when i click on the next message - everything i had opened just collapses

it's supposed to remember; this sounds like a bug</text>
  </message>
  <message>
    <ts>2017-06-30T14:59:50.915970</ts>
    <user>U2LAL86AY</user>
    <text>that sounds awesome :smile:</text>
  </message>
  <message>
    <ts>2017-06-30T15:00:00.918986</ts>
    <user>U0CL0AS3V</user>
    <text>there's an algorithm for deciding to keep things open, but maybe it doesn't handle nested cases well?</text>
  </message>
  <message>
    <ts>2017-06-30T15:00:39.933746</ts>
    <user>U2LAL86AY</user>
    <text>i see the first layer kept open. but not when things are nested</text>
  </message>
  <message>
    <ts>2017-06-30T15:03:15.985931</ts>
    <user>U2LAL86AY</user>
    <text>i should mention - the nested records i'm talking about are stored inside a dict. Is the algorithm suppose to take this into consideration? - or is just on my end that is causing problems.</text>
  </message>
  <message>
    <ts>2017-06-30T15:03:33.992088</ts>
    <user>U40QW928G</user>
    <text>I'm not quite sure how to apply the Navigation package to an actual spa project</text>
  </message>
  <message>
    <ts>2017-06-30T15:03:49.997285</ts>
    <user>U40QW928G</user>
    <text>I see the location changes occuring but not sure how to implement a page system</text>
  </message>
  <message>
    <ts>2017-06-30T15:04:50.016605</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; the nested records i'm talking about are stored inside a dict. Is the alghoritm suppose to take this into consideration?

could be an oversight - maybe it was originally implemented for records but never for dicts?</text>
  </message>
  <message>
    <ts>2017-06-30T15:05:26.028037</ts>
    <user>U3FJSB596</user>
    <text>boons: Do you have the current Location stored in the your model?</text>
  </message>
  <message>
    <ts>2017-06-30T15:05:37.031666</ts>
    <user>U40QW928G</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-06-30T15:05:46.034534</ts>
    <user>U40QW928G</user>
    <text>I have a `List Location`</text>
  </message>
  <message>
    <ts>2017-06-30T15:06:36.050099</ts>
    <user>U3FJSB596</user>
    <text>Do you have several current Locations at once?</text>
  </message>
  <message>
    <ts>2017-06-30T15:07:11.060696</ts>
    <user>U40QW928G</user>
    <text>no, I was just going off the example on the navigation repo</text>
  </message>
  <message>
    <ts>2017-06-30T15:07:25.065340</ts>
    <user>U3FJSB596</user>
    <text>Do you have a link to the repo?</text>
  </message>
  <message>
    <ts>2017-06-30T15:11:53.148210</ts>
    <user>U40QW928G</user>
    <text>&lt;https://github.com/elm-lang/navigation/tree/master/examples&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T15:12:38.162109</ts>
    <user>U40QW928G</user>
    <text>Elm is great but man do I wish there was a framework to take away the annoyance of everything like routes and separation of concerns.</text>
  </message>
  <message>
    <ts>2017-06-30T15:15:21.211571</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0CL0AS3V&gt; i think is very useful to include dicts as part of that alghoritm - if is doable, i can't find in what package the debugger code is located - to open an issue or see it's status regarding handling this dicts.</text>
  </message>
  <message>
    <ts>2017-06-30T15:15:55.221782</ts>
    <user>U1CE9DL9H</user>
    <text>the debugger lives in the virtualdom repo</text>
  </message>
  <message>
    <ts>2017-06-30T15:16:41.235932</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;https://github.com/elm-lang/virtual-dom/blob/master/src/VirtualDom/Debug.elm&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T15:17:49.255673</ts>
    <user>U0CL0AS3V</user>
    <text>I agree! &lt;@U0F7JPK36&gt; is gonna be doing some work in there, so filing an issue sounds :thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-30T15:28:19.440266</ts>
    <user>U3FJSB596</user>
    <text>I see, it’s a Location history</text>
  </message>
  <message>
    <ts>2017-06-30T15:29:05.453519</ts>
    <user>U3FJSB596</user>
    <text>What you can do is that you get the head of the history.</text>
  </message>
  <message>
    <ts>2017-06-30T15:32:31.514637</ts>
    <user>U3FJSB596</user>
    <text>What are the different pages you want to show?</text>
  </message>
  <message>
    <ts>2017-06-30T15:34:09.542620</ts>
    <user>U2VUFCK5G</user>
    <text>I was wondering how GPL applies to an ELM project. Say someone took an elm project thats open sourced under the GPL added features to it and used it online. Does having the JS available publicly in the page satisfy the requirement to share your work ?</text>
  </message>
  <message>
    <ts>2017-06-30T15:34:25.547576</ts>
    <user>U2VUFCK5G</user>
    <text>Or would the user have to provide the ELM code?</text>
  </message>
  <message>
    <ts>2017-06-30T15:37:59.608249</ts>
    <user>U5XC2FJ1Y</user>
    <text>i'm curious why the elm compiler trusts the type annotation over the inferred type of a function when they don't match</text>
  </message>
  <message>
    <ts>2017-06-30T15:38:49.622574</ts>
    <user>U0K92QFST</user>
    <text>&lt;@U5XC2FJ1Y&gt; would you expect the opposite?</text>
  </message>
  <message>
    <ts>2017-06-30T15:39:23.631997</ts>
    <user>U5XC2FJ1Y</user>
    <text>kinda, but i'm coming from dynamic languages and also a little bit of ocaml, so i don't really know what to expect</text>
  </message>
  <message>
    <ts>2017-06-30T15:39:23.632054</ts>
    <user>U0K92QFST</user>
    <text>that is, would you expect the program to compile even if the declared type is incorrect?</text>
  </message>
  <message>
    <ts>2017-06-30T15:40:02.642498</ts>
    <user>U5XC2FJ1Y</user>
    <text>in the ideal world, if the program type checks, the IDE/formatter/something will go in and fix the annotations :wink:</text>
  </message>
  <message>
    <ts>2017-06-30T15:40:57.658496</ts>
    <user>U0K92QFST</user>
    <text>I actually prefer it this way. If the type annotation doesn’t match the inferred type, then the developer has made a mistake. By reporting on the mismatch the compiler allows the developer to figure out which is correct and diagnose the source of their mistake.</text>
  </message>
  <message>
    <ts>2017-06-30T15:41:16.664040</ts>
    <user>U3SJEDR96</user>
    <text>The type annotations express intent. If implementation doesn't match that intent, it makes sense to say the implentation is wrong, rather than the intent</text>
  </message>
  <message>
    <ts>2017-06-30T15:42:28.684067</ts>
    <user>U5XC2FJ1Y</user>
    <text>the issue i ran into yesterday is that when i refactored a function to return a new type but forgot to fix the type sig, the compiler threw a "type annotation doesn't match" error but also threw a type error everywhere i used the function</text>
  </message>
  <message>
    <ts>2017-06-30T15:42:37.686531</ts>
    <user>U3FJSB596</user>
    <text>There are several changes I would suggest.</text>
  </message>
  <message>
    <ts>2017-06-30T15:42:40.687276</ts>
    <user>U3SJEDR96</user>
    <text>Do note that they are optional, but preferred exactly because they add this layer of "this is what I want my code to mean"</text>
  </message>
  <message>
    <ts>2017-06-30T15:43:36.702755</ts>
    <user>U3FJSB596</user>
    <text>1) Implement a Route union type that expresses the different pages you want to show</text>
  </message>
  <message>
    <ts>2017-06-30T15:43:42.704364</ts>
    <user>U5XC2FJ1Y</user>
    <text>it seems like the compiler should be able to say, wait, this annotation doesn't match but the program still typechecks, i should only raise the "annotation doesn't match" error</text>
  </message>
  <message>
    <ts>2017-06-30T15:44:05.711110</ts>
    <user>U0S6BNVNY</user>
    <text>I prefer the current behaviour, and expect the error messages will continue to get better</text>
  </message>
  <message>
    <ts>2017-06-30T15:44:32.718798</ts>
    <user>U3FJSB596</user>
    <text>2) Have a function `Navigation.Location -&amp;gt; Route`</text>
  </message>
  <message>
    <ts>2017-06-30T15:44:33.719116</ts>
    <user>U0K92QFST</user>
    <text>Yeah, it seems like the actual issue you’re having is that the error message wasn’t clear enough, which can absolutely be made better!</text>
  </message>
  <message>
    <ts>2017-06-30T15:45:14.730637</ts>
    <user>U40QW928G</user>
    <text>I wish there was an elm tutorial on routing</text>
  </message>
  <message>
    <ts>2017-06-30T15:45:25.733898</ts>
    <user>U40QW928G</user>
    <text>like setting up a good spa from scratch</text>
  </message>
  <message>
    <ts>2017-06-30T15:45:40.737926</ts>
    <user>U40QW928G</user>
    <text>because I look through the example and there's just too much there for me to understand</text>
  </message>
  <message>
    <ts>2017-06-30T15:45:55.742115</ts>
    <user>U40QW928G</user>
    <text>Trying to understand Elm and architecting a system is a double whammy of difficult</text>
  </message>
  <message>
    <ts>2017-06-30T15:46:25.750541</ts>
    <user>U5XC2FJ1Y</user>
    <text>&lt;@U0K92QFST&gt; yes i think that's about right</text>
  </message>
  <message>
    <ts>2017-06-30T15:46:44.755776</ts>
    <user>U3FJSB596</user>
    <text>3) If you want the idea of history, change the `history = List Navigation.Location` to `history = List Route`, else store in your model `currentRoute = Route`. This would require a change to the `update` function.</text>
  </message>
  <message>
    <ts>2017-06-30T15:47:43.772534</ts>
    <user>U5XC2FJ1Y</user>
    <text>(although the game i'm working on is small enough that it wasn't really a big deal)</text>
  </message>
  <message>
    <ts>2017-06-30T15:50:12.814398</ts>
    <user>U3FJSB596</user>
    <text>4) In the `view` function, have a case statement to show different views depending on either the head of the history or the currentRoute</text>
  </message>
  <message>
    <ts>2017-06-30T15:50:17.815962</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U40QW928G&gt; good point. I'm going to put it on my todo list :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T15:50:41.822867</ts>
    <user>U3FJSB596</user>
    <text>To help you out with step 2, Evan created the URL parser
&lt;http://package.elm-lang.org/packages/evancz/url-parser/latest&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T15:51:28.836026</ts>
    <user>U2LAL86AY</user>
    <text>rtfeldman: &lt;https://github.com/elm-lang/virtual-dom/issues/102&gt;

I think this feature is rely hard to do actually. 
There can be nested records inside dicts and other smaller dicts inside that stored records and so on - mind bending.. recursion problem :anguished:</text>
  </message>
  <message>
    <ts>2017-06-30T15:56:29.920785</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U40QW928G&gt; there are a lot of repos with SPAs - but i think you need something a little bit easyer - a video walking you trough the concepts - the elm-way of doing things.  - this website is so cool, i wish i fund it sooner.  &lt;https://elmseeds.thaterikperson.com/navigation&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T15:58:27.954802</ts>
    <user>U40QW928G</user>
    <text>whoa never heard of elmseeds before</text>
  </message>
  <message>
    <ts>2017-06-30T16:03:24.042580</ts>
    <user>U2LAL86AY</user>
    <text>@erick is updating it regularly - just yesterday a video was released :smile: &lt;https://elmseeds.thaterikperson.com/archive/&gt; :heart:</text>
  </message>
  <message>
    <ts>2017-06-30T16:04:54.068132</ts>
    <user>U2XRG0UKA</user>
    <text>Thanks for the links, &lt;@U2LAL86AY&gt;. New videos come out every Thursday with a few exceptions.</text>
  </message>
  <message>
    <ts>2017-06-30T16:06:49.100972</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U2XRG0UKA&gt; much appreciated :hug:</text>
  </message>
  <message>
    <ts>2017-06-30T16:27:03.434288</ts>
    <user>U3R7CKQRX</user>
    <text>wow, elmseeds looks really good. Been looking for that one resource that will get you going form beginner level to advanced topics for my team, &lt;@U2XRG0UKA&gt; thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T16:32:47.528536</ts>
    <user>U0CL0AS3V</user>
    <text>at least in my brain, it seems to me that if nested records are doable then nested (dict | record)s should be doable as well</text>
  </message>
  <message>
    <ts>2017-06-30T16:33:33.540780</ts>
    <user>U0CL0AS3V</user>
    <text>as long as you have some notion of "this is a thing that can be expanded" and "here is how to write down what is currently expanded" (both of which we already have in both cases), I think you have everything you need</text>
  </message>
  <message>
    <ts>2017-06-30T16:33:34.540980</ts>
    <user>U0CL0AS3V</user>
    <text>but could be I'm missing something!</text>
  </message>
  <message>
    <ts>2017-06-30T16:33:40.542681</ts>
    <user>U3R7CKQRX</user>
    <text>I got a question: Imagine a have a scrollable list of dates (appointments), and the requirement is to display the current week at the top of that list (sticky).</text>
  </message>
  <message>
    <ts>2017-06-30T16:34:20.553054</ts>
    <user>U40QW928G</user>
    <text>idk if feels weird adding a base statement for each view</text>
  </message>
  <message>
    <ts>2017-06-30T16:34:23.553978</ts>
    <user>U40QW928G</user>
    <text>case*</text>
  </message>
  <message>
    <ts>2017-06-30T16:34:43.559292</ts>
    <user>U40QW928G</user>
    <text>idk I'll find a solution</text>
  </message>
  <message>
    <ts>2017-06-30T16:34:53.561829</ts>
    <user>U3R7CKQRX</user>
    <text>Since it requires listening to the scroll event as well as reading the list items height to calculate which week you "are in", we used ports to do this. Do you think this is the right way?</text>
  </message>
  <message>
    <ts>2017-06-30T16:35:02.564345</ts>
    <user>U40QW928G</user>
    <text>but I also want to make sure I separate my code well because I'm planning to build a relatively large website</text>
  </message>
  <message>
    <ts>2017-06-30T16:35:06.565377</ts>
    <user>U0CL0AS3V</user>
    <text>it used to do that, and it turned out that in more cases the reverse was more helpful, so there were explicit feature requests to change it to the current behavior :smile:</text>
  </message>
  <message>
    <ts>2017-06-30T16:50:49.809315</ts>
    <user>U3FJSB596</user>
    <text>The way that I have it implemented in my code is that in each case, it triggers a different function</text>
  </message>
  <message>
    <ts>2017-06-30T16:53:41.853128</ts>
    <user>U3FJSB596</user>
    <text>I DM’ed you a snippet of code that I wrote for my project</text>
  </message>
  <message>
    <ts>2017-06-30T16:57:11.907139</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U3R7CKQRX&gt; are your list items with predictable height or is variable because it contains text? -If is variable you need to use ports - since you can't calculate that up front in elm - but if they are not - is better to store that on the model.</text>
  </message>
  <message>
    <ts>2017-06-30T16:58:47.931484</ts>
    <user>U3R7CKQRX</user>
    <text>the list items have fixed height, so you mean I should pass the height to elm as flag and store it there?</text>
  </message>
  <message>
    <ts>2017-06-30T16:59:12.937838</ts>
    <user>U3R7CKQRX</user>
    <text>and then do calculation with `Dom` and the `y` function?</text>
  </message>
  <message>
    <ts>2017-06-30T17:01:04.968078</ts>
    <user>U2LAL86AY</user>
    <text>if you can know the height up front - there is no need for flags. If you need to calculate it in js one time - flags are ok.</text>
  </message>
  <message>
    <ts>2017-06-30T17:01:44.979067</ts>
    <user>U2LAL86AY</user>
    <text>maybe a picture with what you have there will help more</text>
  </message>
  <message>
    <ts>2017-06-30T17:02:44.994892</ts>
    <user>U3R7CKQRX</user>
    <text>ok one sec</text>
  </message>
  <message>
    <ts>2017-06-30T17:12:58.141834</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U2LAL86AY&gt; It looks kind of like this, the top blue row should always display the current week, the lower three rows can scroll. when they are scrolled the top blue row should update it's week.</text>
  </message>
  <message>
    <ts>2017-06-30T17:13:14.145154</ts>
    <user>U3R7CKQRX</user>
    <text>does that make it more clear?</text>
  </message>
  <message>
    <ts>2017-06-30T17:17:50.206769</ts>
    <user>U23SA861Y</user>
    <text>is there way to get the scroll event to dispatch back the percent scrolled through</text>
  </message>
  <message>
    <ts>2017-06-30T17:18:47.219231</ts>
    <user>U23SA861Y</user>
    <text>that will give you the range of indices for which to compute the week</text>
  </message>
  <message>
    <ts>2017-06-30T17:25:05.301829</ts>
    <user>U3R7CKQRX</user>
    <text>i think you can only compute that percentage by doing `tableScrollTop / tableheight`</text>
  </message>
  <message>
    <ts>2017-06-30T18:25:42.991057</ts>
    <user>U23SA861Y</user>
    <text>what value does the scroll event get you?</text>
  </message>
  <message>
    <ts>2017-06-30T19:04:04.317562</ts>
    <user>U5LFUHH19</user>
    <text>I'm working through the &lt;https://github.com/rtfeldman/elm-spa-example&gt;.  My site can been seen here: &lt;http://test.hurwitzlab.org/#/&gt;, and the code is here: &lt;https://github.com/rtfeldman/elm-spa-example&gt;.  I have only implemented the "Browse -&amp;gt; Investigators" successfully.  When I click on an investigator to get to the "/investigator/&amp;lt;id&amp;gt;", I get lost on how to pass the ID (an int) into the model and so forth.  I'm hoping someone can look at my code and see the problems.</text>
  </message>
  <message>
    <ts>2017-06-30T19:05:00.324934</ts>
    <user>U5LFUHH19</user>
    <text>Here is the error I get: &lt;https://gist.github.com/kyclark/6b16685d633102611d299c5eaf2716c6&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T19:19:44.431651</ts>
    <user>U285A8S8H</user>
    <text>I guess I can't put an if statement where value is expected when calling a function? like so
```
div [ containerStyle ]
  if foo then
    [ text "Foo" ]
  else
    [ text "Bar" ]
```
so  now the question is - `let..in` or a new function? :wink:</text>
  </message>
  <message>
    <ts>2017-06-30T19:21:41.445185</ts>
    <user>U5LFUHH19</user>
    <text>`div [ style ] [ text (if foo then "Foo" else "Bar") ]` ?</text>
  </message>
  <message>
    <ts>2017-06-30T19:23:58.460479</ts>
    <user>U285A8S8H</user>
    <text>I guess that could work, but there's more html than a simple text - I settled on a let-in</text>
  </message>
  <message>
    <ts>2017-06-30T19:24:22.463280</ts>
    <user>U285A8S8H</user>
    <text>ahh cosmetic stuff, the bane of every dev's existence :+1:</text>
  </message>
  <message>
    <ts>2017-06-30T19:32:44.519996</ts>
    <user>U0M9CNX1A</user>
    <text>Case by case basis when this is appropriate, but you can also wrap the `if` expression in parens
```
div [ containerStyle ]
    (if foo then
        [ text "Foo" ]
     else
        [ text "Bar" ]
    )
```</text>
  </message>
  <message>
    <ts>2017-06-30T19:40:40.570696</ts>
    <user>U0J1M0F32</user>
    <text>I prefer the `let` `in` approach, *or* I'll usually use that opportunity to pull out a helper view function.</text>
  </message>
  <message>
    <ts>2017-06-30T19:44:17.592643</ts>
    <user>U0JFXEUCT</user>
    <text>you can also do
```
test2 =
    div [] &amp;lt;|
        if True then
            [ text "Foo" ]
        else
            [ text "Bar" ]
```</text>
  </message>
  <message>
    <ts>2017-06-30T19:44:35.594494</ts>
    <user>U0JFXEUCT</user>
    <text>not that thats a good idea or anything…</text>
  </message>
  <message>
    <ts>2017-06-30T19:44:48.595798</ts>
    <user>U1432C733</user>
    <text>Hi all. My colleagues and I did a bit of searching on this and couldn't quite come up with something we liked. We have an Elm app that is basically just a left bar app to select "sub apps"</text>
  </message>
  <message>
    <ts>2017-06-30T19:45:11.598228</ts>
    <user>U1432C733</user>
    <text>Right now, we compile all of them into one project with the left bar as the parent.</text>
  </message>
  <message>
    <ts>2017-06-30T19:45:56.602909</ts>
    <user>U1432C733</user>
    <text>The trouble is, it's becoming a little tightly coupled and hard to deal with as we keep developing more sub apps. Additionally, complexity has been introduced where each user now needs a different list of sub apps.</text>
  </message>
  <message>
    <ts>2017-06-30T19:46:56.609034</ts>
    <user>U1432C733</user>
    <text>The the question is: is it a totally awful (high bar, I know) idea to have a parent app expose a div and on a button click, get a new static (the compiled sub app) to attach to that div?</text>
  </message>
  <message>
    <ts>2017-06-30T19:47:12.610673</ts>
    <user>U1432C733</user>
    <text>*awaits tomatoes*</text>
  </message>
  <message>
    <ts>2017-06-30T19:48:14.616683</ts>
    <user>U0J1M0F32</user>
    <text>What you're asking is technically possible, but I'm not sure I'd recommend it from a design perspective.</text>
  </message>
  <message>
    <ts>2017-06-30T19:48:30.618286</ts>
    <user>U0J1M0F32</user>
    <text>Also, no one will throw tomatoes at you :yellow_heart:</text>
  </message>
  <message>
    <ts>2017-06-30T19:49:00.621304</ts>
    <user>U1432C733</user>
    <text>That was our feeling as well. We knew it _could be done_ but surely there must be smarter people than us who have already done it better.</text>
  </message>
  <message>
    <ts>2017-06-30T19:49:36.624866</ts>
    <user>U0J1M0F32</user>
    <text>I think, I personally, would need a little more background on the project and the business/technical constraints at play before I could give a fair assessment. Others here in chat may be more useful.</text>
  </message>
  <message>
    <ts>2017-06-30T19:49:44.625643</ts>
    <user>U0J1M0F32</user>
    <text>I'll follow along with the convo and pipe in if I think of anything.</text>
  </message>
  <message>
    <ts>2017-06-30T19:49:54.626718</ts>
    <user>U1432C733</user>
    <text>Cool. What would be helpful?</text>
  </message>
  <message>
    <ts>2017-06-30T19:50:12.628763</ts>
    <user>U0JFXEUCT</user>
    <text>There are two talks coming out from the elm europe that deal directly with scaling elm code</text>
  </message>
  <message>
    <ts>2017-06-30T19:50:24.630082</ts>
    <user>U0JFXEUCT</user>
    <text>they’re both really good</text>
  </message>
  <message>
    <ts>2017-06-30T19:50:34.631012</ts>
    <user>U0JFXEUCT</user>
    <text>one by evan, another by richard feldman</text>
  </message>
  <message>
    <ts>2017-06-30T19:50:52.632676</ts>
    <user>U0J1M0F32</user>
    <text>Elm Europe 2017 -&amp;gt; &lt;https://www.youtube.com/channel/UCT5HLUjjXdqUSUnpblFNOwQ&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T19:50:53.632842</ts>
    <user>U0JFXEUCT</user>
    <text>I know that’s not directly answering your question :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T19:52:33.642438</ts>
    <user>U0JFXEUCT</user>
    <text>also, you might want to check out richard’s SPA example</text>
  </message>
  <message>
    <ts>2017-06-30T19:52:57.644923</ts>
    <user>U0JFXEUCT</user>
    <text>&lt;https://dev.to/rtfeldman/tour-of-an-open-source-elm-spa&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T19:54:20.653055</ts>
    <user>U0JFXEUCT</user>
    <text>right, so you have one parent model-view-update triplet that redirects to children which each have their model-view-update triplet?</text>
  </message>
  <message>
    <ts>2017-06-30T19:54:22.653281</ts>
    <user>U1432C733</user>
    <text>My ms paint skills at their finest :smile:</text>
  </message>
  <message>
    <ts>2017-06-30T19:54:28.653878</ts>
    <user>U1432C733</user>
    <text>Correct</text>
  </message>
  <message>
    <ts>2017-06-30T19:54:55.656344</ts>
    <user>U0JFXEUCT</user>
    <text>(exquisite artistry!)</text>
  </message>
  <message>
    <ts>2017-06-30T19:55:21.658939</ts>
    <user>U0JFXEUCT</user>
    <text>So, the general advice I’ve heard and that I follow is that that’s a hard pattern to pursue</text>
  </message>
  <message>
    <ts>2017-06-30T19:56:41.666356</ts>
    <user>U0JFXEUCT</user>
    <text>again evan and richard talk about it better than I can.  But the question you should ask is do you actually need that?  Or can you just grow a single app normally and break an individual part into functions when it gets “too big”</text>
  </message>
  <message>
    <ts>2017-06-30T19:56:56.667707</ts>
    <user>U285A8S8H</user>
    <text>how can I run a batch of two commands to somehow receive two values?</text>
  </message>
  <message>
    <ts>2017-06-30T19:57:33.671044</ts>
    <user>U285A8S8H</user>
    <text>perhaps I'm thinking this wrong - I need to get current time and a random number</text>
  </message>
  <message>
    <ts>2017-06-30T19:57:38.671588</ts>
    <user>U1432C733</user>
    <text>For sure. We're doing that now. It's just getting a little busy across our team.</text>
  </message>
  <message>
    <ts>2017-06-30T19:57:55.673156</ts>
    <user>U285A8S8H</user>
    <text>so I wrote a msg type that takes a Time and an Int</text>
  </message>
  <message>
    <ts>2017-06-30T19:58:44.678003</ts>
    <user>U1432C733</user>
    <text>Plus the coupling is a little tighter and we wanted to see if there was a looser way to do it.</text>
  </message>
  <message>
    <ts>2017-06-30T19:59:13.680582</ts>
    <user>U1432C733</user>
    <text>Basically, we have a distributed group of people developing applications to be nested in our "upside down L" app.</text>
  </message>
  <message>
    <ts>2017-06-30T20:00:01.685227</ts>
    <user>U0JFXEUCT</user>
    <text>do these apps truly function separately?  the elm compiler makes it easier to have people all working on one codebase</text>
  </message>
  <message>
    <ts>2017-06-30T20:00:09.686854</ts>
    <user>U1432C733</user>
    <text>&lt;@U285A8S8H&gt; Look into msg.batch</text>
  </message>
  <message>
    <ts>2017-06-30T20:00:41.690727</ts>
    <user>U1432C733</user>
    <text>&lt;@U0JFXEUCT&gt; Yes, the apps are totally disconnected from one another.</text>
  </message>
  <message>
    <ts>2017-06-30T20:01:07.693649</ts>
    <user>U285A8S8H</user>
    <text>I think I could use Task.map2 there</text>
  </message>
  <message>
    <ts>2017-06-30T20:01:27.695794</ts>
    <user>U1432C733</user>
    <text>&lt;@U285A8S8H&gt; Sorry, Cmd.batch</text>
  </message>
  <message>
    <ts>2017-06-30T20:02:37.703223</ts>
    <user>U0JFXEUCT</user>
    <text>&lt;@U1432C733&gt;  I have to head out unfortunately, though hopefully someone else will chime in. :smile:  I wish you luck and again recommend the talks by evan and richard on this…hopefully they’ll be posted soon.</text>
  </message>
  <message>
    <ts>2017-06-30T20:03:07.706292</ts>
    <user>U1432C733</user>
    <text>&lt;@U0JFXEUCT&gt; Thank you so much. We'll watch that now. We very much appreciate the help.</text>
  </message>
  <message>
    <ts>2017-06-30T20:07:10.728656</ts>
    <user>U285A8S8H</user>
    <text>I think my problem is that I need to get a Task for generating the random number, but I don't see any function like that in the Random module</text>
  </message>
  <message>
    <ts>2017-06-30T20:07:38.731116</ts>
    <user>U285A8S8H</user>
    <text>I would then do `Task.map2 task1 task2 MyMsg`</text>
  </message>
  <message>
    <ts>2017-06-30T20:09:09.739054</ts>
    <user>U285A8S8H</user>
    <text>Ok let's not do that, I'll use two msg types</text>
  </message>
  <message>
    <ts>2017-06-30T20:12:15.756143</ts>
    <user>U1432C733</user>
    <text>&lt;@U285A8S8H&gt; can you explain from start to finish what you are trying to do? I'm not quite understanding it.</text>
  </message>
  <message>
    <ts>2017-06-30T20:13:03.760110</ts>
    <user>U285A8S8H</user>
    <text>Ok, so I'm writing an app for practicing musical scales etc. When the user clicks "start", a random exercise is generated and a timer shows up</text>
  </message>
  <message>
    <ts>2017-06-30T20:13:47.763848</ts>
    <user>U285A8S8H</user>
    <text>I thought that I'd prepare a cmd that gets current time, generates a random exercise and feeds the data into a single StartExercise msg</text>
  </message>
  <message>
    <ts>2017-06-30T20:13:56.764672</ts>
    <user>U1432C733</user>
    <text>I see.</text>
  </message>
  <message>
    <ts>2017-06-30T20:14:13.766148</ts>
    <user>U285A8S8H</user>
    <text>I tried to use Task.map2 for that, but generating a random number doesn't provide a task, it provides a Cmd instantly</text>
  </message>
  <message>
    <ts>2017-06-30T20:14:15.766238</ts>
    <user>U1432C733</user>
    <text>Cool. So here's a way to do it (and likely the way I'd start with).</text>
  </message>
  <message>
    <ts>2017-06-30T20:14:27.767228</ts>
    <user>U285A8S8H</user>
    <text>so now I decided to use two msgs</text>
  </message>
  <message>
    <ts>2017-06-30T20:15:29.772605</ts>
    <user>U1432C733</user>
    <text>I would say, create an update and Msg for: 1. get the random number and 2. start the clock. Then on that button click, Cmd.Batch those two messages, or, if they are sequenced, call the random number and on update, call the start clock.</text>
  </message>
  <message>
    <ts>2017-06-30T20:16:13.776360</ts>
    <user>U1432C733</user>
    <text>I asked my colleague and he suggested checking out Task.andThen as well.</text>
  </message>
  <message>
    <ts>2017-06-30T20:17:37.783046</ts>
    <user>U1432C733</user>
    <text>&lt;@U285A8S8H&gt; Was that helpful?</text>
  </message>
  <message>
    <ts>2017-06-30T20:17:53.784284</ts>
    <user>U285A8S8H</user>
    <text>yeah, I'm gonna use two msgs</text>
  </message>
  <message>
    <ts>2017-06-30T20:17:57.784674</ts>
    <user>U285A8S8H</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-06-30T20:18:19.786755</ts>
    <user>U285A8S8H</user>
    <text>Task.andThen won't help because I have a Generator for the exercise</text>
  </message>
  <message>
    <ts>2017-06-30T20:18:34.788027</ts>
    <user>U285A8S8H</user>
    <text>I looked in the docs for Random module and there's no function to get a Task from a Generator</text>
  </message>
  <message>
    <ts>2017-06-30T20:22:09.805971</ts>
    <user>U1432C733</user>
    <text>He just stepped out. I would handle it the same way you are: just batch ( Random.generate &amp;lt;&amp;lt;generator&amp;gt;&amp;gt;) and (Task.perform NewTime Time.now)</text>
  </message>
  <message>
    <ts>2017-06-30T20:26:50.828107</ts>
    <user>U285A8S8H</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-06-30T20:51:39.940778</ts>
    <user>U285A8S8H</user>
    <text>FWIW I implemented a Pause feature that stops the timer  and resumes it after resuming (duh)</text>
  </message>
  <message>
    <ts>2017-06-30T20:52:12.943234</ts>
    <user>U285A8S8H</user>
    <text>that caused a need for refactor and now I don't need two msgs at all, I can rely solely on my `Time.every` sub</text>
  </message>
  <message>
    <ts>2017-06-30T20:52:29.944392</ts>
    <user>U285A8S8H</user>
    <text>:tada:</text>
  </message>
  <message>
    <ts>2017-06-30T21:07:02.005103</ts>
    <user>U1432C733</user>
    <text>Nice :+1:</text>
  </message>
  <message>
    <ts>2017-06-30T21:47:30.155170</ts>
    <user>U2LAL86AY</user>
    <text>and for the breaking fold stuff check out this code by ilias : &lt;https://ellie-app.com/3Cxhjfm6Qrga1/1&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T21:47:54.156511</ts>
    <user>U2LAL86AY</user>
    <text>need to go, good luck :smile:</text>
  </message>
  <message>
    <ts>2017-07-01T03:49:22.598966</ts>
    <user>U3YDBDP4Z</user>
    <text>Just got my first Mac, and I'm downloading elm-format but I'm not familiar with Macs so I'm not sure where elm-format should live?</text>
  </message>
  <message>
    <ts>2017-07-01T04:00:44.635680</ts>
    <user>U3YDBDP4Z</user>
    <text>Also using Atom, so the elm-format plugin needs to find elm-format</text>
  </message>
  <message>
    <ts>2017-07-01T04:05:22.651800</ts>
    <user>U61V125H6</user>
    <text>Hey, is anyone here working on an Elm in-browser editor or WYSIWYG. Something similar to [stackedit](&lt;https://stackedit.io/editor&gt;). I'm aware of [Dreamwriter](&lt;https://dreamwriter.co/&gt;), but I found simplifying and taking out sections a little tricky. If possible, more of a WYSIWYG library that you can integrate into your elm code</text>
  </message>
  <message>
    <ts>2017-07-01T05:06:42.860003</ts>
    <user>U2M17S85D</user>
    <text>Why does the `List` package has the functions `sum` and `product`? They are only working for `numbers`. It seems to me they are unrelated to the package.</text>
  </message>
  <message>
    <ts>2017-07-01T05:11:55.878251</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U3YDBDP4Z&gt; if you install it with Brew it should *just work*. First you need to install Brew of course: &lt;https://brew.sh/&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T05:12:48.881150</ts>
    <user>U2D7NUGS1</user>
    <text>Then ```
brew install elm elm-format
``` should do the trick.</text>
  </message>
  <message>
    <ts>2017-07-01T05:17:18.896287</ts>
    <user>U3YDBDP4Z</user>
    <text>&lt;@U2D7NUGS1&gt; Thanks for that! Now I need to solve the next issue of atom-elm-format not finding the elm-format binary</text>
  </message>
  <message>
    <ts>2017-07-01T05:18:46.901217</ts>
    <user>U2D7NUGS1</user>
    <text>Hmm. I have it working. Let me look at my config.</text>
  </message>
  <message>
    <ts>2017-07-01T05:19:37.904153</ts>
    <user>U2D7NUGS1</user>
    <text>It's probably because there is no executable named `elm-format` anymore. Use `elm-format-0.18`.</text>
  </message>
  <message>
    <ts>2017-07-01T05:20:25.906893</ts>
    <user>U3YDBDP4Z</user>
    <text>&lt;@U2D7NUGS1&gt; That did it. :slightly_smiling_face: Thanks mate!</text>
  </message>
  <message>
    <ts>2017-07-01T05:20:34.907411</ts>
    <user>U2D7NUGS1</user>
    <text>Cool :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-01T05:25:03.922133</ts>
    <user>U2D7NUGS1</user>
    <text>I'll repeat my question from beginners here in hope for a quick answer:
How can I handle Error result of `Json.Decode`? I have a snippet like this: ```
, on "opened-changed"
    (Json.Decode.string
        |&amp;gt; &lt;http://Json.Decode.at|Json.Decode.at&gt; [ "detail", "value" ]
        |&amp;gt; Json.Decode.map StringHappened
    )
```
where `StringHappened` is a constructor for my `Msg`. It just so happens that the `detail.value` is a `bool`. Currently in my app nothing happens. I want another variant of `Msg` to be used, say `ErrorHappened`. How can I do it?</text>
  </message>
  <message>
    <ts>2017-07-01T05:51:18.009043</ts>
    <user>U2D7NUGS1</user>
    <text>It's been addressed at &lt;#C192T0Q1E|beginners&gt; .</text>
  </message>
  <message>
    <ts>2017-07-01T09:17:46.740037</ts>
    <user>U37HUSJ4R</user>
    <text>Is there an elm version of something like classnames? &lt;https://github.com/JedWatson/classnames&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T09:21:43.755937</ts>
    <user>U4872964V</user>
    <text>looks like it would work poorly with Elm’s type system</text>
  </message>
  <message>
    <ts>2017-07-01T09:22:02.757123</ts>
    <user>U1CE9DL9H</user>
    <text>what do you want to achieve with it?</text>
  </message>
  <message>
    <ts>2017-07-01T09:23:50.764608</ts>
    <user>U4872964V</user>
    <text>Elm-html merges class attributes automatically, if that’s what you want. So you can use multiple class attributes</text>
  </message>
  <message>
    <ts>2017-07-01T09:24:03.765463</ts>
    <user>U37HUSJ4R</user>
    <text>```
isActiveFilter : FilterType -&amp;gt; FilterType -&amp;gt; String
 isActiveFilter filterType currentActive =
     if filterType == currentActive then
         "selected"
     else
         ""
```</text>
  </message>
  <message>
    <ts>2017-07-01T09:24:22.766891</ts>
    <user>U37HUSJ4R</user>
    <text>and getting used `[ class ("note-change " ++ isActiveFilter System activeFilter)`</text>
  </message>
  <message>
    <ts>2017-07-01T09:24:33.767586</ts>
    <user>U1CE9DL9H</user>
    <text>I think you want &lt;http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Attributes#classList&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T09:24:50.768735</ts>
    <user>U37HUSJ4R</user>
    <text>perfect</text>
  </message>
  <message>
    <ts>2017-07-01T09:50:45.877559</ts>
    <user>U0S6BNVNY</user>
    <text>alkstal: I put it in ~/.bin and add that to my path</text>
  </message>
  <message>
    <ts>2017-07-01T09:51:13.879396</ts>
    <user>U0S6BNVNY</user>
    <text>alkstal: and if it's in your PATH atom will find it I think (might need a restart, I forget...but you can also tell the plugin where it is explicitly</text>
  </message>
  <message>
    <ts>2017-07-01T09:52:40.885421</ts>
    <user>U3YDBDP4Z</user>
    <text>Thanks. I used `brew` to install it, and then I had to specify the name as `elm-format.0.18` instead of `elm-format`</text>
  </message>
  <message>
    <ts>2017-07-01T12:45:11.713608</ts>
    <user>U3R7CKQRX</user>
    <text>I have seen it a couple of times for example in &lt;@U0CL0AS3V&gt; 's SPA (&lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L340&gt;) that the `!` operator is not used but `(,)` is aliased as `(=&amp;gt;)` and used to create a pair. Can anybody tell me what the motivation behind that is?</text>
  </message>
  <message>
    <ts>2017-07-01T12:48:36.730157</ts>
    <user>U3SJEDR96</user>
    <text>`=&amp;gt;` is a nice way to express association, or "leads to", or even "with these effects". The `!` bang operator is much less expressive.</text>
  </message>
  <message>
    <ts>2017-07-01T12:48:53.731590</ts>
    <user>U3SJEDR96</user>
    <text>`=&amp;gt;` is also great when working with inline styles or `Dict.fromList` for example</text>
  </message>
  <message>
    <ts>2017-07-01T12:50:07.737557</ts>
    <user>U3R7CKQRX</user>
    <text>I agree about the expressiveness</text>
  </message>
  <message>
    <ts>2017-07-01T12:50:46.740871</ts>
    <user>U3R7CKQRX</user>
    <text>is there some general agreement to do this? i've seen this quite a bit. will this maybe even be changed in 0.19?</text>
  </message>
  <message>
    <ts>2017-07-01T12:52:23.748346</ts>
    <user>U3SJEDR96</user>
    <text>Quite likely!</text>
  </message>
  <message>
    <ts>2017-07-01T12:52:48.750143</ts>
    <user>U3R7CKQRX</user>
    <text>ok good to know :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-01T12:52:56.750719</ts>
    <user>U3R7CKQRX</user>
    <text>thanks &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T12:57:03.770574</ts>
    <user>U3SJEDR96</user>
    <text>Though there will likely be tools to convert code, so sticking to `!` for now is actually a good idea :)</text>
  </message>
  <message>
    <ts>2017-07-01T13:07:18.823043</ts>
    <user>U5XC2FJ1Y</user>
    <text>thanks! i really like the compiler messages 99% of the time so I figured there was probably a story here, good to know my intuition was right and good to know this is something y'all have thought about :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-01T13:19:17.881646</ts>
    <user>U601ELFEG</user>
    <text>I have the following:    `case Array.get i someArray of      Just x -&amp;gt; x       Nothing</text>
  </message>
  <message>
    <ts>2017-07-01T13:19:21.882082</ts>
    <user>U601ELFEG</user>
    <text>er</text>
  </message>
  <message>
    <ts>2017-07-01T13:20:15.886414</ts>
    <user>U601ELFEG</user>
    <text>```case Array.get i someArray of
    Just x -&amp;gt; x
    Nothing -&amp;gt; Debug.crash "never gonna happen"
```</text>
  </message>
  <message>
    <ts>2017-07-01T13:20:44.888905</ts>
    <user>U601ELFEG</user>
    <text>but I see this crash anyway - does Elm evaluate the Nothing case anyway?</text>
  </message>
  <message>
    <ts>2017-07-01T13:21:00.890231</ts>
    <user>U0CLDU8UB</user>
    <text>Yes, it's an eager language</text>
  </message>
  <message>
    <ts>2017-07-01T13:21:10.890991</ts>
    <user>U601ELFEG</user>
    <text>even for `case`?</text>
  </message>
  <message>
    <ts>2017-07-01T13:21:11.891072</ts>
    <user>U1CE9DL9H</user>
    <text>no, case is lazy</text>
  </message>
  <message>
    <ts>2017-07-01T13:21:17.891543</ts>
    <user>U601ELFEG</user>
    <text>that is what I thought</text>
  </message>
  <message>
    <ts>2017-07-01T13:21:57.894547</ts>
    <user>U601ELFEG</user>
    <text>though I'm wondering if the `Nothing` branch is handled differently</text>
  </message>
  <message>
    <ts>2017-07-01T13:22:10.895631</ts>
    <user>U1CE9DL9H</user>
    <text>what is your actual code? the thing you typed will never evaluate the `Nothing` branch for a just</text>
  </message>
  <message>
    <ts>2017-07-01T13:22:49.898795</ts>
    <user>U1CE9DL9H</user>
    <text>but 
```
x = Debug.crash ""

v = case ... of   
    Just _ -&amp;gt; ...
   Nothing -&amp;gt; x
```</text>
  </message>
  <message>
    <ts>2017-07-01T13:22:51.898953</ts>
    <user>U1CE9DL9H</user>
    <text>will</text>
  </message>
  <message>
    <ts>2017-07-01T13:22:53.899127</ts>
    <user>U1CE9DL9H</user>
    <text>crash</text>
  </message>
  <message>
    <ts>2017-07-01T13:23:10.900361</ts>
    <user>U601ELFEG</user>
    <text>```arrayMap2 : (a -&amp;gt; b -&amp;gt; c) -&amp;gt; Array a -&amp;gt; Array b -&amp;gt; Array c
arrayMap2 f aArray bArray =
  let
    l = min (Array.length aArray) (Array.length bArray)
    gen i = case Maybe.map2 f (Array.get i aArray) (Array.get i bArray) of
      Just c -&amp;gt; c
      Nothing -&amp;gt; shouldNeverHappen
  in
      Array.initialize 1 gen
```</text>
  </message>
  <message>
    <ts>2017-07-01T13:23:15.900811</ts>
    <user>U601ELFEG</user>
    <text>oopps</text>
  </message>
  <message>
    <ts>2017-07-01T13:24:11.905174</ts>
    <user>U601ELFEG</user>
    <text>and yes - now I see it - `shouldNeverHappen` is a syn. for `Debug.crash` with a message</text>
  </message>
  <message>
    <ts>2017-07-01T13:24:15.905492</ts>
    <user>U601ELFEG</user>
    <text>and that is going to kill it</text>
  </message>
  <message>
    <ts>2017-07-01T13:24:23.906166</ts>
    <user>U601ELFEG</user>
    <text>Oy - miss my lazy language!</text>
  </message>
  <message>
    <ts>2017-07-01T13:24:26.906545</ts>
    <user>U1CE9DL9H</user>
    <text>just make it take unit as an argument</text>
  </message>
  <message>
    <ts>2017-07-01T13:26:58.918950</ts>
    <user>U601ELFEG</user>
    <text>TY - that worked - the app runs again.</text>
  </message>
  <message>
    <ts>2017-07-01T13:53:32.047193</ts>
    <user>U3LUC6SNS</user>
    <text>Hi all!  I am implementing a feature with channels so as to inform the user whether the backend program is online or not.  It is working, but has one big flaw.  When the server goes from the offline to the online state, the program immediately detects this change and responds accordingly.  In the opposite direction, from on to off, there is a big delay.   This because I am not trapping the right signal.  

Here is the code:
```
SetMessage message -&amp;gt;
            Action.Channel.setMessage message model

        -- ( { model | messageInProgress = message }, Cmd.none )
        SendMessage -&amp;gt;
            Action.Channel.sendMessage model

        ReceiveChatMessage raw -&amp;gt;
            let
                messageDecoder =
                    JsDecode.field "message" JsDecode.string

                somePayload =
                    JsDecode.decodeValue messageDecoder raw
            in
                case somePayload of
                    Ok payload -&amp;gt;
                        Action.Channel.handlePing True model

                    -- ( { model | messages = payload :: model.messages, info = payload }  Cmd.none )
                    Err error -&amp;gt;
                        Action.Channel.handlePing False model

        -- ( { model | messages = "Failed to receive message" :: model.messages }, Cmd.none )
        HandleSendError err -&amp;gt;
            Action.Channel.handlePing False model

        PhoenixMsg msg -&amp;gt;
            let
                ( phxSocket, phxCmd ) =
                    Phoenix.Socket.update msg model.phxSocket

                appState =
                    model.appState

                status =
                    if String.contains "Heartbeat" (toString msg) then
                        False
                    else
                        True

                updatedAppState =
                    { appState | online = status }
            in
                ( { model
                    | phxSocket = phxSocket
                    , appState = updatedAppState
                  }
                , Cmd.map PhoenixMsg phxCmd
                )
```
In the javascript console, I get this:
```
app.js:18881 WebSocket connection to '&lt;ws://localhost:4000/socket/websocket&gt;' failed: Error in connection establishment: net::ERR_CONNECTION_REFUSED
```
This is what I need to detect.  When I inspect the code, I get this:
```
function open(url, settings)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			var socket = new WebSocket(url);
			socket.elm_web_socket = true;
		}
```</text>
  </message>
  <message>
    <ts>2017-07-01T14:01:33.088350</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U3LUC6SNS&gt; I'm not sure, but seems to me like you could use &lt;http://package.elm-lang.org/packages/elm-lang/websocket/1.0.2/WebSocket-LowLevel&gt; with a suitable `onClose`?</text>
  </message>
  <message>
    <ts>2017-07-01T15:45:05.558940</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U0CLDU8UB&gt;, Thankyou!  I will give that a try.</text>
  </message>
  <message>
    <ts>2017-07-01T15:49:20.577605</ts>
    <user>U17MHJ12N</user>
    <text>Hi all, trying to get elm-test running for the first time and I have run elm-test init and followed the instructions but when I run elm-test I just get lots of errors like this:</text>
  </message>
  <message>
    <ts>2017-07-01T15:49:51.579773</ts>
    <user>U17MHJ12N</user>
    <text>I have elm-test installed globally via npm (on windows 10)</text>
  </message>
  <message>
    <ts>2017-07-01T15:50:38.583338</ts>
    <user>U17MHJ12N</user>
    <text>Anyone have any idea what the problem is?</text>
  </message>
  <message>
    <ts>2017-07-01T17:16:59.937098</ts>
    <user>U17MHJ12N</user>
    <text>Just tried the exact same repo on linux and it works correctly so I'm guessing perhaps it is a problem with elm-test running on windows?</text>
  </message>
  <message>
    <ts>2017-07-01T17:51:25.064318</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U17MHJ12N&gt; more likely a version conflict. I.e. the node runner (which you install through npm) depends on specific version of some elm dependencies. I recommend checking output of elm-test --version, your tests/elm-package.json and posting in &lt;#C0CLGCMMF|testing&gt; :)</text>
  </message>
  <message>
    <ts>2017-07-01T20:40:10.643481</ts>
    <user>U4Z4NEUQG</user>
    <text>I'm trying to model something like this: &lt;http://www.knowstack.com/wp-content/uploads/2015/05/NSPredicateEditor-Sample-Code-e1432106766151.png&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T20:41:25.647086</ts>
    <user>U4Z4NEUQG</user>
    <text>I have started to model the predicate like this: &lt;https://gist.github.com/kuon/95b1bb43b7ec7f06c874e8f9975f7944&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T20:42:17.649580</ts>
    <user>U4Z4NEUQG</user>
    <text>but I hit one problem, as it is recursive, I am a bit lost on how I can map my message in the select "onInput" to the actual predicate</text>
  </message>
  <message>
    <ts>2017-07-01T20:44:02.655047</ts>
    <user>U4Z4NEUQG</user>
    <text>I mean, the editor will be recursive (it is not in my current code), so I need a way to map the onInput message with the "position" of the predicate within the predicate tree</text>
  </message>
  <message>
    <ts>2017-07-01T21:12:07.747738</ts>
    <user>U4Z4NEUQG</user>
    <text>I updated my gist &lt;https://gist.github.com/kuon/95b1bb43b7ec7f06c874e8f9975f7944&gt; with the start of the recursive structure</text>
  </message>
  <message>
    <ts>2017-07-01T21:13:24.751816</ts>
    <user>U0M9CNX1A</user>
    <text>&lt;@U4Z4NEUQG&gt; seems you might be able to use some sort of lens/focus concept: &lt;http://package.elm-lang.org/packages/evancz/focus/latest&gt; or &lt;http://package.elm-lang.org/packages/arturopala/elm-monocle/latest&gt;
I don't have experience with either of these yet</text>
  </message>
  <message>
    <ts>2017-07-01T21:15:30.758773</ts>
    <user>U4Z4NEUQG</user>
    <text>the problem is that I need a way to encode the predicate "path"</text>
  </message>
  <message>
    <ts>2017-07-01T21:15:36.759133</ts>
    <user>U4Z4NEUQG</user>
    <text>So I might have to rethink my datastructure</text>
  </message>
  <message>
    <ts>2017-07-01T21:17:55.766809</ts>
    <user>U0M9CNX1A</user>
    <text>That's what a lens does. it gives you a way to create a function that can update deep inside an immutable structure</text>
  </message>
  <message>
    <ts>2017-07-01T21:21:32.778576</ts>
    <user>U4Z4NEUQG</user>
    <text>I need to pass the lens in the message, I get it</text>
  </message>
  <message>
    <ts>2017-07-01T22:39:20.005066</ts>
    <user>U57KYFW67</user>
    <text>What does the `effect` keyword signify in `effect module`?</text>
  </message>
  <message>
    <ts>2017-07-01T22:52:32.041768</ts>
    <user>U4Z4NEUQG</user>
    <text>got it working:)</text>
  </message>
  <message>
    <ts>2017-07-01T22:52:40.042151</ts>
    <user>U4Z4NEUQG</user>
    <text>I used Monocle</text>
  </message>
  <message>
    <ts>2017-07-01T22:52:56.042851</ts>
    <user>U4Z4NEUQG</user>
    <text>Each select field has it own Lens which I pass in the message</text>
  </message>
  <message>
    <ts>2017-07-01T22:53:15.043691</ts>
    <user>U4Z4NEUQG</user>
    <text>Thanks for suggesting it, I guess 5am is time for bed:)</text>
  </message>
  <message>
    <ts>2017-07-01T23:20:10.121821</ts>
    <user>U57KYFW67</user>
    <text>Are `effect` modules carry over from the older version of elm that used `Signal`s?</text>
  </message>
  <message>
    <ts>2017-07-02T00:21:34.294071</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U57KYFW67&gt; effect modules are called ' effect managers' they're largely used by the core packages to implement things that require complex state management like the websockets package</text>
  </message>
  <message>
    <ts>2017-07-02T00:48:13.361802</ts>
    <user>U57KYFW67</user>
    <text>What semantics does the keyword have?</text>
  </message>
  <message>
    <ts>2017-07-02T01:10:34.421962</ts>
    <user>U601ELFEG</user>
    <text>anyone know an example of drag-n-drop in Elm more complete than the Drag Me demo?</text>
  </message>
  <message>
    <ts>2017-07-02T02:12:20.575709</ts>
    <user>U42FYKFRN</user>
    <text>&lt;@U601ELFEG&gt; have you seen: &lt;https://ellie-app.com/rP5HtD5Mvya1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-02T05:42:17.166482</ts>
    <user>U285A8S8H</user>
    <text>how can I define a `.class &amp;gt; *` rule in elm-css? would it be `typeSelector "*"`?</text>
  </message>
  <message>
    <ts>2017-07-02T05:45:30.175667</ts>
    <user>U285A8S8H</user>
    <text>now, how can I do `*:not(:last-child)`? `* + *` would work as well</text>
  </message>
  <message>
    <ts>2017-07-02T05:45:46.176375</ts>
    <user>U285A8S8H</user>
    <text>I'm completely new to css-in-js, let alone css-in-elm :stuck_out_tongue_winking_eye:</text>
  </message>
  <message>
    <ts>2017-07-02T05:46:53.179496</ts>
    <user>U0J8D9M2P</user>
    <text>there is &lt;#C0HJVT881|elm-css&gt; channel</text>
  </message>
  <message>
    <ts>2017-07-02T06:00:06.217557</ts>
    <user>U4PT7NG4V</user>
    <text>Is there a hamburger-menu package people could recommend? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-02T09:42:15.958871</ts>
    <user>U60SXAF96</user>
    <text>Is there an easy way to defer the execution of a Cmd for a specified period of time?   I've got an interstitial that I'd like to automatically close after X seconds.</text>
  </message>
  <message>
    <ts>2017-07-02T09:42:26.959725</ts>
    <user>U60SXAF96</user>
    <text>(Where "X" is determined by the business and therefore subject to frequent and arbitrary changes.)</text>
  </message>
  <message>
    <ts>2017-07-02T10:02:58.041952</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U60SXAF96&gt;  from what i know, no - once you get a CMD from a function you can only give it to elm - can't do anything with it.

It's only possible to have a task - and you can chain different tasks such that it matches all your conditions. Example - waiting for multiple servers to respond - before you get a response msg back in elm
But in your case - can't you use ports - let js tell you when to close X? 
or if is a time interval you need to wait -&amp;gt; you can use the time library.</text>
  </message>
  <message>
    <ts>2017-07-02T10:13:27.084106</ts>
    <user>U0JFGGZS6</user>
    <text>there's also Process.sleep &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Process#sleep&gt;  which you could chain to the front of your Task before passing it into a Cmd</text>
  </message>
  <message>
    <ts>2017-07-02T10:21:48.116026</ts>
    <user>U2LAL86AY</user>
    <text>ericgj: couple of days ago i asked how to do that multi dimensional chat layout - there was that problem of calculating the height - of boxes containing text - and i wasn't able to do it in elm.

I followed your advice on `ports`- and not `ready/ready states` - and worked out pretty awesome. Just wanted to let you know that your advice was very helpful :smile: I will come back with a gif later today.</text>
  </message>
  <message>
    <ts>2017-07-02T10:32:31.159511</ts>
    <user>U0JFGGZS6</user>
    <text>glad it helped, but I think it was at least partially someone else's idea :wink:  anyway talking it out often helps regardless!</text>
  </message>
  <message>
    <ts>2017-07-02T11:17:28.349036</ts>
    <user>U625M23DE</user>
    <text>i'm working on a single-page app which produces SVG as an output. i'm contemplating how to get compile-time guarantees about reusable chunks of my views, specifically that they have appropriate aspect ratios.</text>
  </message>
  <message>
    <ts>2017-07-02T11:17:52.350565</ts>
    <user>U625M23DE</user>
    <text>so with that in mind, i defined a type like this:</text>
  </message>
  <message>
    <ts>2017-07-02T11:18:38.354005</ts>
    <user>U625M23DE</user>
    <text>```type alias GroupBox ratio msg = { scale: Int, contents: List (Svg msg) }```</text>
  </message>
  <message>
    <ts>2017-07-02T11:18:58.355287</ts>
    <user>U625M23DE</user>
    <text>and use it with a bunch of auxiliary types, like this:</text>
  </message>
  <message>
    <ts>2017-07-02T11:19:56.359464</ts>
    <user>U625M23DE</user>
    <text>```type Ratio11 = Ratio11
type Ratio41 = Ratio41
button41 : String -&amp;gt; GroupBox Ratio41 msg
button41 label = ...```</text>
  </message>
  <message>
    <ts>2017-07-02T11:22:57.372482</ts>
    <user>U625M23DE</user>
    <text>but this induces a large amount of repeating myself, in that `Ratio41` isn't actually tied to the ratio 4:1 anywhere. i considered just defining the `Ratio` type with parameters so that i could extract those parameters, but this would lose the compile-time guarantee that whenever i render a thing the parent and child must agree about the aspect ratio that should be used.</text>
  </message>
  <message>
    <ts>2017-07-02T11:24:19.378326</ts>
    <user>U625M23DE</user>
    <text>so, given that elm doesn't have typeclasses, is there a tidier way to keep the compile-time safety in place?</text>
  </message>
  <message>
    <ts>2017-07-02T11:28:51.398027</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U625M23DE&gt; it looks like phantom types might be helpful here</text>
  </message>
  <message>
    <ts>2017-07-02T11:30:07.403657</ts>
    <user>U1CE9DL9H</user>
    <text>```
type Ratio41 = Ratio41

type alias Element ratio msg = Svg msg

compose : Element ratio msg -&amp;gt; Element ratio msg -&amp;gt; Element ratio msg
```</text>
  </message>
  <message>
    <ts>2017-07-02T11:31:12.408683</ts>
    <user>U1CE9DL9H</user>
    <text>depending on exactly what you want you'll probably have to extend/change that a bit.</text>
  </message>
  <message>
    <ts>2017-07-02T11:31:37.410432</ts>
    <user>U1CE9DL9H</user>
    <text>the trick here is that `Element` takes an extra type variable `ratio` that isn't actually used</text>
  </message>
  <message>
    <ts>2017-07-02T11:32:42.415239</ts>
    <user>U1CE9DL9H</user>
    <text>ah i see now that is what you use</text>
  </message>
  <message>
    <ts>2017-07-02T11:32:56.416139</ts>
    <user>U625M23DE</user>
    <text>that's similar to how i'm doing it now: i have a function which takes a ratio-tagged element and a ratio-tagged parent request for rendering, and renders it. but the problem is that the actual ratio values aren't retrievable:</text>
  </message>
  <message>
    <ts>2017-07-02T11:34:30.422999</ts>
    <user>U625M23DE</user>
    <text>```render : GroupBox ratio msg -&amp;gt; ParentContext ratio -&amp;gt; Int -&amp;gt; Int -&amp;gt; Svg msg
render box pc actualW actualH = ...
render41 : GroupBox Ratio41 msg -&amp;gt; ParentContext Ratio41 -&amp;gt; Svg msg
render41 = render 4 1```</text>
  </message>
  <message>
    <ts>2017-07-02T11:35:26.427401</ts>
    <user>U1CE9DL9H</user>
    <text>but, that is how it will always work, at some point the type has to be converted into a value, and you can't check that for correctness (unless dependent types)</text>
  </message>
  <message>
    <ts>2017-07-02T11:36:36.432241</ts>
    <user>U1CE9DL9H</user>
    <text>actually, ```render : GroupBox ratio msg -&amp;gt; ParentContext ratio -&amp;gt; (ratio -&amp;gt; (Int, Int)) -&amp;gt; Int -&amp;gt; Int -&amp;gt; Svg msg``` would make it slightly nicer</text>
  </message>
  <message>
    <ts>2017-07-02T11:37:14.434750</ts>
    <user>U625M23DE</user>
    <text>if i could write a function like this, i could abstract a lot of the boilerplate away:
```extract : ratio -&amp;gt; (Int, Int)
extract r =
  case r of
    Ratio41 -&amp;gt; (4, 1)
    _ -&amp;gt; Debug.crash("Got request for ratio parameters of non-ratio object " ++ (toString r))```</text>
  </message>
  <message>
    <ts>2017-07-02T11:38:14.438855</ts>
    <user>U1CE9DL9H</user>
    <text>are you familar with the "scrap your typeclasses" approach?</text>
  </message>
  <message>
    <ts>2017-07-02T11:38:44.440821</ts>
    <user>U625M23DE</user>
    <text>vaguely, but i don't see how it applies to this situation.</text>
  </message>
  <message>
    <ts>2017-07-02T11:39:07.442430</ts>
    <user>U625M23DE</user>
    <text>(not saying it doesn't, just haven't played with that enough to see the connection)</text>
  </message>
  <message>
    <ts>2017-07-02T11:39:34.444209</ts>
    <user>U1CE9DL9H</user>
    <text>just to be clear: yes, in comparison to haskell you'll have to write some more stuff.</text>
  </message>
  <message>
    <ts>2017-07-02T11:42:40.457711</ts>
    <user>U1CE9DL9H</user>
    <text>so this is a little nicer 
```
type alias Ratio r = (Int, Int) 


render : Ratio ratio -&amp;gt; GroupBox ratio msg -&amp;gt; ParentContext ratio -&amp;gt; Int -&amp;gt; Int -&amp;gt; Svg msg
render = ... 

ratio41 : Ratio Ratio41
ratio41 = (4,1)

```
but, how many ratios do you want to support, surely there is a limited number that makes sense?</text>
  </message>
  <message>
    <ts>2017-07-02T11:44:21.465222</ts>
    <user>U625M23DE</user>
    <text>oh, that's interesting: extend the phantom-ness of the type to the Ratio type itself, and then you can indeed write the ratio-extracting function i mentioned.</text>
  </message>
  <message>
    <ts>2017-07-02T11:44:35.466332</ts>
    <user>U625M23DE</user>
    <text>yes, there are a finite small number of ratios i care about.</text>
  </message>
  <message>
    <ts>2017-07-02T11:44:46.467057</ts>
    <user>U1CE9DL9H</user>
    <text>there may be something better with extensible records, tinkering atm</text>
  </message>
  <message>
    <ts>2017-07-02T11:52:40.501508</ts>
    <user>U1CE9DL9H</user>
    <text>that's a dead end, so yea I think the above is the best option. it's not great but seems acceptable</text>
  </message>
  <message>
    <ts>2017-07-02T12:15:50.604622</ts>
    <user>U625M23DE</user>
    <text>after digging into this a bit in my actual code, it looks promising but i'm not out the other side yet. thanks for the help, i'll try to post back when i have it figured out.</text>
  </message>
  <message>
    <ts>2017-07-02T13:09:19.844539</ts>
    <user>U60SXAF96</user>
    <text>&lt;@U2LAL86AY&gt;: `Process.sleep` was exactly what I was looking for. Thanks!</text>
  </message>
  <message>
    <ts>2017-07-02T13:56:42.052601</ts>
    <user>U3YDBDP4Z</user>
    <text>What do you name your test modules and functions?</text>
  </message>
  <message>
    <ts>2017-07-02T14:22:34.170117</ts>
    <user>U6269MXK2</user>
    <text>Hi, did someone already experienced this issue when installing Elm trough npm ?</text>
  </message>
  <message>
    <ts>2017-07-02T14:22:37.170312</ts>
    <user>U6269MXK2</user>
    <text>`Error extracting linux-x64.tar.gz - Error: EACCES: permission denied, mkdir '/usr/lib/node_modules/elm/Elm-Platform'`</text>
  </message>
  <message>
    <ts>2017-07-02T14:23:32.174494</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://docs.npmjs.com/getting-started/fixing-npm-permissions#option-2-change-npms-default-directory-to-another-directory&gt;</text>
  </message>
  <message>
    <ts>2017-07-02T14:23:45.175511</ts>
    <user>U3SJEDR96</user>
    <text>`/usr` isn't a very good place to (globally) install user-specific stuff :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-02T14:24:21.178344</ts>
    <user>U6269MXK2</user>
    <text>Ah get it</text>
  </message>
  <message>
    <ts>2017-07-02T14:24:25.178634</ts>
    <user>U6269MXK2</user>
    <text>Thanks a lot !</text>
  </message>
  <message>
    <ts>2017-07-02T14:24:59.181156</ts>
    <user>U0CLDU8UB</user>
    <text>Has npm changed the default recently? This has popped up several times in the past couple of days.</text>
  </message>
  <message>
    <ts>2017-07-02T14:26:58.189914</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, I'm not sure where this is coming from tbh</text>
  </message>
  <message>
    <ts>2017-07-02T14:29:41.201681</ts>
    <user>U0CLDU8UB</user>
    <text>Well actually:
```
› which elm-make 
/usr/bin/elm-make
```</text>
  </message>
  <message>
    <ts>2017-07-02T14:30:37.206686</ts>
    <user>U0CLDU8UB</user>
    <text>I've installed it via npm quite a while ago, so it's not a new location.</text>
  </message>
  <message>
    <ts>2017-07-02T14:33:44.220709</ts>
    <user>U0CLDU8UB</user>
    <text>Though `npm i -g elm` (no sudo) also works on my machine, and:
```
› which elm-make
~/.npm/bin/elm-make
```</text>
  </message>
  <message>
    <ts>2017-07-02T15:09:48.380172</ts>
    <user>U4N4DF3GW</user>
    <text>Have you guys ever wondered why the official style guide says to use 4 spaces indentation, while Elm-core modules are written with 2 spaces indent?</text>
  </message>
  <message>
    <ts>2017-07-02T15:13:37.397140</ts>
    <user>U3SJEDR96</user>
    <text>the core modules haven't been ran through elm-format (yet). This will likely happen once elm-format reaches a 1.0</text>
  </message>
  <message>
    <ts>2017-07-02T16:07:00.635871</ts>
    <user>U3DG1D55J</user>
    <text>Anyone have experience using the elm-tools/parser library? I have what I suspect is a pretty simple question</text>
  </message>
  <message>
    <ts>2017-07-02T16:12:51.661801</ts>
    <user>U1CE9DL9H</user>
    <text>fire away</text>
  </message>
  <message>
    <ts>2017-07-02T16:13:48.665762</ts>
    <user>U3DG1D55J</user>
    <text>So, first an example string that I’d like to parse: `**alphanumerics** (optional thing)`</text>
  </message>
  <message>
    <ts>2017-07-02T16:14:54.670387</ts>
    <user>U3DG1D55J</user>
    <text>So, I’m having the parser ignore the asterisks, keep the value inside the asterisks, and then optionally ignore the parens and keep the value inside them</text>
  </message>
  <message>
    <ts>2017-07-02T16:15:14.671916</ts>
    <user>U3DG1D55J</user>
    <text>The thing I’m having issues with is defining a parser that can have the optional component</text>
  </message>
  <message>
    <ts>2017-07-02T16:16:16.676417</ts>
    <user>U3DG1D55J</user>
    <text>This is how I’m defining the parser `parser: Parser { name: String, optionalPart: Maybe String }`</text>
  </message>
  <message>
    <ts>2017-07-02T16:18:23.685341</ts>
    <user>U1CE9DL9H</user>
    <text>I think the only way is to use `oneOf`, so `oneOf [ Parser.map2 YourTypeAlias parseName  (Parser.map Just parseOptionalPart), Parser.map2 YourTypeAlias parseName (Parser.succeed Nothing) ]`</text>
  </message>
  <message>
    <ts>2017-07-02T16:18:59.687786</ts>
    <user>U1CE9DL9H</user>
    <text>of course you could define some helper functions here</text>
  </message>
  <message>
    <ts>2017-07-02T16:19:00.687817</ts>
    <user>U3DG1D55J</user>
    <text>Ahh, I knew the answer would probably be simple :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-02T16:19:24.689456</ts>
    <user>U3DG1D55J</user>
    <text>Thanks a lot, that should get me moving along again</text>
  </message>
  <message>
    <ts>2017-07-02T16:19:56.691634</ts>
    <user>U1CE9DL9H</user>
    <text>for instance 
```
maybe : Parser a -&amp;gt; Parser (Maybe a)
maybe parser = 
    oneOf [ Parser.map Just parser, Parser.succeed Nothing ] 
```</text>
  </message>
  <message>
    <ts>2017-07-02T16:22:46.703667</ts>
    <user>U17PWHU4D</user>
    <text>Hi all, I'm in a situation where i have to decode a json array that has mixed types.  They're in a predictable pattern.  `[Int, Int, Int, String, Int]`</text>
  </message>
  <message>
    <ts>2017-07-02T16:23:24.706293</ts>
    <user>U17PWHU4D</user>
    <text>But in my limited experience, I create an type alias, and use that with decode pipeline.  however, i have no idea how i'd describe this.</text>
  </message>
  <message>
    <ts>2017-07-02T16:23:45.707805</ts>
    <user>U1CE9DL9H</user>
    <text>you'll have to do this in two phases: decode the array, then decode the items</text>
  </message>
  <message>
    <ts>2017-07-02T16:24:24.710698</ts>
    <user>U1CE9DL9H</user>
    <text>the first phase can use a `Decode.list Decode.value`</text>
  </message>
  <message>
    <ts>2017-07-02T16:24:47.712370</ts>
    <user>U1CE9DL9H</user>
    <text>yes, but you keep the elements as undecoded values</text>
  </message>
  <message>
    <ts>2017-07-02T16:25:19.714958</ts>
    <user>U17PWHU4D</user>
    <text>ah, ok.  going to look at Decode.value right now.  that one is new to me.</text>
  </message>
  <message>
    <ts>2017-07-02T16:25:46.716844</ts>
    <user>U48AEBJQ3</user>
    <text>Since you will be building an Elm data structure out of this, do you know what you want that to look like?</text>
  </message>
  <message>
    <ts>2017-07-02T16:26:17.718955</ts>
    <user>U17PWHU4D</user>
    <text>i would love to!</text>
  </message>
  <message>
    <ts>2017-07-02T16:26:42.720551</ts>
    <user>U1CE9DL9H</user>
    <text>I assume a record with 5 fields of the correct type?</text>
  </message>
  <message>
    <ts>2017-07-02T16:27:04.721966</ts>
    <user>U17PWHU4D</user>
    <text>close, i was going to tuple with the string, then list int.</text>
  </message>
  <message>
    <ts>2017-07-02T16:27:12.722403</ts>
    <user>U17PWHU4D</user>
    <text>but the result will be the same either way.</text>
  </message>
  <message>
    <ts>2017-07-02T16:27:38.724195</ts>
    <user>U48AEBJQ3</user>
    <text>You should avoid using a `List` when you want things to be a specific length.</text>
  </message>
  <message>
    <ts>2017-07-02T16:27:53.725265</ts>
    <user>U17PWHU4D</user>
    <text>ok, `Array` better?</text>
  </message>
  <message>
    <ts>2017-07-02T16:28:06.726044</ts>
    <user>U1CE9DL9H</user>
    <text>anyway, you should be able to define something like 
```
f : List Value -&amp;gt; Decoder MyTypeAlias
f list = 
    case list of 
        [ a,b,c,d,e ] -&amp;gt; 
            Decode.map5 MyTypeAlias 
                (&lt;http://Decode.int|Decode.int&gt; a)
                (&lt;http://Decode.int|Decode.int&gt; b)
                (&lt;http://Decode.int|Decode.int&gt; c)
                (Decode.string d)
                (&lt;http://Decode.int|Decode.int&gt; e)
        _ -&amp;gt; Decode.fail "shape of the list is invalid"
```</text>
  </message>
  <message>
    <ts>2017-07-02T16:28:23.727157</ts>
    <user>U48AEBJQ3</user>
    <text>It sorta depends? If the Ints are all interchangeable, a list would be... alright, I guess?</text>
  </message>
  <message>
    <ts>2017-07-02T16:29:16.730797</ts>
    <user>U1CE9DL9H</user>
    <text>then the full decoder becomes `Decode.list Decode.value |&amp;gt; Decode.andThen f`</text>
  </message>
  <message>
    <ts>2017-07-02T16:29:29.731585</ts>
    <user>U3SQ42JJW</user>
    <text>Anyone any experience with using Chris Jenkins RemoteData with a custom post request? I can’t figure it out … :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-02T16:31:17.739659</ts>
    <user>U48AEBJQ3</user>
    <text>That might be simpler as
```
f list =
    Decode.map5 MyTypeAlias
        (Decode.index 0 &lt;http://Decode.int|Decode.int&gt;)
        (Decode.index 1 &lt;http://Decode.int|Decode.int&gt;)
        (Decode.index 2 &lt;http://Decode.int|Decode.int&gt;)
        (Decode.index 3 Decode.string)
        (Decode.index 4 &lt;http://Decode.int|Decode.int&gt;)
```</text>
  </message>
  <message>
    <ts>2017-07-02T16:31:20.739937</ts>
    <user>U3SQ42JJW</user>
    <text>There is this example in the docs 
````

getNews : Cmd Msg
getNews =
    Http.get "/news" decodeNews
        |&amp;gt; RemoteData.sendRequest
        |&amp;gt; Cmd.map NewsResponse
````</text>
  </message>
  <message>
    <ts>2017-07-02T16:32:03.742726</ts>
    <user>U17PWHU4D</user>
    <text>ok, i think i get what you're both saying here.  this is a ton of good stuff for me to look through and figure out.  didn't realize about value, or mapping through.</text>
  </message>
  <message>
    <ts>2017-07-02T16:32:18.743766</ts>
    <user>U17PWHU4D</user>
    <text>Thanks so much &lt;@U48AEBJQ3&gt; and &lt;@U1CE9DL9H&gt; !!</text>
  </message>
  <message>
    <ts>2017-07-02T16:33:22.748273</ts>
    <user>U3SQ42JJW</user>
    <text>So I need something that responds with an Http Request msg
And just use RemoteData.sendRequest with it…. 
But what makes this Cmd.map and where do I put my msg ?</text>
  </message>
  <message>
    <ts>2017-07-02T16:34:35.753215</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U3SQ42JJW&gt; Ignoring remoteData for a moment, are you able to make your `Http.Request a`?</text>
  </message>
  <message>
    <ts>2017-07-02T16:35:36.757510</ts>
    <user>U3SQ42JJW</user>
    <text>yes - thats my function
```
requestToken : String -&amp;gt; String -&amp;gt; Http.Request State.ValidationResponseType
requestToken password endpoint =
    let
        decoder : JD.Decoder State.ValidationResponseType
        decoder =
            JD.map State.ValidationResponseType
                (JD.field "token" JD.string)

        json =
            JE.object
                [ ( "password", JE.string password ) ]
                |&amp;gt; JE.encode 0
                |&amp;gt; Http.stringBody "application/json"
    in
        Core.Helpers.Utils.customPostRequest
            (endpoint ++ "/api/getPollToken")
            []
            json
            decoder
```</text>
  </message>
  <message>
    <ts>2017-07-02T16:36:21.760619</ts>
    <user>U3SQ42JJW</user>
    <text>Works fine when using it with Http.send</text>
  </message>
  <message>
    <ts>2017-07-02T16:36:31.761298</ts>
    <user>U48AEBJQ3</user>
    <text>So, you pass that to `RemoteData.sendRequest` which gives you a `Cmd (WebData State.ValidationResponseType)`</text>
  </message>
  <message>
    <ts>2017-07-02T16:37:51.766572</ts>
    <user>U3SQ42JJW</user>
    <text>yes, like this 
```
RD.sendRequest &amp;lt;| (requestToken string apiEndpoint)
```</text>
  </message>
  <message>
    <ts>2017-07-02T16:38:24.769106</ts>
    <user>U48AEBJQ3</user>
    <text>Then you need a
```
type Msg
    = &amp;lt;your existing messages...&amp;gt;
    | ReceiveResponse (WebData State.ValidationResponseType)
```

so you can go `Cmd.map ReceiveResponse _____`</text>
  </message>
  <message>
    <ts>2017-07-02T16:39:25.773283</ts>
    <user>U48AEBJQ3</user>
    <text>The name of that constructor can be anything. Naming things is difficult.</text>
  </message>
  <message>
    <ts>2017-07-02T16:49:41.815905</ts>
    <user>U3SQ42JJW</user>
    <text>&lt;@U48AEBJQ3&gt; Wooohoooo :smile: Thank. Works now. I had defined my response message as ReceiveResponse (RemoteData State.ValidateionResponseType) instead of WebData … uh… what a bad mistake :wink:</text>
  </message>
  <message>
    <ts>2017-07-02T16:50:52.821092</ts>
    <user>U3SQ42JJW</user>
    <text>If you hadnt written down the msg type, i would have overseen this totally :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-02T17:20:21.944027</ts>
    <user>U3SQ42JJW</user>
    <text>(But  I still did not get why I use Cmd.map here…. hmmm)</text>
  </message>
  <message>
    <ts>2017-07-02T17:30:18.984644</ts>
    <user>U5MEJDV34</user>
    <text>Just created a new Atom package that lets you run Elm Tests on Save and show the result in the Linter window. Might still be unstable so feedback is very welcome: &lt;https://atom.io/packages/atom-elm-test&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T04:47:44.072458</ts>
    <user>U0H3A9XLN</user>
    <text>Let’s say I have a union type which represent tabs: `type Tab = TabOne | TabTwo`. Then in my view code I do render them. Is there a way to ensure that once I add a new tab I won’t forget to add view piece for it?</text>
  </message>
  <message>
    <ts>2017-07-03T04:52:17.173876</ts>
    <user>U41NK9BM4</user>
    <text>If you use a case/of Elm will complain it misses the new one.</text>
  </message>
  <message>
    <ts>2017-07-03T04:55:36.247764</ts>
    <user>U1P6FFJ64</user>
    <text>Yep, and be sure not to use `_ -&amp;gt;` in your case/of :smile:</text>
  </message>
  <message>
    <ts>2017-07-03T04:56:10.260557</ts>
    <user>U41NK9BM4</user>
    <text>AKA: the lazy coder :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T05:04:29.452420</ts>
    <user>U2CUK7KQA</user>
    <text>Does anybody have experience with debugging while using `elm-style-animation`? The large amount of Messages sent by `requestAnimationFrame` is making this basically impossible :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-03T05:06:54.506784</ts>
    <user>U41NK9BM4</user>
    <text>When doing games, animation etc. debugging is difficult. However, I believe the next *release* will bring message grouping in the debugger</text>
  </message>
  <message>
    <ts>2017-07-03T05:07:39.523185</ts>
    <user>U2CUK7KQA</user>
    <text>Awesome. For now I'm thinking about just disabling animations when debugging</text>
  </message>
  <message>
    <ts>2017-07-03T05:40:54.257267</ts>
    <user>U0H3A9XLN</user>
    <text>&lt;@U41NK9BM4&gt; how `case .. of` is applicable here exactly?</text>
  </message>
  <message>
    <ts>2017-07-03T05:42:38.293819</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0H3A9XLN&gt; if you're working with a list of them, it's not. Tagged union types aren't enumerable so you can't really have the compiler ensure that _all_ tags appear in some given list</text>
  </message>
  <message>
    <ts>2017-07-03T05:43:16.307350</ts>
    <user>U41NK9BM4</user>
    <text>Also. 
```
renderTab model tab =
    case tab of 
        TabOne -&amp;gt; 
            renderOne model
        TabTwo -&amp;gt; 
            renderTwo model            
```</text>
  </message>
  <message>
    <ts>2017-07-03T05:43:19.308223</ts>
    <user>U0H3A9XLN</user>
    <text>hm, is there some way to do it differently then?</text>
  </message>
  <message>
    <ts>2017-07-03T05:44:01.323184</ts>
    <user>U0H3A9XLN</user>
    <text>&lt;@U41NK9BM4&gt; that is not what I was asking for</text>
  </message>
  <message>
    <ts>2017-07-03T05:44:45.338983</ts>
    <user>U3SJEDR96</user>
    <text>I suppose "adding a new tab" in your original question could mean either "add a new tag to my tab type" or "add a new instance of type Tab to some list"</text>
  </message>
  <message>
    <ts>2017-07-03T05:44:58.343654</ts>
    <user>U41NK9BM4</user>
    <text>I as looking at your `type Tab = TabOne | TabTwo` above</text>
  </message>
  <message>
    <ts>2017-07-03T05:46:03.367065</ts>
    <user>U41NK9BM4</user>
    <text>So if you add `TabThree` Elm will complain. This is the meaning I was extracting from your example :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T05:47:16.392583</ts>
    <user>U41NK9BM4</user>
    <text>It seems your tabs are a closed set so it makes sense to use a union type.</text>
  </message>
  <message>
    <ts>2017-07-03T05:47:40.400980</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0H3A9XLN&gt; can you point out which part you feel like you might forget?</text>
  </message>
  <message>
    <ts>2017-07-03T05:48:40.422485</ts>
    <user>U0H3A9XLN</user>
    <text>&lt;@U3SJEDR96&gt; I guess I am more afraid about “add new instance of type Tab to some list”</text>
  </message>
  <message>
    <ts>2017-07-03T05:50:35.463882</ts>
    <user>U41NK9BM4</user>
    <text>So you are modeling a row of tabs like in a browser, maybe?</text>
  </message>
  <message>
    <ts>2017-07-03T06:03:14.740318</ts>
    <user>U3SJEDR96</user>
    <text>so basically, you're afraid that when you add a new entry to your `type Tab`, you won't add it to your list of possible tabs, right?.. Hm, I'm not sure if there is a very clean "compiler will make sure you have all option in there" solution, though that also means that you can easily disable tabs by removing them from the list without removing the supporting code; so it has advantages, too. Then again, it's likely to be very clear what you forgot when you see a page missing a tab :wink:</text>
  </message>
  <message>
    <ts>2017-07-03T06:08:37.851680</ts>
    <user>U0H3A9XLN</user>
    <text>Yeah, that’s true. Unfortunately in my case I have many pages which are dependant on these “tabs”. I can’t really tell the exact thing because it’s under NDA. So if I add one more “tab” I need to go and make subsequent changes to a lot of different parts of my application. That’s why I am so keen to delegate search for these places to compiler.</text>
  </message>
  <message>
    <ts>2017-07-03T06:27:42.217326</ts>
    <user>U2JA29EKF</user>
    <text>do you always use all the tabs? if you do, can you just define an `allTabs = [Tab1, Tab2]` and then,  you only have one place you need to keep updated</text>
  </message>
  <message>
    <ts>2017-07-03T06:30:34.271137</ts>
    <user>U3SJEDR96</user>
    <text>actually, even if you don't, you could make an exhaustive list, and loop through them in your view with some sort of `List.filter shouldUseTabForView tabs` function. If you make sure to use exhaustive matches in those `shouldUseTabForView` functions, you only need to update the one "masterlist" and the compiler will make sure you add cases to those filters</text>
  </message>
  <message>
    <ts>2017-07-03T06:31:45.292577</ts>
    <user>U0H3A9XLN</user>
    <text>ok, thanks!</text>
  </message>
  <message>
    <ts>2017-07-03T06:33:32.325356</ts>
    <user>U0CLDU8UB</user>
    <text>So nice to see real world friends get answers here :heart_eyes_cat:</text>
  </message>
  <message>
    <ts>2017-07-03T06:43:19.497532</ts>
    <user>U3R7CKQRX</user>
    <text>I have attached a scroll handler in Elm, which triggers a port. Now I found out that the commands are only being sent when the scrolling stops (in a batch). I kinda need the scroll events to happen synconously to update other stuff. Does anyone know why this happens and if there is a way around that?</text>
  </message>
  <message>
    <ts>2017-07-03T06:46:15.547756</ts>
    <user>U1CE9DL9H</user>
    <text>I think it has something to do with animation frames, but not quite sure how it would work for you</text>
  </message>
  <message>
    <ts>2017-07-03T06:46:46.556658</ts>
    <user>U0CLDU8UB</user>
    <text>Are you testing on an Apple OS?</text>
  </message>
  <message>
    <ts>2017-07-03T06:47:44.573612</ts>
    <user>U0CLDU8UB</user>
    <text>Scroll events are tricky, and especially Apple seems to want delay sending them until the last possible moment.</text>
  </message>
  <message>
    <ts>2017-07-03T06:50:02.613992</ts>
    <user>U0CLDU8UB</user>
    <text>(this is because if you naïvely listen for scroll events, it very likely becomes a performance bottleneck and Apple wants to enforce smooth scrolling rather than trust web developers)</text>
  </message>
  <message>
    <ts>2017-07-03T07:06:59.921230</ts>
    <user>U1P6FFJ64</user>
    <text>When working on a team, has anyone found a way to enforce the version of elm-format being used? We are a small team (3 people) but each of us is currently using a different version, causing a lot of changes that are just reformatting things back and forth</text>
  </message>
  <message>
    <ts>2017-07-03T07:07:48.935704</ts>
    <user>U3SJEDR96</user>
    <text>One option is to "enforce" it through a combination of `package.json` and pre-commit hooks... Another is good communication :wink:</text>
  </message>
  <message>
    <ts>2017-07-03T07:11:38.002406</ts>
    <user>U1P6FFJ64</user>
    <text>Well, package.json and pre-commit hooks will require more job, as we use elm-format on our IDEs / editors. Communication is what we use when a new version appears. Still, I think is better to automate things, right?</text>
  </message>
  <message>
    <ts>2017-07-03T07:12:11.011333</ts>
    <user>U1P6FFJ64</user>
    <text>Seems like the solution we are adopting is adding an Elm format check on CI</text>
  </message>
  <message>
    <ts>2017-07-03T07:13:46.037836</ts>
    <user>U1KES8JGK</user>
    <text>we do that (run `elm-format` on CI) :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T07:13:47.038326</ts>
    <user>U1KES8JGK</user>
    <text>`yarn run elm-format -- --validate src/ tests/`</text>
  </message>
  <message>
    <ts>2017-07-03T07:23:36.206180</ts>
    <user>U3SJEDR96</user>
    <text>Or you can do a post-receive hook on the server to check that code adheres to the correct elm-format version</text>
  </message>
  <message>
    <ts>2017-07-03T07:23:52.210806</ts>
    <user>U3SJEDR96</user>
    <text>so a `git push` can be "denied"</text>
  </message>
  <message>
    <ts>2017-07-03T07:31:54.350409</ts>
    <user>U17R26VR8</user>
    <text>&amp;gt; team (3 people)
&amp;gt; enforce the version of elm-format

sounds like you’ve got bigger problems…</text>
  </message>
  <message>
    <ts>2017-07-03T08:07:15.962431</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U0CLDU8UB&gt; yeah I am developing on a mac. So do you know if there is a way around that? And are you basically saying this isn't Elm's fault but the OS's?</text>
  </message>
  <message>
    <ts>2017-07-03T08:11:50.047940</ts>
    <user>U0CLDU8UB</user>
    <text>It is possible that the browser simply isn't sending the events. Try `document.body.addEventListener('scroll', ev =&amp;gt; console.log("now"))` and see how often that gets triggered</text>
  </message>
  <message>
    <ts>2017-07-03T08:14:16.093649</ts>
    <user>U3R7CKQRX</user>
    <text>I did that, I clear the console =&amp;gt; no events. I scroll =&amp;gt; still no events. I stop scrolling =&amp;gt; now all the events arrive on the console.</text>
  </message>
  <message>
    <ts>2017-07-03T08:15:02.107967</ts>
    <user>U0CLDU8UB</user>
    <text>Then I'm afraid there's very little we can help with. :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-03T08:15:31.117586</ts>
    <user>U3SJEDR96</user>
    <text>then it's just the browser. Weird, I thought it only did that on IOS</text>
  </message>
  <message>
    <ts>2017-07-03T08:15:39.120013</ts>
    <user>U3R7CKQRX</user>
    <text>Then I guess this a problem that everybody is facing right? Elm or not.</text>
  </message>
  <message>
    <ts>2017-07-03T08:16:03.127310</ts>
    <user>U0CLDU8UB</user>
    <text>That's right. I suppose googling for stackoverflow answers for workarounds might yield something.</text>
  </message>
  <message>
    <ts>2017-07-03T08:16:11.129761</ts>
    <user>U2W22AHNU</user>
    <text>&lt;@U3R7CKQRX&gt; not sure about your usecase of course but CSS might be able to help you positioning stuff in the right place while scrolling.</text>
  </message>
  <message>
    <ts>2017-07-03T08:17:26.153572</ts>
    <user>U0CLDU8UB</user>
    <text>Yeah, `position: sticky` also exists, even though its browser support is not that great.</text>
  </message>
  <message>
    <ts>2017-07-03T08:17:31.154975</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U2W22AHNU&gt; I don't really need to position things rather update some content as you scroll.</text>
  </message>
  <message>
    <ts>2017-07-03T08:17:50.161203</ts>
    <user>U3R7CKQRX</user>
    <text>Anyway thank you for the help everyone.</text>
  </message>
  <message>
    <ts>2017-07-03T08:18:02.164984</ts>
    <user>U3R7CKQRX</user>
    <text>I am just happy this isn't caused by Elm :smile:</text>
  </message>
  <message>
    <ts>2017-07-03T08:37:26.552637</ts>
    <user>U2W22AHNU</user>
    <text>&lt;@U3R7CKQRX&gt; Just thought of something, what I do in an other case is to have a loop and requestAnimationFrame
```
function loop() {
    _scrollOffset = window.pageYOffset || window.scrollTop;


    requestAnimationFrame(loop);
}
loop();
```</text>
  </message>
  <message>
    <ts>2017-07-03T08:37:58.563508</ts>
    <user>U2W22AHNU</user>
    <text>This works well for me in showing and hiding elements based on scroll position.</text>
  </message>
  <message>
    <ts>2017-07-03T08:38:45.579793</ts>
    <user>U2W22AHNU</user>
    <text>I develop on a Mac and I can't remember seeing the issue you mentioned</text>
  </message>
  <message>
    <ts>2017-07-03T08:44:58.708160</ts>
    <user>U2W22AHNU</user>
    <text>&lt;@U3R7CKQRX&gt; run this: ```var loop = function() {var s = window.pageYOffset || window.scrollTop; console.log(s); requestAnimationFrame(loop);} ``` and then call ```loop();``` in your console and start scrolling</text>
  </message>
  <message>
    <ts>2017-07-03T08:45:42.723718</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U17R26VR8&gt; what do you think we have bigger problems?</text>
  </message>
  <message>
    <ts>2017-07-03T08:53:15.891560</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U1P6FFJ64&gt; I’m not mordraw, but I would ask about the term “enforce” which feels like there might be communication issues amongst the 3 people. Do you mean “force” or just “check” ? On my team (also 3), when we upgrade like that, we’ll all chat and do it together.</text>
  </message>
  <message>
    <ts>2017-07-03T08:53:33.898507</ts>
    <user>U0FP80EKB</user>
    <text>Especially the first time we notice that in a PR. We’ll say “hey, did someone upgrade their elm-format” and then we’ll all do it.</text>
  </message>
  <message>
    <ts>2017-07-03T08:53:49.904485</ts>
    <user>U1P6FFJ64</user>
    <text>Oh, sorry if that's the case. English is not my native language.</text>
  </message>
  <message>
    <ts>2017-07-03T08:54:05.910653</ts>
    <user>U0FP80EKB</user>
    <text>No worries. “enforce” can mean a lot of different things.</text>
  </message>
  <message>
    <ts>2017-07-03T08:54:17.915138</ts>
    <user>U0FP80EKB</user>
    <text>It isn’t the wrong word, but can be misunderstood. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T08:54:31.920503</ts>
    <user>U0FP80EKB</user>
    <text>Is the question just how to make sure everyone is on the same version?</text>
  </message>
  <message>
    <ts>2017-07-03T08:54:32.920796</ts>
    <user>U3SJEDR96</user>
    <text>Mafia "enforcers" come to mind :smile:</text>
  </message>
  <message>
    <ts>2017-07-03T08:55:06.933356</ts>
    <user>U1P6FFJ64</user>
    <text>This is an issue that has happen maybe twice in all the time we have being developing. Is not a big problem, just something that I think it could be automated.</text>
  </message>
  <message>
    <ts>2017-07-03T08:55:18.938049</ts>
    <user>U0FP80EKB</user>
    <text>Perhaps a check in a git hook?</text>
  </message>
  <message>
    <ts>2017-07-03T08:55:30.942645</ts>
    <user>U0FP80EKB</user>
    <text>some custom script that validates the elm-format version?</text>
  </message>
  <message>
    <ts>2017-07-03T08:55:52.950944</ts>
    <user>U1P6FFJ64</user>
    <text>That's what we will do, add a elm format check on the CI to block PRs that are not using the last elm-format</text>
  </message>
  <message>
    <ts>2017-07-03T08:56:06.956450</ts>
    <user>U0FP80EKB</user>
    <text>I don’t know much about the npm stuff, though, so I’m probably not the best to answer it. I don’t think there is anything about the general environment contained in the project-specific files.</text>
  </message>
  <message>
    <ts>2017-07-03T08:56:54.975007</ts>
    <user>U0FP80EKB</user>
    <text>I’d ask back whether this is worth the time to do the check and block, as opposed to just communication on the team saying “hey, I upgraded to the latest elm-format, everyone else should”</text>
  </message>
  <message>
    <ts>2017-07-03T08:57:05.978899</ts>
    <user>U0FP80EKB</user>
    <text>But, depends on how cumbersome putting the CI check in there is.</text>
  </message>
  <message>
    <ts>2017-07-03T08:57:30.988511</ts>
    <user>U3U2EA14G</user>
    <text>Hi all, anyone can help me with this bug ?
```
Uncaught TypeError: Cannot read property 'elm_handlers' of undefined
    at applyEvents (app.js:16186)
    at applyFacts (app.js:16149)
    at applyPatch (app.js:17021)
    at applyPatchesHelp (app.js:17004)
    at applyPatches (app.js:16995)
    at updateIfNeeded (app.js:17334)
```</text>
  </message>
  <message>
    <ts>2017-07-03T08:57:46.994826</ts>
    <user>U17R26VR8</user>
    <text>I wouldn’t bother with a check, just when you make your PR, looking at the diffs, it’ll be obvious if elm-format’s different. So the person doing the PR can ask the other two, hey, what version of elm-format should we be on.
Problem solved.</text>
  </message>
  <message>
    <ts>2017-07-03T08:57:47.995321</ts>
    <user>U1P6FFJ64</user>
    <text>Well, the CI check will fix this issue in my project but also in the rest of the projects of the company</text>
  </message>
  <message>
    <ts>2017-07-03T08:58:36.014365</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U17R26VR8&gt; that's what we currently do. My question was: is there a better way to do it?</text>
  </message>
  <message>
    <ts>2017-07-03T08:58:43.017158</ts>
    <user>U0FP80EKB</user>
    <text>If there is cross-team thing, then communication can definitely falter a bit due to siloing. Having a check in that case to have a company-wide standard isn’t too bad.</text>
  </message>
  <message>
    <ts>2017-07-03T08:59:13.028765</ts>
    <user>U1P6FFJ64</user>
    <text>no, there is no cross-team. Just different teams doing entirely different projects.</text>
  </message>
  <message>
    <ts>2017-07-03T08:59:26.033895</ts>
    <user>U0FP80EKB</user>
    <text>yeah, that can cause a hangup :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T08:59:28.034693</ts>
    <user>U17R26VR8</user>
    <text>&lt;@U3U2EA14G&gt; where are you seeing this error? i haven’t seen anything like that before… looks like you are getting a runtime issue?</text>
  </message>
  <message>
    <ts>2017-07-03T08:59:44.040951</ts>
    <user>U0FP80EKB</user>
    <text>One thing you could do is actually run the latest elm-format on your CI as part of the build step on a branch.</text>
  </message>
  <message>
    <ts>2017-07-03T08:59:57.046128</ts>
    <user>U0FP80EKB</user>
    <text>Or part of the merge task</text>
  </message>
  <message>
    <ts>2017-07-03T09:00:06.051175</ts>
    <user>U0FP80EKB</user>
    <text>So, `master` is always formatted with the latest version.</text>
  </message>
  <message>
    <ts>2017-07-03T09:00:17.056845</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U3U2EA14G&gt; is there anything touching the DOM that elm works on _other than Elm_?</text>
  </message>
  <message>
    <ts>2017-07-03T09:00:34.064471</ts>
    <user>U17R26VR8</user>
    <text>i might not be understanding the core issue, i think, if this happens 1-2 times a year and takes a few minutes to sort out, then why invest more time/energy into it?</text>
  </message>
  <message>
    <ts>2017-07-03T09:00:58.074394</ts>
    <user>U1P6FFJ64</user>
    <text>Well, we are doing just a check to block the PR, so the person who pushed the branch will notice the version is outdated and will need an update.</text>
  </message>
  <message>
    <ts>2017-07-03T09:02:02.100188</ts>
    <user>U17R26VR8</user>
    <text>but that person, should already notice if their PR is huge, as is typical of a elm-format change and not push the PR…</text>
  </message>
  <message>
    <ts>2017-07-03T09:03:19.131616</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U17R26VR8&gt; we are a distributed team. It might take hours or sometimes a couple days to get to all the people in the team. I was asking to see if there was already a solution for this in the community. I was not planning to invest a lot of time to do it.</text>
  </message>
  <message>
    <ts>2017-07-03T09:05:00.171503</ts>
    <user>U3SJEDR96</user>
    <text>So yeah, basically you'll want something that involves the --validate flag of elm-format :)</text>
  </message>
  <message>
    <ts>2017-07-03T09:05:31.184640</ts>
    <user>U1P6FFJ64</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-07-03T09:07:10.223988</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U2W22AHNU&gt; cool, I will try it out</text>
  </message>
  <message>
    <ts>2017-07-03T09:10:06.293516</ts>
    <user>U28L0BHN1</user>
    <text>Is there a consensus on the way of representing a list with one of the item selected? `List (Bool, Item)`, adding a `selected` field to the item, another field in the model...?</text>
  </message>
  <message>
    <ts>2017-07-03T09:11:18.322709</ts>
    <user>U28L0BHN1</user>
    <text>I can't use a non empty list because my list can be empty :confused:</text>
  </message>
  <message>
    <ts>2017-07-03T09:13:22.371537</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U28L0BHN1&gt; I think it depends of each case, I don't think there is a generic solution for it. We sometimes do `{ selected = Item, list = List Item }`.</text>
  </message>
  <message>
    <ts>2017-07-03T09:14:50.405523</ts>
    <user>U3SJEDR96</user>
    <text>You could have a zipper with a `Maybe` for the "current", but it depends on what you need to do with it. In any case, trying to make impossible states impossible to represent is a good idea. So, what is your use-case?</text>
  </message>
  <message>
    <ts>2017-07-03T09:15:48.429163</ts>
    <user>U28L0BHN1</user>
    <text>I load a list of Item where you need to select one to go the next step</text>
  </message>
  <message>
    <ts>2017-07-03T09:16:00.434377</ts>
    <user>U28L0BHN1</user>
    <text>nothing fancy</text>
  </message>
  <message>
    <ts>2017-07-03T09:16:55.456434</ts>
    <user>U28L0BHN1</user>
    <text>(but saying it... it should be something else than an empty list when it's not loaded ^^')</text>
  </message>
  <message>
    <ts>2017-07-03T09:19:11.511459</ts>
    <user>U3R7CKQRX</user>
    <text>Ahh help I am getting an Elm runtime error (not in production), with the following error message.</text>
  </message>
  <message>
    <ts>2017-07-03T09:19:51.527545</ts>
    <user>U3R7CKQRX</user>
    <text>It 's triggered somewhere in this function withing the compiled Elm code `function onEffects(router, cmdList, state)`</text>
  </message>
  <message>
    <ts>2017-07-03T09:20:21.540049</ts>
    <user>U3R7CKQRX</user>
    <text>I was setting up some ports when it happended but I can't really pinpoint what the cause is.</text>
  </message>
  <message>
    <ts>2017-07-03T09:20:42.548625</ts>
    <user>U3R7CKQRX</user>
    <text>Has anybody seen this before?</text>
  </message>
  <message>
    <ts>2017-07-03T09:21:20.563989</ts>
    <user>U3R7CKQRX</user>
    <text>when I debugged I saw that the `currentSubs` array looks like this `[undefined]`</text>
  </message>
  <message>
    <ts>2017-07-03T09:21:36.570119</ts>
    <user>U3R7CKQRX</user>
    <text>thus it fails on this line `currentSubs[i](value);`</text>
  </message>
  <message>
    <ts>2017-07-03T09:21:55.578152</ts>
    <user>U3R7CKQRX</user>
    <text>with you guessed it `undefined is not a function`</text>
  </message>
  <message>
    <ts>2017-07-03T09:21:57.578964</ts>
    <user>U3R7CKQRX</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T09:21:58.579159</ts>
    <user>U3SJEDR96</user>
    <text>Hm, Hot module reloading + changing subscriptions or something?</text>
  </message>
  <message>
    <ts>2017-07-03T09:22:52.601413</ts>
    <user>U3R7CKQRX</user>
    <text>my subscriptions are basically static</text>
  </message>
  <message>
    <ts>2017-07-03T09:22:52.601445</ts>
    <user>U3SJEDR96</user>
    <text>Basically it's attempting to trigger a subscription that isn't there. Do you have code to reproduce anywhere? Does it work on a "clean" compile?</text>
  </message>
  <message>
    <ts>2017-07-03T09:22:56.603047</ts>
    <user>U3R7CKQRX</user>
    <text>```
subscriptions : Model -&amp;gt; Sub Msg
subscriptions model =
    Sub.batch
        [ updateCurrentDate UpdateCurrentDate
        , updateAppointments UpdateAppointments
        ]
```</text>
  </message>
  <message>
    <ts>2017-07-03T09:23:37.620332</ts>
    <user>U3R7CKQRX</user>
    <text>it still fails on a clean compile</text>
  </message>
  <message>
    <ts>2017-07-03T09:24:13.635497</ts>
    <user>U3SJEDR96</user>
    <text>You don't have any custom effect modules, right?</text>
  </message>
  <message>
    <ts>2017-07-03T09:50:46.316297</ts>
    <user>U2DSBB76Y</user>
    <text>david_hernandez: Maybe installing a  version in `yarn.lock` and have the team configure their editors to use `node_modules/.bin/elm-format` could be one solution?</text>
  </message>
  <message>
    <ts>2017-07-03T09:51:18.330398</ts>
    <user>U2DSBB76Y</user>
    <text>I guess that doesn’t ‘enforce’ though.. :smile:</text>
  </message>
  <message>
    <ts>2017-07-03T09:52:20.357900</ts>
    <user>U1P6FFJ64</user>
    <text>That could be a solution. But there is a problem if anyone is working in two different projects. But don't worry, we found a different solution: a elm format check on the CI to block PRs that don't follow the formatting of the last version of elm format</text>
  </message>
  <message>
    <ts>2017-07-03T10:23:10.203115</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U3SJEDR96&gt; no I don't have any custom effects</text>
  </message>
  <message>
    <ts>2017-07-03T10:23:23.208969</ts>
    <user>U3R7CKQRX</user>
    <text>(don't even know how to do that :slightly_smiling_face: )</text>
  </message>
  <message>
    <ts>2017-07-03T10:23:34.213961</ts>
    <user>U3SJEDR96</user>
    <text>alright. Curious. I don't suppose that code is available somewhere by any chance?</text>
  </message>
  <message>
    <ts>2017-07-03T10:23:55.223473</ts>
    <user>U3R7CKQRX</user>
    <text>not really sorry this is work stuff</text>
  </message>
  <message>
    <ts>2017-07-03T10:27:53.334071</ts>
    <user>U3SJEDR96</user>
    <text>Right. Does it work if you comment out the subscriptions? Does it work with only one? If so, can we pinpoint which one?</text>
  </message>
  <message>
    <ts>2017-07-03T10:28:12.342214</ts>
    <user>U3R7CKQRX</user>
    <text>let me check</text>
  </message>
  <message>
    <ts>2017-07-03T10:28:31.351460</ts>
    <user>U3R7CKQRX</user>
    <text>so it's def not hot releading I commented that out</text>
  </message>
  <message>
    <ts>2017-07-03T10:29:41.382469</ts>
    <user>U3R7CKQRX</user>
    <text>and amazingly the error still occurs with a Sub.none</text>
  </message>
  <message>
    <ts>2017-07-03T10:29:46.384597</ts>
    <user>U3R7CKQRX</user>
    <text>weird</text>
  </message>
  <message>
    <ts>2017-07-03T10:30:07.394491</ts>
    <user>U3R7CKQRX</user>
    <text>but I kind of have the feeling that it's more related to a port going into JS</text>
  </message>
  <message>
    <ts>2017-07-03T10:32:59.474288</ts>
    <user>U41NK9BM4</user>
    <text>&lt;@U1N4KAHT6&gt; Quick comparison between elm-visualization and elm-plot? It would help to have it, if possible.</text>
  </message>
  <message>
    <ts>2017-07-03T10:35:25.542533</ts>
    <user>U41NK9BM4</user>
    <text>That is… Is the approach fundamentally different from Elm-plot?</text>
  </message>
  <message>
    <ts>2017-07-03T10:39:44.660758</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U3R7CKQRX&gt; ah, reproduced it. It's a JS side thing, indeed - subscribing `undefined` to a port triggers that. &lt;https://ellie-app.com/3DW84DP65tBa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T10:40:36.684339</ts>
    <user>U3SJEDR96</user>
    <text>or even just `app.ports.foo.subscribe()`</text>
  </message>
  <message>
    <ts>2017-07-03T10:47:45.879910</ts>
    <user>U3R7CKQRX</user>
    <text>oh wow &lt;@U3SJEDR96&gt; thanks</text>
  </message>
  <message>
    <ts>2017-07-03T10:48:01.887461</ts>
    <user>U3R7CKQRX</user>
    <text>that fixes it</text>
  </message>
  <message>
    <ts>2017-07-03T10:48:50.910215</ts>
    <user>U4PT7NG4V</user>
    <text>Afternoon Elmians
Anyone got any suggestion on how to track whether the current browser tab is the active one? I believe checking window.blur/focus is a common way in JS land. But in Elm..? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T10:48:51.910513</ts>
    <user>U3R7CKQRX</user>
    <text>i'll remember that for next time</text>
  </message>
  <message>
    <ts>2017-07-03T10:49:28.928003</ts>
    <user>U17J54S2U</user>
    <text>&lt;@U4PT7NG4V&gt; you mean something like this: &lt;http://package.elm-lang.org/packages/elm-lang/page-visibility/latest&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-03T10:49:52.939562</ts>
    <user>U4PT7NG4V</user>
    <text>Sounds exactly like it! :slightly_smiling_face: That's super</text>
  </message>
  <message>
    <ts>2017-07-03T10:50:04.944926</ts>
    <user>U17J54S2U</user>
    <text>i’ve never used it though, but it’s maintained by `elm-lang` :smile:</text>
  </message>
  <message>
    <ts>2017-07-03T10:50:32.958654</ts>
    <user>U1N4KAHT6</user>
    <text>&lt;@U41NK9BM4&gt; the approach is fairly different, although elm-plot has changed a lot recently. elm-visualization is meant to be a fairly low-level toolkit suitable for implementing fairly custom visualizations (for example something like &lt;https://ellie-app.com/3DR8Yd6sHBQa1/0&gt;), whereas elm-plot roughly fits the charting library bill. So in summary, if you need a pretty standard chart, elm-plot makes that pretty easy, whereas if you need some help building something new, than elm-visualization should be a good friend</text>
  </message>
  <message>
    <ts>2017-07-03T10:50:34.959614</ts>
    <user>U4PT7NG4V</user>
    <text>&lt;http://caniuse.com/#feat=pagevisibility&gt; That's promising too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T10:50:47.965778</ts>
    <user>U4PT7NG4V</user>
    <text>Thanks, &lt;@U17J54S2U&gt; ! I'll give it a go</text>
  </message>
  <message>
    <ts>2017-07-03T10:52:47.021344</ts>
    <user>U41NK9BM4</user>
    <text>&lt;@U1N4KAHT6&gt; Crystal clear. Thank you</text>
  </message>
  <message>
    <ts>2017-07-03T11:11:59.552416</ts>
    <user>U3YDBDP4Z</user>
    <text>How do you peeps work with CSS files in your projects?</text>
  </message>
  <message>
    <ts>2017-07-03T11:14:34.621031</ts>
    <user>U3U2EA14G</user>
    <text>&lt;@U17R26VR8&gt; &lt;@U3SJEDR96&gt; . Sorry, I've just gone out. I don't touch anything on DOM. I add material design lite css with elm and webpack. When I work on menu and I click on menu, the error appear.</text>
  </message>
  <message>
    <ts>2017-07-03T11:17:40.701733</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U3U2EA14G&gt; do you have this code anywhere on github?</text>
  </message>
  <message>
    <ts>2017-07-03T11:39:19.262816</ts>
    <user>U3U2EA14G</user>
    <text>sorry,  It only have on my computer</text>
  </message>
  <message>
    <ts>2017-07-03T11:39:27.266285</ts>
    <user>U3U2EA14G</user>
    <text>let me take a picture</text>
  </message>
  <message>
    <ts>2017-07-03T11:42:07.331529</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U3YDBDP4Z&gt; We use a combination of css files and elm-css</text>
  </message>
  <message>
    <ts>2017-07-03T11:42:39.344326</ts>
    <user>U0FP80EKB</user>
    <text>we store the css files in our server code (we use rails)</text>
  </message>
  <message>
    <ts>2017-07-03T11:42:50.348919</ts>
    <user>U3U2EA14G</user>
    <text>&lt;https://gist.github.com/tranhoangvuit/63e929cf3e7045a328c30c66ee2fb1dc&gt;
this is gist &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T11:43:14.358274</ts>
    <user>U3SJEDR96</user>
    <text>what is `layout.js`?</text>
  </message>
  <message>
    <ts>2017-07-03T11:44:39.393165</ts>
    <user>U3U2EA14G</user>
    <text>ah, it's material design lite module.</text>
  </message>
  <message>
    <ts>2017-07-03T11:45:46.421758</ts>
    <user>U3SJEDR96</user>
    <text>Does the error still appear if you comment that out from HTML for a minute?</text>
  </message>
  <message>
    <ts>2017-07-03T11:47:28.464543</ts>
    <user>U3U2EA14G</user>
    <text>wait a minute. let me try :smile:</text>
  </message>
  <message>
    <ts>2017-07-03T11:48:26.488513</ts>
    <user>U3U2EA14G</user>
    <text>wow, it work</text>
  </message>
  <message>
    <ts>2017-07-03T11:48:45.496512</ts>
    <user>U3U2EA14G</user>
    <text>so it conflict with material desgin js file.</text>
  </message>
  <message>
    <ts>2017-07-03T11:48:49.498058</ts>
    <user>U3SJEDR96</user>
    <text>:tada:</text>
  </message>
  <message>
    <ts>2017-07-03T11:49:24.512973</ts>
    <user>U3SJEDR96</user>
    <text>well, the material design JS seems to add/change/remove/replace DOM elements, which tends to really confuse Elm and can give very unexpected results</text>
  </message>
  <message>
    <ts>2017-07-03T11:51:16.559805</ts>
    <user>U3U2EA14G</user>
    <text>Thank you so much &lt;@U3SJEDR96&gt; . I think i need to change material design js file.</text>
  </message>
  <message>
    <ts>2017-07-03T12:26:34.376761</ts>
    <user>U3U2EA14G</user>
    <text>btw, if i build a website with elm and golang. So I will use golang for build html and url, elm only used for single page. Is it ok ?</text>
  </message>
  <message>
    <ts>2017-07-03T12:26:57.384787</ts>
    <user>U3U2EA14G</user>
    <text>But I don't know how to pass parameter or session via elm.</text>
  </message>
  <message>
    <ts>2017-07-03T12:27:53.404268</ts>
    <user>U0CLDU8UB</user>
    <text>I have a functional thinking problem. I have a trail, which is really just a `List (List Point)` and a list of explosions. I also have a function that can take an explosion and a trail and cut the trail with the explosion. My problem is, how do I cut the trail with several explosions?

Here's my current implementation, which only takes the first explosion from the list and all the others are discarded:
```
breakIfNecessary : List Explosion -&amp;gt; Trail -&amp;gt; Trail
breakIfNecessary explosions trail =
    explosions
        |&amp;gt; List.head
        |&amp;gt; Maybe.map (breakTrail trail)
        |&amp;gt; Maybe.withDefault trail
```</text>
  </message>
  <message>
    <ts>2017-07-03T12:28:58.427209</ts>
    <user>U0CLDU8UB</user>
    <text>I tried formulating this into a fold, but I got confused. Hmm.. maybe a recursion would serve me better.</text>
  </message>
  <message>
    <ts>2017-07-03T12:33:35.525941</ts>
    <user>U0CLDU8UB</user>
    <text>Yes, recursion it is (and flipping the arguments on breakTrail)
```
breakIfNecessary : List Explosion -&amp;gt; Trail -&amp;gt; Trail
breakIfNecessary explosions trail =
    case explosions of
        [] -&amp;gt;
            trail

        exp :: rest -&amp;gt;
            trail
                |&amp;gt; breakTrail exp
                |&amp;gt; breakIfNecessary rest
```</text>
  </message>
  <message>
    <ts>2017-07-03T12:33:45.529206</ts>
    <user>U0CLDU8UB</user>
    <text>Thank you! :rubberduck:</text>
  </message>
  <message>
    <ts>2017-07-03T12:35:02.555660</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U3U2EA14G&gt; Sure, it's perfectly okay to use Go on the backend.</text>
  </message>
  <message>
    <ts>2017-07-03T12:38:37.628488</ts>
    <user>U3U2EA14G</user>
    <text>But I don't know how to pass from page to page. Example I use go render two pages html is index.html can cart.html. In index.html how I call elm file ? (Elm.Main.embed(mountNode) and if I choose product from index.html  and how can it pass it in cart.html ?</text>
  </message>
  <message>
    <ts>2017-07-03T12:43:23.725849</ts>
    <user>U0CLDU8UB</user>
    <text>So usually people make Elm applications either as
- a self-contained interactive part of a mostly static web page, or
- a full "web app", also called Single Page Application (SPA), where all the navigation etc. actually happens within the index.html</text>
  </message>
  <message>
    <ts>2017-07-03T12:45:05.760268</ts>
    <user>U0CLDU8UB</user>
    <text>You could for example make your shopping cart in the cart.html page with Elm, and have the rest of the page be a traditional HTML page.</text>
  </message>
  <message>
    <ts>2017-07-03T12:48:16.824605</ts>
    <user>U3U2EA14G</user>
    <text>so can we use ELM build a list component. example index_component.elm, cart_component.elm ... ? And from it. we will integrate it in html file ?</text>
  </message>
  <message>
    <ts>2017-07-03T12:49:23.846549</ts>
    <user>U0CLDU8UB</user>
    <text>Yeah, that should work.</text>
  </message>
  <message>
    <ts>2017-07-03T12:51:22.887418</ts>
    <user>U3U2EA14G</user>
    <text>I learned from you. Thank you so much :+1:</text>
  </message>
  <message>
    <ts>2017-07-03T13:19:18.425779</ts>
    <user>U1Z3HBMUL</user>
    <text>can you split your Elm app into chunks/modules so parts of teh app can be loaded lazily on user request?</text>
  </message>
  <message>
    <ts>2017-07-03T13:19:48.435103</ts>
    <user>U1Z3HBMUL</user>
    <text>last time I checked Elm produced one giant JS file</text>
  </message>
  <message>
    <ts>2017-07-03T13:20:37.450084</ts>
    <user>U0CLDU8UB</user>
    <text>That's something that might come with 0.19</text>
  </message>
  <message>
    <ts>2017-07-03T13:20:54.455004</ts>
    <user>U1Z3HBMUL</user>
    <text>&lt;@U0CLDU8UB&gt; that'd be awesome. thanks</text>
  </message>
  <message>
    <ts>2017-07-03T13:21:22.463534</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;https://github.com/elm-lang/projects/blob/master/roadmap.md#how-do-i-make-a-single-page-app&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T14:26:26.637576</ts>
    <user>U3LUC6SNS</user>
    <text>any suggestions or references or examples on learning how to use elm-tools/parser</text>
  </message>
  <message>
    <ts>2017-07-03T14:35:10.788402</ts>
    <user>U2VUFCK5G</user>
    <text>I just open sourced an Elm app. Its an Ethereum crypto-currency wallet. &lt;https://github.com/dosco/42wallet&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T14:36:49.816290</ts>
    <user>U2VUFCK5G</user>
    <text>I’m a pretty mediocre elm coder but the app has some good patterns and is a good read if people want to figure out stuff. It’s got multiple pages, ports, decoders and more :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T14:38:26.843639</ts>
    <user>U0J8D9M2P</user>
    <text>&lt;@U2VUFCK5G&gt; you can post it to &lt;#C0K384K4Y|news-and-links&gt; as well</text>
  </message>
  <message>
    <ts>2017-07-03T14:39:20.858925</ts>
    <user>U2VUFCK5G</user>
    <text>Thanks did that, posted it here since this channel had a much larger following.</text>
  </message>
  <message>
    <ts>2017-07-03T14:45:11.958491</ts>
    <user>U3YDBDP4Z</user>
    <text>Webpack, brunch, something else. What do people prefer?</text>
  </message>
  <message>
    <ts>2017-07-03T14:46:13.975847</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2VUFCK5G&gt; any particular reason you copy pasted a bigint implementation rather than using sometihng like `gilbertkennen/bigint`? (admittedly it's possible that wasn't around when you were working on this)</text>
  </message>
  <message>
    <ts>2017-07-03T15:15:30.466947</ts>
    <user>U5S3XFEV8</user>
    <text></text>
  </message>
  <message>
    <ts>2017-07-03T15:26:15.635485</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U0CLDU8UB&gt; &lt;@U3SJEDR96&gt; &lt;@U2W22AHNU&gt; I have to circle back about my previous issue with scroll events that aren't fired till scrolling actually stops. Previously we came to the conclusion that the OS is stopping js execution till the scrolling stops. But I just found out that when I attach a scroll handler with plain jquery that fires as I scroll.</text>
  </message>
  <message>
    <ts>2017-07-03T15:27:08.648773</ts>
    <user>U3R7CKQRX</user>
    <text>Still not sure if it is Elm's fault or something else but I couldn't really find much about this issue. I am working on a MacBook with MacOS</text>
  </message>
  <message>
    <ts>2017-07-03T15:27:53.659808</ts>
    <user>U0CLDU8UB</user>
    <text>What is the exact code you used with jQuery?</text>
  </message>
  <message>
    <ts>2017-07-03T15:28:05.662669</ts>
    <user>U3R7CKQRX</user>
    <text>Basically what I am doing is 1) Attach the scroll event with elm and send the result through a port to JS, those events are only fired after the scroll</text>
  </message>
  <message>
    <ts>2017-07-03T15:28:44.672328</ts>
    <user>U3R7CKQRX</user>
    <text>2) the jquery version is something like this `jQuery('.table-container').on('scroll', () =&amp;gt; console.log('log me'))`</text>
  </message>
  <message>
    <ts>2017-07-03T15:28:59.676067</ts>
    <user>U3SJEDR96</user>
    <text>did you try the pure JS version of that?</text>
  </message>
  <message>
    <ts>2017-07-03T15:29:14.679778</ts>
    <user>U3R7CKQRX</user>
    <text>no i didn't</text>
  </message>
  <message>
    <ts>2017-07-03T15:29:19.680940</ts>
    <user>U3R7CKQRX</user>
    <text>let me try</text>
  </message>
  <message>
    <ts>2017-07-03T15:30:34.701356</ts>
    <user>U3R7CKQRX</user>
    <text>ok the pure js version works just like jQuery</text>
  </message>
  <message>
    <ts>2017-07-03T15:31:13.711165</ts>
    <user>U3R7CKQRX</user>
    <text>I have also tried something a bit more heavy in computing, like recursion and manipulating the DOM in the callback but those also really worked fine.</text>
  </message>
  <message>
    <ts>2017-07-03T15:33:00.738075</ts>
    <user>U3R7CKQRX</user>
    <text>My elm code looks like this
``` ...       OnScroll event -&amp;gt;
            let
                _ =
                    Debug.log "scroll" "now"
            in
            ( model, Cmd.none )
```</text>
  </message>
  <message>
    <ts>2017-07-03T15:33:46.749690</ts>
    <user>U0CLDU8UB</user>
    <text>so how does the elm event listener get attached?</text>
  </message>
  <message>
    <ts>2017-07-03T15:33:49.750657</ts>
    <user>U3R7CKQRX</user>
    <text>and ```
onScroll : (Encode.Value -&amp;gt; msg) -&amp;gt; Html.Attribute msg
onScroll tagger =
    on "scroll" (Decode.map tagger Decode.value)
...
-- in the view
        , div [ class "table-container", onScroll OnScroll ]

```</text>
  </message>
  <message>
    <ts>2017-07-03T15:36:49.795092</ts>
    <user>U0CLDU8UB</user>
    <text>Oh, I may have an idea what's happening. Elm runtime uses requestAnimationFrame to batch some things to happen at once. Maybe the browser postpones the animation frame until the scrolling stops.</text>
  </message>
  <message>
    <ts>2017-07-03T15:37:52.810887</ts>
    <user>U3R7CKQRX</user>
    <text>i could test that theory by adding requestAnimationFrame to the page and see when it fires</text>
  </message>
  <message>
    <ts>2017-07-03T15:38:40.822937</ts>
    <user>U0CLDU8UB</user>
    <text>Ilias, what do you think of this theory?</text>
  </message>
  <message>
    <ts>2017-07-03T15:41:55.871782</ts>
    <user>U3R7CKQRX</user>
    <text>So I checked it by subscribing and logging at animationFrame</text>
  </message>
  <message>
    <ts>2017-07-03T15:42:08.875093</ts>
    <user>U3R7CKQRX</user>
    <text>the logging doesn't stop when I scroll</text>
  </message>
  <message>
    <ts>2017-07-03T15:42:27.879784</ts>
    <user>U3R7CKQRX</user>
    <text>however the scroll events only appeared after scrolling stopped</text>
  </message>
  <message>
    <ts>2017-07-03T15:42:30.880471</ts>
    <user>U3SJEDR96</user>
    <text>I'm thinking that the the event-callback are queued by the native scheduler, and the browser is delaying that evaluation until scrolling stops</text>
  </message>
  <message>
    <ts>2017-07-03T15:42:57.887124</ts>
    <user>U3R7CKQRX</user>
    <text>the `scroll now` parts are when all the scroll events arrived after scrolling stopped</text>
  </message>
  <message>
    <ts>2017-07-03T15:44:05.904266</ts>
    <user>U0CLDU8UB</user>
    <text>So I'm pretty sure you can work around this by attaching the scroll listener on the JS side and sending the info through a port</text>
  </message>
  <message>
    <ts>2017-07-03T15:44:47.914759</ts>
    <user>U3R7CKQRX</user>
    <text>Funny thing is had it that way before and the same issue, weirdly :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T15:45:05.919515</ts>
    <user>U3SQ42JJW</user>
    <text>Hi everyone.. I have a Http.send that fetches from an api. the endpoint responds with a fileSend…. now I wonder how to handle this - I want to download this file… but as everything is an XHR request, this would never work in Elm, right?</text>
  </message>
  <message>
    <ts>2017-07-03T15:45:21.923804</ts>
    <user>U3R7CKQRX</user>
    <text>I did some cleanup and then opted for putting the scroll handler into Elm</text>
  </message>
  <message>
    <ts>2017-07-03T15:45:31.926212</ts>
    <user>U3R7CKQRX</user>
    <text>but that same issue was there before</text>
  </message>
  <message>
    <ts>2017-07-03T15:46:28.940451</ts>
    <user>U3R7CKQRX</user>
    <text>So basically before it was JS listens to Scroll and sends stuff to Elm. Now it's Elm listens to scroll and sends stuff to Elm.</text>
  </message>
  <message>
    <ts>2017-07-03T15:46:38.942968</ts>
    <user>U3R7CKQRX</user>
    <text>Both ways I had the issue.</text>
  </message>
  <message>
    <ts>2017-07-03T15:50:00.992247</ts>
    <user>U0CLDU8UB</user>
    <text>Oh, that's sad :confused:</text>
  </message>
  <message>
    <ts>2017-07-03T15:50:08.994500</ts>
    <user>U3R7CKQRX</user>
    <text>I will try some elli app to reproduce it</text>
  </message>
  <message>
    <ts>2017-07-03T15:50:23.998346</ts>
    <user>U3SQ42JJW</user>
    <text>according to that its not possible :disappointed: &lt;http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#Part&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T15:50:50.005177</ts>
    <user>U2LAL86AY</user>
    <text>that would be awesome. and also does this happen in multiple browsers? What browser are you using?</text>
  </message>
  <message>
    <ts>2017-07-03T15:51:40.017934</ts>
    <user>U0CLDU8UB</user>
    <text>Yeah, that doesn't sound like something you can currently do in Elm</text>
  </message>
  <message>
    <ts>2017-07-03T15:53:03.039219</ts>
    <user>U3R7CKQRX</user>
    <text>wow, aion I should have checked that earlier</text>
  </message>
  <message>
    <ts>2017-07-03T15:53:10.041064</ts>
    <user>U3R7CKQRX</user>
    <text>turns out I have the issue in Chrome</text>
  </message>
  <message>
    <ts>2017-07-03T15:53:15.042397</ts>
    <user>U3R7CKQRX</user>
    <text>but not in Firefox</text>
  </message>
  <message>
    <ts>2017-07-03T15:53:37.047841</ts>
    <user>U3R7CKQRX</user>
    <text>that basically answers the question whether Elm has anything to do with it</text>
  </message>
  <message>
    <ts>2017-07-03T15:54:05.055383</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3F2TDVv33bha1/0&gt; &amp;lt;- this works for me on chrome, on osx :confused:</text>
  </message>
  <message>
    <ts>2017-07-03T15:54:32.062208</ts>
    <user>U3R7CKQRX</user>
    <text>whhuuuuuut?</text>
  </message>
  <message>
    <ts>2017-07-03T15:54:47.066263</ts>
    <user>U0CLDU8UB</user>
    <text>And me, Chrome on Linux</text>
  </message>
  <message>
    <ts>2017-07-03T15:54:55.068250</ts>
    <user>U2VUFCK5G</user>
    <text>&lt;@U3U2EA14G&gt; i have something similar, you can pass parameters by passing an object to the elm embed function</text>
  </message>
  <message>
    <ts>2017-07-03T15:55:19.074680</ts>
    <user>U2VUFCK5G</user>
    <text>or if they’re in the url parameters you can extract them in elm code</text>
  </message>
  <message>
    <ts>2017-07-03T15:55:50.082653</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3F2TDVv33bha1/1&gt; and with ports, too</text>
  </message>
  <message>
    <ts>2017-07-03T16:00:23.153769</ts>
    <user>U2LAL86AY</user>
    <text>Fedcy - a long time ago asked about something simmilar i think.
His answers that i saved are:

So, the HTTP streaming thing I asked about earlier today has yet another name: &lt;https://en.wikipedia.org/wiki/Comet_(programming)&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T16:00:46.160156</ts>
    <user>U2LAL86AY</user>
    <text>fredcy
May 19th at 1:24 AM
I got it to work by doing the necessary XHR in JS and sending the incremental responses into Elm via a port.</text>
  </message>
  <message>
    <ts>2017-07-03T16:01:32.172448</ts>
    <user>U2LAL86AY</user>
    <text>it's your decoder i guess.</text>
  </message>
  <message>
    <ts>2017-07-03T16:01:46.175988</ts>
    <user>U3R7CKQRX</user>
    <text>I can't run this example for some reason, all I see is a blank screen on  the right side</text>
  </message>
  <message>
    <ts>2017-07-03T16:02:24.185759</ts>
    <user>U3R7CKQRX</user>
    <text>tried to compile a couple of times</text>
  </message>
  <message>
    <ts>2017-07-03T16:02:36.188678</ts>
    <user>U3R7CKQRX</user>
    <text>but things don't show up for me</text>
  </message>
  <message>
    <ts>2017-07-03T16:02:46.191057</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3F2TDVv33bha1/2&gt; made it red now</text>
  </message>
  <message>
    <ts>2017-07-03T16:02:51.192411</ts>
    <user>U2LAL86AY</user>
    <text>are there any errors?</text>
  </message>
  <message>
    <ts>2017-07-03T16:02:53.192688</ts>
    <user>U3SJEDR96</user>
    <text>(the red part is scrollable)</text>
  </message>
  <message>
    <ts>2017-07-03T16:03:13.197425</ts>
    <user>U3SJEDR96</user>
    <text>and scroll-events should show up in the dev console, both for the `Debug.log` as for the port-stuff</text>
  </message>
  <message>
    <ts>2017-07-03T16:04:34.217140</ts>
    <user>U3R7CKQRX</user>
    <text>yeah that worked</text>
  </message>
  <message>
    <ts>2017-07-03T16:06:20.243190</ts>
    <user>U3R7CKQRX</user>
    <text>so it's likely it is something else in my code</text>
  </message>
  <message>
    <ts>2017-07-03T16:06:44.248702</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U2LAL86AY&gt; what do you think it is about the decoder?</text>
  </message>
  <message>
    <ts>2017-07-03T16:06:54.251111</ts>
    <user>U3R7CKQRX</user>
    <text>I try a simple succeed call</text>
  </message>
  <message>
    <ts>2017-07-03T16:08:28.274202</ts>
    <user>U3SJEDR96</user>
    <text>Gotta go now, if you come to a conclusion, please do highlight me so I can read it later :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T16:09:17.285880</ts>
    <user>U2LAL86AY</user>
    <text>does anyone have any idea how to build a pdf library/pdf document from scratch? 

I'm wrapping the `jsPdf` library in elm here - but using ports means i can't publish it. Which is so bad. The users will need to install js and set up ports and such.. just messy.

But i don't have any clue where to start at leas make a small pdf document with a small text. nothing fancy for start.

I can't find any resources - seems this topic is not good for making tutorials :smile: 
 But if anyone of you knows something about this topic please let me know.</text>
  </message>
  <message>
    <ts>2017-07-03T16:12:12.329277</ts>
    <user>U3SQ42JJW</user>
    <text>&lt;@U2LAL86AY&gt; Yes - I think I have to go this painful way, too… :grin:</text>
  </message>
  <message>
    <ts>2017-07-03T16:24:13.497470</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U3SJEDR96&gt; So I modified that elli example to also use a Decoder which hands the event to the msg but that also works in terms of smooth scroll events &lt;https://ellie-app.com/3F3m5ycmVxya1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T16:24:51.506392</ts>
    <user>U3R7CKQRX</user>
    <text>Also I just found out that the delayed scroll events only happen when I scroll via the touchpad but not when I actually use the scroll bar.</text>
  </message>
  <message>
    <ts>2017-07-03T16:25:56.521696</ts>
    <user>U3R7CKQRX</user>
    <text>I will post when I know more</text>
  </message>
  <message>
    <ts>2017-07-03T16:40:05.717439</ts>
    <user>U2LAL86AY</user>
    <text>hmm yes but doesn't seem to be working with the decoders form this DOM library: &lt;http://package.elm-lang.org/packages/MichaelCombs28/elm-dom/1.0.0/DOM#scrollTop&gt;
And i don't understand why - it's just a decoder.
&lt;https://ellie-app.com/3F3zszHK85Va1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T16:41:36.738754</ts>
    <user>U5S3XFEV8</user>
    <text>&lt;@U2LAL86AY&gt; my experience is that implementing a PDF library is quite an undertaking, even the basics. I have worked a little with thethe iTextSharp library to run on .NET Core a few months ago</text>
  </message>
  <message>
    <ts>2017-07-03T16:42:18.748476</ts>
    <user>U40QW928G</user>
    <text>with elm make does it compile included files or does it just build the one file you specify?</text>
  </message>
  <message>
    <ts>2017-07-03T16:44:11.773922</ts>
    <user>U5S3XFEV8</user>
    <text>&lt;@U2LAL86AY&gt; I got the impression it's a large complex spec with lots to implement, quite a time investment to do from scratch</text>
  </message>
  <message>
    <ts>2017-07-03T16:44:23.776715</ts>
    <user>U14Q8S4EM</user>
    <text>Yeah it will include what that module imports. Is that what you mean &lt;@U40QW928G&gt;?</text>
  </message>
  <message>
    <ts>2017-07-03T16:44:28.778009</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U40QW928G&gt; everything is bundled - including imports of your own modules, as well as library imports.</text>
  </message>
  <message>
    <ts>2017-07-03T16:44:31.778613</ts>
    <user>U2W22AHNU</user>
    <text>&lt;@U2LAL86AY&gt; &lt;https://docraptor.comb;)&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T16:44:48.782490</ts>
    <user>U40QW928G</user>
    <text>oh wonderful</text>
  </message>
  <message>
    <ts>2017-07-03T16:45:01.785288</ts>
    <user>U40QW928G</user>
    <text>then i don't need webpack</text>
  </message>
  <message>
    <ts>2017-07-03T16:45:37.793840</ts>
    <user>U40QW928G</user>
    <text>I saw webpack stuff on the elm tutorial site and said no thanks, I've dealt with it enough</text>
  </message>
  <message>
    <ts>2017-07-03T16:47:17.816750</ts>
    <user>U14Q8S4EM</user>
    <text>Haha yeah. I use browserify to bundle up everything in my Elm projects tho, and it works well.</text>
  </message>
  <message>
    <ts>2017-07-03T16:47:37.821454</ts>
    <user>U14Q8S4EM</user>
    <text>I have to bundle at all because often I have some amount of JS modules.</text>
  </message>
  <message>
    <ts>2017-07-03T16:54:54.918902</ts>
    <user>U2LAL86AY</user>
    <text>stephen.hand: i don't even underestand what pdf actually is. 

The pdf code. i mean  - is so strange can't find much online about it. 

From what you know - is possible to create a pdf document directly form elm? Forget for a second that is a lot to implement. I want to know if is possible at least.</text>
  </message>
  <message>
    <ts>2017-07-03T17:08:17.100162</ts>
    <user>U5S3XFEV8</user>
    <text>Generating a PDF at the lowest level just involves writing a binary stream (it's a binary format, not text based) and all the APIs exist in browsers to generate a binary stream and present it to the user (as jsPdf shows), however, I'm not sure if these APIs are exposed anywhere in the elm runtime as of yet</text>
  </message>
  <message>
    <ts>2017-07-03T17:15:45.191338</ts>
    <user>U0FP80EKB</user>
    <text>We just do `elm make` to output to a js file and copy it over to our rails app</text>
  </message>
  <message>
    <ts>2017-07-03T17:15:57.193744</ts>
    <user>U0FP80EKB</user>
    <text>Don’t use any of the js build stuff</text>
  </message>
  <message>
    <ts>2017-07-03T17:16:00.194352</ts>
    <user>U5S3XFEV8</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/API/Blob&gt; &lt;https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL&gt; &amp;lt;- These are the APIs you would probably use to implement PDF generation in JS, but as far as I can see they aren't exposed in Elm, so you still need to 'go native' at some point to use these browser APIs</text>
  </message>
  <message>
    <ts>2017-07-03T17:16:50.204554</ts>
    <user>U40QW928G</user>
    <text>maybe someday elm make will be powerful enough to build elm projects with styles and static files etc</text>
  </message>
  <message>
    <ts>2017-07-03T17:17:58.217891</ts>
    <user>U0FP80EKB</user>
    <text>Well, there is elm-css, so you can build with styles</text>
  </message>
  <message>
    <ts>2017-07-03T17:22:15.269747</ts>
    <user>U2LAL86AY</user>
    <text>no, you are right -  i see that until evancz releases this api to the elm runtime i can't do nothing in this direction: &lt;https://groups.google.com/forum/#!topic/elm-discuss/spr621OlUeo&gt;

Thanks for the info - was useful to understand this. At this point i will wrap that library with ports and that's it.
Hope this will be fixed soon enough - there are a lot of interesting use cases provided in that forum.</text>
  </message>
  <message>
    <ts>2017-07-03T17:23:38.286011</ts>
    <user>U4F64AKQV</user>
    <text>And &lt;#C4F9NBLR1|style-elements&gt; for those who are looking for a more innovative approach!</text>
  </message>
  <message>
    <ts>2017-07-03T17:27:56.336466</ts>
    <user>U0FP80EKB</user>
    <text>you misspelled “alternate” :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T17:31:55.381955</ts>
    <user>U0EQCDADA</user>
    <text>That's what I ended up doing too. Wasn't too bad.</text>
  </message>
  <message>
    <ts>2017-07-03T17:32:06.384065</ts>
    <user>U2LAL86AY</user>
    <text>In my projects i almost always need webpack. 
i've asked this before - still not sure if is possible - but maybe we can make a webpack version in elm. `WebpackConfig.elm` - instead of `webpack-config.js`- will just wrap the real web-pack apis in a type safe way. And generate the js version without errors.
A lot of bugs i encounter with webpack is just my fault - i do bad configurations - and having this in elm at least will make impossible to do bad configurations - and also providing helpful compiler messages.. Is this even possible?</text>
  </message>
  <message>
    <ts>2017-07-03T17:41:08.482210</ts>
    <user>U0EQCDADA</user>
    <text>&lt;https://github.com/fredcy/tezos-client/blob/master/tezos.js#L51&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T18:00:00.685550</ts>
    <user>U17PWHU4D</user>
    <text>&lt;@U2LAL86AY&gt; Webpack 2/3 should give you really helpful messages if your config is not semantic.  are you using those by chance?</text>
  </message>
  <message>
    <ts>2017-07-03T18:53:52.183479</ts>
    <user>U0S6BNVNY</user>
    <text>&lt;@U0FP80EKB&gt; the rails 5 webpacker elm stuff is nice</text>
  </message>
  <message>
    <ts>2017-07-03T19:05:29.285290</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U0S6BNVNY&gt; I’ve heard. We just updated to rails 5, so we have access to it. My only trepidation is that we’ve got our pipeline working now, so it is a bit of a lift for us to shift to something we don’t know. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T19:06:08.290472</ts>
    <user>U0S6BNVNY</user>
    <text>play with it once, it's pretty alright. Still lots of magic. But beats the asshat pipeline by leaps and bounds already.</text>
  </message>
  <message>
    <ts>2017-07-03T19:18:43.392628</ts>
    <user>U0FP80EKB</user>
    <text>:slightly_smiling_face: One day we’ll take the time</text>
  </message>
  <message>
    <ts>2017-07-03T19:19:12.396663</ts>
    <user>U0FP80EKB</user>
    <text>Just did some awesome refactoring today. Anyone who says Elm doesn’t support polymorphism needs to see this codebase. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T19:19:56.403115</ts>
    <user>U0FP80EKB</user>
    <text>We have 3 different types of embeds with 3 different sets of content, and we are getting consumer code to almost entirely just use a single abstraction.</text>
  </message>
  <message>
    <ts>2017-07-03T20:17:30.858615</ts>
    <user>U1432C733</user>
    <text>Is anyone using Elm apps inside of HTML templates? This might be an anti-pattern, but I am mostly curious if it has any adverse effects on performance.</text>
  </message>
  <message>
    <ts>2017-07-04T00:49:13.125697</ts>
    <user>U0CLDU8UB</user>
    <text>What do you mean by HTML templates?</text>
  </message>
  <message>
    <ts>2017-07-04T00:54:32.170332</ts>
    <user>U17R26VR8</user>
    <text>i’m guessing that &lt;@U1432C733&gt; has some backend framework rails/asp.net mvc/laravel that’s generating static html, and the goal is to embed a small elm ~component~ app into one of those template files to be served which’ll load the elm part after the page</text>
  </message>
  <message>
    <ts>2017-07-04T01:27:57.455878</ts>
    <user>U0CLDU8UB</user>
    <text>If that's the case, there won't be any effects on performance compared to other methods of embedding. Unless you repeat the template, of course.</text>
  </message>
  <message>
    <ts>2017-07-04T01:29:19.467693</ts>
    <user>U0CLDU8UB</user>
    <text>HTML Templates are also a part of the Web Components spec. You have very different concerns there.</text>
  </message>
  <message>
    <ts>2017-07-04T03:55:16.487106</ts>
    <user>U0HBB55C0</user>
    <text>hi all, do you know if an elm package for case conversion exist somewhere ?</text>
  </message>
  <message>
    <ts>2017-07-04T03:55:29.491580</ts>
    <user>U0HBB55C0</user>
    <text>mainly interested in snake_case &amp;lt;-&amp;gt; camelCase</text>
  </message>
  <message>
    <ts>2017-07-04T04:00:21.594127</ts>
    <user>U1ZFF0E5P</user>
    <text>the "extra" packages are typically a good start</text>
  </message>
  <message>
    <ts>2017-07-04T04:00:27.596043</ts>
    <user>U1ZFF0E5P</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-community/string-extra/1.4.0/String-Extra&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T04:01:12.612763</ts>
    <user>U0HBB55C0</user>
    <text>perfect</text>
  </message>
  <message>
    <ts>2017-07-04T04:01:34.620587</ts>
    <user>U1ZFF0E5P</user>
    <text>you have them for most core modules, like List.Extra etc etc</text>
  </message>
  <message>
    <ts>2017-07-04T04:11:40.826030</ts>
    <user>U0HBB55C0</user>
    <text>yep I know those, just forgot to look inside, didn't  match in package search</text>
  </message>
  <message>
    <ts>2017-07-04T04:11:42.826782</ts>
    <user>U0HBB55C0</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-04T04:15:00.895481</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U0CLDU8UB&gt; &lt;@U3SJEDR96&gt; My colleague &lt;@U5XTFSTFV&gt; found out what the scroll issue we talked about yesterday. After a while we found out that the issue only occurs on Chrome AND scrolling with the touchpad AND using Elm. We profiled some of it and got a performance issue from a chrome that read something like this `Vialoation: setTimeout took more than 100ms `. We then looked deeper into this file &lt;https://github.com/elm-lang/core/blob/master/src/Native/Scheduler.js#L244&gt; at the `work()` function and played around with the `MAX_STEPS` constant. When we set the constant to 10. The behaviour went back to smooth scrolling.</text>
  </message>
  <message>
    <ts>2017-07-04T04:15:24.904090</ts>
    <user>U3R7CKQRX</user>
    <text>Seems like elm delays work of too many event arrive between steps of work.</text>
  </message>
  <message>
    <ts>2017-07-04T04:15:39.909251</ts>
    <user>U3R7CKQRX</user>
    <text>We will try to work around the issue with requestAnimationFrame</text>
  </message>
  <message>
    <ts>2017-07-04T04:21:05.020399</ts>
    <user>U3SJEDR96</user>
    <text>Cool. I wonder if speeding up domdiffing for your view would help. (i.e. using lazy and/or keyed)</text>
  </message>
  <message>
    <ts>2017-07-04T04:26:44.137894</ts>
    <user>U4872964V</user>
    <text>throttling handling of scroll events with requestAnimationFrame could work too, in javascript</text>
  </message>
  <message>
    <ts>2017-07-04T04:30:00.210807</ts>
    <user>U0GPGFQQY</user>
    <text>I've been thinking about getting a `componentDidMount` events in Elm. We're using this in our current React project to fetch the data. It works very well with `RemoteData` type, where in `componentDidMount` you can check if the data hasn't been asked from the server, then initiate the fetch.</text>
  </message>
  <message>
    <ts>2017-07-04T04:31:14.239556</ts>
    <user>U0GPGFQQY</user>
    <text>My original thoughts are rendering an `img` tag with a wrong url in `src` and `onerror` event to initiate the fetch.</text>
  </message>
  <message>
    <ts>2017-07-04T04:32:36.270557</ts>
    <user>U2JFD9ALE</user>
    <text>Is it possibly to do this in _*pure*_ :elm:  without having to rely on a _*port*_? (change color of an .SVG image) &lt;https://stackoverflow.com/a/9873285&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T04:39:39.423465</ts>
    <user>U2LAL86AY</user>
    <text>if that image is created by you using the elm svg library - i think you can just switch the color attribute or something like any other attribute
 but if that image is already there - and you want to navigate to that particular element using selectors, or ids - and switch the color somewhere nested - then i think only with ports works.</text>
  </message>
  <message>
    <ts>2017-07-04T04:45:12.550891</ts>
    <user>U2D7NUGS1</user>
    <text>On Thursdy together with &lt;@U0ZESPUAX&gt; I'll give a short talk about Elm and web components at a meetup in Den Bosch (NL): &lt;https://www.meetup.com/Frontend-Developers-Javascript-Noord-Brabant/events/240756426/&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T04:47:48.610387</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3FgCNqW2RWLa1/0&gt; &lt;@U2JFD9ALE&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T04:57:51.839628</ts>
    <user>U41NK9BM4</user>
    <text>unsoundscapes: How the API would look like? Perhaps it’s too early for asking that? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T04:58:17.849899</ts>
    <user>U0GPGFQQY</user>
    <text>which api?</text>
  </message>
  <message>
    <ts>2017-07-04T04:58:42.859761</ts>
    <user>U41NK9BM4</user>
    <text>The equivalent of “componentDidMount” in Elm</text>
  </message>
  <message>
    <ts>2017-07-04T04:59:34.880187</ts>
    <user>U41NK9BM4</user>
    <text>Or maybe you were thinking to use ports to “wire” those events in Elm.</text>
  </message>
  <message>
    <ts>2017-07-04T05:01:06.918205</ts>
    <user>U2JFD9ALE</user>
    <text>&lt;@U3SJEDR96&gt; many thank yous good sir :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T05:02:57.962296</ts>
    <user>U2JFD9ALE</user>
    <text>So I just need to convert my .svg file into :elm: code right? Otherwise, I can't update the color right?</text>
  </message>
  <message>
    <ts>2017-07-04T05:03:40.978546</ts>
    <user>U0CLDU8UB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-07-04T05:05:22.017640</ts>
    <user>U0GPGFQQY</user>
    <text>I was wondering about hacking it in using some existing events in DOM</text>
  </message>
  <message>
    <ts>2017-07-04T05:06:13.036164</ts>
    <user>U41NK9BM4</user>
    <text>So intercepting React `componentDidMount` in Elm app?</text>
  </message>
  <message>
    <ts>2017-07-04T05:06:46.048635</ts>
    <user>U0GPGFQQY</user>
    <text>No. I wanted to have something like `componentDidMount` but in Elm</text>
  </message>
  <message>
    <ts>2017-07-04T06:01:28.250384</ts>
    <user>U0UGR7JTB</user>
    <text>hi everyone, I found a problem with `Html.map` and was able to reproduce it on this link: &lt;https://ellie-app.com/3FhDZs3q9f9a1/2&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T06:01:47.257377</ts>
    <user>U0UGR7JTB</user>
    <text>is anyone aware of this problem? am I doing something wrong?</text>
  </message>
  <message>
    <ts>2017-07-04T06:02:33.274296</ts>
    <user>U0UGR7JTB</user>
    <text>the context in which we are seeing this problem is when a user is focusing an input field, and the session times out, triggering the blur event</text>
  </message>
  <message>
    <ts>2017-07-04T06:04:27.314641</ts>
    <user>U3SJEDR96</user>
    <text>this is essentially &lt;https://github.com/elm-lang/virtual-dom/issues/35&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T06:04:34.316943</ts>
    <user>U3SJEDR96</user>
    <text>but then in pure-elm</text>
  </message>
  <message>
    <ts>2017-07-04T06:07:34.379512</ts>
    <user>U3SJEDR96</user>
    <text>I would definitely log that as an issue on the virtual-dom repo, and suggest working around it using `Html.keyed` so prevent those nodes from being reused without their tagger-structure being properly replaced</text>
  </message>
  <message>
    <ts>2017-07-04T06:09:01.408427</ts>
    <user>U4872964V</user>
    <text>&lt;@U0UGR7JTB&gt; &lt;@U3SJEDR96&gt; I get that effect in chrome, but not in safari.</text>
  </message>
  <message>
    <ts>2017-07-04T06:12:27.477330</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3FhTzbSZDxTa1/0&gt; for workaround</text>
  </message>
  <message>
    <ts>2017-07-04T06:13:44.502123</ts>
    <user>U3SJEDR96</user>
    <text>and heh, that's interesting. Stepping through the vdom diffing/patching in both browsers would probably reveal why, but I don't really have time for that right now</text>
  </message>
  <message>
    <ts>2017-07-04T06:14:14.511767</ts>
    <user>U4872964V</user>
    <text>to me it seems like this is the opposite of &lt;https://github.com/elm-lang/virtual-dom/issues/35&gt; as here it reuses the node when it shouldn’t</text>
  </message>
  <message>
    <ts>2017-07-04T06:15:43.540699</ts>
    <user>U3SJEDR96</user>
    <text>oh, you're right. #73 seems similar but involves `lazy` :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-04T06:16:29.555990</ts>
    <user>U4872964V</user>
    <text>it’s like the event happens while elm is rebuilding the dom</text>
  </message>
  <message>
    <ts>2017-07-04T06:17:17.571672</ts>
    <user>U3SJEDR96</user>
    <text>yeah, blur seems to be triggered while the element is being removed</text>
  </message>
  <message>
    <ts>2017-07-04T06:17:32.576624</ts>
    <user>U4872964V</user>
    <text>because clearly Elm won’t reuse the input element that has the event handler</text>
  </message>
  <message>
    <ts>2017-07-04T06:18:09.588948</ts>
    <user>U3SJEDR96</user>
    <text>true, but it recursively walks up the tree for taggers</text>
  </message>
  <message>
    <ts>2017-07-04T06:18:16.591343</ts>
    <user>U4872964V</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-04T06:19:01.605641</ts>
    <user>U3SJEDR96</user>
    <text>it's a pretty interesting edge-case!</text>
  </message>
  <message>
    <ts>2017-07-04T06:19:47.620552</ts>
    <user>U4872964V</user>
    <text>a fix could be to have the tagger check that the element that emitted the event still exists</text>
  </message>
  <message>
    <ts>2017-07-04T06:21:16.649040</ts>
    <user>U4872964V</user>
    <text>if that information is available to it</text>
  </message>
  <message>
    <ts>2017-07-04T06:22:19.667955</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/virtual-dom/issues/73#issuecomment-307545057&gt; "And here is an SSCCE of the onBlur case described above; it fails in Chrome, as Chrome fires a blur event when a focused element is removed from the DOM."</text>
  </message>
  <message>
    <ts>2017-07-04T06:23:09.682939</ts>
    <user>U4872964V</user>
    <text>yeah, that looks like the same bug</text>
  </message>
  <message>
    <ts>2017-07-04T06:24:45.713065</ts>
    <user>U4872964V</user>
    <text>or? Elm wouldn’t reuse an `input` node to make a `button` node, surely?</text>
  </message>
  <message>
    <ts>2017-07-04T06:25:30.727463</ts>
    <user>U4872964V</user>
    <text>or, the tagger is attached to the `div`, right</text>
  </message>
  <message>
    <ts>2017-07-04T06:28:48.788411</ts>
    <user>U3SJEDR96</user>
    <text>(can confirm that `Html.map identity` fixes it, so that's an even simpler, if more brittle workaround)</text>
  </message>
  <message>
    <ts>2017-07-04T06:28:56.790985</ts>
    <user>U4872964V</user>
    <text>another fix would be to remove event handlers before removing the node</text>
  </message>
  <message>
    <ts>2017-07-04T06:30:01.810919</ts>
    <user>U3SJEDR96</user>
    <text>but then that blur wouldn't be sent at all anymore, not sure if that would be correct behavior either? :confused:</text>
  </message>
  <message>
    <ts>2017-07-04T06:30:38.823399</ts>
    <user>U3SJEDR96</user>
    <text>then again, it doesn't appear to happen (in the same order) in other browsers</text>
  </message>
  <message>
    <ts>2017-07-04T06:31:03.831464</ts>
    <user>U2JFD9ALE</user>
    <text>Just noticed, &lt;https://ellie-app.com&gt; is not pink anymore (colorblind) :smile:</text>
  </message>
  <message>
    <ts>2017-07-04T06:31:08.832808</ts>
    <user>U4872964V</user>
    <text>yeah, should deleting a node send a blur event? not sure :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T06:31:48.845366</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2JFD9ALE&gt; yeah, hasn't been for quite some time, actually :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T06:32:08.851648</ts>
    <user>U3LUC6SNS</user>
    <text>Right now I have a working 
```
port render : String -&amp;gt; Cmd msg
```
which I use to send a document's content into JS-land.  I would like instead to send the JSON object 
```
{content: document.content, docType: document.docType}
```
which can to by converting this object to a string, sending to JS-land, and then decoding it. BUT -- is it possible to write a function
```
port render : Document -&amp;gt; Cmd msg
```
that does this?  Then I would just have to change the definition, not all the usages of `render`.</text>
  </message>
  <message>
    <ts>2017-07-04T06:32:34.859901</ts>
    <user>U4872964V</user>
    <text>but in Elm’s perspective, no events should be sent for nodes that are being removed anyway, as that would break in this way always</text>
  </message>
  <message>
    <ts>2017-07-04T06:33:18.873592</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4872964V&gt; true. I wonder if "element with focus is removed" is specced anywhere</text>
  </message>
  <message>
    <ts>2017-07-04T06:33:52.883959</ts>
    <user>U4872964V</user>
    <text>&lt;@U3LUC6SNS&gt; you can send a `Value`</text>
  </message>
  <message>
    <ts>2017-07-04T06:34:01.886696</ts>
    <user>U3LUC6SNS</user>
    <text>re the above .. yes I would have to change usages, but when I forget one, the compiler would remind me</text>
  </message>
  <message>
    <ts>2017-07-04T06:34:04.887778</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U3LUC6SNS&gt; this should work if it's a simple record, though writing a `Document -&amp;gt; Json.Encode.Value` function and making your port take js values like that seems even simpler</text>
  </message>
  <message>
    <ts>2017-07-04T06:35:13.908066</ts>
    <user>U3LUC6SNS</user>
    <text>So it should be `port render : Value -&amp;gt; Cmd msg`?</text>
  </message>
  <message>
    <ts>2017-07-04T06:35:32.913990</ts>
    <user>U3SJEDR96</user>
    <text>assuming you'd essentially have `encode { content, docType } = [ ("content", Encode.string content), ("docType", Encode.string docType) ] |&amp;gt; Encode.object` you would just get a record-like object on the JS side</text>
  </message>
  <message>
    <ts>2017-07-04T06:35:41.916626</ts>
    <user>U3SJEDR96</user>
    <text>yeah, indeed</text>
  </message>
  <message>
    <ts>2017-07-04T06:35:53.920400</ts>
    <user>U3LUC6SNS</user>
    <text>OK, I'll try that   Thanks!</text>
  </message>
  <message>
    <ts>2017-07-04T06:36:17.927441</ts>
    <user>U3SJEDR96</user>
    <text>means you can also be picky about which parts you send over, which ones you don't, and how you want to structure them for JS :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T06:36:25.930017</ts>
    <user>U4872964V</user>
    <text>&lt;@U3SJEDR96&gt; I think calling unbind() on the node before removing it in the DOM sould be a great fix</text>
  </message>
  <message>
    <ts>2017-07-04T06:37:10.943065</ts>
    <user>U4872964V</user>
    <text>or maybe that’s just jquery :slightly_smiling_face: removeEventListener in DOM</text>
  </message>
  <message>
    <ts>2017-07-04T06:38:19.962929</ts>
    <user>U4872964V</user>
    <text>hopefully i’ll never have to write a jquery function ever again</text>
  </message>
  <message>
    <ts>2017-07-04T06:40:25.999916</ts>
    <user>U0UGR7JTB</user>
    <text>&lt;@U3SJEDR96&gt; &lt;@U4872964V&gt; thanks for the feedback, so is the workaround to put an Html.map identity around the input field?</text>
  </message>
  <message>
    <ts>2017-07-04T06:40:57.009087</ts>
    <user>U4872964V</user>
    <text>around the existing Html.map</text>
  </message>
  <message>
    <ts>2017-07-04T06:41:11.013060</ts>
    <user>U0UGR7JTB</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-04T06:41:18.014968</ts>
    <user>U3SJEDR96</user>
    <text>ensure they either have a different amount of taggers _or_ they are in a keyed structure so nodes can't be reused</text>
  </message>
  <message>
    <ts>2017-07-04T06:41:18.015049</ts>
    <user>U4872964V</user>
    <text>but around the input field should work too i suppose</text>
  </message>
  <message>
    <ts>2017-07-04T06:41:57.026341</ts>
    <user>U3SJEDR96</user>
    <text>so, googling some more, gecko has had an open bug for _adding_ blur when focused element is removed... it's been open for 7 years :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-04T06:44:51.076378</ts>
    <user>U3SJEDR96</user>
    <text>the "good" news is that there isn't a spec that says what _should_ actually happen. The wording is rather vague: "blur should happen when a focused area stops being a focusable area", but that can include loads of things which aren't handled consistently across implementations anyway..</text>
  </message>
  <message>
    <ts>2017-07-04T06:48:00.131862</ts>
    <user>U4872964V</user>
    <text>Well, if you would want to get a blur event with the previous tagger in Elm when an input field is removed, then I think that would be pretty tricky to implement</text>
  </message>
  <message>
    <ts>2017-07-04T06:48:19.137408</ts>
    <user>U4872964V</user>
    <text>stopping the blur event seems uncomplicated</text>
  </message>
  <message>
    <ts>2017-07-04T06:49:47.162494</ts>
    <user>U3SJEDR96</user>
    <text>the patching would need to happen "inside out" essentially. So yeah, rather tricky..</text>
  </message>
  <message>
    <ts>2017-07-04T06:50:00.166417</ts>
    <user>U0UGR7JTB</user>
    <text>I think the problem here is actually to do with the fact that the message is being passed to the wrong scope (Page1Msg vs Page2Msg)</text>
  </message>
  <message>
    <ts>2017-07-04T06:50:32.176184</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0UGR7JTB&gt; yeah, that's what we mean by "taggers" :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T06:50:42.179208</ts>
    <user>U0UGR7JTB</user>
    <text>sorry, didn't get that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T06:51:22.190103</ts>
    <user>U4872964V</user>
    <text>or you could just make a ‘p-redraw’ patch if taggers are not the same.</text>
  </message>
  <message>
    <ts>2017-07-04T06:51:43.196323</ts>
    <user>U4872964V</user>
    <text>then you’d avoid type errors at least</text>
  </message>
  <message>
    <ts>2017-07-04T06:52:06.202994</ts>
    <user>U3SJEDR96</user>
    <text>true, but at a possibly higher cost, though it's hard to measure real-world impact</text>
  </message>
  <message>
    <ts>2017-07-04T06:52:28.209393</ts>
    <user>U4872964V</user>
    <text>how often do taggers change is the question. not often is my naive answer :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T06:54:00.236681</ts>
    <user>U4872964V</user>
    <text>however, somebody has gone to the trouble of implementing a ‘p-tagger’ patch type, so what do i know?</text>
  </message>
  <message>
    <ts>2017-07-04T06:55:08.257142</ts>
    <user>U3SJEDR96</user>
    <text>:smile: also true. Oh well, logging this as a separate bug should be a good start, and adding our findings in a condensed format can't hurt either.</text>
  </message>
  <message>
    <ts>2017-07-04T06:57:01.291261</ts>
    <user>U4872964V</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-04T06:57:13.294688</ts>
    <user>U4872964V</user>
    <text>i’ll graciously let you do that</text>
  </message>
  <message>
    <ts>2017-07-04T06:57:46.304438</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U3SJEDR96&gt;, I am doing this:
```
encodeDocument : Document -&amp;gt; Value
encodeDocument document =
  [ ("content", Encode.string document.content), ("docType", Encode.string document.attributes.docType) ]
  |&amp;gt; Encode.object
```
where 
```
type alias Value = {
  content: String,
  docType: String
}
```
I am getting the error
```
The definition of `encodeDocument` does not match its type annotation.
6:53:45 AM client.1 |  17| encodeDocument : Document -&amp;gt; Value
6:53:45 AM client.1 |  18| encodeDocument document =
6:53:45 AM client.1 |  19|&amp;gt;  [ ("content", Encode.string document.content), ("docType", Encode.string document.attributes.docType) ]
6:53:45 AM client.1 |  20|&amp;gt;  |&amp;gt; Encode.object
6:53:45 AM client.1 |  The type annotation for `encodeDocument` says it always returns:
6:53:45 AM client.1 |      Value
6:53:45 AM client.1 |  But the returned value (shown above) is a:
6:53:45 AM client.1 |      Encode.Value
```
Should I change `encodeDocument : Document -&amp;gt; Value` to `encodeDocument : Document -&amp;gt; Encode.Value`?</text>
  </message>
  <message>
    <ts>2017-07-04T06:59:11.329640</ts>
    <user>U4872964V</user>
    <text>&lt;@U3LUC6SNS&gt; you don’t need to define your own `Value` it corresponds to a JSON value in javascript</text>
  </message>
  <message>
    <ts>2017-07-04T07:00:29.354404</ts>
    <user>U4872964V</user>
    <text>so, yes, the port should take a `Json.Encode.Value` as parameter</text>
  </message>
  <message>
    <ts>2017-07-04T07:01:12.368122</ts>
    <user>U4872964V</user>
    <text>then you can just read the values in javascript as .content and .docType of the object you’re getting</text>
  </message>
  <message>
    <ts>2017-07-04T07:01:44.378104</ts>
    <user>U3LUC6SNS</user>
    <text>Ah, ok.  I think I understand now.</text>
  </message>
  <message>
    <ts>2017-07-04T07:06:17.460060</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4872964V&gt; actually, wouldn't swapping these also work? &lt;https://github.com/elm-lang/virtual-dom/blob/master/src/Native/VirtualDom.js#L633-L640&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T07:06:36.465454</ts>
    <user>U3SJEDR96</user>
    <text>i.e. do the "inner" modifications before swapping the taggers</text>
  </message>
  <message>
    <ts>2017-07-04T07:07:12.475375</ts>
    <user>U4872964V</user>
    <text>don’t see how the patches would end up differently</text>
  </message>
  <message>
    <ts>2017-07-04T07:07:53.487028</ts>
    <user>U3SJEDR96</user>
    <text>they're executed in order, so the inner node would be removed, the blur event sent with the old tagger, and then taggers would be swapped</text>
  </message>
  <message>
    <ts>2017-07-04T07:08:00.488867</ts>
    <user>U3SJEDR96</user>
    <text>let me test that out, actually</text>
  </message>
  <message>
    <ts>2017-07-04T07:08:12.492211</ts>
    <user>U4872964V</user>
    <text>hmm, but the events wouldn’t come through until all patching is done</text>
  </message>
  <message>
    <ts>2017-07-04T07:08:42.500479</ts>
    <user>U4872964V</user>
    <text>testing is always good :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T07:12:55.574074</ts>
    <user>U4872964V</user>
    <text>actually, I can’t think of a reason why you’d patch taggers just because there are the same number of taggers.</text>
  </message>
  <message>
    <ts>2017-07-04T09:05:25.645922</ts>
    <user>U1R5JCM55</user>
    <text>My build times have headed over 20s which makes tweaking layout/styling pretty tedious. Is there any general advice for reducing build times? I'm aware that I need to avoid complicated case statements but that's about it. Is there any way to profile a build to identify slow modules?</text>
  </message>
  <message>
    <ts>2017-07-04T09:07:41.693833</ts>
    <user>U0K7EBT3J</user>
    <text>&lt;@U1R5JCM55&gt; +1 to this question</text>
  </message>
  <message>
    <ts>2017-07-04T09:14:16.835858</ts>
    <user>U3SJEDR96</user>
    <text>Hm. How about making sure that every file will emit a warning, and running elm-make with `--warn`? :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-04T09:16:54.893297</ts>
    <user>U3SJEDR96</user>
    <text>not the sanest way, but it's simpler than compiling your own elm-platform :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-04T09:20:36.972189</ts>
    <user>U4872964V</user>
    <text>run it with `strace`?</text>
  </message>
  <message>
    <ts>2017-07-04T09:22:45.017896</ts>
    <user>U1R5JCM55</user>
    <text>ilias: ha, I'll give that a go!</text>
  </message>
  <message>
    <ts>2017-07-04T09:24:21.052336</ts>
    <user>U1R5JCM55</user>
    <text>I'm on OS X but it looks like DTrace will do the job</text>
  </message>
  <message>
    <ts>2017-07-04T09:29:13.158071</ts>
    <user>U1R5JCM55</user>
    <text>Would unused imports have an impact on compile time?</text>
  </message>
  <message>
    <ts>2017-07-04T09:55:29.739335</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U1R5JCM55&gt; Probably? At the very least, it would need to include them in the dependency tree.</text>
  </message>
  <message>
    <ts>2017-07-04T09:55:53.748421</ts>
    <user>U1R5JCM55</user>
    <text>yeah, that was my thinking, going through the project now...</text>
  </message>
  <message>
    <ts>2017-07-04T09:57:12.779093</ts>
    <user>U1L1HMV9Q</user>
    <text>&lt;@U1R5JCM55&gt; I reduced my times by creating my own private packages using &lt;https://github.com/gdotdesign/elm-github-install&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T09:57:13.779426</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U1R5JCM55&gt; Another potential slowdown is having a lot of modules.</text>
  </message>
  <message>
    <ts>2017-07-04T09:58:44.815033</ts>
    <user>U1R5JCM55</user>
    <text>casperlotter: I am using elm-github-install already, that seems like a good suggestion. Could at least split out some util modules. Do you have a good workflow for editing packages locally? i.e. are using local dependencies in elm-github-install?</text>
  </message>
  <message>
    <ts>2017-07-04T09:59:56.842463</ts>
    <user>U1R5JCM55</user>
    <text>palmerpa: there's 143 modules which doesn't seem that many but could be worth exploring. I'm trying to use larger/less modules in general now anyway (advice from evan/rtfeldman).</text>
  </message>
  <message>
    <ts>2017-07-04T10:00:42.862412</ts>
    <user>U4F64AKQV</user>
    <text>Yeah, in general larger modules are better.</text>
  </message>
  <message>
    <ts>2017-07-04T10:01:08.872824</ts>
    <user>U1R5JCM55</user>
    <text>I guess adding type annotations everywhere would also help?</text>
  </message>
  <message>
    <ts>2017-07-04T10:01:17.876857</ts>
    <user>U1L1HMV9Q</user>
    <text>Not really, I moved all the code with the least churn into util packages and just added that as a dependency. Every once in a while if I have to touch a package I just bump the version and rerun the install. If you come up with a good workflow let me know :smile:</text>
  </message>
  <message>
    <ts>2017-07-04T10:01:53.891224</ts>
    <user>U1R5JCM55</user>
    <text>It's taken a while, but I think I can see the golden path, larger modules make sense now :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T10:07:53.028643</ts>
    <user>U3YDBDP4Z</user>
    <text>+20s build times sounds bad. Is it common for people to get?</text>
  </message>
  <message>
    <ts>2017-07-04T10:22:19.347232</ts>
    <user>U14Q8S4EM</user>
    <text>No in my experience &lt;@U3YDBDP4Z&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T10:23:05.364156</ts>
    <user>U14Q8S4EM</user>
    <text>My build times are 0-2s.</text>
  </message>
  <message>
    <ts>2017-07-04T10:23:13.366810</ts>
    <user>U14Q8S4EM</user>
    <text>Im not really sure what explains the difference.</text>
  </message>
  <message>
    <ts>2017-07-04T10:23:34.374750</ts>
    <user>U14Q8S4EM</user>
    <text>Ive heard of 40s build times before. But I dont believe thats representative.</text>
  </message>
  <message>
    <ts>2017-07-04T10:25:11.410512</ts>
    <user>U3SJEDR96</user>
    <text>Depends on size of project, number of files, project structure, number of dependencies, complexity of case-statements, and a whole bunch of other factors. It's not very common to have annoyingly high build-times, but it comes up every now and then. Should be a whole lot better in 0.19, too, judging by Evan's comments at elm-europe :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T10:26:43.444259</ts>
    <user>U1R5JCM55</user>
    <text>yeah, that's definitely the thing I'm most excited about with 0.19. The other stuff sounds great, but faster build times you notice all day long :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T10:50:51.963696</ts>
    <user>U5FU80S06</user>
    <text>Do I still need to use a UI framewok like Bootstrap or MDL if I use &lt;http://package.elm-lang.org/packages/justgage/tachyons-elm/1.0.0/Tachyons&gt;? Or is Tachyons all I need for UI?</text>
  </message>
  <message>
    <ts>2017-07-04T10:57:26.105475</ts>
    <user>U41NK9BM4</user>
    <text>&lt;@U5FU80S06&gt; &lt;http://tachyons.io/#features&gt; Has a lot of stuff - it replaces Bootstrap. What is not clear to me is if the Elm version is “complete”</text>
  </message>
  <message>
    <ts>2017-07-04T11:43:52.016897</ts>
    <user>U0H8PND27</user>
    <text>&lt;@U5FU80S06&gt; you just use Tachyons and then you can see different patterns on how to build UI work it at the main Tachyons website. </text>
  </message>
  <message>
    <ts>2017-07-04T11:45:22.043482</ts>
    <user>U0H8PND27</user>
    <text>The Elm version has a few issues of I've needed to resolve &lt;@U41NK9BM4&gt;. </text>
  </message>
  <message>
    <ts>2017-07-04T11:47:51.087207</ts>
    <user>U1432C733</user>
    <text>&lt;@U17R26VR8&gt; &lt;@U0CLDU8UB&gt; That is a correct, but not quite the use case. I have a platform in Elm with a bunch of different people making sub-apps in Elm. It's not realistic to have the "parent" import all the every-changing sub apps created by different teams and each sub app has very little coupling, if any, with each other.</text>
  </message>
  <message>
    <ts>2017-07-04T11:50:21.130879</ts>
    <user>U1432C733</user>
    <text>So the thought was serve a picker Elm app in a template and the selected app inside a second template (or web components). Synchronization can take place with web sockets and a user interface can track the location of each sub-apps static and microservice backend.</text>
  </message>
  <message>
    <ts>2017-07-04T11:52:00.159858</ts>
    <user>U1432C733</user>
    <text>This sounds close my use case:</text>
  </message>
  <message>
    <ts>2017-07-04T11:52:24.167088</ts>
    <user>U1432C733</user>
    <text>&lt;https://www.youtube.com/watch?v=U_5XKPe4fZM&gt; [Elm Europe Microservices for the frontend]</text>
  </message>
  <message>
    <ts>2017-07-04T12:00:48.315556</ts>
    <user>U45C5R6QP</user>
    <text>Is there a list of expected new features in Elm 0.19 somewhere?</text>
  </message>
  <message>
    <ts>2017-07-04T12:01:56.336075</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/projects/blob/master/roadmap.md&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T12:09:28.460604</ts>
    <user>U45C5R6QP</user>
    <text>Thank you</text>
  </message>
  <message>
    <ts>2017-07-04T13:03:36.208563</ts>
    <user>U0QS3QAS3</user>
    <text>does anyone expect much Elm semantics changes in the near future? seems that tooling will accumulate, but we're basically looking at Elm 1.0 now - or am I overly confident?</text>
  </message>
  <message>
    <ts>2017-07-04T13:51:32.754384</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0QS3QAS3&gt; I don't think there are _plans_ for semantics changes, but then again, I don't think most people saw "Elm drops FRP" coming, and that happened in the previous version. So yeah, who knows, really? People come to new insights and make breakthroughs, we can only hope we get to reap the benefits of that :</text>
  </message>
  <message>
    <ts>2017-07-04T14:05:13.908921</ts>
    <user>U23SA861Y</user>
    <text>I'm reading through the elm guide and I can't seem to find a place where it flat out says types must be capitalized and type parameters are lowercase.</text>
  </message>
  <message>
    <ts>2017-07-04T14:06:01.917557</ts>
    <user>U17MNKY3H</user>
    <text>It might... not?</text>
  </message>
  <message>
    <ts>2017-07-04T14:06:19.920826</ts>
    <user>U23SA861Y</user>
    <text>where does one submit a bug against the docs?</text>
  </message>
  <message>
    <ts>2017-07-04T14:06:25.921824</ts>
    <user>U17MNKY3H</user>
    <text>It's completely possible it just expects people to pick it up as a convention.</text>
  </message>
  <message>
    <ts>2017-07-04T14:06:37.923847</ts>
    <user>U2SR9DL7Q</user>
    <text>i'm not sure that i ever read it explicitly, I just saw everyone else doing it. peer pressure, y'know. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T14:06:38.924101</ts>
    <user>U17MNKY3H</user>
    <text>To avoid spending space/reader's time explaining it.</text>
  </message>
  <message>
    <ts>2017-07-04T14:07:17.931052</ts>
    <user>U23SA861Y</user>
    <text>Its a really subtle distinction which is made all the more worse by the `Html msg` vs `Html Msg`</text>
  </message>
  <message>
    <ts>2017-07-04T14:07:59.938294</ts>
    <user>U2SR9DL7Q</user>
    <text>and perhaps `Model` and `model`  ?</text>
  </message>
  <message>
    <ts>2017-07-04T14:08:07.939700</ts>
    <user>U23SA861Y</user>
    <text>I suspect its was just overlooked because it was inherited from haskell.</text>
  </message>
  <message>
    <ts>2017-07-04T14:13:24.994038</ts>
    <user>U0FP80EKB</user>
    <text>one way to think about it is that, in Elm, variables start with lower-case, while types start with capital. That’s why `Html msg` is lower-case and `Html Msg` is upper-case</text>
  </message>
  <message>
    <ts>2017-07-04T14:14:12.001914</ts>
    <user>U23SA861Y</user>
    <text>yes, I understand the distinction. I'm more wondering why its not in the docs</text>
  </message>
  <message>
    <ts>2017-07-04T14:14:40.006598</ts>
    <user>U23SA861Y</user>
    <text>Is it intentionally omitted or just an oversight</text>
  </message>
  <message>
    <ts>2017-07-04T14:16:51.029181</ts>
    <user>U0FP80EKB</user>
    <text>That identifiers are lower-case and types are upper-case? I guess it isn’t explicitly in the documentation.</text>
  </message>
  <message>
    <ts>2017-07-04T14:16:54.029674</ts>
    <user>U0FP80EKB</user>
    <text>Interesting.</text>
  </message>
  <message>
    <ts>2017-07-04T14:17:59.040896</ts>
    <user>U23SA861Y</user>
    <text>It does seem to cause a fair amount of confusion to newcomers.</text>
  </message>
  <message>
    <ts>2017-07-04T14:18:07.042187</ts>
    <user>U23SA861Y</user>
    <text>Which is not unsurprising</text>
  </message>
  <message>
    <ts>2017-07-04T14:20:25.066842</ts>
    <user>U0F7JPK36</user>
    <text>the compiler enforces capitalization for type names and variable names</text>
  </message>
  <message>
    <ts>2017-07-04T14:20:49.070972</ts>
    <user>U23SA861Y</user>
    <text>right, the compiler gets it correct</text>
  </message>
  <message>
    <ts>2017-07-04T14:21:00.073146</ts>
    <user>U3SJEDR96</user>
    <text>it's _sort of_ mentioned here: &lt;https://guide.elm-lang.org/types/reading_types.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T14:21:07.074494</ts>
    <user>U0FP80EKB</user>
    <text>So, it isn’t really the lower-case vs upper-case, it is the idea of type variables</text>
  </message>
  <message>
    <ts>2017-07-04T14:21:42.080504</ts>
    <user>U23SA861Y</user>
    <text>well it's both</text>
  </message>
  <message>
    <ts>2017-07-04T14:22:07.084760</ts>
    <user>U23SA861Y</user>
    <text>I know I've had to explain it more than once, I don't know about you guys</text>
  </message>
  <message>
    <ts>2017-07-04T14:22:37.089922</ts>
    <user>U0FP80EKB</user>
    <text>I don’t think I’ve ever had to explain “lower-case are variables, upper-case are types” but I’ve seen confusion around type variables for people who aren’t used to this level of a type system</text>
  </message>
  <message>
    <ts>2017-07-04T14:23:51.102694</ts>
    <user>U3SJEDR96</user>
    <text>I have seen the question `Html msg` vs `Html Msg` (more than) a couple of times. It usually involves confusion around both type variables and "why is it named `msg` if it can be anything"</text>
  </message>
  <message>
    <ts>2017-07-04T14:24:32.110123</ts>
    <user>U0FP80EKB</user>
    <text>Having a concrete explanation in the docs of type variables with `Html msg` as an example could definitely be nice</text>
  </message>
  <message>
    <ts>2017-07-04T14:24:46.112461</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4872964V&gt; &lt;@U0UGR7JTB&gt; I logged that issue from earlier, btw: &lt;https://github.com/elm-lang/virtual-dom/issues/103&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T14:25:37.121177</ts>
    <user>U23SA861Y</user>
    <text>like and example of `Html String` or something</text>
  </message>
  <message>
    <ts>2017-07-04T14:26:47.133240</ts>
    <user>U0UGR7JTB</user>
    <text>&lt;@U3SJEDR96&gt; thank you so much for that!</text>
  </message>
  <message>
    <ts>2017-07-04T14:57:39.456519</ts>
    <user>U17MNKY3H</user>
    <text>&lt;@U3SJEDR96&gt; That is a great issue title.</text>
  </message>
  <message>
    <ts>2017-07-04T15:02:25.507370</ts>
    <user>U1R5JCM55</user>
    <text>Trying to get a feel for whether or not I have an abnormal compile time, how many LOCs does your project have and what's the compile time?</text>
  </message>
  <message>
    <ts>2017-07-04T15:05:20.536642</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U1R5JCM55&gt; are your times for recompiles, clean runs, after editing an entry-point or a leaf module, ..?</text>
  </message>
  <message>
    <ts>2017-07-04T15:06:34.548790</ts>
    <user>U1R5JCM55</user>
    <text>I get 90 secs for a clean build, just main module 2s, nested modules can be up to 20s (14k LOC, 143 modules)</text>
  </message>
  <message>
    <ts>2017-07-04T15:06:45.550528</ts>
    <user>U1R5JCM55</user>
    <text>(reducing number of modules is on the list)</text>
  </message>
  <message>
    <ts>2017-07-04T15:08:25.566506</ts>
    <user>U3YDBDP4Z</user>
    <text>Having to reduce the number of modules seems like a bad thing to have to do.</text>
  </message>
  <message>
    <ts>2017-07-04T15:08:36.568309</ts>
    <user>U3YDBDP4Z</user>
    <text>You modularize hopefully for good reasons</text>
  </message>
  <message>
    <ts>2017-07-04T15:08:44.569667</ts>
    <user>U3YDBDP4Z</user>
    <text>:confused:</text>
  </message>
  <message>
    <ts>2017-07-04T15:09:37.578337</ts>
    <user>U3YDBDP4Z</user>
    <text>_14k LOC of Elm is impressive_ :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T15:10:39.588882</ts>
    <user>U3SJEDR96</user>
    <text>That's the thing, though - _good reasons_ is entirely subjective: just because something _can_ live in its own module doesn't mean it makes life easier. Overabstracting is totally a thing :smile:</text>
  </message>
  <message>
    <ts>2017-07-04T15:11:43.599187</ts>
    <user>U3YDBDP4Z</user>
    <text>Sure but still</text>
  </message>
  <message>
    <ts>2017-07-04T15:12:04.602449</ts>
    <user>U1R5JCM55</user>
    <text>I came from an ember background where you modularise heavily so I went with that for familiarity. Knowing what I know now there's definitely some modules which should be folded together anyway (I have modules for things like view/update/msg/model...).</text>
  </message>
  <message>
    <ts>2017-07-04T15:13:00.611908</ts>
    <user>U3SJEDR96</user>
    <text>Hm, yeah, I'm going to assume you've done the regular things like preventing `case (t,u,p,l,e) of`, and I have nothing much to add :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T15:13:57.621512</ts>
    <user>U1R5JCM55</user>
    <text>I think (a, b, c) is as far as I've ever been, and it's only ever when there's a very limited number of cases (maybe 4 tops)</text>
  </message>
  <message>
    <ts>2017-07-04T15:14:11.623937</ts>
    <user>U1R5JCM55</user>
    <text>not sure if those would be enough to trigger the issue</text>
  </message>
  <message>
    <ts>2017-07-04T15:14:25.626262</ts>
    <user>U3SJEDR96</user>
    <text>yeah, even in that case, try replacing it with a `Debug.crash "foo"` and see if that changes anything</text>
  </message>
  <message>
    <ts>2017-07-04T15:14:48.629815</ts>
    <user>U1R5JCM55</user>
    <text>definitely worth a try, thanks</text>
  </message>
  <message>
    <ts>2017-07-04T15:15:01.631982</ts>
    <user>U3SJEDR96</user>
    <text>But then again, that'd only matter if they're somewhere in the chain of modules that get recompiled when something changes</text>
  </message>
  <message>
    <ts>2017-07-04T15:15:01.632033</ts>
    <user>U1R5JCM55</user>
    <text>now I just have to remember where they are :wink:</text>
  </message>
  <message>
    <ts>2017-07-04T15:16:27.646340</ts>
    <user>U3SJEDR96</user>
    <text>(if it does change something, keep in mind that exhaustiveness checker (which suffers from that pattern) has seen performance improvements for 0.19 so changing those to nested cases might not be worth it)</text>
  </message>
  <message>
    <ts>2017-07-04T15:16:27.646369</ts>
    <user>U1R5JCM55</user>
    <text>hmm, only one that has 3+ elements in the tuple</text>
  </message>
  <message>
    <ts>2017-07-04T15:17:55.660175</ts>
    <user>U0EUHKVGB</user>
    <text>I would estimate that 143 modules at that size taking 90 seconds to clean build is pretty good</text>
  </message>
  <message>
    <ts>2017-07-04T15:18:29.666049</ts>
    <user>U0EUHKVGB</user>
    <text>You probably are taking a bit of a hit from having many small files.</text>
  </message>
  <message>
    <ts>2017-07-04T15:18:41.668081</ts>
    <user>U0EUHKVGB</user>
    <text>But 90 seconds is pretty good</text>
  </message>
  <message>
    <ts>2017-07-04T15:20:00.680739</ts>
    <user>U1R5JCM55</user>
    <text>it's the incremental builds that are killing me really, but I do find that the number of modules being rebuilt when I save a single file is in the 20-40 range</text>
  </message>
  <message>
    <ts>2017-07-04T15:20:36.686927</ts>
    <user>U1R5JCM55</user>
    <text>(I've just pruned all unused imports which didn't help unfortunately)</text>
  </message>
  <message>
    <ts>2017-07-04T15:36:44.845289</ts>
    <user>U4872964V</user>
    <text>&lt;@U3SJEDR96&gt; did you try reversing the order of patching?</text>
  </message>
  <message>
    <ts>2017-07-04T15:45:18.928130</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, it's a little more involved than I thought it would be :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-07-04T15:48:48.961489</ts>
    <user>U1R5JCM55</user>
    <text>hmm, that sounds worth a shot, thanks</text>
  </message>
  <message>
    <ts>2017-07-04T16:37:00.412462</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U1R5JCM55&gt; is not clear to me what you mean by build - do you mean `compile` - when you save the file - or you mean `npm run build` with webpack or something.</text>
  </message>
  <message>
    <ts>2017-07-04T16:37:36.417860</ts>
    <user>U1R5JCM55</user>
    <text>I'm just using elm-make to get those numbers</text>
  </message>
  <message>
    <ts>2017-07-04T16:38:01.421888</ts>
    <user>U1R5JCM55</user>
    <text>(I normally use webpack, but I didn't want the overhead clouding the issue)</text>
  </message>
  <message>
    <ts>2017-07-04T16:38:57.430376</ts>
    <user>U2LAL86AY</user>
    <text>a ok - but if you just compile the code on save - with the live server turned off - how much does it take on average?</text>
  </message>
  <message>
    <ts>2017-07-04T16:39:18.433935</ts>
    <user>U2LAL86AY</user>
    <text>without doing the elm-make thing</text>
  </message>
  <message>
    <ts>2017-07-04T16:39:57.439765</ts>
    <user>U1R5JCM55</user>
    <text>I'm seeing around 25secs on average</text>
  </message>
  <message>
    <ts>2017-07-04T16:40:13.442346</ts>
    <user>U2LAL86AY</user>
    <text>uh.. :smile:</text>
  </message>
  <message>
    <ts>2017-07-04T16:40:56.448743</ts>
    <user>U1R5JCM55</user>
    <text>if I save a single file and do elm-make, then I see compile times in the 2secs - 60secs+ range (2 secs is for Main.elm)</text>
  </message>
  <message>
    <ts>2017-07-04T16:41:36.454562</ts>
    <user>U1R5JCM55</user>
    <text>with webpack, it's obviously longer</text>
  </message>
  <message>
    <ts>2017-07-04T16:42:11.459608</ts>
    <user>U1R5JCM55</user>
    <text>casperlotter suggested I split out a separate library for utils etc. going to try that next</text>
  </message>
  <message>
    <ts>2017-07-04T16:45:41.490772</ts>
    <user>U2LAL86AY</user>
    <text>just my two cents - couple days ago i worked on a project - and the update function was big - rely big - i wasn't building any update helpers - the compile times - with webpack truned off where about 12-15 secons sometimes. And the project was not that big actually. is just getting started. 

Then i build a bunch of update helpers - making my update branches very very lean - moved everything inside helper functions - and now the compile time is around 1 second - and with webpack no more than 4-5 - live reload. So yeah - doing that it helped in my case - but what you have - 140 some modules is much bigger. Maybe this can't be improved :grin:</text>
  </message>
  <message>
    <ts>2017-07-04T16:46:36.498674</ts>
    <user>U1R5JCM55</user>
    <text>hmm, that's interesting though</text>
  </message>
  <message>
    <ts>2017-07-04T16:47:14.504167</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2LAL86AY&gt; when you say update helpers, what exactly does that entail? just less top level case statements in the update function?</text>
  </message>
  <message>
    <ts>2017-07-04T16:50:34.533386</ts>
    <user>U2LAL86AY</user>
    <text>i think elm only compiles the functions you change. it remembers the one had compiler previously. (not 100% sure but still) and if you have a bunch of helpers you change 1 - then just that one compiles - but with no helpers - the hole update function was compiling every time i was modifying something inside a case statement. And being so big was taken a lot of time. (nested dict updates in my case) not tuples.
&lt;@U2SR9DL7Q&gt;
Not rely - but if you have.
```
 case msg of 
      Msg -&amp;gt; model |&amp;gt; someUpdateHelperFunction  =&amp;gt; [] 
``` 
Instead of doing it without the helper.</text>
  </message>
  <message>
    <ts>2017-07-04T16:51:30.541620</ts>
    <user>U2SR9DL7Q</user>
    <text>gotcha</text>
  </message>
  <message>
    <ts>2017-07-04T16:51:59.545621</ts>
    <user>U1R5JCM55</user>
    <text>&amp;gt; i think elm only compiles the functions you change
interesting theory, wonder if anyone can confirm?</text>
  </message>
  <message>
    <ts>2017-07-04T17:03:22.644159</ts>
    <user>U2LAL86AY</user>
    <text>i'm watching Elm Europe on youtube - lots of good talks - but i can't find the evancz talk - does anyone where can i find it? :smile:</text>
  </message>
  <message>
    <ts>2017-07-04T17:03:53.648744</ts>
    <user>U2LAL86AY</user>
    <text>how is it named at least</text>
  </message>
  <message>
    <ts>2017-07-04T17:04:14.652001</ts>
    <user>U23SA861Y</user>
    <text>do you remember what it's on?</text>
  </message>
  <message>
    <ts>2017-07-04T17:05:11.660156</ts>
    <user>U2LAL86AY</user>
    <text>this is the channel : &lt;https://www.youtube.com/watch?v=U_5XKPe4fZM&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T17:05:52.665633</ts>
    <user>U23SA861Y</user>
    <text>he seems to have done the keynote</text>
  </message>
  <message>
    <ts>2017-07-04T17:06:44.672679</ts>
    <user>U23SA861Y</user>
    <text>hmm, your right don't see it</text>
  </message>
  <message>
    <ts>2017-07-04T17:08:10.683617</ts>
    <user>U3SJEDR96</user>
    <text>The keynotes and mgriffith's talk are still being processed</text>
  </message>
  <message>
    <ts>2017-07-04T17:08:16.684617</ts>
    <user>U3SJEDR96</user>
    <text>They're up but unlisted</text>
  </message>
  <message>
    <ts>2017-07-04T17:08:18.684833</ts>
    <user>U2LAL86AY</user>
    <text>and richard talk also - i've seen here in the chat people talking that was awesome... hmm</text>
  </message>
  <message>
    <ts>2017-07-04T17:08:23.685438</ts>
    <user>U2LAL86AY</user>
    <text>aa</text>
  </message>
  <message>
    <ts>2017-07-04T17:08:29.686289</ts>
    <user>U2LAL86AY</user>
    <text>:smile:</text>
  </message>
  <message>
    <ts>2017-07-04T17:08:49.688888</ts>
    <user>U3SJEDR96</user>
    <text>I'm pretty sure you'll find a link somewhere in &lt;#C0MU81TEC|conferences&gt; or &lt;#C0CJ671HU|random&gt; tho</text>
  </message>
  <message>
    <ts>2017-07-04T17:10:52.705481</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://www.youtube.com/watch?v=2ihTgEYiKpI&gt; Evan's keynote</text>
  </message>
  <message>
    <ts>2017-07-04T17:11:06.707321</ts>
    <user>U3SJEDR96</user>
    <text>Don't have the rest handy - sorry :)</text>
  </message>
  <message>
    <ts>2017-07-04T17:46:04.970462</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2LAL86AY&gt;, your code likely got faster because you no longer had a giant case statement
</text>
  </message>
  <message>
    <ts>2017-07-04T17:49:23.993738</ts>
    <user>U3YDBDP4Z</user>
    <text>&lt;@U0EUHKVGB&gt; What’s a “giant” case statement though? Is it many branches? Or lots of code in the branches? Does it matter if you write the code inside each branch, or if you move the code into functions?</text>
  </message>
  <message>
    <ts>2017-07-04T17:56:01.040937</ts>
    <user>U0EUHKVGB</user>
    <text>many branches</text>
  </message>
  <message>
    <ts>2017-07-04T17:56:44.045701</ts>
    <user>U0EUHKVGB</user>
    <text>but also deeply nested code can have negative performance impacts. especially without type annotations, or using type shadowing</text>
  </message>
  <message>
    <ts>2017-07-04T17:57:32.051058</ts>
    <user>U23SA861Y</user>
    <text>Is haskell like that as well?</text>
  </message>
  <message>
    <ts>2017-07-04T18:02:14.085490</ts>
    <user>U0EUHKVGB</user>
    <text>different compilers do different things :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T18:13:38.162095</ts>
    <user>U3YDBDP4Z</user>
    <text>`update` is bound to have many branches after a while.
Can you split the logic somehow?</text>
  </message>
  <message>
    <ts>2017-07-04T18:14:05.164828</ts>
    <user>U1CE9DL9H</user>
    <text>well you can split up `Msg` if you need to</text>
  </message>
  <message>
    <ts>2017-07-04T18:14:26.167133</ts>
    <user>U1CE9DL9H</user>
    <text>`type Msg = SubThing SubMsg | ...` and `type SubMsg = ...`</text>
  </message>
  <message>
    <ts>2017-07-04T18:14:29.167352</ts>
    <user>U1CE9DL9H</user>
    <text>then separate</text>
  </message>
  <message>
    <ts>2017-07-04T18:15:45.175862</ts>
    <user>U1CE9DL9H</user>
    <text>the thing that is slow is exhaustiveness checking btw (something that haskell normally doesn't do, though it should in your project :slightly_smiling_face:)</text>
  </message>
  <message>
    <ts>2017-07-04T18:16:21.179767</ts>
    <user>U3YDBDP4Z</user>
    <text>exhaustiveness checking?</text>
  </message>
  <message>
    <ts>2017-07-04T18:16:43.182102</ts>
    <user>U1CE9DL9H</user>
    <text>making sure you cover all the cases</text>
  </message>
  <message>
    <ts>2017-07-04T18:17:28.186534</ts>
    <user>U1CE9DL9H</user>
    <text>so for lists, if you don't handle the empty case, that is a compiler error. In haskell it will compile, and when such a pattern match receives and empty list, it will error/crash</text>
  </message>
  <message>
    <ts>2017-07-04T18:18:07.190630</ts>
    <user>U23SA861Y</user>
    <text>Huh, I can see why that would potentially cause a slow down</text>
  </message>
  <message>
    <ts>2017-07-04T18:20:00.202211</ts>
    <user>U1CE9DL9H</user>
    <text>well, it's a tricky problem, I guess the old implementation was accidentally quadratic or something.</text>
  </message>
  <message>
    <ts>2017-07-04T18:20:40.206569</ts>
    <user>U1CE9DL9H</user>
    <text>basically, it causes a slowdown because the implementation is not optimal, which it will be in 0.19</text>
  </message>
  <message>
    <ts>2017-07-04T18:20:53.207943</ts>
    <user>U1CE9DL9H</user>
    <text>or at least closer to optimal</text>
  </message>
  <message>
    <ts>2017-07-04T18:25:22.236167</ts>
    <user>U5V0HVAKB</user>
    <text>someone have others good doc for learning elm in depth instead of &lt;https://guide.elm-lang.org/interop/javascript.html&gt; and the elm-tutorial pdf?\</text>
  </message>
  <message>
    <ts>2017-07-04T18:57:13.431676</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0EUHKVGB&gt; the number of case statements stayed the same. around 15 -18 and aded a few more recently - still ok.. The amount of logic inside each case was the problem. 
`especially without type annotations`
And how exactly code without type annotation impacts this ? Because i feel this exactly what has happened. Every helper i added was having a type annotation - but before was no helper and of course no type annotation.
What a function without a type annotation does to the compiler ?! - performance wise i mean - (i add them because i get better errors not thinking about performance..)</text>
  </message>
  <message>
    <ts>2017-07-04T18:58:19.438462</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U5V0HVAKB&gt; do you want to learn the js interop in much more in depth?</text>
  </message>
  <message>
    <ts>2017-07-04T18:59:39.446500</ts>
    <user>U5V0HVAKB</user>
    <text>i would like to learn something like the part 3 
&lt;https://www.manning.com/books/elm-in-action?a_aid=elm_in_action&amp;amp;a_bid=b15edc5c&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T18:59:48.447359</ts>
    <user>U2LAL86AY</user>
    <text>hmm this is older but beeing .17 is still relevant becaus eit has the elm architecture. &lt;https://elmseeds.thaterikperson.com/ports&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T19:01:01.456572</ts>
    <user>U2LAL86AY</user>
    <text>not sure about that book - but i have this tutorial going deep on a bunch of topics</text>
  </message>
  <message>
    <ts>2017-07-04T19:01:02.456691</ts>
    <user>U2LAL86AY</user>
    <text>&lt;https://www.elm-tutorial.org/en/&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T19:02:56.468940</ts>
    <user>U2LAL86AY</user>
    <text>the elm seeds site is better - beeing video is much faster and easier to get the concepts.</text>
  </message>
  <message>
    <ts>2017-07-04T19:04:16.477176</ts>
    <user>U2LAL86AY</user>
    <text>`i would like to learn something like the part 3 ` oh sorry :slightly_smiling_face: didn;t see that you are talking about part 3.
scaling and performance ..</text>
  </message>
  <message>
    <ts>2017-07-04T19:04:23.477895</ts>
    <user>U5V0HVAKB</user>
    <text>ye ^^</text>
  </message>
  <message>
    <ts>2017-07-04T19:04:30.478551</ts>
    <user>U5V0HVAKB</user>
    <text>i understand the basic routing etc</text>
  </message>
  <message>
    <ts>2017-07-04T19:04:40.479550</ts>
    <user>U5V0HVAKB</user>
    <text>but its seems to be overkill to follow those steps for a bigger application</text>
  </message>
  <message>
    <ts>2017-07-04T19:05:37.485216</ts>
    <user>U2LAL86AY</user>
    <text>hmm there are a bunch of articles on medium covering different topics but that book is much better i guess.</text>
  </message>
  <message>
    <ts>2017-07-04T19:06:18.488875</ts>
    <user>U5V0HVAKB</user>
    <text>ye but not complete ...</text>
  </message>
  <message>
    <ts>2017-07-04T19:06:30.490114</ts>
    <user>U5V0HVAKB</user>
    <text>it will be finish in earl 2018</text>
  </message>
  <message>
    <ts>2017-07-04T19:06:33.490386</ts>
    <user>U5V0HVAKB</user>
    <text>so long ^^</text>
  </message>
  <message>
    <ts>2017-07-04T19:11:49.521062</ts>
    <user>U2LAL86AY</user>
    <text>there are a lot of spas on github - and Richard Feldman built a spa - but in terms of scaling and performance - you just need to come up with your use case and explain what problems you have and here in the channel more experienced people than me will help you. 

I think this question is too broad - can't be answered very good without something specific to talk about. 

But for general advice Just now i watched the evancz talk on how to grow your elm - the scaling problem you mentioned - on the basics is rely easy - but once your app is big will you discover that the devil in the details. you will get circular dependencies and such... Check out this if you didn't already.

&lt;https://www.youtube.com/watch?v=2ihTgEYiKpI&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T19:16:57.550669</ts>
    <user>U5V0HVAKB</user>
    <text>thanks for all of your answers i will take a look of that</text>
  </message>
  <message>
    <ts>2017-07-04T22:21:50.860618</ts>
    <user>U61JQ4F4J</user>
    <text>Hi! any recomendations for syntax highlighting of source code (really only JSON) in Elm?</text>
  </message>
  <message>
    <ts>2017-07-04T22:26:37.901517</ts>
    <user>U61JQ4F4J</user>
    <text>I really don't like this solution &lt;https://stackoverflow.com/questions/38149635/syntax-highlighting-with-elm&gt; should I go with ports + highlightjs? can't find anything elm pure in packages</text>
  </message>
  <message>
    <ts>2017-07-04T23:27:48.407216</ts>
    <user>U23SA861Y</user>
    <text>Obviously no one should ever write their own native applications ever........buuuut, does anyone have any documentation on doing so?</text>
  </message>
  <message>
    <ts>2017-07-04T23:40:03.505345</ts>
    <user>U14Q8S4EM</user>
    <text>jonf: I made this native module : &lt;https://github.com/Elm-Canvas/elm-canvas&gt; Maybe it could serve as a good example. Or if you had any questions.</text>
  </message>
  <message>
    <ts>2017-07-04T23:40:59.512897</ts>
    <user>U23SA861Y</user>
    <text>I'm more looking for some design doc on say name mangling and compiler provided functions</text>
  </message>
  <message>
    <ts>2017-07-04T23:57:16.641480</ts>
    <user>U0CL0AS3V</user>
    <text>documentation for it doesn't exist because the API is unsafe, not intended for public consumption, and is subject to dramatic change without any warning whatsoever :wink:</text>
  </message>
  <message>
    <ts>2017-07-04T23:57:22.642258</ts>
    <user>U0CL0AS3V</user>
    <text>what are you trying to do?</text>
  </message>
  <message>
    <ts>2017-07-05T00:55:40.119857</ts>
    <user>U23SA861Y</user>
    <text>I like breaking things more or less. But I figured it would be possible to create a top level program that would create a custom element.</text>
  </message>
  <message>
    <ts>2017-07-05T01:38:28.483391</ts>
    <user>U64MK7215</user>
    <text>hi</text>
  </message>
  <message>
    <ts>2017-07-05T01:38:39.485146</ts>
    <user>U64MK7215</user>
    <text>how to embed multiple divs in elm?</text>
  </message>
  <message>
    <ts>2017-07-05T01:40:28.501151</ts>
    <user>U1ZFF0E5P</user>
    <text>multiple elm apps? or are you just asking how to write your html? if it's the latter you can use this tool to get a feel for it: &lt;https://mbylstra.github.io/html-to-elm/&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T01:48:00.571053</ts>
    <user>U64MK7215</user>
    <text>thanks &lt;@U1ZFF0E5P&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T03:21:34.769777</ts>
    <user>U0U6ML22H</user>
    <text>hi all</text>
  </message>
  <message>
    <ts>2017-07-05T03:23:07.795038</ts>
    <user>U0U6ML22H</user>
    <text>I'm faced with a problem that's trivial to do in JS and I cannot figure how to handle it cleanly in Elm: I've abstracted a "filter" component/data structure that I aim to use with different Types; the goal is to do simple string matching on attributes, to filter a list.</text>
  </message>
  <message>
    <ts>2017-07-05T03:23:43.804702</ts>
    <user>U0U6ML22H</user>
    <text>In JS, I'd go with `myObject[filter.key] === filter.value` or something like that, but in Elm I cannot access dynamic attributes</text>
  </message>
  <message>
    <ts>2017-07-05T03:24:44.821612</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U0U6ML22H&gt; for dynamic keys you want a `Dict`</text>
  </message>
  <message>
    <ts>2017-07-05T03:24:44.821629</ts>
    <user>U0U6ML22H</user>
    <text>how do I do that without having to add to every filter an `accessor` field that specifies how to access the field on the given Type? this means I need to turn my `Filter` into a `Filter a` and, since my real-world example is much more complex, it introduces yet another layer of complexity that is simply not manageable</text>
  </message>
  <message>
    <ts>2017-07-05T03:25:26.833942</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U153UK3FA&gt; thanks but my Types are already used in other parts of the app, it's simply the filtering component that I'm looking into right now</text>
  </message>
  <message>
    <ts>2017-07-05T03:25:38.837426</ts>
    <user>U0U6ML22H</user>
    <text>unless I misunderstood your comment</text>
  </message>
  <message>
    <ts>2017-07-05T03:26:23.850519</ts>
    <user>U153UK3FA</user>
    <text>then you want a function that converts a string to the value of a field which you’ll have to write statically.</text>
  </message>
  <message>
    <ts>2017-07-05T03:27:03.862013</ts>
    <user>U0U6ML22H</user>
    <text>yeah, that's the "accessor" I mentioned, which implies that my generic `Filter` needs to become a `Filter a` because the rest of the code will then use it as `Filter User` or `Filter Thing`</text>
  </message>
  <message>
    <ts>2017-07-05T03:27:24.868317</ts>
    <user>U0U6ML22H</user>
    <text>but I don't want that, because it's very complex, and I'm looking for alternatives :smiley:</text>
  </message>
  <message>
    <ts>2017-07-05T03:27:47.874747</ts>
    <user>U153UK3FA</user>
    <text>it’s not complex, it’s just more code, the code itself is simple</text>
  </message>
  <message>
    <ts>2017-07-05T03:28:23.885134</ts>
    <user>U0U6ML22H</user>
    <text>again, you're looking at one simple example; my actual code is more complex, with a lot of other types depending on `Filter` which would then have to be updated</text>
  </message>
  <message>
    <ts>2017-07-05T03:28:44.891518</ts>
    <user>U0U6ML22H</user>
    <text>I've spend half an hour starting to do it and it'll mean I'll have to change all of my app code and it'll take a few hours</text>
  </message>
  <message>
    <ts>2017-07-05T03:30:22.921667</ts>
    <user>U153UK3FA</user>
    <text>I’m not sure what you need to `Filter a` for</text>
  </message>
  <message>
    <ts>2017-07-05T03:31:57.951151</ts>
    <user>U0U6ML22H</user>
    <text>because I cannot have a generic handler for a Filter of User and a Filter of Thing if Filter needs to carry with it a `(User -&amp;gt; String)` or a `(Thing -&amp;gt; String)`; it needs to carry a `(a -&amp;gt; String)`, which means it needs to be `Filter a`</text>
  </message>
  <message>
    <ts>2017-07-05T03:34:10.991098</ts>
    <user>U153UK3FA</user>
    <text>You can’t usefully write a `(a -&amp;gt; String)` function, because you can’t use that `a` value in that function to create the `String`</text>
  </message>
  <message>
    <ts>2017-07-05T03:34:32.997618</ts>
    <user>U0U6ML22H</user>
    <text>what do you mean?</text>
  </message>
  <message>
    <ts>2017-07-05T03:35:32.015603</ts>
    <user>U0U6ML22H</user>
    <text>the point of the `a -&amp;gt; String` is that you then, in your program, define what that function is for the `a` you're handling</text>
  </message>
  <message>
    <ts>2017-07-05T03:36:31.033198</ts>
    <user>U0U6ML22H</user>
    <text>so if you have `Filter a = { toString : a -&amp;gt; String }`, you can then declare a `Filter User` that is `{ toString = .name }`</text>
  </message>
  <message>
    <ts>2017-07-05T03:37:05.043214</ts>
    <user>U153UK3FA</user>
    <text>ah, alrighty</text>
  </message>
  <message>
    <ts>2017-07-05T03:37:20.047539</ts>
    <user>U0U6ML22H</user>
    <text>obviously, when using it with `Thing`, which may not have a `name` or whose `name` may not be a `String`, you'd declare something else, like `{ toString = toString &amp;lt;&amp;lt; .id }`</text>
  </message>
  <message>
    <ts>2017-07-05T03:37:42.053989</ts>
    <user>U0U6ML22H</user>
    <text>it'd be a `Filter Thing`, then</text>
  </message>
  <message>
    <ts>2017-07-05T03:40:16.099626</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0U6ML22H&gt; can you give more context? Code example, perhaps? Without knowing the full context, it's pretty hard to say anything but "if it needs to carry type-specific info, it needs to carry that info".. _what_ are you filtering? Is there anything those types have in common? How are you filtering them? What is the problem you're trying to solve? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T03:40:52.110618</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U3SJEDR96&gt; it's not OSS code so I cannot give snippets, but I'll try to explain better :smiley:</text>
  </message>
  <message>
    <ts>2017-07-05T03:45:36.198216</ts>
    <user>U0U6ML22H</user>
    <text>I have a very simple admin-type app, with (for now) three types of items that needs to be displayed in a Table, and "filtered", either by a search string (that applies to one or more fields) or by a list of filters</text>
  </message>
  <message>
    <ts>2017-07-05T03:46:42.218310</ts>
    <user>U0U6ML22H</user>
    <text>so I made a generic "Query" item, that holds both a search and a list of "selected filters"</text>
  </message>
  <message>
    <ts>2017-07-05T03:47:36.235206</ts>
    <user>U0U6ML22H</user>
    <text>those "selected filters" are, for now, a record with "key" and "value"; it matches a "filter" which is a "key" and a list of possible values</text>
  </message>
  <message>
    <ts>2017-07-05T03:48:53.259447</ts>
    <user>U0U6ML22H</user>
    <text>now I want to write the function to filter my things so that, in short: `(match the query with any of the searchable fields) AND (match selectedFilter1) AND (match selectedFilter2) AND ...`</text>
  </message>
  <message>
    <ts>2017-07-05T03:49:12.265189</ts>
    <user>U0U6ML22H</user>
    <text>the `match selectedFilter` function needs to be generic</text>
  </message>
  <message>
    <ts>2017-07-05T03:49:52.278011</ts>
    <user>U0U6ML22H</user>
    <text>each items provides a list of accessors (`.name` and the like) to match the query</text>
  </message>
  <message>
    <ts>2017-07-05T03:50:16.285700</ts>
    <user>U0U6ML22H</user>
    <text>but I found myself having a hard time doing the same for filters, because it has such a huge impact on the code</text>
  </message>
  <message>
    <ts>2017-07-05T03:51:31.310029</ts>
    <user>U0U6ML22H</user>
    <text>because now my `SelectedFilter` needs to carry an accessor, that it needs to inherit from the `Filter` list, and my whole code is changed for something that, in ugly JS, would require one line of dirty dynamic access</text>
  </message>
  <message>
    <ts>2017-07-05T03:51:41.313245</ts>
    <user>U0U6ML22H</user>
    <text>so I was hoping maybe there was something I wasn't seeing</text>
  </message>
  <message>
    <ts>2017-07-05T03:51:51.316442</ts>
    <user>U3SJEDR96</user>
    <text>okay, so you could have a `Filter { a | name : String }`.. Is that an avenue worth exploring?</text>
  </message>
  <message>
    <ts>2017-07-05T03:51:58.318673</ts>
    <user>U0U6ML22H</user>
    <text>because after changing my types for half an hour, I'd be willing to accept an "undefined is not a function" =P</text>
  </message>
  <message>
    <ts>2017-07-05T03:52:21.325986</ts>
    <user>U0U6ML22H</user>
    <text>I don't see how that applies, would you please elaborate?</text>
  </message>
  <message>
    <ts>2017-07-05T03:56:10.399622</ts>
    <user>U153UK3FA</user>
    <text>`myObject[filter.key] === filter.value` can be written as ```
(case filter.key of
  "someKey" -&amp;gt; myObject.someKey)  == filter.value
``` and you’ll need to write a case for every field and every type you have in the collection you’re filtering</text>
  </message>
  <message>
    <ts>2017-07-05T03:57:41.429858</ts>
    <user>U0U6ML22H</user>
    <text>I don't think it's practical in my use case</text>
  </message>
  <message>
    <ts>2017-07-05T03:57:57.434992</ts>
    <user>U153UK3FA</user>
    <text>you can’t write this generically because it requires specific knowledge of the types you’re working with.</text>
  </message>
  <message>
    <ts>2017-07-05T03:58:30.446254</ts>
    <user>U0U6ML22H</user>
    <text>yeah, I know :smiley: I know all that, I know why, I was just asking if there was a workaround, in code or in modelling</text>
  </message>
  <message>
    <ts>2017-07-05T04:02:17.525202</ts>
    <user>U0U6ML22H</user>
    <text>thanks for your help &lt;@U153UK3FA&gt; and &lt;@U3SJEDR96&gt; :smiley:</text>
  </message>
  <message>
    <ts>2017-07-05T04:02:35.531315</ts>
    <user>U153UK3FA</user>
    <text>It’s one of the trade offs between static and dynamic languages</text>
  </message>
  <message>
    <ts>2017-07-05T04:13:08.745219</ts>
    <user>U0U6ML22H</user>
    <text>I ended up writing a "matchFilters" function for each data type and passing it to my generic Fitler handler</text>
  </message>
  <message>
    <ts>2017-07-05T04:15:14.788211</ts>
    <user>U41NK9BM4</user>
    <text>How many `matchFilters` do you have?</text>
  </message>
  <message>
    <ts>2017-07-05T04:20:37.901066</ts>
    <user>U0U6ML22H</user>
    <text>for now, I have three data types</text>
  </message>
  <message>
    <ts>2017-07-05T04:22:21.937606</ts>
    <user>U41NK9BM4</user>
    <text>A real non-issue, then (very little duplication)</text>
  </message>
  <message>
    <ts>2017-07-05T04:23:47.968322</ts>
    <user>U41NK9BM4</user>
    <text>I starting to believe that data, not code redundancy, is the real thing to avoid.</text>
  </message>
  <message>
    <ts>2017-07-05T04:24:35.985395</ts>
    <user>U0U6ML22H</user>
    <text>it'd be much better to write a list of accessors than to write a case of</text>
  </message>
  <message>
    <ts>2017-07-05T04:24:48.990207</ts>
    <user>U0U6ML22H</user>
    <text>makes much more sense from a semantic point of view</text>
  </message>
  <message>
    <ts>2017-07-05T04:25:29.005467</ts>
    <user>U0U6ML22H</user>
    <text>"here's a list of tools, do that thing you do with tools", better than "here's what you need to do; it so happens to be exactly the same every time, but i'll explain it to you form scratch anyway"</text>
  </message>
  <message>
    <ts>2017-07-05T04:25:58.016124</ts>
    <user>U0U6ML22H</user>
    <text>I like my code to express stuff</text>
  </message>
  <message>
    <ts>2017-07-05T04:26:13.021363</ts>
    <user>U0U6ML22H</user>
    <text>but I agree that, given the constraints, it's better to be pragmatic and do what you say :smiley:</text>
  </message>
  <message>
    <ts>2017-07-05T04:26:35.029775</ts>
    <user>U41NK9BM4</user>
    <text>Yes, one needs to cope with reality</text>
  </message>
  <message>
    <ts>2017-07-05T04:26:52.035776</ts>
    <user>U0U6ML22H</user>
    <text>damn you, reality!</text>
  </message>
  <message>
    <ts>2017-07-05T04:28:41.075416</ts>
    <user>U41NK9BM4</user>
    <text>I’ve spent too many hours crafting elegant OOP data structures and then see them collapsing after a “software requirement” change. So better move fast and don’t break things :wink:</text>
  </message>
  <message>
    <ts>2017-07-05T04:29:24.091502</ts>
    <user>U0U6ML22H</user>
    <text>yeah, I'm trying to limit breakage by not disseminating the logic across various modules, but, as with all things, it is a matter of balance, I agree</text>
  </message>
  <message>
    <ts>2017-07-05T05:35:48.578635</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U0LKV53U1&gt; hi there! I'm trying to use Date.Format to format the elm-community/elm-datepicker; I want to use monthToWord and dayOfWeekToWord but they're not exposed by your module. For now we'll copy-paste, but is there a reason not to expose them? Thanks for the library, it's really helpful :smiley:</text>
  </message>
  <message>
    <ts>2017-07-05T05:45:38.789499</ts>
    <user>U0U6ML22H</user>
    <text>OK, &lt;https://github.com/elm-lang/elm-compiler/issues/1549&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T05:45:41.790909</ts>
    <user>U3SJEDR96</user>
    <text>Known issue; ability to use qualified records has been merged in the `dev` branch of `elm-compiler` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T05:45:42.791296</ts>
    <user>U0U6ML22H</user>
    <text>sorry :smiley:</text>
  </message>
  <message>
    <ts>2017-07-05T05:47:32.830959</ts>
    <user>U3SJEDR96</user>
    <text>I.. think :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-05T05:52:19.935496</ts>
    <user>U41NK9BM4</user>
    <text>Well, let’s hope! It is an annoying asymmetry</text>
  </message>
  <message>
    <ts>2017-07-05T06:02:44.162543</ts>
    <user>U3SJEDR96</user>
    <text>you can sort of kind of work around it with `.baz Foo.bar` but yeah, that's not great either :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T06:07:29.257829</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0U6ML22H&gt; for each of your 3 types that you want to display in that table , can you can hold a list of "labels".  Now because this 3 types are different types - you need 3 different functions that extract thouse labels. 
`extractLabelsForFirstType: FirstTypeOfItemInThatTable -&amp;gt;  List Label` - and you have 3 of this functions. all tree returning just a `List Label`

and your query module/functionality will just check if this labels on this items - will match the filters selected.

`genericQueryItem : List filters -&amp;gt; List Label -&amp;gt; Bool` what i'm tring to say is - you don't let the `query thing` know about your types of items.  You just give him some labels - and based on the filters it has already selected - it gives you back if this list of labels is mached. Maybe i didn't underestoond your usecase too well but for what i have "in my head in terms of filtering" this should work.</text>
  </message>
  <message>
    <ts>2017-07-05T06:11:28.334406</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U2LAL86AY&gt; yeah, thanks, I think that's what I ended up going with :smiley:</text>
  </message>
  <message>
    <ts>2017-07-05T06:28:03.647472</ts>
    <user>U4KFY2V6V</user>
    <text>Is there a good way (or article) how to test http requests? Not the actual execution but the content or the url without bleeding too much into the implementation</text>
  </message>
  <message>
    <ts>2017-07-05T07:02:33.269380</ts>
    <user>U2LAL86AY</user>
    <text>there is this package - maybe it does what you want - i've  not worked with it yet. &lt;http://package.elm-lang.org/packages/rogeriochaves/elm-testable/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T07:02:53.275350</ts>
    <user>U2LAL86AY</user>
    <text>```
This package allows you to write components that follow the Elm Architecture in a way that is testable. To allow this, elm-testable provides testable versions of the Html, Task, Effects, Http and Process modules, as well as Testable.TestContext to test testable components and Testable to integrate testable components with your Elm app.
```</text>
  </message>
  <message>
    <ts>2017-07-05T07:03:03.278614</ts>
    <user>U1CE9DL9H</user>
    <text>you cal also parse the url back with `url-parser`</text>
  </message>
  <message>
    <ts>2017-07-05T08:29:36.887378</ts>
    <user>U17R1GD96</user>
    <text>I don’t understand how to pass a JSON object from JS to Elm in subscription. When I send something like `ports.payload.send({message: "HI!"})` what is actually sent? The JSON string, right? How to subscribe to that?</text>
  </message>
  <message>
    <ts>2017-07-05T08:30:23.904914</ts>
    <user>U17R1GD96</user>
    <text>I have `port payload : ({ message : String } -&amp;gt; msg) -&amp;gt; Sub msg`. I’m not sure how to write subscription funcion</text>
  </message>
  <message>
    <ts>2017-07-05T08:33:03.964893</ts>
    <user>U17R1GD96</user>
    <text>This has type mismatch ```subscriptions : { message : String } -&amp;gt; Sub Msg
subscriptions data =
    Sub.batch
        [ payload data
        ]```</text>
  </message>
  <message>
    <ts>2017-07-05T08:35:35.021729</ts>
    <user>U0CLDU8UB</user>
    <text>```
type Msg = Payload { message : String }

subscriptions : Model -&amp;gt; Sub Msg
subscriptions model =
    Sub.batch
        [ payload Payload
        ]
```</text>
  </message>
  <message>
    <ts>2017-07-05T08:35:48.026776</ts>
    <user>U0CLDU8UB</user>
    <text>This is how it should work</text>
  </message>
  <message>
    <ts>2017-07-05T08:38:42.092170</ts>
    <user>U17R1GD96</user>
    <text>I don’t want to subscribe to Model. It contains more things. I only want to load from JS some data.</text>
  </message>
  <message>
    <ts>2017-07-05T08:40:00.121723</ts>
    <user>U3LT1UTPF</user>
    <text>Hi. I need a dropdown select. I've seen several examples, but I don't know which one to take. Do you think this one is a good example to base mine on?: &lt;https://github.com/wintvelt/elm-dropdown/blob/master/examples/Single/Main.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T08:41:17.150860</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U17R1GD96&gt; you don't subscribe to model, but the `subscriptions` call that you have to `program` takes your `model` as the first argument by default, so you can decide _what_ to subscribe to based on the state of your model</text>
  </message>
  <message>
    <ts>2017-07-05T08:41:42.160695</ts>
    <user>U3SJEDR96</user>
    <text>so basically, you could have `subscriptions _ = payload Payload`</text>
  </message>
  <message>
    <ts>2017-07-05T08:42:11.171513</ts>
    <user>U3SJEDR96</user>
    <text>and then whenever you calll `ports.payload.send(whatever);`, your update will be called with a `Payload` message</text>
  </message>
  <message>
    <ts>2017-07-05T08:44:31.226262</ts>
    <user>U17R1GD96</user>
    <text>OK. I understand. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-05T08:46:45.277839</ts>
    <user>U17R1GD96</user>
    <text>I have related question to that. I want to pass more complex JSON object from JS to Elm. The full init data for the Model. Do I need  to create some decoder for that? I did not need to create any decoder for passing simple JSON object  `{message:'HI!'}`.</text>
  </message>
  <message>
    <ts>2017-07-05T08:48:33.320507</ts>
    <user>U3SJEDR96</user>
    <text>the automatic conversion can handle a decent amount of things (with a notable lack of support for union types). Also, the automatic conversion doesn't let you handle errors gracefully. As such, it _is_ generally recommended that you make your `port payload : (Json.Encode.Value -&amp;gt; msg) -&amp;gt; Sub msg`</text>
  </message>
  <message>
    <ts>2017-07-05T08:50:24.364946</ts>
    <user>U3SJEDR96</user>
    <text>which means that, indeed, you would write a JSON decoder in Elm. For example, if you had a `payloadDecoder : Decoder Data` and a `type Msg = Payload (Result String Data)`, you could set up a subscription `subscriptions model = Json.Decode.decodeValue payloadDecoder &amp;gt;&amp;gt; Payload`</text>
  </message>
  <message>
    <ts>2017-07-05T09:33:14.585746</ts>
    <user>U1D7SLE4Q</user>
    <text>So, I have a Hugo generated static website and I want to use Elm for small interactive pieces here and there in it. I have a separate prototype of these small apps boilerplated with create-elm-app. Now I want to merge it all together in a nice way, but not sure how to set up the whole assets pipeline in a reasonable way. If you have any related experience or suggestions, let’s start a thread!</text>
  </message>
  <message>
    <ts>2017-07-05T09:34:12.616242</ts>
    <user>U17R1GD96</user>
    <text>&lt;@U3SJEDR96&gt; I am trying yo write full decoder. I’m stuck with subscriptions and update. The code is : 
```</text>
  </message>
  <message>
    <ts>2017-07-05T09:42:25.880305</ts>
    <user>U17R1GD96</user>
    <text>I also need to rename the original theme_uri to themeUri used in  my Model.</text>
  </message>
  <message>
    <ts>2017-07-05T09:42:48.893356</ts>
    <user>U17R1GD96</user>
    <text>and class to class_</text>
  </message>
  <message>
    <ts>2017-07-05T09:44:00.932666</ts>
    <user>U3SJEDR96</user>
    <text>alright, so, 
- `port payload : (Model -&amp;gt; msg) -&amp;gt; Sub msg` should be `(Json.Decode.Value -&amp;gt; msg ) -&amp;gt; Sub msg`
- the type of `Payload` is a little wonky, should be `Payload (Result String Model)`
- subscriptions needs to handle the JSON decoding AND hand the function to go from `Value -&amp;gt; Msg` to your subscription itself: `payload (decodeValue payloadDecoder &amp;gt;&amp;gt; Payload)`</text>
  </message>
  <message>
    <ts>2017-07-05T09:44:47.958410</ts>
    <user>U3SJEDR96</user>
    <text>`class` is allowed in elm, btw, no need for an underscore there :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T09:45:22.978035</ts>
    <user>U17R1GD96</user>
    <text>well, when I extract it I have a conflict with class from Html</text>
  </message>
  <message>
    <ts>2017-07-05T09:45:39.987679</ts>
    <user>U3SJEDR96</user>
    <text>oh, okay</text>
  </message>
  <message>
    <ts>2017-07-05T09:45:41.988693</ts>
    <user>U17R1GD96</user>
    <text>```subHeaderMenuView : List Subheader -&amp;gt; Html msg
subHeaderMenuView items =
    let
        build : Subheader -&amp;gt; Html msg
        build { class_, url, title } =
            li [ class class_ ]
                [ a [ href url ] [ text title ] ]
    in
    div [ class "sub-menu" ]
        [ ul [ class "flex-grid" ] (List.map build items) ]
```</text>
  </message>
  <message>
    <ts>2017-07-05T09:46:12.004917</ts>
    <user>U3SJEDR96</user>
    <text>either way, your json representation doesn't need to match the elm structure word for word</text>
  </message>
  <message>
    <ts>2017-07-05T09:50:07.134184</ts>
    <user>U17R1GD96</user>
    <text>```subscriptions : Model -&amp;gt; Sub (Result String Model)
subscriptions model =
    payload (Json.Decode.decodeValue payloadDecoder)
```
still some errors for main ```main : Program Never Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }```

```Function `program` is expecting the argument to be:

    { ..., subscriptions : Model -&amp;gt; Sub Msg }

But it is:

    { ..., subscriptions : Model -&amp;gt; Sub (Result String Model) }```</text>
  </message>
  <message>
    <ts>2017-07-05T09:51:25.177996</ts>
    <user>U3SJEDR96</user>
    <text>yeah, because you removed `&amp;gt;&amp;gt; Payload` :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-05T09:51:57.196637</ts>
    <user>U3SJEDR96</user>
    <text>which is the part the says "take the result of the function on the left and apply this function on that; with `Payload : Result String Model -&amp;gt; Msg`</text>
  </message>
  <message>
    <ts>2017-07-05T09:52:14.205770</ts>
    <user>U17R1GD96</user>
    <text>Like this? ```subscriptions : Model -&amp;gt; Sub (Result String Model)
subscriptions model =
    payload (Json.Decode.decodeValue payloadDecoder) &amp;gt;&amp;gt; Payload
```</text>
  </message>
  <message>
    <ts>2017-07-05T09:52:30.215239</ts>
    <user>U3SJEDR96</user>
    <text>`payload (Json.Decode.decodeValue payloadDecoder  &amp;gt;&amp;gt; Payload)`</text>
  </message>
  <message>
    <ts>2017-07-05T09:53:01.233237</ts>
    <user>U3SJEDR96</user>
    <text>you could alternatively write that like so: `payload (\json -&amp;gt; Json.Decode.decodeValue payloadDecoder json |&amp;gt; Payload)` if that makes more sense to you :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T09:54:16.276097</ts>
    <user>U0CLDU8UB</user>
    <text>and also, `subscriptions : Model -&amp;gt; Sub Msg`</text>
  </message>
  <message>
    <ts>2017-07-05T09:55:26.317736</ts>
    <user>U17R1GD96</user>
    <text>It’s OK. I understand &amp;gt;&amp;gt;. This has no errors: ```subscriptions : Model -&amp;gt; Sub Msg
subscriptions model =
    payload (Json.Decode.decodeValue payloadDecoder &amp;gt;&amp;gt; Payload)```</text>
  </message>
  <message>
    <ts>2017-07-05T09:55:48.330823</ts>
    <user>U17R1GD96</user>
    <text>My update still does not work. This is wrong: ```update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        Payload data -&amp;gt;
            { model | themeUri = data.theme_uri }
                ! []```</text>
  </message>
  <message>
    <ts>2017-07-05T09:56:00.337551</ts>
    <user>U17R1GD96</user>
    <text>````data` does not have a field named `theme_uri`.

67|             { model | themeUri = data.theme_uri }
                                     ^^^^^^^^^^^^^^
The type of `data` is:

    Result String Model```</text>
  </message>
  <message>
    <ts>2017-07-05T09:56:51.367064</ts>
    <user>U17R1GD96</user>
    <text>the same the `{ model | themeUri = data.themeUri }`</text>
  </message>
  <message>
    <ts>2017-07-05T09:59:55.475839</ts>
    <user>U3SJEDR96</user>
    <text>`data` at that point is a `Result String Model` because if someone sends you bad values, you want to handle that somehow, too</text>
  </message>
  <message>
    <ts>2017-07-05T10:00:23.494355</ts>
    <user>U17R1GD96</user>
    <text>yes, just found it may contain errors I have to handle somehow</text>
  </message>
  <message>
    <ts>2017-07-05T10:00:50.510838</ts>
    <user>U3SJEDR96</user>
    <text>so you can
```
case msg of
  Payload (Ok data) -&amp;gt; { model | themeUri = data.themeUri } ! []
  Payload (Err error) -&amp;gt; { model | error = error } ! []
```</text>
  </message>
  <message>
    <ts>2017-07-05T10:00:54.513660</ts>
    <user>U3SJEDR96</user>
    <text>or something along those lines</text>
  </message>
  <message>
    <ts>2017-07-05T10:33:11.656695</ts>
    <user>U17R1GD96</user>
    <text>Almost working. My model is not changing. I have init with some initial fake data. My  model should be overwritten by update, right? It looks like the model is keeping only that init data values.</text>
  </message>
  <message>
    <ts>2017-07-05T10:34:35.707492</ts>
    <user>U0J1M0F32</user>
    <text>I would imagine that the model is not _actually_ being updated then for some reason. Either the wrong action is firing or there is some sort of issue in the `update` function.</text>
  </message>
  <message>
    <ts>2017-07-05T10:38:00.828877</ts>
    <user>U0J1M0F32</user>
    <text>Maybe I missed it, where is the code that kicks off the Ajax request?</text>
  </message>
  <message>
    <ts>2017-07-05T10:38:02.830560</ts>
    <user>U17R1GD96</user>
    <text>My JS is using React ```import React from 'react'
import Elm from 'react-elm-components'
import { connect } from 'cerebral/react'
import { state } from 'cerebral/tags'
import { HeaderModule } from '../../elm/dist/elm'

export default connect({
    themeUri: state`app.theme_uri`,
    headers: state`app.header`,

  }, function Header ({themeUri, headers}) {

    function setupPorts (ports) {
      ports.payload.send({themeUri, headers})
    }

    return &amp;lt;Elm src={HeaderModule} ports={setupPorts}/&amp;gt;
  },
)```</text>
  </message>
  <message>
    <ts>2017-07-05T10:38:24.843364</ts>
    <user>U17R1GD96</user>
    <text>I don’t have AJAX calls.</text>
  </message>
  <message>
    <ts>2017-07-05T10:38:32.848051</ts>
    <user>U17R1GD96</user>
    <text>I pass data from JS</text>
  </message>
  <message>
    <ts>2017-07-05T10:38:37.850734</ts>
    <user>U0J1M0F32</user>
    <text>Ah I see the port now.</text>
  </message>
  <message>
    <ts>2017-07-05T10:39:25.880217</ts>
    <user>U0J1M0F32</user>
    <text>Have you tried loading the elm app through the elm-reactor or using `Debug.log` inside the `update` function to see what events are firing. My gut says something is not sending the payload to the app.</text>
  </message>
  <message>
    <ts>2017-07-05T10:39:39.889014</ts>
    <user>U23SA861Y</user>
    <text>wheres the fun in coding something if the API is stable, pfft.</text>
  </message>
  <message>
    <ts>2017-07-05T10:42:25.988378</ts>
    <user>U17R1GD96</user>
    <text>It’s like that message is never executed…</text>
  </message>
  <message>
    <ts>2017-07-05T10:43:23.023789</ts>
    <user>U0J1M0F32</user>
    <text>I wonder if this issue is in redux, and something is going wrong with the Thunk.</text>
  </message>
  <message>
    <ts>2017-07-05T10:44:53.078257</ts>
    <user>U17R1GD96</user>
    <text>I don’t use Redux. I use Cerebral. I pass the data to ports</text>
  </message>
  <message>
    <ts>2017-07-05T10:44:54.079113</ts>
    <user>U0J1M0F32</user>
    <text>I would add the debug call outside of the case statement, even though I'm pretty sure no messages are being sent through the port.

Perhaps also put a `console.log` in the `setupPorts` function.</text>
  </message>
  <message>
    <ts>2017-07-05T10:44:58.081740</ts>
    <user>U0J1M0F32</user>
    <text>Gotcha.</text>
  </message>
  <message>
    <ts>2017-07-05T10:45:29.101270</ts>
    <user>U2H4UJE9Z</user>
    <text>&lt;@U17R1GD96&gt; Might be nothing, but in your `payloadDecoder` you have `|&amp;gt; required "error" string`, but you only pass `{themeUri, headers}` through your port (also, your decoder expects `theme_uri` and not `themeUri`)</text>
  </message>
  <message>
    <ts>2017-07-05T10:47:40.183251</ts>
    <user>U2H4UJE9Z</user>
    <text>You can try to use `optional` (&lt;http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/3.0.0/Json-Decode-Pipeline#optional&gt;) instead of `required`.</text>
  </message>
  <message>
    <ts>2017-07-05T10:50:20.283064</ts>
    <user>U4872964V</user>
    <text>You should see a `Payload (Err ...)` message in that case though</text>
  </message>
  <message>
    <ts>2017-07-05T10:50:56.305688</ts>
    <user>U4872964V</user>
    <text>but maybe you weren’t looking for that, should show up in the debugger</text>
  </message>
  <message>
    <ts>2017-07-05T10:51:58.344359</ts>
    <user>U17R1GD96</user>
    <text>I fixed theme_uri. The data in JS are fine. console.log shows all is OK in setupPorts</text>
  </message>
  <message>
    <ts>2017-07-05T10:52:32.366069</ts>
    <user>U17R1GD96</user>
    <text>OK. I added Debug.log to error and I have something</text>
  </message>
  <message>
    <ts>2017-07-05T10:52:50.377175</ts>
    <user>U4872964V</user>
    <text>When i debug messages, I usually put a `case Debug.log "update" msg of` in the `update` funciton</text>
  </message>
  <message>
    <ts>2017-07-05T10:53:23.396867</ts>
    <user>U17R1GD96</user>
    <text>nice, I will add it there</text>
  </message>
  <message>
    <ts>2017-07-05T10:53:28.400585</ts>
    <user>U4872964V</user>
    <text>then you get a nice listing of all messages</text>
  </message>
  <message>
    <ts>2017-07-05T10:56:33.516010</ts>
    <user>U17R1GD96</user>
    <text>```update: Payload (Err "Expecting an object with a field named `error` but instead got: {\"themeUri\": ...```</text>
  </message>
  <message>
    <ts>2017-07-05T10:56:53.528938</ts>
    <user>U17R1GD96</user>
    <text>strange</text>
  </message>
  <message>
    <ts>2017-07-05T10:58:16.580585</ts>
    <user>U2H4UJE9Z</user>
    <text>Try exchanging `|&amp;gt; required "error" string` in payloadDecoder with `|&amp;gt; optional "error" string ""`</text>
  </message>
  <message>
    <ts>2017-07-05T10:59:14.616815</ts>
    <user>U2H4UJE9Z</user>
    <text>If you use the `required` function, it will fail the decoding with the error you are seeing (unless you actually add a property called "error" to the data sent through the port)</text>
  </message>
  <message>
    <ts>2017-07-05T11:00:49.679344</ts>
    <user>U17R1GD96</user>
    <text>uff, works!! (I only needed to rename “class_” to “class” because my data uses “class”)</text>
  </message>
  <message>
    <ts>2017-07-05T11:02:40.750109</ts>
    <user>U17R1GD96</user>
    <text>That was good lesson. Thanks all for help</text>
  </message>
  <message>
    <ts>2017-07-05T11:20:21.397277</ts>
    <user>U4872964V</user>
    <text>it seems strange to use `Model` as your payload type though</text>
  </message>
  <message>
    <ts>2017-07-05T12:59:14.768625</ts>
    <user>U0CL0AS3V</user>
    <text>sounds like documentation would take all the fun out of it then :wink:</text>
  </message>
  <message>
    <ts>2017-07-05T13:03:23.906590</ts>
    <user>U23SA861Y</user>
    <text>It seems fairly straight forward if you want to make js functions available to elm, just need to set a name mangled variable with a record of function pointers. But the when it comes to creating something at main, there are a few compiler defined functions I can't track down like `F2` and `A2`</text>
  </message>
  <message>
    <ts>2017-07-05T13:47:43.276731</ts>
    <user>U5ABF3BH7</user>
    <text>Hello, I am looking for advice on how to organize my views. I have a very long complex page which is the page I am working on (Views.FirstCall). Right now, this view is divided into different views representing the different sections in the page (PersonInfo.elm, Location.elm, Caller.elm, Appointment.elm...etc..). I am trying to re-organize them as we had the data and views all mixed up.  I am wondering if I should structure all the sub-views related to FirstCall page into a special folder or if it is un-necessary and I should just put them all under the Views folder? Any advice of people who have experience?</text>
  </message>
  <message>
    <ts>2017-07-05T13:56:47.566969</ts>
    <user>U23SA861Y</user>
    <text>one looks like a cast of a 2 parameter function into the elm type and the other seems to act similarly for evaluation.</text>
  </message>
  <message>
    <ts>2017-07-05T13:57:39.595354</ts>
    <user>U23SA861Y</user>
    <text>how many LOC are we talking</text>
  </message>
  <message>
    <ts>2017-07-05T14:02:04.744292</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U23SA861Y&gt; What do you mean by LOC?</text>
  </message>
  <message>
    <ts>2017-07-05T14:02:17.751029</ts>
    <user>U23SA861Y</user>
    <text>lines of code, how big is all of this?</text>
  </message>
  <message>
    <ts>2017-07-05T14:04:00.807373</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U23SA861Y&gt; 1500 to 2000</text>
  </message>
  <message>
    <ts>2017-07-05T14:04:20.817843</ts>
    <user>U5ABF3BH7</user>
    <text>main view plus sub views</text>
  </message>
  <message>
    <ts>2017-07-05T14:07:10.909770</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U23SA861Y&gt; Any suggestion?</text>
  </message>
  <message>
    <ts>2017-07-05T14:10:12.004439</ts>
    <user>U23SA861Y</user>
    <text>Its hard to say</text>
  </message>
  <message>
    <ts>2017-07-05T14:11:07.034476</ts>
    <user>U23SA861Y</user>
    <text>how reusable is this code</text>
  </message>
  <message>
    <ts>2017-07-05T14:11:58.060220</ts>
    <user>U5ABF3BH7</user>
    <text>maybe one fourth is reusable</text>
  </message>
  <message>
    <ts>2017-07-05T14:12:25.074454</ts>
    <user>U23SA861Y</user>
    <text>then only about one fourth should be factored out into a seperate package</text>
  </message>
  <message>
    <ts>2017-07-05T14:13:29.108180</ts>
    <user>U1CE9DL9H</user>
    <text>also in general fewer files is better, so see if you can combine some of those files.</text>
  </message>
  <message>
    <ts>2017-07-05T14:14:00.124282</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U23SA861Y&gt; &lt;@U1CE9DL9H&gt; Thanks!</text>
  </message>
  <message>
    <ts>2017-07-05T14:15:15.164190</ts>
    <user>U23SA861Y</user>
    <text>it might be a long file but that's more a stigma more than a rule</text>
  </message>
  <message>
    <ts>2017-07-05T14:15:33.173732</ts>
    <user>U1CE9DL9H</user>
    <text>I think this project is structured really nicely &lt;https://github.com/rtfeldman/elm-spa-example/tree/master/src&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T14:16:42.209599</ts>
    <user>U1CE9DL9H</user>
    <text>evan describes the fear of long files as based on "javascript folk knowledge" in his elm europe talk; as elm is a pure language, we don't need modules as much to split up code</text>
  </message>
  <message>
    <ts>2017-07-05T14:16:55.216513</ts>
    <user>U1CE9DL9H</user>
    <text>because there can never be weird interactions, no matter how long our file is</text>
  </message>
  <message>
    <ts>2017-07-05T14:21:45.365767</ts>
    <user>U0JFGGZS6</user>
    <text>I agree elm-spa-example is nice, but I wonder about using it as a "template".  In some sense it's too many files to begin with isn't it?  Unless you are confident the way you eventually will divide up your app is the same way the example app does it.</text>
  </message>
  <message>
    <ts>2017-07-05T14:28:41.587764</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U5ABF3BH7&gt; I like to split code into files so that one file considers one thing. I know this is kind of vague, but I think about it something like this: "the sidebar is a thing, I'll make that have its own file - it only has a single menu for now though, so it's still just a single thing". Does that make sense?</text>
  </message>
  <message>
    <ts>2017-07-05T14:29:25.611738</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U5ABF3BH7&gt;  Do you know ahead of time these sections "PersonInfo.elm, Location.elm, Caller.elm, Appointment.elm...etc."  are going to need to be used in several places, not just in this FirstCall view?  Then it makes sense to split them out from the beginning. But if you only know that you need them for FirstCall, I'd start with them all in FirstCall.elm.</text>
  </message>
  <message>
    <ts>2017-07-05T14:30:09.635599</ts>
    <user>U0CLDU8UB</user>
    <text>I don't have any sort of "lines of code" or other metric to tell if a view file is too long. This vague idea has worked pretty well for us in a couple of year-long projects, though.</text>
  </message>
  <message>
    <ts>2017-07-05T14:31:28.678387</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0JFGGZS6&gt; Yes, I know which parts are reusable, only a small portion is reusable. Thanks</text>
  </message>
  <message>
    <ts>2017-07-05T14:32:05.699480</ts>
    <user>U0CLDU8UB</user>
    <text>There are two aspects to splitting view code into several modules in my opinion: one is reusability, the other is managing mental overhead.</text>
  </message>
  <message>
    <ts>2017-07-05T14:32:37.717167</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0CLDU8UB&gt; In other languages, it seems wrong to have a file with 800 lines of code, but in Elm, it seems like the practice differs.</text>
  </message>
  <message>
    <ts>2017-07-05T14:33:58.760507</ts>
    <user>U0CLDU8UB</user>
    <text>Yes. At some point, it becomes too much of a hassle to find what you're looking for in the file. This is when it makes sense to split out some of the "implementation details" even if there's no real case for reuse.</text>
  </message>
  <message>
    <ts>2017-07-05T14:35:28.809250</ts>
    <user>U0JFGGZS6</user>
    <text>That's true. It's sometimes "is this too much pain to tolerate" feeling.</text>
  </message>
  <message>
    <ts>2017-07-05T14:35:42.816252</ts>
    <user>U0LPMPL2U</user>
    <text>In OO languages, breaking into separate files is about encapsulation and long files are a smell typically pointing to a class that has too many responsibilities.</text>
  </message>
  <message>
    <ts>2017-07-05T14:37:38.877748</ts>
    <user>U0JFGGZS6</user>
    <text>I think following the elm-spa-example from the start is fine too, in a sense it's using the same principle, it's "I know I'm going to want to load data separately for each page, and the type of this data is shared between pages in some places, so might as well split out separate page views and split data models and request APIs from views"</text>
  </message>
  <message>
    <ts>2017-07-05T14:39:42.941452</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0JFGGZS6&gt; yes, that makes sense</text>
  </message>
  <message>
    <ts>2017-07-05T14:39:54.947609</ts>
    <user>U0CLDU8UB</user>
    <text>Also, in OO long methods are discouraged because they likely do a bunch of things, and it is very hard to gain a quick overview of _what does this code do_ since you can mutate things and cause side effects in the middle.</text>
  </message>
  <message>
    <ts>2017-07-05T14:41:55.009346</ts>
    <user>U0LPMPL2U</user>
    <text>I'd say that "long functions are confusing to read" can also apply to Elm</text>
  </message>
  <message>
    <ts>2017-07-05T14:42:16.019932</ts>
    <user>U0LPMPL2U</user>
    <text>but not always</text>
  </message>
  <message>
    <ts>2017-07-05T14:42:21.022253</ts>
    <user>U23SA861Y</user>
    <text>they can be, particularly if you have a few lets in flight</text>
  </message>
  <message>
    <ts>2017-07-05T14:42:40.031829</ts>
    <user>U0CLDU8UB</user>
    <text>The difference is that in Elm, you can look at `User -&amp;gt; Html msg` and immediately write off that this function or any helper function that it might be using *cannot* do anything but produce HTML without any event listeners.</text>
  </message>
  <message>
    <ts>2017-07-05T14:42:44.034055</ts>
    <user>U0LPMPL2U</user>
    <text>a long `update` that just proxies a lot of `Msg` values to a function are actually very readable</text>
  </message>
  <message>
    <ts>2017-07-05T14:47:18.182395</ts>
    <user>U0CLDU8UB</user>
    <text>Sure, I'm not advocating 200-line functions.</text>
  </message>
  <message>
    <ts>2017-07-05T15:18:40.146438</ts>
    <user>U2LAL86AY</user>
    <text>hey does anyone experience a slack memory leak - every time i open slack my ram goes form 500MB to 2.2Gb - just Firefox. When i close slack it goes back to normal.. is this common? Because  it doesn't sound very performant :smile: ..</text>
  </message>
  <message>
    <ts>2017-07-05T15:21:07.216824</ts>
    <user>U32H3RA87</user>
    <text>Is there a way to see an auto generated changelog of an elm package? It seems like it would be feasible given the auto versioning.</text>
  </message>
  <message>
    <ts>2017-07-05T15:21:28.226358</ts>
    <user>U32H3RA87</user>
    <text>just to look at api changes, not necessarily the commit message or whatever that are related</text>
  </message>
  <message>
    <ts>2017-07-05T15:22:37.258528</ts>
    <user>U0LPMPL2U</user>
    <text>`elm package diff`</text>
  </message>
  <message>
    <ts>2017-07-05T15:23:56.295609</ts>
    <user>U32H3RA87</user>
    <text>amazing, thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T15:41:17.783493</ts>
    <user>U2D7NUGS1</user>
    <text>I'm thinking about automating release maintenance with a shell script. There is quite a few repetitive steps that are human error prone: 
1. diff 
2. update changelog (move items from unreleased to release section with correct version and date) 
3. bump
4. commit
5. tag 
6. push
7. publish 
8. celebrate
Automating the last one is perhaps not useful, but you get my point  So first thing I've run into is how to get next version string. The only way I see is to run `elm package bump` and then terminate it without actual bumping. It displays version change and of course I could capture the output and do some `sed` or `grep` magic.
Is there more straight forward way? IMO `elm package diff` should have an option to display it in machine friendly format, but apparently it does not.</text>
  </message>
  <message>
    <ts>2017-07-05T15:42:36.819436</ts>
    <user>U2D7NUGS1</user>
    <text>```
$ elm package bump       
Based on your new API, this should be a PATCH change (1.0.3 =&amp;gt; 1.0.4)
Bail out of this command and run 'elm-package diff' for a full explanation.

Should I perform the update (1.0.3 =&amp;gt; 1.0.4) in elm-package.json? [Y/n] n
Okay, no changes were made.
```</text>
  </message>
  <message>
    <ts>2017-07-05T15:43:18.839106</ts>
    <user>U2D7NUGS1</user>
    <text>Or maybe I'm just doing it wrong?</text>
  </message>
  <message>
    <ts>2017-07-05T15:44:38.875953</ts>
    <user>U1CE9DL9H</user>
    <text>why not let it update, then read from the elm-package json?</text>
  </message>
  <message>
    <ts>2017-07-05T15:44:59.885778</ts>
    <user>U2D7NUGS1</user>
    <text>Oh, yeah!</text>
  </message>
  <message>
    <ts>2017-07-05T15:45:02.887585</ts>
    <user>U2D7NUGS1</user>
    <text>Silly me :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T15:45:10.891243</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks.</text>
  </message>
  <message>
    <ts>2017-07-05T16:50:09.765394</ts>
    <user>U2D7NUGS1</user>
    <text>Ok, here it is: &lt;https://github.com/lzrski/elm-polymer/blob/master/scripts/bump-and-publish&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T16:50:27.774091</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks again &lt;@U1CE9DL9H&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T17:57:54.451042</ts>
    <user>U64A0BYHH</user>
    <text>Hey everyone! I decided to try out a white-board challenge we like to do in other languages, in Elm, and found that it hits a stack level too deep when the number gets to 10 numbers - this doesn’t happen w/ other languages if anyone can offer suggestions or explanations? The challenge is simple; write a program that outputs every combo of letters that a given phone number can produce: &lt;https://ellie-app.com/3BGtscn55tja1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T17:59:55.494303</ts>
    <user>U23SA861Y</user>
    <text>generally recursion can be avoided and replaced with a fold or map</text>
  </message>
  <message>
    <ts>2017-07-05T18:00:07.499130</ts>
    <user>U0FP80EKB</user>
    <text>Also, you would write to write your recursion so that it can be tail call optimized</text>
  </message>
  <message>
    <ts>2017-07-05T18:00:13.501463</ts>
    <user>U0FP80EKB</user>
    <text>which Elm does do</text>
  </message>
  <message>
    <ts>2017-07-05T18:00:27.506886</ts>
    <user>U23SA861Y</user>
    <text>also yes if you must use recursion it should allow for TCO</text>
  </message>
  <message>
    <ts>2017-07-05T18:01:02.519540</ts>
    <user>U0FP80EKB</user>
    <text>The way you have it written expands all the cases before finishing any of them.</text>
  </message>
  <message>
    <ts>2017-07-05T18:02:10.543988</ts>
    <user>U0FP80EKB</user>
    <text>The call tree on that code is going to get REALLY large really quickly</text>
  </message>
  <message>
    <ts>2017-07-05T18:02:51.558364</ts>
    <user>U23SA861Y</user>
    <text>well a typical phone number is only 10 digits (assuming NA) which I think is only 70k or so possibilities</text>
  </message>
  <message>
    <ts>2017-07-05T18:03:01.561821</ts>
    <user>U0FP80EKB</user>
    <text>That’s a pretty big call stack</text>
  </message>
  <message>
    <ts>2017-07-05T18:03:13.565946</ts>
    <user>U23SA861Y</user>
    <text>fair enough</text>
  </message>
  <message>
    <ts>2017-07-05T18:05:05.604102</ts>
    <user>U23SA861Y</user>
    <text>It should be possible to compose the function `Phonenumber -&amp;gt; Int -&amp;gt; String` and then just range over the it</text>
  </message>
  <message>
    <ts>2017-07-05T18:20:32.891761</ts>
    <user>U64A0BYHH</user>
    <text>Interesting - I would LOVE to see an iterative solution to this - I can’t wrap my head around it</text>
  </message>
  <message>
    <ts>2017-07-05T18:26:09.993586</ts>
    <user>U0FP80EKB</user>
    <text>I like the recursive solution, but you’ll want to write it in a way that can be TCO</text>
  </message>
  <message>
    <ts>2017-07-05T18:29:30.052345</ts>
    <user>U23SA861Y</user>
    <text>is there an identity type for appendable</text>
  </message>
  <message>
    <ts>2017-07-05T18:29:44.056655</ts>
    <user>U23SA861Y</user>
    <text>that works for both lists and strings say</text>
  </message>
  <message>
    <ts>2017-07-05T18:30:20.067428</ts>
    <user>U64A0BYHH</user>
    <text>Yeah &lt;@U0FP80EKB&gt; - I couldn’t get the TCO working since the recursion happens inside the map…</text>
  </message>
  <message>
    <ts>2017-07-05T18:31:19.085455</ts>
    <user>U0FP80EKB</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T18:41:44.262190</ts>
    <user>U0FP80EKB</user>
    <text>Maybe look at a way without the pipeline like that</text>
  </message>
  <message>
    <ts>2017-07-05T18:42:19.271922</ts>
    <user>U0FP80EKB</user>
    <text>Often recursion and map are tough to get working together when you want TCO. recursion often takes the place of mapping.</text>
  </message>
  <message>
    <ts>2017-07-05T18:48:22.370343</ts>
    <user>U23SA861Y</user>
    <text>interesting without recursion it still blows the stack</text>
  </message>
  <message>
    <ts>2017-07-05T18:48:30.372453</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3FY8YRHcqvka1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T18:50:28.404304</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3FY8YRHcqvka1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T18:53:25.452526</ts>
    <user>U23SA861Y</user>
    <text>not sure why that is</text>
  </message>
  <message>
    <ts>2017-07-05T18:57:26.515046</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U64A0BYHH&gt; ^ here is an iterative solution, however it suffers from the same problem as yours which I find troublesome</text>
  </message>
  <message>
    <ts>2017-07-05T18:57:48.521011</ts>
    <user>U64A0BYHH</user>
    <text>amazing - thank you for doing that - perhaps there is a bigger issue here…?</text>
  </message>
  <message>
    <ts>2017-07-05T18:59:01.540408</ts>
    <user>U0FP80EKB</user>
    <text>I’d recommend putting in a `Debug.log` in there to see what is going on. I bet you are still building up a call stack before exiting.</text>
  </message>
  <message>
    <ts>2017-07-05T18:59:37.549821</ts>
    <user>U23SA861Y</user>
    <text>That is almost certainly the case, however I am only ever using stdlib implementation of map and foldl</text>
  </message>
  <message>
    <ts>2017-07-05T19:03:38.616566</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U0FP80EKB&gt; how would Debug.log dump the stack?</text>
  </message>
  <message>
    <ts>2017-07-05T19:04:41.633099</ts>
    <user>U0FP80EKB</user>
    <text>I’d just put them in and watch how often it gets called before a final “done” is emitted</text>
  </message>
  <message>
    <ts>2017-07-05T19:04:53.636219</ts>
    <user>U0FP80EKB</user>
    <text>So, use it to build up a view of the call stack</text>
  </message>
  <message>
    <ts>2017-07-05T19:08:19.688706</ts>
    <user>U23SA861Y</user>
    <text>mind taking a peak at the ellie as to where that would make sense</text>
  </message>
  <message>
    <ts>2017-07-05T19:08:53.697411</ts>
    <user>U23SA861Y</user>
    <text>after all, all the range traversals are encoded as maps or folds which makes it difficult to see a growing stack in the traversals</text>
  </message>
  <message>
    <ts>2017-07-05T19:10:01.714436</ts>
    <user>U0FP80EKB</user>
    <text>sure, let me take a look</text>
  </message>
  <message>
    <ts>2017-07-05T19:20:50.871730</ts>
    <user>U23SA861Y</user>
    <text>some of this stdlib stuff is native javascript and not TCO'd although I would suspect in that case they would just use a loop to accomplish this</text>
  </message>
  <message>
    <ts>2017-07-05T19:21:09.876232</ts>
    <user>U23SA861Y</user>
    <text>as a result, I have no idea why the stack would be popping here</text>
  </message>
  <message>
    <ts>2017-07-05T19:26:21.951601</ts>
    <user>U0FP80EKB</user>
    <text>yeah, interesting. It isn’t immediately obvious. My guess is that it has to do with the pipeline</text>
  </message>
  <message>
    <ts>2017-07-05T19:27:35.969111</ts>
    <user>U0FP80EKB</user>
    <text>something, I suspect, is being eagerly evaluated.</text>
  </message>
  <message>
    <ts>2017-07-05T19:28:23.980560</ts>
    <user>U23SA861Y</user>
    <text>well it's elm so everything is eager</text>
  </message>
  <message>
    <ts>2017-07-05T19:28:46.986095</ts>
    <user>U23SA861Y</user>
    <text>I'm not sure what governs where JS puts it's data</text>
  </message>
  <message>
    <ts>2017-07-05T19:28:47.986504</ts>
    <user>U0FP80EKB</user>
    <text>yeah, so I’m thinking something is being too eager. My guess is the pipeline. Still looking</text>
  </message>
  <message>
    <ts>2017-07-05T19:28:55.988352</ts>
    <user>U23SA861Y</user>
    <text>I presume it's all on the heap</text>
  </message>
  <message>
    <ts>2017-07-05T19:45:34.213433</ts>
    <user>U0FP80EKB</user>
    <text>So, looking at the stack, I think the pipeline is currying the functions and somewhere getting caught up. Haven’t found where, though.</text>
  </message>
  <message>
    <ts>2017-07-05T19:46:31.225778</ts>
    <user>U23SA861Y</user>
    <text>currying the functions, I was under the presumption that pipe was simply `(|&amp;gt;) a f = f a`</text>
  </message>
  <message>
    <ts>2017-07-05T19:46:51.230253</ts>
    <user>U0FP80EKB</user>
    <text>here’s something</text>
  </message>
  <message>
    <ts>2017-07-05T19:47:03.232791</ts>
    <user>U0FP80EKB</user>
    <text>If you just do 1s, it doesn’t blow the stack</text>
  </message>
  <message>
    <ts>2017-07-05T19:47:19.236096</ts>
    <user>U0FP80EKB</user>
    <text>Because there is only one item in the list</text>
  </message>
  <message>
    <ts>2017-07-05T19:47:21.236619</ts>
    <user>U23SA861Y</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-05T19:48:04.245439</ts>
    <user>U23SA861Y</user>
    <text>that just means its correlated with list length which is not unexpected</text>
  </message>
  <message>
    <ts>2017-07-05T19:55:10.337861</ts>
    <user>U0FP80EKB</user>
    <text>okay, not the pipeline. But, something about nesting the currying in the foldl</text>
  </message>
  <message>
    <ts>2017-07-05T19:56:13.351665</ts>
    <user>U23SA861Y</user>
    <text>really?</text>
  </message>
  <message>
    <ts>2017-07-05T19:56:33.356251</ts>
    <user>U0FP80EKB</user>
    <text>Well, the call stack is blowing on A2, which handles calling 2-parameter functions that have been curried</text>
  </message>
  <message>
    <ts>2017-07-05T19:57:15.365063</ts>
    <user>U0FP80EKB</user>
    <text>Or, rather, it could be the `index table` part</text>
  </message>
  <message>
    <ts>2017-07-05T19:57:19.366008</ts>
    <user>U23SA861Y</user>
    <text>so I'm only starting to delve into those particular methods, A2 seems to be called for any two parameter application</text>
  </message>
  <message>
    <ts>2017-07-05T19:57:20.366207</ts>
    <user>U0FP80EKB</user>
    <text>The map there</text>
  </message>
  <message>
    <ts>2017-07-05T19:57:32.368840</ts>
    <user>U0FP80EKB</user>
    <text>Yeah, my gut says collapse, although it could be the `index table` there</text>
  </message>
  <message>
    <ts>2017-07-05T19:58:08.376830</ts>
    <user>U23SA861Y</user>
    <text>collapse has some complexity to it with the arithmatic and such</text>
  </message>
  <message>
    <ts>2017-07-05T19:58:22.380137</ts>
    <user>U0FP80EKB</user>
    <text>oh, interesting</text>
  </message>
  <message>
    <ts>2017-07-05T19:58:51.386759</ts>
    <user>U0FP80EKB</user>
    <text>Just doing this doesn’t blow
```
            List.map (index table) [10]```</text>
  </message>
  <message>
    <ts>2017-07-05T19:59:44.398640</ts>
    <user>U23SA861Y</user>
    <text>it would be more `List.map (index table) [10000]`</text>
  </message>
  <message>
    <ts>2017-07-05T20:00:18.407757</ts>
    <user>U0FP80EKB</user>
    <text>yeah, I see now</text>
  </message>
  <message>
    <ts>2017-07-05T20:00:26.409505</ts>
    <user>U0FP80EKB</user>
    <text>```
        List.range 0 (maximum - 1)
            |&amp;gt; Debug.log "Current Index"
            |&amp;gt; List.map (index table)
```
I misread what maximum was</text>
  </message>
  <message>
    <ts>2017-07-05T20:00:52.415571</ts>
    <user>U23SA861Y</user>
    <text>but that works just fine at 10000</text>
  </message>
  <message>
    <ts>2017-07-05T20:01:22.422559</ts>
    <user>U23SA861Y</user>
    <text>20000 also works</text>
  </message>
  <message>
    <ts>2017-07-05T20:01:34.425325</ts>
    <user>U0FP80EKB</user>
    <text>Okay, so it is the map</text>
  </message>
  <message>
    <ts>2017-07-05T20:01:37.425926</ts>
    <user>U0FP80EKB</user>
    <text>not the foldl</text>
  </message>
  <message>
    <ts>2017-07-05T20:01:48.428412</ts>
    <user>U23SA861Y</user>
    <text>the original List.map</text>
  </message>
  <message>
    <ts>2017-07-05T20:01:54.429650</ts>
    <user>U0FP80EKB</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-05T20:01:56.430185</ts>
    <user>U0FP80EKB</user>
    <text>in `getAll`</text>
  </message>
  <message>
    <ts>2017-07-05T20:01:57.430435</ts>
    <user>U23SA861Y</user>
    <text>or is it perhaps the range itself</text>
  </message>
  <message>
    <ts>2017-07-05T20:03:06.445673</ts>
    <user>U23SA861Y</user>
    <text>nah range works fine</text>
  </message>
  <message>
    <ts>2017-07-05T20:03:40.453256</ts>
    <user>U23SA861Y</user>
    <text>hmm what happens if wrap a closure</text>
  </message>
  <message>
    <ts>2017-07-05T20:04:32.464968</ts>
    <user>U23SA861Y</user>
    <text>nah closure still pops it</text>
  </message>
  <message>
    <ts>2017-07-05T20:07:26.503442</ts>
    <user>U23SA861Y</user>
    <text>hmm if range is fixed it seems not to pop?</text>
  </message>
  <message>
    <ts>2017-07-05T20:07:58.510411</ts>
    <user>U23SA861Y</user>
    <text>hmm it's seems to be length or range * length of table or something like that</text>
  </message>
  <message>
    <ts>2017-07-05T20:08:52.521575</ts>
    <user>U0FP80EKB</user>
    <text>```
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i &amp;lt; len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}```</text>
  </message>
  <message>
    <ts>2017-07-05T20:09:00.523214</ts>
    <user>U0FP80EKB</user>
    <text>so, fold unwraps</text>
  </message>
  <message>
    <ts>2017-07-05T20:09:58.535140</ts>
    <user>U23SA861Y</user>
    <text>thats fold over string, what about list</text>
  </message>
  <message>
    <ts>2017-07-05T20:10:29.541715</ts>
    <user>U23SA861Y</user>
    <text>hmmm also seems to unwrap</text>
  </message>
  <message>
    <ts>2017-07-05T20:12:03.560961</ts>
    <user>U23SA861Y</user>
    <text>it is a foldl and the native implementation is a foldr</text>
  </message>
  <message>
    <ts>2017-07-05T20:12:45.569551</ts>
    <user>U0FP80EKB</user>
    <text>oh, let me think for a second</text>
  </message>
  <message>
    <ts>2017-07-05T20:13:11.574419</ts>
    <user>U0FP80EKB</user>
    <text>I bet it is nesting the calls to collapse, evaluating them at the end maybe?</text>
  </message>
  <message>
    <ts>2017-07-05T20:14:03.585088</ts>
    <user>U0FP80EKB</user>
    <text>now how to prove it</text>
  </message>
  <message>
    <ts>2017-07-05T20:19:46.658722</ts>
    <user>U0FP80EKB</user>
    <text>hmm… Would have to jump more into the js debugging. But, gotta get some dinner. This is super interesting.</text>
  </message>
  <message>
    <ts>2017-07-05T20:20:18.665598</ts>
    <user>U0FP80EKB</user>
    <text>Would definitely be worth calling someone like &lt;@U0EUHKVGB&gt; on this :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T20:26:18.740436</ts>
    <user>U23SA861Y</user>
    <text>yeah I gotta run, but this seems like escalation time</text>
  </message>
  <message>
    <ts>2017-07-05T21:15:06.302825</ts>
    <user>U1ZFF0E5P</user>
    <text>Hi all, I'm running into a weird bug where my stuff is mutated (???), can someone run a sanity check over it to make sure I'm not tripping: &lt;https://gist.github.com/ryan-senn/9bd84cc4479a14556a186b3169f43566&gt;. Here is the output: &lt;http://imgur.com/a/hIIsD&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T21:16:00.313059</ts>
    <user>U1ZFF0E5P</user>
    <text>the first run fails, but after commenting out the "notUnique" test, it passes</text>
  </message>
  <message>
    <ts>2017-07-05T21:16:36.319766</ts>
    <user>U1ZFF0E5P</user>
    <text>so somehow this part is mutating (??) the TestArray function: ```    let
        notUniqueArray =
            ["entry4"]
                |&amp;gt; Array.fromList
                |&amp;gt; Array.append array```</text>
  </message>
  <message>
    <ts>2017-07-05T21:17:06.325608</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U1ZFF0E5P&gt;: the current implementation of Array in Core has some issues</text>
  </message>
  <message>
    <ts>2017-07-05T21:17:27.329528</ts>
    <user>U1ZFF0E5P</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-05T21:17:48.333463</ts>
    <user>U153UK3FA</user>
    <text>it’s kind of broken, the next Elm release will include a rewrite</text>
  </message>
  <message>
    <ts>2017-07-05T21:18:04.336384</ts>
    <user>U153UK3FA</user>
    <text>you can use that version now by using &lt;http://package.elm-lang.org/packages/Skinney/elm-array-exploration/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T21:18:14.338228</ts>
    <user>U1ZFF0E5P</user>
    <text>should I still add this to an existing github issue or just ignore it</text>
  </message>
  <message>
    <ts>2017-07-05T21:19:17.350140</ts>
    <user>U153UK3FA</user>
    <text>try using `Skinney/elm-array-exploration` and see if it solves your problem</text>
  </message>
  <message>
    <ts>2017-07-05T21:29:38.465075</ts>
    <user>U1ZFF0E5P</user>
    <text>ok that fixed it, thanks &lt;@U153UK3FA&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T21:29:56.468259</ts>
    <user>U1ZFF0E5P</user>
    <text>got really confused there for a bit lol</text>
  </message>
  <message>
    <ts>2017-07-05T21:31:06.482199</ts>
    <user>U153UK3FA</user>
    <text>yeah, it’s been broken for a while, it’s tripped up a few people</text>
  </message>
  <message>
    <ts>2017-07-05T21:31:56.491336</ts>
    <user>U1ZFF0E5P</user>
    <text>just out of interest, it's the native implementation in js that has bugs?</text>
  </message>
  <message>
    <ts>2017-07-05T21:32:06.493160</ts>
    <user>U153UK3FA</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-07-05T21:33:01.503192</ts>
    <user>U153UK3FA</user>
    <text>Yep, lots of JS in that Array module</text>
  </message>
  <message>
    <ts>2017-07-05T21:41:28.594640</ts>
    <user>U153UK3FA</user>
    <text>It’s now only 150 lines of JS rather than the 1000 lines it was.</text>
  </message>
  <message>
    <ts>2017-07-06T00:16:24.115891</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0FP80EKB&gt; &lt;@U23SA861Y&gt; what was the question?</text>
  </message>
  <message>
    <ts>2017-07-06T00:18:01.130418</ts>
    <user>U23SA861Y</user>
    <text>There was a string permutation problem that was popping the stack even though it didn't explictly use recursion, only maps</text>
  </message>
  <message>
    <ts>2017-07-06T00:18:16.132796</ts>
    <user>U23SA861Y</user>
    <text>we couldn't figure out where it was recursing so deep as to pop the stack</text>
  </message>
  <message>
    <ts>2017-07-06T00:18:57.139141</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3FY8YRHcqvka1/1&gt; this one</text>
  </message>
  <message>
    <ts>2017-07-06T00:19:37.145106</ts>
    <user>U23SA861Y</user>
    <text>it seemed like when the list was approaching 6k or so it was causing the issues</text>
  </message>
  <message>
    <ts>2017-07-06T00:23:16.179555</ts>
    <user>U23SA861Y</user>
    <text>and an early riser I see</text>
  </message>
  <message>
    <ts>2017-07-06T00:32:39.264025</ts>
    <user>U0EUHKVGB</user>
    <text>It's because your model is too big for the debugger to play nicely</text>
  </message>
  <message>
    <ts>2017-07-06T00:33:06.267851</ts>
    <user>U23SA861Y</user>
    <text>he, so it is the debugger causing issues, interesting</text>
  </message>
  <message>
    <ts>2017-07-06T00:33:31.271627</ts>
    <user>U0EUHKVGB</user>
    <text>The debugger uses a bunch of customized thing for the virtual-dom in order to display things usefully</text>
  </message>
  <message>
    <ts>2017-07-06T00:33:45.273709</ts>
    <user>U0EUHKVGB</user>
    <text>If you disable the debugger, or just compile it locally, then your file works</text>
  </message>
  <message>
    <ts>2017-07-06T00:36:23.296967</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/elm-lang/virtual-dom/blob/master/src/VirtualDom/Expando.elm#L130&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T00:36:30.298093</ts>
    <user>U0EUHKVGB</user>
    <text>this function does not seem to be TCO'd.</text>
  </message>
  <message>
    <ts>2017-07-06T00:37:26.306260</ts>
    <user>U23SA861Y</user>
    <text>that'll do it</text>
  </message>
  <message>
    <ts>2017-07-06T00:38:12.312516</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;https://github.com/elm-lang/virtual-dom/issues/98&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T00:41:44.343453</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U64A0BYHH&gt; ^</text>
  </message>
  <message>
    <ts>2017-07-06T06:34:37.182442</ts>
    <user>U0NGNUH4J</user>
    <text>Hello, community! :smile:

I’m building a simple product library to experiment with “making impossible states impossible”.

As the model suggests products can be simple one-off things or a group of products.

*Question*: I have a problem with naming collisions and feel like I’m running out of names. Any ideas about what could be done with the types here?

```
type alias Model =
    { products : List ProductType }


type ProductType
    = Product
    | ProductGroup


type alias Product =
    { name : String
    , price : Float
    }


type alias ProductGroup =
    { name : String
    , firstProduct : Product
    , otherProducts : List Product
    }
```</text>
  </message>
  <message>
    <ts>2017-07-06T06:43:42.348609</ts>
    <user>U5J0H2NS2</user>
    <text>I used to name the type aliases (constructors) like ProductConstructor</text>
  </message>
  <message>
    <ts>2017-07-06T06:43:58.353301</ts>
    <user>U5J0H2NS2</user>
    <text>your type should be something like</text>
  </message>
  <message>
    <ts>2017-07-06T06:44:46.367311</ts>
    <user>U5J0H2NS2</user>
    <text>```
type ProductType
  = Product ProductConstructor
  | ProductGroup ProductGroupConstructor
```</text>
  </message>
  <message>
    <ts>2017-07-06T06:45:29.380043</ts>
    <user>U3SJEDR96</user>
    <text>I think I'd actually go for something like</text>
  </message>
  <message>
    <ts>2017-07-06T06:45:30.380485</ts>
    <user>U3SJEDR96</user>
    <text>```
type ProductInfo = { name : String, price : Float }

type Product
  = Product ProductInfo
  | Group String (NonEmptyList Product)

type alias Model = List Product
```</text>
  </message>
  <message>
    <ts>2017-07-06T06:46:03.390233</ts>
    <user>U0NGNUH4J</user>
    <text>ahaa</text>
  </message>
  <message>
    <ts>2017-07-06T06:46:25.397201</ts>
    <user>U5J0H2NS2</user>
    <text>your original ProductType is only an "Enum"</text>
  </message>
  <message>
    <ts>2017-07-06T06:46:26.397476</ts>
    <user>U3SJEDR96</user>
    <text>well, `NonEmpty` actually, using mgold/elm-nonempty-list</text>
  </message>
  <message>
    <ts>2017-07-06T06:46:42.402318</ts>
    <user>U0NGNUH4J</user>
    <text>I see</text>
  </message>
  <message>
    <ts>2017-07-06T06:47:22.414775</ts>
    <user>U0NGNUH4J</user>
    <text>```
type ProductInfo = { name : String, price : Float }
```</text>
  </message>
  <message>
    <ts>2017-07-06T06:47:36.419083</ts>
    <user>U0NGNUH4J</user>
    <text>supposed to be a type alias?</text>
  </message>
  <message>
    <ts>2017-07-06T06:47:39.420015</ts>
    <user>U3SJEDR96</user>
    <text>urhm, yeah</text>
  </message>
  <message>
    <ts>2017-07-06T06:47:47.422407</ts>
    <user>U0NGNUH4J</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-07-06T06:47:57.425413</ts>
    <user>U3SJEDR96</user>
    <text>I wish slack would give me compiler errors :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-06T06:48:02.426601</ts>
    <user>U0NGNUH4J</user>
    <text>hehe</text>
  </message>
  <message>
    <ts>2017-07-06T06:48:43.438412</ts>
    <user>U0NGNUH4J</user>
    <text>Thanks for feedback!</text>
  </message>
  <message>
    <ts>2017-07-06T06:48:58.442867</ts>
    <user>U0NGNUH4J</user>
    <text>I will experiment some more</text>
  </message>
  <message>
    <ts>2017-07-06T07:52:58.577397</ts>
    <user>U0NGNUH4J</user>
    <text>How about something like this:
```
model : Model
model =
    { products =
        [ Single (Product "Orange Juice" 20.0)
        , Group "Pies" (Product "Lemon" 10.0) [ Product "Blueberry" 10.0 ]
        ]
    }


type alias Model =
    { products : List ProductType }


type ProductType
    = Single Product
    | Group String Product (List Product)


type alias Product =
    { name : String
    , price : Float
    }
```</text>
  </message>
  <message>
    <ts>2017-07-06T07:55:19.621123</ts>
    <user>U0NGNUH4J</user>
    <text>I agree a non-empty list would be more clear but it’s interesting to see what one can do with “just the language itself”</text>
  </message>
  <message>
    <ts>2017-07-06T07:59:58.709441</ts>
    <user>U3SJEDR96</user>
    <text>yeah, makes sense - and that's basically how I'd initially do it, too. Although I'd probably go "I just want to express a non empty list!" at some point, and then make a `type alias NonEmpty a = (a, List a)`, or go totally overboard with making that a compile-time constraint..</text>
  </message>
  <message>
    <ts>2017-07-06T08:05:19.816702</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3GddyCVzMtMa1/0&gt; like that. Quite pointless in normal use, but fun to play around with</text>
  </message>
  <message>
    <ts>2017-07-06T08:14:01.988606</ts>
    <user>U3LT1UTPF</user>
    <text>Has anyone used *Semantic-ui* with Elm? I just love that framework, but I don't know whether it would be too much trouble.

I'm trying to decide what to use to style my app...</text>
  </message>
  <message>
    <ts>2017-07-06T08:23:19.180650</ts>
    <user>U4872964V</user>
    <text>&lt;@U3LT1UTPF&gt; if you haven’t looked into &lt;#C4F9NBLR1|style-elements&gt;, do that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T08:23:22.181542</ts>
    <user>U0JS9PAAY</user>
    <text>I’ve moved to bulma eventually</text>
  </message>
  <message>
    <ts>2017-07-06T08:23:35.186194</ts>
    <user>U0JS9PAAY</user>
    <text>from semantic</text>
  </message>
  <message>
    <ts>2017-07-06T08:24:20.201372</ts>
    <user>U3LT1UTPF</user>
    <text>&lt;@U4872964V&gt; :+1::skin-tone-2:</text>
  </message>
  <message>
    <ts>2017-07-06T08:24:40.208665</ts>
    <user>U3LT1UTPF</user>
    <text>&lt;@U0JS9PAAY&gt; Why?</text>
  </message>
  <message>
    <ts>2017-07-06T08:29:26.309863</ts>
    <user>U0JS9PAAY</user>
    <text>&lt;@U3LT1UTPF&gt; i’ve stubled some issues with semantic itself + using semantic’s dropdowns was too verbose and hacky in Elm</text>
  </message>
  <message>
    <ts>2017-07-06T08:33:01.392881</ts>
    <user>U3LT1UTPF</user>
    <text>&lt;@U0JS9PAAY&gt; That's what I thought: dropdowns would give me problems. 

Is Bulma OK? That's another one I'm considering.</text>
  </message>
  <message>
    <ts>2017-07-06T08:33:59.414487</ts>
    <user>U0JS9PAAY</user>
    <text>it’s a little bit immature(in features) comparing to semantic, but feels more solid(maybe because I’ve just started :))</text>
  </message>
  <message>
    <ts>2017-07-06T08:43:15.629300</ts>
    <user>U2JA29EKF</user>
    <text>&lt;@U3LT1UTPF&gt; - I've used semanticui with elm, I just don't use any of the js...</text>
  </message>
  <message>
    <ts>2017-07-06T08:45:58.695281</ts>
    <user>U3LT1UTPF</user>
    <text>&lt;@U2JA29EKF&gt; Do you use any dropdowns?</text>
  </message>
  <message>
    <ts>2017-07-06T08:46:44.713723</ts>
    <user>U37HUSJ4R</user>
    <text>trying to think about impossible states, how would you model something where lets say you have 3 buttons, hold, transfer, pause. And depending on what is 'active' this drives which other buttons are active?</text>
  </message>
  <message>
    <ts>2017-07-06T08:47:40.736191</ts>
    <user>U2JA29EKF</user>
    <text>just the "simple" ones - I did rewrite the SUI dropdowns in elm, but scrapped it as a wasn't happy with them and went for a different UI instead</text>
  </message>
  <message>
    <ts>2017-07-06T08:51:23.828444</ts>
    <user>U37HUSJ4R</user>
    <text>for example, if hold is active then pause isn't</text>
  </message>
  <message>
    <ts>2017-07-06T08:51:43.837005</ts>
    <user>U37HUSJ4R</user>
    <text>but if transfer is active then pause isn't but transfer being active means hold will be</text>
  </message>
  <message>
    <ts>2017-07-06T08:55:41.936943</ts>
    <user>U0U6ML22H</user>
    <text>basically, you model your app as a state machine</text>
  </message>
  <message>
    <ts>2017-07-06T08:55:54.942451</ts>
    <user>U0U6ML22H</user>
    <text>each state is rendered in a given way</text>
  </message>
  <message>
    <ts>2017-07-06T08:56:05.947191</ts>
    <user>U0U6ML22H</user>
    <text>each state has a fixed status for buttons</text>
  </message>
  <message>
    <ts>2017-07-06T08:56:30.957827</ts>
    <user>U0U6ML22H</user>
    <text>and you control in your Update which state can be reached from which</text>
  </message>
  <message>
    <ts>2017-07-06T08:57:18.978552</ts>
    <user>U3LT1UTPF</user>
    <text>&lt;@U2JA29EKF&gt; "and went for a different UI instead" means you don't use Semantic UI anymore?</text>
  </message>
  <message>
    <ts>2017-07-06T08:57:39.987681</ts>
    <user>U2JA29EKF</user>
    <text>oh, no, I am not using dropdowns anymore. </text>
  </message>
  <message>
    <ts>2017-07-06T08:57:50.992530</ts>
    <user>U2JA29EKF</user>
    <text>using a scrollable, filterable list instead</text>
  </message>
  <message>
    <ts>2017-07-06T08:57:52.992956</ts>
    <user>U37HUSJ4R</user>
    <text>interesting, how examples of this in elm &lt;@U0U6ML22H&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T08:58:33.011605</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U37HUSJ4R&gt; this is a great article by &lt;@U1G66P401&gt; showcasing that way of modelling, I think: &lt;https://alpacaaa.net/blog/post/elm-rock-paper-scissors-beginner/&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T08:59:01.024347</ts>
    <user>U37HUSJ4R</user>
    <text>brilliant, thanks</text>
  </message>
  <message>
    <ts>2017-07-06T09:01:40.101505</ts>
    <user>U2JA29EKF</user>
    <text>&lt;@U3LT1UTPF&gt; - the project is open source: &lt;http://github.com/monty5811/apostello|github.com/monty5811/apostello&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T09:06:21.230826</ts>
    <user>U3LT1UTPF</user>
    <text>&lt;@U2JA29EKF&gt; Great, thanks! :smile:</text>
  </message>
  <message>
    <ts>2017-07-06T09:15:20.484788</ts>
    <user>U4872964V</user>
    <text>&lt;@U2JA29EKF&gt; you’re onto something there. dropdowns are always a problem so why use them :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T09:23:20.718959</ts>
    <user>U4872964V</user>
    <text>works shitty on mobile etc</text>
  </message>
  <message>
    <ts>2017-07-06T09:42:12.320240</ts>
    <user>U1KES8JGK</user>
    <text>I actually like (real) dropdowns _more_ on mobile since they get the native UI control :flushed:</text>
  </message>
  <message>
    <ts>2017-07-06T09:43:13.353153</ts>
    <user>U4872964V</user>
    <text>well, native apps are a different matter of course</text>
  </message>
  <message>
    <ts>2017-07-06T09:46:22.459699</ts>
    <user>U1KES8JGK</user>
    <text>I mean web apps with dropdowns.</text>
  </message>
  <message>
    <ts>2017-07-06T09:47:03.482099</ts>
    <user>U3SJEDR96</user>
    <text>what native UI control would they get? A `select`?</text>
  </message>
  <message>
    <ts>2017-07-06T09:48:01.515704</ts>
    <user>U4872964V</user>
    <text>oh, you are talking about `&amp;lt;select&amp;gt;` tags</text>
  </message>
  <message>
    <ts>2017-07-06T09:48:05.518273</ts>
    <user>U1KES8JGK</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-07-06T09:49:38.571251</ts>
    <user>U4872964V</user>
    <text>well, those are bad anyway. &lt;https://www.fuckdropdowns.com&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T09:49:59.583302</ts>
    <user>U0U6ML22H</user>
    <text>it seems &lt;http://elm-lang.org|elm-lang.org&gt; is down?
&amp;gt;&amp;gt;&amp;gt;A web handler threw an exception. Details:
gen/pages/home.html: getFileStatus: does not exist (No such file or directory)</text>
  </message>
  <message>
    <ts>2017-07-06T09:51:34.638107</ts>
    <user>U0U6ML22H</user>
    <text>seems to be on and off (mostly off); maybe a disk problem?</text>
  </message>
  <message>
    <ts>2017-07-06T09:52:02.654524</ts>
    <user>U0U6ML22H</user>
    <text>seems to be back now</text>
  </message>
  <message>
    <ts>2017-07-06T09:54:44.747620</ts>
    <user>U41NK9BM4</user>
    <text>Also I recall Joel Spolsky has to say a thing or two about dropdowns :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T09:58:33.884054</ts>
    <user>U41NK9BM4</user>
    <text>This post in quite famous if you are into UI design: &lt;https://www.joelonsoftware.com/2000/04/27/designing-for-people-who-have-better-things-to-do-with-their-lives-part-two/&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T10:12:33.378292</ts>
    <user>U28L0BHN1</user>
    <text>since there was a discussion about selects and dropdowns, what would you use for an autocomplete select :smile:?</text>
  </message>
  <message>
    <ts>2017-07-06T10:15:32.483204</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U28L0BHN1&gt; &lt;http://package.elm-lang.org/packages/thebritican/elm-autocomplete/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T10:15:45.490703</ts>
    <user>U1CE9DL9H</user>
    <text>demo at &lt;http://gregziegan.com/elm-autocomplete/&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T10:17:52.565645</ts>
    <user>U1KES8JGK</user>
    <text>his criticism (in that article at least) doesn't seem to apply to `select`s on mobile though. the whole element is clickable and there is no scrollbar.</text>
  </message>
  <message>
    <ts>2017-07-06T10:18:14.577799</ts>
    <user>U61S7G7G8</user>
    <text>fenn: depending on the project, i would see how far the datalist element would get me…

&lt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T10:18:56.603461</ts>
    <user>U28L0BHN1</user>
    <text>thanks, the promise of having a simpler API sound cool though, no news about it? (talking about &lt;https://github.com/thebritican/elm-autocomplete/issues/37&gt;)</text>
  </message>
  <message>
    <ts>2017-07-06T10:20:18.651468</ts>
    <user>U28L0BHN1</user>
    <text>would be interesting but I need wider browser support for this project :confused:</text>
  </message>
  <message>
    <ts>2017-07-06T10:21:08.680878</ts>
    <user>U41NK9BM4</user>
    <text>Perhaps because the article is from 2000! Anyway &amp;lt;select&amp;gt;‘s on the iPhone/Android are not that bad. Sometimes is annoying to scroll-thru long lists, but then UI must be redesigned to cope with that.</text>
  </message>
  <message>
    <ts>2017-07-06T10:24:16.794289</ts>
    <user>U41NK9BM4</user>
    <text>In the end the culprit is often the designer, or the management :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T11:05:41.355767</ts>
    <user>U5FU80S06</user>
    <text>@justage Regarding `classes` in &lt;http://package.elm-lang.org/packages/justgage/tachyons-elm/1.0.0/Tachyons&gt;, where is the non-useless doc for this, and is this the only helper function in the package?  (Also perhaps it's an idea to have a dedicated Slack channel for _Tachyons_.)</text>
  </message>
  <message>
    <ts>2017-07-06T11:08:04.446976</ts>
    <user>U0NGNUH4J</user>
    <text>I realised that what I needed was a list with at least two elements in it and ended up creating this `Compound` module.
```
module Compound exposing (..)


type Compound a
    = Compound a a (List a)


first : Compound a -&amp;gt; a
first (Compound first _ _) =
    first


second : Compound a -&amp;gt; a
second (Compound _ second _) =
    second


rest : Compound a -&amp;gt; List a
rest (Compound _ _ rest) =
    rest


length : Compound a -&amp;gt; Int
length =
    List.length &amp;lt;&amp;lt; toList


toList : Compound a -&amp;gt; List a
toList (Compound first second rest) =
    first :: second :: rest
```</text>
  </message>
  <message>
    <ts>2017-07-06T11:08:48.474256</ts>
    <user>U0NGNUH4J</user>
    <text>Is this something I should publish as a package?</text>
  </message>
  <message>
    <ts>2017-07-06T11:09:41.506047</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5FU80S06&gt; &lt;http://package.elm-lang.org/packages/justgage/tachyons-elm/1.0.0/Tachyons#classes&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T11:10:27.535022</ts>
    <user>U3SJEDR96</user>
    <text>I suppose &lt;@U0H8PND27&gt; may decide to pull that one function up into a separate heading :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T11:13:00.630213</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0NGNUH4J&gt;: you could, though this type of thing tends to be very nice for very specific use-cases. `NonEmpty` isn't used a lot, so I imagine `Compound` would be used even less. Nevertheless, implementing some more "basic" features on it (like `fromList : List a -&amp;gt; Maybe (Compound a)`, `.map`, ..) would certainly be interesting!</text>
  </message>
  <message>
    <ts>2017-07-06T11:14:58.704481</ts>
    <user>U0NGNUH4J</user>
    <text>ok! I’ll give it a go and see where I end up :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T11:15:55.740394</ts>
    <user>U4KFY2V6V</user>
    <text>Hi :slightly_smiling_face: I've trouble searching for syntactic sugar. Hope you can healp me out.</text>
  </message>
  <message>
    <ts>2017-07-06T11:18:15.827693</ts>
    <user>U4KFY2V6V</user>
    <text>So I have a function with 2 arguments calling another function with the same arguments and using the result. I would like to compose `funInternal` with `(++) pre`</text>
  </message>
  <message>
    <ts>2017-07-06T11:18:20.830743</ts>
    <user>U3SJEDR96</user>
    <text>yeah, there's no operator for that. You can get rid of `b`, but not both. You _could_ hack around it and do `fun = curry &amp;gt;&amp;gt; (uncurry funInternal) &amp;gt;&amp;gt; (++) "pre"` I think</text>
  </message>
  <message>
    <ts>2017-07-06T11:18:59.855239</ts>
    <user>U3SJEDR96</user>
    <text>oh wait, what am I saying?</text>
  </message>
  <message>
    <ts>2017-07-06T11:24:20.053655</ts>
    <user>U0LPMPL2U</user>
    <text>Since `funInternal` is constant, could you define:
```
fun =
  funInternal () ()
    |&amp;gt; (++) "pre"
```</text>
  </message>
  <message>
    <ts>2017-07-06T11:25:15.088141</ts>
    <user>U0LPMPL2U</user>
    <text>oh wait, you just want composition but with two args</text>
  </message>
  <message>
    <ts>2017-07-06T11:25:33.099875</ts>
    <user>U4KFY2V6V</user>
    <text>&lt;@U0LPMPL2U&gt; Jop, it was only a simplified example</text>
  </message>
  <message>
    <ts>2017-07-06T11:26:03.118251</ts>
    <user>U4KFY2V6V</user>
    <text>Exactly: function composition with more than one argument :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T11:26:54.150601</ts>
    <user>U4KFY2V6V</user>
    <text>Could change the API to a large tuple of arguments but that would be a workaround</text>
  </message>
  <message>
    <ts>2017-07-06T11:27:30.172929</ts>
    <user>U3SJEDR96</user>
    <text>I suppose you could make an operator for that, but it doesn't come up in reality often enough to warrant that, imho</text>
  </message>
  <message>
    <ts>2017-07-06T11:27:33.174899</ts>
    <user>U3SJEDR96</user>
    <text>```
(&amp;gt;&amp;gt;&amp;gt;) : (a -&amp;gt; b -&amp;gt; c) -&amp;gt; (c -&amp;gt; d) -&amp;gt; a -&amp;gt; b -&amp;gt; d
(&amp;gt;&amp;gt;&amp;gt;) f g a b =
    f a b |&amp;gt; g
```</text>
  </message>
  <message>
    <ts>2017-07-06T11:29:35.250918</ts>
    <user>U4KFY2V6V</user>
    <text>Awesome!</text>
  </message>
  <message>
    <ts>2017-07-06T11:30:40.292219</ts>
    <user>U4KFY2V6V</user>
    <text>But there has to be 1 operator definition per artity, right?</text>
  </message>
  <message>
    <ts>2017-07-06T11:30:45.295229</ts>
    <user>U4KFY2V6V</user>
    <text>*arity</text>
  </message>
  <message>
    <ts>2017-07-06T11:30:50.298935</ts>
    <user>U0K92QFST</user>
    <text>Yep, basically</text>
  </message>
  <message>
    <ts>2017-07-06T11:34:53.450820</ts>
    <user>U4KFY2V6V</user>
    <text>Because of your help, I found this. &lt;https://github.com/Fresheyeball/elm-function-extra/blob/3.0.0/Function.elm#L28-L34&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T11:37:27.546845</ts>
    <user>U3SJEDR96</user>
    <text>Not the most "Elm-ish" library ever, that, but it's a good place for some arcane functional magic :wink:</text>
  </message>
  <message>
    <ts>2017-07-06T12:01:15.423345</ts>
    <user>U64A0BYHH</user>
    <text>jonf: Boom! Thanks &lt;@U23SA861Y&gt; + &lt;@U0FP80EKB&gt; for diving in deep and &lt;@U0EUHKVGB&gt; for the info + issue link. Seeing you expand my recursive solution to an iterative one was also helpful for me, personally, as I couldn’t figure that out on my own.</text>
  </message>
  <message>
    <ts>2017-07-06T12:16:04.936053</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;http://package.elm-lang.org/packages/sporto/elm-autocomplete/latest&gt;

&lt;http://package.elm-lang.org/packages/ericgj/elm-autoinput/latest&gt;  (my own, very basic)</text>
  </message>
  <message>
    <ts>2017-07-06T12:41:29.784418</ts>
    <user>U2GPAEU1L</user>
    <text>Remote meetup happening in an 1h20m:

&lt;https://www.bigmarker.com/remote-meetup/Elm-Remote-Meetup-9?show_live_page=true&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T14:34:24.512912</ts>
    <user>U40QW928G</user>
    <text>I'm having trouble avoiding circular dependency in elm</text>
  </message>
  <message>
    <ts>2017-07-06T14:34:43.523595</ts>
    <user>U40QW928G</user>
    <text>For instance I have a Messages.elm and a User.elm</text>
  </message>
  <message>
    <ts>2017-07-06T14:35:09.538254</ts>
    <user>U40QW928G</user>
    <text>and when I make my messages it requires the User model and some of the commands in my User.elm require Messages</text>
  </message>
  <message>
    <ts>2017-07-06T14:35:13.540296</ts>
    <user>U40QW928G</user>
    <text>how do I break this out</text>
  </message>
  <message>
    <ts>2017-07-06T14:35:39.554754</ts>
    <user>U23SA861Y</user>
    <text>if they are so tightly integrated the question becomes should they</text>
  </message>
  <message>
    <ts>2017-07-06T14:36:33.583950</ts>
    <user>U0LPMPL2U</user>
    <text>would it make sense to pass in the message for your commands?</text>
  </message>
  <message>
    <ts>2017-07-06T14:36:55.595913</ts>
    <user>U0LPMPL2U</user>
    <text>that's how the core library deals with commands, they let you pass in your own messages</text>
  </message>
  <message>
    <ts>2017-07-06T14:37:37.618940</ts>
    <user>U23SA861Y</user>
    <text>Yeah a context or function parameter to configure the call</text>
  </message>
  <message>
    <ts>2017-07-06T14:37:42.621738</ts>
    <user>U31A7HG1E</user>
    <text>I just ran into this very same problem and ended up doing exactly as &lt;@U0LPMPL2U&gt; suggested</text>
  </message>
  <message>
    <ts>2017-07-06T14:42:00.759958</ts>
    <user>U40QW928G</user>
    <text>I'm not sure I'm seeing your solution</text>
  </message>
  <message>
    <ts>2017-07-06T14:43:26.804987</ts>
    <user>U0LPMPL2U</user>
    <text>```
myUserCommand : (a -&amp;gt; msg) -&amp;gt; Cmd msg
myUserCommand tagger =
  ...
```</text>
  </message>
  <message>
    <ts>2017-07-06T14:43:43.814009</ts>
    <user>U5ABF3BH7</user>
    <text>Would any more advanced Elm people be interested in giving 1 or 2 hours of tutoring to give some guidance on how to refactor a project?  I live 1 hour South of San Francisco.</text>
  </message>
  <message>
    <ts>2017-07-06T14:44:14.831105</ts>
    <user>U0LPMPL2U</user>
    <text>`myUserCommand` no longer has any dependency on a particular `Msg` type, you pass it in instead</text>
  </message>
  <message>
    <ts>2017-07-06T14:44:29.839521</ts>
    <user>U0LPMPL2U</user>
    <text>this is the approach used by the core library, e.g `Random.generate`</text>
  </message>
  <message>
    <ts>2017-07-06T14:44:41.846197</ts>
    <user>U0LPMPL2U</user>
    <text>```
generate : (a -&amp;gt; msg) -&amp;gt; Generator a -&amp;gt; Platform.Cmd.Cmd msg
```</text>
  </message>
  <message>
    <ts>2017-07-06T14:44:50.851071</ts>
    <user>U23SA861Y</user>
    <text>it's actually used in almost every core lib function</text>
  </message>
  <message>
    <ts>2017-07-06T14:45:16.865518</ts>
    <user>U0LPMPL2U</user>
    <text>right because the core library _can't_ depend on your custom `Msg` type</text>
  </message>
  <message>
    <ts>2017-07-06T14:45:41.879863</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5ABF3BH7&gt; have you been to the SF Elm meetup? I hear it's really good :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T14:47:05.926001</ts>
    <user>U5ABF3BH7</user>
    <text>I have, it was good, I should have asked then.</text>
  </message>
  <message>
    <ts>2017-07-06T14:47:27.938098</ts>
    <user>U5ABF3BH7</user>
    <text>I went to the last 2</text>
  </message>
  <message>
    <ts>2017-07-06T14:48:04.958807</ts>
    <user>U23SA861Y</user>
    <text>You could hop on flight up to vancouver, Canada. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-06T14:48:36.976585</ts>
    <user>U40QW928G</user>
    <text>oh ok interesting</text>
  </message>
  <message>
    <ts>2017-07-06T14:51:38.075598</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U23SA861Y&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T14:57:15.260890</ts>
    <user>U5LFUHH19</user>
    <text>As I transition to Elm from Perl, I'm finding my JSON encoding is wacked.  From my existing Perl JSON API, what should be Ints have `""`s around them, so they look like strings.  Is there a way to decode them with a `String.toInt` kind of thing so I can match the JSON to my (proper) objects?</text>
  </message>
  <message>
    <ts>2017-07-06T15:00:42.377551</ts>
    <user>U0LPMPL2U</user>
    <text>Yes but you'll have to worry about `Result` because the string might not be a valid integer</text>
  </message>
  <message>
    <ts>2017-07-06T15:01:45.413396</ts>
    <user>U0LPMPL2U</user>
    <text>You can say:

```
stringInt : Decoder (Result String Int)
stringInt =
  JD.map String.toInt JD.string
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:02:12.428075</ts>
    <user>U0LPMPL2U</user>
    <text>You could then use `andThen` to check for `Ok` or `Err` and convert that to `JD.succeed` or `JD.fail`</text>
  </message>
  <message>
    <ts>2017-07-06T15:02:38.442394</ts>
    <user>U0LPMPL2U</user>
    <text>or you can use `Json.Decode.Extra.fromResult` which does that for you</text>
  </message>
  <message>
    <ts>2017-07-06T15:03:33.472312</ts>
    <user>U0LPMPL2U</user>
    <text>e.g.
```
stringInt : Decoder Int
stringInt =
  string |&amp;gt; JD.andThen (String.toInt &amp;gt;&amp;gt; JDE.fromResult)
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:04:54.516065</ts>
    <user>U40QW928G</user>
    <text>I guess I'm just not understanding where to put messages</text>
  </message>
  <message>
    <ts>2017-07-06T15:05:02.520105</ts>
    <user>U40QW928G</user>
    <text>or for that matter how to import them</text>
  </message>
  <message>
    <ts>2017-07-06T15:06:04.553221</ts>
    <user>U40QW928G</user>
    <text>I try `import User.Commands exposing (UserMsg)`</text>
  </message>
  <message>
    <ts>2017-07-06T15:06:08.555386</ts>
    <user>U23SA861Y</user>
    <text>if you did that your messages would be imported by update but not user</text>
  </message>
  <message>
    <ts>2017-07-06T15:06:34.569122</ts>
    <user>U40QW928G</user>
    <text>but when I try to put `FetchUser` in the case it doesn't work</text>
  </message>
  <message>
    <ts>2017-07-06T15:06:47.576254</ts>
    <user>U40QW928G</user>
    <text>```
Cannot find pattern `FetchUsers`

26|         FetchUsers -&amp;gt;
            ^^^^^^^^^^
Maybe you want one of the following?

    User.Commands.FetchUsers
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:09:23.654216</ts>
    <user>U5LFUHH19</user>
    <text>I'm being told by `elm-package` that `Json.Decode.Extra` is not compatible with Elm 0.18.</text>
  </message>
  <message>
    <ts>2017-07-06T15:09:36.660685</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U5LFUHH19&gt; `JD.string |&amp;gt; JD.map String.toInt |&amp;gt; JD.andThen Json.Decode.Extra.fromResult` I think should do it.</text>
  </message>
  <message>
    <ts>2017-07-06T15:10:43.694559</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U40QW928G&gt;, do you got a repo to point at so we can get a better feel?</text>
  </message>
  <message>
    <ts>2017-07-06T15:10:59.702433</ts>
    <user>U40QW928G</user>
    <text>I can create one</text>
  </message>
  <message>
    <ts>2017-07-06T15:11:27.716510</ts>
    <user>U0LPMPL2U</user>
    <text>Imagine two files
```
module User.Commands exposing (fetchUsers)

fetchUsers : (a -&amp;gt; msg) -&amp;gt; Cmd msg
fetchUsers tagger =
  -- fetch users and tag with tagger
```

```
module Main exposing (main)
import User.Commands exposing (fetchUsers)

type Msg = FetchUser | UserFetched User

update : Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)
updage msg model =
  case msg of
      FetchUser -&amp;gt;  (model, fetchUsers UserFetched)
      -- rest
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:12:05.736098</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5LFUHH19&gt;  are you using `elm-community/json-extra` ?</text>
  </message>
  <message>
    <ts>2017-07-06T15:12:16.741226</ts>
    <user>U5LFUHH19</user>
    <text>Ah, no.</text>
  </message>
  <message>
    <ts>2017-07-06T15:13:53.790299</ts>
    <user>U40QW928G</user>
    <text>ok I have that</text>
  </message>
  <message>
    <ts>2017-07-06T15:14:07.797600</ts>
    <user>U40QW928G</user>
    <text>```fetchUser : Cmd msg
fetchUser =
    Http.send FetchUsers userEndpoint```</text>
  </message>
  <message>
    <ts>2017-07-06T15:14:25.806854</ts>
    <user>U0LPMPL2U</user>
    <text>right. Instead of hardcoding `FetchUsers`, pass it in as an argument</text>
  </message>
  <message>
    <ts>2017-07-06T15:14:37.812608</ts>
    <user>U0LPMPL2U</user>
    <text>that way `fetchUser` function has no dependency on the `Msg` type</text>
  </message>
  <message>
    <ts>2017-07-06T15:15:04.825877</ts>
    <user>U40QW928G</user>
    <text>oh ok</text>
  </message>
  <message>
    <ts>2017-07-06T15:15:15.831697</ts>
    <user>U0LPMPL2U</user>
    <text>```
fetchUser : (a -&amp;gt; msg) -&amp;gt; Cmd msg
fetchUser tagger =
    Http.send tagger userEndpoint
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:16:08.858018</ts>
    <user>U40QW928G</user>
    <text>ok but now</text>
  </message>
  <message>
    <ts>2017-07-06T15:16:08.858045</ts>
    <user>U5ABF3BH7</user>
    <text>In my company, we are transitioning from Rails to Elm for the FrontEnd. So far, things have been built thinking only about the front end, building  models that make sense for the front end, and without thinking too much about the back end. Now I have the task of refactoring so that we have a better separation between data and views.  I am having a hard time because it is all tightly connected in several layers. For example, one view touches different database models, and the same database model is represented in  different views. I am a bit confused as what is the best way to encapsulate that in the view. Let's say I have an Address model, an Organization model and a person model (I have many more but it is to simplify). Both the organization and person have a contact information which in turn has phone numbers (which are all models). And all those fields are in one view. A person and an organization have an address.How would you design your view model to reflect that complexity, making it easy to encode and decode.  I know I am to separate your data from the view, but I am hesitant on what is the right way to go about it. Any advice? Sorry for the long paragraph.</text>
  </message>
  <message>
    <ts>2017-07-06T15:16:22.864798</ts>
    <user>U40QW928G</user>
    <text>It's yelling at me for this function type</text>
  </message>
  <message>
    <ts>2017-07-06T15:16:25.866098</ts>
    <user>U40QW928G</user>
    <text>```
userEndpoint : Http.Request (List User)
userEndpoint =
    Http.get (baseUrl ++ "/users") decodeUsers
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:16:41.873847</ts>
    <user>U40QW928G</user>
    <text>```
Function `send` is expecting the 2nd argument to be:

    Http.Request a

But it is:

    Http.Request (List User)
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:17:50.907502</ts>
    <user>U0LPMPL2U</user>
    <text>Can you change the signature to `fetchUser : ((List User) -&amp;gt; msg) -&amp;gt; Cmd msg` ?</text>
  </message>
  <message>
    <ts>2017-07-06T15:18:19.921511</ts>
    <user>U23SA861Y</user>
    <text>Think it needs to be a `(Result Error (List User)) -&amp;gt; Cmd msg`</text>
  </message>
  <message>
    <ts>2017-07-06T15:18:30.927342</ts>
    <user>U40QW928G</user>
    <text>```
The 1st argument to function `send` is causing a mismatch.

20|     Http.send tag userEndpoint
                  ^^^
Function `send` is expecting the 1st argument to be:

    Result Error a -&amp;gt; msg

But it is:

    List User -&amp;gt; msg
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:19:07.945562</ts>
    <user>U0LPMPL2U</user>
    <text>ah yes</text>
  </message>
  <message>
    <ts>2017-07-06T15:19:08.945832</ts>
    <user>U23SA861Y</user>
    <text>sry `(Result Error (List User) -&amp;gt; msg) -&amp;gt; Cmd msg`</text>
  </message>
  <message>
    <ts>2017-07-06T15:19:39.961669</ts>
    <user>U23SA861Y</user>
    <text>look at the type signature for send and replace `a` with `List User`</text>
  </message>
  <message>
    <ts>2017-07-06T15:19:46.965514</ts>
    <user>U40QW928G</user>
    <text>yeap that worked</text>
  </message>
  <message>
    <ts>2017-07-06T15:20:24.983961</ts>
    <user>U40QW928G</user>
    <text>now idk what to do with the update</text>
  </message>
  <message>
    <ts>2017-07-06T15:20:33.988801</ts>
    <user>U40QW928G</user>
    <text>how do I match fetchUser in my base</text>
  </message>
  <message>
    <ts>2017-07-06T15:20:36.990011</ts>
    <user>U40QW928G</user>
    <text>case*</text>
  </message>
  <message>
    <ts>2017-07-06T15:21:33.018197</ts>
    <user>U31A7HG1E</user>
    <text>I noticed this commit from a few days ago in elm-lang/elm-compiler:  &lt;https://github.com/elm-lang/elm-compiler/commit/1361e2b6469be2af57a2694fae6c81bdba36c845&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T15:21:38.020723</ts>
    <user>U23SA861Y</user>
    <text>`UsersFetched (List User)` would be one of your main message types</text>
  </message>
  <message>
    <ts>2017-07-06T15:21:51.027057</ts>
    <user>U31A7HG1E</user>
    <text>Is that a sign that 0.19 is close to being released?  Or maybe not?</text>
  </message>
  <message>
    <ts>2017-07-06T15:22:06.034445</ts>
    <user>U23SA861Y</user>
    <text>you would then call `fetchUsers UsersFetched`</text>
  </message>
  <message>
    <ts>2017-07-06T15:24:55.117685</ts>
    <user>U23SA861Y</user>
    <text>```
type Msg = FetchUsers | UsersFetched (List User)

update msg model = 
  case msg of 
    FetchUsers -&amp;gt; (model, fetchUsers UsersFetched)
    UsersFetched users -&amp;gt; (addUsers users model, Cmd.none)
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:34:13.391888</ts>
    <user>U40QW928G</user>
    <text>it still seems like poor architecture to have `(Result Error (List User) -&amp;gt; msg)` instead of `FetchUser` simply because we don't want to depend on that type because it's in a file that causes circular dependency</text>
  </message>
  <message>
    <ts>2017-07-06T15:34:14.392366</ts>
    <user>U40QW928G</user>
    <text>idk</text>
  </message>
  <message>
    <ts>2017-07-06T15:34:19.395485</ts>
    <user>U40QW928G</user>
    <text>seems like it's not well thought out</text>
  </message>
  <message>
    <ts>2017-07-06T15:35:14.422724</ts>
    <user>U23SA861Y</user>
    <text>not at all</text>
  </message>
  <message>
    <ts>2017-07-06T15:35:16.423846</ts>
    <user>U40QW928G</user>
    <text>because if I change FetchUser I'll have to change that signature everywhere</text>
  </message>
  <message>
    <ts>2017-07-06T15:35:20.426043</ts>
    <user>U23SA861Y</user>
    <text>it's all about dependency injection</text>
  </message>
  <message>
    <ts>2017-07-06T15:35:37.434775</ts>
    <user>U23SA861Y</user>
    <text>and seperation of concerns</text>
  </message>
  <message>
    <ts>2017-07-06T15:35:49.440140</ts>
    <user>U23SA861Y</user>
    <text>the user code is about generating tasks</text>
  </message>
  <message>
    <ts>2017-07-06T15:35:57.444452</ts>
    <user>U23SA861Y</user>
    <text>the Msgs are all about routing to where they need to go</text>
  </message>
  <message>
    <ts>2017-07-06T15:38:05.505329</ts>
    <user>U0JFGGZS6</user>
    <text>sylviecottrell: it's hard to know where to start of these kinds of data modelling questions sometimes, I can definitely relate..!</text>
  </message>
  <message>
    <ts>2017-07-06T15:39:41.551527</ts>
    <user>U40QW928G</user>
    <text>so leave Msg type in the main part of the application?</text>
  </message>
  <message>
    <ts>2017-07-06T15:41:12.595860</ts>
    <user>U0JFGGZS6</user>
    <text>One place to begin is to really look at/think about what are your UI needs. What bits get shared between different views, what bits you aren't sure if they will be shared, what will be shared in some ways but not in others. That can help guide how you design your types _independently of whatever the database models look like_.  But it sounds like you may have done this already.</text>
  </message>
  <message>
    <ts>2017-07-06T15:41:20.599390</ts>
    <user>U5LFUHH19</user>
    <text>&lt;@U0LPMPL2U&gt; &lt;@U48AEBJQ3&gt; Can you tell me if I'm using this correctly?  I'm a bit confused because if the String-&amp;gt;Int fails (e.g., a missing value) then I get nothing at all.  Is this right? &lt;https://gist.github.com/kyclark/fc42c06fb1b5e0252e5c3ac92c25b2fd&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T15:41:44.611633</ts>
    <user>U23SA861Y</user>
    <text>if you split your view and update then it should be factored out on it's own to prevent view from depending on update.</text>
  </message>
  <message>
    <ts>2017-07-06T15:42:50.643785</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U5LFUHH19&gt; mind dropping it in ellie as opposed to a gist</text>
  </message>
  <message>
    <ts>2017-07-06T15:43:27.662019</ts>
    <user>U0JFGGZS6</user>
    <text>I found this talk/slide share really helpful on some of the general issues: &lt;http://fsharpforfunandprofit.com/ddd/&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T15:44:14.686157</ts>
    <user>U0JFGGZS6</user>
    <text>his example domain is in the same ballpark as what you are modelling too.</text>
  </message>
  <message>
    <ts>2017-07-06T15:46:16.745904</ts>
    <user>U5ABF3BH7</user>
    <text>Thanks a lot! Let me give you a concrete example. Let's say you are building the field for your view model.  You need to collect info about a organization and a person for example, in your viewModel, do you list the fields together as list like ``` orgname, orgbranches, personfirstName, personLastName ....``` or do you try to build a sub model like ```org : OrganizationView.model, person : Person.Model```</text>
  </message>
  <message>
    <ts>2017-07-06T15:47:24.778718</ts>
    <user>U5LFUHH19</user>
    <text>&lt;@U23SA861Y&gt; Yes, sorry: &lt;https://ellie-app.com/3GndvL7jDbza1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T15:48:47.819234</ts>
    <user>U0JFGGZS6</user>
    <text>what do you see as the advantages/disadvantages of one vs the other?</text>
  </message>
  <message>
    <ts>2017-07-06T15:49:25.837737</ts>
    <user>U23SA861Y</user>
    <text>so the fromResult is designed to force the decoder to fail if value is not a string</text>
  </message>
  <message>
    <ts>2017-07-06T15:49:33.841594</ts>
    <user>U23SA861Y</user>
    <text>not a valid int</text>
  </message>
  <message>
    <ts>2017-07-06T15:49:34.842099</ts>
    <user>U5ABF3BH7</user>
    <text>The first one is straight forward you don't have extra complicated layers, yet encoding is less straight forward.</text>
  </message>
  <message>
    <ts>2017-07-06T15:49:53.851091</ts>
    <user>U23SA861Y</user>
    <text>what do you want to happen when the value is an empty string</text>
  </message>
  <message>
    <ts>2017-07-06T15:49:56.852643</ts>
    <user>U5ABF3BH7</user>
    <text>The second one adds more layer, but the link between the data and the view is very clear</text>
  </message>
  <message>
    <ts>2017-07-06T15:50:00.854604</ts>
    <user>U23SA861Y</user>
    <text>or the value is an invalid integer</text>
  </message>
  <message>
    <ts>2017-07-06T15:50:06.857546</ts>
    <user>U5ABF3BH7</user>
    <text>How do you usually do it?</text>
  </message>
  <message>
    <ts>2017-07-06T15:50:25.867365</ts>
    <user>U5LFUHH19</user>
    <text>I guess just give 0.  It's a fair question, one I haven't considered well, I'm afraid.</text>
  </message>
  <message>
    <ts>2017-07-06T15:50:43.876337</ts>
    <user>U23SA861Y</user>
    <text>well here is where the types are telling you to consider it</text>
  </message>
  <message>
    <ts>2017-07-06T15:50:52.880829</ts>
    <user>U0JFGGZS6</user>
    <text>Well.. it really depends on thinking through the UI. So it's a little like bumping around in the dark for me :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T15:51:01.885230</ts>
    <user>U5LFUHH19</user>
    <text>Exactly.  I'm finding I can't cut corners!  :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T15:51:04.886456</ts>
    <user>U23SA861Y</user>
    <text>because `String.toInt` returns a result its telling you it can fail and you should handle it</text>
  </message>
  <message>
    <ts>2017-07-06T15:51:31.899738</ts>
    <user>U23SA861Y</user>
    <text>do you want it to be zero, perhaps its and optional Maybe type</text>
  </message>
  <message>
    <ts>2017-07-06T15:51:44.906515</ts>
    <user>U0JFGGZS6</user>
    <text>but generally speaking, if you are just rendering a view with no user interaction (no msgs), you can do stuff like the first model and make it super easy for yourself</text>
  </message>
  <message>
    <ts>2017-07-06T15:51:46.907633</ts>
    <user>U23SA861Y</user>
    <text>or maybe you want this behaviour where someone gives you bogus data you just fail to decode it</text>
  </message>
  <message>
    <ts>2017-07-06T15:52:04.916605</ts>
    <user>U0JFGGZS6</user>
    <text>but with user interaction, you often need more structured data</text>
  </message>
  <message>
    <ts>2017-07-06T15:52:13.921020</ts>
    <user>U5ABF3BH7</user>
    <text>There are messages, I am not just rendering a view.</text>
  </message>
  <message>
    <ts>2017-07-06T15:52:51.940147</ts>
    <user>U0JFGGZS6</user>
    <text>like you said, if you expect to be building up a model to be encoded, the second is easier to deal with</text>
  </message>
  <message>
    <ts>2017-07-06T15:53:28.958698</ts>
    <user>U5LFUHH19</user>
    <text>If it's a Maybe, then it has to be part of my `Person` record?  
```
type alias Person =
    { name : String, age : Maybe Int }
```</text>
  </message>
  <message>
    <ts>2017-07-06T15:53:31.960532</ts>
    <user>U5LFUHH19</user>
    <text>Is that right?</text>
  </message>
  <message>
    <ts>2017-07-06T15:53:53.971952</ts>
    <user>U23SA861Y</user>
    <text>yep, because thats the only way to successfully create the record without an age</text>
  </message>
  <message>
    <ts>2017-07-06T15:54:22.986948</ts>
    <user>U5LFUHH19</user>
    <text>OK, I'm going to meditate on this for a while.  Thanks very much.</text>
  </message>
  <message>
    <ts>2017-07-06T15:56:00.036022</ts>
    <user>U0JFGGZS6</user>
    <text>do you have an existing UI for editing the thing you described -&amp;gt; _Both the organization and person have a contact information which in turn has phone numbers... And all those fields are in one view. A person and an organization have an address._</text>
  </message>
  <message>
    <ts>2017-07-06T16:04:36.303488</ts>
    <user>U5ABF3BH7</user>
    <text>I might have been a bit unclear, you have the Elm  Model that represents the view and all the changes I want to record. Some of those fields need to be saved to the database through different database models(Person, ContactInformation, etc..). I am wondering what is the best way to collect them thinking about the encoding, etc...</text>
  </message>
  <message>
    <ts>2017-07-06T16:10:21.472240</ts>
    <user>U0JFGGZS6</user>
    <text>so, you could be making changes to multiple database models in one save, is that what you mean?</text>
  </message>
  <message>
    <ts>2017-07-06T16:29:09.032879</ts>
    <user>U5ABF3BH7</user>
    <text>yes, that is what I mean</text>
  </message>
  <message>
    <ts>2017-07-06T16:29:24.041204</ts>
    <user>U5ABF3BH7</user>
    <text>You said it in a much more concise manner :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T16:33:57.183092</ts>
    <user>U63RN12FJ</user>
    <text>Hi!  Is anyone working on a Visual Studio 2017 editor for Elm?</text>
  </message>
  <message>
    <ts>2017-07-06T16:36:01.245891</ts>
    <user>U0JFGGZS6</user>
    <text>well, IMO it's kind of complex because it depends both on how your UI works and on what your server needs</text>
  </message>
  <message>
    <ts>2017-07-06T16:36:39.264151</ts>
    <user>U0JFGGZS6</user>
    <text>your choices might be very different depending on if you have a REST backend, GraphQL, websockets... etc.</text>
  </message>
  <message>
    <ts>2017-07-06T16:37:06.277597</ts>
    <user>U0JFGGZS6</user>
    <text>I assume you have some kind of REST thing if you are using Rails ?</text>
  </message>
  <message>
    <ts>2017-07-06T17:56:54.390395</ts>
    <user>U5ABF3BH7</user>
    <text>Sorry, I missed your message. Yes, it is REST for the main part.</text>
  </message>
  <message>
    <ts>2017-07-06T18:12:13.715880</ts>
    <user>U0JFGGZS6</user>
    <text>so do you have endpoints for things like "create a new person with also this contact info" and "change the contact info for this existing person"?</text>
  </message>
  <message>
    <ts>2017-07-06T18:12:50.727883</ts>
    <user>U0JFGGZS6</user>
    <text>"change the person info and his or her contact info"</text>
  </message>
  <message>
    <ts>2017-07-06T18:13:32.741365</ts>
    <user>U0JFGGZS6</user>
    <text>"change the person info and create new contact info for them" etc.</text>
  </message>
  <message>
    <ts>2017-07-06T18:15:40.782214</ts>
    <user>U0JFGGZS6</user>
    <text>or is it like `POST /person`, `PATCH /person/1`, `PUT /person/1/contact`, etc.</text>
  </message>
  <message>
    <ts>2017-07-06T18:41:47.261572</ts>
    <user>U0CJA7BLJ</user>
    <text>I'm not maintaining that `autocomplete` package. Please see &lt;https://github.com/sporto/elm-select&gt; instead</text>
  </message>
  <message>
    <ts>2017-07-06T18:42:36.276218</ts>
    <user>U0JFGGZS6</user>
    <text>oops, thanks!</text>
  </message>
  <message>
    <ts>2017-07-06T21:29:31.495979</ts>
    <user>U0JFGGZS6</user>
    <text>it's a lot easier if you have just one endpoint for every type of update you want to make from your Elm app. Even if this means less fine-grained endpoints like `POST /person-contactinfo/1` etc. with a complex JSON payload that the server can figure out what to do with.</text>
  </message>
  <message>
    <ts>2017-07-07T04:30:34.350599</ts>
    <user>U0JBSEGHY</user>
    <text>Is there a styletron like library for elm?</text>
  </message>
  <message>
    <ts>2017-07-07T04:40:23.555476</ts>
    <user>U2LAL86AY</user>
    <text>not that i'm aware of - but you can check out the`Tachions` library if you need high performance - and easy to reason about css. &lt;http://tachyons.io/&gt; - is not what you want - but its worth looking into it..</text>
  </message>
  <message>
    <ts>2017-07-07T04:42:57.608553</ts>
    <user>U0JBSEGHY</user>
    <text>Yea I'm definitely thinking of just using that</text>
  </message>
  <message>
    <ts>2017-07-07T04:43:06.611882</ts>
    <user>U2LAL86AY</user>
    <text>if i want to command js to do something without having any argument to give it - is this how my type annotation should look like?</text>
  </message>
  <message>
    <ts>2017-07-07T04:43:20.616735</ts>
    <user>U2LAL86AY</user>
    <text>`printDocument: () -&amp;gt; Cmd msg`</text>
  </message>
  <message>
    <ts>2017-07-07T04:44:05.631736</ts>
    <user>U3SJEDR96</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-07-07T04:54:37.853817</ts>
    <user>U2LAL86AY</user>
    <text>works like this: 
```

port commandJsTo_printDocument : () -&amp;gt; Cmd msg
printDocument : Cmd msg
printDocument =
    commandJsTo_printDocument ()

```</text>
  </message>
  <message>
    <ts>2017-07-07T05:48:56.990589</ts>
    <user>U0U6ML22H</user>
    <text>is there a way to "precompile" `elm-stuff` without my modules, first, so that when I do want to compile my modules it goes faster?</text>
  </message>
  <message>
    <ts>2017-07-07T05:53:58.093388</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0U6ML22H&gt; hm, what's the actual goal? Is this for caching on CI or something?</text>
  </message>
  <message>
    <ts>2017-07-07T05:56:17.140235</ts>
    <user>U0U6ML22H</user>
    <text>maybe it's a XY thing: we have several `Main`s, for as much apps. We have a webpack script for each. We also, sometimes, want to start them all at the same time, still serving all the files on port 3000. So we build them all at the same time. When we do that normally, it's quite fast. When we do that after cleaning elm-stuff, it takes forever (almost literally: i never lasted enough to see it go through, because it took too long). When that happens, we build one individually, then another, then start the entire thing again, and it works fast enough</text>
  </message>
  <message>
    <ts>2017-07-07T05:56:37.146805</ts>
    <user>U0U6ML22H</user>
    <text>I'm thinking that when we start all the builds in parallel, they all try to build core/third-party elm-stuff at the same time</text>
  </message>
  <message>
    <ts>2017-07-07T05:57:01.154981</ts>
    <user>U0U6ML22H</user>
    <text>but that's speculation, I have a limited understanding of the compilation phase</text>
  </message>
  <message>
    <ts>2017-07-07T05:57:31.165027</ts>
    <user>U0U6ML22H</user>
    <text>I'm just thinking that if we could prebuild the elmi/elmo files not relating to our modules before starting our parallel thing, it'd work much better</text>
  </message>
  <message>
    <ts>2017-07-07T05:57:34.166061</ts>
    <user>U0U6ML22H</user>
    <text>whaddaythink?</text>
  </message>
  <message>
    <ts>2017-07-07T06:02:28.266730</ts>
    <user>U3SJEDR96</user>
    <text>hm, I suppose you can test if it would even have impact before actually figuring out how to do it: build all one by one, remove the relevant folder from build-artifacts and trigger the `build-all` script again</text>
  </message>
  <message>
    <ts>2017-07-07T06:15:11.502516</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0U6ML22H&gt; that sounds .. :grimacing: i'm trying to understand what's the value of having all this elm apps sharing the same elm-stuff folder ?? Why not keep them separate apps in the first place?</text>
  </message>
  <message>
    <ts>2017-07-07T06:15:51.515175</ts>
    <user>U0U6ML22H</user>
    <text>They share data, modules, etc. </text>
  </message>
  <message>
    <ts>2017-07-07T06:16:58.535757</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U3SJEDR96&gt; will test, yeah, should have thought about it </text>
  </message>
  <message>
    <ts>2017-07-07T07:25:13.672928</ts>
    <user>U2LAL86AY</user>
    <text>```
port createNewDocument: Encode.Value -&amp;gt; Cmd msg
port printDocument : () -&amp;gt; Cmd msg 

createNewDocument: Document -&amp;gt; Task err msg 
printDocument: Task err msg 
```
i want to chain this `create` and `print` steps, in one step. 
Because sometimes i need `both one after another` - some other times i need to `create the document` - make `some updates`, then `print`. 
```
someCmd: Cmd msg
someCmd = 
    createNewDocument
        |&amp;gt; Task.andThen (\ what? -&amp;gt; -- what to add here?
                printDocument

            )
        |&amp;gt; Task.attempt (\ result -&amp;gt; some result handler )
```
how can i chain `port` calls? Because ports return `Cmd msg` not `Task err msg`.</text>
  </message>
  <message>
    <ts>2017-07-07T07:32:06.784092</ts>
    <user>U0CLDU8UB</user>
    <text>You can't chain port calls, you can only handle a Msg produced by a port.</text>
  </message>
  <message>
    <ts>2017-07-07T07:37:13.865392</ts>
    <user>U2LAL86AY</user>
    <text>hmm.. thanks</text>
  </message>
  <message>
    <ts>2017-07-07T09:21:10.036082</ts>
    <user>U2LC0U8JY</user>
    <text>I am wondering if anyone has a setup for using elm in an angular application?</text>
  </message>
  <message>
    <ts>2017-07-07T09:21:52.055494</ts>
    <user>U2LC0U8JY</user>
    <text>so my question is more about the project setup.</text>
  </message>
  <message>
    <ts>2017-07-07T09:36:30.481705</ts>
    <user>U5ABF3BH7</user>
    <text>I see. Thanks! That is very useful</text>
  </message>
  <message>
    <ts>2017-07-07T10:10:06.538874</ts>
    <user>U58EMTHRN</user>
    <text>Hi everyone,
I need to embed a third-party js library that will modify a part of my domtree, the same way a text editor would. In my case it is a payment client-side SDK, which I have no choice but to use.
If my view produces a "div" with a given ID and some content, the next update after the third-party library changes it, all its changes will be dropped.
How can this problem be solved ?
Can we produce nodes that will not be updated by elm after being created ?</text>
  </message>
  <message>
    <ts>2017-07-07T10:13:24.648428</ts>
    <user>U0RPQMZ9S</user>
    <text>&lt;@U58EMTHRN&gt; there is a trick to do this! although it can be a bit sketchy</text>
  </message>
  <message>
    <ts>2017-07-07T10:14:15.676938</ts>
    <user>U58EMTHRN</user>
    <text>I saw CKEditor uses webcomponents, I was hoping something else is possible.</text>
  </message>
  <message>
    <ts>2017-07-07T10:14:47.694636</ts>
    <user>U0RPQMZ9S</user>
    <text>You can wrap the element you embed the widget in with a function from the `Html.Lazy` module. This tells elm's diffing algorithm to leave that part of the dom alone unless the model changes</text>
  </message>
  <message>
    <ts>2017-07-07T10:15:54.732470</ts>
    <user>U0RPQMZ9S</user>
    <text>And if the model does change somewhere while the user is interacting with the widget, you can use `Html.Keyed` to tell elm to reuse the nodes already in the dom</text>
  </message>
  <message>
    <ts>2017-07-07T10:15:55.733383</ts>
    <user>U58EMTHRN</user>
    <text>xilnocas: oh that's clever!</text>
  </message>
  <message>
    <ts>2017-07-07T10:16:20.747133</ts>
    <user>U0K92QFST</user>
    <text>in this case if that div should definitely never change you can just say `lazy neverChangingDiv ()`</text>
  </message>
  <message>
    <ts>2017-07-07T10:16:39.757582</ts>
    <user>U0K92QFST</user>
    <text>where the type signature of `neverChangingDiv` is `() -&amp;gt; Html msg`</text>
  </message>
  <message>
    <ts>2017-07-07T10:17:51.796778</ts>
    <user>U58EMTHRN</user>
    <text>Thats exactly what I will need! Thanks</text>
  </message>
  <message>
    <ts>2017-07-07T10:19:08.839892</ts>
    <user>U58EMTHRN</user>
    <text>On a related subject, is there a way to send out a Cmd after a given div was initially rendered ? I need to call some javascript only once the div exists...</text>
  </message>
  <message>
    <ts>2017-07-07T10:20:37.890726</ts>
    <user>U0RPQMZ9S</user>
    <text>Is it a div rendered by elm? or your 3rd party sdk?</text>
  </message>
  <message>
    <ts>2017-07-07T10:21:18.914389</ts>
    <user>U0K92QFST</user>
    <text>you could probably do something like `on "load" (Json.succeed DivLoaded)`</text>
  </message>
  <message>
    <ts>2017-07-07T10:21:27.919499</ts>
    <user>U0K92QFST</user>
    <text>not 100% sure that would work</text>
  </message>
  <message>
    <ts>2017-07-07T10:21:43.928512</ts>
    <user>U58EMTHRN</user>
    <text>The div is rendered by elm, then the 3rd party will put its own things inside</text>
  </message>
  <message>
    <ts>2017-07-07T10:22:30.955716</ts>
    <user>U58EMTHRN</user>
    <text>the "load" event is for any element ?</text>
  </message>
  <message>
    <ts>2017-07-07T10:23:31.989950</ts>
    <user>U0RPQMZ9S</user>
    <text>What you want to do is wrap your js port callback in `requestAnimationFrame`. This has the effect of making sure elm's render step is finished before your ports fire. When this is in place you can just call out to the port in your update function like normal</text>
  </message>
  <message>
    <ts>2017-07-07T10:25:56.073053</ts>
    <user>U58EMTHRN</user>
    <text>nice. Thanks a lot!</text>
  </message>
  <message>
    <ts>2017-07-07T10:27:36.131266</ts>
    <user>U0RPQMZ9S</user>
    <text>Happy to share my knowledge of these dirty hacks :smile:</text>
  </message>
  <message>
    <ts>2017-07-07T10:28:07.150004</ts>
    <user>U0RPQMZ9S</user>
    <text>waaaaaay better than hacking in native/kernel code though</text>
  </message>
  <message>
    <ts>2017-07-07T10:30:06.219693</ts>
    <user>U0K92QFST</user>
    <text>you're right &lt;@U58EMTHRN&gt;, "load" is only for the window. my bad.</text>
  </message>
  <message>
    <ts>2017-07-07T10:30:12.223340</ts>
    <user>U0K92QFST</user>
    <text>&lt;@U0RPQMZ9S&gt;'s solution is good tho :smile:</text>
  </message>
  <message>
    <ts>2017-07-07T10:42:33.649802</ts>
    <user>U58EMTHRN</user>
    <text>xilnocas: going kernel/native was the very last thing I would do...</text>
  </message>
  <message>
    <ts>2017-07-07T11:27:25.223307</ts>
    <user>U5AQ585NH</user>
    <text>Just published elm-multiselect package at the elm-packages: &lt;http://package.elm-lang.org/packages/inkuzmin/elm-multiselect/latest&gt;
The process is extremely nice and convenient!</text>
  </message>
  <message>
    <ts>2017-07-07T11:52:54.100820</ts>
    <user>U2LAL86AY</user>
    <text>wow super! &lt;https://inkuzmin.github.io/elm-multiselect/&gt;
Thank you :smile: :heart:</text>
  </message>
  <message>
    <ts>2017-07-07T11:57:57.271072</ts>
    <user>U5AQ585NH</user>
    <text>&lt;@U2LAL86AY&gt; any suggestions and/or recommendations are very welcome! As well as bug reports and feature requests, of course.</text>
  </message>
  <message>
    <ts>2017-07-07T11:58:31.289866</ts>
    <user>U2LAL86AY</user>
    <text>yes, i will use it in one of my projects very soon. :smile:</text>
  </message>
  <message>
    <ts>2017-07-07T11:59:09.311144</ts>
    <user>U5AQ585NH</user>
    <text>Cool! Look forward for your feedback!</text>
  </message>
  <message>
    <ts>2017-07-07T13:51:57.751538</ts>
    <user>U5WS7CJLV</user>
    <text>&lt;@U5AQ585NH&gt; (or anybody that knows if he's gone) what does the "!" in the update function of the minimal example do?</text>
  </message>
  <message>
    <ts>2017-07-07T13:51:59.752365</ts>
    <user>U5WS7CJLV</user>
    <text>&lt;https://github.com/inkuzmin/elm-multiselect/blob/1.0.0/example/src/MinimalExample.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T13:54:41.834592</ts>
    <user>U5FU80S06</user>
    <text>&lt;@U0H8PND27&gt; Do you support Tachyons verbose? &lt;https://github.com/tachyons-css/tachyons-verbose&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T13:55:03.845824</ts>
    <user>U5FU80S06</user>
    <text>*All* -- What does it take to have a dedicated _Tachyons_ Slack channel?</text>
  </message>
  <message>
    <ts>2017-07-07T13:55:31.860270</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U5WS7CJLV&gt; &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Platform-Cmd#&gt;!</text>
  </message>
  <message>
    <ts>2017-07-07T13:55:47.868721</ts>
    <user>U0FP80EKB</user>
    <text>It is shorthand for `(model, Cmd.batch cmds)`</text>
  </message>
  <message>
    <ts>2017-07-07T13:55:52.871147</ts>
    <user>U5WS7CJLV</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-07T13:56:09.879555</ts>
    <user>U0FP80EKB</user>
    <text>For the record, I strongly dislike it. But, that’s just me. ¯\_(ツ)_/¯ :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-07T13:56:35.893137</ts>
    <user>U5WS7CJLV</user>
    <text>why do you dislike it?  I just discovered its existence, so of course I have no views. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-07T13:56:44.898289</ts>
    <user>U1ANV9FML</user>
    <text>&lt;@U5WS7CJLV&gt; See &lt;http://faq.elm-community.org/#what-is-this---construct-in-the-code&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T13:58:23.949557</ts>
    <user>U23SA861Y</user>
    <text>operators like that are obtuse and unreadable</text>
  </message>
  <message>
    <ts>2017-07-07T13:58:29.952697</ts>
    <user>U0FP80EKB</user>
    <text>Just a stylistic thing for me. I’m not a fan of infix operators like that, because then people have to ask “what is this operator” . I prefer `(model, Cmd.batch cmds)` to be explicit</text>
  </message>
  <message>
    <ts>2017-07-07T13:58:34.955422</ts>
    <user>U23SA861Y</user>
    <text>I believe it's actually being removed</text>
  </message>
  <message>
    <ts>2017-07-07T13:59:12.974770</ts>
    <user>U5WS7CJLV</user>
    <text>ah yes, it's not very intuitive</text>
  </message>
  <message>
    <ts>2017-07-07T13:59:17.977900</ts>
    <user>U5WS7CJLV</user>
    <text>and ! is used for so many things</text>
  </message>
  <message>
    <ts>2017-07-07T14:00:13.007655</ts>
    <user>U5WS7CJLV</user>
    <text>bookmarking that FAQ page btw</text>
  </message>
  <message>
    <ts>2017-07-07T14:01:37.053524</ts>
    <user>U0H8PND27</user>
    <text>Not yet but it would be pretty easy, &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1499450081834592&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T14:07:37.236007</ts>
    <user>U5FU80S06</user>
    <text>*All* -- What does it take to have a dedicated _Tachyons_ Slack channel?</text>
  </message>
  <message>
    <ts>2017-07-07T14:08:55.275343</ts>
    <user>U5WS7CJLV</user>
    <text>&lt;@U0FP80EKB&gt; it looks like Ivan is making a list of commands from one command using square brackets and then flattening/folding the list into one command - but why?</text>
  </message>
  <message>
    <ts>2017-07-07T14:09:00.277472</ts>
    <user>U5WS7CJLV</user>
    <text>or have I misunderstood?</text>
  </message>
  <message>
    <ts>2017-07-07T14:09:19.286621</ts>
    <user>U5WS7CJLV</user>
    <text>! [ Cmd.map HOI subCmd ]</text>
  </message>
  <message>
    <ts>2017-07-07T14:10:05.309587</ts>
    <user>U5WS7CJLV</user>
    <text>oh, probly cause ! only works with a list of commands</text>
  </message>
  <message>
    <ts>2017-07-07T14:12:03.367629</ts>
    <user>U3SJEDR96</user>
    <text>so `a ! b` == `(a, Cmd.batch b)`. Since `batch` takes a `List cmd`, you need `b` to be a `List cmd` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-07T14:12:10.371122</ts>
    <user>U5WS7CJLV</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-07T14:18:49.572705</ts>
    <user>U0FP80EKB</user>
    <text>Yup</text>
  </message>
  <message>
    <ts>2017-07-07T14:23:56.728452</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U5WS7CJLV&gt; i think you can take a look at the rocket operator. for example:
```
SendOtherRequest -&amp;gt;
            model
                |&amp;gt; doSomethingToModel
                |&amp;gt; doSomethingElseToModel
                =&amp;gt; [ Http.send someOtherRequest ]
```
&lt;https://github.com/NoRedInk/rocket-update&gt;
It's my favorite now :heart:</text>
  </message>
  <message>
    <ts>2017-07-07T14:26:14.799288</ts>
    <user>U23SA861Y</user>
    <text>no, god no. No more custom operators</text>
  </message>
  <message>
    <ts>2017-07-07T14:26:50.817899</ts>
    <user>U0FP80EKB</user>
    <text>Actually that operator is a bit more useful as it has a concrete use case rather than just syntactic sugar</text>
  </message>
  <message>
    <ts>2017-07-07T14:28:11.858053</ts>
    <user>U2LAL86AY</user>
    <text>i think is very useful when having `div [ style [ ("width", "height") ] ]` it's much better to have `div [ style [ "width" =&amp;gt; "height" ] ]` so write : `=&amp;gt;` instead of `(` `,` `)`</text>
  </message>
  <message>
    <ts>2017-07-07T14:28:18.861512</ts>
    <user>U2LAL86AY</user>
    <text>it's faster for me</text>
  </message>
  <message>
    <ts>2017-07-07T14:28:37.871199</ts>
    <user>U3SJEDR96</user>
    <text>Agreed. Note that `(=&amp;gt;) = (,)` with the same fixity as `|&amp;gt;` and `&amp;lt;|`</text>
  </message>
  <message>
    <ts>2017-07-07T14:29:45.905573</ts>
    <user>U3SJEDR96</user>
    <text>Also `Dict.fromList [ "foo" =&amp;gt; "bar", "baz" =&amp;gt; "klux" ]`</text>
  </message>
  <message>
    <ts>2017-07-07T14:29:58.912022</ts>
    <user>U23SA861Y</user>
    <text>you literally save a single keystroke</text>
  </message>
  <message>
    <ts>2017-07-07T14:30:58.943712</ts>
    <user>U2LAL86AY</user>
    <text>:smile: please just try it for a few hours. Then you owe me a fat beer :smile:</text>
  </message>
  <message>
    <ts>2017-07-07T14:31:40.964838</ts>
    <user>U3SJEDR96</user>
    <text>Sure, but that's not really what it's about, at least for me. It expresses, visually, a relationship between things, which tuples encode quite often. Using it for things that don't express that relation would be confusing, tho.</text>
  </message>
  <message>
    <ts>2017-07-07T14:35:19.074283</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://gist.github.com/zwilias/c2a1ee62c31247e04994fb71c5c8ce38&gt; or for encoding objects</text>
  </message>
  <message>
    <ts>2017-07-07T14:37:14.129873</ts>
    <user>U3SJEDR96</user>
    <text>At the end of the day, tho; you're free _not_ to use it, you'll just need to be aware of what it means when it shows up in someone's code</text>
  </message>
  <message>
    <ts>2017-07-07T14:37:28.136543</ts>
    <user>U23SA861Y</user>
    <text>but thats kinda the problem</text>
  </message>
  <message>
    <ts>2017-07-07T14:37:32.138155</ts>
    <user>U3SJEDR96</user>
    <text>At the very least, it's not trying to be as clever as `!` and that's progress</text>
  </message>
  <message>
    <ts>2017-07-07T14:39:25.193714</ts>
    <user>U48AEBJQ3</user>
    <text>I'm with &lt;@U23SA861Y&gt; on this one. I think the extra syntax is just another thing to learn. I would be much happier with `withCmds : List (Cmd msg) -&amp;gt; model -&amp;gt; (model, Cmd msg)`.</text>
  </message>
  <message>
    <ts>2017-07-07T14:41:09.244165</ts>
    <user>U2LAL86AY</user>
    <text>i'm tring to underestand what is neded if i want to add something to the elm code. Say i want to build a tool that does automatic imports in files.
adding the ` import Stuff exposing (otherStuff) `, in the file i'm currently in.

I know i need to build an atom package - but how i know where to add it - can somehow know about the structure of the elm code?</text>
  </message>
  <message>
    <ts>2017-07-07T14:41:41.259856</ts>
    <user>U3SJEDR96</user>
    <text>There's a complete parser + AST in elm-analyze</text>
  </message>
  <message>
    <ts>2017-07-07T14:42:10.273658</ts>
    <user>U23SA861Y</user>
    <text>automatic imports would be an editor feature, not so much an elm feature?</text>
  </message>
  <message>
    <ts>2017-07-07T14:42:42.288979</ts>
    <user>U3SJEDR96</user>
    <text>True. One that elm-jutsu can handle, afaik!</text>
  </message>
  <message>
    <ts>2017-07-07T14:43:09.301451</ts>
    <user>U3SJEDR96</user>
    <text>But for learning about the structure an Elm program can have, looking at an AST is useful nevertheless :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-07T14:44:20.335588</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U23SA861Y&gt; yes maybe - i just don't know how to approach this. Hmm need to research it. I have a boot that does voice recognition and intent parsing - and i can use the same idea to just say : `import Html` by voice - and then it should be aded automatically to my open module.</text>
  </message>
  <message>
    <ts>2017-07-07T14:46:45.405437</ts>
    <user>U1ANV9FML</user>
    <text>I'm interested to note that `! []` is used in the definition of `Html.beginnerProgram` in `elm-lang/Html`. &lt;https://github.com/elm-lang/html/blob/2.0.0/src/Html.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T14:47:26.425277</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, `beginnerProgram` is implemented in terms of `program`</text>
  </message>
  <message>
    <ts>2017-07-07T15:41:04.912652</ts>
    <user>U4Z4NEUQG</user>
    <text>Anybody here has experience managing elm-css on a medium/large project? I am wondering if I should do something like `Btn` `BtnPrimary` as classes, or `Btn` `Primary` primary being a generic class that will adapt if applied alongside btn or something else.</text>
  </message>
  <message>
    <ts>2017-07-07T15:41:45.930815</ts>
    <user>U4Z4NEUQG</user>
    <text>Usual bootstrap and co approach is `Btn` + `BtnPrimary` but I was wondering if `Btn` + `Primary` was not simpler.</text>
  </message>
  <message>
    <ts>2017-07-07T15:42:51.959198</ts>
    <user>U4Z4NEUQG</user>
    <text>So, I am wondering if any of you has any opinion on the matter after using elm-css.</text>
  </message>
  <message>
    <ts>2017-07-07T15:43:01.963501</ts>
    <user>U4Z4NEUQG</user>
    <text>It can also be another approach.</text>
  </message>
  <message>
    <ts>2017-07-07T17:25:40.507308</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U4Z4NEUQG&gt; there is an elm-bootstrap that will prevent you form making typos&amp;gt;
`elm-css` is ok for medium projects - large projects i didn't test it :smile: - but i didn't heard of any issues.
but instead i suggest you try the tachyons library. is better than bootstrap - is another approach all together. &lt;http://tachyons.io/&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T17:26:12.518299</ts>
    <user>U4Z4NEUQG</user>
    <text>I'll look into it, thanks</text>
  </message>
  <message>
    <ts>2017-07-07T19:47:23.541256</ts>
    <user>U2LAL86AY</user>
    <text>&lt;https://github.com/AionDev/elm-pdf&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T22:03:52.400247</ts>
    <user>U64MK7215</user>
    <text>hey, how do i write this in elm?
any tips would be appreciated.</text>
  </message>
  <message>
    <ts>2017-07-07T22:59:38.635270</ts>
    <user>U0JFGGZS6</user>
    <text>noobgamer: not sure what effect you're trying for. But most of that, with the possible exception of `.focus()`, can be done in Elm without going out to javascript.</text>
  </message>
  <message>
    <ts>2017-07-07T23:02:19.647050</ts>
    <user>U0JFGGZS6</user>
    <text>You need a specialized decoder for your input handler, something like this:
```
import Json.Decode as JD
import Html.Events exposing (on, targetValue)

onInputWithHeight : (Float -&amp;gt; Float -&amp;gt; String -&amp;gt; msg) -&amp;gt; Attribute msg
onInputWithHeight callback =
  on "input" &amp;lt;|
    JD.map3 callback 
      (&lt;http://JD.at|JD.at&gt; ["target", "offsetHeight"] JD.float )
      (&lt;http://JD.at|JD.at&gt; ["target", "scrollHeight"] JD.float )
      targetValue
```</text>
  </message>
  <message>
    <ts>2017-07-07T23:03:59.653287</ts>
    <user>U0JFGGZS6</user>
    <text>as for focus, there is &lt;http://package.elm-lang.org/packages/elm-lang/dom/1.1.1/Dom#focus&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T23:07:49.667436</ts>
    <user>U0JFGGZS6</user>
    <text>which you'd call in your update something like:  `(newModel,  (Task.attempt (always NoOp) (Dom.focus "input") ) )`</text>
  </message>
  <message>
    <ts>2017-07-07T23:16:33.701102</ts>
    <user>U601ELFEG</user>
    <text>Hmmm... did `fileReader` become something else?  I want to be able to read a .json file or write a .json file</text>
  </message>
  <message>
    <ts>2017-07-07T23:17:15.703723</ts>
    <user>U23SA861Y</user>
    <text>a file on disk?</text>
  </message>
  <message>
    <ts>2017-07-07T23:17:43.705436</ts>
    <user>U601ELFEG</user>
    <text>yeah - like if the user drags it onto the page, or if the user clicks a button - and gets a download</text>
  </message>
  <message>
    <ts>2017-07-07T23:21:20.719173</ts>
    <user>U601ELFEG</user>
    <text>I'm guessing some Port into JavaScript for the actual read/write</text>
  </message>
  <message>
    <ts>2017-07-07T23:28:34.745311</ts>
    <user>U23SA861Y</user>
    <text>i'm surprised it's not a thing already</text>
  </message>
  <message>
    <ts>2017-07-07T23:30:55.754660</ts>
    <user>U0JFGGZS6</user>
    <text>someone put up an example of this the other day I think...</text>
  </message>
  <message>
    <ts>2017-07-07T23:32:06.759144</ts>
    <user>U0JFGGZS6</user>
    <text>well not sure it's exactly what you're looking for but it does make use of a FileReader : &lt;https://ellie-app.com/3DGY7DrMpDMa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T23:40:55.792026</ts>
    <user>U601ELFEG</user>
    <text>thanks - that's perfect!  Since this is my first use of ports, that code is spot on!</text>
  </message>
  <message>
    <ts>2017-07-07T23:42:14.796224</ts>
    <user>U0JFGGZS6</user>
    <text>yeah, it's nicely documented too</text>
  </message>
  <message>
    <ts>2017-07-08T08:26:06.522439</ts>
    <user>U4Z4NEUQG</user>
    <text>Is there a way to know which packages are outdated?</text>
  </message>
  <message>
    <ts>2017-07-08T08:26:45.524596</ts>
    <user>U4Z4NEUQG</user>
    <text>I mean, I have some dependencies in my `elm-package.json`, I'd like to know if any package had an major update.</text>
  </message>
  <message>
    <ts>2017-07-08T08:33:29.549234</ts>
    <user>U3SJEDR96</user>
    <text>I think `elm_deps_upgrade` from &lt;https://github.com/NoRedInk/elm-ops-tooling&gt; might do that</text>
  </message>
  <message>
    <ts>2017-07-08T08:33:48.550328</ts>
    <user>U2Q5GJNTB</user>
    <text>I wonder if this is intended behaviour?</text>
  </message>
  <message>
    <ts>2017-07-08T08:33:50.550470</ts>
    <user>U2Q5GJNTB</user>
    <text>&amp;gt; String.toInt “+”
Ok NaN : Result.Result String Int</text>
  </message>
  <message>
    <ts>2017-07-08T08:33:54.550675</ts>
    <user>U4Z4NEUQG</user>
    <text>thanks ilias</text>
  </message>
  <message>
    <ts>2017-07-08T08:34:09.551528</ts>
    <user>U2Q5GJNTB</user>
    <text>I would have expected Err “could not convert string ‘+’ to an Int”</text>
  </message>
  <message>
    <ts>2017-07-08T08:34:50.553833</ts>
    <user>U4Z4NEUQG</user>
    <text>&lt;@U2Q5GJNTB&gt;  this is the same as `parseInt` behaviour in js</text>
  </message>
  <message>
    <ts>2017-07-08T08:35:20.555662</ts>
    <user>U2Q5GJNTB</user>
    <text>yes. I assumed that. Just wondering that + and - are success and everything else is Err</text>
  </message>
  <message>
    <ts>2017-07-08T08:37:56.565281</ts>
    <user>U4Z4NEUQG</user>
    <text>I guess it means "I was able to convert all characters to a number, but the resulting number is NaN"</text>
  </message>
  <message>
    <ts>2017-07-08T08:38:34.567571</ts>
    <user>U4Z4NEUQG</user>
    <text>When reading `+` there is no "error", but the resulting number is "incomplete", so it is NaN.</text>
  </message>
  <message>
    <ts>2017-07-08T08:38:35.567654</ts>
    <user>U3SJEDR96</user>
    <text>The annoying thing is that you can't check if it's `NaN` since `isNaN : Float -&amp;gt; Bool`</text>
  </message>
  <message>
    <ts>2017-07-08T08:38:51.568587</ts>
    <user>U3SJEDR96</user>
    <text>It's _probably_ tracked somewhere in here: &lt;https://github.com/elm-lang/core/issues/721&gt;</text>
  </message>
  <message>
    <ts>2017-07-08T08:38:54.568722</ts>
    <user>U4Z4NEUQG</user>
    <text>At least I understand it that way.</text>
  </message>
  <message>
    <ts>2017-07-08T08:39:01.569080</ts>
    <user>U3SJEDR96</user>
    <text>but if it's not, I'd definitely log it as an issue</text>
  </message>
  <message>
    <ts>2017-07-08T08:40:09.573260</ts>
    <user>U3SJEDR96</user>
    <text>Ah</text>
  </message>
  <message>
    <ts>2017-07-08T08:40:09.573288</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/core/pull/834&gt;</text>
  </message>
  <message>
    <ts>2017-07-08T08:40:15.573682</ts>
    <user>U3SJEDR96</user>
    <text>so in 0.19, that'll be fixed</text>
  </message>
  <message>
    <ts>2017-07-08T08:40:17.573868</ts>
    <user>U4Z4NEUQG</user>
    <text>Also, String.toInt "NaN" should return NaN and not an error</text>
  </message>
  <message>
    <ts>2017-07-08T08:41:48.579407</ts>
    <user>U4Z4NEUQG</user>
    <text>Same with Infinity</text>
  </message>
  <message>
    <ts>2017-07-08T08:41:57.579877</ts>
    <user>U4Z4NEUQG</user>
    <text>Don't you think?</text>
  </message>
  <message>
    <ts>2017-07-08T08:43:02.584082</ts>
    <user>U3SJEDR96</user>
    <text>Definitely not for ints, perhaps for floats</text>
  </message>
  <message>
    <ts>2017-07-08T08:43:25.585519</ts>
    <user>U4Z4NEUQG</user>
    <text>My rational is that if you used toString on a number, you should be able to pass this to the reverse function.</text>
  </message>
  <message>
    <ts>2017-07-08T08:43:30.585850</ts>
    <user>U4Z4NEUQG</user>
    <text>Yeah, toFloat</text>
  </message>
  <message>
    <ts>2017-07-08T08:43:43.586703</ts>
    <user>U4Z4NEUQG</user>
    <text>I meant toFloat</text>
  </message>
  <message>
    <ts>2017-07-08T08:44:49.590953</ts>
    <user>U3SJEDR96</user>
    <text>Maybe. I'm not entirely convinced that they should be valid input, since they're basically bottom values. I don't really want to have a field where a user can enter a decimal and suddenly I'm dealing with NaN and Infinity.. Not that it's invalid, but it would be a little surprising, too</text>
  </message>
  <message>
    <ts>2017-07-08T08:45:28.593743</ts>
    <user>U4Z4NEUQG</user>
    <text>I just made an app where the used could enter "Infinity", it's a scientific app.</text>
  </message>
  <message>
    <ts>2017-07-08T08:45:34.594151</ts>
    <user>U3SJEDR96</user>
    <text>Although it already works for `Infinity`, actually</text>
  </message>
  <message>
    <ts>2017-07-08T08:45:39.594466</ts>
    <user>U4Z4NEUQG</user>
    <text>Maybe not NaN</text>
  </message>
  <message>
    <ts>2017-07-08T08:45:50.595157</ts>
    <user>U3SJEDR96</user>
    <text>Agreed</text>
  </message>
  <message>
    <ts>2017-07-08T08:46:00.595815</ts>
    <user>U4Z4NEUQG</user>
    <text>Ho yeah it works, but only with toFloat</text>
  </message>
  <message>
    <ts>2017-07-08T08:46:04.596051</ts>
    <user>U4Z4NEUQG</user>
    <text>I tried toInt</text>
  </message>
  <message>
    <ts>2017-07-08T08:48:04.603587</ts>
    <user>U4Z4NEUQG</user>
    <text>But this NaN thing is a tought problem. It should be it's own type, but if it is it's own type,  all math function has to accept some union type "NaN|Int|Float"</text>
  </message>
  <message>
    <ts>2017-07-08T08:50:34.613495</ts>
    <user>U3SJEDR96</user>
    <text>Alternatively, all functions that can result in NaN could return a `Result NaN Float`, with `NaN` essentially a bottom value. That would be pretty annoying, tho. Oh well, there's been quite a bit of discussion about this, I recommend checking some of the math related issues :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T08:50:58.615112</ts>
    <user>U4Z4NEUQG</user>
    <text>Yeah I'm sure I'm not the first one to thing about it:P</text>
  </message>
  <message>
    <ts>2017-07-08T08:51:07.615683</ts>
    <user>U3SJEDR96</user>
    <text>(and I don't think `NaN` should be a `number`. It is, after all, Not a Number)</text>
  </message>
  <message>
    <ts>2017-07-08T08:51:58.618957</ts>
    <user>U4Z4NEUQG</user>
    <text>But int can produce NaN. like 0/0</text>
  </message>
  <message>
    <ts>2017-07-08T08:52:05.619383</ts>
    <user>U4Z4NEUQG</user>
    <text>So why is it a float?</text>
  </message>
  <message>
    <ts>2017-07-08T08:53:43.627116</ts>
    <user>U3SJEDR96</user>
    <text>Currently, no. `0/0` isn't integer division, and always returns a float, so that's solid. Integer division is a little harder, and currently `0 // 0 == 0`</text>
  </message>
  <message>
    <ts>2017-07-08T08:54:24.629658</ts>
    <user>U3SJEDR96</user>
    <text>but then again `rem 0 0 == NaN` as an Int.</text>
  </message>
  <message>
    <ts>2017-07-08T08:54:31.630047</ts>
    <user>U3SJEDR96</user>
    <text>and `0 % 0` is a runtime error</text>
  </message>
  <message>
    <ts>2017-07-08T08:55:09.632587</ts>
    <user>U4Z4NEUQG</user>
    <text>Ok, good to know about those.</text>
  </message>
  <message>
    <ts>2017-07-08T08:56:56.641198</ts>
    <user>U3SJEDR96</user>
    <text>also, `NaN` is part of the floating point spec, so it makes sense to consider it a `Float`, if it has to be a number. The thing is that JS basically _only_ has floats. This makes edge-cases a little hairy in Elm, without either an inconvenient API, worse performance, or both</text>
  </message>
  <message>
    <ts>2017-07-08T08:57:35.643639</ts>
    <user>U4Z4NEUQG</user>
    <text>Yeah I guess from this perspective it makes sense that `NaN` is `Float`.</text>
  </message>
  <message>
    <ts>2017-07-08T09:17:21.725303</ts>
    <user>U2Q5GJNTB</user>
    <text>hmm interesting. Bad thing about this from an app perspective is that whenever we want to read input from an input field and want to ensure it is a number we have to pattern match on Ok and we have to have a special case of + and - (and maybe other things that are not numbers but are parsed as Ok by String.toFloat and String.toInt</text>
  </message>
  <message>
    <ts>2017-07-08T09:18:03.728105</ts>
    <user>U2Q5GJNTB</user>
    <text>I guess regex are the cleaner approach for me in this case</text>
  </message>
  <message>
    <ts>2017-07-08T09:18:21.729261</ts>
    <user>U4Z4NEUQG</user>
    <text>user input can be hard</text>
  </message>
  <message>
    <ts>2017-07-08T09:18:31.730122</ts>
    <user>U4Z4NEUQG</user>
    <text>for example, I write 5000 as 5'000</text>
  </message>
  <message>
    <ts>2017-07-08T09:18:59.732129</ts>
    <user>U4Z4NEUQG</user>
    <text>and my french neighbors write 6.5 as 6,5</text>
  </message>
  <message>
    <ts>2017-07-08T09:19:25.733766</ts>
    <user>U4Z4NEUQG</user>
    <text>and if it is money, I'll write 5 000.-</text>
  </message>
  <message>
    <ts>2017-07-08T09:21:36.742709</ts>
    <user>U4Z4NEUQG</user>
    <text>And my wife would write ５千</text>
  </message>
  <message>
    <ts>2017-07-08T09:21:51.743681</ts>
    <user>U2Q5GJNTB</user>
    <text>yes I agree on that, but that is additional complexity based on region/country. Regular numbers should be easier than formatted values</text>
  </message>
  <message>
    <ts>2017-07-08T09:22:43.747048</ts>
    <user>U4Z4NEUQG</user>
    <text>Yeah but if you put an input field for example "how much would you pay for that", people will enter values differently.</text>
  </message>
  <message>
    <ts>2017-07-08T09:24:17.753268</ts>
    <user>U2Q5GJNTB</user>
    <text>I see your point. And I don’t want to complain. I just wanted to know if this is known and intended/accepted behaviour.</text>
  </message>
  <message>
    <ts>2017-07-08T09:24:23.753784</ts>
    <user>U2Q5GJNTB</user>
    <text>In that case there are reasons and that is fine with me</text>
  </message>
  <message>
    <ts>2017-07-08T09:24:38.754886</ts>
    <user>U4Z4NEUQG</user>
    <text>Ho, I didn't mean to lecture you.</text>
  </message>
  <message>
    <ts>2017-07-08T09:25:01.756487</ts>
    <user>U4Z4NEUQG</user>
    <text>What I meant is that you might consider either a full parsing solution, or limit the input and use regex.</text>
  </message>
  <message>
    <ts>2017-07-08T09:25:18.757901</ts>
    <user>U4Z4NEUQG</user>
    <text>And just parse something like `\d+` and be done with it:)</text>
  </message>
  <message>
    <ts>2017-07-08T09:26:22.762401</ts>
    <user>U2Q5GJNTB</user>
    <text>I know. I did not get you wrong</text>
  </message>
  <message>
    <ts>2017-07-08T09:26:39.763504</ts>
    <user>U4Z4NEUQG</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T09:26:44.763800</ts>
    <user>U2Q5GJNTB</user>
    <text>However I was very negative in my sentences and wanted to make sure. that I just trying to understand. So we are all good here</text>
  </message>
  <message>
    <ts>2017-07-08T09:27:14.765743</ts>
    <user>U2Q5GJNTB</user>
    <text>Maybe the mindset of “just ensure it is a valid number” was a little too naive and I will start with a simple int / float regex</text>
  </message>
  <message>
    <ts>2017-07-08T09:27:39.767347</ts>
    <user>U2Q5GJNTB</user>
    <text>(no scientific notation and so on) and later will make the UX nicer with a more complete solution and proper information for the user</text>
  </message>
  <message>
    <ts>2017-07-08T09:28:02.768850</ts>
    <user>U2Q5GJNTB</user>
    <text>(simple int/float regex solution) …</text>
  </message>
  <message>
    <ts>2017-07-08T09:28:04.768996</ts>
    <user>U4Z4NEUQG</user>
    <text>I don't know your audience, but a fair amount of the planet uses `,` as decimal separator. Be sure to support that.</text>
  </message>
  <message>
    <ts>2017-07-08T09:28:47.771793</ts>
    <user>U4Z4NEUQG</user>
    <text>you might want to use something like that &lt;https://stackoverflow.com/questions/1074660/with-a-browser-how-do-i-know-which-decimal-separator-does-the-client-use&gt;</text>
  </message>
  <message>
    <ts>2017-07-08T09:29:11.773345</ts>
    <user>U2Q5GJNTB</user>
    <text>yes, and I am not sure what to do there either, since I am from germany and most users also (thus using , is the first approach) but I want to support non german speaking users now. so you are right</text>
  </message>
  <message>
    <ts>2017-07-08T09:29:31.774709</ts>
    <user>U2Q5GJNTB</user>
    <text>Interesting. thanks</text>
  </message>
  <message>
    <ts>2017-07-08T09:29:39.775264</ts>
    <user>U4Z4NEUQG</user>
    <text>In switzerland we use `.` and we speak german mostly:)</text>
  </message>
  <message>
    <ts>2017-07-08T09:30:18.778389</ts>
    <user>U2Q5GJNTB</user>
    <text>that is amazing. did not know people from your country use .</text>
  </message>
  <message>
    <ts>2017-07-08T09:31:12.782492</ts>
    <user>U4Z4NEUQG</user>
    <text>On german keyboard, on the numeric keypad, is it `.` or `,`?</text>
  </message>
  <message>
    <ts>2017-07-08T09:31:30.783919</ts>
    <user>U2Q5GJNTB</user>
    <text>,</text>
  </message>
  <message>
    <ts>2017-07-08T09:31:44.784816</ts>
    <user>U2Q5GJNTB</user>
    <text>afair. it is quiet some time ago I had one</text>
  </message>
  <message>
    <ts>2017-07-08T09:31:52.785405</ts>
    <user>U4Z4NEUQG</user>
    <text>`.` here</text>
  </message>
  <message>
    <ts>2017-07-08T09:34:10.794451</ts>
    <user>U2Q5GJNTB</user>
    <text>good to know. I will give this question some thoughts. Thanks</text>
  </message>
  <message>
    <ts>2017-07-08T09:35:23.799545</ts>
    <user>U4Z4NEUQG</user>
    <text>I bumped hard into this issue in the past:)</text>
  </message>
  <message>
    <ts>2017-07-08T09:36:23.803557</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2Q5GJNTB&gt; as of the next version of `elm-lang/core`, `String.toInt` should match only valid integers, so `+` and `-` shouldn't give trouble there, anymore. In the current `String.toFloat`, these are already blocked. `Infinity` is accepted by `String.toFloat`, though, so perhaps that's one to be a little wary of :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T09:37:32.807991</ts>
    <user>U0P088J1L</user>
    <text>does anyone know how close we are to Elm 0.19? weeks, or quarters? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T09:40:47.820900</ts>
    <user>U4Z4NEUQG</user>
    <text>I guess weeks, but this is just my feeling.</text>
  </message>
  <message>
    <ts>2017-07-08T09:40:59.821814</ts>
    <user>U0F7JPK36</user>
    <text>No one knows</text>
  </message>
  <message>
    <ts>2017-07-08T09:42:06.826142</ts>
    <user>U0P088J1L</user>
    <text>Not even Evan Almighty himself? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T09:42:36.828196</ts>
    <user>U0F7JPK36</user>
    <text>nope! Releases happen on a "when they're done" basis</text>
  </message>
  <message>
    <ts>2017-07-08T09:43:42.832602</ts>
    <user>U0F7JPK36</user>
    <text>which seems tautological, I just mean like if there's something important that should be in that isn't finished just yet the release will wait till it's ready</text>
  </message>
  <message>
    <ts>2017-07-08T09:45:01.837875</ts>
    <user>U0F7JPK36</user>
    <text>right &amp;gt; fast kind of thing</text>
  </message>
  <message>
    <ts>2017-07-08T09:45:05.838185</ts>
    <user>U2Q5GJNTB</user>
    <text>&lt;@U3SJEDR96&gt; thanks for the update. Great to hear</text>
  </message>
  <message>
    <ts>2017-07-08T09:45:33.840262</ts>
    <user>U0P088J1L</user>
    <text>Sure. that's fair.</text>
  </message>
  <message>
    <ts>2017-07-08T09:46:39.844723</ts>
    <user>U0F7JPK36</user>
    <text>something I can share for sure though is that there will be a good month or so of alpha testing once 0.19 is nearing completeness, and that'll be announced on the elm-dev mailing list</text>
  </message>
  <message>
    <ts>2017-07-08T09:49:35.856497</ts>
    <user>U0P088J1L</user>
    <text>That's good to know. Thanks for sharing.</text>
  </message>
  <message>
    <ts>2017-07-08T11:36:31.366207</ts>
    <user>U5FC7BE0G</user>
    <text>Has the elm-lang project ever thought about accepting financial contributions for it's main developers? When I really like an open-source program I like to donate something as a token of appreciation for all the time that has been invested by talented developers. I would like to do the same for elm but doesn't seem to be possible.</text>
  </message>
  <message>
    <ts>2017-07-08T11:38:44.377185</ts>
    <user>U3SJEDR96</user>
    <text>I suppose, if anything, the Elm Software Foundation _might_ accept donations, but I honestly don't know. Evan works as a full-time open-source developer at NoRedInk, so his costs are covered :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T11:39:23.380371</ts>
    <user>U5FC7BE0G</user>
    <text>That's really cool of NoRedInk</text>
  </message>
  <message>
    <ts>2017-07-08T11:39:50.382655</ts>
    <user>U5FC7BE0G</user>
    <text>but still, i think some people of this community would probably be willing to donate something to the foundation</text>
  </message>
  <message>
    <ts>2017-07-08T11:39:54.382952</ts>
    <user>U5FC7BE0G</user>
    <text>i certainly would</text>
  </message>
  <message>
    <ts>2017-07-08T11:44:25.405681</ts>
    <user>U3SJEDR96</user>
    <text>True; though there are definitely others ways you can contribute, too: spreading the love, introducing Elm to friends, coworkers, at meetups, ... Organizing a meetup is a great way to get more people involved, and a huge learning opportunity, too!</text>
  </message>
  <message>
    <ts>2017-07-08T11:44:36.406612</ts>
    <user>U4Z4NEUQG</user>
    <text>I accept donations toward my holidays fund if you insist.</text>
  </message>
  <message>
    <ts>2017-07-08T11:45:46.412956</ts>
    <user>U4Z4NEUQG</user>
    <text>But if you can convince more people to use elm to make it mainstream, I guess that would be the best thing.</text>
  </message>
  <message>
    <ts>2017-07-08T11:46:31.416633</ts>
    <user>U4Z4NEUQG</user>
    <text>I still look like an alien when I say "elm".</text>
  </message>
  <message>
    <ts>2017-07-08T11:48:57.428649</ts>
    <user>U4Z4NEUQG</user>
    <text>But I remember people asking "some dance?" when I was introducing JavaScript.</text>
  </message>
  <message>
    <ts>2017-07-08T12:14:19.559000</ts>
    <user>U2KE0P8DT</user>
    <text>I upgraded Node.js and npm on my Mac yesterday, and moved to the latest version of elm-test.

```
$ elm-test --version
0.18.7
```

I removed the tests/elm-stuff directory, updated all the “dependencies” in tests/elm-package.json to the latest, to be compatible with the latest version of elm-community/elm-test, removed my Main.elm, since the new elm-test auto-generates that to run either all exposed Test values or the ones you include on the command line.

Still no luck, got errors of the forms:

```
Cannot find variable `Test.Runner.getFailure`
Cannot find variable `Test.Runner.isTodo`
```

While compiling the source files in /usr/local/lib/node_modules/elm-test/src.

I finally figured it out. I had to delete the top-level elm-stuff directory in my project, as its generated-code had cached an earlier version of the Test.Runner module.

Whew!</text>
  </message>
  <message>
    <ts>2017-07-08T12:15:26.565005</ts>
    <user>U2KE0P8DT</user>
    <text>Oh, I also had to remove rtfeldman/node-test-runner from the “dependencies” in tests/elm-package.json</text>
  </message>
  <message>
    <ts>2017-07-08T12:15:55.567424</ts>
    <user>U2KE0P8DT</user>
    <text>I think I will like having the Main module auto-generated, but the upgrade was painful.</text>
  </message>
  <message>
    <ts>2017-07-08T12:17:27.574566</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/rtfeldman/node-test-runner/issues/151&gt; &amp;lt;- we've realized the same. For what it's worth, we do now have a changelog, and had a migration guide in there, too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T12:17:47.576041</ts>
    <user>U5FC7BE0G</user>
    <text>&lt;@U3SJEDR96&gt; I already am spreading the love :slightly_smiling_face: I hope that my love spreading at my company will one day lead to an actual real-world elm project for a client.</text>
  </message>
  <message>
    <ts>2017-07-08T12:18:59.581828</ts>
    <user>U5FC7BE0G</user>
    <text>&lt;@U4Z4NEUQG&gt; In my company quite a few people have heard of elm or even worked with it. And with me rambling on about it even more will :wink:</text>
  </message>
  <message>
    <ts>2017-07-08T12:20:23.588451</ts>
    <user>U3SJEDR96</user>
    <text>I also feel like Elm is getting name-dropped more and more often. Even when it's in a sentence saying "we didn't pick Elm because _xyz_", I still feel like it might encourage some people to play around with it and discover more about it. For example, &lt;https://githubengineering.com/how-four-native-developers-wrote-an-electron-app/&gt;</text>
  </message>
  <message>
    <ts>2017-07-08T12:21:45.594863</ts>
    <user>U3SJEDR96</user>
    <text>Could just be the Baader-Meinhof phenomenon at work, tho</text>
  </message>
  <message>
    <ts>2017-07-08T12:22:33.598697</ts>
    <user>U2KE0P8DT</user>
    <text>My node.js upgrade was predicated on getting Electron to work, as a wrapper around a Lisp web server. I used Apache Cordova to wrap my Elm kakuro app for the iOS and Android app stores.</text>
  </message>
  <message>
    <ts>2017-07-08T12:25:45.614509</ts>
    <user>U5FC7BE0G</user>
    <text>Actually what convinced me to look closer at elm were the many talks at React-Conf that mentioned elm. After watching these I decided to have a go at it myself. No regrets :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T12:27:17.621687</ts>
    <user>U2KE0P8DT</user>
    <text>I happened across Elm last October, and quickly fell in love. And that’s saying a lot from an old Lisp weenie.</text>
  </message>
  <message>
    <ts>2017-07-08T12:34:23.656216</ts>
    <user>U2SR9DL7Q</user>
    <text>I cannot remember how I found elm. I don't know anyone personally who used it. I think I just found a Richard talk online and thought, well... this seems like a sensible _not javascript/not-derivative-of-javascript_ thats seems neither too immature nor too bloated.</text>
  </message>
  <message>
    <ts>2017-07-08T12:37:41.672031</ts>
    <user>U2SR9DL7Q</user>
    <text>I should note that I would think it is much easier to convince yourself to try elm if you *don't* have much  experience in front-end design, but it probably slows down learning speed because you're learning elm and web development at the same time. Then again, I don't have to _unlearn_ any bad practices either. I'll think more on this.</text>
  </message>
  <message>
    <ts>2017-07-08T15:43:39.588091</ts>
    <user>U601ELFEG</user>
    <text>Just poppin' in to say: _Thanks, Elm, for making web programming fun again!_</text>
  </message>
  <message>
    <ts>2017-07-08T15:50:03.616399</ts>
    <user>U3R7CKQRX</user>
    <text>Hi everyone, if anyone is trying to migrate to Elm from a React codebase this might help you. &lt;https://github.com/ChristophP/web-react-components&gt; It's a wrapper &lt;@U63K0CFEK&gt; and I made that lets you use React components as Web components with the main intention being to be able to use them in Elm. I know this is not 100% elm specific but I hope that it may help someone having a counter argument to the old "Yeah Elm is cool, but what about all of our existing React components?". Would love to hear some feedback on it btw. Also shoutout to &lt;@U0CL7484S&gt; and &lt;@U0CL0AS3V&gt; because talks with them about this topic kinda inspired the whole thing :slightly_smiling_face:.</text>
  </message>
  <message>
    <ts>2017-07-08T16:12:56.723010</ts>
    <user>U2TFVFSJK</user>
    <text>Lol. I found elm on /r/programmingcirclejerk because you couldn't add 2 numbers in the REPL without connecting to github to download a package.</text>
  </message>
  <message>
    <ts>2017-07-08T20:10:56.616033</ts>
    <user>U23SA861Y</user>
    <text>huh, really?</text>
  </message>
  <message>
    <ts>2017-07-08T20:11:59.619395</ts>
    <user>U23SA861Y</user>
    <text>umm, that doesn't seem to be the case. If I pop the repl i can add two numbers</text>
  </message>
  <message>
    <ts>2017-07-08T20:15:35.631157</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U23SA861Y&gt; perhaps a very early version?</text>
  </message>
  <message>
    <ts>2017-07-08T20:15:43.631658</ts>
    <user>U23SA861Y</user>
    <text>perhaps</text>
  </message>
  <message>
    <ts>2017-07-08T20:16:06.632866</ts>
    <user>U23SA861Y</user>
    <text>I can see that happening early in a language</text>
  </message>
  <message>
    <ts>2017-07-08T20:16:08.632979</ts>
    <user>U2SR9DL7Q</user>
    <text>back in the lawless times of pre 0.16</text>
  </message>
  <message>
    <ts>2017-07-08T20:16:38.634545</ts>
    <user>U23SA861Y</user>
    <text>the first rule of elm club is we don't talk about pre-0.16</text>
  </message>
  <message>
    <ts>2017-07-08T20:37:34.700966</ts>
    <user>U48AEBJQ3</user>
    <text>I feel a bit sorry for the FRP folks who got into Elm only to have it scuttled under their feet.</text>
  </message>
  <message>
    <ts>2017-07-08T20:54:42.756079</ts>
    <user>U2TFVFSJK</user>
    <text>&lt;@U23SA861Y&gt; I think on first install when you run the repl and don't have internet access it tries to download some stuff from the elm website</text>
  </message>
  <message>
    <ts>2017-07-08T20:54:59.756887</ts>
    <user>U2TFVFSJK</user>
    <text>&lt;https://twitter.com/ckolderup/status/789002880246177792?lang=en&gt;</text>
  </message>
  <message>
    <ts>2017-07-08T22:11:01.000231</ts>
    <user>U23SA861Y</user>
    <text>I didn't notice that, the elm installs are per project</text>
  </message>
  <message>
    <ts>2017-07-08T22:11:07.000510</ts>
    <user>U23SA861Y</user>
    <text>or I believe so</text>
  </message>
  <message>
    <ts>2017-07-09T00:07:27.317616</ts>
    <user>U64MK7215</user>
    <text>how do i trigger 2 events with onclick?</text>
  </message>
  <message>
    <ts>2017-07-09T00:54:09.446803</ts>
    <user>U23SA861Y</user>
    <text>hmm, which two events</text>
  </message>
  <message>
    <ts>2017-07-09T07:12:33.520455</ts>
    <user>U0M9CNX1A</user>
    <text>&lt;@U64MK7215&gt; typically I will try to model this sort of situation with a single message that describes what the user did (FooButtonClicked) and handle the multiple things you want to happen in the update function. Don't forget you can extract/share functions between branches of your update case. </text>
  </message>
  <message>
    <ts>2017-07-09T07:44:07.622092</ts>
    <user>U0JBSEGHY</user>
    <text>How are people managing live reload with Elm projects. It looks like elm-live is unmaintained? Is everyone using webpack?</text>
  </message>
  <message>
    <ts>2017-07-09T07:44:21.622912</ts>
    <user>U0JBSEGHY</user>
    <text>I would prefer not to use webpack if I can help it lol.</text>
  </message>
  <message>
    <ts>2017-07-09T08:18:25.737726</ts>
    <user>U0CLDU8UB</user>
    <text>elm-live works fine</text>
  </message>
  <message>
    <ts>2017-07-09T08:40:42.813162</ts>
    <user>U0EUHKVGB</user>
    <text>elm-live actually has some issues right now if you are also using elm-test to watch files</text>
  </message>
  <message>
    <ts>2017-07-09T10:04:50.133617</ts>
    <user>U2SR9DL7Q</user>
    <text>Hey all. I have a strange conundrum. I'm trying to do some clever redirection in an SPA with the `Navigation` and `Routing` modules.</text>
  </message>
  <message>
    <ts>2017-07-09T10:11:09.159939</ts>
    <user>U2SR9DL7Q</user>
    <text>I followed the method outlined in the Elm tutorial with great success, but found a follow up describing a 'push-state' model which I wanted to try so users could navigate to the various 'pages' from a navigation bar in the drawer. 

Unfortunately after giving it a try I found that while the link to the 'home' page works, the second page I'm testing with doesn't appear to work. 

Specifically, where I should be seeing ..../secondpage, I instead have to use /#secondpage from the original form. The button either fails to trigger the change silently or if I type what should be the proper URL into the browser, it triggers the 404 error. 

&lt;https://github.com/sporto/elm-navigation-pushstate/blob/master/src/Main.elm&gt; is the guide I have been following.</text>
  </message>
  <message>
    <ts>2017-07-09T10:12:32.165353</ts>
    <user>U2SR9DL7Q</user>
    <text>Below are my _Routing.elm_ and relevant _Views.elm_ respectively. I am reasonably sure that my updates and messages match the example code.
```
viewTestLink : List (Html Msg)
viewTestLink =
    [ a
        [ href paths.home
        , onLinkClick (ChangeLocation paths.home)
        ]
        [ text "Home" ]
    , a
        [ href paths.resume
        , onLinkClick (ChangeLocation paths.resume)
        ]
        [ text "Resume" ]
    ]
```
```
paths : { home : String, resume : String }
paths =
    { home = "/"
    , resume = "/resume"
    }


onLinkClick : msg -&amp;gt; Attribute msg
onLinkClick message =
    let
        options =
            { stopPropagation = False
            , preventDefault = True
            }
    in
    onWithOptions "click" options (Decode.succeed message)


matchers : Parser (Route -&amp;gt; a) a
matchers =
    oneOf
        [ map HomeRoute top
        , map ResumeRoute (s "resume")
        ]


parseLocation : Location -&amp;gt; Route
parseLocation location =
    case parseHash matchers location of
        Just route -&amp;gt;
            route

        Nothing -&amp;gt;
            NotFoundRoute
```</text>
  </message>
  <message>
    <ts>2017-07-09T10:16:42.182474</ts>
    <user>U2SR9DL7Q</user>
    <text>a link to the github: &lt;https://github.com/tkshill/tkshill.github.io/blob/master/Main.elm&gt; and a link to the site itself: &lt;https://tkshill.github.io/&gt; where if you click the drawer the problem can be seen.</text>
  </message>
  <message>
    <ts>2017-07-09T10:17:48.186725</ts>
    <user>U0JFGGZS6</user>
    <text>and you tried `parsePath` instead of `parseHash` ?</text>
  </message>
  <message>
    <ts>2017-07-09T10:19:17.193027</ts>
    <user>U2SR9DL7Q</user>
    <text>... I'm going to feel quite silly if that's the problem :neutral_face:</text>
  </message>
  <message>
    <ts>2017-07-09T10:23:18.208869</ts>
    <user>U2SR9DL7Q</user>
    <text>So that helped! But now there seems to be the issue that it returns the 404 message on the initial page load.</text>
  </message>
  <message>
    <ts>2017-07-09T10:38:12.267972</ts>
    <user>U0JFGGZS6</user>
    <text>before or after it hits your Elm app?</text>
  </message>
  <message>
    <ts>2017-07-09T10:39:02.271451</ts>
    <user>U2SR9DL7Q</user>
    <text>after. this is testing in elm reactor.</text>
  </message>
  <message>
    <ts>2017-07-09T10:39:22.272764</ts>
    <user>U2SR9DL7Q</user>
    <text>so I redirects to my 404 div</text>
  </message>
  <message>
    <ts>2017-07-09T10:39:39.273766</ts>
    <user>U0JFGGZS6</user>
    <text>I've always used hash urls so not as familiar with the 'push state' style</text>
  </message>
  <message>
    <ts>2017-07-09T10:42:34.285798</ts>
    <user>U2SR9DL7Q</user>
    <text>it's strange. the home button works. when the app starts, Navigation calls the `OnLocationChange` with the current address which should be _localhost:8000_</text>
  </message>
  <message>
    <ts>2017-07-09T10:43:37.289778</ts>
    <user>U0JFGGZS6</user>
    <text>hopefully someone else can weigh in.  This issue may be relevant. &lt;https://github.com/evancz/url-parser/issues/35&gt;</text>
  </message>
  <message>
    <ts>2017-07-09T10:43:41.290067</ts>
    <user>U2SR9DL7Q</user>
    <text>okay, so I think I know why it's confused. The base directory UrlParser provides is localhost:8000 but the active address using elm reactor is localhost:8000/Main.elm</text>
  </message>
  <message>
    <ts>2017-07-09T10:44:45.294420</ts>
    <user>U2SR9DL7Q</user>
    <text>so it thinks Main.elm is an invalid URL. I'd have to test outside of localhost to be certain.</text>
  </message>
  <message>
    <ts>2017-07-09T10:45:10.296237</ts>
    <user>U3SJEDR96</user>
    <text>You need server-side configuration to map every route to your elm-app</text>
  </message>
  <message>
    <ts>2017-07-09T10:45:56.299344</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0JFGGZS6&gt; this issue looks like exactly what is going on.</text>
  </message>
  <message>
    <ts>2017-07-09T10:48:05.308101</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U3SJEDR96&gt; I _think_ I understand what you're saying, but I'm not sure what that means in terms of next steps. If I understand the problem now, this problem shouldn't occur on the live site. But I'm not sure what I would need to do to perform server side mapping in my test environment.</text>
  </message>
  <message>
    <ts>2017-07-09T11:25:17.472012</ts>
    <user>U5J0H2NS2</user>
    <text>&lt;@U2SR9DL7Q&gt; Sorry if I misunderstand your issue, but why don't you use hashed urls if you want client-side routing?</text>
  </message>
  <message>
    <ts>2017-07-09T11:38:22.528296</ts>
    <user>U2SR9DL7Q</user>
    <text>I initially used hashed urls before linking up the navigation buttons. A small issue was just that the generated urls have the '#' symbol added in. It just happens that the sample code I found describing how to reroute from the href attribute in my buttons also described how to use push state to remove the '#' symbol. &lt;@U5J0H2NS2&gt; </text>
  </message>
  <message>
    <ts>2017-07-09T11:40:11.536252</ts>
    <user>U2SR9DL7Q</user>
    <text>Now it seems to be working, but the initial page when the app starts is being redirected to the pagenotfound response. </text>
  </message>
  <message>
    <ts>2017-07-09T11:42:04.544697</ts>
    <user>U2SR9DL7Q</user>
    <text>Specifically, the div I've set to appear for an invalid page request within the app appears, Not the browser one. So from there, I can use the nav drawer to go to the other pages as intended. </text>
  </message>
  <message>
    <ts>2017-07-09T11:44:11.553855</ts>
    <user>U5J0H2NS2</user>
    <text>I see it on your webpage. The link ".../resume" works in the menu. But since this is not a hashed url, if I copy-paste it into the browser, I get 404</text>
  </message>
  <message>
    <ts>2017-07-09T11:44:58.557620</ts>
    <user>U2SR9DL7Q</user>
    <text>Yup. But when it was hashed, the menu link didn't work. </text>
  </message>
  <message>
    <ts>2017-07-09T11:45:03.558149</ts>
    <user>U5J0H2NS2</user>
    <text>Or if I click F5 to refresh</text>
  </message>
  <message>
    <ts>2017-07-09T11:45:38.561063</ts>
    <user>U2SR9DL7Q</user>
    <text>And to access the resume page, I had to type '#resume' into the browser </text>
  </message>
  <message>
    <ts>2017-07-09T11:46:14.563702</ts>
    <user>U5J0H2NS2</user>
    <text>I have found this article to be useful: &lt;https://medium.com/elm-shorts/choosing-the-right-elm-spa-architecture-d6e8275f6899&gt;</text>
  </message>
  <message>
    <ts>2017-07-09T11:47:48.570587</ts>
    <user>U2SR9DL7Q</user>
    <text>At this point, I'm not bothered about the pound symbol. My priority is consistent navigation and page functionality... :( </text>
  </message>
  <message>
    <ts>2017-07-09T11:52:01.589783</ts>
    <user>U2SR9DL7Q</user>
    <text>This article... is very good. </text>
  </message>
  <message>
    <ts>2017-07-09T11:59:50.625023</ts>
    <user>U2SR9DL7Q</user>
    <text>Time to roll up my sleeves are figure things out.</text>
  </message>
  <message>
    <ts>2017-07-09T12:00:26.628913</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U5J0H2NS2&gt; &lt;@U3SJEDR96&gt; &lt;@U0JFGGZS6&gt; thanks for the assistance!</text>
  </message>
  <message>
    <ts>2017-07-09T12:03:18.643133</ts>
    <user>U5J0H2NS2</user>
    <text>What if you change &amp;lt;a href="/resume"&amp;gt;Resume&amp;lt;/a&amp;gt; to &amp;lt;a href="/#resume"&amp;gt;Resume&amp;lt;/a&amp;gt;</text>
  </message>
  <message>
    <ts>2017-07-09T12:05:41.655066</ts>
    <user>U2SR9DL7Q</user>
    <text>Giving that a try right now</text>
  </message>
  <message>
    <ts>2017-07-09T12:06:37.659564</ts>
    <user>U5J0H2NS2</user>
    <text>Or you could use an elm-mdl List in the menu and assign proper msg-s to them. Then you could change the url with the Navigation package inside your update. This generates a new Msg. Then in the next update, you parse your new url .</text>
  </message>
  <message>
    <ts>2017-07-09T12:07:04.661810</ts>
    <user>U5J0H2NS2</user>
    <text>This would be more mdl-ish I guess</text>
  </message>
  <message>
    <ts>2017-07-09T12:08:22.668084</ts>
    <user>U2SR9DL7Q</user>
    <text>well, I swapped out a mdl nav for a regular nav just to see if it was an mdl issue (it wasnt)</text>
  </message>
  <message>
    <ts>2017-07-09T12:09:02.671207</ts>
    <user>U2SR9DL7Q</user>
    <text>```
[ Layout.link
       [ Layout.href paths.home
       , Options.attribute &amp;lt;|
           onLinkClick &amp;lt;|
               ChangeLocation paths.home
       ]
       [ text "Home" ]
   , Layout.link
       [ Layout.href paths.resume
       , Options.attribute &amp;lt;|
           onLinkClick &amp;lt;|
               ChangeLocation paths.resume
       ]
       [ text "Resume" ]
   ]
```</text>
  </message>
  <message>
    <ts>2017-07-09T12:10:59.680579</ts>
    <user>U2SR9DL7Q</user>
    <text>This was the original idea. It's essentially the same as what it's doing now. 

But you're suggesting adding a separate msg for each URL?</text>
  </message>
  <message>
    <ts>2017-07-09T12:11:55.684654</ts>
    <user>U5J0H2NS2</user>
    <text>Yes. Or one common msg with the url as parameter</text>
  </message>
  <message>
    <ts>2017-07-09T12:16:50.706479</ts>
    <user>U2SR9DL7Q</user>
    <text>so then... my `changeLocation` function would presumable use case statements to construct it's own urls, and pass those the `Navigation.newUrl` command...</text>
  </message>
  <message>
    <ts>2017-07-09T12:17:37.709852</ts>
    <user>U2SR9DL7Q</user>
    <text>I'll try some of your suggestions. I need to re-read that medium article, and look into just what url is returned when the page first loads.</text>
  </message>
  <message>
    <ts>2017-07-09T14:18:57.271600</ts>
    <user>U66RFDZ8F</user>
    <text>Hello everyone, I just started learning Elm, and I have been looking at parent child communication</text>
  </message>
  <message>
    <ts>2017-07-09T14:19:47.275353</ts>
    <user>U66RFDZ8F</user>
    <text>this is kinda troubling</text>
  </message>
  <message>
    <ts>2017-07-09T14:20:03.276552</ts>
    <user>U66RFDZ8F</user>
    <text>What I find is not appealing</text>
  </message>
  <message>
    <ts>2017-07-09T14:21:25.282800</ts>
    <user>U66RFDZ8F</user>
    <text>I have looked at &lt;https://medium.com/@alex.lew/the-translator-pattern-a-model-for-child-to-parent-communication-in-elm-f4bfaa1d3f98&gt; and &lt;https://github.com/evancz/elm-sortable-table&gt; for inspiration and I still think there's a gap</text>
  </message>
  <message>
    <ts>2017-07-09T14:22:13.286332</ts>
    <user>U66RFDZ8F</user>
    <text>From what I saw, I came up with this &lt;https://gist.github.com/thedumbtechguy/b930cfe1f066e24bc266d6b9d1eac059&gt;</text>
  </message>
  <message>
    <ts>2017-07-09T14:23:06.290306</ts>
    <user>U66RFDZ8F</user>
    <text>It's nested TEA but with the boilerplate reduced as much as possible</text>
  </message>
  <message>
    <ts>2017-07-09T14:23:40.292943</ts>
    <user>U66RFDZ8F</user>
    <text>now my question is this, is there any reason why this pattern might be bad?</text>
  </message>
  <message>
    <ts>2017-07-09T14:23:51.293800</ts>
    <user>U66RFDZ8F</user>
    <text>are there any caveats I don't see?</text>
  </message>
  <message>
    <ts>2017-07-09T14:24:23.296212</ts>
    <user>U66RFDZ8F</user>
    <text>I'd really appreciate the help of more experienced members looking at the Gist and giving me some feedback</text>
  </message>
  <message>
    <ts>2017-07-09T14:24:28.296559</ts>
    <user>U3SJEDR96</user>
    <text>Nope, it's a great pattern, even. Once you feel like you're passing in too many messages, you may consider passing in a `Config msg` record that has the correct functions for mapping things, in a named record</text>
  </message>
  <message>
    <ts>2017-07-09T14:26:05.304155</ts>
    <user>U3SJEDR96</user>
    <text>The "translator" pattern doesn't appeal much to me, either. I think it's very heavy-handed and I don't really buy the "one size fits all" type solutions anyway. elm-sortable-table is neat, but works mostly because it has very little internal state, and isn't applicable to quite a few situations</text>
  </message>
  <message>
    <ts>2017-07-09T14:26:31.305861</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U3SJEDR96&gt; I saw that done in Sortable Table, but for many components, I believe it might be too much bootstrap code for little gain</text>
  </message>
  <message>
    <ts>2017-07-09T14:26:54.307456</ts>
    <user>U66RFDZ8F</user>
    <text>I do agree once it starts growing, to use a record as that would make it much more concise</text>
  </message>
  <message>
    <ts>2017-07-09T14:27:45.311216</ts>
    <user>U66RFDZ8F</user>
    <text>appreciate the input</text>
  </message>
  <message>
    <ts>2017-07-09T14:28:01.312487</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, that's what I mean. Depends on the number, but even if it's just 2 or 3 functions, having names for them is easy, and defining a quick `{ something : a -&amp;gt; Msg }` is easy enough :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-09T14:28:44.315621</ts>
    <user>U66RFDZ8F</user>
    <text>I think I'd go with the record, if for nothing but consistency</text>
  </message>
  <message>
    <ts>2017-07-09T14:29:00.316677</ts>
    <user>U66RFDZ8F</user>
    <text>I can also see the self documenting benefits</text>
  </message>
  <message>
    <ts>2017-07-09T14:30:10.322547</ts>
    <user>U3SJEDR96</user>
    <text>Do be careful of abstracting too early, tho. On a page-level, doing nested tea makes sense. Within pages, it quickly becomes too much encapsulation for little gain. I would recommend checking out the talks by Evan and Richard from elm-europe, they both talk about these topics</text>
  </message>
  <message>
    <ts>2017-07-09T14:30:48.325944</ts>
    <user>U66RFDZ8F</user>
    <text>I definitely plan to abstract only on page level for now and really big reusable commponents</text>
  </message>
  <message>
    <ts>2017-07-09T14:31:33.329632</ts>
    <user>U66RFDZ8F</user>
    <text>And I only have one large component that I need to currently reuse and guess what, it is a table :smile:</text>
  </message>
  <message>
    <ts>2017-07-09T14:38:41.363023</ts>
    <user>U3SJEDR96</user>
    <text>Great!</text>
  </message>
  <message>
    <ts>2017-07-09T14:41:50.377535</ts>
    <user>U66RFDZ8F</user>
    <text>One more thing, is it okay to access the internal state of the login component?
I don't see much wrong with it as it is in the single source of truth.</text>
  </message>
  <message>
    <ts>2017-07-09T14:43:15.383536</ts>
    <user>U66RFDZ8F</user>
    <text>Or would it be better for the login page to designate what is actually internal internal? 
In my example, `username` and `password` are used by the app, but I can easily think of situations where the component would need some encapsulated state.</text>
  </message>
  <message>
    <ts>2017-07-09T14:43:49.385981</ts>
    <user>U66RFDZ8F</user>
    <text>I think Sortable Table advocates using helper functions to retrieve data</text>
  </message>
  <message>
    <ts>2017-07-09T14:45:12.392329</ts>
    <user>U66RFDZ8F</user>
    <text>Is there any benefit to this indirection?</text>
  </message>
  <message>
    <ts>2017-07-09T14:51:51.422736</ts>
    <user>U3SJEDR96</user>
    <text>It's just encapsulation. Allows you to change the internal without affecting other modules, even though the compiler generally has your back when you do that anyway</text>
  </message>
  <message>
    <ts>2017-07-09T15:24:52.579259</ts>
    <user>U6531GSTW</user>
    <text>Does this mean the json file is bad? Error: BadPayload "Given an invalid JSON: Unexpected token &amp;lt; in JSON at position 16" { status = { code = 200, message = "" }, headers = Dict.fromList</text>
  </message>
  <message>
    <ts>2017-07-09T15:25:00.579850</ts>
    <user>U6531GSTW</user>
    <text>&lt;https://jsonblob.com/6ecd993e-6290-11e7-ae4c-e793fe90c432&gt;</text>
  </message>
  <message>
    <ts>2017-07-09T15:34:01.623695</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U6531GSTW&gt; rather your json decoder failed, which might be an error in either the decoder or the json</text>
  </message>
  <message>
    <ts>2017-07-09T15:38:42.646181</ts>
    <user>U3SJEDR96</user>
    <text>That's a json.parse error, so looks like it's not returning a proper Json indeed?</text>
  </message>
  <message>
    <ts>2017-07-09T15:51:10.701349</ts>
    <user>U4D11A1J4</user>
    <text>Can anyone help and explain how to match on a type field - the compiler states that _-&amp;gt; is redundant and must be removed?
Obviously message and node.message may differ, so how should that be expressed and checked?

`code`
type Message = Good | Bad

type alias Node = { message  : Message }

matches : Message -&amp;gt; Node -&amp;gt; List Node
matches message node =
    case node.message of
        message -&amp;gt;
            [ node ]
        _ -&amp;gt;
            []
`code`</text>
  </message>
  <message>
    <ts>2017-07-09T15:55:12.718917</ts>
    <user>U23SA861Y</user>
    <text>you seem to want an if statement there instead of a case</text>
  </message>
  <message>
    <ts>2017-07-09T15:55:24.719956</ts>
    <user>U23SA861Y</user>
    <text>and yes, all expressions must return a result</text>
  </message>
  <message>
    <ts>2017-07-09T15:56:28.725311</ts>
    <user>U4D11A1J4</user>
    <text>Could you give an example - I thought types could only be matched using a case?</text>
  </message>
  <message>
    <ts>2017-07-09T15:57:33.730145</ts>
    <user>U23SA861Y</user>
    <text>you aren't matching types here though?</text>
  </message>
  <message>
    <ts>2017-07-09T15:57:44.731015</ts>
    <user>U23SA861Y</user>
    <text>you are testing equality</text>
  </message>
  <message>
    <ts>2017-07-09T15:58:56.736631</ts>
    <user>U4D11A1J4</user>
    <text>I could replace "message -&amp;gt;" with "Good -&amp;gt;", which makes me think of it as a type</text>
  </message>
  <message>
    <ts>2017-07-09T15:59:48.740481</ts>
    <user>U23SA861Y</user>
    <text>umm, message is a value containing something of type Message</text>
  </message>
  <message>
    <ts>2017-07-09T16:00:15.743104</ts>
    <user>U23SA861Y</user>
    <text>what is this code attempting to do?</text>
  </message>
  <message>
    <ts>2017-07-09T16:01:49.751598</ts>
    <user>U4D11A1J4</user>
    <text>ok. the code is a minimised example of the error - it should return a list if the passed node.message matches the passed message parameter</text>
  </message>
  <message>
    <ts>2017-07-09T16:03:11.758187</ts>
    <user>U4D11A1J4</user>
    <text>can that example be transformed using an if?</text>
  </message>
  <message>
    <ts>2017-07-09T16:04:40.765301</ts>
    <user>U23SA861Y</user>
    <text>aah yeah</text>
  </message>
  <message>
    <ts>2017-07-09T16:04:54.766359</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3HHVxxCW2x5a1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-09T16:07:54.780559</ts>
    <user>U4D11A1J4</user>
    <text>Thanks - that does compile without error!
Any idea why the compiler reported the original error when using case?
It would seem to be a mistake, since clearly node.message and message can be different (therefore _ -&amp;gt; is *not* redundant)</text>
  </message>
  <message>
    <ts>2017-07-09T16:08:27.783223</ts>
    <user>U23SA861Y</user>
    <text>well the case was trying to do a type match not a value match and there was no type constraint so it always matched that case</text>
  </message>
  <message>
    <ts>2017-07-09T16:08:37.783997</ts>
    <user>U23SA861Y</user>
    <text>I believe anyway</text>
  </message>
  <message>
    <ts>2017-07-09T16:09:54.789784</ts>
    <user>U4D11A1J4</user>
    <text>ok - thanks for you help. I might raise that question again in the group.</text>
  </message>
  <message>
    <ts>2017-07-09T18:41:14.474732</ts>
    <user>U3LUC6SNS</user>
    <text>I'm thinking of starting an Elm user group or meetup or something when I return to Columbus, Ohio in the Fall.  Any advice on this?</text>
  </message>
  <message>
    <ts>2017-07-09T18:50:43.518121</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U3LUC6SNS&gt; I'd recommend &lt;http://tech.noredink.com/post/142283641812/designing-meetups-to-build-better-communities&gt;</text>
  </message>
  <message>
    <ts>2017-07-09T19:02:13.572592</ts>
    <user>U0FP80EKB</user>
    <text>We do coding nights in Chicago, and it is awesome. In fact, we have one tomorrow night.</text>
  </message>
  <message>
    <ts>2017-07-09T19:02:24.573423</ts>
    <user>U0FP80EKB</user>
    <text>We call them coding nights, since “hack night” is a bit annoying of a term. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-09T21:02:14.259378</ts>
    <user>U13H7FNDQ</user>
    <text>&lt;@U0FP80EKB&gt;, nice, I agree!</text>
  </message>
  <message>
    <ts>2017-07-09T23:25:42.437614</ts>
    <user>U0F7JPK36</user>
    <text>&lt;@U13H7FNDQ&gt; &lt;@U0FP80EKB&gt; there was a specific reason for this that i saw in a tweet once i'll see if i can find it</text>
  </message>
  <message>
    <ts>2017-07-09T23:27:20.451182</ts>
    <user>U0F7JPK36</user>
    <text>found it: &lt;https://twitter.com/erinrwhite/status/707956467224190976&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T00:03:15.741585</ts>
    <user>U1QDHAF61</user>
    <text>Hello, I am using json over websocket and it works fine as long as packet is below around 4500 bytes. Then it gets broken into two fragments. Is it expected?</text>
  </message>
  <message>
    <ts>2017-07-10T00:03:47.745993</ts>
    <user>U1QDHAF61</user>
    <text>Should I implement logic of de-fragmentation?</text>
  </message>
  <message>
    <ts>2017-07-10T00:12:19.816912</ts>
    <user>U1QDHAF61</user>
    <text>Yes, I added logging:</text>
  </message>
  <message>
    <ts>2017-07-10T00:12:52.821700</ts>
    <user>U1QDHAF61</user>
    <text>socket.addEventListener("message", function(event) {
		     _console.log('ws msg: ',  event.data);_

			_elm_lang$core$Native_Scheduler.rawSpawn(A2(settings.onMessage, socket, event.data));
		});</text>
  </message>
  <message>
    <ts>2017-07-10T00:13:12.824387</ts>
    <user>U1QDHAF61</user>
    <text>and see that message is fragmented on low layer</text>
  </message>
  <message>
    <ts>2017-07-10T00:17:30.859757</ts>
    <user>U13H7FNDQ</user>
    <text>Thanks for sharing! In the process of swapping the SF user group to &lt;@U0FP80EKB&gt;'s suggestion</text>
  </message>
  <message>
    <ts>2017-07-10T05:18:30.128554</ts>
    <user>U0JQWAETG</user>
    <text>Hi! Do you have a better way of expressing something like this:
```
encoder_value =
    case record.logo_ref of
        Just value -&amp;gt;
            Json.Encode.string value

        Nothing -&amp;gt;
            Json.Encode.null
```</text>
  </message>
  <message>
    <ts>2017-07-10T05:18:56.138246</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U0CL0AS3V&gt; , &lt;@U0FP80EKB&gt; Excellent advice on starting an Elm user group -- I will definitely go for the coding nights format.  Thanks!</text>
  </message>
  <message>
    <ts>2017-07-10T05:19:22.147618</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U0JQWAETG&gt; Maybe.map |&amp;gt; Maybe.withDefault</text>
  </message>
  <message>
    <ts>2017-07-10T05:20:00.161234</ts>
    <user>U0U6ML22H</user>
    <text>```
encoder_value =
    record.log |&amp;gt; Maybe.map Json.Encode.string |&amp;gt; Maybe.withDefault Json.Encode.null
```</text>
  </message>
  <message>
    <ts>2017-07-10T05:20:30.171957</ts>
    <user>U0JQWAETG</user>
    <text>&lt;@U0U6ML22H&gt; yes, I think that would work, it looks better</text>
  </message>
  <message>
    <ts>2017-07-10T05:20:44.177042</ts>
    <user>U0JQWAETG</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-10T05:20:54.180804</ts>
    <user>U0U6ML22H</user>
    <text>sure :smiley:</text>
  </message>
  <message>
    <ts>2017-07-10T05:23:20.234518</ts>
    <user>U0JQWAETG</user>
    <text>&lt;@U0U6ML22H&gt; Maybe.map is passing the `Maybe String` to `Json.Encode.string` when it expects a string</text>
  </message>
  <message>
    <ts>2017-07-10T05:24:37.262785</ts>
    <user>U0U6ML22H</user>
    <text>nope</text>
  </message>
  <message>
    <ts>2017-07-10T05:25:22.279289</ts>
    <user>U0U6ML22H</user>
    <text>`Maybe.map f v` means if `v` is `Just x` it returns `Just (f x)` otherwise it returns `Nothing`</text>
  </message>
  <message>
    <ts>2017-07-10T05:26:14.298456</ts>
    <user>U0JQWAETG</user>
    <text>I get this:
```
The right side of (|&amp;gt;) is causing a type mismatch.

30|             record.logo
31|&amp;gt;                |&amp;gt; Maybe.map Json.Encode.string

(|&amp;gt;) is expecting the right side to be a:

    String -&amp;gt; a

But the right side is:

    Maybe String -&amp;gt; Maybe Json.Encode.Value
```</text>
  </message>
  <message>
    <ts>2017-07-10T05:26:29.304085</ts>
    <user>U0U6ML22H</user>
    <text>did you write the `Maybe.withDefault` part?</text>
  </message>
  <message>
    <ts>2017-07-10T05:26:57.314302</ts>
    <user>U0JQWAETG</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-10T05:27:04.317132</ts>
    <user>U0JQWAETG</user>
    <text>logo_ref =
            record.logo
                |&amp;gt; Maybe.map Json.Encode.string
                |&amp;gt; Maybe.withDefault Json.Encode.null</text>
  </message>
  <message>
    <ts>2017-07-10T05:27:25.324772</ts>
    <user>U0U6ML22H</user>
    <text>lemme make an Ellie</text>
  </message>
  <message>
    <ts>2017-07-10T05:28:32.349559</ts>
    <user>U0U6ML22H</user>
    <text>&lt;https://ellie-app.com/3HX5XfnXZjsa1/0&gt; this compiles</text>
  </message>
  <message>
    <ts>2017-07-10T05:29:02.360422</ts>
    <user>U0U6ML22H</user>
    <text>what's your function's signature?</text>
  </message>
  <message>
    <ts>2017-07-10T05:29:02.360499</ts>
    <user>U0JQWAETG</user>
    <text>let me check</text>
  </message>
  <message>
    <ts>2017-07-10T05:29:31.371811</ts>
    <user>U0U6ML22H</user>
    <text>the compiler believes the signature over the code, so if you tell it it returns something else, it'll tell you your code is wrong (while it may be that you simply didn't update your sig)</text>
  </message>
  <message>
    <ts>2017-07-10T05:31:09.409704</ts>
    <user>U0JQWAETG</user>
    <text>I can't find the problem in my code, is the same as yours</text>
  </message>
  <message>
    <ts>2017-07-10T05:31:35.419729</ts>
    <user>U0U6ML22H</user>
    <text>can you show me? in private if you'd rather not make it public?</text>
  </message>
  <message>
    <ts>2017-07-10T05:33:42.465985</ts>
    <user>U0JQWAETG</user>
    <text>sure</text>
  </message>
  <message>
    <ts>2017-07-10T05:34:08.475376</ts>
    <user>U0JQWAETG</user>
    <text>I'm modifying your code on ellie to make it like mine</text>
  </message>
  <message>
    <ts>2017-07-10T05:35:42.509209</ts>
    <user>U0U6ML22H</user>
    <text>OK, let me know :smiley:</text>
  </message>
  <message>
    <ts>2017-07-10T05:37:43.551742</ts>
    <user>U0JQWAETG</user>
    <text>ok, it works on ellie :slightly_smiling_face: &lt;https://ellie-app.com/3HX5XfnXZjsa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T05:37:50.554586</ts>
    <user>U0JQWAETG</user>
    <text>sorry! stupid typo on my side</text>
  </message>
  <message>
    <ts>2017-07-10T05:38:55.577714</ts>
    <user>U0U6ML22H</user>
    <text>which one?</text>
  </message>
  <message>
    <ts>2017-07-10T05:40:07.603967</ts>
    <user>U0JQWAETG</user>
    <text>I had logo (String) and logo_ref (Maybe String) and I was using logo instead of logo_ref</text>
  </message>
  <message>
    <ts>2017-07-10T05:40:14.606776</ts>
    <user>U0JQWAETG</user>
    <text>sorry about that!</text>
  </message>
  <message>
    <ts>2017-07-10T05:41:02.624357</ts>
    <user>U0U6ML22H</user>
    <text>it's OK :smiley: it's a good reflex to have: when the compiler tells you that it expects a different "right side", make sure it's not the "left side" that's causing the mismatch</text>
  </message>
  <message>
    <ts>2017-07-10T05:41:26.633118</ts>
    <user>U0U6ML22H</user>
    <text>maybe (!) this should be changed to something like "the right side is x and the left side is y"</text>
  </message>
  <message>
    <ts>2017-07-10T05:42:47.661986</ts>
    <user>U0JQWAETG</user>
    <text>yes, it would be helpful. I find myself struggling with messages like those</text>
  </message>
  <message>
    <ts>2017-07-10T05:43:43.682029</ts>
    <user>U0U6ML22H</user>
    <text>me too, but it's getting better if you keep that in mind (which is why I'm insisting on it =P)</text>
  </message>
  <message>
    <ts>2017-07-10T05:44:50.706423</ts>
    <user>U0JQWAETG</user>
    <text>:slightly_smiling_face: ok, thank you very much! my code is nicer now :wink:</text>
  </message>
  <message>
    <ts>2017-07-10T05:45:21.717674</ts>
    <user>U0U6ML22H</user>
    <text>you're welcome!</text>
  </message>
  <message>
    <ts>2017-07-10T05:53:08.883589</ts>
    <user>U0U6ML22H</user>
    <text>Anyone knows if it's possible, from an Elm program, to get the current time offset from a given timezone?
Use case is this: in my Elm code, I'm using Date.Extra.Format.formatOffset to display dates using a timezone offset. However, that offset varies depending on Daylight Saving Time. I'd need to be able to request if "now" for the given timezone, DST is on or not. That way I could adjust the offset I use.</text>
  </message>
  <message>
    <ts>2017-07-10T05:53:26.890492</ts>
    <user>U0U6ML22H</user>
    <text>or should I just use a port or a flag?</text>
  </message>
  <message>
    <ts>2017-07-10T07:52:06.053650</ts>
    <user>U17R1GD96</user>
    <text>What should I return in the view to render nothing? I want something like `return null` in React.  The React component returning null will not be added to the Virtual DOM at all.</text>
  </message>
  <message>
    <ts>2017-07-10T07:53:59.086819</ts>
    <user>U2M0V559P</user>
    <text>I think `Html.text ""` is what’s suggested.</text>
  </message>
  <message>
    <ts>2017-07-10T07:54:37.098097</ts>
    <user>U2M0V559P</user>
    <text>See &lt;https://stackoverflow.com/questions/38616289/is-there-a-way-to-generate-an-empty-html-node-in-elm-html&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T07:55:12.108765</ts>
    <user>U17R1GD96</user>
    <text>I do not want to render any Html node. It’s not the same as &amp;lt;div/&amp;gt;. It should be nothing at all.</text>
  </message>
  <message>
    <ts>2017-07-10T07:55:27.113566</ts>
    <user>U1CE9DL9H</user>
    <text>an empty text node does not render anything</text>
  </message>
  <message>
    <ts>2017-07-10T07:55:41.117645</ts>
    <user>U1CE9DL9H</user>
    <text>but it does in the current vdom implementation still get added to the dom</text>
  </message>
  <message>
    <ts>2017-07-10T07:56:05.125114</ts>
    <user>U1CE9DL9H</user>
    <text>no idea whether the dom actually optimizes it away, anyway there is no visual difference</text>
  </message>
  <message>
    <ts>2017-07-10T07:56:58.141677</ts>
    <user>U17R1GD96</user>
    <text>The problem is I use Elm in React, and it always needs &amp;lt;div&amp;gt; as root node. So maybe in this case its not possible. I have to exclude the component in the parent component</text>
  </message>
  <message>
    <ts>2017-07-10T07:57:19.148118</ts>
    <user>U2M0V559P</user>
    <text>It’s also the way suggested in the unofficial FAQ: &lt;http://faq.elm-community.org/#how-does-one-render-an-html-node-conditionally&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T07:57:53.159055</ts>
    <user>U17R1GD96</user>
    <text>For pure Elm it may work but not for wrapping Elm in React.</text>
  </message>
  <message>
    <ts>2017-07-10T07:58:41.175116</ts>
    <user>U17R1GD96</user>
    <text>That’s the problem: &lt;https://github.com/evancz/react-elm-components/blob/master/index.js#L18&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T07:59:36.192508</ts>
    <user>U2M0V559P</user>
    <text>Hmm. Ok. I have no experience with wrapping Elm in React.</text>
  </message>
  <message>
    <ts>2017-07-10T08:02:25.249380</ts>
    <user>U17R1GD96</user>
    <text>React cannot return text node. It always need a root tag.</text>
  </message>
  <message>
    <ts>2017-07-10T08:03:13.264154</ts>
    <user>U17R1GD96</user>
    <text>This happens when my React component returns a string: ” A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.”</text>
  </message>
  <message>
    <ts>2017-07-10T08:04:16.284577</ts>
    <user>U17R1GD96</user>
    <text>OK, so the problem is in React. I need to change the way I am adding the Elm component.</text>
  </message>
  <message>
    <ts>2017-07-10T08:15:04.495926</ts>
    <user>U0FP80EKB</user>
    <text>Yeah, I remember that article. Very great. That really influenced my thinking, too. I’m glad we took that to heart here in Chicago.</text>
  </message>
  <message>
    <ts>2017-07-10T08:24:45.697724</ts>
    <user>U1QDHAF61</user>
    <text>Hello, what would be right approach to implement json decoding on top of websocket client when packets are fragmented?</text>
  </message>
  <message>
    <ts>2017-07-10T08:26:53.744564</ts>
    <user>U2L33RRR8</user>
    <text>Hi, how would one implement custom context menu in elm? is there a way to get rightClick events in elm?</text>
  </message>
  <message>
    <ts>2017-07-10T08:28:22.777062</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U2L33RRR8&gt; check out `Html.Events.on` &lt;http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Events#on&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T08:30:05.814339</ts>
    <user>U2L33RRR8</user>
    <text>&lt;@U0FP80EKB&gt; thanks!</text>
  </message>
  <message>
    <ts>2017-07-10T10:31:27.566942</ts>
    <user>U5LFUHH19</user>
    <text>If a user makes a request that my app/JSON server can't find (e.g., an ID that doesn't exist in the db), what should the JSON return?  An empty object `{}`?  Do I change my `Model` to a `Maybe Model`?</text>
  </message>
  <message>
    <ts>2017-07-10T10:34:12.671343</ts>
    <user>U0FP80EKB</user>
    <text>It depends on what you want to do with it. I would look at `RemoteData`, though, rather than `Maybe Model`</text>
  </message>
  <message>
    <ts>2017-07-10T10:34:34.685248</ts>
    <user>U0FP80EKB</user>
    <text>You can then respond to a 404 from your server with an appropriate message to the user</text>
  </message>
  <message>
    <ts>2017-07-10T14:06:31.273091</ts>
    <user>U5QJW0DDE</user>
    <text>What are the most popular ways people use to minify their Elm JavaScript?</text>
  </message>
  <message>
    <ts>2017-07-10T14:07:26.303627</ts>
    <user>U5QJW0DDE</user>
    <text>I suppose the big no no is any minification tool that automatically renames variables</text>
  </message>
  <message>
    <ts>2017-07-10T14:07:32.307330</ts>
    <user>U0GPGFQQY</user>
    <text>I'm using `uglify-js`</text>
  </message>
  <message>
    <ts>2017-07-10T14:07:58.321679</ts>
    <user>U5QJW0DDE</user>
    <text>Aside from removing white space, what are the safest techniques that we could use?</text>
  </message>
  <message>
    <ts>2017-07-10T14:09:07.359512</ts>
    <user>U0GPGFQQY</user>
    <text>kfairwink: why not?</text>
  </message>
  <message>
    <ts>2017-07-10T14:09:27.370420</ts>
    <user>U0GPGFQQY</user>
    <text>renaming local vars is safe</text>
  </message>
  <message>
    <ts>2017-07-10T14:09:57.386361</ts>
    <user>U5QJW0DDE</user>
    <text>That is not correct. There's a thread on the Elm mailing list about this, because sometimes elm refers to constructors by name as text</text>
  </message>
  <message>
    <ts>2017-07-10T14:11:20.431600</ts>
    <user>U0GPGFQQY</user>
    <text>can you provide a link to the thread?</text>
  </message>
  <message>
    <ts>2017-07-10T14:12:30.470027</ts>
    <user>U0GPGFQQY</user>
    <text>if smth is linked as text, it must be a key of an object. you can't link to a variable in local scope as a text</text>
  </message>
  <message>
    <ts>2017-07-10T14:13:38.506720</ts>
    <user>U5QJW0DDE</user>
    <text>It's in a thread and also an issue on github, with regards to making Elm more compatible with googles closure compiler. Not at my computer at the moment, but a quick search for Google closure Elm should reveal it. </text>
  </message>
  <message>
    <ts>2017-07-10T14:14:08.523057</ts>
    <user>U5QJW0DDE</user>
    <text>I suppose private local variables could be renamed, but most of these tools also rename top level objects throughout the program, which happens at the same time. And you cannot do that with Elm</text>
  </message>
  <message>
    <ts>2017-07-10T14:14:51.547300</ts>
    <user>U0GPGFQQY</user>
    <text>yes, Elm is not compatible with advanced optimisations of the Closure compiler. But it works just fine with uglify-js</text>
  </message>
  <message>
    <ts>2017-07-10T14:15:05.555317</ts>
    <user>U5QJW0DDE</user>
    <text>It would be great to get the advantages of automatic inlining in a minification also, I'll have to read up if babel does this</text>
  </message>
  <message>
    <ts>2017-07-10T14:17:17.629236</ts>
    <user>U0GPGFQQY</user>
    <text>Why do you think it's a big deal? If an object key is a long string, `gzip` should minify it just fine.</text>
  </message>
  <message>
    <ts>2017-07-10T14:18:02.653985</ts>
    <user>U0GPGFQQY</user>
    <text>kfairwink: how big is your compiled Elm file?</text>
  </message>
  <message>
    <ts>2017-07-10T14:18:13.659882</ts>
    <user>U5QJW0DDE</user>
    <text>It's not about size for download, it's about runtime performance</text>
  </message>
  <message>
    <ts>2017-07-10T14:18:58.685933</ts>
    <user>U0GPGFQQY</user>
    <text>do you have perf issues in your app?</text>
  </message>
  <message>
    <ts>2017-07-10T14:19:26.701597</ts>
    <user>U5QJW0DDE</user>
    <text>Compiled Elm files always start at around 8000 lines, and then go up from there.</text>
  </message>
  <message>
    <ts>2017-07-10T14:20:05.723404</ts>
    <user>U5QJW0DDE</user>
    <text>I'm porting some stuff from react, where advanced optimizations definitely made a difference, so I'm trying to predict my situation a little bit down the road</text>
  </message>
  <message>
    <ts>2017-07-10T14:20:19.731032</ts>
    <user>U0GPGFQQY</user>
    <text>I meant the size of JS artifact.</text>
  </message>
  <message>
    <ts>2017-07-10T14:20:46.747235</ts>
    <user>U5QJW0DDE</user>
    <text>Streaming many dozens of large objects from the websocket get every second and processing them, that can definitely be a situation where you want to squeeze every last optimization that is available to you</text>
  </message>
  <message>
    <ts>2017-07-10T14:23:14.830228</ts>
    <user>U0GPGFQQY</user>
    <text>I see, in this case, you could maybe structure the app in such a way, so that constant things are evaluated and cached prior to any dynamic processing</text>
  </message>
  <message>
    <ts>2017-07-10T14:24:07.859895</ts>
    <user>U0GPGFQQY</user>
    <text>But maybe you're worrying too much about this and should just code an experiment and see how it performs.</text>
  </message>
  <message>
    <ts>2017-07-10T14:24:37.877021</ts>
    <user>U5QJW0DDE</user>
    <text>Certainly sounds like a very smart idea, but I am not quite sure what you mean</text>
  </message>
  <message>
    <ts>2017-07-10T14:25:42.913973</ts>
    <user>U0GPGFQQY</user>
    <text>I mean if some computation doesn't depend on this high frequency socket data, then you could run it once and save the result in your model.</text>
  </message>
  <message>
    <ts>2017-07-10T14:25:53.920447</ts>
    <user>U0GPGFQQY</user>
    <text>Instead of evaluating each time</text>
  </message>
  <message>
    <ts>2017-07-10T14:26:30.941264</ts>
    <user>U0GPGFQQY</user>
    <text>It's just a general idea, because I don't know the details of your app.</text>
  </message>
  <message>
    <ts>2017-07-10T14:35:18.239147</ts>
    <user>U5QJW0DDE</user>
    <text>In my case, it's financial data that is streaming in in real time, and it must get processed upon each update</text>
  </message>
  <message>
    <ts>2017-07-10T14:35:21.240878</ts>
    <user>U5W86UED6</user>
    <text>the restrictions that the Closure compiler makes are pretty reasonable &lt;https://developers.google.com/closure/compiler/docs/limitations&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T14:36:39.284408</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U5W86UED6&gt; this is one of the restrictions that elm cannot comply with: Using string names to refer to object properties:</text>
  </message>
  <message>
    <ts>2017-07-10T14:37:36.315559</ts>
    <user>U5W86UED6</user>
    <text>I’m very curious to know why Elm can’t comply with that! do you have a link to the mailing list thread or know of prior discussion around this topic?</text>
  </message>
  <message>
    <ts>2017-07-10T14:38:55.358907</ts>
    <user>U5QJW0DDE</user>
    <text>It's because elm directly refers to object properties as a piece of text, exactly what the restriction talks about. I will go try to dig up the github issue that discuss this, which was also mentioned last week on the Elm mailing list</text>
  </message>
  <message>
    <ts>2017-07-10T14:41:22.440738</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;https://github.com/elm-lang/core/pull/734&gt; unfortunately the issue has been closed, it's really not seen as a priority, which is a shame in my view. Seems like it would be a really great project for the Google summer of code to make the language compatible with the best optimizations</text>
  </message>
  <message>
    <ts>2017-07-10T14:42:40.483124</ts>
    <user>U0GPGFQQY</user>
    <text>How renaming the keys will make the code run faster?</text>
  </message>
  <message>
    <ts>2017-07-10T14:44:48.553589</ts>
    <user>U5QJW0DDE</user>
    <text>What I mean, is that minifiers who do full program renaming tend to also do other things, like auto inline and other optimizations.</text>
  </message>
  <message>
    <ts>2017-07-10T14:45:32.578830</ts>
    <user>U0GPGFQQY</user>
    <text>Are they configurable? Can you disable things that break code?</text>
  </message>
  <message>
    <ts>2017-07-10T14:46:05.596866</ts>
    <user>U0GPGFQQY</user>
    <text>You may check these experiments based on prepack: &lt;https://github.com/SkaterDad/elm-prepack-experiments&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T14:46:13.601055</ts>
    <user>U5QJW0DDE</user>
    <text>In the case of googles industry-leading optimizer, it has three or four different levels of optimization, but the only one that really matters is the advanced, I  think it's all or nothing</text>
  </message>
  <message>
    <ts>2017-07-10T14:48:18.669342</ts>
    <user>U0GPGFQQY</user>
    <text>Did you use it with React codebase?</text>
  </message>
  <message>
    <ts>2017-07-10T14:51:30.774023</ts>
    <user>U2GPAEU1L</user>
    <text>I mean, aren't those _different events_?! 

Perhaps my vocab is off, but I don't consider a hackathon to be the same as a workshop to be the same as a lunch group...so wouldn't you have to name it according to what the event actually is...

But that is interesting.</text>
  </message>
  <message>
    <ts>2017-07-10T14:53:09.828454</ts>
    <user>U2GPAEU1L</user>
    <text>Also I couldn't dig up the actual data, if anyone has a link to the data this was based on, I'd love to take a look</text>
  </message>
  <message>
    <ts>2017-07-10T14:53:13.830664</ts>
    <user>U5W86UED6</user>
    <text>one advantage of google closure completely separate from optimizing code and minification/elimination are the primitives it has around modules and code splitting</text>
  </message>
  <message>
    <ts>2017-07-10T14:55:17.899193</ts>
    <user>U5W86UED6</user>
    <text>as Elm begins to take on these features, it may be a good source of inspiration, or possibly a piece to build on top of by generating code more compatible with it</text>
  </message>
  <message>
    <ts>2017-07-10T14:56:02.925066</ts>
    <user>U0GPGFQQY</user>
    <text>I thought this discussion was about possible perf problems in the app</text>
  </message>
  <message>
    <ts>2017-07-10T14:56:44.948784</ts>
    <user>U0GPGFQQY</user>
    <text>That is why I wondered, if google closure compiler was used in the original React app</text>
  </message>
  <message>
    <ts>2017-07-10T14:59:43.048579</ts>
    <user>U5QJW0DDE</user>
    <text>Indeed, the react codebase, as well as most major modern JavaScript libraries, are fully compliant with advanced optimizations</text>
  </message>
  <message>
    <ts>2017-07-10T14:59:49.051723</ts>
    <user>U5W86UED6</user>
    <text>I don’t intend to hijack, but my impression was this conversation was about how Elm integrates with other build systems and the larger front-end ecosystem</text>
  </message>
  <message>
    <ts>2017-07-10T15:00:06.061863</ts>
    <user>U5W86UED6</user>
    <text>a necessary side effect for many people :^)</text>
  </message>
  <message>
    <ts>2017-07-10T15:00:19.068911</ts>
    <user>U5QJW0DDE</user>
    <text>One of the things that the optimizer does is actually take all JavaScript files used anywhere in the project, including libraries, and combine them into one file with all of these optimizations added.</text>
  </message>
  <message>
    <ts>2017-07-10T15:01:21.104568</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U5W86UED6&gt; The thread basically started about techniques for minification in elm</text>
  </message>
  <message>
    <ts>2017-07-10T15:17:25.604229</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; I'm porting some stuff from react, where advanced optimizations definitely made a difference, so I'm trying to predict my situation a little bit down the road

I wouldn't take this premise as a given; there are a *lot* of things that are true in JS that are not true in Elm :wink:</text>
  </message>
  <message>
    <ts>2017-07-10T15:18:00.623513</ts>
    <user>U0CL0AS3V</user>
    <text>broadly, I wouldn't assume any technique that made a difference in React will be predictive of a technique that will make a difference in Elm</text>
  </message>
  <message>
    <ts>2017-07-10T15:18:18.632597</ts>
    <user>U0CL0AS3V</user>
    <text>things are different in Elm! :smile:</text>
  </message>
  <message>
    <ts>2017-07-10T15:20:43.706204</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CL0AS3V&gt; while I can appreciate your enthusiasm, in the end we are still talking about Javascript. I don't know why automatic inlining, for example, couldn't benefit output Elm code. If you make a call to foldl and the Closure optimizer determines that it should just inline this in a particular case to provide a speedup, then why not?</text>
  </message>
  <message>
    <ts>2017-07-10T15:22:41.765869</ts>
    <user>U5QJW0DDE</user>
    <text>as another example, in some cases you might reach deep into a nested call stack, and Closure will not just inline but also flatten the entire stack to turn half a dozen function calls into just one function call. this would happen in Elm as in any JS code. I'd be surprised that Elm was immune to this kinds of optimizations</text>
  </message>
  <message>
    <ts>2017-07-10T15:25:36.855097</ts>
    <user>U5QJW0DDE</user>
    <text>I've seen demonstrations of heavy-weight browser games that improved the FPS after going through advanced optimizations for these reasons</text>
  </message>
  <message>
    <ts>2017-07-10T15:27:54.926532</ts>
    <user>U0CL0AS3V</user>
    <text>sure, to clarify - I'm not saying advanced optimization is useless</text>
  </message>
  <message>
    <ts>2017-07-10T15:28:03.930792</ts>
    <user>U0CL0AS3V</user>
    <text>I'm saying that if I were rewriting a React app in Elm, and the React app benefited noticeably from advanced optimizations, I wouldn't assume the same would be true for the resulting Elm app</text>
  </message>
  <message>
    <ts>2017-07-10T15:28:27.943266</ts>
    <user>U0CL0AS3V</user>
    <text>e.g. it might be fast enough already that advanced optimizations would not make a noticeable difference, making the whole discussion moot for your use case :wink:</text>
  </message>
  <message>
    <ts>2017-07-10T15:30:47.017752</ts>
    <user>U5QJW0DDE</user>
    <text>well, i am rather hoping that is the case, because I have no choice since such optimizations are not available :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-10T15:51:17.645719</ts>
    <user>U0F7JPK36</user>
    <text>yeah i also think of a hackathon as like a 2 day thing where you don't sleep and stuff, but without the context of the whole presentation i took it to mean that names that are more hackathon-adjacent would be less welcoming</text>
  </message>
  <message>
    <ts>2017-07-10T17:44:38.965815</ts>
    <user>U14Q8S4EM</user>
    <text>Some conversation in elm-community/list-extra made me aware that in Haskell there are infinite lists.</text>
  </message>
  <message>
    <ts>2017-07-10T17:45:26.985095</ts>
    <user>U14Q8S4EM</user>
    <text>It made me think that you could make an `infinite-list` or `infinite-array` package, that just modulos the index number. Or a package that has a `CircularList` or `CircularArray` type.</text>
  </message>
  <message>
    <ts>2017-07-10T17:45:30.986698</ts>
    <user>U14Q8S4EM</user>
    <text>Would that be useful?</text>
  </message>
  <message>
    <ts>2017-07-10T17:46:29.009954</ts>
    <user>U14Q8S4EM</user>
    <text>Heres an implementation of an `InfiniteArray.get` function. &lt;https://gist.github.com/Chadtech/701dd43df050612b81f2bbc8b3b7a95a&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T17:46:48.017452</ts>
    <user>U14Q8S4EM</user>
    <text>Im tempted to implement a whole package.</text>
  </message>
  <message>
    <ts>2017-07-10T17:47:34.035555</ts>
    <user>U14Q8S4EM</user>
    <text>As far as I can tell a non-empty circular array always returns something, the only way to get `Nothing` would be if the array is empty.</text>
  </message>
  <message>
    <ts>2017-07-10T17:49:11.073342</ts>
    <user>U1CE9DL9H</user>
    <text>lazy lists are infinite lists, the only reason elm lists cannot be infinite is that they would be immediately evaluated, which would not terminate</text>
  </message>
  <message>
    <ts>2017-07-10T17:50:11.096486</ts>
    <user>U1CE9DL9H</user>
    <text>you might also be interested in &lt;https://en.wikipedia.org/wiki/Circular_buffer&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T17:52:11.143229</ts>
    <user>U3ZNWN526</user>
    <text>"lazy lists are infinite lists" ... oh, cool! &lt;http://package.elm-lang.org/packages/TheSeamau5/elm-lazy-list/1.1.0/Lazy-List&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T17:52:17.145957</ts>
    <user>U14Q8S4EM</user>
    <text>Ah, cool. I did not know that. Seems like a there are a few similarly implemented packages, and not a clear use case. So Ill hold off. Thanks for the link.</text>
  </message>
  <message>
    <ts>2017-07-10T18:27:12.882482</ts>
    <user>U23SA861Y</user>
    <text>there are some fun things you can do with infinite lists, but a lot of it is somewhat academic.</text>
  </message>
  <message>
    <ts>2017-07-10T20:26:28.752407</ts>
    <user>U0J1M0F32</user>
    <text>You could implement Conway's Game Of Life and have it be a truly infinite board.</text>
  </message>
  <message>
    <ts>2017-07-10T23:45:32.952099</ts>
    <user>U23SA861Y</user>
    <text>you can concoct a list of all the primes</text>
  </message>
  <message>
    <ts>2017-07-11T00:33:32.403648</ts>
    <user>U64MK7215</user>
    <text>how to a define a  custom function in elm and call it inside update?</text>
  </message>
  <message>
    <ts>2017-07-11T01:05:52.708038</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U64MK7215&gt; if you could show us what you have tried and where you are getting stuck, I'm sure we could help you out :)</text>
  </message>
  <message>
    <ts>2017-07-11T02:08:11.317647</ts>
    <user>U23NCSN86</user>
    <text>You know what would be good - if the package search page had 'elm package install foo/bar' snippets that you can cut and paste right from the result page</text>
  </message>
  <message>
    <ts>2017-07-11T02:08:36.322567</ts>
    <user>U23NCSN86</user>
    <text>maybe that's already there somewhere, not obvious to me though. WOuld be handy for beginners</text>
  </message>
  <message>
    <ts>2017-07-11T02:54:57.919146</ts>
    <user>U3SJEDR96</user>
    <text>It's been suggested a few times, but hasn't been picked up yet. Eventually, I suppose... I wonder if a userscript type thing would be worth exploring</text>
  </message>
  <message>
    <ts>2017-07-11T03:03:37.055374</ts>
    <user>U0U6ML22H</user>
    <text>yeah, copypasting from the URL is yuk, compared to the high-level of polish that the rest of the tooling has</text>
  </message>
  <message>
    <ts>2017-07-11T03:04:23.067376</ts>
    <user>U0U6ML22H</user>
    <text>you can use Fancy Search to find the function you need by its signature! when you install a package, the tooling talks to you and asks if it should do stuff, and does it! but between those two, you need to know the name of the package to install ^^</text>
  </message>
  <message>
    <ts>2017-07-11T03:15:36.248662</ts>
    <user>U16AT5E7L</user>
    <text>Hi all !!
I will love to get some reviews about my elm project
&lt;https://github.com/puemos/elm-hangman&gt;
Thnx!!!</text>
  </message>
  <message>
    <ts>2017-07-11T03:18:26.296346</ts>
    <user>U41NK9BM4</user>
    <text>It was the first thing I’ve asked when I landed here on Slack.  :slightly_smiling_face:  Relevant issue:  &lt;https://github.com/elm-lang/package.elm-lang.org/issues/27&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T03:50:54.884264</ts>
    <user>U5QJW0DDE</user>
    <text>I think it's pretty cute!</text>
  </message>
  <message>
    <ts>2017-07-11T04:10:34.286393</ts>
    <user>U0M4M5EM7</user>
    <text>me too :smile: if you want to make it even better, try to add keyboard input ^^</text>
  </message>
  <message>
    <ts>2017-07-11T05:22:42.880123</ts>
    <user>U16AT5E7L</user>
    <text>&lt;@U0M4M5EM7&gt; nice idea!</text>
  </message>
  <message>
    <ts>2017-07-11T08:03:09.996628</ts>
    <user>U67P08N0N</user>
    <text>Good day everyone. Today I tried Elm and foud a bug '_'. The docs of the package Html clearly say (&lt;http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html#text&gt;) that HTML should be escaped, right? But then this boke everything... &lt;http://prntscr.com/fuahjf&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T08:09:15.117333</ts>
    <user>U17P7CBFB</user>
    <text>&lt;@U67P08N0N&gt; works just fine for me &lt;https://ellie-app.com/3JskLBrvnr3a1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T08:09:44.126876</ts>
    <user>U1CE9DL9H</user>
    <text>not on &lt;http://elm-lang.org/try|elm-lang.org/try&gt; though</text>
  </message>
  <message>
    <ts>2017-07-11T08:09:56.130642</ts>
    <user>U2LC0U8JY</user>
    <text>probably an error in &lt;http://elm-lang.org/try|elm-lang.org/try&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T08:10:03.133037</ts>
    <user>U1CE9DL9H</user>
    <text>seems that is very broken at this point, should link to ellie</text>
  </message>
  <message>
    <ts>2017-07-11T08:10:07.134276</ts>
    <user>U2LC0U8JY</user>
    <text>not directly elm related</text>
  </message>
  <message>
    <ts>2017-07-11T08:10:36.144229</ts>
    <user>U17P7CBFB</user>
    <text>true, report it as a bug on &lt;https://github.com/elm-lang/elm-lang.org&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T08:11:05.154267</ts>
    <user>U67P08N0N</user>
    <text>ok, I'll do that. thanks!</text>
  </message>
  <message>
    <ts>2017-07-11T08:17:10.280085</ts>
    <user>U3SJEDR96</user>
    <text>Eh, that's not an try-elm specific thing, really. It's an "_inline JS in an html document cannot contain a closing html tag in a string literal because browsers_" thing.</text>
  </message>
  <message>
    <ts>2017-07-11T08:18:08.300111</ts>
    <user>U3SJEDR96</user>
    <text>you can reproduce &lt;@U67P08N0N&gt;'s example locally, too, just `elm-make It.elm` and open that index.html. Or just have a document with `&amp;lt;script&amp;gt;var test = 'foo... &amp;lt;/script&amp;gt; bar.....';&amp;lt;/script&amp;gt;` in it</text>
  </message>
  <message>
    <ts>2017-07-11T08:20:17.345432</ts>
    <user>U67P08N0N</user>
    <text>&lt;@U3SJEDR96&gt; But the Html.text function should "escape" the script-tag, right? At least thats what the documentation says.</text>
  </message>
  <message>
    <ts>2017-07-11T08:21:49.378451</ts>
    <user>U3SJEDR96</user>
    <text>Yes, in the sense that if would assign it to a `TextNode` as is, which means your browser cannot interpret it as HTML. The issue here is completely unrelated to that - here it's the browser giving special treatment to inline JS</text>
  </message>
  <message>
    <ts>2017-07-11T08:22:05.384006</ts>
    <user>U3SJEDR96</user>
    <text>(which is why it works on ellie, and in most any production-like environment)</text>
  </message>
  <message>
    <ts>2017-07-11T08:30:48.577552</ts>
    <user>U67P08N0N</user>
    <text>&lt;@U3SJEDR96&gt; Could further explain where the fault is happening? Is it a mistake somewhere on &lt;http://elm-lang.org|elm-lang.org&gt; and its frontend or its compilation or do I have to treat the script-Tag differently in elm itself? What do you mean by inline JS?</text>
  </message>
  <message>
    <ts>2017-07-11T08:45:55.927980</ts>
    <user>U3SJEDR96</user>
    <text>Alright, so, Elm can compile to either a JS file or an HTML file with the generated JS inlined in a &amp;lt;script&amp;gt; tag. This first "mode" is the one you'll most commonly used, because realistically, you'll want to include some extra stuff like a &amp;lt;title&amp;gt; for your page, some tracking script, etc. The second mode, which creates an HTML file, works by wrapping the generated JS file in some static HTML.</text>
  </message>
  <message>
    <ts>2017-07-11T08:47:20.962337</ts>
    <user>U3SJEDR96</user>
    <text>Now, when you have javascript in an HTML file, you cannot have a string literal that includes a closing html tag; because the browser will pick that up and close the DOM node there. You can test this by creating a `foo.html` with the following code: `&amp;lt;script&amp;gt;var test = 'foo... &amp;lt;/script&amp;gt; bar.....';&amp;lt;/script&amp;gt;`.</text>
  </message>
  <message>
    <ts>2017-07-11T08:49:05.005397</ts>
    <user>U3SJEDR96</user>
    <text>Note that this can only happen when you have a string literal containing a closing HTML tag, and the generated Elm code is inlined in an HTML document. This isn't a very common scenario, and probably why it hadn't come up yet. This could likely be fixed by post-processing the generated HTML to replace such occurences with `&amp;lt;/scri' + 'pt&amp;gt;`, tho</text>
  </message>
  <message>
    <ts>2017-07-11T08:51:16.061937</ts>
    <user>U3SJEDR96</user>
    <text>note that this isn't particular to the `Html.text` function. Having a string literal in your code, no matter where, and compiling to an HTML file would trigger this behavior. The catch being that you generally don't have HTML code in string literals, and usually don't compile to HTML</text>
  </message>
  <message>
    <ts>2017-07-11T08:54:08.136692</ts>
    <user>U67P08N0N</user>
    <text>but in general the solution for this is escaping rather than splitting "unwanted" strings: &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;script&amp;gt;var text_with_closing_html = "&amp;lt;/html&amp;gt;";&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;/html&amp;gt;
I just noticed that you even do not need any escaping here, html is aware of js-code-sections in a way that a closing html tag inside a string inside js wont close html</text>
  </message>
  <message>
    <ts>2017-07-11T08:57:21.223024</ts>
    <user>U3SJEDR96</user>
    <text>Yes, but having `&amp;lt;/script&amp;gt;` there rather than `&amp;lt;/html&amp;gt;` would make it blow up</text>
  </message>
  <message>
    <ts>2017-07-11T08:58:38.257832</ts>
    <user>U3SJEDR96</user>
    <text>Additionally, escaping isn't very relevant here</text>
  </message>
  <message>
    <ts>2017-07-11T08:58:49.263010</ts>
    <user>U3SJEDR96</user>
    <text>I think?</text>
  </message>
  <message>
    <ts>2017-07-11T08:59:09.271524</ts>
    <user>U3SJEDR96</user>
    <text>either way, I've logged this as an issue with `elm-make`: &lt;https://github.com/elm-lang/elm-make/issues/174&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T09:00:24.308445</ts>
    <user>U67P08N0N</user>
    <text>Thanks for this very valuable information about inline script-tags! I will further inform myself about this although I cannot understand this non-intuitive behaviour right now. But as it has nothing to do directly with elm I'll stop here. Have a nice day!</text>
  </message>
  <message>
    <ts>2017-07-11T09:01:47.351786</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, it's (rather surprising) browser behaviour - having to write JS for external use differently than JS for inline use is a little disappointing. Thanks for sticking through this!</text>
  </message>
  <message>
    <ts>2017-07-11T11:11:25.953775</ts>
    <user>U5FU80S06</user>
    <text>How do I launch a webpage from Elm?</text>
  </message>
  <message>
    <ts>2017-07-11T11:12:52.010300</ts>
    <user>U3SJEDR96</user>
    <text>Can you describe what you're actually trying to do? I'm guessing the answer you're looking for is *not* `a [ href "&lt;http://google.com&gt;" ] [ text "Launch google!" ]`</text>
  </message>
  <message>
    <ts>2017-07-11T11:13:47.046279</ts>
    <user>U5FU80S06</user>
    <text>Actually, I think that's what I need, just doing it from a button click.</text>
  </message>
  <message>
    <ts>2017-07-11T11:13:57.053081</ts>
    <user>U3SJEDR96</user>
    <text>:smile: happy to help</text>
  </message>
  <message>
    <ts>2017-07-11T11:15:15.104145</ts>
    <user>U5FU80S06</user>
    <text>I thought though that I need to fire a button `onclick` action and go via update and some cmd...</text>
  </message>
  <message>
    <ts>2017-07-11T11:16:45.164479</ts>
    <user>U5FU80S06</user>
    <text>Isn't that proper Elm architecture?</text>
  </message>
  <message>
    <ts>2017-07-11T11:17:31.193338</ts>
    <user>U3SJEDR96</user>
    <text>If you need a link, you need a link.</text>
  </message>
  <message>
    <ts>2017-07-11T11:29:22.657649</ts>
    <user>U4872964V</user>
    <text>&lt;@U5FFVDC4W&gt; that’s the proper Elm architecture if you’re going to change the state of your application. Is the webpage you’re launching part of the state of your application (i.e. do you need to keep track of it, if it’s open or not etc)</text>
  </message>
  <message>
    <ts>2017-07-11T11:36:57.957559</ts>
    <user>U2GPAEU1L</user>
    <text>Ya, I'd still like to see the data though, it's not the easiest data to acquire, both getting the numbers and also having solid control variables across locations. How many events did they look at? Were they hack-adjacent words or were they actually "hackathon" and "workshop" etc...

I really want more women in software as well, I don't mean to kill that buzz....</text>
  </message>
  <message>
    <ts>2017-07-11T11:41:17.123584</ts>
    <user>U0JFGGZS6</user>
    <text>is &lt;https://github.com/eeue56/elm-flat-matrix&gt;  still active/being maintained?  anyone use it here?</text>
  </message>
  <message>
    <ts>2017-07-11T11:41:28.130294</ts>
    <user>U0EUHKVGB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-07-11T11:42:18.161562</ts>
    <user>U58EMTHRN</user>
    <text>norpan: A link can change the state by using elm-lang/navigation</text>
  </message>
  <message>
    <ts>2017-07-11T11:42:39.175085</ts>
    <user>U0JFGGZS6</user>
    <text>ok good, looks useful</text>
  </message>
  <message>
    <ts>2017-07-11T11:43:04.191383</ts>
    <user>U2GPAEU1L</user>
    <text>Lol in the tweet they're getting upset with people for asking for the data...

Oh man, the world we live in...</text>
  </message>
  <message>
    <ts>2017-07-11T11:43:13.197001</ts>
    <user>U4872964V</user>
    <text>sure, but that’s not the question here, is it?</text>
  </message>
  <message>
    <ts>2017-07-11T11:45:13.274752</ts>
    <user>U0F7JPK36</user>
    <text>i don't feel like i need to consider the p value of their measurements or whatever to decide what to name a programming meetup though</text>
  </message>
  <message>
    <ts>2017-07-11T11:46:34.326050</ts>
    <user>U58EMTHRN</user>
    <text>Just a precision about your answer, as it is a "proper Elm architecture" unless the link is used to change the state.</text>
  </message>
  <message>
    <ts>2017-07-11T11:46:44.332624</ts>
    <user>U0JFGGZS6</user>
    <text>curious if anyone has thought about wrapping some js ndarray implementation, e.g. &lt;https://github.com/scijs/ndarray&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T11:47:13.350646</ts>
    <user>U0JFGGZS6</user>
    <text>not that I know much about them</text>
  </message>
  <message>
    <ts>2017-07-11T11:55:33.669782</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; wrapping some js ndarray implementation

I think it's best to avoid "wrapping a js implementation" - better to look at a problem a JS library solves, and think about what a good Elm solution would look like :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T12:01:59.920775</ts>
    <user>U0JFGGZS6</user>
    <text>well elm-flat-matrix is basically as close as you could get I think... it's more of a performance question. Same kind of reason elm-linear-algebra wraps a JS library.</text>
  </message>
  <message>
    <ts>2017-07-11T12:02:29.939987</ts>
    <user>U0JFGGZS6</user>
    <text>asking more out of curiousity than real need :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T12:05:15.045269</ts>
    <user>U0FP80EKB</user>
    <text>“Show me the data” is a classic derailing technique.</text>
  </message>
  <message>
    <ts>2017-07-11T12:06:44.100612</ts>
    <user>U5FU80S06</user>
    <text>I'm using `href` for a `button` attribute, but nothing happens.   But if I switch to `a`, all is fine. Kindly advise.</text>
  </message>
  <message>
    <ts>2017-07-11T12:14:16.367615</ts>
    <user>U23SA861Y</user>
    <text>because the html spec doesn't recognize href on buttons?</text>
  </message>
  <message>
    <ts>2017-07-11T12:15:12.400252</ts>
    <user>U5FU80S06</user>
    <text>Ah, makes sense.</text>
  </message>
  <message>
    <ts>2017-07-11T12:22:46.664306</ts>
    <user>U4872964V</user>
    <text>you can put the `&amp;lt;button&amp;gt;` inside an `&amp;lt;a&amp;gt;` tag if you like</text>
  </message>
  <message>
    <ts>2017-07-11T12:23:37.693847</ts>
    <user>U4872964V</user>
    <text>not sure if it’s correct html though :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T12:24:27.722056</ts>
    <user>U4872964V</user>
    <text>you can also put the button in a `&amp;lt;form&amp;gt;` element, and have the url in the `action` attribute of the form</text>
  </message>
  <message>
    <ts>2017-07-11T12:24:56.738764</ts>
    <user>U4872964V</user>
    <text>or you can apply css to the `&amp;lt;a&amp;gt;` tag so that it looks like a button</text>
  </message>
  <message>
    <ts>2017-07-11T12:26:45.801540</ts>
    <user>U4872964V</user>
    <text>or you can write an explicit javascript handler using `attribute "onClick" "location.href='yoururl'"` on the button</text>
  </message>
  <message>
    <ts>2017-07-11T12:27:50.838236</ts>
    <user>U5FU80S06</user>
    <text>Perhaps the Elm compiler should give an error for an incompatible html attribute?</text>
  </message>
  <message>
    <ts>2017-07-11T12:29:36.899485</ts>
    <user>U23SA861Y</user>
    <text>While that would be awesome behaviour, the html spec can be a bit inconsistent at times.</text>
  </message>
  <message>
    <ts>2017-07-11T12:30:02.914451</ts>
    <user>U23SA861Y</user>
    <text>I think the reasoning was to keep Html fairly light weight and solve these sorts of things at a higher level.</text>
  </message>
  <message>
    <ts>2017-07-11T14:21:55.725103</ts>
    <user>U5W50TZ6C</user>
    <text>Hi all! I could use some help with decoders. I need to decode some structured json, and I came up with this: &lt;https://ellie-app.com/3JxxvQXDwkLa1/8&gt;
It includes a few examples of the JSON (`json1`, `json2`, `json3`). Any suggestions on how I could improve the decoder? (Or the types?)</text>
  </message>
  <message>
    <ts>2017-07-11T14:29:48.000022</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U5W50TZ6C&gt; looks pretty good overall. I can recommend &lt;http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T14:31:07.047331</ts>
    <user>U1CE9DL9H</user>
    <text>also a small nitpick: I think the `decodeResultByStatus` function is better when less work is shared between the branches, for example
```
decodeResultByStatus : Bool -&amp;gt; Decoder SubmissionResult
decodeResultByStatus status =
    let
        decodeErrorField =
            if status then
                Decode.succeed None
            else
                Decode.field "error" errorDecoder
    in
        Decode.succeed SubmissionResult
            |: Decode.field "messages" (Decode.list Decode.string)
            |: decodeErrorField
```</text>
  </message>
  <message>
    <ts>2017-07-11T14:32:59.111600</ts>
    <user>U5W50TZ6C</user>
    <text>Good idea, &lt;@U1CE9DL9H&gt;!</text>
  </message>
  <message>
    <ts>2017-07-11T14:52:27.783147</ts>
    <user>U17P7CBFB</user>
    <text>I need to use Dict.update to set a field in a record using an `a -&amp;gt; Maybe a` function, how do I do this without going insane?</text>
  </message>
  <message>
    <ts>2017-07-11T14:52:56.800021</ts>
    <user>U17P7CBFB</user>
    <text>That is, the record is the data in the Dict</text>
  </message>
  <message>
    <ts>2017-07-11T14:53:31.820302</ts>
    <user>U23SA861Y</user>
    <text>umm how do you mean?</text>
  </message>
  <message>
    <ts>2017-07-11T14:53:38.824053</ts>
    <user>U0LPMPL2U</user>
    <text>`Dict.update` uses `(Maybe v -&amp;gt; Maybe v)`</text>
  </message>
  <message>
    <ts>2017-07-11T14:53:51.831372</ts>
    <user>U0LPMPL2U</user>
    <text>`Maybe.map` is convenient to avoid unwrapping/rewrapping</text>
  </message>
  <message>
    <ts>2017-07-11T14:54:33.855438</ts>
    <user>U0LPMPL2U</user>
    <text>If you're just overwriting the old value, you can use `Dict.insert`</text>
  </message>
  <message>
    <ts>2017-07-11T14:54:37.858087</ts>
    <user>U17P7CBFB</user>
    <text>I've got a `Dict Int {field:List a}` and I want to set a specific position in that list using `List.Extra.setAt`, which returns a maybe, in case the index is outside the list</text>
  </message>
  <message>
    <ts>2017-07-11T14:54:46.863255</ts>
    <user>U23SA861Y</user>
    <text>you might just want to use insert</text>
  </message>
  <message>
    <ts>2017-07-11T14:55:05.874375</ts>
    <user>U17P7CBFB</user>
    <text>but I need the other fields in that record to stay the same :confused:</text>
  </message>
  <message>
    <ts>2017-07-11T14:55:11.877809</ts>
    <user>U23SA861Y</user>
    <text>insert does that</text>
  </message>
  <message>
    <ts>2017-07-11T14:55:22.884271</ts>
    <user>U23SA861Y</user>
    <text>oh nvm</text>
  </message>
  <message>
    <ts>2017-07-11T14:55:23.885151</ts>
    <user>U23SA861Y</user>
    <text>record</text>
  </message>
  <message>
    <ts>2017-07-11T14:55:24.885603</ts>
    <user>U23SA861Y</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-11T14:55:48.899915</ts>
    <user>U17P7CBFB</user>
    <text>do I let..in all the way to make it readable?</text>
  </message>
  <message>
    <ts>2017-07-11T14:55:59.906056</ts>
    <user>U23SA861Y</user>
    <text>```Dict.update key (Maybe.map (\x -&amp;gt; {x | field=foo}) dict ```</text>
  </message>
  <message>
    <ts>2017-07-11T14:56:00.906401</ts>
    <user>U0LPMPL2U</user>
    <text>Why do you want to set a value at an index in a list?</text>
  </message>
  <message>
    <ts>2017-07-11T14:57:19.951355</ts>
    <user>U17P7CBFB</user>
    <text>I'm modeling a problem using a graph, and since I need multiple positions on each node where edges can start/end, I need to encode that data in the node somewhere</text>
  </message>
  <message>
    <ts>2017-07-11T14:57:35.960219</ts>
    <user>U17P7CBFB</user>
    <text>not particularly happy with the data structure, but it's ok</text>
  </message>
  <message>
    <ts>2017-07-11T14:58:11.981064</ts>
    <user>U17P7CBFB</user>
    <text>I know the general solution is to not write code that lends itself well to using lenses, but here I am</text>
  </message>
  <message>
    <ts>2017-07-11T15:02:31.134200</ts>
    <user>U17P7CBFB</user>
    <text>`Maybe.map` and then `case`ing on the inner maybe turned out quite readable, actually</text>
  </message>
  <message>
    <ts>2017-07-11T15:04:11.190092</ts>
    <user>U17P7CBFB</user>
    <text>I have two options now on the case that never happens: either return `Nothing`, which will silently ignore any error, or `Debug.crash`. What would you do?</text>
  </message>
  <message>
    <ts>2017-07-11T15:04:22.196443</ts>
    <user>U2GPAEU1L</user>
    <text>"Show me the data" is the foundation of all science...

I'm not trying to derail anything, a very interesting claim is being made, and I'm simply asking for the evidence. I'm not quite sure why I'm being "criticized" for asking for the data. Imagine, hypothetically, that the reverse is true, and that naming it with "hackX" actually get's _more_ women to show up. In that case, you're spreading a message that is making it _harder_ for women. The point of the data is to figure out what is _actually true_.

I'm not sure how to respond to "I don't feel like i need to consider the p value of their measurements "....</text>
  </message>
  <message>
    <ts>2017-07-11T15:05:13.223738</ts>
    <user>U23SA861Y</user>
    <text>I would look at your data structures and figure out why your updates are so twisted</text>
  </message>
  <message>
    <ts>2017-07-11T15:05:19.227875</ts>
    <user>U0LPMPL2U</user>
    <text>Can we combine the operations with `Maybe.andThen` ?</text>
  </message>
  <message>
    <ts>2017-07-11T15:05:28.232877</ts>
    <user>U23SA861Y</user>
    <text>it kind a has a bit of a code smell here</text>
  </message>
  <message>
    <ts>2017-07-11T15:05:58.249304</ts>
    <user>U17P7CBFB</user>
    <text>&lt;@U0LPMPL2U&gt; that's the silencing option</text>
  </message>
  <message>
    <ts>2017-07-11T15:06:10.255768</ts>
    <user>U17P7CBFB</user>
    <text>or actually, that's the error propagation option, a la javascript</text>
  </message>
  <message>
    <ts>2017-07-11T15:06:18.260169</ts>
    <user>U17P7CBFB</user>
    <text>since it removes the node from the graph</text>
  </message>
  <message>
    <ts>2017-07-11T15:06:24.263502</ts>
    <user>U17P7CBFB</user>
    <text>so it'll fail later, somehow</text>
  </message>
  <message>
    <ts>2017-07-11T15:07:05.286040</ts>
    <user>U17P7CBFB</user>
    <text>this is the `Nothing` case inside a function that looks like `Dict.update`</text>
  </message>
  <message>
    <ts>2017-07-11T15:08:57.345853</ts>
    <user>U0LPMPL2U</user>
    <text>Do the ids in the list need to be sequential? Given that you're trying to get random access, I'm guessing not?</text>
  </message>
  <message>
    <ts>2017-07-11T15:09:08.351646</ts>
    <user>U0LPMPL2U</user>
    <text>Could you use a `Dict` instead of a `List`?</text>
  </message>
  <message>
    <ts>2017-07-11T15:09:12.353706</ts>
    <user>U17P7CBFB</user>
    <text>nope, but the index matters</text>
  </message>
  <message>
    <ts>2017-07-11T15:09:20.358038</ts>
    <user>U17P7CBFB</user>
    <text>I can, but that doesn't solve the problem</text>
  </message>
  <message>
    <ts>2017-07-11T15:09:48.372717</ts>
    <user>U0LPMPL2U</user>
    <text>Now you don't have the issue of setting a value out of bounds</text>
  </message>
  <message>
    <ts>2017-07-11T15:09:57.377659</ts>
    <user>U0LPMPL2U</user>
    <text>unless the bounds actually mattered for your application</text>
  </message>
  <message>
    <ts>2017-07-11T15:10:05.381304</ts>
    <user>U17P7CBFB</user>
    <text>They do :confused:</text>
  </message>
  <message>
    <ts>2017-07-11T15:10:21.390444</ts>
    <user>U0LPMPL2U</user>
    <text>what are the limitations?</text>
  </message>
  <message>
    <ts>2017-07-11T15:10:24.392002</ts>
    <user>U17P7CBFB</user>
    <text>but it shouldn't be able to set it out of bounds</text>
  </message>
  <message>
    <ts>2017-07-11T15:10:32.396303</ts>
    <user>U17P7CBFB</user>
    <text>sec</text>
  </message>
  <message>
    <ts>2017-07-11T15:11:02.412288</ts>
    <user>U0LPMPL2U</user>
    <text>not sure if using an enum as the id might help :neutral_face:</text>
  </message>
  <message>
    <ts>2017-07-11T15:12:49.468188</ts>
    <user>U17P7CBFB</user>
    <text>for drawing: I need to know how many things there can be in total, the data of each position 0..n
for the model: I need random access, and to not write out of bounds, and to make sure the data written (Id, Slot) corresponds to an Id that is in the graph, and a slot number that is within 0..k for that other item in the graph</text>
  </message>
  <message>
    <ts>2017-07-11T15:13:01.474591</ts>
    <user>U17P7CBFB</user>
    <text>the type system isn't going to help me with those invariants, unfortunately</text>
  </message>
  <message>
    <ts>2017-07-11T15:13:28.488538</ts>
    <user>U17P7CBFB</user>
    <text>did you mean enum as in a union type?</text>
  </message>
  <message>
    <ts>2017-07-11T15:14:35.524167</ts>
    <user>U0LPMPL2U</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-11T15:15:03.538346</ts>
    <user>U17P7CBFB</user>
    <text>Since I've got any number of inputs, dynamically modified, that won't work :confused:</text>
  </message>
  <message>
    <ts>2017-07-11T15:15:08.541333</ts>
    <user>U0LPMPL2U</user>
    <text>if you only allowed 1-6, you can do something like:
```
type Key = One | Two | Three | Four | Five | Six
```</text>
  </message>
  <message>
    <ts>2017-07-11T15:15:23.549672</ts>
    <user>U0LPMPL2U</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-11T15:16:09.572613</ts>
    <user>U17P7CBFB</user>
    <text>Imagine a box diagram with edges between the boxes, and on each box there are multiple positions where you can start/end the lines you draw between the boxes</text>
  </message>
  <message>
    <ts>2017-07-11T15:16:29.583032</ts>
    <user>U17P7CBFB</user>
    <text>That's pretty much exactly what I'm trying to do</text>
  </message>
  <message>
    <ts>2017-07-11T15:17:22.610411</ts>
    <user>U681TBBUP</user>
    <text>Is it essentially a directed graph with edges that can be in different states?</text>
  </message>
  <message>
    <ts>2017-07-11T15:17:24.611493</ts>
    <user>U17P7CBFB</user>
    <text>drathier/elm-graph only allows one edge between each pair of nodes, so if I have multiple lines between the same two nodes I'll run into problems. Also, I don't know what position on the box that edge is starting/ending</text>
  </message>
  <message>
    <ts>2017-07-11T15:17:35.617368</ts>
    <user>U681TBBUP</user>
    <text>Make that a multigraph</text>
  </message>
  <message>
    <ts>2017-07-11T15:18:38.649626</ts>
    <user>U17P7CBFB</user>
    <text>sure, but I still need to encode where on the box each of those edges go, and make sure only one edge goes to/from each position, and that there are no self-edges etc.</text>
  </message>
  <message>
    <ts>2017-07-11T15:19:12.666337</ts>
    <user>U17P7CBFB</user>
    <text>if the graph library supported subgraphs, I could model each box as a graph itself, which would make the other invariants easier to check, but it's still not quite what I need</text>
  </message>
  <message>
    <ts>2017-07-11T15:20:27.705374</ts>
    <user>U681TBBUP</user>
    <text>Can the edges be in arbitrary positions on the boxes or is it discrete?</text>
  </message>
  <message>
    <ts>2017-07-11T15:20:53.719486</ts>
    <user>U4F64AKQV</user>
    <text>Just a heads up, the API for `List.Extra.setAt` is likely going to change in the next release to get rid of the `Maybe` in the return.</text>
  </message>
  <message>
    <ts>2017-07-11T15:21:58.753313</ts>
    <user>U17P7CBFB</user>
    <text>discrete, but a constant arbitrary number of possible positions per box</text>
  </message>
  <message>
    <ts>2017-07-11T15:22:46.777931</ts>
    <user>U23SA861Y</user>
    <text>This sounds like you're mixing data structure logic in with view logic</text>
  </message>
  <message>
    <ts>2017-07-11T15:22:47.778170</ts>
    <user>U17P7CBFB</user>
    <text>making a few examples in &lt;http://draw.io|draw.io&gt; right now to illustrate</text>
  </message>
  <message>
    <ts>2017-07-11T15:24:32.832653</ts>
    <user>U4F64AKQV</user>
    <text>Each position on the box should be a node in your graph.</text>
  </message>
  <message>
    <ts>2017-07-11T15:24:52.842424</ts>
    <user>U681TBBUP</user>
    <text>I was about to say the same thing &lt;@U4F64AKQV&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T15:25:19.856815</ts>
    <user>U17P7CBFB</user>
    <text>how do I model the fact that they are part of the same box?</text>
  </message>
  <message>
    <ts>2017-07-11T15:25:27.860955</ts>
    <user>U17P7CBFB</user>
    <text>there's no subgraph support</text>
  </message>
  <message>
    <ts>2017-07-11T15:25:48.871466</ts>
    <user>U4F64AKQV</user>
    <text>Maybe each node stores some bit of data saying which box it belongs to.</text>
  </message>
  <message>
    <ts>2017-07-11T15:26:35.895884</ts>
    <user>U4F64AKQV</user>
    <text>I’m not sure why you would even need subgraphs?</text>
  </message>
  <message>
    <ts>2017-07-11T15:28:13.946186</ts>
    <user>U17P7CBFB</user>
    <text>most data I need stored is relevant to a box, not the slots on the box</text>
  </message>
  <message>
    <ts>2017-07-11T15:28:36.958891</ts>
    <user>U681TBBUP</user>
    <text>You can generate the graph of boxes from the graph of connections</text>
  </message>
  <message>
    <ts>2017-07-11T15:29:09.976451</ts>
    <user>U17P7CBFB</user>
    <text>where do I store the view position of the boxes?</text>
  </message>
  <message>
    <ts>2017-07-11T15:29:46.995406</ts>
    <user>U4F64AKQV</user>
    <text>You can have a list of boxes that have a position and some id. And then each node in the graph just references the id of the box it should be attached to and its position on that box.</text>
  </message>
  <message>
    <ts>2017-07-11T15:30:22.015086</ts>
    <user>U4F64AKQV</user>
    <text>It’s tough to model this data structure without knowing exactly how it well be used.</text>
  </message>
  <message>
    <ts>2017-07-11T15:30:30.019647</ts>
    <user>U681TBBUP</user>
    <text>Is there a particular reason you need to store the actual positions of the boxes? Or is this data calculated</text>
  </message>
  <message>
    <ts>2017-07-11T15:31:04.037618</ts>
    <user>U17P7CBFB</user>
    <text>the position is just for the view, so I know where on the screen I should put them. They are user draggable atm</text>
  </message>
  <message>
    <ts>2017-07-11T15:32:03.069024</ts>
    <user>U17P7CBFB</user>
    <text>I could auto format them somehow, but I still need to store their position somewhere</text>
  </message>
  <message>
    <ts>2017-07-11T15:32:45.090489</ts>
    <user>U23SA861Y</user>
    <text>so nodes could be `Dict key Record` where record contains everything about a box, basically its position and edges are
`List (Connection,Connection)` where connection contains the box key and the connection point</text>
  </message>
  <message>
    <ts>2017-07-11T15:33:05.100855</ts>
    <user>U23SA861Y</user>
    <text>?</text>
  </message>
  <message>
    <ts>2017-07-11T15:33:20.109179</ts>
    <user>U681TBBUP</user>
    <text>`Connection` may be misleading, maybe `Endpoint`?</text>
  </message>
  <message>
    <ts>2017-07-11T15:33:28.112805</ts>
    <user>U23SA861Y</user>
    <text>sure, endpoint</text>
  </message>
  <message>
    <ts>2017-07-11T15:34:10.134323</ts>
    <user>U23SA861Y</user>
    <text>to move a box you simply update it's record, to add or remove a connection you append or filter the list</text>
  </message>
  <message>
    <ts>2017-07-11T15:34:43.151365</ts>
    <user>U17P7CBFB</user>
    <text>I think putting the `Box` in a `Dict Boxid Box` and putting the slots in a graph is the best solution so far, with the Boxid of the relevant box in each slot in the graph</text>
  </message>
  <message>
    <ts>2017-07-11T15:35:24.172398</ts>
    <user>U17P7CBFB</user>
    <text>basically the dict/list option, but using the graph lib since I need to check acyclicity, self-edges and do some searches</text>
  </message>
  <message>
    <ts>2017-07-11T15:35:35.177879</ts>
    <user>U681TBBUP</user>
    <text>Does it's position on the box contain any meaningful information? Or is just for pretty layout</text>
  </message>
  <message>
    <ts>2017-07-11T15:35:45.183268</ts>
    <user>U17P7CBFB</user>
    <text>just for the view</text>
  </message>
  <message>
    <ts>2017-07-11T15:35:55.188130</ts>
    <user>U23SA861Y</user>
    <text>maybe what you need is a List (Endpoint,Endpoint) -&amp;gt; Graph</text>
  </message>
  <message>
    <ts>2017-07-11T15:36:03.192072</ts>
    <user>U17P7CBFB</user>
    <text>the position of the edge on the box does convey information, though</text>
  </message>
  <message>
    <ts>2017-07-11T15:36:04.192751</ts>
    <user>U23SA861Y</user>
    <text>to do those checks</text>
  </message>
  <message>
    <ts>2017-07-11T15:36:29.205305</ts>
    <user>U17P7CBFB</user>
    <text>i.e. what slots it connects between the boxes</text>
  </message>
  <message>
    <ts>2017-07-11T15:36:41.211629</ts>
    <user>U17P7CBFB</user>
    <text>hmm, maybe that's a good idea &lt;@U23SA861Y&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T15:37:07.224875</ts>
    <user>U23SA861Y</user>
    <text>again, it sounds like there is some mixing of view vs logic here</text>
  </message>
  <message>
    <ts>2017-07-11T15:37:49.245895</ts>
    <user>U681TBBUP</user>
    <text>If they position of the edges on the box is merely for visual purposes it shouldn't be contained within the model, but it sounds like you have slots which actually are meaningful</text>
  </message>
  <message>
    <ts>2017-07-11T15:38:08.255272</ts>
    <user>U23SA861Y</user>
    <text>yeah, thats where I'm tripping up to</text>
  </message>
  <message>
    <ts>2017-07-11T15:38:11.256893</ts>
    <user>U17P7CBFB</user>
    <text>the position of the edges on the box does matter, but the position of the boxes do not</text>
  </message>
  <message>
    <ts>2017-07-11T15:38:11.257063</ts>
    <user>U4F64AKQV</user>
    <text>How does the data change? Will you be accessing the edges or slots more frequently?</text>
  </message>
  <message>
    <ts>2017-07-11T15:38:28.265576</ts>
    <user>U17P7CBFB</user>
    <text>I'll be adding and removing boxes and edges</text>
  </message>
  <message>
    <ts>2017-07-11T15:38:40.272429</ts>
    <user>U17P7CBFB</user>
    <text>and modifying data on the boxes, but not on the edges</text>
  </message>
  <message>
    <ts>2017-07-11T15:38:56.280689</ts>
    <user>U17P7CBFB</user>
    <text>about the same number of accesses for each, i think</text>
  </message>
  <message>
    <ts>2017-07-11T15:40:32.330337</ts>
    <user>U681TBBUP</user>
    <text>sounds like you need a `Dict BoxId Box` where `Box` has a set of `Slot`s and a `List(Slot, Slot)`</text>
  </message>
  <message>
    <ts>2017-07-11T15:41:20.355507</ts>
    <user>U681TBBUP</user>
    <text>for clarity `Box` doesn't have the `List`</text>
  </message>
  <message>
    <ts>2017-07-11T15:41:20.355556</ts>
    <user>U17P7CBFB</user>
    <text>what data do you imagine in a `Slot`?</text>
  </message>
  <message>
    <ts>2017-07-11T15:41:53.372375</ts>
    <user>U681TBBUP</user>
    <text>Some form of id and whatever is specific to your domain</text>
  </message>
  <message>
    <ts>2017-07-11T15:42:23.387757</ts>
    <user>U17P7CBFB</user>
    <text>`(BoxId, SlotId)` would work fine, I think</text>
  </message>
  <message>
    <ts>2017-07-11T15:42:35.393783</ts>
    <user>U17P7CBFB</user>
    <text>as `Slot` in your example</text>
  </message>
  <message>
    <ts>2017-07-11T15:42:43.397995</ts>
    <user>U17P7CBFB</user>
    <text>just some unique identifier</text>
  </message>
  <message>
    <ts>2017-07-11T15:45:04.471731</ts>
    <user>U4F64AKQV</user>
    <text>I would use elm-community/graph, where each box is a node (maybe with a label for its position) and each edge stores a tuple with the slots of the boxes it is connecting.</text>
  </message>
  <message>
    <ts>2017-07-11T15:46:36.519086</ts>
    <user>U4F64AKQV</user>
    <text>I haven’t worked it out fully, but I think it gives you clean update operations and decent performance.</text>
  </message>
  <message>
    <ts>2017-07-11T15:48:31.579453</ts>
    <user>U17P7CBFB</user>
    <text>I don't think elm-community/graph supports multiple edges between the same pair of nodes?</text>
  </message>
  <message>
    <ts>2017-07-11T15:51:40.677314</ts>
    <user>U17P7CBFB</user>
    <text>I'll just add multigraph and edge label support to drathier/elm-graph and use that then</text>
  </message>
  <message>
    <ts>2017-07-11T15:54:04.752977</ts>
    <user>U4F64AKQV</user>
    <text>My mistake, you are right that elm-community/graph does not support multigraphs.</text>
  </message>
  <message>
    <ts>2017-07-11T16:07:38.198323</ts>
    <user>U4H406NET</user>
    <text>Can you export type alias's from modules?  If I want to use the same type alias in several modules what is the correct way to do that?</text>
  </message>
  <message>
    <ts>2017-07-11T16:08:38.228217</ts>
    <user>U1CE9DL9H</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-11T16:08:52.236041</ts>
    <user>U1CE9DL9H</user>
    <text>it works just like types</text>
  </message>
  <message>
    <ts>2017-07-11T16:09:32.256291</ts>
    <user>U1CE9DL9H</user>
    <text>so `module yyy exposing (SomeTypeAlias)` and `import yyy exposing (SomeTypeAlias)`</text>
  </message>
  <message>
    <ts>2017-07-11T16:11:12.308624</ts>
    <user>U4H406NET</user>
    <text>I am doing something silly then.  My code says the type alias is not defined.</text>
  </message>
  <message>
    <ts>2017-07-11T16:11:16.310952</ts>
    <user>U4H406NET</user>
    <text>module ModelDef exposing Model(..))

type alias Model = {
    loggedin : Bool,
    name : String,
    password : String
}</text>
  </message>
  <message>
    <ts>2017-07-11T16:11:48.327458</ts>
    <user>U4H406NET</user>
    <text>Sorry, this should be in beginners</text>
  </message>
  <message>
    <ts>2017-07-11T16:12:19.343291</ts>
    <user>U1CE9DL9H</user>
    <text>it should be `module ModelDef exposing (Model)`, the `(..)` exposes the constructors for types, but a type alias doesn't have any, so that doesn't work</text>
  </message>
  <message>
    <ts>2017-07-11T16:13:49.389993</ts>
    <user>U4H406NET</user>
    <text>Thank you, on to the next error.</text>
  </message>
  <message>
    <ts>2017-07-11T17:16:16.313166</ts>
    <user>U17P7CBFB</user>
    <text>How is this even possible? 
```
-- TYPE MISMATCH --------------------------------------------- .\./src\Graph.elm

Tag `Graph.Node` is causing problems in this pattern match.

221|     Just (Node node) -&amp;gt;
               ^^^^^^^^^
The pattern matches things of type:

    Node comparable data edgeData

But the values it will actually be trying to match are:

    Node comparable data

```</text>
  </message>
  <message>
    <ts>2017-07-11T17:17:34.348700</ts>
    <user>U0JFGGZS6</user>
    <text>phantom type by accident?</text>
  </message>
  <message>
    <ts>2017-07-11T17:18:28.373202</ts>
    <user>U1CE9DL9H</user>
    <text>can you share the definition of `Node`?</text>
  </message>
  <message>
    <ts>2017-07-11T17:27:45.627424</ts>
    <user>U17P7CBFB</user>
    <text>nvm, forgot to add the extra type variable in the function definitions that this function used :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T17:28:11.639077</ts>
    <user>U17P7CBFB</user>
    <text>it was probably in the wall of error messages somewhere</text>
  </message>
  <message>
    <ts>2017-07-11T17:28:18.642217</ts>
    <user>U17P7CBFB</user>
    <text>I just read top-down</text>
  </message>
  <message>
    <ts>2017-07-11T18:02:01.479445</ts>
    <user>U17P7CBFB</user>
    <text>Just spent about 10 minutes finding out that elm-format replaced `a _data b` with `a _ data b`, giving the function an extra argument &amp;lt;.&amp;lt;</text>
  </message>
  <message>
    <ts>2017-07-11T18:27:01.982352</ts>
    <user>U0JFFPRHP</user>
    <text>(elm-format does that because elm-make also parses `a _data b` as having three arguments, so it just makes the mistake more obvious :slightly_smiling_face: )</text>
  </message>
  <message>
    <ts>2017-07-11T18:49:05.379170</ts>
    <user>U5W5F6QGP</user>
    <text>oh really? That's interesting
Never run into that issue, but it's definitely noted now
Guess it's good behaviour on the part of elm-format then, that's awesome</text>
  </message>
  <message>
    <ts>2017-07-11T19:38:47.186981</ts>
    <user>U17P7CBFB</user>
    <text>I'd say it's bad behaviour on the part of the compiler ^^,</text>
  </message>
  <message>
    <ts>2017-07-11T19:40:04.205791</ts>
    <user>U17P7CBFB</user>
    <text>thanks for letting us know, &lt;@U0JFFPRHP&gt;, had no idea it did that</text>
  </message>
  <message>
    <ts>2017-07-11T19:40:13.207987</ts>
    <user>U17P7CBFB</user>
    <text>too much elixir lately, so I named it `_data` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T19:40:53.217833</ts>
    <user>U17P7CBFB</user>
    <text>or maybe not too much, but a lot of</text>
  </message>
  <message>
    <ts>2017-07-11T19:44:51.275166</ts>
    <user>U17P7CBFB</user>
    <text>I guess that's a useful thing to know if you're golfing in Elm :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-11T20:45:53.071879</ts>
    <user>U14Q8S4EM</user>
    <text>I dont suppose anyone has a good estimate on when 0.19 comes out?</text>
  </message>
  <message>
    <ts>2017-07-11T20:46:06.074281</ts>
    <user>U14Q8S4EM</user>
    <text>I bet its soon.</text>
  </message>
  <message>
    <ts>2017-07-11T20:46:09.075018</ts>
    <user>U14Q8S4EM</user>
    <text>How soon I wonder.</text>
  </message>
  <message>
    <ts>2017-07-11T21:02:58.279208</ts>
    <user>U5XC2FJ1Y</user>
    <text>Mt 24:36</text>
  </message>
  <message>
    <ts>2017-07-11T21:24:26.530343</ts>
    <user>U57KYFW67</user>
    <text>Apologies for crossposting, but I figure this is an equally appropriate place to ask. What does the Elm syntax [&amp;lt;ident&amp;gt;| ... |] mean? I saw it in the WebGL talk and I've never seen it before. Is it a macro construction?</text>
  </message>
  <message>
    <ts>2017-07-11T21:36:09.665152</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U57KYFW67&gt; it’s compiler magic specifically to implement webgl shaders</text>
  </message>
  <message>
    <ts>2017-07-11T21:37:15.677032</ts>
    <user>U153UK3FA</user>
    <text>It’s not something you can define yourself and it’s not something used for anything else</text>
  </message>
  <message>
    <ts>2017-07-11T21:39:25.701053</ts>
    <user>U57KYFW67</user>
    <text>ahhhhhhh</text>
  </message>
  <message>
    <ts>2017-07-11T21:40:16.710714</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U153UK3FA&gt; Ty, though.</text>
  </message>
  <message>
    <ts>2017-07-12T02:12:56.433655</ts>
    <user>U5FU80S06</user>
    <text>How do I set an html `&amp;lt;scroll-container&amp;gt;` in Elm, as used in the example here: &lt;https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-12T02:41:07.783970</ts>
    <user>U2LC0U8JY</user>
    <text>how are you folks handling logging in elm apps?</text>
  </message>
  <message>
    <ts>2017-07-12T02:41:42.791981</ts>
    <user>U2LC0U8JY</user>
    <text>is there a way to send all messages e.g.?</text>
  </message>
  <message>
    <ts>2017-07-12T02:41:48.793275</ts>
    <user>U2LC0U8JY</user>
    <text>some kind of middleware concept?</text>
  </message>
  <message>
    <ts>2017-07-12T02:44:10.825451</ts>
    <user>U1ZFF0E5P</user>
    <text>well you don't have runtime errors, so anything that can fail in your code will be modelled accordingly</text>
  </message>
  <message>
    <ts>2017-07-12T02:44:19.827543</ts>
    <user>U1ZFF0E5P</user>
    <text>typically using a `Result` type</text>
  </message>
  <message>
    <ts>2017-07-12T02:44:51.834917</ts>
    <user>U2LC0U8JY</user>
    <text>so for redux i use something like &lt;http://logrocket.com|logrocket.com&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T02:45:15.840826</ts>
    <user>U2LC0U8JY</user>
    <text>which makes it super easy to plug into and get Actions logged</text>
  </message>
  <message>
    <ts>2017-07-12T02:45:37.846283</ts>
    <user>U2LC0U8JY</user>
    <text>Is the only way in elm to add the log statements myself wherever i want them?</text>
  </message>
  <message>
    <ts>2017-07-12T02:46:05.852711</ts>
    <user>U1ZFF0E5P</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-12T02:46:41.861324</ts>
    <user>U2LC0U8JY</user>
    <text>hmm the main update function should be enough right? :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-12T02:47:00.865969</ts>
    <user>U1ZFF0E5P</user>
    <text>logging something is a side effect</text>
  </message>
  <message>
    <ts>2017-07-12T02:47:08.867688</ts>
    <user>U1ZFF0E5P</user>
    <text>so yeah in the update function</text>
  </message>
  <message>
    <ts>2017-07-12T02:47:19.870413</ts>
    <user>U1ZFF0E5P</user>
    <text>it's the only place where you can ask the runtime to do side effects</text>
  </message>
  <message>
    <ts>2017-07-12T02:47:38.875097</ts>
    <user>U1ZFF0E5P</user>
    <text>out of interest, do you use redux thunk?</text>
  </message>
  <message>
    <ts>2017-07-12T02:47:54.879097</ts>
    <user>U2LC0U8JY</user>
    <text>more on the angular side</text>
  </message>
  <message>
    <ts>2017-07-12T02:47:57.879843</ts>
    <user>U2LC0U8JY</user>
    <text>ngrx</text>
  </message>
  <message>
    <ts>2017-07-12T02:47:59.880332</ts>
    <user>U2LC0U8JY</user>
    <text>store / effects</text>
  </message>
  <message>
    <ts>2017-07-12T02:48:01.880745</ts>
    <user>U1ZFF0E5P</user>
    <text>oh okay</text>
  </message>
  <message>
    <ts>2017-07-12T02:48:57.894601</ts>
    <user>U1ZFF0E5P</user>
    <text>but yeah unlike in redux, your update function also returns a list of side effects</text>
  </message>
  <message>
    <ts>2017-07-12T02:49:06.896966</ts>
    <user>U2LC0U8JY</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-12T02:49:37.904342</ts>
    <user>U1ZFF0E5P</user>
    <text>are you trying to log bugs or something else?</text>
  </message>
  <message>
    <ts>2017-07-12T02:50:10.912606</ts>
    <user>U2LC0U8JY</user>
    <text>no, thought more about getting the story of a user</text>
  </message>
  <message>
    <ts>2017-07-12T02:50:21.915463</ts>
    <user>U2LC0U8JY</user>
    <text>similar to what logrocket does</text>
  </message>
  <message>
    <ts>2017-07-12T02:50:39.919921</ts>
    <user>U2LC0U8JY</user>
    <text>having the full list of actions (messages) happening tells you exactly what happened before a bug</text>
  </message>
  <message>
    <ts>2017-07-12T02:51:26.931325</ts>
    <user>U2LC0U8JY</user>
    <text>but i guess i can achieve this in the main update function</text>
  </message>
  <message>
    <ts>2017-07-12T02:51:40.934627</ts>
    <user>U1ZFF0E5P</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-12T02:51:49.936859</ts>
    <user>U2LC0U8JY</user>
    <text>that already helped, thx :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-12T02:52:02.939605</ts>
    <user>U1ZFF0E5P</user>
    <text>but honestly, you won't ever have runtime errors in elm</text>
  </message>
  <message>
    <ts>2017-07-12T02:52:15.942736</ts>
    <user>U2LC0U8JY</user>
    <text>yeah but still bugs :wink:</text>
  </message>
  <message>
    <ts>2017-07-12T02:52:43.949341</ts>
    <user>U1ZFF0E5P</user>
    <text>if you haven't already, have a look at this, it's awesome: &lt;https://www.youtube.com/watch?v=IcgmSRJHu_8&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T02:52:59.953006</ts>
    <user>U2LC0U8JY</user>
    <text>yeah i have seen that</text>
  </message>
  <message>
    <ts>2017-07-12T02:53:03.954002</ts>
    <user>U1ZFF0E5P</user>
    <text>oh cool :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-12T02:59:46.054474</ts>
    <user>U5YDC1YUW</user>
    <text>what's the format for sending multiple things over a port? `port enableButton : String -&amp;gt; Bool -&amp;gt; Cmd msg` seems to be having issues</text>
  </message>
  <message>
    <ts>2017-07-12T03:00:07.061346</ts>
    <user>U3SJEDR96</user>
    <text>You can send a tuple, a list or a record</text>
  </message>
  <message>
    <ts>2017-07-12T03:01:38.087026</ts>
    <user>U5YDC1YUW</user>
    <text>ah I see, cheers!</text>
  </message>
  <message>
    <ts>2017-07-12T05:32:44.158181</ts>
    <user>U5QV0AZM3</user>
    <text>Anyone with a app example using Rails, GraphQL and Elm?</text>
  </message>
  <message>
    <ts>2017-07-12T08:08:33.139516</ts>
    <user>U0Z9TPK7S</user>
    <text>My assets are in `assets/` and my src is in `src/`. How do I tell elm-reactor to search assets in `assets/` rather than in `src/assets/`? So far I have to modify my code to use `../assets/` which kind of sucks.</text>
  </message>
  <message>
    <ts>2017-07-12T08:09:01.148552</ts>
    <user>U41NK9BM4</user>
    <text>I have still to grasp what GraphQL is</text>
  </message>
  <message>
    <ts>2017-07-12T08:09:27.156748</ts>
    <user>U41NK9BM4</user>
    <text>I’ve looked at the website but understood very little.</text>
  </message>
  <message>
    <ts>2017-07-12T08:10:03.168500</ts>
    <user>U2JA29EKF</user>
    <text>passiomatic: this may help - &lt;https://changelog.com/podcast/255&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T08:10:20.174142</ts>
    <user>U41NK9BM4</user>
    <text>&lt;@U0Z9TPK7S&gt; Ah yes, a great classic. I’m struggling with that too. I thought to use a symlink but at least on MacOS it doesn’t work</text>
  </message>
  <message>
    <ts>2017-07-12T08:10:48.183528</ts>
    <user>U41NK9BM4</user>
    <text>I’m curious how to fix that. Actually I copy paste the folder when needed</text>
  </message>
  <message>
    <ts>2017-07-12T08:11:15.192443</ts>
    <user>U3SJEDR96</user>
    <text>I generally have an `index.html` in my root, and embed the Elm app there; so which also lets me refer to `assets/`</text>
  </message>
  <message>
    <ts>2017-07-12T08:11:31.197629</ts>
    <user>U0Z9TPK7S</user>
    <text>Right now, I just renamed src/Main.elm as src/App.elm, which exports `main`.</text>
  </message>
  <message>
    <ts>2017-07-12T08:11:57.206198</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://blog.ilias.xyz/elm-reactor-and-custom-html-9e7143553807&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T08:11:59.206777</ts>
    <user>U0Z9TPK7S</user>
    <text>Then I have a Main.elm in `./` which just imports App.elm and then uses `main = App.main`</text>
  </message>
  <message>
    <ts>2017-07-12T08:12:06.209332</ts>
    <user>U41NK9BM4</user>
    <text>Lemme see :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-12T08:16:16.292261</ts>
    <user>U0Z9TPK7S</user>
    <text>Which doesn't work</text>
  </message>
  <message>
    <ts>2017-07-12T08:18:12.332545</ts>
    <user>U41NK9BM4</user>
    <text>I’m not sure I understand that trick. I’ll check at home if that fix my issue. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-12T08:20:36.384528</ts>
    <user>U0Z9TPK7S</user>
    <text>I created a `Main.elm` outside of src/, so that its relative position to assets/ is the same as when the app does NOT run on elm-reactor.</text>
  </message>
  <message>
    <ts>2017-07-12T08:21:37.406544</ts>
    <user>U3SJEDR96</user>
    <text>wouldn't you also have to change your `source-directories` for that to work?</text>
  </message>
  <message>
    <ts>2017-07-12T08:24:07.459293</ts>
    <user>U41NK9BM4</user>
    <text>I suppose that one has to prepare another `index.html` for a `dist` release, right ?</text>
  </message>
  <message>
    <ts>2017-07-12T08:24:48.474360</ts>
    <user>U41NK9BM4</user>
    <text>That second `dist/index.html ` would link the distribution `elm.js ` file.</text>
  </message>
  <message>
    <ts>2017-07-12T08:24:52.475767</ts>
    <user>U3SJEDR96</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-07-12T08:25:01.478780</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U3SJEDR96&gt; it does not seem necessary</text>
  </message>
  <message>
    <ts>2017-07-12T08:25:08.481284</ts>
    <user>U3SJEDR96</user>
    <text>interesting</text>
  </message>
  <message>
    <ts>2017-07-12T08:25:09.481658</ts>
    <user>U41NK9BM4</user>
    <text>OK. This is cool.</text>
  </message>
  <message>
    <ts>2017-07-12T08:25:13.483352</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U41NK9BM4&gt; &lt;https://github.com/xarvh/smoke/blob/single-face/Main.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T08:27:22.530299</ts>
    <user>U41NK9BM4</user>
    <text>Let’s see if I can make it work *right now* — I’m curious</text>
  </message>
  <message>
    <ts>2017-07-12T08:37:35.768645</ts>
    <user>U41NK9BM4</user>
    <text>Yes, it works. `&amp;lt;script src="/_compile/src/Main.elm"&amp;gt;&amp;lt;/script&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-07-12T08:38:08.781474</ts>
    <user>U41NK9BM4</user>
    <text>Cannot understand why, tho.</text>
  </message>
  <message>
    <ts>2017-07-12T08:39:00.801651</ts>
    <user>U41NK9BM4</user>
    <text>URL assets loaded from compiled Elm are resolved relative to index.html?</text>
  </message>
  <message>
    <ts>2017-07-12T08:39:07.804303</ts>
    <user>U3SJEDR96</user>
    <text>`/_compile` is like a magic prefix for `elm-reactor`. It's a marker to "take what follows and compile that path"</text>
  </message>
  <message>
    <ts>2017-07-12T08:39:57.823197</ts>
    <user>U3SJEDR96</user>
    <text>Relative url's are relative to the url of the page where they are shown, yes</text>
  </message>
  <message>
    <ts>2017-07-12T08:40:40.840218</ts>
    <user>U41NK9BM4</user>
    <text>Ah great. I can simplify the workflow a bit</text>
  </message>
  <message>
    <ts>2017-07-12T08:46:03.970328</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U3SJEDR96&gt; but it means that we need a dedicated index.html for react and one for the actual production</text>
  </message>
  <message>
    <ts>2017-07-12T08:52:27.133551</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0Z9TPK7S&gt; trade-offs... url's in Elm don't work any different that any other url, so it's relative to where it's loaded, unless you use an absolute path. Using `elm-reactor` and opening `src/App.elm` means you're looking at `src`. I tend to set up an `index.html` as soon as I need any extra resources, continue with `elm-reactor` and when it's time to deploy, I use that `index.html` as a basis for making it into something deployable.  So yeah. Doesn't seem that much worse than having a `Main.elm` that you use for dev but not production :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-12T09:06:16.519238</ts>
    <user>U41NK9BM4</user>
    <text>Indeed, it’s way better to have two dumb `index.html` files — at least with my setup</text>
  </message>
  <message>
    <ts>2017-07-12T09:58:47.237491</ts>
    <user>U31A7HG1E</user>
    <text>Does anyone have any suggestions or can point me to any articles or other resources related to implementing (or avoiding) deeply nested and hierarchical models in an Elm app?  I am setting out to implement an application that allows a user to create and modify an outline for an online course.  The model is essentially a tree with a course containing units, which contain modules which contain sections.  Sections can recursively contain other sections and can also contain essentially what are HTML pages.   I haven't written a line of code yet but can already see a problem of how to represent this model in a way that will allow me to easily modify it in response to user actions. For example, a user adding a new section would have to mutate the parent module, which mutates the parent unit, and so on back up the tree.  Any pointers or suggestions are welcome.</text>
  </message>
  <message>
    <ts>2017-07-12T10:20:39.064418</ts>
    <user>U0U6ML22H</user>
    <text>look into &lt;http://package.elm-lang.org/packages/evancz/elm-sortable-table/1.0.1&gt; for a way to make reusable views that are "configurable" by passing them the Msgs they'll use</text>
  </message>
  <message>
    <ts>2017-07-12T10:20:59.077181</ts>
    <user>U0U6ML22H</user>
    <text>that way, you can share most of the view code, and some of the update code, while still being able to use them from multiple contexts</text>
  </message>
  <message>
    <ts>2017-07-12T10:23:38.176448</ts>
    <user>U31A7HG1E</user>
    <text>Thanks, I just watched Richard's keynote at elm europe last night. He mentioned that repo also.  I'll take a look.</text>
  </message>
  <message>
    <ts>2017-07-12T10:41:36.869368</ts>
    <user>U5FU80S06</user>
    <text>How do I set an html `&amp;lt;scroll-container&amp;gt;` in Elm, as used in the example here: &lt;https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-12T10:42:30.903813</ts>
    <user>U3SJEDR96</user>
    <text>that's not an actual html element, but rather a custom tag as an example</text>
  </message>
  <message>
    <ts>2017-07-12T10:42:39.909248</ts>
    <user>U3SJEDR96</user>
    <text>you can use a `div` with some CSS</text>
  </message>
  <message>
    <ts>2017-07-12T10:44:26.977666</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://codepen.io/anon/pen/YQddbp&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T11:38:42.151879</ts>
    <user>U2GPX0EKC</user>
    <text>if one wants to do typical "enterprise" apps (paged lists + forms) - are there any must have libs to avoid inventing wheels all the time</text>
  </message>
  <message>
    <ts>2017-07-12T11:41:14.250632</ts>
    <user>U0J1M0F32</user>
    <text>&lt;@U2GPX0EKC&gt; &lt;https://github.com/elm-community&gt; Is a good start.</text>
  </message>
  <message>
    <ts>2017-07-12T11:42:24.294728</ts>
    <user>U0J1M0F32</user>
    <text>I do tend to find there are always a _few_ functions I wish I had that are already implemented on `list-extra` or `maybe-extra`, but other than that, I've found a lot of my projects match the domain I'm working on and the abstractions come from that. I, personally, have yet to feel like I'm reinventing the wheel.</text>
  </message>
  <message>
    <ts>2017-07-12T11:43:49.350689</ts>
    <user>U2GPX0EKC</user>
    <text>&lt;@U0J1M0F32&gt; but a paged-sortable table is something id hoped to avoid waste time on my own. (How many times have we implemented that?) =D</text>
  </message>
  <message>
    <ts>2017-07-12T11:44:31.378215</ts>
    <user>U0J1M0F32</user>
    <text>&lt;https://github.com/evancz/elm-sortable-table&gt; :stuck_out_tongue: true.</text>
  </message>
  <message>
    <ts>2017-07-12T11:45:15.407272</ts>
    <user>U2GPX0EKC</user>
    <text>i saw that. But it lacks paging doesnt it?</text>
  </message>
  <message>
    <ts>2017-07-12T11:57:02.864941</ts>
    <user>U0J1M0F32</user>
    <text>:thinking_face: Yah, I'm pretty sure it doesn't have paging.</text>
  </message>
  <message>
    <ts>2017-07-12T12:06:43.237785</ts>
    <user>U0U6ML22H</user>
    <text>you could develop a front-side paging lib, but it probably already exists</text>
  </message>
  <message>
    <ts>2017-07-12T12:07:48.276462</ts>
    <user>U0U6ML22H</user>
    <text>first Google result: &lt;https://github.com/jschomay/elm-paginate&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T13:21:32.810388</ts>
    <user>U2H92KKEY</user>
    <text>Is the a BigNumber library for elm?</text>
  </message>
  <message>
    <ts>2017-07-12T13:23:33.877649</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U2H92KKEY&gt; &lt;http://package.elm-lang.org/packages/gilbertkennen/bigint/latest&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-12T13:28:20.043006</ts>
    <user>U2H92KKEY</user>
    <text>david_hernandez: Don't know how I missed that. Last time I checked was a week ago, and the package I saw was outdated at elm version ~ 0.14</text>
  </message>
  <message>
    <ts>2017-07-12T13:28:32.049847</ts>
    <user>U2H92KKEY</user>
    <text>Time to test :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-12T13:28:42.055620</ts>
    <user>U1P6FFJ64</user>
    <text>Good luck! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-12T13:49:20.766074</ts>
    <user>U2GPX0EKC</user>
    <text>&lt;@U0U6ML22H&gt; thanks</text>
  </message>
  <message>
    <ts>2017-07-12T14:14:21.654077</ts>
    <user>U2H92KKEY</user>
    <text>Is it possible to find out what date a package was published on elm-package?

I know you can check the repo history, but this doesn't really tell you when it was actually pushed out to the package manager.

Thanks</text>
  </message>
  <message>
    <ts>2017-07-12T14:14:43.666328</ts>
    <user>U3SJEDR96</user>
    <text>Currently, no; but I believe that may be possible in the future</text>
  </message>
  <message>
    <ts>2017-07-12T14:14:51.671046</ts>
    <user>U2H92KKEY</user>
    <text>excellent</text>
  </message>
  <message>
    <ts>2017-07-12T14:15:02.677275</ts>
    <user>U3SJEDR96</user>
    <text>bigint was published ~a month ago, iirc</text>
  </message>
  <message>
    <ts>2017-07-12T14:15:12.683419</ts>
    <user>U2H92KKEY</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-12T14:53:20.008993</ts>
    <user>U62KVQVD1</user>
    <text>Can somebody help with bootstrap navbar, pls?</text>
  </message>
  <message>
    <ts>2017-07-12T14:53:37.019144</ts>
    <user>U62KVQVD1</user>
    <text>I am trying to have some Navbar.items on left and some Navbar.items on right</text>
  </message>
  <message>
    <ts>2017-07-12T14:54:18.042832</ts>
    <user>U62KVQVD1</user>
    <text>But I am not able to achieve that. I would like to have Navbar.itemLink on right (Login in or Sign up)</text>
  </message>
  <message>
    <ts>2017-07-12T14:56:05.104136</ts>
    <user>U0J1M0F32</user>
    <text>&lt;@U62KVQVD1&gt; Have you also asked in &lt;#C3U2E3JRX|elm-bootstrap&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-12T14:56:25.115507</ts>
    <user>U62KVQVD1</user>
    <text>Nope.</text>
  </message>
  <message>
    <ts>2017-07-12T15:43:29.625942</ts>
    <user>U1CSUFXTK</user>
    <text>i keep finding it weird that in elm the text inputs are not updated until my update is called (which is cool), yet checkboxes are checked immediately, regardless of my update (not cool) - why is this?</text>
  </message>
  <message>
    <ts>2017-07-12T15:46:11.712036</ts>
    <user>U14Q8S4EM</user>
    <text>Is that state of the check box determined by your model, or is it just that theres an event listener on the checkbox?</text>
  </message>
  <message>
    <ts>2017-07-12T15:47:04.740548</ts>
    <user>U14Q8S4EM</user>
    <text>I bet that your text input _does_ change before its updated. The update process is likely so quick it sets the text input value after its already changed.</text>
  </message>
  <message>
    <ts>2017-07-12T15:47:56.768277</ts>
    <user>U14Q8S4EM</user>
    <text>To demonstrate this, set the value to some fixed value like `"Letters are cool"`, and then try editing it.</text>
  </message>
  <message>
    <ts>2017-07-12T15:48:11.776411</ts>
    <user>U14Q8S4EM</user>
    <text>I bet you will see it change momentarily, before Elm sweeps in and sets it back to the static value.</text>
  </message>
  <message>
    <ts>2017-07-12T15:48:25.783897</ts>
    <user>U14Q8S4EM</user>
    <text>(Or if you dont notice, lag things up with thousands of these inputs).</text>
  </message>
  <message>
    <ts>2017-07-12T16:21:30.845262</ts>
    <user>U1CSUFXTK</user>
    <text>Ah I see, that's quite interesting then, I'll need to bear it in mind with design decisions in future</text>
  </message>
  <message>
    <ts>2017-07-12T16:21:36.848449</ts>
    <user>U1CSUFXTK</user>
    <text>thanks for that!</text>
  </message>
  <message>
    <ts>2017-07-12T17:08:20.309636</ts>
    <user>U1QDHAF61</user>
    <text>came across unfamiliar syntax of function  signature:</text>
  </message>
  <message>
    <ts>2017-07-12T17:08:25.311948</ts>
    <user>U1QDHAF61</user>
    <text>failHandler : (JwtError -&amp;gt; msg) -&amp;gt; String -&amp;gt; JwtError -&amp;gt; { model | msg : String } -&amp;gt; ( { model | msg : String }, Cmd msg )</text>
  </message>
  <message>
    <ts>2017-07-12T17:08:49.323345</ts>
    <user>U1QDHAF61</user>
    <text>{ model | msg : String } what it means here?</text>
  </message>
  <message>
    <ts>2017-07-12T17:09:59.355318</ts>
    <user>U23SA861Y</user>
    <text>it means a record which contains the field `msg` which is of type `String`</text>
  </message>
  <message>
    <ts>2017-07-12T17:10:06.358514</ts>
    <user>U23SA861Y</user>
    <text>any record which satisfies that</text>
  </message>
  <message>
    <ts>2017-07-12T17:10:07.359208</ts>
    <user>U1QDHAF61</user>
    <text>cool</text>
  </message>
  <message>
    <ts>2017-07-12T17:10:14.362600</ts>
    <user>U1QDHAF61</user>
    <text>did not know that</text>
  </message>
  <message>
    <ts>2017-07-12T17:10:35.372826</ts>
    <user>U1QDHAF61</user>
    <text>almost like type class HasMsg</text>
  </message>
  <message>
    <ts>2017-07-12T17:10:54.381948</ts>
    <user>U1QDHAF61</user>
    <text>or more precisely like Lens</text>
  </message>
  <message>
    <ts>2017-07-12T17:11:37.402113</ts>
    <user>U1QDHAF61</user>
    <text>&lt;@U23SA861Y&gt; Thanks</text>
  </message>
  <message>
    <ts>2017-07-12T17:12:07.415984</ts>
    <user>U23SA861Y</user>
    <text>eeh not lens, its just a pattern match</text>
  </message>
  <message>
    <ts>2017-07-12T17:13:02.442246</ts>
    <user>U1QDHAF61</user>
    <text>it is polymorphic and you can get/set field</text>
  </message>
  <message>
    <ts>2017-07-12T17:13:42.461405</ts>
    <user>U1QDHAF61</user>
    <text>so it seems liberating</text>
  </message>
  <message>
    <ts>2017-07-12T17:13:48.463765</ts>
    <user>U2U94G0QG</user>
    <text>that is a Type Variable if you want to read more about them</text>
  </message>
  <message>
    <ts>2017-07-12T17:14:46.490766</ts>
    <user>U23SA861Y</user>
    <text>its not really any different that a function like:
`capital: (a, String) -&amp;gt; (a,String)`</text>
  </message>
  <message>
    <ts>2017-07-12T17:16:13.531623</ts>
    <user>U1QDHAF61</user>
    <text>but 'capital' does not have notion of String is included at 'a', I think</text>
  </message>
  <message>
    <ts>2017-07-12T17:16:36.542436</ts>
    <user>U23SA861Y</user>
    <text>sry?</text>
  </message>
  <message>
    <ts>2017-07-12T17:17:03.555048</ts>
    <user>U23SA861Y</user>
    <text>maybe you implement it like
`capital (foo,str) = (foo, String.toUpper str)`</text>
  </message>
  <message>
    <ts>2017-07-12T17:17:10.558413</ts>
    <user>U23SA861Y</user>
    <text>or something like that</text>
  </message>
  <message>
    <ts>2017-07-12T17:17:36.570569</ts>
    <user>U23SA861Y</user>
    <text>the value is passed straight through because you know nothing about it</text>
  </message>
  <message>
    <ts>2017-07-12T17:19:12.614108</ts>
    <user>U1QDHAF61</user>
    <text>{ model | msg : String }  -&amp;gt; { model | msg : String } allows me return updated model</text>
  </message>
  <message>
    <ts>2017-07-12T17:19:21.618392</ts>
    <user>U23SA861Y</user>
    <text>correct</text>
  </message>
  <message>
    <ts>2017-07-12T17:19:45.628642</ts>
    <user>U23SA861Y</user>
    <text>where model is a type variable stand-in for all the other fields that could potentially be in a record</text>
  </message>
  <message>
    <ts>2017-07-12T17:20:59.662279</ts>
    <user>U1QDHAF61</user>
    <text>I see, I think I got your point about similarity with modifying tuple</text>
  </message>
  <message>
    <ts>2017-07-12T17:21:59.688924</ts>
    <user>U1QDHAF61</user>
    <text>still record syntax seems to have an additional value</text>
  </message>
  <message>
    <ts>2017-07-12T17:23:13.722532</ts>
    <user>U23SA861Y</user>
    <text>how so, records have field names so you need to specify that</text>
  </message>
  <message>
    <ts>2017-07-12T17:27:58.853127</ts>
    <user>U1QDHAF61</user>
    <text>I think because record is more generic then tuple, so it works with all records as long as they have the msg</text>
  </message>
  <message>
    <ts>2017-07-12T19:09:34.991703</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U3SJEDR96&gt; nope. I can use the `Main.elm` both for dev AND production. Don't need to duplicate anything.</text>
  </message>
  <message>
    <ts>2017-07-12T19:19:08.141570</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U1QDHAF61&gt; its a pattern matching thing, you are matching the shape of the type.</text>
  </message>
  <message>
    <ts>2017-07-12T19:42:21.492375</ts>
    <user>U5YDC1YUW</user>
    <text>where we have `(model, Cmd.none)` in the update function, is it possible to spawn multiple commands/tasks in place of `Cmd.none` or is it always just 1 or nothing?</text>
  </message>
  <message>
    <ts>2017-07-12T19:47:48.569772</ts>
    <user>U23SA861Y</user>
    <text>no, there is `Cmd.batch` that allows you to collect a bunch together</text>
  </message>
  <message>
    <ts>2017-07-12T21:23:14.788644</ts>
    <user>U5YDC1YUW</user>
    <text>cool, I'll look into it :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-13T01:10:33.106729</ts>
    <user>U4F64AKQV</user>
    <text>What’s the difference between Elm Self Publish and Elm GitHub Install? When should I use which?</text>
  </message>
  <message>
    <ts>2017-07-13T02:15:14.748728</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U4F64AKQV&gt; elm-github-install is newer, and works almost like elm-package install. However, if you have a package in development on your machine, using self publish will be less of a hassle. </text>
  </message>
  <message>
    <ts>2017-07-13T03:34:33.907183</ts>
    <user>U2P1ZGSM6</user>
    <text>hi everyone</text>
  </message>
  <message>
    <ts>2017-07-13T03:34:41.909480</ts>
    <user>U2P1ZGSM6</user>
    <text>I am using mgold/elm-animation to animate the height of a div. I would like to be able to transition between 0 and a height that fits the content of my div (the equivalent in css of height: auto;)</text>
  </message>
  <message>
    <ts>2017-07-13T03:35:01.915525</ts>
    <user>U2P1ZGSM6</user>
    <text>I have found a Jquery solution here that uses $(this).css("height","auto").height(); to get the correct height to transition to.</text>
  </message>
  <message>
    <ts>2017-07-13T03:35:25.923402</ts>
    <user>U2P1ZGSM6</user>
    <text>is there a way to do that in elm?</text>
  </message>
  <message>
    <ts>2017-07-13T03:37:12.955404</ts>
    <user>U5W5F6QGP</user>
    <text>I'm unsure about the library part, but there is an old CSS trick where you have `height: auto;` and you animate `max-height` between 0 and a number higher than your content will ever be</text>
  </message>
  <message>
    <ts>2017-07-13T03:37:37.963060</ts>
    <user>U5W5F6QGP</user>
    <text>once `max-height` exceeds height: 'auto', it doesn't grow beyond that point</text>
  </message>
  <message>
    <ts>2017-07-13T03:37:48.966376</ts>
    <user>U5W5F6QGP</user>
    <text>unsure of a direct elm implementation though sorry</text>
  </message>
  <message>
    <ts>2017-07-13T03:39:12.991907</ts>
    <user>U3SJEDR96</user>
    <text>wouldn't that make it tricky/unpredictable to get the timing right? Or is there a way around that?</text>
  </message>
  <message>
    <ts>2017-07-13T03:39:39.999781</ts>
    <user>U5W5F6QGP</user>
    <text>I found this JS fiddle: &lt;https://jsfiddle.net/leaverou/zwvNY/&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T03:39:41.000351</ts>
    <user>U5W5F6QGP</user>
    <text>it's like... okay</text>
  </message>
  <message>
    <ts>2017-07-13T03:39:52.003561</ts>
    <user>U5W5F6QGP</user>
    <text>and you can technically do it with pure CSS :hover</text>
  </message>
  <message>
    <ts>2017-07-13T03:39:55.004604</ts>
    <user>U5W5F6QGP</user>
    <text>which is always nice</text>
  </message>
  <message>
    <ts>2017-07-13T03:41:08.026540</ts>
    <user>U5W5F6QGP</user>
    <text>(if this triggers on hover of course)</text>
  </message>
  <message>
    <ts>2017-07-13T03:42:27.050550</ts>
    <user>U2P1ZGSM6</user>
    <text>I would like to use is on elements with a title always visible and a body that is collapsed by default and unfold when the user clicks on the title</text>
  </message>
  <message>
    <ts>2017-07-13T03:43:09.063254</ts>
    <user>U5W5F6QGP</user>
    <text>you could do it by toggling a class based on an "open" boolean and the strategy above

when it's closed, it applies a max-height: 0 class</text>
  </message>
  <message>
    <ts>2017-07-13T03:43:18.066255</ts>
    <user>U5W5F6QGP</user>
    <text>there is probably a better elm way though, so I'll leave that to someone else</text>
  </message>
  <message>
    <ts>2017-07-13T03:44:24.086188</ts>
    <user>U2P1ZGSM6</user>
    <text>I tried the max height idea, but like &lt;@U3SJEDR96&gt; said I can't get the timing right this way.</text>
  </message>
  <message>
    <ts>2017-07-13T03:45:27.106047</ts>
    <user>U5W5F6QGP</user>
    <text>ahh bummer</text>
  </message>
  <message>
    <ts>2017-07-13T03:48:53.169165</ts>
    <user>U2P1ZGSM6</user>
    <text>besides it's kinda hard to find a safe max-height value considering the content could get pertty long on small screens, If I set a very high value I loose the nice effects given by the easing functions available when using `elm-animation`</text>
  </message>
  <message>
    <ts>2017-07-13T03:51:02.209933</ts>
    <user>U2P1ZGSM6</user>
    <text>I guess I could try to compute the height of my `div` in javascript, send it trough a port and then animate, but it seems like overkill. especilally seems I plan to have several of these unfoldable elements on the same page</text>
  </message>
  <message>
    <ts>2017-07-13T03:52:26.237105</ts>
    <user>U2LC0U8JY</user>
    <text>If I want to use Elm for some parts of my app. How would I setup the build process? would i have to use webpack-elm?</text>
  </message>
  <message>
    <ts>2017-07-13T03:53:57.266416</ts>
    <user>U2P1ZGSM6</user>
    <text>I did something like that but without any animation once. the "actualités" part  on this site: &lt;http://http://www.murol.fr/&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T03:54:10.270196</ts>
    <user>U57KYFW67</user>
    <text>What's webpack-elm?</text>
  </message>
  <message>
    <ts>2017-07-13T03:54:34.277856</ts>
    <user>U2P1ZGSM6</user>
    <text>&lt;http://www.murol.fr/&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T03:54:35.278240</ts>
    <user>U2LC0U8JY</user>
    <text>elm-webpack-loader</text>
  </message>
  <message>
    <ts>2017-07-13T03:54:48.282450</ts>
    <user>U2P1ZGSM6</user>
    <text>it works but it's a bit jarring</text>
  </message>
  <message>
    <ts>2017-07-13T04:01:56.427216</ts>
    <user>U2LC0U8JY</user>
    <text>Integrating elm is easy, but I dont really know how to keep the whole reload-on-save and stuff</text>
  </message>
  <message>
    <ts>2017-07-13T04:14:21.678539</ts>
    <user>U36A5FJ3G</user>
    <text>Hello! I am trying to build a single page application. Due to the size we want to split up the app in different apps, on the same page. If I build several elm apps, they each include the source of elm. My question is: how can I build an elm app that only includes the compiled code of  the app itself and not include the elm runtime multiple times?</text>
  </message>
  <message>
    <ts>2017-07-13T04:20:32.811287</ts>
    <user>U2LC0U8JY</user>
    <text>alright I made it work</text>
  </message>
  <message>
    <ts>2017-07-13T04:20:43.815412</ts>
    <user>U2LC0U8JY</user>
    <text>using elm-webpack-loader works just fine</text>
  </message>
  <message>
    <ts>2017-07-13T04:22:03.844099</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U36A5FJ3G&gt; we have the exact same use case, and when I've asked here for help, the answer was: there's no way to do that currently. There might be a way in 0.19, but it's by no means guaranteed, and 0.19 has no planned release date anyway</text>
  </message>
  <message>
    <ts>2017-07-13T04:30:40.032074</ts>
    <user>U4872964V</user>
    <text>&lt;@U36A5FJ3G&gt; not sure what you want to do exactly, but you can compile multiple main modules into the same js file</text>
  </message>
  <message>
    <ts>2017-07-13T04:31:33.052249</ts>
    <user>U4872964V</user>
    <text>that way you’d only get the runtime once</text>
  </message>
  <message>
    <ts>2017-07-13T04:32:38.076415</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U4872964V&gt; how would you then "assign" each Elm app to various mount points?</text>
  </message>
  <message>
    <ts>2017-07-13T04:34:45.123153</ts>
    <user>U4872964V</user>
    <text>`Elm.YourModule.embed(yourElement)`</text>
  </message>
  <message>
    <ts>2017-07-13T04:37:00.171885</ts>
    <user>U0U6ML22H</user>
    <text>it's strictly equivalent? we have many "small" apps that share Data structures and global "architecture" (like, they're served by the same backend, they use the same kind of files, often they share the same ports, etc.)</text>
  </message>
  <message>
    <ts>2017-07-13T04:40:34.250008</ts>
    <user>U36A5FJ3G</user>
    <text>The apps not being in the same repository is quite critical. There are  9 teams working on the same app, and we like the “micro services” architecture.</text>
  </message>
  <message>
    <ts>2017-07-13T04:40:54.257344</ts>
    <user>U36A5FJ3G</user>
    <text>Ok, I guess I should wait for 0.19 then</text>
  </message>
  <message>
    <ts>2017-07-13T04:41:21.267392</ts>
    <user>U0CLDU8UB</user>
    <text>I don't think 0.19 is going to solve your use case either, to be honest</text>
  </message>
  <message>
    <ts>2017-07-13T04:41:31.271147</ts>
    <user>U36A5FJ3G</user>
    <text>Why do you think so?</text>
  </message>
  <message>
    <ts>2017-07-13T04:42:23.290166</ts>
    <user>U0CLDU8UB</user>
    <text>Multiple repositories sounds like multiple elm-package.json files, and thus multiple versions of the "runtime environment"</text>
  </message>
  <message>
    <ts>2017-07-13T04:43:09.307072</ts>
    <user>U36A5FJ3G</user>
    <text>Am I wrong in assuming that as long as they are the same version it shouldn’t matter?</text>
  </message>
  <message>
    <ts>2017-07-13T04:43:47.321355</ts>
    <user>U0U6ML22H</user>
    <text>as long as it "could", it needs to assume it "will"</text>
  </message>
  <message>
    <ts>2017-07-13T04:44:05.327910</ts>
    <user>U4872964V</user>
    <text>Could you have a build step where you just merge the repos</text>
  </message>
  <message>
    <ts>2017-07-13T04:44:44.342421</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U36A5FJ3G&gt; you would need to have a single set of dependencies</text>
  </message>
  <message>
    <ts>2017-07-13T04:46:00.371292</ts>
    <user>U36A5FJ3G</user>
    <text>&lt;@U4872964V&gt; Right now there are around 48 repositories each building there own artifacts. They all run inside some runtime, which declares all the dependencies, (&lt;@U0CLDU8UB&gt;: So differing dependencies shouldn’t be an issue)</text>
  </message>
  <message>
    <ts>2017-07-13T04:46:33.383641</ts>
    <user>U36A5FJ3G</user>
    <text>The correct artefacts are loaded when the runtime detects a route change</text>
  </message>
  <message>
    <ts>2017-07-13T04:47:01.393849</ts>
    <user>U36A5FJ3G</user>
    <text>Currently we use angularJS, but we are investigating a way to migrate with this architecture</text>
  </message>
  <message>
    <ts>2017-07-13T04:47:56.413877</ts>
    <user>U4872964V</user>
    <text>if you are sure that they use the same exact dependencies, then you could build the js, and then just cut away the runtime</text>
  </message>
  <message>
    <ts>2017-07-13T04:48:40.430198</ts>
    <user>U4872964V</user>
    <text>but you’d need one copy of it of course</text>
  </message>
  <message>
    <ts>2017-07-13T04:49:54.458453</ts>
    <user>U4872964V</user>
    <text>it’s a very specific use case you have there</text>
  </message>
  <message>
    <ts>2017-07-13T04:50:23.469819</ts>
    <user>U0CLDU8UB</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-07-13T04:51:36.497350</ts>
    <user>U0CLDU8UB</user>
    <text>50 repos for a single frontend app seems... unfathomable.</text>
  </message>
  <message>
    <ts>2017-07-13T04:52:21.513866</ts>
    <user>U4872964V</user>
    <text>I would probably make a solution where things are merged at build time</text>
  </message>
  <message>
    <ts>2017-07-13T04:55:32.586083</ts>
    <user>U5QJW0DDE</user>
    <text>i asked this a few days ago in elm-discuss list, but i think it's stuck in moderation for my first post, so i'll ask here: compare these two Ellie: 1) &lt;https://ellie-app.com/3JbGH7v2v7ra1/1&gt; and 2) &lt;https://ellie-app.com/3JbNQk26qNRa1/0&gt; .. in 1) on Line 22, I'm just passing a hard set 0 to the child since the parent does not get any data from the model other than it needs; the question is how to give children data without passing whole model state or without passing more to ancestors than they need. in 2) the problem is the same, though the view is built from the "bottom up", but this still requires ancestors to know the needs of distant descendants and to have access to model data that children need. I have a large SPA that I'm experimenting with porting to Elm but this coupling between the Elm Architecture's model structure and view hierarchy is hard to work around. what would be some other examples, or perhaps in a large SPA just passing whole model state throughout all views is common?</text>
  </message>
  <message>
    <ts>2017-07-13T05:01:30.725278</ts>
    <user>U36A5FJ3G</user>
    <text>&lt;@U0CLDU8UB&gt; it’s a big app. But the features/repos are small so the tests run quickly. But I’ve seen this approach in multiple projects. If you want to use continous deployment, splitting the app in small, separate deployable artefacts is very convenient.</text>
  </message>
  <message>
    <ts>2017-07-13T05:02:02.738107</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; well, i think this is an artificial division of “parent” and “child”. The view you call the “parent” contains the child so it has to know what data the child needs.</text>
  </message>
  <message>
    <ts>2017-07-13T05:02:15.743022</ts>
    <user>U36A5FJ3G</user>
    <text>&lt;@U4872964V&gt; how would you “cut away” the runtime?</text>
  </message>
  <message>
    <ts>2017-07-13T05:03:09.763702</ts>
    <user>U4872964V</user>
    <text>&lt;@U36A5FJ3G&gt; I’d look at the generated js, the user code is at the bottom, so I’d cut the file before the user code</text>
  </message>
  <message>
    <ts>2017-07-13T05:03:27.770293</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; but in reality, the children of a view parent are not necessary made up from data that is enclosed within a parent's data -- that is, model data and view hierarchy are not the same in a large app (nor should they be -- the data model should not depend on the UI structure). this example just illustrates what is a common problem in large SPAs and I'm curious how the best practice is in Elm</text>
  </message>
  <message>
    <ts>2017-07-13T05:03:53.779820</ts>
    <user>U36A5FJ3G</user>
    <text>Smart, didn’t know this detail. I will investigate some more. Thanks for the advice</text>
  </message>
  <message>
    <ts>2017-07-13T05:04:45.798730</ts>
    <user>U0CLDU8UB</user>
    <text>No, in Elm apps the "main parent" always has the entire data for the entire application.</text>
  </message>
  <message>
    <ts>2017-07-13T05:04:57.803138</ts>
    <user>U0CLDU8UB</user>
    <text>There is no other state</text>
  </message>
  <message>
    <ts>2017-07-13T05:05:04.805763</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; certainly, but you’d have to know what part of the model to pass to the different parts of the view</text>
  </message>
  <message>
    <ts>2017-07-13T05:05:16.810586</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; sure, the main parent, top-most-level, but I'm referring to sending data down through a tree. this example is very simple but imagine many more layers</text>
  </message>
  <message>
    <ts>2017-07-13T05:06:05.829154</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; you’d have to refactor your view functions if you change the layout of the view, but refactoring is easy in Elm</text>
  </message>
  <message>
    <ts>2017-07-13T05:06:31.839398</ts>
    <user>U5QJW0DDE</user>
    <text>put another way, suppose you have a widget whose only job is to choose between showing Screen A and Screen B. It can simply receive a Bool or flag to determine what to build next. The Screen widgets then require much more data to be built. So this simple switch widget (in this contrived example) needs to get a lot more than it needs so it can pass all the required data to Screen A, or pass a big bunch of different data to Screen B</text>
  </message>
  <message>
    <ts>2017-07-13T05:06:55.847993</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; but that widget would only send a Msg</text>
  </message>
  <message>
    <ts>2017-07-13T05:07:16.855625</ts>
    <user>U4872964V</user>
    <text>or?</text>
  </message>
  <message>
    <ts>2017-07-13T05:07:19.856684</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; i'm not talking about the sending of the info, i'm talking about the building of the views</text>
  </message>
  <message>
    <ts>2017-07-13T05:07:32.861698</ts>
    <user>U4872964V</user>
    <text>ok, but that widget would then get a union type parameter i suppose</text>
  </message>
  <message>
    <ts>2017-07-13T05:08:03.872368</ts>
    <user>U4872964V</user>
    <text>not a bool</text>
  </message>
  <message>
    <ts>2017-07-13T05:08:19.878353</ts>
    <user>U0CLDU8UB</user>
    <text>Can you draw an illustration of what you mean? I think I get what you're really asking, but the specifics are sort of muddling it up.</text>
  </message>
  <message>
    <ts>2017-07-13T05:09:01.893215</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; but that assumes that the data that Screen A needs can all be encapsulated in a single piece of model state -- what if it is a complex view that needs access to different areas of the model? my point is that your suggestion assumes your data model perfectly lines up with your views; in reality, a data model is separate from view structure</text>
  </message>
  <message>
    <ts>2017-07-13T05:09:22.900606</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; no, you can build whatever data you need for your view and pass it down</text>
  </message>
  <message>
    <ts>2017-07-13T05:09:53.911676</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; that is exactly my point -- "pass it down" assumes that your parents are also getting all the data the children need, which ultimately can require most views to get whole model state in order to pass down everything</text>
  </message>
  <message>
    <ts>2017-07-13T05:10:10.917958</ts>
    <user>U4872964V</user>
    <text>well, that’s the point of Elm, a single source of state</text>
  </message>
  <message>
    <ts>2017-07-13T05:10:22.922716</ts>
    <user>U4872964V</user>
    <text>so that you know exactly what data your functions depend on</text>
  </message>
  <message>
    <ts>2017-07-13T05:10:29.925060</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; it's not about single source of state, it's about how to access that single source without requiring whole model state to all views</text>
  </message>
  <message>
    <ts>2017-07-13T05:11:10.939871</ts>
    <user>U4872964V</user>
    <text>well, if you need access to the whole state, you pass the whole state, if you want to make your functions easier to understand, you separate out the parts they really need and pass only them</text>
  </message>
  <message>
    <ts>2017-07-13T05:12:22.965442</ts>
    <user>U5QJW0DDE</user>
    <text>for example, you have a widget that has the sole job of displaying a dropdown list of items. all it needs are the data for the list. that widget is many layers below an ancestor. to eventually build that list, all your parents need to contain all those list items and pass them down, or, just pass whole model state through everything. but many parents will not need to know all those list items, nor even know they will eventually need to build a dropdown many layers below. likewise, many parents will not need whole model state, but they now do so they can offer dropdown list items well below</text>
  </message>
  <message>
    <ts>2017-07-13T05:14:34.011974</ts>
    <user>U5QJW0DDE</user>
    <text>it's a fundamental problem that i and many others experienced in the UI patterns of clojurescript a few years ago; it was written about here: &lt;https://circleci.com/blog/why-we-use-om-and-why-were-excited-for-om-next/&gt; (skip to the part "The Conundrum Of Cursors: Most Data Is Not A Tree.")</text>
  </message>
  <message>
    <ts>2017-07-13T05:15:33.034301</ts>
    <user>U5QJW0DDE</user>
    <text>the problem was eventually solved in Re-Frame which is the most popular UI pattern in clojurescript now, but the Elm Architecture seems to have not solved this issue yet</text>
  </message>
  <message>
    <ts>2017-07-13T05:18:01.089348</ts>
    <user>U4872964V</user>
    <text>So, this is more of a consequence of having pure functions, a function cannot access anything that’s not passed to it</text>
  </message>
  <message>
    <ts>2017-07-13T05:18:17.095277</ts>
    <user>U4872964V</user>
    <text>I’m not sure how the Elm architecture plays into it</text>
  </message>
  <message>
    <ts>2017-07-13T05:19:59.132438</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; perhaps; clojurescript solves it with the use of "subscriptions" to model data so widgets are self-contained and isolated modules that do not inject a data dependency into their parents</text>
  </message>
  <message>
    <ts>2017-07-13T05:20:25.142180</ts>
    <user>U0CLDU8UB</user>
    <text>I feel like not a whole lot of people who have Elm in production see this as an issue that needs to be solved.</text>
  </message>
  <message>
    <ts>2017-07-13T05:20:59.154636</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; the problem is the same regardless of language: it's about the design pattern that comes about from a single source of truth (which is still highly encouraged in many language frameworks)</text>
  </message>
  <message>
    <ts>2017-07-13T05:21:05.156978</ts>
    <user>U4872964V</user>
    <text>Exactly, I just write my functions, and if I have to rearrange the views, I just refactor them</text>
  </message>
  <message>
    <ts>2017-07-13T05:21:32.166692</ts>
    <user>U4872964V</user>
    <text>I think this is less of a problem in Elm, because refactoring is so easy</text>
  </message>
  <message>
    <ts>2017-07-13T05:21:33.167197</ts>
    <user>U0CLDU8UB</user>
    <text>As an example, dependency injection is way more complicated than having more arguments to a function</text>
  </message>
  <message>
    <ts>2017-07-13T05:21:37.168433</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; my dropdown list example above, how would you deal with that without either passing whole model state or passing much more than individual components need</text>
  </message>
  <message>
    <ts>2017-07-13T05:22:05.178422</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; but Elm requires that parents have injected into their view function data requirements the data that children will require</text>
  </message>
  <message>
    <ts>2017-07-13T05:22:06.178966</ts>
    <user>U4872964V</user>
    <text>I don’t think in terms of components, I think in terms of functions</text>
  </message>
  <message>
    <ts>2017-07-13T05:22:42.191770</ts>
    <user>U4872964V</user>
    <text>and if a function needs to call another function with a certain parameter, then that function need that parameter too</text>
  </message>
  <message>
    <ts>2017-07-13T05:22:42.191993</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; i'd still like to see an example that addresses my specific example; so far, i have not found anything for this kind of typical ui complexity</text>
  </message>
  <message>
    <ts>2017-07-13T05:23:17.204562</ts>
    <user>U4872964V</user>
    <text>So, I want to add a drop-down. Then I add it, add a parameter for the data, and refactor the functions to have that parameter</text>
  </message>
  <message>
    <ts>2017-07-13T05:23:47.214928</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; well that model really breaks down on large scale apps; you end up with view components that receive a tremendous amount of data that might not be needed until much further down the tree; it tightly couples model data with view hierarchy and makes it difficult to built reusable components</text>
  </message>
  <message>
    <ts>2017-07-13T05:24:04.221200</ts>
    <user>U4872964V</user>
    <text>Yes, but I don’t build reusable components</text>
  </message>
  <message>
    <ts>2017-07-13T05:24:36.233907</ts>
    <user>U153UK3FA</user>
    <text>Dependency injection via partial function application is the way to do this if you need to do it</text>
  </message>
  <message>
    <ts>2017-07-13T05:24:39.234854</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; it still leads to a more complex view structure rather than views receiving or handling simple data that they only need, and none of their distant ancestors</text>
  </message>
  <message>
    <ts>2017-07-13T05:25:03.243765</ts>
    <user>U4872964V</user>
    <text>I don’t agree that it’s more complex</text>
  </message>
  <message>
    <ts>2017-07-13T05:25:06.245057</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U153UK3FA&gt; how does that solve the issue though?</text>
  </message>
  <message>
    <ts>2017-07-13T05:25:18.249426</ts>
    <user>U4872964V</user>
    <text>I think it’s more simple to know exactly what data a function uses by looking at it’s type</text>
  </message>
  <message>
    <ts>2017-07-13T05:25:34.255394</ts>
    <user>U0CLDU8UB</user>
    <text>The data model hierarchy and the view hierarchy **do not** need to match.</text>
  </message>
  <message>
    <ts>2017-07-13T05:25:41.257840</ts>
    <user>U5QJW0DDE</user>
    <text>it's possible that most Elm use-cases in production are for smaller components on existing sites, or smaller apps where this problem doesn't really matter or surface</text>
  </message>
  <message>
    <ts>2017-07-13T05:25:45.259226</ts>
    <user>U4872964V</user>
    <text>I think this is a clash between “components” and “functions” thinking</text>
  </message>
  <message>
    <ts>2017-07-13T05:25:52.261955</ts>
    <user>U0CLDU8UB</user>
    <text>I do too</text>
  </message>
  <message>
    <ts>2017-07-13T05:26:03.265533</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; it's just termiology; a component in this case is just a view function</text>
  </message>
  <message>
    <ts>2017-07-13T05:26:08.267383</ts>
    <user>U4872964V</user>
    <text>No</text>
  </message>
  <message>
    <ts>2017-07-13T05:26:10.268094</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U5QJW0DDE&gt; you apply data to functions and then past the functions down</text>
  </message>
  <message>
    <ts>2017-07-13T05:26:46.281114</ts>
    <user>U4872964V</user>
    <text>A component implies more than a function does, it’s sort of self-contained</text>
  </message>
  <message>
    <ts>2017-07-13T05:26:53.283528</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; i saw a discussion on the elm mailing list where it was suggested that one alternative to passing whole model state is to have an intermediate function before the views render that converts the model data into a new data structure for the whole view hierarchy; this doesn't seem elegant either</text>
  </message>
  <message>
    <ts>2017-07-13T05:27:11.289864</ts>
    <user>U4872964V</user>
    <text>A function is a one-off, I just write them when I need them</text>
  </message>
  <message>
    <ts>2017-07-13T05:27:25.294918</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; that can be fine if your functions don't have a lot of descendants</text>
  </message>
  <message>
    <ts>2017-07-13T05:27:34.298266</ts>
    <user>U0CLDU8UB</user>
    <text>So what do you think _would be_ elegant?</text>
  </message>
  <message>
    <ts>2017-07-13T05:27:58.306750</ts>
    <user>U4872964V</user>
    <text>If a function has a lot of parameters, I just use a one-off record type for it</text>
  </message>
  <message>
    <ts>2017-07-13T05:28:06.309805</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; well, i only have from experience how the clojurescript community solved it, and it's very elegant there via a subscription paradigm, but this isn't possible in Elm and i'd have to think about how it could be</text>
  </message>
  <message>
    <ts>2017-07-13T05:28:09.310781</ts>
    <user>U0CLDU8UB</user>
    <text>References to pieces of state from where ever in the view tree?</text>
  </message>
  <message>
    <ts>2017-07-13T05:28:40.322092</ts>
    <user>U0CLDU8UB</user>
    <text>Does that mean what I just wrote?</text>
  </message>
  <message>
    <ts>2017-07-13T05:29:16.335182</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; clojurescript solved it by having pure functions that act as queries on the whole model. then individual view functions subscribe to any queries they need. that's not in the loop of the elm architecture so i'd have to think about how that could be added</text>
  </message>
  <message>
    <ts>2017-07-13T05:29:21.336997</ts>
    <user>U4872964V</user>
    <text>If you want that kind of access, just pass the state everywhere</text>
  </message>
  <message>
    <ts>2017-07-13T05:29:39.343300</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; well, that is indeed my point. then all view functions have all model state</text>
  </message>
  <message>
    <ts>2017-07-13T05:29:51.348088</ts>
    <user>U0CLDU8UB</user>
    <text>so what?</text>
  </message>
  <message>
    <ts>2017-07-13T05:29:56.349573</ts>
    <user>U4872964V</user>
    <text>yes, that would be the equivalent, and that’s fine if you want to do it that way</text>
  </message>
  <message>
    <ts>2017-07-13T05:29:59.350727</ts>
    <user>U0CLDU8UB</user>
    <text>what is the issue here?</text>
  </message>
  <message>
    <ts>2017-07-13T05:30:07.354400</ts>
    <user>U57KYFW67</user>
    <text>You can pass as much or as little as the situation calls for.</text>
  </message>
  <message>
    <ts>2017-07-13T05:30:21.359680</ts>
    <user>U57KYFW67</user>
    <text>And you don't have to do it in a uniform way, either</text>
  </message>
  <message>
    <ts>2017-07-13T05:30:51.370857</ts>
    <user>U57KYFW67</user>
    <text>Some view might need the whole model. Some smaller view might just need a part of the model, and you can either pass just that... or you can pass the whole model and project out the part you need.</text>
  </message>
  <message>
    <ts>2017-07-13T05:31:13.378678</ts>
    <user>U0CLDU8UB</user>
    <text>I'd like to know what the reasoning is for saying "it is bad if many view functions get the whole model as an argument".</text>
  </message>
  <message>
    <ts>2017-07-13T05:31:14.379172</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; it's about re-use; if you pass whole model state to all views, then each view function is responsible to querying out the data it needs from an app-specific model structure; that would not be re-usable in other apps since the views are not getting just what they need. it's also about organizaiton; view functions are now more complicated because they receive lots of state they don't need</text>
  </message>
  <message>
    <ts>2017-07-13T05:31:30.384934</ts>
    <user>U4872964V</user>
    <text>The point of Elm is not to make it easy to access the global state everywhere, it’s to make it hard :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T05:31:56.394248</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; and yet ironically the consequence is that global state is just passed everywhere in a lot of use cases, therefore making it easy</text>
  </message>
  <message>
    <ts>2017-07-13T05:32:16.401757</ts>
    <user>U57KYFW67</user>
    <text>There was a video posted just the other day for Elm Europe discussing an issue similar to this</text>
  </message>
  <message>
    <ts>2017-07-13T05:32:32.407562</ts>
    <user>U57KYFW67</user>
    <text>Which was that you should strive to only pass functions exactly what they need (rather than the whole model)</text>
  </message>
  <message>
    <ts>2017-07-13T05:32:41.410968</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U57KYFW67&gt; if you are referring to the key note from &lt;@U0CL0AS3V&gt; i watched that</text>
  </message>
  <message>
    <ts>2017-07-13T05:32:45.412288</ts>
    <user>U4872964V</user>
    <text>so, I’ve never reused a view function in another app, that’s what i mean is the difference in thinking in “components” vs “functions”</text>
  </message>
  <message>
    <ts>2017-07-13T05:32:55.415955</ts>
    <user>U0CLDU8UB</user>
    <text>I posted Richard's talk to kfairwink a couple of days ago, yes</text>
  </message>
  <message>
    <ts>2017-07-13T05:33:08.420747</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U57KYFW67&gt; my point is that you cannot avoid passing large amounts of state to view functions if they have lots of descendants</text>
  </message>
  <message>
    <ts>2017-07-13T05:33:12.422215</ts>
    <user>U57KYFW67</user>
    <text>Yep. It was his talk.</text>
  </message>
  <message>
    <ts>2017-07-13T05:33:32.429723</ts>
    <user>U4872964V</user>
    <text>yes, if they have lots of descendants, they are inherently complex, and so that should be reflected in their type</text>
  </message>
  <message>
    <ts>2017-07-13T05:33:36.431375</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CL0AS3V&gt; 's talk confirmed the problem i am talking about which is that model state should line up with the view tree</text>
  </message>
  <message>
    <ts>2017-07-13T05:33:54.438185</ts>
    <user>U57KYFW67</user>
    <text>Ultimately, you only have to pass what is required.... so if you can't avoid passing large amounts of state... then doesn't that show that your application *requires* passing a large amount of state :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T05:34:10.443876</ts>
    <user>U0CLDU8UB</user>
    <text>I still don't get how it is a problem to pass a lot of state to functions that need a lot of state.</text>
  </message>
  <message>
    <ts>2017-07-13T05:34:36.453745</ts>
    <user>U5QJW0DDE</user>
    <text>if you can show me how to implement my example above regarding a dropdown menu in a distant descendant without either 1) passing whole model state through all your view functions or 2) making your data model line up with your view tree, i'd be very interested. but i see no way to do this in Elm</text>
  </message>
  <message>
    <ts>2017-07-13T05:34:57.461238</ts>
    <user>U57KYFW67</user>
    <text>If you have a dropdown menu, what data is rendered in the menu?</text>
  </message>
  <message>
    <ts>2017-07-13T05:35:06.464447</ts>
    <user>U57KYFW67</user>
    <text>Each item and its corresponding URL?</text>
  </message>
  <message>
    <ts>2017-07-13T05:35:08.465427</ts>
    <user>U5QJW0DDE</user>
    <text>the idea is that a view function should not require any more state than is necessary for its own logic</text>
  </message>
  <message>
    <ts>2017-07-13T05:35:24.471165</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; so, I add the dropdown in the place it should be. Then i add the data it needs to the function type. Then I add it to the calling functions type, then I add it above, until I get to the top.</text>
  </message>
  <message>
    <ts>2017-07-13T05:35:28.472574</ts>
    <user>U3SJEDR96</user>
    <text>Isn't a nested view part of its logic?</text>
  </message>
  <message>
    <ts>2017-07-13T05:35:45.478691</ts>
    <user>U3SJEDR96</user>
    <text>functions are composed, so that function is just part of another function</text>
  </message>
  <message>
    <ts>2017-07-13T05:35:48.479990</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; so you are saying all its ancestors will also receive all the dropdown list items and pass it down, which is what i am saying too</text>
  </message>
  <message>
    <ts>2017-07-13T05:36:02.484989</ts>
    <user>U4872964V</user>
    <text>yes, because that’s how the view looks.</text>
  </message>
  <message>
    <ts>2017-07-13T05:36:03.485540</ts>
    <user>U57KYFW67</user>
    <text>A dropdown seems like it would be easily modeled with an annotated tree</text>
  </message>
  <message>
    <ts>2017-07-13T05:36:18.491179</ts>
    <user>U57KYFW67</user>
    <text>and you just need to map over that tree, turning each node into an Html div</text>
  </message>
  <message>
    <ts>2017-07-13T05:36:29.495259</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; therefore, the data model is lining up with the view structure, so you pass one part of your data model to a higher-up view, and that contains all the data for the whole view tree</text>
  </message>
  <message>
    <ts>2017-07-13T05:36:37.498063</ts>
    <user>U57KYFW67</user>
    <text>it wouldn't need to know about any business logic, really</text>
  </message>
  <message>
    <ts>2017-07-13T05:37:06.508550</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; the data model for the view, certainly, but that does not need to line up with the actual data model, you can pick the parts your view needs</text>
  </message>
  <message>
    <ts>2017-07-13T05:37:16.512292</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; and what if the actual data for those items is in a different part of your central data that none of the parents needed? now all your parents also need to receive that part of your data model too</text>
  </message>
  <message>
    <ts>2017-07-13T05:37:37.519971</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; they only need to receive the data for the drop down</text>
  </message>
  <message>
    <ts>2017-07-13T05:38:02.529134</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; in addition to the data they need for themselves</text>
  </message>
  <message>
    <ts>2017-07-13T05:38:13.532975</ts>
    <user>U4872964V</user>
    <text>I’ve build some complicated views, and it’s not really a problem, you just add parameters or record fields</text>
  </message>
  <message>
    <ts>2017-07-13T05:38:19.535112</ts>
    <user>U0CLDU8UB</user>
    <text>Remember: any function that you write in Elm can use helpers or it can contain all of the code itself. You don't need to care about that. So if you say "Sidebar.view model.sidebar", you don't need to know if `Sidebar.view` is a single function that does all of its stuff, or if it is a "parent" function that calls its "children". From the point of view of the program, these two are _exactly the same_, just the functions within are organized differently.</text>
  </message>
  <message>
    <ts>2017-07-13T05:38:53.547438</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; but those helpers obviously cannot receive data as arguments that the calling view didn't' also receive to pass to the helpers, no?</text>
  </message>
  <message>
    <ts>2017-07-13T05:39:39.563490</ts>
    <user>U0CLDU8UB</user>
    <text>Of course - how could they?</text>
  </message>
  <message>
    <ts>2017-07-13T05:40:33.583403</ts>
    <user>U4872964V</user>
    <text>so, the view function is not a generic function, it’s a specific function that matches exactly how your view looks. If you change how your view looks, you change the function.</text>
  </message>
  <message>
    <ts>2017-07-13T05:40:48.588883</ts>
    <user>U0CLDU8UB</user>
    <text>You can't do
```
add a b =
    a + b + doStuff c
```
(unless `c` is a constant :))</text>
  </message>
  <message>
    <ts>2017-07-13T05:40:50.589595</ts>
    <user>U3SJEDR96</user>
    <text>I can see the appeal of "what if they _could_"; but yeah, that would be very un-elmish</text>
  </message>
  <message>
    <ts>2017-07-13T05:41:28.603205</ts>
    <user>U5QJW0DDE</user>
    <text>i think i understand what everyone is saying, and that's fine : the paradigm of the elm architecture is that large amounts of state gets passed through a view hierarchy. that's basically what i wanted to know, is whether there was an alternative. i'm not so much trying to criticize (though sorry if it comes across that way) as to gather what the architecture requires.</text>
  </message>
  <message>
    <ts>2017-07-13T05:41:53.611827</ts>
    <user>U5QJW0DDE</user>
    <text>it's just a consequence of the Elm way of doing things. fine, i get it.</text>
  </message>
  <message>
    <ts>2017-07-13T05:41:58.613994</ts>
    <user>U3SJEDR96</user>
    <text>I, for one, think it's an interesting perspective!</text>
  </message>
  <message>
    <ts>2017-07-13T05:42:09.617902</ts>
    <user>U4872964V</user>
    <text>what we are saying is that it’s not a problem, as long as you think of functions as not being components, but just ways to structure your view code</text>
  </message>
  <message>
    <ts>2017-07-13T05:42:54.634065</ts>
    <user>U5QJW0DDE</user>
    <text>in very large scale apps, this was proven to be a big burden on codebases in clojurescript back in 2014 - 2015 which is why they moved away from this model of ui paradigm. lots of big great industry apps were built with this paradigm, but newer techniques have emerged that solved some of these problems.</text>
  </message>
  <message>
    <ts>2017-07-13T05:43:01.636709</ts>
    <user>U4872964V</user>
    <text>functions are super-light in Elm, not at all like components in various js frameworks</text>
  </message>
  <message>
    <ts>2017-07-13T05:43:35.649130</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; this has nothing to do with the "lightness" of the underlying implementation. it's a lot about the structure of an app</text>
  </message>
  <message>
    <ts>2017-07-13T05:43:37.649554</ts>
    <user>U0CLDU8UB</user>
    <text>are you talking about atoms?</text>
  </message>
  <message>
    <ts>2017-07-13T05:43:47.653390</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; in which case?</text>
  </message>
  <message>
    <ts>2017-07-13T05:44:36.670652</ts>
    <user>U0CLDU8UB</user>
    <text>views getting more data than what their parents are</text>
  </message>
  <message>
    <ts>2017-07-13T05:44:45.673860</ts>
    <user>U4872964V</user>
    <text>the way I see it it that the requirement to put all data explicitly in the type of functions is a way to make it _less_ complex. If any part can access any data at any time, a big app becomes too complex</text>
  </message>
  <message>
    <ts>2017-07-13T05:45:20.687258</ts>
    <user>U4872964V</user>
    <text>i don’t see how the scale of the app changes that</text>
  </message>
  <message>
    <ts>2017-07-13T05:46:49.719164</ts>
    <user>U4872964V</user>
    <text>and with Elm, refactoring is _easy_. I don’t know how easy it is in clojurescript</text>
  </message>
  <message>
    <ts>2017-07-13T05:47:04.724847</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; yes the idea was that you should be able to have a view function that doesn't need to parse a central data store in addition to doing its own view logic. therefore, you should be able to look at a view function and tell from its arguments (or subscriptions, in clojurescript's case) exactly what data it needs, and it doesn't receive or handle any data it doesn't need, including for building view children that might need different data.</text>
  </message>
  <message>
    <ts>2017-07-13T05:48:00.744797</ts>
    <user>U5QJW0DDE</user>
    <text>A high-level view function shouldn't need to receive a list of dropdown data that a distant child needs, for example</text>
  </message>
  <message>
    <ts>2017-07-13T05:48:55.764865</ts>
    <user>U0CLDU8UB</user>
    <text>So in older Elm we had Signals, which are essentially subscriptions. But even then, the views themselves were just `Model -&amp;gt; Html`</text>
  </message>
  <message>
    <ts>2017-07-13T05:50:32.799678</ts>
    <user>U5QJW0DDE</user>
    <text>here, when i say "the data it needs" that does not mean "data it needs to pass to children" it just means the data it needs to concretely display something to the screen or make a specific decision; state that is not directly touched and handled by a view function doesn't get passed to it</text>
  </message>
  <message>
    <ts>2017-07-13T05:50:34.800269</ts>
    <user>U0CLDU8UB</user>
    <text>This is a paradigm thing. Take a look at Cycle.js. They use observable streams for everything, making even views be stream transformations.</text>
  </message>
  <message>
    <ts>2017-07-13T05:51:00.809730</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; it’s hard to explain how easy making these kinds of changes are in Elm. If you add something to a view somewhere, you get a type error, so you add the type to the function, then you get a type error in the calling function so you add it there too, etc.

So I’m wondering if this is just a theoretical worry that you have or if you have made an Elm app and actually run into this problem when modifying your views.</text>
  </message>
  <message>
    <ts>2017-07-13T05:51:00.809761</ts>
    <user>U0CLDU8UB</user>
    <text>Some people find that much more appealing than what Elm does</text>
  </message>
  <message>
    <ts>2017-07-13T05:51:26.819073</ts>
    <user>U4872964V</user>
    <text>well yes, there are certainly alternatives, Elm is not for everybody</text>
  </message>
  <message>
    <ts>2017-07-13T05:51:52.828698</ts>
    <user>U0CLDU8UB</user>
    <text>Similarly, CLJS probably has its own paradigm and you likely cannot bring that mindset over to Elm</text>
  </message>
  <message>
    <ts>2017-07-13T05:52:13.836329</ts>
    <user>U0CLDU8UB</user>
    <text>Elm is very restricted, and some people dislike that</text>
  </message>
  <message>
    <ts>2017-07-13T05:52:44.847386</ts>
    <user>U0CLDU8UB</user>
    <text>others think it's what makes Elm greater than any other solution</text>
  </message>
  <message>
    <ts>2017-07-13T05:53:24.862019</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CLDU8UB&gt; ok, so i think we are at a conclusion here. my original question was about whether the paradigm i'm talking about was possible in Elm, and it sounds like basically no. in elm's defense, it is a logical architecture to arrive at: clojurescript did it this way for 2 years before realizing the large scale problems that can result</text>
  </message>
  <message>
    <ts>2017-07-13T05:53:54.873180</ts>
    <user>U57KYFW67</user>
    <text>Are the docstrings in Elm markdown?</text>
  </message>
  <message>
    <ts>2017-07-13T05:54:00.875089</ts>
    <user>U0CLDU8UB</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-07-13T05:54:20.882972</ts>
    <user>U0CLDU8UB</user>
    <text>But the code blocks need to be indented 4 spaces</text>
  </message>
  <message>
    <ts>2017-07-13T05:54:45.892266</ts>
    <user>U57KYFW67</user>
    <text>neat. thanks</text>
  </message>
  <message>
    <ts>2017-07-13T05:55:40.912975</ts>
    <user>U5QJW0DDE</user>
    <text>i think one of the big differences is that while a very large and complex SPA is possible in both languages, i gather that Elm is mostly used in production for smaller components or smaller apps (with some exceptions) while clojurescript is often used for very complex industrial enterprise spa's,  so many of the limitations of the elm data model approach probably haven't surfaced for enough companies yet to warrant consideration</text>
  </message>
  <message>
    <ts>2017-07-13T05:58:13.967711</ts>
    <user>U0CLDU8UB</user>
    <text>what is large?</text>
  </message>
  <message>
    <ts>2017-07-13T05:58:15.968481</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; well, you may be right, but i cannot really imagine where the limitation would be. It’s not more complex to change the types of a few more functions. More work, obviously, but only in logarithmic amounts to the size of the application. What you get in return is a bunch of guarantees of how data is used.</text>
  </message>
  <message>
    <ts>2017-07-13T05:59:07.987218</ts>
    <user>U0U6ML22H</user>
    <text>Elm is very verbose; I'm endlessly frustrated by it, but it makes everything else a smooth cruise</text>
  </message>
  <message>
    <ts>2017-07-13T05:59:49.002367</ts>
    <user>U4872964V</user>
    <text>tooling for refactoring could be even better of course, but that will come in time</text>
  </message>
  <message>
    <ts>2017-07-13T06:00:01.006820</ts>
    <user>U0CLDU8UB</user>
    <text>I'm pretty sure the type system and the compiler actually help with the stuff so much that people haven't come across this thing in Elm.</text>
  </message>
  <message>
    <ts>2017-07-13T06:00:55.027852</ts>
    <user>U0CLDU8UB</user>
    <text>Most of the big apps are not open source, but here's a moderately sized SPA written in Elm: &lt;https://github.com/Tradenomiliitto/tradenomiitti&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T06:01:42.044763</ts>
    <user>U5QJW0DDE</user>
    <text>haven't seen that example before, only the spa example by &lt;@U0CL0AS3V&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T06:01:45.045566</ts>
    <user>U5QJW0DDE</user>
    <text>i'll check it out</text>
  </message>
  <message>
    <ts>2017-07-13T06:01:51.047569</ts>
    <user>U0CLDU8UB</user>
    <text>I've worked on two apps that were bigger in terms of LOC.</text>
  </message>
  <message>
    <ts>2017-07-13T06:02:49.067751</ts>
    <user>U5QJW0DDE</user>
    <text>all the structural problem i've been discussing started to surface in my company's app after it hit about 8000 lines of clojurescript (which have since doubled). I think none of the issues I present would be that apparent in smaller apps</text>
  </message>
  <message>
    <ts>2017-07-13T06:03:35.083561</ts>
    <user>U5QJW0DDE</user>
    <text>really the problems i'm talking grow exponentially with the size of your data model</text>
  </message>
  <message>
    <ts>2017-07-13T06:04:25.100977</ts>
    <user>U4872964V</user>
    <text>I’m not sure I understand the problem still: even if the data model grows, the views would not grow with it?</text>
  </message>
  <message>
    <ts>2017-07-13T06:04:28.102177</ts>
    <user>U0CLDU8UB</user>
    <text>tradenomiitti is `Elm 5473`</text>
  </message>
  <message>
    <ts>2017-07-13T06:05:11.116585</ts>
    <user>U4872964V</user>
    <text>A page is still the size of a page, right?</text>
  </message>
  <message>
    <ts>2017-07-13T06:06:34.145375</ts>
    <user>U4872964V</user>
    <text>anyway, time for lunch</text>
  </message>
  <message>
    <ts>2017-07-13T06:07:01.154286</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; i'm not going to continue describing the issue, i don't really have the time. i think i've received enough input to get the answers I need on this. if you are genuinely interested in the larger conceptual philosophies about how data and user interfaces interact, do some reading about clojurescript's evolution on this over the past few years. obviously, elm has also struggled with these philosophies and continues to evolve too.</text>
  </message>
  <message>
    <ts>2017-07-13T06:07:21.160826</ts>
    <user>U4872964V</user>
    <text>ok fair enough :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T06:26:52.539136</ts>
    <user>U41NK9BM4</user>
    <text>It is possible that 2 years from now Elm will be used in very large apps with CLSJ is and then we will be facing with the same issues you mentioned here. But I would suggest to fix a thing at time. “If it ain’t broken…”</text>
  </message>
  <message>
    <ts>2017-07-13T06:27:57.559158</ts>
    <user>U57KYFW67</user>
    <text>If it ain't broken, don't fix it. If it is broken, just use it. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T06:41:14.800042</ts>
    <user>U5J0H2NS2</user>
    <text>&lt;@U5QJW0DDE&gt;, maybe your issue with large, deeply nested applications could be solved with some kind of server-side rendering?</text>
  </message>
  <message>
    <ts>2017-07-13T06:43:54.847721</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U5QJW0DDE&gt;, &lt;@U4872964V&gt;, &lt;@U0CLDU8UB&gt;, &lt;@U3SJEDR96&gt;, et al, I have a comment and question regarding your discussion (passing lots of data around).  The model in the app I am working on has a list of documents and so indeed can have "a lot" of data.  For example, one master document has 14 children (sections), for about 70K of data.  At the moment, I am testing it (editing documents, viewing them, searching, sorting, etc) with this master doc and its children as part of a set of 32 docs that are present in the model.  All of this stuff is passed around, since the model is the arg in the view function and most of the little functions it calls.

What is the result?  A very snappy, responsive app.  It is a rewrite of a similar app which had to previous incarnations, one in Rails, the other in Angular.  Despite my possibly mistaken architecture, it works MUCH better than its predecessors.

I'm very much interested in learning more about these architectural issues and improving my code.  However, I just wanted to give an example that all worries in theory are not necessarily worries in practice.</text>
  </message>
  <message>
    <ts>2017-07-13T06:44:14.853665</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U5J0H2NS2&gt; server side rendering would possibly be a solution when I'm hitting up against this problem due to the limitations of the elm architecture, but it's much more preferable to keep things on the front end if that's where you need them or want them to be.</text>
  </message>
  <message>
    <ts>2017-07-13T06:44:31.858925</ts>
    <user>U3LUC6SNS</user>
    <text>PS.  I do split the work of my app between server (elixir/phoenix) and client</text>
  </message>
  <message>
    <ts>2017-07-13T06:45:18.872873</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U3LUC6SNS&gt; i'm guessing that your views are custom for the app, and that you don't generally write reusable views?</text>
  </message>
  <message>
    <ts>2017-07-13T06:47:15.908066</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U5QJW0DDE&gt; That is mostly true, although I have buttons, menus, etc. that are part of the view that are written in a pretty generic way.  I "re-use" them at various places in the app.  Just keeping the code DRYer.</text>
  </message>
  <message>
    <ts>2017-07-13T06:47:15.908119</ts>
    <user>U5QJW0DDE</user>
    <text>I'm glad that you're app is snappy, but this discussion was never really about performance. More about code modularity, controlled data flow, data model structure, etc.</text>
  </message>
  <message>
    <ts>2017-07-13T06:47:40.915329</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U5QJW0DDE&gt; I will try to learn from it :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T06:53:01.010538</ts>
    <user>U64MK7215</user>
    <text>is there any sample json request code built in elm?</text>
  </message>
  <message>
    <ts>2017-07-13T06:53:05.011936</ts>
    <user>U17MSA88M</user>
    <text>&lt;@U5QJW0DDE&gt; are you sure hitting the 8000 lines slowdown didn't come down to dynamic typing? slicing data into appropriate bits is definitely easier if you have the compiler to guide you</text>
  </message>
  <message>
    <ts>2017-07-13T06:57:49.097108</ts>
    <user>U1L1HMV9Q</user>
    <text>getting data from the model usually boils down to one pattern match on a record. Is there something I am missing about restricting data to functions?</text>
  </message>
  <message>
    <ts>2017-07-13T06:57:50.097627</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U5QJW0DDE&gt; the answer is the same as with OOP when you actually want to avoid having global state. You have factories that know about data that you pass to callers that only need to know about the thing the factory produces and not that thing’s dependencies</text>
  </message>
  <message>
    <ts>2017-07-13T06:58:06.102462</ts>
    <user>U4872964V</user>
    <text>&lt;@U3LUC6SNS&gt; what was your question? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T06:58:33.110730</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U5QJW0DDE&gt; In the case of OOP these factories are objects, in the case of functional languages these factories are partially applied functions.</text>
  </message>
  <message>
    <ts>2017-07-13T06:58:54.116771</ts>
    <user>U5QJW0DDE</user>
    <text>None of this is about performance. The app was not slower. This is entirely about organizing an app so that it is modular, concise, elegant, easy to scale.</text>
  </message>
  <message>
    <ts>2017-07-13T06:59:44.131957</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U153UK3FA&gt; Aka closures, aka objects :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T07:00:08.140166</ts>
    <user>U5QJW0DDE</user>
    <text></text>
  </message>
  <message>
    <ts>2017-07-13T07:01:06.158971</ts>
    <user>U17MSA88M</user>
    <text>I didn't talk about performance. I meant development slowdown</text>
  </message>
  <message>
    <ts>2017-07-13T07:01:50.172730</ts>
    <user>U153UK3FA</user>
    <text>But just passing the whole model and narrowing the types can work well too</text>
  </message>
  <message>
    <ts>2017-07-13T07:02:09.178162</ts>
    <user>U1L1HMV9Q</user>
    <text>The compiler really does do a lot of work for you. I have never before been so fearless when refactoring code</text>
  </message>
  <message>
    <ts>2017-07-13T07:02:44.188367</ts>
    <user>U5QJW0DDE</user>
    <text>I personally believe that static typing can help, which is an opinion not everyone shares. However, this particular issue is not really about specific language features as it is about the overall design pattern of global app state and the user interface.</text>
  </message>
  <message>
    <ts>2017-07-13T07:03:01.193375</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U4872964V&gt; Whether passing the model around can be a performance problem.  It hasn't been for me yet, but maybe it could be.</text>
  </message>
  <message>
    <ts>2017-07-13T07:04:07.212680</ts>
    <user>U5QJW0DDE</user>
    <text>Obviously, I'm quite comfortable and enjoy static typing, or I wouldn't be giving Elm such a serious look on behalf of my company.</text>
  </message>
  <message>
    <ts>2017-07-13T07:04:10.213270</ts>
    <user>U4872964V</user>
    <text>i don’t see how it would affect performance, it’s not like it’s copied</text>
  </message>
  <message>
    <ts>2017-07-13T07:04:40.221974</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U4872964V&gt;, Thanks, that is what I wanted to know.</text>
  </message>
  <message>
    <ts>2017-07-13T07:06:09.247583</ts>
    <user>U17MSA88M</user>
    <text>Well I don't think that you can separate your program design from your programming language. Deeply nested datatypes/sums just aren't handleable without a compiler checking you didn't forget anything. Language differences are not just about syntax!</text>
  </message>
  <message>
    <ts>2017-07-13T07:06:26.252656</ts>
    <user>U5QJW0DDE</user>
    <text>For us, the issue isn't about language features, the elm language is actually very nice. It's more about us hitting some limitations in the elm architecture, which is really where all my questions have stemmed from. </text>
  </message>
  <message>
    <ts>2017-07-13T07:07:04.264033</ts>
    <user>U3LUC6SNS</user>
    <text>And that is good news, because with the model.a, model.a.b.c etc approach I never have to think much about how to get the part of the data that I need.</text>
  </message>
  <message>
    <ts>2017-07-13T07:08:31.289393</ts>
    <user>U1L1HMV9Q</user>
    <text>&lt;@U5QJW0DDE&gt; For me the biggest pain points so far have been: Learning curve(I am slow ok..) and the compile time. The latter can be a pain if you are used to make changes in your editor of choice and expect the update to be ready when you hit the browser a second later. I do not see the issue you raised as something to be concerned about.

```➜  elm git:(projectiles) elmloc
      79 text files.
      79 unique files.                              
       0 files ignored.

&lt;http://github.com/AlDanial/cloc|github.com/AlDanial/cloc&gt; v 1.72  T=0.07 s (1062.5 files/s, 146978.4 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Elm                             79           2191           1406           7331
-------------------------------------------------------------------------------
SUM:                            79           2191           1406           7331
-------------------------------------------------------------------------------```</text>
  </message>
  <message>
    <ts>2017-07-13T07:10:32.325372</ts>
    <user>U5QJW0DDE</user>
    <text>You honestly think that a programming language must enforce a single design pattern? Nearly no languages do this.</text>
  </message>
  <message>
    <ts>2017-07-13T07:12:28.359426</ts>
    <user>U1L1HMV9Q</user>
    <text>The latter is a trade off for the goodness of the compiler ofc. But it must be mentioned</text>
  </message>
  <message>
    <ts>2017-07-13T07:12:49.365682</ts>
    <user>U17MSA88M</user>
    <text>I don't think a programming must enforce one (elm does though), but choosing a "design pattern" (whatever that means) and not taking the features of your language into account seems like a mistake to me</text>
  </message>
  <message>
    <ts>2017-07-13T07:13:57.384916</ts>
    <user>U17MSA88M</user>
    <text>fwiw we (at work) decided against using the elm architecture because we needed to embed existing complex javascript components into our app</text>
  </message>
  <message>
    <ts>2017-07-13T07:14:27.394000</ts>
    <user>U4872964V</user>
    <text>It’s being worked on (the compilation speed). There is no technical reason why it has to be slow.</text>
  </message>
  <message>
    <ts>2017-07-13T07:14:35.396147</ts>
    <user>U5QJW0DDE</user>
    <text>Sure, but ultimately we are talking about a design pattern, the elm architecture, that's about all of my questions today. That model is entirely separate from the language. Because that model has been used in many front end languages, it certainly not unique to Elm, nor did Elm invent it. </text>
  </message>
  <message>
    <ts>2017-07-13T07:16:51.437353</ts>
    <user>U17MSA88M</user>
    <text>Well, in Elm you're not going to find another way to structure apps. The language is designed around that pattern to make it as pleasant and streamlined as possible</text>
  </message>
  <message>
    <ts>2017-07-13T07:18:12.461014</ts>
    <user>U17MSA88M</user>
    <text>In PureScript land we are a bit more free to shoot our own feet. If you want to see a different approach to the strongly typed frontend I'd suggest you check out &lt;https://github.com/slamdata/purescript-halogen&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T07:20:08.494666</ts>
    <user>U5QJW0DDE</user>
    <text>Very interesting, thanks for sharing. I will indeed check that out.￼</text>
  </message>
  <message>
    <ts>2017-07-13T07:20:12.495687</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U1L1HMV9Q&gt; What aspects have you found the most difficult to learn? What kind of a background did you come in with?</text>
  </message>
  <message>
    <ts>2017-07-13T07:23:03.545655</ts>
    <user>U1L1HMV9Q</user>
    <text>I come from a OO background. I have been learning elm and elixir on the side for the past year or so.</text>
  </message>
  <message>
    <ts>2017-07-13T07:25:54.595303</ts>
    <user>U1L1HMV9Q</user>
    <text>Elixir was much easier to come to grips with, but once you understand the fundamentals you discover that it is very deep(OTP etc). Elm is reversed. Harder to pick up the fundamentals but once you get it you should be able to pick up most projects relatively easy.</text>
  </message>
  <message>
    <ts>2017-07-13T07:26:32.606466</ts>
    <user>U57KYFW67</user>
    <text>My guess is that it's the FP stuff that was hardest, then?</text>
  </message>
  <message>
    <ts>2017-07-13T07:26:44.610077</ts>
    <user>U1L1HMV9Q</user>
    <text>ye</text>
  </message>
  <message>
    <ts>2017-07-13T07:27:02.615016</ts>
    <user>U1L1HMV9Q</user>
    <text>There is a lot of us out there though :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T07:27:50.628609</ts>
    <user>U57KYFW67</user>
    <text>I'm just curious because I was considering writing a bit about the basics of FP. Probably with examples taken from Elm</text>
  </message>
  <message>
    <ts>2017-07-13T07:35:13.758190</ts>
    <user>U2LAL86AY</user>
    <text>Is there a way i can limit a type to only take values between 0 and 1? To prevent myself for checking for `0 &amp;lt; x &amp;lt; 1` all over the place. Let the compiler do it. Any ideas?</text>
  </message>
  <message>
    <ts>2017-07-13T07:35:34.764440</ts>
    <user>U57KYFW67</user>
    <text>You can't really do it in Elm.</text>
  </message>
  <message>
    <ts>2017-07-13T07:35:50.769342</ts>
    <user>U17MSA88M</user>
    <text>sure you can. Just not statically enforced</text>
  </message>
  <message>
    <ts>2017-07-13T07:36:04.773577</ts>
    <user>U57KYFW67</user>
    <text>You can't even specify non-negative numbers, either, which would be my #1 want in a langauge</text>
  </message>
  <message>
    <ts>2017-07-13T07:36:11.775525</ts>
    <user>U2LAL86AY</user>
    <text>this explains the pain points: &lt;https://www.youtube.com/watch?v=ngWo5e-294o&amp;amp;t=1925s&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T07:36:30.781107</ts>
    <user>U17MSA88M</user>
    <text>&lt;@U2LAL86AY&gt; You can make a `TinyNumber` data type and not export its constructor</text>
  </message>
  <message>
    <ts>2017-07-13T07:36:39.783585</ts>
    <user>U4872964V</user>
    <text>The problem with all these type restrictions is that normal operations would either crash or have to return `Maybe`</text>
  </message>
  <message>
    <ts>2017-07-13T07:36:39.783850</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U17MSA88M&gt; It's clear statically-enforced was what was meant -.-</text>
  </message>
  <message>
    <ts>2017-07-13T07:36:45.785446</ts>
    <user>U17MSA88M</user>
    <text>instead you export a `tinyNumber` function</text>
  </message>
  <message>
    <ts>2017-07-13T07:37:33.799669</ts>
    <user>U17MSA88M</user>
    <text>which does the check, and then you can write all the functions on top of that `TinyNumber` data type while being certain that your invariant wasn't violated</text>
  </message>
  <message>
    <ts>2017-07-13T07:39:14.828265</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U17MSA88M&gt; like a separate module ? For example i've seen `NonEmptyList` - which was kind of amazing - so i thought this would be possible as well - somehow .. but i don't understand exactly what you mean by `not export its constructor`</text>
  </message>
  <message>
    <ts>2017-07-13T07:41:17.864711</ts>
    <user>U17MSA88M</user>
    <text>&lt;@U2LAL86AY&gt; Just a second I'll look up the syntax^^ Yes the idea is to put the data type AND the functions that operate on it into their own modules. These functions are free to pattern match on the datatype and use the underlying number</text>
  </message>
  <message>
    <ts>2017-07-13T07:43:20.900625</ts>
    <user>U17MSA88M</user>
    <text>&lt;@U2LAL86AY&gt; Here is an example of how to do it: &lt;https://github.com/Fresheyeball/elm-restrict-number/blob/0f0a07ba2d2b5cf6a6ab90c3b5cdc45cd1a91fad/Natural.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T07:43:39.906202</ts>
    <user>U17MSA88M</user>
    <text>notice the `Maybe` on the `fromInt` function</text>
  </message>
  <message>
    <ts>2017-07-13T07:45:39.942213</ts>
    <user>U2LAL86AY</user>
    <text>i'll look into it thanks :smiley:</text>
  </message>
  <message>
    <ts>2017-07-13T07:51:39.052341</ts>
    <user>U4872964V</user>
    <text>&lt;http://package.elm-lang.org/packages/jschomay/elm-bounded-number/1.0.0/Number-Bounded&gt; perhaps</text>
  </message>
  <message>
    <ts>2017-07-13T07:52:42.071705</ts>
    <user>U4872964V</user>
    <text>depends a bit on what you want the number for</text>
  </message>
  <message>
    <ts>2017-07-13T09:21:16.187100</ts>
    <user>U2L33RRR8</user>
    <text>Hi can someone please help me understand why Html.lazy is still calling the view when there are no actual changes in model in this example &lt;https://ellie-app.com/3KmS6BKjzHBa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T09:22:25.222419</ts>
    <user>U4872964V</user>
    <text>because you are changing the model by setting x to 1 (it doesn’t matter that it was 1 before)</text>
  </message>
  <message>
    <ts>2017-07-13T09:22:51.235895</ts>
    <user>U3SJEDR96</user>
    <text>`{ r | .. }` creates a new record, and `lazy` uses reference equality (unlike anything else in Elm)</text>
  </message>
  <message>
    <ts>2017-07-13T09:23:28.254866</ts>
    <user>U4872964V</user>
    <text>if you do `if model.x == 1 then model else { model | x = 1 }` you’ll see</text>
  </message>
  <message>
    <ts>2017-07-13T09:29:32.445116</ts>
    <user>U2L33RRR8</user>
    <text>norpan, yes I actually tried that before, but unfortunately our model is big and it would be complex to do that.</text>
  </message>
  <message>
    <ts>2017-07-13T09:30:24.473746</ts>
    <user>U2L33RRR8</user>
    <text>do you know if there is a simpler way to achieve similar results?</text>
  </message>
  <message>
    <ts>2017-07-13T09:31:14.500493</ts>
    <user>U4872964V</user>
    <text>it depends on your model i think, why is it not feasible to compare with the previous value before setting it?</text>
  </message>
  <message>
    <ts>2017-07-13T09:32:07.530082</ts>
    <user>U4872964V</user>
    <text>so, Html.Lazy is a tricky optimization because it only compares reference equality</text>
  </message>
  <message>
    <ts>2017-07-13T09:32:41.548901</ts>
    <user>U2L33RRR8</user>
    <text>it is possible, but we would need to do it on every field of the model, which is huge as I mentioned before.</text>
  </message>
  <message>
    <ts>2017-07-13T09:32:43.549691</ts>
    <user>U4872964V</user>
    <text>generally you’d not call it on your whole `Model` but on a part of it that’s used for a particular view function</text>
  </message>
  <message>
    <ts>2017-07-13T09:32:52.554919</ts>
    <user>U4872964V</user>
    <text>why would you do it on every field?</text>
  </message>
  <message>
    <ts>2017-07-13T09:33:05.561979</ts>
    <user>U4872964V</user>
    <text>most fields change rarely so Html.Lazy would not be needed</text>
  </message>
  <message>
    <ts>2017-07-13T09:34:11.596947</ts>
    <user>U2L33RRR8</user>
    <text>ok, but in which scenarios does Html.Lazy help with optimization?</text>
  </message>
  <message>
    <ts>2017-07-13T09:35:45.647285</ts>
    <user>U4872964V</user>
    <text>when something changes often in your model and you have an expensive view function that does not depend on that value</text>
  </message>
  <message>
    <ts>2017-07-13T09:36:26.669448</ts>
    <user>U4872964V</user>
    <text>then you can avoid calling the view function by wrapping it with `lazy`</text>
  </message>
  <message>
    <ts>2017-07-13T09:37:29.703318</ts>
    <user>U2L33RRR8</user>
    <text>I see.. does this mean if there is a change in the model that is not passed to the view it would still be called if I don’t use `lazy`?</text>
  </message>
  <message>
    <ts>2017-07-13T09:37:45.711807</ts>
    <user>U4872964V</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-13T09:38:16.727874</ts>
    <user>U2L33RRR8</user>
    <text>oh.. ok. didn’t know that. thanks!</text>
  </message>
  <message>
    <ts>2017-07-13T09:39:05.753457</ts>
    <user>U4872964V</user>
    <text>but normally you don’t get that many changes to your model, only if you use subscribe to animationframe or things like that</text>
  </message>
  <message>
    <ts>2017-07-13T09:40:33.801161</ts>
    <user>U2L33RRR8</user>
    <text>its a real-time app with multiple updates every second. so it would still help to use lazy</text>
  </message>
  <message>
    <ts>2017-07-13T09:40:59.814888</ts>
    <user>U4872964V</user>
    <text>well, if you have performance issues then it’s one way to go for sure</text>
  </message>
  <message>
    <ts>2017-07-13T09:42:13.856298</ts>
    <user>U2L33RRR8</user>
    <text>`if model.x == 1 then model else { model | x = 1 }` is this usually the way to do updates?</text>
  </message>
  <message>
    <ts>2017-07-13T09:42:39.870467</ts>
    <user>U2L33RRR8</user>
    <text>shouldn’t elm do a diff in the model to know if the values actually changed?</text>
  </message>
  <message>
    <ts>2017-07-13T09:43:24.895225</ts>
    <user>U4872964V</user>
    <text>no, elm does a diff of the virtual dom returned by the view function instead</text>
  </message>
  <message>
    <ts>2017-07-13T09:43:39.903484</ts>
    <user>U4872964V</user>
    <text>diffing the model is potentially very expensive</text>
  </message>
  <message>
    <ts>2017-07-13T09:46:12.988977</ts>
    <user>U2L33RRR8</user>
    <text>hm.. wouldn’t it only need to check one value? in the above case only for `x`</text>
  </message>
  <message>
    <ts>2017-07-13T09:47:01.016166</ts>
    <user>U4872964V</user>
    <text>in the above case yes, but in the general case no</text>
  </message>
  <message>
    <ts>2017-07-13T09:47:25.029612</ts>
    <user>U4872964V</user>
    <text>normally, the model _has_ changed when you call the view function</text>
  </message>
  <message>
    <ts>2017-07-13T09:48:04.050555</ts>
    <user>U4872964V</user>
    <text>remember that the architecture only knows about the _top_ view function, which is called with the whole model as a parameter</text>
  </message>
  <message>
    <ts>2017-07-13T09:54:40.278690</ts>
    <user>U1FCZNA7R</user>
    <text>Does anyone have any experience placing svg text in a box? My goal is to have function like this to have vertically and horizontally centered text in a box
```
viewBox : Int -&amp;gt; Int -&amp;gt; String -&amp;gt; Svg a
viewBox boxX boxY textInBox = ...
```
I'd be grateful for any working example :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T09:56:43.352803</ts>
    <user>U1FCZNA7R</user>
    <text>I'm able to determine vertical offset of the text based on font height, but I'm struggling with determining text's width to set horizontal offset and box width properly..</text>
  </message>
  <message>
    <ts>2017-07-13T09:59:09.440033</ts>
    <user>U4872964V</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor&gt; perhaps</text>
  </message>
  <message>
    <ts>2017-07-13T10:01:56.545087</ts>
    <user>U4872964V</user>
    <text>oh, you want to change the size of the box, hard</text>
  </message>
  <message>
    <ts>2017-07-13T10:03:53.616736</ts>
    <user>U4872964V</user>
    <text>the would depend on the font rendering, so either you can approximate it or you have to wait until it has rendered and adjust the box</text>
  </message>
  <message>
    <ts>2017-07-13T10:18:28.144407</ts>
    <user>U2LAL86AY</user>
    <text>can someone can help me understand why this library is using `comparable` here and not `number`?
&lt;https://github.com/jschomay/elm-bounded-number/blob/1.0.0/src/Number/Bounded.elm#L35&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T10:19:50.193471</ts>
    <user>U2LAL86AY</user>
    <text>what is the advantage? or there is none?</text>
  </message>
  <message>
    <ts>2017-07-13T10:21:08.241896</ts>
    <user>U5J0H2NS2</user>
    <text>Just a higher level of abstraction I guess.</text>
  </message>
  <message>
    <ts>2017-07-13T10:21:21.250100</ts>
    <user>U5J0H2NS2</user>
    <text>You can use it for any comparable type.</text>
  </message>
  <message>
    <ts>2017-07-13T10:22:34.295216</ts>
    <user>U2LAL86AY</user>
    <text>yeah but comparable means `strings` and `list of strings` - and it doesn't make sense to "bound" a list of strings - in the context of this library- or i'm missing something..</text>
  </message>
  <message>
    <ts>2017-07-13T10:23:46.340218</ts>
    <user>U2LAL86AY</user>
    <text>oh and i found something more interesting. How can i create a function of type : `number -&amp;gt; Float` the fancy search returns nothing.
&lt;http://klaftertief.github.io/elm-search/?q=number+-%3E+Float&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T10:24:27.365765</ts>
    <user>U681TBBUP</user>
    <text>The only notion needed for bounding something is comparability, maybe it doesn't make sense in some contexts but there isn't a reason to unnecessarily restrict it</text>
  </message>
  <message>
    <ts>2017-07-13T10:26:34.446202</ts>
    <user>U3ZNWN526</user>
    <text>Hmm... There's a strange thing happening (or maybe I'm just missing something obvious): I have an extensible record type `WithUserFields` and an extended record `UserFields`, which doesn't add any additional fields:
```
type alias WithUserFields a = { a | ... }
type alias UserFields = WithUserFields {}
```
But when I try to use `UserFields`, the compiler spits out "cannot find variable `UserFields`"</text>
  </message>
  <message>
    <ts>2017-07-13T10:27:27.480102</ts>
    <user>U2LAL86AY</user>
    <text>how do you try to use `UserFields` can you show that particular example?</text>
  </message>
  <message>
    <ts>2017-07-13T10:28:03.502478</ts>
    <user>U2LAL86AY</user>
    <text>and you can't have `WithUserFields`  and `WithUserFields ` twice in the same module i think - ups i thougth is a `type` - delete that :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T10:28:26.516721</ts>
    <user>U5QJW0DDE</user>
    <text>Incidentally this is only true if your data model is structured the same as your UI. Rarely does a UI page equate to an exact segment of your data model. </text>
  </message>
  <message>
    <ts>2017-07-13T10:28:30.519285</ts>
    <user>U3ZNWN526</user>
    <text>Sure! The first case for example, is:
```
userFieldsFrom : User -&amp;gt; UserFields
userFieldsFrom u =
  UserFields u.userRole u.username u.name u.email u.password u.passwordConfirmation
```</text>
  </message>
  <message>
    <ts>2017-07-13T10:29:10.544990</ts>
    <user>U3ZNWN526</user>
    <text>Well for `WithUserFields` the first time is defining it, and the second time I'm using it (to define `UserFields`)</text>
  </message>
  <message>
    <ts>2017-07-13T10:30:00.576887</ts>
    <user>U5QJW0DDE</user>
    <text>I look forward to watching that. </text>
  </message>
  <message>
    <ts>2017-07-13T10:30:38.601812</ts>
    <user>U2LAL86AY</user>
    <text>there is a small article about extensible records here. I can't find the other one i saved once - was much better at explaining how to compose extensible records. &lt;https://dennisreimann.de/articles/elm-data-structures-record-tuple.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T10:30:42.604725</ts>
    <user>U2LAL86AY</user>
    <text>ok let check it out</text>
  </message>
  <message>
    <ts>2017-07-13T10:36:25.817838</ts>
    <user>U2LAL86AY</user>
    <text>i simplified a bit:
```
type alias WithUserFields a =
    { a | name : String }


type alias UserFields =
    WithUserFields {}


userFieldsFrom : String -&amp;gt; UserFields
userFieldsFrom string =
    WithUserFields string

```
error: 
```
Cannot find variable `WithUserFields`
```</text>
  </message>
  <message>
    <ts>2017-07-13T10:36:46.830256</ts>
    <user>U2LAL86AY</user>
    <text>so it seems like you can't have parametric types act as constructors</text>
  </message>
  <message>
    <ts>2017-07-13T10:37:13.846934</ts>
    <user>U3ZNWN526</user>
    <text>Oh, no, I have `UserFields` as the constructor within that last function, not `WithUserFields`</text>
  </message>
  <message>
    <ts>2017-07-13T10:39:26.929386</ts>
    <user>U2LAL86AY</user>
    <text>Maybe is the same thing - since  it gives the same error.

if you have `type alias Thing = String `
you get back a function named `Thing : String -&amp;gt; Thing`.

But if you have `type alias Thing a  = String `
Seems you don't have this `Thing: String -&amp;gt; Thing` anymore. It's how elm works.
 Let me try a few more things first</text>
  </message>
  <message>
    <ts>2017-07-13T10:41:57.024672</ts>
    <user>U3ZNWN526</user>
    <text>Ooh, so you think even with `type alias Thing = MetaThing {}` maybe wouldn't give you the constructor?  I suppose that's possible... very unexpected though, and doesn't seem to be documented anywhere</text>
  </message>
  <message>
    <ts>2017-07-13T10:42:50.057984</ts>
    <user>U3ZNWN526</user>
    <text>I would think with a `type alias Thing = ` I could put anything after the `=` and it would give me a constructor.</text>
  </message>
  <message>
    <ts>2017-07-13T10:45:32.161094</ts>
    <user>U5J0H2NS2</user>
    <text>I think this
```
WithUserFields a = { a | ... }
```
means only, that the type has several known fields.
You did not specify their order. So you can not construct one just like you wanted.</text>
  </message>
  <message>
    <ts>2017-07-13T10:46:05.182405</ts>
    <user>U2LAL86AY</user>
    <text>hmm yes, you don't get alias constructors for aliases with parametric values:
```

type alias FirstAlias =
    { name : String }


type alias SecondAlias a =
    { a | name : String }


constructAValueOfFirstAlias : String -&amp;gt; FirstAlias
constructAValueOfFirstAlias string =
    FirstAlias string 
         --- works as expected because you have in the global scope a (function/variable) named: FirstAlias : String -&amp;gt; FirstAlias 


constructAValueOfSecondAlias : String -&amp;gt; SecondAlias {}
constructAValueOfSecondAlias string =
    SecondAlias string 
         -- error "Cannot find variable `SecondAlias`"

```</text>
  </message>
  <message>
    <ts>2017-07-13T10:47:32.237753</ts>
    <user>U3ZNWN526</user>
    <text>Oh well yes, that does make sense, because SecondAlias is not a type, you would only be able to construct other types using SecondAlias.  But what I'm trying to do is define a second type and then use it!</text>
  </message>
  <message>
    <ts>2017-07-13T10:47:55.252104</ts>
    <user>U0J1M0F32</user>
    <text>```

type SecondAlias a =
    SecondAlias { a | name : String }

constructAValueOfSecondAlias : String -&amp;gt; SecondAlias {}
constructAValueOfSecondAlias string =
    SecondAlias { name = string } 
```</text>
  </message>
  <message>
    <ts>2017-07-13T10:48:31.275564</ts>
    <user>U5J0H2NS2</user>
    <text>But this works
```
type alias WithUserFields a = { a | name : String, email : String }
type alias UserFields = WithUserFields {}

change_name : String -&amp;gt; UserFields -&amp;gt; UserFields
change_name new_name user_fields = { user_fields | name = new_name }

get_user_fields : String -&amp;gt; String -&amp;gt; UserFields
get_user_fields name email =
    { name = name, email = email }
```</text>
  </message>
  <message>
    <ts>2017-07-13T10:49:24.309594</ts>
    <user>U3ZNWN526</user>
    <text>Yeah.  That seems right.  The problem I'm having is that for some reason... there's no `UserFields` constructor? (even though `UserFields` is just a plain old type alias)</text>
  </message>
  <message>
    <ts>2017-07-13T10:50:03.333910</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; all the structural problem i've been discussing started to surface in my company's app after it hit about 8000 lines of clojurescript (which have since doubled). I think none of the issues I present would be that apparent in smaller apps
&amp;gt; really the problems i'm talking grow exponentially with the size of your data model

we're at 150,000 lines of Elm code in production and these problems don't exist for us. I don't worry about the Elm Architecture scaling because my experience with it is that it's scaled better than any other front-end system I've ever worked on. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T10:51:23.383641</ts>
    <user>U5QJW0DDE</user>
    <text>Currently it is 15k lines. Do you find that either a) your data model lines up with your view tree much of the time or b) you pass the whole model state around often?</text>
  </message>
  <message>
    <ts>2017-07-13T10:51:32.389554</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U5QJW0DDE&gt; I get why you'd be worried about this, based on your experiences elsewhere, but the people saying "this is not a problem in Elm" are not making it up :wink:</text>
  </message>
  <message>
    <ts>2017-07-13T10:53:03.449259</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CL0AS3V&gt;  I still haven't seen any examples that demonstrate an Elm solution to, for example, the distant descendant drop down list I mentioned earlier</text>
  </message>
  <message>
    <ts>2017-07-13T10:53:38.471252</ts>
    <user>U0CL0AS3V</user>
    <text>can you link me to that? I'm catching up</text>
  </message>
  <message>
    <ts>2017-07-13T10:54:26.500964</ts>
    <user>U3ZNWN526</user>
    <text>Aha! &lt;https://groups.google.com/forum/#!topic/elm-discuss/DWrIVjwWzAU&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T10:54:51.517693</ts>
    <user>U5QJW0DDE</user>
    <text>If you have any control over the elm discuss mailing list, I posted my first message there that sums up the issue, with examples, but it is stuck in moderation </text>
  </message>
  <message>
    <ts>2017-07-13T10:55:03.524797</ts>
    <user>U5QJW0DDE</user>
    <text>For a few days</text>
  </message>
  <message>
    <ts>2017-07-13T10:55:20.535314</ts>
    <user>U0CL0AS3V</user>
    <text>I'm not a moderator there, sorry</text>
  </message>
  <message>
    <ts>2017-07-13T10:55:33.543826</ts>
    <user>U0CL0AS3V</user>
    <text>can you make it a gist and link to it?</text>
  </message>
  <message>
    <ts>2017-07-13T10:56:21.575839</ts>
    <user>U0CL0AS3V</user>
    <text>a) definitely not, b) definitely not :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T10:56:52.596208</ts>
    <user>U5QJW0DDE</user>
    <text>Unfortunately I made the mistake of not copying the message before I sent it to the lis so I will need to write it up again. I will ping you later if I have time. I'm in Europe and must leave work now. </text>
  </message>
  <message>
    <ts>2017-07-13T10:57:21.614937</ts>
    <user>U0S6BNVNY</user>
    <text>&lt;@U5QJW0DDE&gt; I have a `Store` that I pass around. Actually, views have a `query` function which, when given a store and any params they need from the slug, look up their data in the store.  That way I can pass a single bit of 'state' to represent my local database, which gets updated at the top level from websockets. That might help? This way I'm not sending the whole `Model`, just the 'data' bit</text>
  </message>
  <message>
    <ts>2017-07-13T10:57:33.623077</ts>
    <user>U0CL0AS3V</user>
    <text>ok, happy to talk more when you can!</text>
  </message>
  <message>
    <ts>2017-07-13T10:57:48.631987</ts>
    <user>U0CL0AS3V</user>
    <text>:wave:</text>
  </message>
  <message>
    <ts>2017-07-13T10:57:56.637255</ts>
    <user>U5QJW0DDE</user>
    <text>I frankly don't see how that is possible in TEA so I will send more thoughts your way later. </text>
  </message>
  <message>
    <ts>2017-07-13T10:58:12.647205</ts>
    <user>U0CL0AS3V</user>
    <text>:thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-13T10:59:21.694951</ts>
    <user>U0CL0AS3V</user>
    <text>it definitely requires a mindset shift coming from OO :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T10:59:27.698764</ts>
    <user>U0CL0AS3V</user>
    <text>it's all good! happy to talk</text>
  </message>
  <message>
    <ts>2017-07-13T11:03:07.846049</ts>
    <user>U5QJW0DDE</user>
    <text>Cool, I will ping you in a few hours. I have dinner plans. I keep hearing remarks from people here saying "it's not a problem in Elm" but yet no one can actually provide simple solutions to common problems in very large apps that my company builds. I watched your keynote conference talk where you discussed this a little bit, but did not come away from it feeling like the issue I'm referring to has an obvious solution in Elm. Will chat with you later!</text>
  </message>
  <message>
    <ts>2017-07-13T11:04:46.910616</ts>
    <user>U2LAL86AY</user>
    <text>what's so wrong about this function? :smile:
```

numberToFloat: number -&amp;gt; Float 
numberToFloat number = 
    if typeof number == Int then  -- is not valid elm - but not sure how to construct it.
        toFloat number 
    else 
        -- is already float, don't bother.
        number 
```
Why can't i find it anywhere in Basics or using elm search?</text>
  </message>
  <message>
    <ts>2017-07-13T11:05:04.922384</ts>
    <user>U0CL0AS3V</user>
    <text>sounds good!</text>
  </message>
  <message>
    <ts>2017-07-13T11:06:07.962329</ts>
    <user>U2LAL86AY</user>
    <text>`toFloat: Int -&amp;gt; Float` &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Basics#toFloat&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T11:06:38.981923</ts>
    <user>U2LAL86AY</user>
    <text>seems i can't have `toFloat: number -&amp;gt; Float`</text>
  </message>
  <message>
    <ts>2017-07-13T11:07:18.006480</ts>
    <user>U3ZNWN526</user>
    <text>I think you could actually just return number...</text>
  </message>
  <message>
    <ts>2017-07-13T11:07:42.021323</ts>
    <user>U3ZNWN526</user>
    <text>```
numberToFloat : number -&amp;gt; Float
numberToFloat n = n
```</text>
  </message>
  <message>
    <ts>2017-07-13T11:08:02.033717</ts>
    <user>U3ZNWN526</user>
    <text>Maybe not...</text>
  </message>
  <message>
    <ts>2017-07-13T11:08:25.047489</ts>
    <user>U3ZNWN526</user>
    <text>But certainly you could do something like multiply it by `1.0`</text>
  </message>
  <message>
    <ts>2017-07-13T11:09:41.095520</ts>
    <user>U4872964V</user>
    <text>toFloat could certainly be `number -&amp;gt; Float` but I’d be interested in seing your particular use case</text>
  </message>
  <message>
    <ts>2017-07-13T11:09:50.101215</ts>
    <user>U3ZNWN526</user>
    <text>Which may illustrate why the function doesn't exist - because in most cases it wouldn't be useful (that I can think of anyway)</text>
  </message>
  <message>
    <ts>2017-07-13T11:13:33.244769</ts>
    <user>U3ZNWN526</user>
    <text>My mistake!  I guess you *can't* multiply by 1.0 :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T11:15:04.301809</ts>
    <user>U3ZNWN526</user>
    <text>But I guess the thing is if you have a `number` you can just use it as a `Float` rather than converting it to a `Float`</text>
  </message>
  <message>
    <ts>2017-07-13T11:15:30.318695</ts>
    <user>U3ZNWN526</user>
    <text>(i.e. it basically is a Float already - for practical purposes)</text>
  </message>
  <message>
    <ts>2017-07-13T11:15:52.332296</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U4872964V&gt; yeah, i want to build another abstraction on top of Bounded library. So will be `Izer1` defined as a number between `0 and 1` -- `Interval Zero 1` 
and i defined this as:
```
type Izer1
    = Izer1 (Bounded Float)
```
Where `Bounded` comes form the bounded library.  And i want to build another function over `set`. like this:
```
-- set : number -&amp;gt; Izer1 -&amp;gt; Izer1
-- set value (Izer1 bounded) =
--     BoundedNumber.set value bounded
--         |&amp;gt; Izer1
```
now this doesn't work - because 
```
The 1st argument to function `set` is causing a mismatch.

Function `set` is expecting the 1st argument to be:

comparable

But it is:

number
```
Then i build it like so:
```
set : number -&amp;gt; Izer1 -&amp;gt; Izer1
set value (Izer1 bounded) =
    BoundedNumber.set (toFloat value) bounded -- here i added a toFloat - to make it comparable - because Float is considered comparable but number is not considered comparable. Which is kind of crazy because i think it should...
        |&amp;gt; Izer1
```
then the error is:
```
	
The argument to function `toFloat` is causing a mismatch.

Function `toFloat` is expecting the argument to be:

Int

But it is:

number
```</text>
  </message>
  <message>
    <ts>2017-07-13T11:16:32.357991</ts>
    <user>U3ZNWN526</user>
    <text>Oh wait, I was trying to multiple an `Int` by 1.0.  Haha.  You *can* multiply a `number` by 1.0 to get a `Float` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T11:17:22.389789</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U3ZNWN526&gt; check out this: &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Basics#*&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T11:17:33.396737</ts>
    <user>U4872964V</user>
    <text>&lt;@U2LAL86AY&gt; why not just use Float everywhere?</text>
  </message>
  <message>
    <ts>2017-07-13T11:17:40.401750</ts>
    <user>U3SJEDR96</user>
    <text>`number` not being `comparable` is a bug - &lt;https://github.com/elm-lang/elm-compiler/issues/1581&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:04.416870</ts>
    <user>U2LAL86AY</user>
    <text>aaa that makes sense. and that creates this problem i guess.</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:15.424099</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; `1.0` is a Float, so `number * Float` means that the `number` is also a Float :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:54.448569</ts>
    <user>U5QJW0DDE</user>
    <text>I'm not coming from OO but from clojurescript which has had a UI pattern in years past that resembles TEA, but has been largely replaced due to the problems I will explain later. </text>
  </message>
  <message>
    <ts>2017-07-13T11:19:32.472476</ts>
    <user>U3SJEDR96</user>
    <text>and `toFloat : number -&amp;gt; Float` is also tracked somewhere, iirc</text>
  </message>
  <message>
    <ts>2017-07-13T11:19:48.482332</ts>
    <user>U0CL0AS3V</user>
    <text>it's also been fixed &lt;https://github.com/elm-lang/elm-compiler/commit/5fe9bb9602163927295a6b37a64fd47f982d502a&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T11:19:54.486706</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/core/issues/721&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T11:19:54.486819</ts>
    <user>U0CL0AS3V</user>
    <text>fix will be in 0.19</text>
  </message>
  <message>
    <ts>2017-07-13T11:19:55.487484</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U4872964V&gt; i want to use that bounded library - which expects `comparable` - but i guess i'll write my own version of that which expects `number` and everything will work.</text>
  </message>
  <message>
    <ts>2017-07-13T11:20:17.501530</ts>
    <user>U4872964V</user>
    <text>But Float is comparable, so why not just use Float instead of number</text>
  </message>
  <message>
    <ts>2017-07-13T11:20:20.503560</ts>
    <user>U0CL0AS3V</user>
    <text>cool :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T11:23:49.637539</ts>
    <user>U4872964V</user>
    <text>exactly, but the selection of data you do to put in a page does not get bigger just because your model gets bigger</text>
  </message>
  <message>
    <ts>2017-07-13T11:24:29.663490</ts>
    <user>U2LAL86AY</user>
    <text>ah yes, because my users will have to do: `set (toFloat someInt ) ...` instead of `set someInt ...` - `number` will eliminate that conversion each time you call `set` function and you have an int somewhere.. is less overhead - to not bother if is an int or a float - since form a functionality perspective doesn't matter.</text>
  </message>
  <message>
    <ts>2017-07-13T11:24:51.677919</ts>
    <user>U4Z4NEUQG</user>
    <text>Is there any reference for the JS API of elm?</text>
  </message>
  <message>
    <ts>2017-07-13T11:25:06.688054</ts>
    <user>U4Z4NEUQG</user>
    <text>Like the `fullscreen()` method of modules.</text>
  </message>
  <message>
    <ts>2017-07-13T11:25:18.695674</ts>
    <user>U4872964V</user>
    <text>but there are no ints between 0 and 1 :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T11:26:03.724578</ts>
    <user>U4872964V</user>
    <text>i would go with Float anyway, calling toFloat is hardly a problem for the user</text>
  </message>
  <message>
    <ts>2017-07-13T11:27:12.768557</ts>
    <user>U2LAL86AY</user>
    <text>0 and 1 is included in that interval - maybe is not that bad but i would like to not have all this toFLoats everywere if they don't add anything useful..</text>
  </message>
  <message>
    <ts>2017-07-13T11:27:14.769842</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; you can do `set 0.1` and even `set 1` for a `Bounded Float`</text>
  </message>
  <message>
    <ts>2017-07-13T11:28:42.826850</ts>
    <user>U3ZNWN526</user>
    <text>Or, if you really want users to be able to pass in `Int` variables, then you can accept a `number` and immediately convert it to a Float by multiplying it by 1.0 :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T11:28:45.828889</ts>
    <user>U3SJEDR96</user>
    <text>since `1 : number`, not `1 : Int`</text>
  </message>
  <message>
    <ts>2017-07-13T11:34:40.053159</ts>
    <user>U2LAL86AY</user>
    <text>hmm you mean like this:
`(1.0 * value)`
```
The right side of (*) is causing a type mismatch.

(*) is expecting the right side to be a:

Float

But the right side is:

number

```
pff this creates a lot of trouble than i need right now  - i will go with the float for now as &lt;@U4872964V&gt; mentioned - unthil that `number is not comparable` bug is fixed.</text>
  </message>
  <message>
    <ts>2017-07-13T12:47:06.642067</ts>
    <user>U3LUC6SNS</user>
    <text>Does elm-tools/parser have a way of displaying the unparsed portion of the input of successful parse?</text>
  </message>
  <message>
    <ts>2017-07-13T12:55:31.923303</ts>
    <user>U4872964V</user>
    <text>&lt;@U3LUC6SNS&gt; no, but you can perhaps trick it by pipelineing it with a fail parser to get the position</text>
  </message>
  <message>
    <ts>2017-07-13T12:58:27.022802</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U4872964V&gt;, thanks!</text>
  </message>
  <message>
    <ts>2017-07-13T12:59:51.071754</ts>
    <user>U1WJH1JU9</user>
    <text>I am trying to do some JSON decoding for a complex type that sometimes comes back null. When I get the types to match up, I only get back a Nothing type even when there is something there. Does anyone know what I am doing wrong?</text>
  </message>
  <message>
    <ts>2017-07-13T13:01:00.112466</ts>
    <user>U1WJH1JU9</user>
    <text>This is the code: ```|&amp;gt; Json.Decode.Pipeline.optional "Feature" (Json.Decode.maybe decodeFeature) Nothing```</text>
  </message>
  <message>
    <ts>2017-07-13T13:01:27.128048</ts>
    <user>U4872964V</user>
    <text>and the json is?</text>
  </message>
  <message>
    <ts>2017-07-13T13:02:02.148225</ts>
    <user>U1WJH1JU9</user>
    <text>``` { rallyAPIMajor : String
    , rallyAPIMinor : String
    , ref : String
    , refObjectUUID : String
    , objectVersion : String
    , refObjectName : String
    , createdAt : String
    , severity : String
    , changesets : ResultChangesets
    , description : String
    , formattedID : String
    , name : String
    , owner : ResultOwner
    , project : ResultProject
    , rtype : String
    , c_DefectSource : String
    , feature : Maybe ResultFeature
    }```</text>
  </message>
  <message>
    <ts>2017-07-13T13:02:18.157959</ts>
    <user>U4872964V</user>
    <text>so, you have “Feature” instead of “feature”</text>
  </message>
  <message>
    <ts>2017-07-13T13:02:47.174982</ts>
    <user>U1WJH1JU9</user>
    <text>That is for the record. But the actual JSON has it with the capital.</text>
  </message>
  <message>
    <ts>2017-07-13T13:04:05.219080</ts>
    <user>U4872964V</user>
    <text>well, if the decodeFeature fails, you’d get Nothing</text>
  </message>
  <message>
    <ts>2017-07-13T13:04:33.234552</ts>
    <user>U1WJH1JU9</user>
    <text>I agree. But even when it succeeds I get Nothing. That is the issue that I am having.</text>
  </message>
  <message>
    <ts>2017-07-13T13:04:44.240334</ts>
    <user>U4872964V</user>
    <text>How do you know that it succeeds?</text>
  </message>
  <message>
    <ts>2017-07-13T13:05:11.255316</ts>
    <user>U1WJH1JU9</user>
    <text>Because I am logging the JSON that is coming back and can see that it has the appropriate field.</text>
  </message>
  <message>
    <ts>2017-07-13T13:05:30.265448</ts>
    <user>U4872964V</user>
    <text>ok, so how does it look, and how does the decoder look?</text>
  </message>
  <message>
    <ts>2017-07-13T13:06:18.292145</ts>
    <user>U1WJH1JU9</user>
    <text>The JSON looks just like what I pasted above when it succeeds. When it fails the Feature field has a null value.</text>
  </message>
  <message>
    <ts>2017-07-13T13:07:14.322182</ts>
    <user>U4872964V</user>
    <text>No that was the record, how does the json look, and how does the decoder look? If you get Nothing, that means your decoder failed</text>
  </message>
  <message>
    <ts>2017-07-13T13:08:57.376136</ts>
    <user>U4872964V</user>
    <text>maybe you want `Json.Decode.map Just decodeFeature` instead of `Json.Decode.maybe decodeFeature`</text>
  </message>
  <message>
    <ts>2017-07-13T13:09:27.392631</ts>
    <user>U17MHJ12N</user>
    <text>You know we typically refer to a component's state as the Model, well has anyone considered calling is State and also having something else called Props (a la React). Seems like a very useful distinction to me to separate stuff I own and should be managing from stuff that is handed to me by an ancestor.</text>
  </message>
  <message>
    <ts>2017-07-13T13:09:49.404425</ts>
    <user>U4872964V</user>
    <text>Sometimes we call it State</text>
  </message>
  <message>
    <ts>2017-07-13T13:10:20.421428</ts>
    <user>U0FP80EKB</user>
    <text>I generally only have `Model` at the top level. Modules that define records I try to use something more domain-specific than `Model`</text>
  </message>
  <message>
    <ts>2017-07-13T13:10:37.430676</ts>
    <user>U17MHJ12N</user>
    <text>more interested in the problem of ownership</text>
  </message>
  <message>
    <ts>2017-07-13T13:10:59.442621</ts>
    <user>U17MHJ12N</user>
    <text>I think replacing 
`update: Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)`</text>
  </message>
  <message>
    <ts>2017-07-13T13:11:04.445495</ts>
    <user>U17MHJ12N</user>
    <text>with</text>
  </message>
  <message>
    <ts>2017-07-13T13:11:22.455224</ts>
    <user>U17MHJ12N</user>
    <text>`update Msg -&amp;gt; Props -&amp;gt; State -&amp;gt; (Model, Cmd Msg)`</text>
  </message>
  <message>
    <ts>2017-07-13T13:11:25.456929</ts>
    <user>U17MHJ12N</user>
    <text>might be a good thing</text>
  </message>
  <message>
    <ts>2017-07-13T13:11:35.462063</ts>
    <user>U4872964V</user>
    <text>where would the Props come from?</text>
  </message>
  <message>
    <ts>2017-07-13T13:11:48.468912</ts>
    <user>U17MHJ12N</user>
    <text>above</text>
  </message>
  <message>
    <ts>2017-07-13T13:11:56.473024</ts>
    <user>U4872964V</user>
    <text>what do you mean above?</text>
  </message>
  <message>
    <ts>2017-07-13T13:12:00.474689</ts>
    <user>U0FP80EKB</user>
    <text>yeah.</text>
  </message>
  <message>
    <ts>2017-07-13T13:12:02.476239</ts>
    <user>U0FP80EKB</user>
    <text>above is Elm</text>
  </message>
  <message>
    <ts>2017-07-13T13:12:17.483845</ts>
    <user>U0FP80EKB</user>
    <text>`Model` contains all the data</text>
  </message>
  <message>
    <ts>2017-07-13T13:12:22.486949</ts>
    <user>U0FP80EKB</user>
    <text>that’s your application state</text>
  </message>
  <message>
    <ts>2017-07-13T13:12:26.488902</ts>
    <user>U17MHJ12N</user>
    <text>point being it is then clear that it is not for you to control at your level, it is for another "component" to control above you</text>
  </message>
  <message>
    <ts>2017-07-13T13:12:41.496768</ts>
    <user>U0FP80EKB</user>
    <text>Oh, I don’t build that way. I’ll bow out of the discussion. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T13:12:58.505818</ts>
    <user>U17MHJ12N</user>
    <text>No I mean in a hierarchy where you have many levels.</text>
  </message>
  <message>
    <ts>2017-07-13T13:13:02.508325</ts>
    <user>U4872964V</user>
    <text>This is a common pattern, but it usually looks something like this:
```
update : Config -&amp;gt; msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)
```</text>
  </message>
  <message>
    <ts>2017-07-13T13:13:03.508836</ts>
    <user>U1WJH1JU9</user>
    <text>You were right, my JSON was inconsistent with Decoder. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-13T13:13:52.535412</ts>
    <user>U17MHJ12N</user>
    <text>Yes I'm just wandering whether anyone had borrowed the React vernacular. Thought it might help other people get the idea more easily.</text>
  </message>
  <message>
    <ts>2017-07-13T13:14:28.554485</ts>
    <user>U4872964V</user>
    <text>I’m not sure we want to do that</text>
  </message>
  <message>
    <ts>2017-07-13T13:14:34.557860</ts>
    <user>U4872964V</user>
    <text>Elm is not React</text>
  </message>
  <message>
    <ts>2017-07-13T13:14:47.564785</ts>
    <user>U2U94G0QG</user>
    <text>your update function is more analogous to Redux not React anyway</text>
  </message>
  <message>
    <ts>2017-07-13T13:15:05.574693</ts>
    <user>U17MHJ12N</user>
    <text>it is architecturally extremely similar to certain flavours of React</text>
  </message>
  <message>
    <ts>2017-07-13T13:15:21.583551</ts>
    <user>U4872964V</user>
    <text>So, thinking in terms of components and ownership often leads to complexity</text>
  </message>
  <message>
    <ts>2017-07-13T13:16:01.605442</ts>
    <user>U4872964V</user>
    <text>it’s much easier to think in terms of functions. there is only one update function that has a specific form, all other functions are free to be whatever you think they should be</text>
  </message>
  <message>
    <ts>2017-07-13T13:16:24.618068</ts>
    <user>U4872964V</user>
    <text>so, sometimes you don’t need to return a `Cmd`, then you don’t</text>
  </message>
  <message>
    <ts>2017-07-13T13:16:40.626551</ts>
    <user>U4872964V</user>
    <text>sometimes you only need to pass part of the `Model` then you do that</text>
  </message>
  <message>
    <ts>2017-07-13T13:16:41.627300</ts>
    <user>U17MHJ12N</user>
    <text>but in a large app there are many update functions. Thinking about ownership is critical.</text>
  </message>
  <message>
    <ts>2017-07-13T13:17:08.641820</ts>
    <user>U4872964V</user>
    <text>a function owns its output, that’s all</text>
  </message>
  <message>
    <ts>2017-07-13T13:17:11.643371</ts>
    <user>U17MHJ12N</user>
    <text>there is still a perfectly valid concept of encapsulation in elm, that's all I'm talking about here</text>
  </message>
  <message>
    <ts>2017-07-13T13:17:27.652331</ts>
    <user>U4872964V</user>
    <text>yes, but not as react components necessarily</text>
  </message>
  <message>
    <ts>2017-07-13T13:17:32.655029</ts>
    <user>U2U94G0QG</user>
    <text>Not really, there is just one update function composed of other functions - like in a Flux architecture you'll have a reducer composed of other reducers</text>
  </message>
  <message>
    <ts>2017-07-13T13:18:06.673388</ts>
    <user>U17MHJ12N</user>
    <text>each reducer is an update function, so there is not just one.</text>
  </message>
  <message>
    <ts>2017-07-13T13:18:19.680252</ts>
    <user>U4872964V</user>
    <text>so, the caller of the sub-update function determines what to do with the result of the function, the function does not own anything else than its output</text>
  </message>
  <message>
    <ts>2017-07-13T13:18:50.697460</ts>
    <user>U4872964V</user>
    <text>&lt;@U17MHJ12N&gt; but in Elm there is only one relevant update function, the on that is called by the Elm runtime via the Program</text>
  </message>
  <message>
    <ts>2017-07-13T13:19:03.704309</ts>
    <user>U4872964V</user>
    <text>all other functions are free form</text>
  </message>
  <message>
    <ts>2017-07-13T13:19:20.713805</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U17MHJ12N&gt; if you’re doing something in React style then you wouldn’t be passing in Props to an `update`</text>
  </message>
  <message>
    <ts>2017-07-13T13:19:40.724713</ts>
    <user>U1WJH1JU9</user>
    <text>&lt;@U4872964V&gt; Thanks.</text>
  </message>
  <message>
    <ts>2017-07-13T13:19:43.726007</ts>
    <user>U17MHJ12N</user>
    <text>it applies equally to the view actually.</text>
  </message>
  <message>
    <ts>2017-07-13T13:19:44.726759</ts>
    <user>U4872964V</user>
    <text>if you want to do something like `combineReducers` you can do that of course, but you can structure it completely differntly if you want</text>
  </message>
  <message>
    <ts>2017-07-13T13:20:26.749804</ts>
    <user>U4872964V</user>
    <text>Elm is basically agnostic about how you do that</text>
  </message>
  <message>
    <ts>2017-07-13T13:21:03.770545</ts>
    <user>U17MHJ12N</user>
    <text>The Elm Architecture clearly describes nested update function however, and that is what I am referring to.</text>
  </message>
  <message>
    <ts>2017-07-13T13:21:46.793648</ts>
    <user>U4872964V</user>
    <text>maybe some people do, but the basic Elm Architecture does not, it only specifies one update function</text>
  </message>
  <message>
    <ts>2017-07-13T13:22:39.823419</ts>
    <user>U17MHJ12N</user>
    <text>it's a ubiquitous pattern - I think we know what I am talking about.</text>
  </message>
  <message>
    <ts>2017-07-13T13:23:27.850324</ts>
    <user>U4872964V</user>
    <text>making helper functions is indeed ubiquitous but the actual form of them varies a great deal actually</text>
  </message>
  <message>
    <ts>2017-07-13T13:23:58.867430</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; Yes I'm just wandering whether anyone had borrowed the React vernacular. Thought it might help other people get the idea more easily.

yeah personally I would avoid doing this like the plague :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T13:24:20.879218</ts>
    <user>U0CL0AS3V</user>
    <text>I've observed that if people know a little bit of React, it's easier for them to learn Elm than people who know zero React</text>
  </message>
  <message>
    <ts>2017-07-13T13:24:40.890406</ts>
    <user>U0CL0AS3V</user>
    <text>I've also observed that people who know React really well have a *much* harder time than people who know zero React</text>
  </message>
  <message>
    <ts>2017-07-13T13:24:43.892132</ts>
    <user>U0CL0AS3V</user>
    <text>it's a weird curve</text>
  </message>
  <message>
    <ts>2017-07-13T13:25:25.916272</ts>
    <user>U0CL0AS3V</user>
    <text>trying to learn Elm concepts in terms of React concepts, especially when it comes to scaling, is the cause of more learning-related pain than anything else I can think of</text>
  </message>
  <message>
    <ts>2017-07-13T13:26:16.944871</ts>
    <user>U0CL0AS3V</user>
    <text>for example</text>
  </message>
  <message>
    <ts>2017-07-13T13:26:19.946282</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; but in a large app there are many update functions. Thinking about ownership is critical.</text>
  </message>
  <message>
    <ts>2017-07-13T13:26:27.950900</ts>
    <user>U0CL0AS3V</user>
    <text>I would disagree with this statement 100% :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-07-13T13:26:38.957101</ts>
    <user>U23SA861Y</user>
    <text>so you're saying react is kinda like LSD. a little bit will let you see things you didn't realize before, but too much will leave you as a gibbering mess on the floor.</text>
  </message>
  <message>
    <ts>2017-07-13T13:26:44.960493</ts>
    <user>U0CL0AS3V</user>
    <text>hahaha</text>
  </message>
  <message>
    <ts>2017-07-13T13:26:47.962149</ts>
    <user>U0CL0AS3V</user>
    <text>I wouldn't go that far :wink:</text>
  </message>
  <message>
    <ts>2017-07-13T13:26:49.963327</ts>
    <user>U0CL0AS3V</user>
    <text>I think it's more that</text>
  </message>
  <message>
    <ts>2017-07-13T13:27:03.970607</ts>
    <user>U4872964V</user>
    <text>Yes, it’s a pure functional language, this means that a function owns exactly one thing: its output</text>
  </message>
  <message>
    <ts>2017-07-13T13:27:09.974577</ts>
    <user>U0CL0AS3V</user>
    <text>understanding the idea of a virtual DOM instead of mutating DOM nodes is something you need to understand</text>
  </message>
  <message>
    <ts>2017-07-13T13:27:18.979424</ts>
    <user>U0CL0AS3V</user>
    <text>and if you've done some of that in React, it's one less thing to get used to</text>
  </message>
  <message>
    <ts>2017-07-13T13:27:32.986732</ts>
    <user>U0CL0AS3V</user>
    <text>basically everything else beyond that is different :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-07-13T13:27:59.001721</ts>
    <user>U0CL0AS3V</user>
    <text>but it intuitively seems like it shouldn't be; hence the problems</text>
  </message>
  <message>
    <ts>2017-07-13T13:28:03.004115</ts>
    <user>U17MHJ12N</user>
    <text>why would you disagree with that statement. Having got to about 30,000 lines now, most of the problems we have had come from failure to properly think about where data belongs (having it in two places etc)</text>
  </message>
  <message>
    <ts>2017-07-13T13:28:42.026034</ts>
    <user>U17MHJ12N</user>
    <text>also I am coming from a specific style of react which is actually very similar to the elm architecture in spirit.</text>
  </message>
  <message>
    <ts>2017-07-13T13:28:53.032455</ts>
    <user>U0CL0AS3V</user>
    <text>I think that's the most dangerous of all :grimacing:</text>
  </message>
  <message>
    <ts>2017-07-13T13:29:04.038669</ts>
    <user>U4872964V</user>
    <text>The data belongs in the Model, and having data in two places in the Model for the same data is indeed problematic</text>
  </message>
  <message>
    <ts>2017-07-13T13:29:28.052057</ts>
    <user>U17MHJ12N</user>
    <text>exactly and if you don't think about ownership, that's what happens</text>
  </message>
  <message>
    <ts>2017-07-13T13:29:28.052060</ts>
    <user>U0CL0AS3V</user>
    <text>it's the last tiny change where you say "we will literally never have local mutable state" instead of "we will have it rarely" that leads to the biggest differences</text>
  </message>
  <message>
    <ts>2017-07-13T13:29:52.066137</ts>
    <user>U4872964V</user>
    <text>&lt;@U17MHJ12N&gt; i don’t see what ownership has to do with that</text>
  </message>
  <message>
    <ts>2017-07-13T13:29:53.066496</ts>
    <user>U0CL0AS3V</user>
    <text>oh, so you're saying ownership as a synonym for data duplication? :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-13T13:30:23.084364</ts>
    <user>U0CL0AS3V</user>
    <text>as in "where in the model the data lives, with the implicit expectation that it should only live in one place"</text>
  </message>
  <message>
    <ts>2017-07-13T13:30:30.088860</ts>
    <user>U0CL0AS3V</user>
    <text>(because I definitely agree with that)</text>
  </message>
  <message>
    <ts>2017-07-13T13:30:31.089114</ts>
    <user>U17MHJ12N</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-13T13:30:33.090442</ts>
    <user>U0CL0AS3V</user>
    <text>got it</text>
  </message>
  <message>
    <ts>2017-07-13T13:30:46.098400</ts>
    <user>U0CL0AS3V</user>
    <text>ok, never mind then! we agree about that after all :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T13:30:47.098663</ts>
    <user>U17MHJ12N</user>
    <text>actually I wrote these problems up &lt;https://hackernoon.com/the-importance-of-state-ownership-in-elm-72f711ceb244&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T13:30:58.105136</ts>
    <user>U17MHJ12N</user>
    <text>but I no longer agree with my own conclusions!</text>
  </message>
  <message>
    <ts>2017-07-13T13:31:31.124692</ts>
    <user>U17MHJ12N</user>
    <text>this is how I came to the idea of hijacking Props as a concept</text>
  </message>
  <message>
    <ts>2017-07-13T13:31:33.125706</ts>
    <user>U0CL0AS3V</user>
    <text>:smile:</text>
  </message>
  <message>
    <ts>2017-07-13T13:31:46.133121</ts>
    <user>U4872964V</user>
    <text>thinking in terms of components is a sure way to get the structure headache for sure</text>
  </message>
  <message>
    <ts>2017-07-13T13:31:53.137368</ts>
    <user>U0CL0AS3V</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-13T13:32:23.154718</ts>
    <user>U4872964V</user>
    <text>thinking in terms of data is what I try to do, then “ownership” becomes a moot point. Data is data.</text>
  </message>
  <message>
    <ts>2017-07-13T13:32:29.157975</ts>
    <user>U0CL0AS3V</user>
    <text>I've been trying to come up with a concise way to explain how I think about views</text>
  </message>
  <message>
    <ts>2017-07-13T13:32:31.159329</ts>
    <user>U0CL0AS3V</user>
    <text>it's something like</text>
  </message>
  <message>
    <ts>2017-07-13T13:33:19.186464</ts>
    <user>U0CL0AS3V</user>
    <text>"start with writing the DOM I want, then if that needs state data, make it a function that accepts arguments for the data it needs to render, then figure out how best to model that data"</text>
  </message>
  <message>
    <ts>2017-07-13T13:33:43.200701</ts>
    <user>U0CL0AS3V</user>
    <text>the important part being that there's no recipe for the "model the data" part</text>
  </message>
  <message>
    <ts>2017-07-13T13:33:46.202445</ts>
    <user>U0CL0AS3V</user>
    <text>that's where all the thinking happens</text>
  </message>
  <message>
    <ts>2017-07-13T13:33:55.207479</ts>
    <user>U0CL0AS3V</user>
    <text>it's really easy to be like "I want the DOM to end up like this mockup"</text>
  </message>
  <message>
    <ts>2017-07-13T13:34:11.216477</ts>
    <user>U0CL0AS3V</user>
    <text>and then it's also really easy to say "here are the pieces of information my function must accept in order to render those"</text>
  </message>
  <message>
    <ts>2017-07-13T13:34:20.221973</ts>
    <user>U0CL0AS3V</user>
    <text>and then figuring out where that data ought to live...there is no one-size-fits-all answer</text>
  </message>
  <message>
    <ts>2017-07-13T13:34:29.227248</ts>
    <user>U23SA861Y</user>
    <text>what is the addage, "show me your code and I will have no clue what you're doing, but show me your data and I can deduce your code"</text>
  </message>
  <message>
    <ts>2017-07-13T13:34:34.229779</ts>
    <user>U23SA861Y</user>
    <text>or seomthing like that</text>
  </message>
  <message>
    <ts>2017-07-13T13:34:42.234268</ts>
    <user>U0CL0AS3V</user>
    <text>never heard that one haha</text>
  </message>
  <message>
    <ts>2017-07-13T13:34:57.242543</ts>
    <user>U2U94G0QG</user>
    <text>show me your data... :smirk:</text>
  </message>
  <message>
    <ts>2017-07-13T13:35:07.248231</ts>
    <user>U4872964V</user>
    <text>Yes, my experience is that when I run into trouble I have modelled my data incorrectly</text>
  </message>
  <message>
    <ts>2017-07-13T13:35:51.273231</ts>
    <user>U17MHJ12N</user>
    <text>I agree. The data modelling is the most important thing. But I maintain that there is a case for components and there is a case for encapsulation and that _can_ lead to duplication unless you are careful. In that cicumstance you have to separate the data the component is responsible for from the data it is not.</text>
  </message>
  <message>
    <ts>2017-07-13T13:37:51.339656</ts>
    <user>U4872964V</user>
    <text>I guess there is if you try to fit all sub-update functions into the same form.</text>
  </message>
  <message>
    <ts>2017-07-13T13:38:04.347072</ts>
    <user>U4872964V</user>
    <text>but the point is that you don’t have to</text>
  </message>
  <message>
    <ts>2017-07-13T13:38:45.369911</ts>
    <user>U23SA861Y</user>
    <text>```
Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won't usually need your flowcharts; they'll be obvious.
  --Fred Brooks
```</text>
  </message>
  <message>
    <ts>2017-07-13T13:38:56.375808</ts>
    <user>U4872964V</user>
    <text>I have update functions returning three separate pieces of data in some cases</text>
  </message>
  <message>
    <ts>2017-07-13T13:39:12.385025</ts>
    <user>U17MHJ12N</user>
    <text>I understand that</text>
  </message>
  <message>
    <ts>2017-07-13T13:39:27.393685</ts>
    <user>U4872964V</user>
    <text>so in that sense, they “own” that data I suppose</text>
  </message>
  <message>
    <ts>2017-07-13T13:39:31.395826</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; But I maintain that there is a case for components

I maintain that there isn't, so we'll probably have to agree to disagree on that one :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T13:39:59.411216</ts>
    <user>U0CL0AS3V</user>
    <text>but hey, if you're happy with how your code works, far be it for me to tell you to change!</text>
  </message>
  <message>
    <ts>2017-07-13T13:40:27.427258</ts>
    <user>U17MHJ12N</user>
    <text>I guess it depends what you mean by a component. There are things that I can't see working any other way.</text>
  </message>
  <message>
    <ts>2017-07-13T13:40:40.435360</ts>
    <user>U4872964V</user>
    <text>components is the “obvious” way to do it, so it’s not like we haven’t tried that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T13:41:07.450337</ts>
    <user>U0CL0AS3V</user>
    <text>I mean it in the OO sense...I talked about it more in my Elm Europe keynote - will share that when they're done editing it!</text>
  </message>
  <message>
    <ts>2017-07-13T13:41:44.471713</ts>
    <user>U17MHJ12N</user>
    <text>I just mean module with its own model, view update subs etc</text>
  </message>
  <message>
    <ts>2017-07-13T13:42:13.488675</ts>
    <user>U4872964V</user>
    <text>yeah, that’s what i mean too, and sometimes that’s the best way to model it for sure</text>
  </message>
  <message>
    <ts>2017-07-13T13:43:07.519289</ts>
    <user>U4872964V</user>
    <text>but it’s almost a component by accident, not by necessity. it just happens that the data is so cleanly separated so that it makes sense to group it like that</text>
  </message>
  <message>
    <ts>2017-07-13T13:45:38.605570</ts>
    <user>U4872964V</user>
    <text>but it’s not a component in the sense that it’s a generic thing that can be instantiated multiple times etc. That leads to headaches like having a “button” component in your code that has some kind of state that you’re going to handle etc.</text>
  </message>
  <message>
    <ts>2017-07-13T13:46:05.621119</ts>
    <user>U17MHJ12N</user>
    <text>that's exactly the scenario when you do need a component</text>
  </message>
  <message>
    <ts>2017-07-13T13:46:14.626645</ts>
    <user>U17MHJ12N</user>
    <text>when you want to reuse it</text>
  </message>
  <message>
    <ts>2017-07-13T13:46:29.635312</ts>
    <user>U17MHJ12N</user>
    <text>or just a view fragment - of course I get it</text>
  </message>
  <message>
    <ts>2017-07-13T13:46:30.635534</ts>
    <user>U4872964V</user>
    <text>that’s when you need a reusable function :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T13:46:39.640952</ts>
    <user>U4872964V</user>
    <text>functions don’t have state</text>
  </message>
  <message>
    <ts>2017-07-13T13:48:23.700030</ts>
    <user>U17MHJ12N</user>
    <text>I understand the pros and cons of components. Sometimes you need them. It was never really my point.</text>
  </message>
  <message>
    <ts>2017-07-13T13:50:13.763106</ts>
    <user>U4872964V</user>
    <text>ok :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T13:51:42.814850</ts>
    <user>U17MHJ12N</user>
    <text>Sorry that sounded a bit grumpy :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T13:52:43.849321</ts>
    <user>U4872964V</user>
    <text>reading your post there, it’s exactly that problem (cascade of updates) that thinking in terms of components leads to. If you instead think in terms of functions, input and output, and narrow the types to be exactly the data that the function needs and returns exactly the data that the function should produce, then that problem goes away, in my experience</text>
  </message>
  <message>
    <ts>2017-07-13T13:54:01.894086</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; module with its own model, view update subs etc

I think calling this a "component" encourages reaching for it often, instead of it being the technique of last resort, and I think using it as a last resort is for sure the right way to go</text>
  </message>
  <message>
    <ts>2017-07-13T13:54:24.907116</ts>
    <user>U0CL0AS3V</user>
    <text>agree w/ &lt;@U4872964V&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T13:55:16.936834</ts>
    <user>U0CL0AS3V</user>
    <text>the way I think of components is the way designers do</text>
  </message>
  <message>
    <ts>2017-07-13T13:55:30.944706</ts>
    <user>U0CL0AS3V</user>
    <text>if a designer says to me "let's make a nice reusable dropdown component that looks like this"</text>
  </message>
  <message>
    <ts>2017-07-13T13:56:00.962702</ts>
    <user>U0CL0AS3V</user>
    <text>I don't think "the designer is communicating to me that it's important for me to a separate model, a view, and an update for this"</text>
  </message>
  <message>
    <ts>2017-07-13T13:56:20.974451</ts>
    <user>U0CL0AS3V</user>
    <text>I think "the designer is communicating to me that I should have a dropdown that looks and works a certain way"</text>
  </message>
  <message>
    <ts>2017-07-13T13:56:30.980027</ts>
    <user>U0CL0AS3V</user>
    <text>and my next task is to figure out the right API for that</text>
  </message>
  <message>
    <ts>2017-07-13T13:56:42.986648</ts>
    <user>U0CL0AS3V</user>
    <text>so to me, the word "component" just means "a part of a UI"</text>
  </message>
  <message>
    <ts>2017-07-13T13:56:45.988671</ts>
    <user>U0CL0AS3V</user>
    <text>and it's not saying anything about the API</text>
  </message>
  <message>
    <ts>2017-07-13T13:56:56.994675</ts>
    <user>U0CL0AS3V</user>
    <text>or the internal design from a code perspective</text>
  </message>
  <message>
    <ts>2017-07-13T13:57:49.025601</ts>
    <user>U17MHJ12N</user>
    <text>yes I do appreciate that but I think we have derailed a little bit. I am really concerned about the difficulties that ensue when you do (appropriately) have a component. This does not mean I always use them or that I don't appreciate the splendour of the simple function,</text>
  </message>
  <message>
    <ts>2017-07-13T13:58:25.046139</ts>
    <user>U4872964V</user>
    <text>Well, you’d only have a component when it doesn’t lead to difficulties :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T13:58:43.056785</ts>
    <user>U0CL0AS3V</user>
    <text>exactly! :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T13:58:45.057796</ts>
    <user>U0FP80EKB</user>
    <text>Perhaps switching the discussion from “here is something we need to worry about” to “here is a specific pain point I’m running into, and this is the way that I can see to solve it. Does anyone else have ideas on how to solve it differently?”</text>
  </message>
  <message>
    <ts>2017-07-13T13:59:03.068119</ts>
    <user>U0FP80EKB</user>
    <text>It is easy to run into the “I don’t know a different way, therefore there isn’t, so we have to work on my proposed solution”</text>
  </message>
  <message>
    <ts>2017-07-13T13:59:11.072848</ts>
    <user>U0FP80EKB</user>
    <text>(but I’m staying out of this conversion) :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T13:59:13.074218</ts>
    <user>U0CL0AS3V</user>
    <text>fair point &lt;@U0FP80EKB&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T13:59:51.097311</ts>
    <user>U0FP80EKB</user>
    <text>Everyone is right when discussing solutions first. Everyone is wrong when discussions solutions first.</text>
  </message>
  <message>
    <ts>2017-07-13T14:00:28.120605</ts>
    <user>U4872964V</user>
    <text>Sure, so looking at the post, we have a `pageOne` component that also needs to access and update the `user` data</text>
  </message>
  <message>
    <ts>2017-07-13T14:01:55.172286</ts>
    <user>U17MHJ12N</user>
    <text>quite, so what started all this was me saying, perhaps we could make it clear that pageOne should not update user, by passing it in separately. Furthermore perhaps we could borrow react terminology and call that Props.</text>
  </message>
  <message>
    <ts>2017-07-13T14:02:15.184520</ts>
    <user>U17MHJ12N</user>
    <text>as a useful convention</text>
  </message>
  <message>
    <ts>2017-07-13T14:02:18.186435</ts>
    <user>U4872964V</user>
    <text>but it _can’t_ update user, because it does not return a user</text>
  </message>
  <message>
    <ts>2017-07-13T14:02:19.186900</ts>
    <user>U17MHJ12N</user>
    <text>just as it is in react</text>
  </message>
  <message>
    <ts>2017-07-13T14:02:26.190758</ts>
    <user>U0FP80EKB</user>
    <text>&amp;gt; perhaps we could make it clear that pageOne should not update user, by passing it in separately. 
What is the pain that this added complexity is targeting?</text>
  </message>
  <message>
    <ts>2017-07-13T14:03:03.212584</ts>
    <user>U17MHJ12N</user>
    <text>if user is made part of its Model then it can if it returns a Cmd that will cause that to happen</text>
  </message>
  <message>
    <ts>2017-07-13T14:03:18.220738</ts>
    <user>U4872964V</user>
    <text>but why would we</text>
  </message>
  <message>
    <ts>2017-07-13T14:03:22.222921</ts>
    <user>U17MHJ12N</user>
    <text>so user should *not* be part of its Model is the conclusion</text>
  </message>
  <message>
    <ts>2017-07-13T14:03:52.240502</ts>
    <user>U3GD698R5</user>
    <text>hope to see more of this talk!</text>
  </message>
  <message>
    <ts>2017-07-13T14:04:26.260332</ts>
    <user>U17MHJ12N</user>
    <text>a reason we would want to is to preserve encapsulation. We might want all of pageOne's state to be confined to its model. To keep things neat, not realising we have made a subtle architectural mistake</text>
  </message>
  <message>
    <ts>2017-07-13T14:05:27.294191</ts>
    <user>U17MHJ12N</user>
    <text>People like patterns and they see this update function signature and they think that's what they have to use. This is how this can happen.</text>
  </message>
  <message>
    <ts>2017-07-13T14:05:28.295063</ts>
    <user>U4872964V</user>
    <text>So, we just do what it says under “Do not allow two copies of volatile data”. I don’t agree with “The downside is that it doesn’t scale very well. What happens when I discover another piece of state that is really owned by an ancestor component? I have to add that to the signature as well. All the way down.”

Yes, you add it. All the way down. How does this not scale?</text>
  </message>
  <message>
    <ts>2017-07-13T14:06:06.316237</ts>
    <user>U17MHJ12N</user>
    <text>I did say that I didn't agree with my own conclusions anymore!</text>
  </message>
  <message>
    <ts>2017-07-13T14:06:10.318690</ts>
    <user>U4872964V</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T14:06:42.336710</ts>
    <user>U4872964V</user>
    <text>And taking this further in this direction, why do we have to have a `Model` exactly in the update function?</text>
  </message>
  <message>
    <ts>2017-07-13T14:06:50.340954</ts>
    <user>U17MHJ12N</user>
    <text>But I think rather than add User to the signature I would rather add a single Type (aka Props) to contain *all* stuff I don't own and then just make that a convention</text>
  </message>
  <message>
    <ts>2017-07-13T14:06:52.342289</ts>
    <user>U4872964V</user>
    <text>this is taking it away from components</text>
  </message>
  <message>
    <ts>2017-07-13T14:07:23.358978</ts>
    <user>U4872964V</user>
    <text>Why call it Props if it is a User</text>
  </message>
  <message>
    <ts>2017-07-13T14:07:37.366710</ts>
    <user>U17MHJ12N</user>
    <text>to future proof it when the next thing comes along</text>
  </message>
  <message>
    <ts>2017-07-13T14:07:39.367758</ts>
    <user>U4872964V</user>
    <text>that’s just making it more opaque</text>
  </message>
  <message>
    <ts>2017-07-13T14:07:44.370768</ts>
    <user>U0F2LCU58</user>
    <text>what now?</text>
  </message>
  <message>
    <ts>2017-07-13T14:07:50.373648</ts>
    <user>U0F2LCU58</user>
    <text>I got a notification</text>
  </message>
  <message>
    <ts>2017-07-13T14:07:55.376449</ts>
    <user>U4872964V</user>
    <text>future proof? Just add another parameter if you need one. That’s all.</text>
  </message>
  <message>
    <ts>2017-07-13T14:08:13.386262</ts>
    <user>U23SA861Y</user>
    <text>write what you need, not what you will need</text>
  </message>
  <message>
    <ts>2017-07-13T14:08:59.411133</ts>
    <user>U4872964V</user>
    <text>and if you discover that you actually need to update the user, just have the function return a User and update the model with it</text>
  </message>
  <message>
    <ts>2017-07-13T14:09:23.424005</ts>
    <user>U0FP80EKB</user>
    <text>&amp;gt; Never plan extensibility, refactor and extract to it</text>
  </message>
  <message>
    <ts>2017-07-13T14:10:00.444461</ts>
    <user>U17MHJ12N</user>
    <text>I think it depends how many things you anticipate needing to pass around. I *know* I will need quite a few so I am planning for it. That's all</text>
  </message>
  <message>
    <ts>2017-07-13T14:10:13.451348</ts>
    <user>U0F2LCU58</user>
    <text>It's just another way of looking at `&amp;lt;&amp;lt;`</text>
  </message>
  <message>
    <ts>2017-07-13T14:10:13.451376</ts>
    <user>U4872964V</user>
    <text>I think this comes down to that refactoring in javascript is hard, but refactoring in Elm is easy</text>
  </message>
  <message>
    <ts>2017-07-13T14:10:50.472051</ts>
    <user>U23SA861Y</user>
    <text>yeah, there is a big difference in refactoring when you have a compiler vs when you don't.</text>
  </message>
  <message>
    <ts>2017-07-13T14:12:03.512219</ts>
    <user>U17MHJ12N</user>
    <text>I'm not worried about the refactor, I'd just rather not have the same signature with five things being passed in. Of course, not always necessary but not a big deal either way.</text>
  </message>
  <message>
    <ts>2017-07-13T14:12:51.537903</ts>
    <user>U4872964V</user>
    <text>so if you have many parameters you can make a record, call it props if you like, I prefer to deconstruct it right away in the definition</text>
  </message>
  <message>
    <ts>2017-07-13T14:13:44.566798</ts>
    <user>U4872964V</user>
    <text>but don’t be afraid to change even the `Model` parameter in the input and output, if that suits your data better</text>
  </message>
  <message>
    <ts>2017-07-13T14:14:33.592903</ts>
    <user>U17MHJ12N</user>
    <text>ok - well thanks all - time to go home for me now!</text>
  </message>
  <message>
    <ts>2017-07-13T14:14:49.601418</ts>
    <user>U4872964V</user>
    <text>thanks! great conversation</text>
  </message>
  <message>
    <ts>2017-07-13T14:25:21.957308</ts>
    <user>U4Z4NEUQG</user>
    <text>How can I use an elm rendered DOM node as target node for some js library?</text>
  </message>
  <message>
    <ts>2017-07-13T14:27:30.030872</ts>
    <user>U4872964V</user>
    <text>easiest is to put a class or id on it</text>
  </message>
  <message>
    <ts>2017-07-13T14:27:31.031536</ts>
    <user>U0CL0AS3V</user>
    <text>night &lt;@U17MHJ12N&gt;, thanks for the discussion!</text>
  </message>
  <message>
    <ts>2017-07-13T14:27:53.044393</ts>
    <user>U4872964V</user>
    <text>and then use a MutationObserver</text>
  </message>
  <message>
    <ts>2017-07-13T14:28:16.057211</ts>
    <user>U4Z4NEUQG</user>
    <text>HO yeah good idea</text>
  </message>
  <message>
    <ts>2017-07-13T14:28:39.070091</ts>
    <user>U4872964V</user>
    <text>make sure it doesn’t get rerendered by Elm if you store stuff on it though</text>
  </message>
  <message>
    <ts>2017-07-13T14:29:05.085235</ts>
    <user>U4Z4NEUQG</user>
    <text>how can I prevent that?</text>
  </message>
  <message>
    <ts>2017-07-13T14:29:23.096043</ts>
    <user>U4872964V</user>
    <text>by not changing your view structurally too much</text>
  </message>
  <message>
    <ts>2017-07-13T14:29:51.112359</ts>
    <user>U4872964V</user>
    <text>if you add elements, use Html.Keyed</text>
  </message>
  <message>
    <ts>2017-07-13T14:30:41.142324</ts>
    <user>U31A7HG1E</user>
    <text>Is there a guaranteed way to prevent re-rendering?  something akin to returning 'false' from shouldComponentUpdate in a react component?</text>
  </message>
  <message>
    <ts>2017-07-13T14:31:13.160484</ts>
    <user>U4Z4NEUQG</user>
    <text>Nah I just render a div for an embed an not touching it after that.</text>
  </message>
  <message>
    <ts>2017-07-13T14:31:29.170063</ts>
    <user>U0FP80EKB</user>
    <text>&lt;@U31A7HG1E&gt; look at `Html.Keyed` and `Html.Lazy`</text>
  </message>
  <message>
    <ts>2017-07-13T14:31:40.176275</ts>
    <user>U31A7HG1E</user>
    <text>will do, thanks</text>
  </message>
  <message>
    <ts>2017-07-13T14:31:53.183778</ts>
    <user>U4Z4NEUQG</user>
    <text>Yeah I guess lazy is also what I need:P</text>
  </message>
  <message>
    <ts>2017-07-13T14:32:12.194202</ts>
    <user>U4872964V</user>
    <text>No, Html.Lazy is just an optimization not to call the view function</text>
  </message>
  <message>
    <ts>2017-07-13T14:32:21.199593</ts>
    <user>U4872964V</user>
    <text>it doesn’t change the rendering</text>
  </message>
  <message>
    <ts>2017-07-13T14:32:55.219114</ts>
    <user>U4Z4NEUQG</user>
    <text>it only prevents virtual DOM diffing?</text>
  </message>
  <message>
    <ts>2017-07-13T14:33:22.234726</ts>
    <user>U4872964V</user>
    <text>Well yes, but it’s just an optimization, without Html.Lazy there would be no difference anyway</text>
  </message>
  <message>
    <ts>2017-07-13T14:33:55.254384</ts>
    <user>U4872964V</user>
    <text>Html.Keyed on the other hand lets you tag nodes with key to reuse them even if some nodes are inserted etc</text>
  </message>
  <message>
    <ts>2017-07-13T14:34:07.261183</ts>
    <user>U4872964V</user>
    <text>Doesn’t help if you change the structure too much though</text>
  </message>
  <message>
    <ts>2017-07-13T14:34:53.286482</ts>
    <user>U4872964V</user>
    <text>But it depends on what you do with the node, if you have a MutationObserver you can just set it up again when it’s being rendered again</text>
  </message>
  <message>
    <ts>2017-07-13T14:34:55.287402</ts>
    <user>U4Z4NEUQG</user>
    <text>So basically to have the equivalent of shouldComponentUpdate, we just need our view to return the same thing?</text>
  </message>
  <message>
    <ts>2017-07-13T14:35:54.321648</ts>
    <user>U4872964V</user>
    <text>well, no, shouldComponentUpdate is about the virtual DOM, so it corresponds to Html.Lazy but that won’t affect the real DOM</text>
  </message>
  <message>
    <ts>2017-07-13T14:36:54.354334</ts>
    <user>U4Z4NEUQG</user>
    <text>So, same argument to view function + lazy is equivalent then?</text>
  </message>
  <message>
    <ts>2017-07-13T14:37:04.360474</ts>
    <user>U4872964V</user>
    <text>in terms of real DOM rendering yes</text>
  </message>
  <message>
    <ts>2017-07-13T14:37:12.364386</ts>
    <user>U4Z4NEUQG</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-13T14:37:34.376963</ts>
    <user>U4Z4NEUQG</user>
    <text>Why would you need a mutation observer? To be notified when elm has rendered the node where I want to put my embed?</text>
  </message>
  <message>
    <ts>2017-07-13T14:37:52.387334</ts>
    <user>U4Z4NEUQG</user>
    <text>So the mutation observer goes on the elm container?</text>
  </message>
  <message>
    <ts>2017-07-13T14:37:59.390838</ts>
    <user>U4872964V</user>
    <text>yes, you could also do that by sending a message through a port, but it’s easier with a mutation observer</text>
  </message>
  <message>
    <ts>2017-07-13T14:38:46.417924</ts>
    <user>U4872964V</user>
    <text>yes, on the elm container node, watching for subtree childList changes</text>
  </message>
  <message>
    <ts>2017-07-13T14:39:12.431914</ts>
    <user>U4Z4NEUQG</user>
    <text>OK makes sense</text>
  </message>
  <message>
    <ts>2017-07-13T14:39:16.434587</ts>
    <user>U4Z4NEUQG</user>
    <text>Thanks</text>
  </message>
  <message>
    <ts>2017-07-13T14:39:45.450556</ts>
    <user>U4872964V</user>
    <text>also, if you need to send information back to elm from your library you can use custom events on the node instead of ports</text>
  </message>
  <message>
    <ts>2017-07-13T14:41:19.503284</ts>
    <user>U4872964V</user>
    <text>look at this: &lt;https://ellie-app.com/qyNKkTsrNRa1/2&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T14:42:10.532309</ts>
    <user>U4872964V</user>
    <text>pretty neat technique for interop</text>
  </message>
  <message>
    <ts>2017-07-13T14:47:36.717042</ts>
    <user>U4Z4NEUQG</user>
    <text>yeah, that's neat. thanks</text>
  </message>
  <message>
    <ts>2017-07-13T18:03:41.507427</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U3GD698R5&gt; I will draft up an example tomorrow. </text>
  </message>
  <message>
    <ts>2017-07-13T18:05:10.540213</ts>
    <user>U2GPAEU1L</user>
    <text>Hey everyone, I just spent a fair bit of time creating a tutorial on a very common mistake in Elm, *hooking up sub-pages*. I show some code for how you would go about hooking up sub-pages and then explain a potential problem, one that I discovered in my own Elm app. If that sounds interesting to you, go check it out! I hope this prevents others from making the same mistake I made.

&lt;http://codetidbit.com/#view/bigbit/5967ed087890d775c05191f1/introduction/&gt;

Cheers :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T18:14:45.734401</ts>
    <user>U5W5F6QGP</user>
    <text>I've never seen codetidbit before, what an awesome way of displaying a tutorial
Nice work! </text>
  </message>
  <message>
    <ts>2017-07-13T18:15:26.748329</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2GPAEU1L&gt; I'll be bookmarking this one as well :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T18:57:38.507528</ts>
    <user>U4Z4NEUQG</user>
    <text>&lt;@U2GPAEU1L&gt;  I did something a bit different. I return pages scope message + global messages</text>
  </message>
  <message>
    <ts>2017-07-13T18:58:58.530330</ts>
    <user>U4Z4NEUQG</user>
    <text>for example, `update: PageMsg -&amp;gt; PageModel -&amp;gt; ((PageModel, Cmd PageMsg), GlobalMsg)`</text>
  </message>
  <message>
    <ts>2017-07-13T18:59:11.534022</ts>
    <user>U4Z4NEUQG</user>
    <text>And I have logic to turn global msg into a Cmd in my global update</text>
  </message>
  <message>
    <ts>2017-07-13T19:00:24.556714</ts>
    <user>U4Z4NEUQG</user>
    <text>As of view, they return only scoped messages</text>
  </message>
  <message>
    <ts>2017-07-13T19:09:12.697413</ts>
    <user>U4CDPP9HR</user>
    <text>&lt;@U4Z4NEUQG&gt; The problem with that approach, if I understand you correctly, is that a view can’t return a message that affects any other part of the page.</text>
  </message>
  <message>
    <ts>2017-07-13T19:09:59.709136</ts>
    <user>U4Z4NEUQG</user>
    <text>each page has only 1 view</text>
  </message>
  <message>
    <ts>2017-07-13T19:10:22.715358</ts>
    <user>U4Z4NEUQG</user>
    <text>which is split in reusable view functions</text>
  </message>
  <message>
    <ts>2017-07-13T19:10:29.717146</ts>
    <user>U23SA861Y</user>
    <text>but they likely share data don't they?</text>
  </message>
  <message>
    <ts>2017-07-13T19:11:23.731312</ts>
    <user>U4Z4NEUQG</user>
    <text>in my code, only 1 page can live at a time</text>
  </message>
  <message>
    <ts>2017-07-13T19:11:44.736471</ts>
    <user>U4Z4NEUQG</user>
    <text>look at  &lt;https://github.com/rtfeldman/elm-spa-example/&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T19:11:48.737464</ts>
    <user>U4Z4NEUQG</user>
    <text>my structure is similar</text>
  </message>
  <message>
    <ts>2017-07-13T19:13:54.768110</ts>
    <user>U23SA861Y</user>
    <text>I see, so the model is completely swapped out</text>
  </message>
  <message>
    <ts>2017-07-13T19:14:18.774084</ts>
    <user>U4Z4NEUQG</user>
    <text>basically yeah</text>
  </message>
  <message>
    <ts>2017-07-13T19:16:18.803566</ts>
    <user>U5QJW0DDE</user>
    <text>here is a simplified app example: &lt;https://gist.github.com/astoeckley/040230ae10409210c7109edd3cb8f009&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T19:17:01.814249</ts>
    <user>U23SA861Y</user>
    <text>at this point its just a bunch of seperate pages</text>
  </message>
  <message>
    <ts>2017-07-13T19:18:30.837085</ts>
    <user>U4Z4NEUQG</user>
    <text>yeah, that's why they are called page:P</text>
  </message>
  <message>
    <ts>2017-07-13T19:18:47.841265</ts>
    <user>U23SA861Y</user>
    <text>sure</text>
  </message>
  <message>
    <ts>2017-07-13T19:19:50.856946</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U5W5F6QGP&gt; &lt;@U2SR9DL7Q&gt; Thanks :slightly_smiling_face:

&lt;@U4Z4NEUQG&gt; Absolutely, that’s why in my tutorial *I said that this is just one possible solution for the problem. Feldman does it completely differently in his SPA, and perhaps I’ll talk about that in another tutorial.*
 
That being said, as &lt;@U23SA861Y&gt; just pointed out, it just becomes a bunch of pages. Like if you always drop the last model, how do you save data across the pages? Like if someone switches to another tab of your website and then back, is the model reset because the top-level model only has 1 model at a time? Perhaps I am misunderstanding it, but that would be a problem for me. Also as &lt;@U4CDPP9HR&gt; pointed out, you still don’t avoid the problem of dup messages. What happens if multiple pages need a `NoOp` etc etc… I find the approach Feldman took in the SPA quite interesting, but at first glance it seems not to satisfy the way I like to build applications.

-&amp;gt; I also haven’t tried doing it that way yet, so perhaps I’ll be pleasantly surprised…who knows. Learning every day</text>
  </message>
  <message>
    <ts>2017-07-13T19:20:08.861406</ts>
    <user>U4Z4NEUQG</user>
    <text>If I need some "big reusable view that might send global messages" I just pass the message as argument, like `someView: msg -&amp;gt; Html msg`</text>
  </message>
  <message>
    <ts>2017-07-13T19:21:11.876798</ts>
    <user>U4Z4NEUQG</user>
    <text>I found out that is was easier to have perhaps 1 duplicated message.</text>
  </message>
  <message>
    <ts>2017-07-13T19:21:29.881256</ts>
    <user>U4Z4NEUQG</user>
    <text>My app is pretty big now, and I have no duplicate.</text>
  </message>
  <message>
    <ts>2017-07-13T19:23:42.913960</ts>
    <user>U4Z4NEUQG</user>
    <text>I have a few part of my app that are reusable and are more than one function, I took an approach similar to elm-ui. But those parts cannot send global messages. If they need to send something "outside" I pass the message as argument.</text>
  </message>
  <message>
    <ts>2017-07-13T19:36:50.107506</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0FP80EKB&gt; &lt;@U3SJEDR96&gt; would enjoy your thoughts on this as well: &lt;https://gist.github.com/astoeckley/040230ae10409210c7109edd3cb8f009&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T19:36:59.109520</ts>
    <user>U5QJW0DDE</user>
    <text>but i'm off to bed now (approaching 2 am for me)</text>
  </message>
  <message>
    <ts>2017-07-13T20:38:45.899887</ts>
    <user>U0CL0AS3V</user>
    <text>my first thought: I strongly disagree with 4)</text>
  </message>
  <message>
    <ts>2017-07-13T20:40:25.918820</ts>
    <user>U0CL0AS3V</user>
    <text>I can't speak for CLJS but I would give basically the opposite advice: "it's perfectly normal for a view function to need more state data, resulting in a need for it to be passed additional data"</text>
  </message>
  <message>
    <ts>2017-07-13T20:45:26.973913</ts>
    <user>U0CL0AS3V</user>
    <text>I have a thought experiment. Here is a claim:

Any advice of the form "View functions should..." is either:

1) true, but also true of all functions
2) false</text>
  </message>
  <message>
    <ts>2017-07-13T20:45:36.975481</ts>
    <user>U0CL0AS3V</user>
    <text>can anyone think of any counterexamples? (I tried and couldn't think of any.)</text>
  </message>
  <message>
    <ts>2017-07-13T20:56:51.100810</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U0CL0AS3V&gt; Fun….hmmm….

View functions should care about how the code physically resembles the output (?)

That might be cheating…not sure…</text>
  </message>
  <message>
    <ts>2017-07-13T20:57:13.104667</ts>
    <user>U0CL0AS3V</user>
    <text>haha</text>
  </message>
  <message>
    <ts>2017-07-13T20:57:26.107053</ts>
    <user>U0CL0AS3V</user>
    <text>I wouldn't even say I'm on board with that one :smile:</text>
  </message>
  <message>
    <ts>2017-07-13T21:05:55.206899</ts>
    <user>U23SA861Y</user>
    <text>view functions should, describe how to render your data</text>
  </message>
  <message>
    <ts>2017-07-13T21:06:22.211937</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U0CL0AS3V&gt; I can think of examples where the code would be easier to work with if it was more shaped like the output, I think if I actually spent the time to create the examples you _might_ agree with me (although you don’t seem to like to :stuck_out_tongue: ). 

But it’s completely beside the point, I see what you are saying, we should treat view functions like everything else, they are not magical, and I agree. I don’t _think anyone here would disagree with that_.</text>
  </message>
  <message>
    <ts>2017-07-13T21:07:23.223107</ts>
    <user>U2GPAEU1L</user>
    <text>View functions should create views</text>
  </message>
  <message>
    <ts>2017-07-13T21:07:33.225006</ts>
    <user>U2GPAEU1L</user>
    <text>hehehehe….</text>
  </message>
  <message>
    <ts>2017-07-13T21:22:06.385150</ts>
    <user>U0CL0AS3V</user>
    <text>I think if you drop (4) as a constraint, then the problem goes away</text>
  </message>
  <message>
    <ts>2017-07-13T21:22:19.387437</ts>
    <user>U0CL0AS3V</user>
    <text>and there is nothing tricky about this particular set of business requirements - each function requires a certain amount of data to return the `Html` necessary to make the page look right, and in all cases it gets that data passed in from its caller.</text>
  </message>
  <message>
    <ts>2017-07-13T21:22:27.388848</ts>
    <user>U0CL0AS3V</user>
    <text>No need to add additional restrictions on top of that!</text>
  </message>
  <message>
    <ts>2017-07-13T21:35:16.530308</ts>
    <user>U601ELFEG</user>
    <text>It seems that I can build a higher level module that has a `Cmd` and `Sub` interface, even though it itself is built all in Elm... but since the thing it is built on uses `port` and hence is `Cmd` and `Sub` based, my higher level one must be too.... Is this a common pattern one sees? Or is `Task` suppose to be the right way to do this? Or is there some other abstraction or technique for building upon things which must, ultimately be based on code the async's through JS?</text>
  </message>
  <message>
    <ts>2017-07-13T21:47:40.665729</ts>
    <user>U601ELFEG</user>
    <text>Meh... hang it - there seems to be no way to have two different higher level modules make use of a `port` module with the `port` module knowing all the clients. The problem is there is no way to transparently route the `Sub`s</text>
  </message>
  <message>
    <ts>2017-07-13T22:39:55.217501</ts>
    <user>U601ELFEG</user>
    <text>oh - what's an `effect module`?</text>
  </message>
  <message>
    <ts>2017-07-13T22:40:13.220637</ts>
    <user>U601ELFEG</user>
    <text>is that something current? deprecated?</text>
  </message>
  <message>
    <ts>2017-07-13T22:43:17.251785</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U601ELFEG&gt; an effect module is something that elm kernel stuff, which normal users should use but not write.</text>
  </message>
  <message>
    <ts>2017-07-13T22:44:39.265013</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U601ELFEG&gt; in general, you can declare the port, and just the port, inside a dedicated `port module`, then require and use the port module as any other module.</text>
  </message>
  <message>
    <ts>2017-07-13T22:44:57.267731</ts>
    <user>U0Z9TPK7S</user>
    <text>Modules that import the port module don't need to be themselves port modules</text>
  </message>
  <message>
    <ts>2017-07-13T22:49:00.308073</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U601ELFEG&gt; `port`s are an application level concern, they aren’t something that you share</text>
  </message>
  <message>
    <ts>2017-07-13T22:51:48.335592</ts>
    <user>U601ELFEG</user>
    <text>okay - soooooo I'm having a mental block here:  I've got some low level facility like:  `port requestFoo : String -&amp;gt; Cmd msg`    and  `port receivedFoo : (Json.Encode.Value -&amp;gt; msg) -&amp;gt; Sub msg`</text>
  </message>
  <message>
    <ts>2017-07-13T22:51:53.336401</ts>
    <user>U601ELFEG</user>
    <text>this i can code</text>
  </message>
  <message>
    <ts>2017-07-13T22:53:24.351064</ts>
    <user>U601ELFEG</user>
    <text>but now I want to call this from two places.... like `requestFoo "alpha"` and have the `Sub` somehow result in a `Msg` value of `ReceivedAlpha String`</text>
  </message>
  <message>
    <ts>2017-07-13T22:54:06.357702</ts>
    <user>U601ELFEG</user>
    <text>and similiary  `requestFoo "beta"` and have the `Sub` result in a `Msg` value of `ReceivedBeta String` for that one</text>
  </message>
  <message>
    <ts>2017-07-13T22:55:34.372116</ts>
    <user>U601ELFEG</user>
    <text>It seems like since I get one only one `Sub` for the `port`, I need something that knows about all the users of `requestFoo` to distribute the only `Msg` the `Sub` can give me back</text>
  </message>
  <message>
    <ts>2017-07-13T22:55:59.376403</ts>
    <user>U601ELFEG</user>
    <text>Does that make any sense? There seems no good way to compose uses of a `port module`</text>
  </message>
  <message>
    <ts>2017-07-13T22:56:20.379917</ts>
    <user>U153UK3FA</user>
    <text>yep, it’s not request/response. It’s publish/subscribe</text>
  </message>
  <message>
    <ts>2017-07-13T22:56:48.384198</ts>
    <user>U601ELFEG</user>
    <text>sure - so how can I have one low level pub/sub server multiple clients</text>
  </message>
  <message>
    <ts>2017-07-13T22:57:47.393964</ts>
    <user>U153UK3FA</user>
    <text>all subscribers will get all values sent</text>
  </message>
  <message>
    <ts>2017-07-13T22:58:08.397327</ts>
    <user>U153UK3FA</user>
    <text>but there is only one subscriber</text>
  </message>
  <message>
    <ts>2017-07-13T22:58:34.401541</ts>
    <user>U601ELFEG</user>
    <text>right - so something needs to demultiplex the subscriptions</text>
  </message>
  <message>
    <ts>2017-07-13T22:59:00.405356</ts>
    <user>U153UK3FA</user>
    <text>`update` is your only subscriber</text>
  </message>
  <message>
    <ts>2017-07-13T23:00:07.416648</ts>
    <user>U153UK3FA</user>
    <text>it’s called with all the `Msg`s that result from a subscription</text>
  </message>
  <message>
    <ts>2017-07-13T23:03:17.449246</ts>
    <user>U601ELFEG</user>
    <text>Right - so then `update` must somewhere know about all the global uses of that `Sub` and know how to dispatch them... which doesn't seem very modular</text>
  </message>
  <message>
    <ts>2017-07-13T23:04:06.456976</ts>
    <user>U153UK3FA</user>
    <text>`update` ties all the modules together</text>
  </message>
  <message>
    <ts>2017-07-13T23:04:30.460693</ts>
    <user>U601ELFEG</user>
    <text>Essentially I'm trying to build something similar in feel to WebSocket - but that was using `effect module` (hence my question)  - and that kind of machinery doesn't seem avilable</text>
  </message>
  <message>
    <ts>2017-07-13T23:04:43.462805</ts>
    <user>U153UK3FA</user>
    <text>yep, it’s not</text>
  </message>
  <message>
    <ts>2017-07-13T23:05:07.466566</ts>
    <user>U601ELFEG</user>
    <text>Yes `update` does, but `Cmd.map` and `Sub.map` and and ADT heirarchy of `Msg` types let you compose modules</text>
  </message>
  <message>
    <ts>2017-07-13T23:05:17.468139</ts>
    <user>U601ELFEG</user>
    <text>but it doesn't seem possible to compose with `port`</text>
  </message>
  <message>
    <ts>2017-07-13T23:06:13.476694</ts>
    <user>U153UK3FA</user>
    <text>You can’t write something similar to the WebSocket package without writing an ‘effect manager’ which you generally shouldn’t do.</text>
  </message>
  <message>
    <ts>2017-07-13T23:07:16.486355</ts>
    <user>U601ELFEG</user>
    <text>okay - I'm willing, but there doesn't seem to be any doc on writing an `effect manager` - and &lt;@U0Z9TPK7S&gt; suggested it was "kernel level stuff"</text>
  </message>
  <message>
    <ts>2017-07-13T23:08:04.493731</ts>
    <user>U601ELFEG</user>
    <text>well, I've got to send some messages to some HW - and get responses - and I really don't want to have write an in `port` for each and every message!</text>
  </message>
  <message>
    <ts>2017-07-13T23:08:17.495651</ts>
    <user>U601ELFEG</user>
    <text>So - what is the pattern to be?</text>
  </message>
  <message>
    <ts>2017-07-13T23:09:54.510320</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U601ELFEG&gt; the lack of documentation is intentional because 1) details of how to write an effect manager will change and 2) they are unsafe, so users are discouraged from writing those.</text>
  </message>
  <message>
    <ts>2017-07-13T23:10:04.511899</ts>
    <user>U601ELFEG</user>
    <text>I could write   `port requestFoo : (Int, String) -&amp;gt; Cmd msg` and `port fooResponses : (Int, String) -&amp;gt; Sub msg` --- and use `Int` to tie requests and responses</text>
  </message>
  <message>
    <ts>2017-07-13T23:10:14.513514</ts>
    <user>U0Z9TPK7S</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-07-13T23:10:31.516283</ts>
    <user>U0Z9TPK7S</user>
    <text>That is probably the approach. Have a single generic port that can convey different messages</text>
  </message>
  <message>
    <ts>2017-07-13T23:13:32.544751</ts>
    <user>U601ELFEG</user>
    <text>but there isn't a good way to write a manager that allocates the Ints, and maps them back to `Msg` - at least as far as I can see.</text>
  </message>
  <message>
    <ts>2017-07-13T23:13:57.548513</ts>
    <user>U0Z9TPK7S</user>
    <text>You don't want to write a manager</text>
  </message>
  <message>
    <ts>2017-07-13T23:14:10.550644</ts>
    <user>U0Z9TPK7S</user>
    <text>And I am not sure exactly what you are trying to do</text>
  </message>
  <message>
    <ts>2017-07-13T23:14:56.557499</ts>
    <user>U0Z9TPK7S</user>
    <text>You might need a dedicated Msg</text>
  </message>
  <message>
    <ts>2017-07-13T23:15:06.559074</ts>
    <user>U601ELFEG</user>
    <text>Here: I've got JS to send MIDI messages.   There are many of them - but the JS is really all the same: Take some bytes, send, wait for the corresponding bytes response</text>
  </message>
  <message>
    <ts>2017-07-13T23:15:35.563610</ts>
    <user>U0Z9TPK7S</user>
    <text>If the port you are using is `port fooResponses : (Int, String) -&amp;gt; Sub msg`</text>
  </message>
  <message>
    <ts>2017-07-13T23:16:05.568461</ts>
    <user>U601ELFEG</user>
    <text>I want to send some MIDI message from one module - and when the response comes, it wants a `Msg` of `MyThingArrived ...`</text>
  </message>
  <message>
    <ts>2017-07-13T23:16:28.571896</ts>
    <user>U0Z9TPK7S</user>
    <text>then the easiest thing is to have a `type Msg = MidiResponse (Int, String) | ...`</text>
  </message>
  <message>
    <ts>2017-07-13T23:16:57.576255</ts>
    <user>U601ELFEG</user>
    <text>Sure - but who knows which `Int` value is from which module?</text>
  </message>
  <message>
    <ts>2017-07-13T23:17:03.577165</ts>
    <user>U601ELFEG</user>
    <text>and who decodes that?</text>
  </message>
  <message>
    <ts>2017-07-13T23:17:11.578346</ts>
    <user>U153UK3FA</user>
    <text>`update` does</text>
  </message>
  <message>
    <ts>2017-07-13T23:17:40.582849</ts>
    <user>U153UK3FA</user>
    <text>because only `update` can</text>
  </message>
  <message>
    <ts>2017-07-13T23:18:56.594125</ts>
    <user>U0Z9TPK7S</user>
    <text>```
update msg model =
  case msg of
    MyThingArrived (theInteger, theString) -&amp;gt;
       doYourStuffWith theInteger theString
    ...
```</text>
  </message>
  <message>
    <ts>2017-07-13T23:22:04.623558</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U601ELFEG&gt; what ever function produces the `Cmd` that sends to the `port` will be called by `update` it can require `update` to pass it an `Int`. `update` can store that `Int` somewhere in the `Model` for reference later</text>
  </message>
  <message>
    <ts>2017-07-13T23:26:37.664523</ts>
    <user>U601ELFEG</user>
    <text>okay here is a sketch</text>
  </message>
  <message>
    <ts>2017-07-13T23:27:50.675705</ts>
    <user>U601ELFEG</user>
    <text>there seems no good way for A and B to call into Midi to get a `Cmd` - and update any model Midi might try to keep... so that it can decode that `Int` back to Msg</text>
  </message>
  <message>
    <ts>2017-07-13T23:28:15.679749</ts>
    <user>U601ELFEG</user>
    <text>this is complicated because A and B have different Msg types - that only get combined back up at top</text>
  </message>
  <message>
    <ts>2017-07-13T23:29:47.694411</ts>
    <user>U601ELFEG</user>
    <text>like there is no good way for this mapping of `Int` to `Top.Msg` to get `AStuff` and `BStuff` wrapped around the `Cmd` from when A or B called into Midi</text>
  </message>
  <message>
    <ts>2017-07-13T23:31:37.713554</ts>
    <user>U601ELFEG</user>
    <text>I suppose I could pass up some `MidiCmd` type, from A and B's `update` (rather than `Cmd`), which could be `MidiCmd.map`'d "on the way up" , and then - finally in Top, have that converted to and actual `Cmd`</text>
  </message>
  <message>
    <ts>2017-07-13T23:34:36.742329</ts>
    <user>U153UK3FA</user>
    <text>you probably want an additional attribute in the values being sent and received to allow `update` to identify whether it’s for `AStuff` or `BStuff`</text>
  </message>
  <message>
    <ts>2017-07-13T23:35:49.754019</ts>
    <user>U153UK3FA</user>
    <text>`MidiStuff` probably isn’t specific enough for your usecase</text>
  </message>
  <message>
    <ts>2017-07-13T23:36:00.755856</ts>
    <user>U601ELFEG</user>
    <text>right - which would mean that `Midi` would sort of need to have an ADT that enumerated all the users... which is what I was trying to avoid</text>
  </message>
  <message>
    <ts>2017-07-13T23:36:46.762716</ts>
    <user>U153UK3FA</user>
    <text>You’ll want a function that can decode the incoming value and produce either a `AStuff A.Msg Int` or a `BStuff B.Msg Int`</text>
  </message>
  <message>
    <ts>2017-07-13T23:40:26.796214</ts>
    <user>U601ELFEG</user>
    <text>It's almost like what is needed is to pass back up during update, in parallel with `Model` and `Cmd Msg`, where the `Model` and `Msg` types get mapped "upward" along the way --- I need to pass up  `MidiCmd Msg` which also gets mapped, and then converted to `Cmd Msg` at the top.... so every class of effect needs it's own `Cmd` like thing - and the `update` functions get more and more complex:  `update : Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg, MidiCmd Msg, LocalStorageCmd Msg)` etc...</text>
  </message>
  <message>
    <ts>2017-07-13T23:42:23.813283</ts>
    <user>U17UX2B97</user>
    <text>Hey all. A question about using Elm but not so much about the language itself: 

Is there much consensus about the best way to minify/optimise Elm’s JS output? I’ve just been experimenting with Google Closure Compiler in Simple mode, and achieved a ~50% reduction in size. Advanced optimisation mode doesn’t appear to successfully compile.

I assume Webpack can do this kind of thing as well. What do people typically use?</text>
  </message>
  <message>
    <ts>2017-07-13T23:44:41.833702</ts>
    <user>U601ELFEG</user>
    <text>I'll mull on all of this - frankly, I'm probably trying to solve a more general case than I need for the moment... but pretty sure I'll eventually have a dozen or so modules with a need to call into a low level MIDI facility. `WebSocket` and `Http` get to do this kind of thing more cleanly - and I'm a little sad I can write the same facility for WebMidi without getting into language kernel guts and native modules.</text>
  </message>
  <message>
    <ts>2017-07-13T23:46:01.845183</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U601ELFEG&gt; with WebMidi you’re already in the language kernel guts and native modules</text>
  </message>
  <message>
    <ts>2017-07-13T23:46:29.849224</ts>
    <user>U601ELFEG</user>
    <text>right - I just thought I could do so using `port` - but seems not</text>
  </message>
  <message>
    <ts>2017-07-13T23:46:47.851660</ts>
    <user>U601ELFEG</user>
    <text>`port` is nice and clean and clear - and I already used it some</text>
  </message>
  <message>
    <ts>2017-07-13T23:47:35.858462</ts>
    <user>U601ELFEG</user>
    <text>well then .... seems like I'll have to sleuth out `effect module` after all  :stuck_out_tongue_winking_eye:</text>
  </message>
  <message>
    <ts>2017-07-13T23:50:18.881638</ts>
    <user>U601ELFEG</user>
    <text>well - later all... :sleepy:  zzzzzzz</text>
  </message>
  <message>
    <ts>2017-07-14T00:30:38.255883</ts>
    <user>U13H7FNDQ</user>
    <text>&lt;@U17UX2B97&gt;, I am working on improving how well Elm minifies for 0.19</text>
  </message>
  <message>
    <ts>2017-07-14T00:31:01.259385</ts>
    <user>U13H7FNDQ</user>
    <text>I'll share more of my results when it's closer to the alpha period</text>
  </message>
  <message>
    <ts>2017-07-14T00:31:38.264830</ts>
    <user>U13H7FNDQ</user>
    <text>The short version is that we can do better, and there are some extra configuration tricks. I only really know about 0.19 though, so nothing useful to share for now.</text>
  </message>
  <message>
    <ts>2017-07-14T00:54:35.465595</ts>
    <user>U17UX2B97</user>
    <text>&lt;@U13H7FNDQ&gt; No worries. Thanks for the answer :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T02:51:55.686088</ts>
    <user>U0Z9TPK7S</user>
    <text>I have a JS event that references two different elements, which I can access inside Elm via Json.Decode.
How do I determine whether the two elements are the same?
In JS i could just do `elementA === elementB`.
In Elm I can add an element id, decode it and compare it: `idElementA == idElementB`, but this requires the element to have a unique id, which is not always easy to add.
Is there any reliable alternative, or any property that I could use for the comparison? 
I was considering to decode and compare the innerHTML property, but that could easily be the same for unrelated elements.</text>
  </message>
  <message>
    <ts>2017-07-14T02:53:17.703945</ts>
    <user>U4872964V</user>
    <text>&lt;@U0Z9TPK7S&gt; i think if you leave the elements as `Json.Encode.Value` you can compare them</text>
  </message>
  <message>
    <ts>2017-07-14T02:53:55.712204</ts>
    <user>U0Z9TPK7S</user>
    <text>That's a really good idea. How reliable is it tho?</text>
  </message>
  <message>
    <ts>2017-07-14T02:55:57.739836</ts>
    <user>U4872964V</user>
    <text>no idea, it’s just something to try</text>
  </message>
  <message>
    <ts>2017-07-14T02:56:25.746025</ts>
    <user>U4872964V</user>
    <text>== in Elm will try to compare by reference first</text>
  </message>
  <message>
    <ts>2017-07-14T02:56:56.753127</ts>
    <user>U0Z9TPK7S</user>
    <text>Ok, thanks.</text>
  </message>
  <message>
    <ts>2017-07-14T03:01:16.815672</ts>
    <user>U4872964V</user>
    <text>looking at the source code for Json.Decode.value it seems like it should work :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T03:09:38.935924</ts>
    <user>U3SJEDR96</user>
    <text>might want to be careful with that, though - in case the refs _don't_ match, you'll get pretty... unexpected results: if `a` and `b` are objects, `a == b` will be true when all keys from `a` exist in `b` and their values are considered equal. So if `b` happens to have an extra key that doesn't appear in `a`, there's no way to know :slightly_smiling_face: (&lt;https://github.com/elm-lang/core/blob/5.1.1/src/Native/Utils.js#L56-L66&gt;)</text>
  </message>
  <message>
    <ts>2017-07-14T03:14:05.999314</ts>
    <user>U4872964V</user>
    <text>that’s a pretty strange implementation</text>
  </message>
  <message>
    <ts>2017-07-14T03:14:50.009789</ts>
    <user>U4872964V</user>
    <text>would make sense if you compared the number of keys first</text>
  </message>
  <message>
    <ts>2017-07-14T03:17:15.046622</ts>
    <user>U4872964V</user>
    <text>&lt;@U0Z9TPK7S&gt; I’m guessing you’re making a package, so no native/kernel code?</text>
  </message>
  <message>
    <ts>2017-07-14T03:20:22.092832</ts>
    <user>U4872964V</user>
    <text>perhaps the most robust solution is to require an id for these nodes</text>
  </message>
  <message>
    <ts>2017-07-14T03:32:32.282175</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4872964V&gt; it's a reasonable implementation of "regular" elm types, though; where this would be used for records. But yeah, it's surprising :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T03:33:12.292598</ts>
    <user>U4872964V</user>
    <text>ah, yes</text>
  </message>
  <message>
    <ts>2017-07-14T03:37:43.364946</ts>
    <user>U5J0H2NS2</user>
    <text>What a nice tutorial!
I am going to use this pattern for sure.
In Frame 21,  you show the original update, not the suggested one. Is it intended to be, or a mistake?
(The same issue with frame 22, with the view)</text>
  </message>
  <message>
    <ts>2017-07-14T03:56:31.679446</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U3SJEDR96&gt; interesting. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-14T03:57:11.690943</ts>
    <user>U3SJEDR96</user>
    <text>`a == b &amp;amp;&amp;amp; b == a` would work, though :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-14T03:58:53.721050</ts>
    <user>U4872964V</user>
    <text>unless there are functions in that object…</text>
  </message>
  <message>
    <ts>2017-07-14T04:07:18.877042</ts>
    <user>U0Z9TPK7S</user>
    <text>Yup</text>
  </message>
  <message>
    <ts>2017-07-14T04:07:26.879324</ts>
    <user>U0Z9TPK7S</user>
    <text>dom elements have functions</text>
  </message>
  <message>
    <ts>2017-07-14T04:07:29.880177</ts>
    <user>U0Z9TPK7S</user>
    <text>it will crash</text>
  </message>
  <message>
    <ts>2017-07-14T04:08:09.891706</ts>
    <user>U5J0H2NS2</user>
    <text>I'm not sure if it helps, but I think I had a similar issue and found a solution.
You can change your subscriptions in every update cycle inside the subscriptions function.
```
subscriptions : State -&amp;gt; Sub Msg
subscriptions state =
  case state of
    InitState -&amp;gt; Sub.none

    LoginState login_model -&amp;gt;
      Sub.batch
      [ Sub.map LoginMsg &amp;lt;| Menu.subs Login.Mdl login_model.mdl
      , Sub.map LoginMsg &amp;lt;| Layout.subs Login.Mdl login_model.mdl
      ]

    MainState main_model -&amp;gt;
      Sub.batch
      [ Sub.map MainMsg &amp;lt;| Menu.subs Main.Mdl main_model.mdl
      , Sub.map MainMsg &amp;lt;| Layout.subs Main.Mdl main_model.mdl
]
```</text>
  </message>
  <message>
    <ts>2017-07-14T04:11:23.949315</ts>
    <user>U5J0H2NS2</user>
    <text>Here I forward the msg-s of the elm-mdl module to the currently active state. I think the same could be implemented with your port.</text>
  </message>
  <message>
    <ts>2017-07-14T04:19:28.094882</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0CL0AS3V&gt; so in Elm, if you add a feature further down your view tree, and that feature needs data that has never been needed anywhere in that view hierarchy, it is normal to then add that data as an argument to all those intermediate view functions so that final view can build itself? As an app grows in complexity and new features are added, you could find yourself adding new arguments to many functions often enough that eventually it emerges to just pass whole model state through the view rather than pick disconnected parts of the central data model to separately string through the view tree.</text>
  </message>
  <message>
    <ts>2017-07-14T04:34:44.384269</ts>
    <user>U0EUHKVGB</user>
    <text>You can use `toString`, which will strip it of functions.</text>
  </message>
  <message>
    <ts>2017-07-14T04:49:33.670465</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U0EUHKVGB&gt; but at that point I will lose the reference comparison, which is what I wanted in the first place</text>
  </message>
  <message>
    <ts>2017-07-14T04:50:11.682985</ts>
    <user>U0Z9TPK7S</user>
    <text>If `toString domElementA == toString domElementB` I'm still not guaranteed that the two elements are the same.</text>
  </message>
  <message>
    <ts>2017-07-14T04:51:07.701669</ts>
    <user>U0EUHKVGB</user>
    <text>In Elm terms, you are guaranteed they are same, i.e equivalent. You just aren't sure they are the same object :wink:</text>
  </message>
  <message>
    <ts>2017-07-14T04:52:35.729731</ts>
    <user>U0Z9TPK7S</user>
    <text>"are the same *element*"</text>
  </message>
  <message>
    <ts>2017-07-14T04:53:20.744440</ts>
    <user>U0Z9TPK7S</user>
    <text>nitpicking on the language doesn't help</text>
  </message>
  <message>
    <ts>2017-07-14T04:59:01.856492</ts>
    <user>U0EUHKVGB</user>
    <text>Ensuring that everyone is using a common language is an important part of helping people.</text>
  </message>
  <message>
    <ts>2017-07-14T04:59:18.862470</ts>
    <user>U0EUHKVGB</user>
    <text>It's not nitpicking -- it's ensuring that people can help understand your goals.</text>
  </message>
  <message>
    <ts>2017-07-14T04:59:48.872162</ts>
    <user>U0EUHKVGB</user>
    <text>So now the question is, _why_ do you want to know they are the same element?</text>
  </message>
  <message>
    <ts>2017-07-14T05:04:46.976115</ts>
    <user>U0Z9TPK7S</user>
    <text>I haven't had this problem until you entered in the discussion, with a suggestion that was not useful for the problem at hand.</text>
  </message>
  <message>
    <ts>2017-07-14T05:05:06.982524</ts>
    <user>U0Z9TPK7S</user>
    <text>Now, I am not an english native speaker.</text>
  </message>
  <message>
    <ts>2017-07-14T05:05:22.987756</ts>
    <user>U0Z9TPK7S</user>
    <text>But the problem is solved, I am convinced that id comparison is the way to go.</text>
  </message>
  <message>
    <ts>2017-07-14T05:05:34.991732</ts>
    <user>U0EUHKVGB</user>
    <text>Neither am I :wink:</text>
  </message>
  <message>
    <ts>2017-07-14T05:06:02.001020</ts>
    <user>U3SJEDR96</user>
    <text>Keep in mind that in Elm, you have referential transparency; so wishing for referential equality is a bit of an odd thing. Noah's suggestion is the safe way of comparing json-values in Elm, though :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T05:06:52.017395</ts>
    <user>U0Z9TPK7S</user>
    <text></text>
  </message>
  <message>
    <ts>2017-07-14T05:06:55.018370</ts>
    <user>U0EUHKVGB</user>
    <text>It's not a matter of English ability or not. Before I help people, it's important to understand what they are trying to do. There is no need to take it personally, your English is great and even if it wasn't, it wouldn't matter. What does matter is making sure that we are helping you to find the solution you need -- not just what we _think_ you need.</text>
  </message>
  <message>
    <ts>2017-07-14T05:08:26.048860</ts>
    <user>U0EUHKVGB</user>
    <text>You have to rememeber that `===` isn't an explanation of what you want, since it's the defacto comparison method for modern JS.</text>
  </message>
  <message>
    <ts>2017-07-14T05:08:59.059341</ts>
    <user>U0EUHKVGB</user>
    <text>Therefore, when you are talking about things being the same _in an Elm context_, then it's important to clarify what you mean by "same" :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T05:09:22.066534</ts>
    <user>U0EUHKVGB</user>
    <text>Not to attack you or make you feel bad -- to make sure that we give you the right answer!</text>
  </message>
  <message>
    <ts>2017-07-14T05:10:55.096135</ts>
    <user>U0Z9TPK7S</user>
    <text>"In JS I can do X, is there any way of doing X in Elm?"</text>
  </message>
  <message>
    <ts>2017-07-14T05:11:03.098735</ts>
    <user>U0Z9TPK7S</user>
    <text>X = `elementA === elementB`</text>
  </message>
  <message>
    <ts>2017-07-14T05:11:11.101222</ts>
    <user>U0EUHKVGB</user>
    <text>Anyway, great that you found a solution. An id seems sensible if you can guarantee your elements will have an id.</text>
  </message>
  <message>
    <ts>2017-07-14T05:11:29.107115</ts>
    <user>U0EUHKVGB</user>
    <text>Eh, like I said, `===` is _the defacto comparison method_ in modern JS.</text>
  </message>
  <message>
    <ts>2017-07-14T05:11:54.115175</ts>
    <user>U0Z9TPK7S</user>
    <text>I am not clear what is the implication of that.</text>
  </message>
  <message>
    <ts>2017-07-14T05:11:59.117007</ts>
    <user>U0EUHKVGB</user>
    <text>It doesn't explain what you need or want. The answer in Elm is `you don't need to do referential equality so we just have ==`</text>
  </message>
  <message>
    <ts>2017-07-14T05:12:17.122946</ts>
    <user>U0Z9TPK7S</user>
    <text>On the contrary.</text>
  </message>
  <message>
    <ts>2017-07-14T05:12:47.132530</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0Z9TPK7S&gt; The implication is that people can say "How do I do 5 === 6 in Elm?", while meaning "How do I compare if two objects are equal?"</text>
  </message>
  <message>
    <ts>2017-07-14T05:13:13.140538</ts>
    <user>U0Z9TPK7S</user>
    <text>In JS, if both elementA and elmentB are DOM elements, `elementA === elementB` will yield true if and only if the two are the same element.</text>
  </message>
  <message>
    <ts>2017-07-14T05:13:17.141789</ts>
    <user>U0EUHKVGB</user>
    <text>People use `===` for every form of equality in JS. It's not a helpful explanation of what you want to do.</text>
  </message>
  <message>
    <ts>2017-07-14T05:13:36.147734</ts>
    <user>U0Z9TPK7S</user>
    <text>It describes a very precise requirement.</text>
  </message>
  <message>
    <ts>2017-07-14T05:13:57.154412</ts>
    <user>U0EUHKVGB</user>
    <text>No, _you_ know what you want from that. We do not.</text>
  </message>
  <message>
    <ts>2017-07-14T05:14:18.161086</ts>
    <user>U0EUHKVGB</user>
    <text>We can only guess. Guessing is bad because it leads to people getting the wrong answer.</text>
  </message>
  <message>
    <ts>2017-07-14T05:14:45.169528</ts>
    <user>U0EUHKVGB</user>
    <text>Hence the need to identify the common terms of a conversation.</text>
  </message>
  <message>
    <ts>2017-07-14T05:14:49.170980</ts>
    <user>U0Z9TPK7S</user>
    <text>You will notice that I gave quite some context.</text>
  </message>
  <message>
    <ts>2017-07-14T05:15:34.185552</ts>
    <user>U4872964V</user>
    <text>Yes, I understood exactly too.</text>
  </message>
  <message>
    <ts>2017-07-14T05:15:39.187284</ts>
    <user>U0EUHKVGB</user>
    <text>The context alone is not enough to go off.</text>
  </message>
  <message>
    <ts>2017-07-14T05:15:44.188808</ts>
    <user>U0Z9TPK7S</user>
    <text>In fact, in the discussion that followed, there was no ambiguity.</text>
  </message>
  <message>
    <ts>2017-07-14T05:15:49.190322</ts>
    <user>U0Z9TPK7S</user>
    <text>It is</text>
  </message>
  <message>
    <ts>2017-07-14T05:16:02.194438</ts>
    <user>U4872964V</user>
    <text>anyway, my suggestion was to require id on the node, which is probably the best solution all-round</text>
  </message>
  <message>
    <ts>2017-07-14T05:16:03.195008</ts>
    <user>U0EUHKVGB</user>
    <text>No, the others guess what you were after.</text>
  </message>
  <message>
    <ts>2017-07-14T05:16:24.201636</ts>
    <user>U0EUHKVGB</user>
    <text>They could not be _certain_ that is what you wanted.</text>
  </message>
  <message>
    <ts>2017-07-14T05:17:04.214378</ts>
    <user>U0EUHKVGB</user>
    <text>Anyway, this discussion is pointless. There is no need to get upset over clarification. Clarification is there to help _us_ help _you_.</text>
  </message>
  <message>
    <ts>2017-07-14T06:07:48.185404</ts>
    <user>U53TPMXRT</user>
    <text>If I may say so, I see the point of &lt;@U0EUHKVGB&gt; , because I think that he means a broader context. Like the use case you would need this comparison for. Anyway, here's my question:</text>
  </message>
  <message>
    <ts>2017-07-14T06:09:33.216221</ts>
    <user>U53TPMXRT</user>
    <text>In elm-tools/Parser `symbol` and `keyword` seem to do the exact same thing. Do they only have difference in meaning, or do they work somehow differently as well?</text>
  </message>
  <message>
    <ts>2017-07-14T06:11:42.254554</ts>
    <user>U17MSA88M</user>
    <text>&lt;@U53TPMXRT&gt; They give a different error message on failure</text>
  </message>
  <message>
    <ts>2017-07-14T06:12:01.260162</ts>
    <user>U17MSA88M</user>
    <text>&lt;https://github.com/elm-tools/parser/blob/5c83ce6a17887c229afe9732bed01e642433cfa0/src/Parser.elm#L560-L572&gt; if you're curious :wink:</text>
  </message>
  <message>
    <ts>2017-07-14T06:18:36.372248</ts>
    <user>U53TPMXRT</user>
    <text>Oh well, they seem a bit redundant to me if this is the only difference, but maybe I'm just not accustomed enough to the "elm way of things". Thank you for your answer!</text>
  </message>
  <message>
    <ts>2017-07-14T06:20:33.405284</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; so in Elm, if you add a feature further down your view tree, and that feature needs data that has never been needed anywhere in that view hierarchy, it is normal to then add that data as an argument to all those intermediate view functions so that final view can build itself?

I think if you remove "so that final view can build itself" the answer becomes clearer: "yes, because Elm views are nothing more than functions, and this is how function calls have worked since the beginning of programming." :smile: 

&amp;gt; As an app grows in complexity and new features are added, you could find yourself adding new arguments to many functions often enough that eventually it emerges to just pass whole model state through the view rather than pick disconnected parts of the central data model to separately string through the view tree.

I can see why that might be true in ClojureScript, but there's a crucial difference between Elm and ClojureScript here: Elm's compiler.

In Elm, this is a comically easy change to make. You add an argument to the view function that needs more data, and the compiler immediately jumps in and holds your hand through whatever changes need to happen to support that data getting there.

The whole process takes less time than I've spent writing this response, the odds of it causing a regression are practically zero, and you almost never need to touch a unit test other than for the single function at the end of the call chain.

I can see why this looks concerning from the outside, but after 150,000 lines of code I have yet to observe this materializing into a real problem in practice. :simple_smile: </text>
  </message>
  <message>
    <ts>2017-07-14T06:23:28.453339</ts>
    <user>U3SJEDR96</user>
    <text>The parser focusses on getting great error messages (and was written by Evan after rewriting the parser used in the compiler); so if it's simple to implement, creates clearer parsers and better error messages, then that's 3 reasons to have it :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T06:24:07.464068</ts>
    <user>U3SJEDR96</user>
    <text>`symbol "case"` and `keyword "{"` don't really make sense, after all</text>
  </message>
  <message>
    <ts>2017-07-14T06:24:20.467463</ts>
    <user>U3SJEDR96</user>
    <text>the first I could live with, tho</text>
  </message>
  <message>
    <ts>2017-07-14T06:48:51.862525</ts>
    <user>U53TPMXRT</user>
    <text>For me simply using `token` would be good as well, but I will see. Maybe after using it for a while I will start appreciating it! :wink:</text>
  </message>
  <message>
    <ts>2017-07-14T06:49:33.873464</ts>
    <user>U53TPMXRT</user>
    <text>Thanks for the answers everybody!</text>
  </message>
  <message>
    <ts>2017-07-14T07:47:16.795665</ts>
    <user>U5QJW0DDE</user>
    <text>this isn't really about refactoring or making it easier to add arguments, it's about having a code base where all your views are either taking lots of arguments for components that might be distant in the tree, or about passing whole model state. It sounds like in essence, it is common to have view functions with a large collection of arguments to support all the descendants, and that stringing along new arguments to all view functions in a tree would be common practice when you add new features to distant view children.</text>
  </message>
  <message>
    <ts>2017-07-14T07:49:22.829309</ts>
    <user>U5QJW0DDE</user>
    <text>clojure's compiler also warns when there are mismatches between arities or unknown symbol names; it's more about the conceptual burden of having a codebase where your views are handling and passing lots of disconnected state. I'm fine to accept that this is the only way to do it in Elm, but just thought I'd ask.</text>
  </message>
  <message>
    <ts>2017-07-14T07:55:10.924965</ts>
    <user>U0CL0AS3V</user>
    <text>more data doesn't necessitate more arguments; it can be accepting larger (possibly extensible) records, for example</text>
  </message>
  <message>
    <ts>2017-07-14T07:56:56.954270</ts>
    <user>U5QJW0DDE</user>
    <text>that would mean that either those records are stored in your model data in a way to match your user interface, or that you are constructing those records somewhere separately in your view chain, which would mean that some of your views at least are getting these extra arguments, parsing them, building data structures, to support view components far down the tree</text>
  </message>
  <message>
    <ts>2017-07-14T07:57:05.956594</ts>
    <user>U5QJW0DDE</user>
    <text>or, just pass whole model state to obviate these steps</text>
  </message>
  <message>
    <ts>2017-07-14T07:57:39.966456</ts>
    <user>U1FCZNA7R</user>
    <text>I'd like to render a box around text using SVG (with the text centered both horizontally/vertically). Here's my current progress: &lt;https://ellie-app.com/3KLrFNdtrYGa1/9&gt; 
After some basic research I'm getting to the conclusion that to center it precisely I need to somehow get the exact width of svg text element. Anyone here faced/solved this kind of problem before?</text>
  </message>
  <message>
    <ts>2017-07-14T07:57:50.969274</ts>
    <user>U0CL0AS3V</user>
    <text>but in general, I think it would be tough to argue that any language can have lower conceptual burden than "pure functions that each accept only what they need" :wink:</text>
  </message>
  <message>
    <ts>2017-07-14T07:58:27.979715</ts>
    <user>U0CL0AS3V</user>
    <text>anything fancier than that is going to increase conceptual burden, I claim</text>
  </message>
  <message>
    <ts>2017-07-14T07:59:27.996031</ts>
    <user>U5QJW0DDE</user>
    <text>in clojurescript, the pattern that has emerged is to entirely separate the process of delivering required data to a view function from the logic necessary to build that view, via pure functions called "subscriptions". it's been a great paradigm that has largely changed how UIs are build in cljs, because in cljs we used to do something a couple years ago that largely resembles the Elm Architecture but eventually a cleaner pattern emerged to combat the issues i've described</text>
  </message>
  <message>
    <ts>2017-07-14T08:00:31.016074</ts>
    <user>U0CL0AS3V</user>
    <text>I have yet to hear an actual issue though :grimacing: </text>
  </message>
  <message>
    <ts>2017-07-14T08:00:46.020752</ts>
    <user>U5QJW0DDE</user>
    <text>possibly because you haven't seen the alternatives :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T08:01:16.029672</ts>
    <user>U0CL0AS3V</user>
    <text>you keep implying that passing arguments between functions is a problematic experience and I fundamentally disagree</text>
  </message>
  <message>
    <ts>2017-07-14T08:02:48.056156</ts>
    <user>U0CL0AS3V</user>
    <text>I don't see the appeal in trying a more complex way to do the same thing</text>
  </message>
  <message>
    <ts>2017-07-14T08:02:56.058288</ts>
    <user>U5QJW0DDE</user>
    <text>do you not find that if you have a view tree that is, say, a hundred layers deep, it adds conceptual burden to pass a single arg through dozens of layers that will never touch or handle that data, just to support a new component you added near the bottom of your hierarchy? and if you add multiple components, you do this many times over until your view tree's functions are full of many disconnected arguments? or, that you must manually aggregate these instead into a composite structure, which more or less presents the same tedium?</text>
  </message>
  <message>
    <ts>2017-07-14T08:03:04.060367</ts>
    <user>U0CL0AS3V</user>
    <text>all else being equal, I prefer the simpler solution</text>
  </message>
  <message>
    <ts>2017-07-14T08:04:00.076248</ts>
    <user>U5QJW0DDE</user>
    <text>my argument is that the elm archicture complicates the process of feature development by making you touch many view functions to support views that they have no direct interaction with. that seems less simple or elegant to me.</text>
  </message>
  <message>
    <ts>2017-07-14T08:05:40.105176</ts>
    <user>U5QJW0DDE</user>
    <text>i used to need to write apps in this architecture, because that was the only real paradigm available in cljs a couple years ago. i really like static typing and thus am giving Elm a try, but it requires i go back to that older paradigm. i just miss some of the developments in UI design patterns that have emerged more recently.</text>
  </message>
  <message>
    <ts>2017-07-14T08:08:15.149584</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; do you not find that if you have a view tree that is, say, a hundred layers deep, it adds conceptual burden to pass a single arg through dozens of layers that will never touch or handle that data, just to support a new component you added near the bottom of your hierarchy?

I'm not saying it adds zero, I'm saying I don't see how you can add less than this.

What you are describing is a mechanical process that is easy to do. The result is that understanding each view function's dependencies is simple: I look at what arguments it accepts. That minimizes conceptual burden.

Any system that saves me mechanical work is necessarily going to hide that information. That is not avoidable. If you want to do less typing on the keyboard, you must make some dependencies a secret, thus making it conceptually harder to follow how state changes affect different parts of the page.</text>
  </message>
  <message>
    <ts>2017-07-14T08:09:33.172087</ts>
    <user>U0CL0AS3V</user>
    <text>I'm saying the mechanical cost is low, and I'd rather optimize for being able to look at each view function in isolation, and understand it by looking at what it accepts and what it returns</text>
  </message>
  <message>
    <ts>2017-07-14T08:10:41.191524</ts>
    <user>U0CL0AS3V</user>
    <text>the hardest problem with scaling is things getting too big to fit in your head, and this strategy optimizes for breaking things into smaller pieces, each of which can fit in my head even as they combine to form a larger whole</text>
  </message>
  <message>
    <ts>2017-07-14T08:11:31.206178</ts>
    <user>U5QJW0DDE</user>
    <text>that doesn't make sense to me because what a view needs to actually do might be much smaller than the data it receives. i guess it is just a difference of opinion. i don't think views should be responsible for handling large amounts of data that they do not directly touch, to me *that* adds conceptual burden -- you cannot just look a view's args and see what it does, because most of those args it will not handle directly</text>
  </message>
  <message>
    <ts>2017-07-14T08:15:06.269466</ts>
    <user>U3SJEDR96</user>
    <text>we are talking about `view : State -&amp;gt; Html` still, right?</text>
  </message>
  <message>
    <ts>2017-07-14T08:15:53.282842</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U3SJEDR96&gt; yes i'm talking about the complexities of building a large view tree in a big app</text>
  </message>
  <message>
    <ts>2017-07-14T08:15:53.283000</ts>
    <user>U3SJEDR96</user>
    <text>I still find it hard to think of that as something that could potentially use some piece of state that is *not* part of `State`</text>
  </message>
  <message>
    <ts>2017-07-14T08:16:24.291863</ts>
    <user>U5QJW0DDE</user>
    <text>i don't follow; i'm talking about different parts of the central app state</text>
  </message>
  <message>
    <ts>2017-07-14T08:16:51.299504</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; you cannot just look a view's args and see what it does, because most of those args it will not handle directly

What does "handle directly" mean here? They use that data to call other functions, and without it they couldn't call those other functions. Most of fp is functions calling other functions, so I'm not sure what the distinction is here.</text>
  </message>
  <message>
    <ts>2017-07-14T08:18:27.327546</ts>
    <user>U5QJW0DDE</user>
    <text>they are just passing data down, you have to inspect each view function in your tree to finally see where the data is getting used. that's not really simple in my opinion. all views take the same data that nearly none of them use.</text>
  </message>
  <message>
    <ts>2017-07-14T08:18:40.331521</ts>
    <user>U5QJW0DDE</user>
    <text>or, worse, some of them might use it while others not.</text>
  </message>
  <message>
    <ts>2017-07-14T08:18:53.335379</ts>
    <user>U5QJW0DDE</user>
    <text>it's just harder to follow data flow in a large app</text>
  </message>
  <message>
    <ts>2017-07-14T08:21:29.383267</ts>
    <user>U0CL0AS3V</user>
    <text>they do use it though</text>
  </message>
  <message>
    <ts>2017-07-14T08:21:40.386195</ts>
    <user>U0CL0AS3V</user>
    <text>they use it to call other functions!</text>
  </message>
  <message>
    <ts>2017-07-14T08:22:23.399175</ts>
    <user>U0CL0AS3V</user>
    <text>that's precisely what makes this the simplest system of data flow</text>
  </message>
  <message>
    <ts>2017-07-14T08:23:03.410920</ts>
    <user>U0CL0AS3V</user>
    <text>there is only one source of truth: which arguments get passed to which functions, that's it</text>
  </message>
  <message>
    <ts>2017-07-14T08:24:54.445383</ts>
    <user>U5QJW0DDE</user>
    <text>i think i've interacted with everyone enough to understand the elm way of thinking about this. that's fine, i just wanted to get to the bottom of the philosophy. it's a defendable design pattern because this was also how we did it in clojurescript for a couple years, it's a natural UI technique to arrive at. but it's been largely replaced by other patterns that i'm used to, and i just have to accept that absent writing my own version of html program, those patterns are not available to me in elm, and that's fine.</text>
  </message>
  <message>
    <ts>2017-07-14T08:25:53.464424</ts>
    <user>U0CL0AS3V</user>
    <text>fair enough! :hearts:</text>
  </message>
  <message>
    <ts>2017-07-14T08:26:50.482729</ts>
    <user>U0CL0AS3V</user>
    <text>thanks for the discussion :grinning:</text>
  </message>
  <message>
    <ts>2017-07-14T08:27:31.496454</ts>
    <user>U5QJW0DDE</user>
    <text>it probably means i might not be successful in convincing my company to switch from our current practices (because the re-frame library is really a great way to think about writing user interfaces), but perhaps for smaller components here and there we can test out elm.</text>
  </message>
  <message>
    <ts>2017-07-14T08:27:38.498627</ts>
    <user>U1SF6G7PA</user>
    <text>&lt;@U1FCZNA7R&gt; to get data from the rendered dom, you can add a port and extract the information using javascript.  it is also possible to extract properties of the dom tree when decoding events like it is done here &lt;https://medium.com/@debois/elm-the-dom-8c9883190d20&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T08:28:31.515280</ts>
    <user>U1SF6G7PA</user>
    <text>but this only works when you know that there is an event triggered</text>
  </message>
  <message>
    <ts>2017-07-14T08:28:33.515890</ts>
    <user>U5QJW0DDE</user>
    <text>check this out some time: &lt;https://github.com/Day8/re-frame&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T08:32:50.599693</ts>
    <user>U0FP80EKB</user>
    <text>(Just as an aside, in case you have anything to do with it, when I looked at the readme, I couldn’t make it past the first couple sections before I stopped reading out of annoyance at the writing style and the idea of trying to make it through the whole documentation in that style)</text>
  </message>
  <message>
    <ts>2017-07-14T08:33:40.615552</ts>
    <user>U5QJW0DDE</user>
    <text>that's true, it's rather verbose. unfortunately, great ideas are often accompanied by pomp</text>
  </message>
  <message>
    <ts>2017-07-14T08:35:20.647883</ts>
    <user>U0FP80EKB</user>
    <text>The greatest ideas are generally whispered. I dislike the “I’m a clever writer”-style of unclever writing. That’s just my personal style, though. I’m sure some people like it. ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-14T08:35:44.655621</ts>
    <user>U5QJW0DDE</user>
    <text>well, i can't say the greatest ideas are whispered. einstein was pretty full himself too.</text>
  </message>
  <message>
    <ts>2017-07-14T08:36:00.661195</ts>
    <user>U5QJW0DDE</user>
    <text>at least, according to the biographies</text>
  </message>
  <message>
    <ts>2017-07-14T08:36:55.679121</ts>
    <user>U0FP80EKB</user>
    <text>¯\_(ツ)_/¯   But past style, I prefer the documentation for a new thing for me to start with “Do you have this problem? We have a solution.” This says “here are a bunch of things about us, but I’m not going to relate it to your actual problem.” But again, my style, which is most definitely not shared by everyone.</text>
  </message>
  <message>
    <ts>2017-07-14T08:37:52.698029</ts>
    <user>U5QJW0DDE</user>
    <text>it's probably because re-frame is a very high level abstraction that is built on other abstractions that the community is already familiar with. you wouldn't likely be looking at re-frame if you didn't already understand what problems you had with state management or virtual doms that led you to consider re-frame</text>
  </message>
  <message>
    <ts>2017-07-14T08:38:24.708508</ts>
    <user>U5QJW0DDE</user>
    <text>re-frame is a bit of a word-of-mouth tool</text>
  </message>
  <message>
    <ts>2017-07-14T08:39:10.723552</ts>
    <user>U5QJW0DDE</user>
    <text>and actually re-frame shares a lot with the elm architecture, but it's the decoupling of view logic from data queries that makes it particularly nice to use</text>
  </message>
  <message>
    <ts>2017-07-14T08:39:21.727312</ts>
    <user>U5QJW0DDE</user>
    <text>but outgoing events are the same in elm and re-frame</text>
  </message>
  <message>
    <ts>2017-07-14T08:42:13.785755</ts>
    <user>U5QJW0DDE</user>
    <text>in re-frame, views do specific tasks, and don't require any data that is not needed for those tasks. the data that a view receives is in fact a pure function; many of the concepts would appeal to fp devs of any language. views can specify other views that need built, but don't need to know what those other views need for data; instead each view subscribes to pure functions that handle the query aspect. it makes for much cleaner and more elegant code, while also making all views highly re-usable.</text>
  </message>
  <message>
    <ts>2017-07-14T08:44:16.826597</ts>
    <user>U0FP80EKB</user>
    <text>I’m sure it is great and works well for you. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T08:45:18.847626</ts>
    <user>U0FP80EKB</user>
    <text>I’m not sure why you would be trying to get your company to move to Elm, though, if this is working well. I’d love to hear what thoughts you have that make you want to move away from clojurescript/re-frame to Elm. It sounds like re-frame is awesome.</text>
  </message>
  <message>
    <ts>2017-07-14T08:45:38.854672</ts>
    <user>U0FP80EKB</user>
    <text>That’s actually more interesting to me than re-frame, itself.</text>
  </message>
  <message>
    <ts>2017-07-14T08:47:07.885519</ts>
    <user>U1FCZNA7R</user>
    <text>&lt;@U1SF6G7PA&gt;, thank you, that will be helpful :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T08:48:34.915555</ts>
    <user>U5QJW0DDE</user>
    <text>Fair question. It's because I have an inner tug of war with typing. I like the benefits of static typing, but I also like the benefits of lisp and macros and dynamic manipulation of syntax. But I also write a lot of C++ for my job, so I'm used to compiler assistance. Clojurescript's compiler has gotten quite good and does many of the things you'd expect from a static type checker. But perhaps more than anything, i like the reduction of runtime errors that Elm provides. Though, I think that time saved in debugging is made up a bit in the extra time that JS interaction can require: there are some stellar JS libraries out there. So it's a give and take, and ultimately we are a company very open to experimentation, and Elm is a reasonable contender.</text>
  </message>
  <message>
    <ts>2017-07-14T08:48:35.916144</ts>
    <user>U0FP80EKB</user>
    <text>&lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1500035251496454?thread_ts=1499957492.389554&amp;amp;cid=C0CJ3SBBM&gt;

This fascinates me, especially after you’ve talked about how great iframe is relative to the elm architecture. Could you elaborate on why you would want to do this?</text>
  </message>
  <message>
    <ts>2017-07-14T08:49:25.933529</ts>
    <user>U0FP80EKB</user>
    <text>If what you are looking for is primarily a different form of typing, then perhaps something like purescript is the way to go?</text>
  </message>
  <message>
    <ts>2017-07-14T08:49:33.936461</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0FP80EKB&gt; i wrote that as a consequence of learning that the elm architecture doesn't really support some of the patterns in re-frame -- i had read how elm and re-frame were similar and had assumed I could do some of the same things.</text>
  </message>
  <message>
    <ts>2017-07-14T08:50:32.957595</ts>
    <user>U5QJW0DDE</user>
    <text>but purescript does not have built-in persistent data structures which I consider quite necessary for proper FP. clojurescript has a great set of immutable data structures that are extremely fast and wonderful, and I'd hate to give up the patterns you can use with data like that.</text>
  </message>
  <message>
    <ts>2017-07-14T08:50:50.964039</ts>
    <user>U0FP80EKB</user>
    <text>My recommendation would be to build something in Elm and see how it feels, rather than assuming that there aren’t things in Elm which help with any problems you found in the old clojurescript libraries.</text>
  </message>
  <message>
    <ts>2017-07-14T08:51:20.974928</ts>
    <user>U5QJW0DDE</user>
    <text>i have built several small apps as tests of Elm and was trying out the idioms i'm used to in those apps, which led to all these questions from me.</text>
  </message>
  <message>
    <ts>2017-07-14T08:51:52.986505</ts>
    <user>U0FP80EKB</user>
    <text>I’d recommend taking an attitude more like “Hey, Elm seems to exhibit certain qualities that I worry about, but when I bring them up, people are pushing back that it doesn’t seem to an issue in Elm. Perhaps I should see whether my underlying assumptions from clojurescript hold up in Elm, as well.”</text>
  </message>
  <message>
    <ts>2017-07-14T08:52:41.004310</ts>
    <user>U0FP80EKB</user>
    <text>Building small apps, then talking about how they will have the same problems at large scale as you did in cljs can be potentially problematic.</text>
  </message>
  <message>
    <ts>2017-07-14T08:52:44.005284</ts>
    <user>U5QJW0DDE</user>
    <text>it's not like it would be a super major problem: i wrote apps in clojurescripts Om library back in '14 and '15 that were more or less identical to the elm architecture -- as did many companies -- and i could do so again. but when the design patterns evolved in that community, i found them so nice that going back to those older patterns requires some pause.</text>
  </message>
  <message>
    <ts>2017-07-14T08:53:22.018925</ts>
    <user>U5QJW0DDE</user>
    <text>and really, there is much more in common between elm and clojurescript than probably either community realizes.</text>
  </message>
  <message>
    <ts>2017-07-14T08:53:23.019207</ts>
    <user>U0FP80EKB</user>
    <text>The Elm language and Clojurescript have different capabilities, different aspects to them. Perhaps the same issues don’t come up in the same way.</text>
  </message>
  <message>
    <ts>2017-07-14T08:53:25.020251</ts>
    <user>U5QJW0DDE</user>
    <text>or cares to admit :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T08:56:48.095253</ts>
    <user>U0FP80EKB</user>
    <text>Well, as with most things, my response is always ¯\_(ツ)_/¯  I bet you’d find that there are aspects of Elm which make your problems not as pronounced as in clojurescript, just as I’m sure there are aspects of clojurescript that make certain difficulties in Elm easier.</text>
  </message>
  <message>
    <ts>2017-07-14T08:58:00.122559</ts>
    <user>U5QJW0DDE</user>
    <text>i bet you have this somewhere quite ready all the time, ready for pasting: ¯\_(ツ)_/¯ :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T08:58:12.126904</ts>
    <user>U0FP80EKB</user>
    <text>For example, supporting functions with side effects is something I understand clojurescript does (via js interop). Elm doesn’t support that at all (no js interop). So, those qualities make some things more complex and some things more simple. Perhaps your worry about having lots of layers of functions on top of each other is one of those situations, as well.</text>
  </message>
  <message>
    <ts>2017-07-14T08:58:41.138404</ts>
    <user>U5QJW0DDE</user>
    <text>no, the js interop issue is entirely separate from what i've been discussing here.</text>
  </message>
  <message>
    <ts>2017-07-14T08:58:42.138742</ts>
    <user>U0FP80EKB</user>
    <text>I have ¯\_(ツ)_/¯on my clipboard. I find that I use it an awful lot in technical conversations with people. (incidentally, slack has it as a built-in slash command, too)</text>
  </message>
  <message>
    <ts>2017-07-14T08:59:05.147514</ts>
    <user>U0FP80EKB</user>
    <text>I’m using it as an example of different qualities supporting different solutions.</text>
  </message>
  <message>
    <ts>2017-07-14T08:59:36.159683</ts>
    <user>U0FP80EKB</user>
    <text>For example, getting the current date is more complex in Elm, because you can’t have side effects in your functions. I would assume that in clojurescript, you could write a function that would return it.</text>
  </message>
  <message>
    <ts>2017-07-14T08:59:51.165499</ts>
    <user>U0FP80EKB</user>
    <text>That’s an example of a complexity that different choices address in different ways.</text>
  </message>
  <message>
    <ts>2017-07-14T08:59:57.168185</ts>
    <user>U0FP80EKB</user>
    <text>Perhaps this is one of those.</text>
  </message>
  <message>
    <ts>2017-07-14T09:00:12.175666</ts>
    <user>U3GD698R5</user>
    <text>&lt;@U5QJW0DDE&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T09:00:20.179258</ts>
    <user>U5QJW0DDE</user>
    <text>i've heard that some browser user events are not accessible in Elm. is that true? i don't now which ones, but i'm curious.</text>
  </message>
  <message>
    <ts>2017-07-14T09:00:45.190649</ts>
    <user>U0FP80EKB</user>
    <text>I don’t know. I’ve been able to access all the ones I’ve needed.</text>
  </message>
  <message>
    <ts>2017-07-14T09:01:32.209929</ts>
    <user>U0FP80EKB</user>
    <text>Again, I’d recommend rather than finding the problems with Elm, join the community, start building, ask how Elm solves certain problems, rather than taking the approach that the way Elm solves certain problems is wrong.</text>
  </message>
  <message>
    <ts>2017-07-14T09:02:12.226375</ts>
    <user>U5QJW0DDE</user>
    <text>well i've been doing all those things; and hopefully it's been more of "how do you do this in elm that i'm used to" vs. "elm is wrong"</text>
  </message>
  <message>
    <ts>2017-07-14T09:03:28.257077</ts>
    <user>U0FP80EKB</user>
    <text>You’ve spent the past handful of days pointing out why Elm is wrong, not “I’m running into this concrete problem, how does Elm solve it.” You bring up things, people respond that “Elm does it this way” and your response pretty much is “that’s wrong, clojurescript used to do it that way, but we moved on to something better.”</text>
  </message>
  <message>
    <ts>2017-07-14T09:04:46.287898</ts>
    <user>U0FP80EKB</user>
    <text>I realize that there are certain things you are used to in cljs and re-frame. That’s fantastic. Elm is different. The language has things that potentially make it easier to work this way. A lot of the solutions are “things are just functions, use them like that”</text>
  </message>
  <message>
    <ts>2017-07-14T09:05:13.298778</ts>
    <user>U5QJW0DDE</user>
    <text>asking how to avoid passing whole model state or passing many extra arguments was the goal; sorry if it came across differently to you. i have received a fair amount of push-back, so perhaps that shifted the tone of the conversation on all sides along the way. sorry about that.</text>
  </message>
  <message>
    <ts>2017-07-14T09:05:52.314927</ts>
    <user>U0FP80EKB</user>
    <text>I have a sense that you think in terms of nested components. So, you might have a container that has 4 components in it. Those components might have sub components. Etc. And, thus, you have a big tree. Elm doesn’t build like this. We don’t work in “nested components,” so the conceptual issue of passing data through parent components isn’t there.</text>
  </message>
  <message>
    <ts>2017-07-14T09:06:19.325462</ts>
    <user>U3SJEDR96</user>
    <text>Heh, I for one haven't seen this perceived "Elm is wrong" coming from &lt;@U5QJW0DDE&gt; and actually think that, given the circumstances, they've behaved admirably.</text>
  </message>
  <message>
    <ts>2017-07-14T09:06:41.334338</ts>
    <user>U3GD698R5</user>
    <text>&lt;@U5QJW0DDE&gt; did you take a look at elm-ui? it uses a different pattern for independent components based on subscriptions. I'm not sure if that is something that can fit your design constraints but maybe help you avoiding deep trees on your view functions. IMO changing functions signatures and even passing the entire model to the more external ones is not big deal in elm, but honestly I didn't make such big apps on Elm yet.</text>
  </message>
  <message>
    <ts>2017-07-14T09:06:51.338438</ts>
    <user>U5QJW0DDE</user>
    <text>A view that builds other views is all we are talking about, in either language. Whether it's called nesting or not, it's the same idea.</text>
  </message>
  <message>
    <ts>2017-07-14T09:07:17.349014</ts>
    <user>U0FP80EKB</user>
    <text>I don’t think in terms of “views that build other views”</text>
  </message>
  <message>
    <ts>2017-07-14T09:07:19.349761</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U3GD698R5&gt; yes i took a look at it briefly; it doesn't behave on touch screens, so i didn't give it too much further consideration. but i should look at the source</text>
  </message>
  <message>
    <ts>2017-07-14T09:07:38.357046</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U0FP80EKB&gt; yes, but view functions do call out to other view functions, right?</text>
  </message>
  <message>
    <ts>2017-07-14T09:07:42.358599</ts>
    <user>U0FP80EKB</user>
    <text>I think that is a fundamental difference. For my systems, I have one view.</text>
  </message>
  <message>
    <ts>2017-07-14T09:07:54.363697</ts>
    <user>U5QJW0DDE</user>
    <text>but inside that one view, you call other view functions?</text>
  </message>
  <message>
    <ts>2017-07-14T09:07:56.364568</ts>
    <user>U0FP80EKB</user>
    <text>I have one view function.</text>
  </message>
  <message>
    <ts>2017-07-14T09:08:14.371730</ts>
    <user>U0FP80EKB</user>
    <text>I call other functions, but there is nothing that makes them a “view function”</text>
  </message>
  <message>
    <ts>2017-07-14T09:08:36.380385</ts>
    <user>U5QJW0DDE</user>
    <text>that must be a rather large function</text>
  </message>
  <message>
    <ts>2017-07-14T09:08:40.382074</ts>
    <user>U0FP80EKB</user>
    <text>This is what &lt;@U0CL0AS3V&gt; was getting at. It is just functions. Sometimes you pass the dependencies in. Sometimes they depend on other functions.</text>
  </message>
  <message>
    <ts>2017-07-14T09:09:16.396443</ts>
    <user>U0FP80EKB</user>
    <text>Nope. My functions generally are pretty small. &amp;lt;10 lines, although formatting can make them longer vertically.</text>
  </message>
  <message>
    <ts>2017-07-14T09:09:37.404845</ts>
    <user>U5QJW0DDE</user>
    <text>you keep assuming that i am new to what functions are; all ui development in clojurescript is also just functions; they are both immutable, functional languages</text>
  </message>
  <message>
    <ts>2017-07-14T09:09:44.407568</ts>
    <user>U2FL3ARLG</user>
    <text>aren’t the text messages centered properly in that example? (edit: I see the problem after changing the font size)</text>
  </message>
  <message>
    <ts>2017-07-14T09:10:25.424708</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U1FCZNA7R&gt; i had a similar problem with a chat app - i needed the height of each message - it was variable because a message could contain more or less text inside. So this height calculation can't be done in elm - because is only known after that text is rendered.

You pretty much have the same problem from what i understand. You have a text - and you can't predict it's dimensions - without rendering it first. Because once you know dimensions and absolute positioning - you can draw that rectangle in such a way that will leave space and be centered and what not.

I solved this by having 2 states: `Ready` and `NotReady` for each of my chat-messages. In your case you can have a ready and not ready state as well ex: 
`type MySvgText = TextNotReady String | TextReady String Width Height Top Left`

If that text is added dynamically: 
1. add text to the model with `NotReady` state - and in the view only the text will be rendered - and put `visibility hidden` with css - to not show anything to the user - unthil will be ready.. You also add an id to it. Also at this point you will not draw any rectangle around it.
2.  you fire a cmd (cmd port ) - to js to calculate the position or whatever you need from that rendered text. SetTimeout of 10 ms worked for me.
Ex: 
```
... 
     CreateText text -&amp;gt; 
            {myText  = TextNotReady  text } =&amp;gt; [ jsSendMeTextStuff id ]
```
Then when the js comes back - ( subscription port)
You receive a message with the position and width and what you want -&amp;gt; you update in the model like so:
```
... 
JsSentTextStuff width height top left -&amp;gt; 
      {myText = TextReady text width height top left } -- not in this order :)) - and the text arg you extract it form the previous model.
```
And now in the view you have all the info you need to draw a box around it - in the appropriate place. Also this time the text will have `visibility : true` .

All this will happen very fast `10 ms` - so nothing will actually be changed on the screen.

And if this text is not aded dinamically - then you manually set it to NotReady inside your init - and fire that command inside an `Initialize` message, or something.
All this is kind of complicated - but i couldn't find a better solution in my case.</text>
  </message>
  <message>
    <ts>2017-07-14T09:10:59.438442</ts>
    <user>U0FP80EKB</user>
    <text>My only assumption is that you are thinking in terms of a different architecture, a different way of thinking about things.</text>
  </message>
  <message>
    <ts>2017-07-14T09:12:07.465821</ts>
    <user>U5QJW0DDE</user>
    <text>for example, the elm-spa-example is also "nested components" as far as I'm concerned.</text>
  </message>
  <message>
    <ts>2017-07-14T09:12:38.478320</ts>
    <user>U0FP80EKB</user>
    <text>But, in the end, I’d fall back on my recommendation of building in Elm. It is delightful. When you run into the issues that re-frame solves, and the answer is “that isn’t really a problem here” look to understand why not instead of digging in your heels that it definitely is a problem.</text>
  </message>
  <message>
    <ts>2017-07-14T09:13:21.495478</ts>
    <user>U0FP80EKB</user>
    <text>But, I’ll bow out of the conversation.</text>
  </message>
  <message>
    <ts>2017-07-14T09:14:16.517946</ts>
    <user>U5QJW0DDE</user>
    <text>i'm obviously not generating problems for the sake of finding problems; we are all too busy for that. i'd rather take 2 days to ask serious questions, rather than go down a similar path i've been down before with what is essentially the same architecture, and I already know what the stumbling blocks were, so I'm just getting some advance information about what to expect in Elm. perhaps I will be convinced to go down that path again with Elm</text>
  </message>
  <message>
    <ts>2017-07-14T09:14:33.525384</ts>
    <user>U0FP80EKB</user>
    <text>(as a last thought, though, the problems you are describing in the `view` function exist exactly the same in the `update` function)</text>
  </message>
  <message>
    <ts>2017-07-14T09:16:12.568283</ts>
    <user>U0FP80EKB</user>
    <text>I think an interesting thing would be to look at the `update` function in the same light with the same concerns and see how things are solved there. I tend to solve things in exactly the same way between `update` and `view`</text>
  </message>
  <message>
    <ts>2017-07-14T09:16:55.586581</ts>
    <user>U0FP80EKB</user>
    <text>that might isolate the issue from the whole “nested views” and “nested components” semantic question.</text>
  </message>
  <message>
    <ts>2017-07-14T09:17:38.605188</ts>
    <user>U0FP80EKB</user>
    <text>That actually does sound more interesting to understand what techniques are used to solve this same dependency issue in the `update` function. There also is a lot more thought around it in the Elm community, I think.</text>
  </message>
  <message>
    <ts>2017-07-14T09:18:23.625122</ts>
    <user>U0FP80EKB</user>
    <text>When &lt;@U0CL0AS3V&gt; talks about “these are just functions” that highlights the parallel between `update` and `view`</text>
  </message>
  <message>
    <ts>2017-07-14T09:18:48.635834</ts>
    <user>U0FP80EKB</user>
    <text>and that the solutions can be very similar</text>
  </message>
  <message>
    <ts>2017-07-14T09:30:08.943781</ts>
    <user>U4Z4NEUQG</user>
    <text>I am decoding the above json object, and how to sort the markers decoding</text>
  </message>
  <message>
    <ts>2017-07-14T09:32:39.016207</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U3GD698R5&gt; incidentally that elm-ui doesn't even visually render on a touchscreen properly, which is odd. somehow weird little gradient blotches are introduced on the ui components when viewing on an ipad, but not on a desktop.</text>
  </message>
  <message>
    <ts>2017-07-14T09:32:46.019683</ts>
    <user>U4Z4NEUQG</user>
    <text>nvm, found out with `Decode.map`</text>
  </message>
  <message>
    <ts>2017-07-14T09:32:50.021138</ts>
    <user>U4Z4NEUQG</user>
    <text>must be tired</text>
  </message>
  <message>
    <ts>2017-07-14T09:33:26.038196</ts>
    <user>U3GD698R5</user>
    <text>wow!</text>
  </message>
  <message>
    <ts>2017-07-14T11:24:19.660063</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U5J0H2NS2&gt; Thanks :slightly_smiling_face: Yes it it intended, I’m trying to explain the changes you’d have to make in your top-level update and view if you changed your `Html Page1.Messages.Msg` to `Html Msg`

Just so if people were on the old pattern and wanted to move to the new pattern, they’d know what they need to change</text>
  </message>
  <message>
    <ts>2017-07-14T11:26:03.719969</ts>
    <user>U1CE9DL9H</user>
    <text>is there a stable and efficient way to get a value modulo 2pi? `asin &amp;lt;&amp;lt; sin` is not great</text>
  </message>
  <message>
    <ts>2017-07-14T11:29:34.838774</ts>
    <user>U681TBBUP</user>
    <text>Just a thought, you could go to deg and back</text>
  </message>
  <message>
    <ts>2017-07-14T11:31:18.898688</ts>
    <user>U681TBBUP</user>
    <text>Depends on what accuracy you need</text>
  </message>
  <message>
    <ts>2017-07-14T11:32:22.935262</ts>
    <user>U4872964V</user>
    <text>`mod2pi x = x - toFloat (truncate (x / (2*pi))) * 2*pi`</text>
  </message>
  <message>
    <ts>2017-07-14T11:32:58.956296</ts>
    <user>U4872964V</user>
    <text>only works for positive x though</text>
  </message>
  <message>
    <ts>2017-07-14T11:33:50.986761</ts>
    <user>U1CE9DL9H</user>
    <text>how does it fail for negative x?</text>
  </message>
  <message>
    <ts>2017-07-14T11:33:53.988398</ts>
    <user>U4872964V</user>
    <text>should use `floor` instead</text>
  </message>
  <message>
    <ts>2017-07-14T11:33:55.989377</ts>
    <user>U4872964V</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T11:34:40.015169</ts>
    <user>U4872964V</user>
    <text>or wait, truncate is right, ignore everything i say</text>
  </message>
  <message>
    <ts>2017-07-14T11:39:02.162807</ts>
    <user>U5QJW0DDE</user>
    <text>Here is a short presentation by one of the developers at Khan Academy about different approaches to managing app state, you might find it interesting: &lt;https://m.youtube.com/watch?v=-jwQ3sGoiXg&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T11:42:13.267954</ts>
    <user>U5QJW0DDE</user>
    <text>I think that in general the exploration of these problems across the industry in different languages and frameworks is quite interesting to study. I don't think anyone should think of it as a solved problem, and everyone can learn something from each other. </text>
  </message>
  <message>
    <ts>2017-07-14T14:10:57.937005</ts>
    <user>U40983YAE</user>
    <text>How do I index into a String?</text>
  </message>
  <message>
    <ts>2017-07-14T14:11:31.954575</ts>
    <user>U40983YAE</user>
    <text>at 3 "abcdef" == 'd'</text>
  </message>
  <message>
    <ts>2017-07-14T14:14:01.031692</ts>
    <user>U23SA861Y</user>
    <text>depends what you are trying to do with it, there are some string helper functions in the String package</text>
  </message>
  <message>
    <ts>2017-07-14T14:14:27.045666</ts>
    <user>U3FJSB596</user>
    <text>But not that one</text>
  </message>
  <message>
    <ts>2017-07-14T14:14:45.055051</ts>
    <user>U23SA861Y</user>
    <text>well yes and no, there is a substring function which you can then convert to a char</text>
  </message>
  <message>
    <ts>2017-07-14T14:15:04.065179</ts>
    <user>U23SA861Y</user>
    <text>remember, elm forces you to handle all cases such as what if the string isn't 3 long</text>
  </message>
  <message>
    <ts>2017-07-14T14:15:19.073131</ts>
    <user>U40983YAE</user>
    <text>I suppose I can just String.toList it and then traverse that</text>
  </message>
  <message>
    <ts>2017-07-14T14:16:15.102700</ts>
    <user>U40983YAE</user>
    <text>True, but then: at 3 "abcdef" == Some 'd'</text>
  </message>
  <message>
    <ts>2017-07-14T14:16:35.113080</ts>
    <user>U40983YAE</user>
    <text>(I mean Just 'd' of course)</text>
  </message>
  <message>
    <ts>2017-07-14T14:17:27.139776</ts>
    <user>U40983YAE</user>
    <text>Mmm yeah, but that allocates an unnecessary String.</text>
  </message>
  <message>
    <ts>2017-07-14T14:17:43.147533</ts>
    <user>U4872964V</user>
    <text>fun fact: chars are implemented as strings of length 1</text>
  </message>
  <message>
    <ts>2017-07-14T14:18:08.160642</ts>
    <user>U23SA861Y</user>
    <text>don't worry about performance until you have to</text>
  </message>
  <message>
    <ts>2017-07-14T14:18:22.167812</ts>
    <user>U23SA861Y</user>
    <text>the virtual dom diff is going to like be the bottle neck anyway</text>
  </message>
  <message>
    <ts>2017-07-14T14:18:47.181046</ts>
    <user>U3FJSB596</user>
    <text>&lt;@U40983YAE&gt; Don’t know what you mean by “that allocates an unnecessary String"</text>
  </message>
  <message>
    <ts>2017-07-14T14:20:21.229891</ts>
    <user>U40983YAE</user>
    <text>Yeah, I don't care too much about performance for this scenario.</text>
  </message>
  <message>
    <ts>2017-07-14T14:35:59.722424</ts>
    <user>U1FCZNA7R</user>
    <text>Great, thank you for detailed explanation. I'm going to implement what you're suggesting. I already have some experience with ports so it shouldn't be that hard :wink:</text>
  </message>
  <message>
    <ts>2017-07-14T15:29:54.297565</ts>
    <user>U0CL0AS3V</user>
    <text>I don't think of it as a globally solved problem personally. I worry that I'm coming across as unwelcoming by pushing back so hard, but at the same time this is one of the Elm community values: "choose the simplest approach that works well."

This approach has been working well for us. The re-frame README says it's been proven at scale in large CLJS apps 40k LoC, but besides our 150k of Elm, I know of other 40-50k LoC teams that aren't doing it and don't see a need for it either.

Whenever any more complex approach comes along than the status quo, our reflex is to push back. To insist on understanding the problem it will solve, and to be extremely skeptical of theoretical problems that have either never been observed in the wild, or which have known solutions that are simpler.

That's the only way to maintain simplicity. Complex new things are shiny, and without pushback things naturally gravitate towards more complex solutions. I hope the spirit of that is coming across, and my apologies if it's not! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T16:44:22.224359</ts>
    <user>U1890CB1U</user>
    <text>I've got a question that I'm sure has been asked to death. Why are native packages not documented if so many packages already in the elm ecosystem reach for it? Package.elm-lang has a couple that I think it could get away without doing, so why isn't there documentation to fill that gap ourselves? Obviously I understand that runtime errors are something to be avoided, but shouldn't the official resources try to lead by example by not using the native modules?</text>
  </message>
  <message>
    <ts>2017-07-14T16:45:52.262366</ts>
    <user>U23SA861Y</user>
    <text>the basic premise is that if you write native you have to be really, really sure you aren't accidentally pulling in state</text>
  </message>
  <message>
    <ts>2017-07-14T16:46:50.286796</ts>
    <user>U23SA861Y</user>
    <text>I believe in 0.19 significantly more of the stdlib will be native elm, however when you are bootstrapping it makes sense to drop to native.</text>
  </message>
  <message>
    <ts>2017-07-14T16:48:22.324975</ts>
    <user>U5QJW0DDE</user>
    <text>I can appreciate that, thanks. And hopefully, likewise, my questions have not been interpreted as anything more than they genuinely are, which is an attempt to understand the way you all are approaching complex interface development, and how Elm handles common challenges in this arena.</text>
  </message>
  <message>
    <ts>2017-07-14T16:49:02.341371</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U1890CB1U&gt; I think the model is that you always want to have a "pure" elm module mediate the native one.</text>
  </message>
  <message>
    <ts>2017-07-14T16:58:50.581854</ts>
    <user>U1890CB1U</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-07-14T16:59:09.589523</ts>
    <user>U1890CB1U</user>
    <text>I guess we'll see if they're really needed in 0.19</text>
  </message>
  <message>
    <ts>2017-07-14T17:03:22.693204</ts>
    <user>U601ELFEG</user>
    <text>anyone got a good example of a module that needs to do several round trips through a `Cmd` and a `Sub` to get something done... and then offers essentially a `Cmd` and `Sub` like interface back to other (higher up) client modules?</text>
  </message>
  <message>
    <ts>2017-07-14T17:11:14.871751</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U1890CB1U&gt; you're right that it get asked a lot; Evan answered it here - hope it helps! &lt;https://groups.google.com/forum/#!msg/elm-dev/bAHD_8PbgKE/X-z67wTdCAAJ&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T17:11:33.878263</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U1890CB1U&gt; I'm curious which things you feel should _not_ be implemented in native but currently are? (I can think of some that use more native than strictly required, but curious nevertheless)</text>
  </message>
  <message>
    <ts>2017-07-14T17:11:59.887364</ts>
    <user>U1890CB1U</user>
    <text>:heart: thanks &lt;@U0CL0AS3V&gt;. I'm sitting here using redux loop at work wishing I could be writing elm haha</text>
  </message>
  <message>
    <ts>2017-07-14T17:14:36.941245</ts>
    <user>U0CL0AS3V</user>
    <text>oops, wrong link - fixed!</text>
  </message>
  <message>
    <ts>2017-07-14T20:43:49.646673</ts>
    <user>U2SR9DL7Q</user>
    <text>Hey. I've been fiddling with the Random module for a few hours, and it's gotten to the point where the compiler has abandoned me. I'm trying to 'shuffle' a List of objects. Does anyone have any ideas on the best way to do that?</text>
  </message>
  <message>
    <ts>2017-07-14T20:54:20.710746</ts>
    <user>U236M9FH9</user>
    <text>&lt;@U2SR9DL7Q&gt; I see two ways, generate an Int to get a position &amp;amp; move that position to another list. Repeat until initial list is empty. Or generate an Int, split into two lists and flip them around(`(xs, ys) -&amp;gt; ys ++ xs`), repeat however many times you want</text>
  </message>
  <message>
    <ts>2017-07-14T20:57:22.728960</ts>
    <user>U236M9FH9</user>
    <text>Or split into two lists and build a new list by alternating between the two. And then combine them all &amp;amp; you have every way I know how to shuffle cards :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-14T20:57:36.730423</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U236M9FH9&gt; I was attempting the first way... but the recursion was causing trouble. I would generate an int to get a position, get the element at that position and then append a new list that was the two slices in front of and behind the index appended together.</text>
  </message>
  <message>
    <ts>2017-07-14T20:59:44.742615</ts>
    <user>U2SR9DL7Q</user>
    <text>the second method seems interesting... but since the list always starts the same way, I'd have to do a fair amount of iterations. The third method would generate the same list every time unfortunately, since the initial list is always the same.</text>
  </message>
  <message>
    <ts>2017-07-14T21:04:57.774654</ts>
    <user>U236M9FH9</user>
    <text>If you write something like
`getAtPosition : Int -&amp;gt; List a -&amp;gt; (a, List a, List a)` which returns something like `(atPosition, leftOf, rightOf)` then you can do something like `shuffleList initial processed = shuffleList (leftOf ++ rightOf) (atPosition :: processed)` until `initial` is empty</text>
  </message>
  <message>
    <ts>2017-07-14T21:05:06.775636</ts>
    <user>U2SR9DL7Q</user>
    <text>I really like the second idea. Very clean. No having to deal with emptying lists.</text>
  </message>
  <message>
    <ts>2017-07-14T21:06:16.782199</ts>
    <user>U681TBBUP</user>
    <text>Is that the pure functional equivalent of a fisher yates?</text>
  </message>
  <message>
    <ts>2017-07-14T21:10:13.803831</ts>
    <user>U236M9FH9</user>
    <text>I suppose? I just made that up &amp;amp; had to wiki fisher yates, so it's probably a "naive" solution. But you need a seed from the outside to step the generator.</text>
  </message>
  <message>
    <ts>2017-07-14T21:10:38.806197</ts>
    <user>U236M9FH9</user>
    <text>So depends on your definition of pure :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-14T21:15:00.829307</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U236M9FH9&gt; thanks</text>
  </message>
  <message>
    <ts>2017-07-14T21:26:16.889115</ts>
    <user>U681TBBUP</user>
    <text>&lt;@U236M9FH9&gt; how could the second option ever arrive at `(2, 1, 3)` from the input `(1, 2, 3)`?</text>
  </message>
  <message>
    <ts>2017-07-14T21:29:37.905506</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U681TBBUP&gt; if it generates index 0, you get [2,3,1]. if it generates index 1, you get (3,1,2). If it generates index 2, you get (1,2,3) again. But you'd run it several times. So you can't get (2,1,3) on the first pass, but on subsequent ones yes.</text>
  </message>
  <message>
    <ts>2017-07-14T21:32:05.919362</ts>
    <user>U681TBBUP</user>
    <text>If there is list reversal I can see how you would get there but simply swapping the two sublists doesn't seem to cut it unless I'm missing something</text>
  </message>
  <message>
    <ts>2017-07-14T21:34:08.929179</ts>
    <user>U2SR9DL7Q</user>
    <text>I think &lt;@U236M9FH9&gt; 's card analogy applies. It's like cutting a deck at different places repeatably, and flipping the cut stacks every time. You may or may not shift every card. But you can achieve every possible permutation.</text>
  </message>
  <message>
    <ts>2017-07-14T21:35:27.935548</ts>
    <user>U236M9FH9</user>
    <text>I think benlogo's correct, with 3 elements, you're just shifting everything left or right</text>
  </message>
  <message>
    <ts>2017-07-14T21:36:33.940839</ts>
    <user>U681TBBUP</user>
    <text>Grab three stickies or something and try to get to `(2, 1, 3)`, it's impossible</text>
  </message>
  <message>
    <ts>2017-07-14T21:39:43.955661</ts>
    <user>U681TBBUP</user>
    <text>In general you can never reverse any list of size `n&amp;gt;2`</text>
  </message>
  <message>
    <ts>2017-07-14T21:39:51.956299</ts>
    <user>U2SR9DL7Q</user>
    <text>I have three cards (1,2 and 3). I cut between the second and third  card, flip and stack, so now have (3,1,2). I cut between the 2nd and 3rd again... (2,3,1)... hmmm. and then it repeats...</text>
  </message>
  <message>
    <ts>2017-07-14T21:43:43.974272</ts>
    <user>U1AN4JRFV</user>
    <text>Its way too late for me, but what about this: create n random numbers, tuple up, sort by 2nd, untuple... If that makes any sense...</text>
  </message>
  <message>
    <ts>2017-07-14T21:44:34.978314</ts>
    <user>U681TBBUP</user>
    <text>&lt;@U1AN4JRFV&gt; issue is you don't necessarily have all the indices</text>
  </message>
  <message>
    <ts>2017-07-14T21:45:27.982510</ts>
    <user>U681TBBUP</user>
    <text>I may have misinterpreted what you said</text>
  </message>
  <message>
    <ts>2017-07-14T21:45:35.983158</ts>
    <user>U1AN4JRFV</user>
    <text>Where is an Index mentioned? Told you, it was late...</text>
  </message>
  <message>
    <ts>2017-07-14T21:46:11.985949</ts>
    <user>U681TBBUP</user>
    <text>Ah I see what you mean, that seems like it would work</text>
  </message>
  <message>
    <ts>2017-07-14T21:46:57.989482</ts>
    <user>U2SR9DL7Q</user>
    <text>Can someone explain what &lt;@U1AN4JRFV&gt; means? I'm not clear on method.</text>
  </message>
  <message>
    <ts>2017-07-14T21:47:19.991278</ts>
    <user>U236M9FH9</user>
    <text>`shuffleList initialList randomList = zip initialList randomList |&amp;gt; List.sortBy Tuple.second |&amp;gt; List.map Tuple.first`</text>
  </message>
  <message>
    <ts>2017-07-14T21:47:31.992176</ts>
    <user>U681TBBUP</user>
    <text>He is saying take a list `[a, b, c, d, ...]` and zip it with a list of random integers `[r1, r2, r3, r4, ...]` then sort by the random list</text>
  </message>
  <message>
    <ts>2017-07-14T21:48:25.996585</ts>
    <user>U681TBBUP</user>
    <text>However this is `O(n*log(n))`</text>
  </message>
  <message>
    <ts>2017-07-14T21:49:00.999399</ts>
    <user>U2SR9DL7Q</user>
    <text>mmmm... But then I would need to make a list of unique random integers.</text>
  </message>
  <message>
    <ts>2017-07-14T21:49:10.000402</ts>
    <user>U681TBBUP</user>
    <text>They don't have to be unique</text>
  </message>
  <message>
    <ts>2017-07-14T21:49:17.001082</ts>
    <user>U1AN4JRFV</user>
    <text>Nor integers</text>
  </message>
  <message>
    <ts>2017-07-14T21:50:07.005326</ts>
    <user>U2SR9DL7Q</user>
    <text>... they don't do they...</text>
  </message>
  <message>
    <ts>2017-07-14T21:50:29.007187</ts>
    <user>U1AN4JRFV</user>
    <text>Na-ha, honey! I should sleep.</text>
  </message>
  <message>
    <ts>2017-07-14T21:50:31.007336</ts>
    <user>U681TBBUP</user>
    <text>Assuming the numbers are sampled from a uniform distribution, you're distribution over the permutations will also be uniform</text>
  </message>
  <message>
    <ts>2017-07-14T21:51:52.013807</ts>
    <user>U681TBBUP</user>
    <text>Fisher-yates shuffle is `O(n)` time and `O(1)` space so definitely not optimal, but easy</text>
  </message>
  <message>
    <ts>2017-07-14T21:52:25.016520</ts>
    <user>U1AN4JRFV</user>
    <text>Its mostly to help getting stuff done, my suggestion. Gnite all.</text>
  </message>
  <message>
    <ts>2017-07-14T21:53:13.020632</ts>
    <user>U1AN4JRFV</user>
    <text>Unstuck, rather. </text>
  </message>
  <message>
    <ts>2017-07-14T23:34:02.437622</ts>
    <user>U2MLC3R4G</user>
    <text>Hello all,
I need a little comments on code extract below -
```
type A = B | C | D

type D = E | F | G
```
From the code above is type A = B | C | D | E | F | G 
I am thinking of splitting my Msg into SubMsg types using the above logic.</text>
  </message>
  <message>
    <ts>2017-07-14T23:46:23.482641</ts>
    <user>U236M9FH9</user>
    <text>`D` on the left side of `=` &amp;amp; right side are in different namespaces</text>
  </message>
  <message>
    <ts>2017-07-14T23:46:53.484383</ts>
    <user>U236M9FH9</user>
    <text>First one is a value with the type `A` &amp;amp; the second is a `type`</text>
  </message>
  <message>
    <ts>2017-07-14T23:47:22.486041</ts>
    <user>U236M9FH9</user>
    <text>You'd actually need `type A = B | C | SomeD D`</text>
  </message>
  <message>
    <ts>2017-07-14T23:48:31.489815</ts>
    <user>U236M9FH9</user>
    <text>I find message nesting useful when I can write something like `nestedUpdate : SomeNestedPartOfModel -&amp;gt; NestedMessage -&amp;gt; NestedPartOfModel`</text>
  </message>
  <message>
    <ts>2017-07-15T00:00:27.532616</ts>
    <user>U2MLC3R4G</user>
    <text>Hi &lt;@U236M9FH9&gt;,
Thank you for recommending the idea of Nested type of updates.
I was little confused when doing the above code. 
The compiler didn't complain when defining type A and type D.
But when using case expression matching A, I am getting matching A on one branch and match D on another and then I get error from there.</text>
  </message>
  <message>
    <ts>2017-07-15T01:14:07.787135</ts>
    <user>U2T2MKL58</user>
    <text>tried to find this on google but couldn’t…what version of javascript does elm compile to?</text>
  </message>
  <message>
    <ts>2017-07-15T02:11:50.959118</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2T2MKL58&gt; was that really such an urgent question you had to post it in 4 channels?</text>
  </message>
  <message>
    <ts>2017-07-15T02:53:51.086401</ts>
    <user>U4872964V</user>
    <text>&lt;@U2SR9DL7Q&gt; shuffling is an operation that is easy to get subtly wrong so that you don’t get a perfect random distribution of the elements. I think it’s easiest just to use the function provided here: &lt;http://package.elm-lang.org/packages/elm-community/random-extra/2.0.0/Random-List#shuffle&gt;

(unless you are doing this to learn stuff of course, then go ahead) :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T02:57:53.097682</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U4872964V&gt; woah. didn't know this  existed. thanks! I can now compare my solution to something.</text>
  </message>
  <message>
    <ts>2017-07-15T02:58:18.098849</ts>
    <user>U4872964V</user>
    <text>yes, that should probably go into the standard package, choose and shuffle are very useful functions</text>
  </message>
  <message>
    <ts>2017-07-15T02:58:58.100592</ts>
    <user>U4872964V</user>
    <text>(and non-trivial to implement yourself)</text>
  </message>
  <message>
    <ts>2017-07-15T02:59:39.102484</ts>
    <user>U2SR9DL7Q</user>
    <text>I basically made my own rickety version of choose</text>
  </message>
  <message>
    <ts>2017-07-15T03:00:00.103509</ts>
    <user>U4872964V</user>
    <text>yes it’s a good exercise</text>
  </message>
  <message>
    <ts>2017-07-15T03:00:01.103668</ts>
    <user>U2SR9DL7Q</user>
    <text>but I had to use a lot of helper functions to keep myself from tripping up</text>
  </message>
  <message>
    <ts>2017-07-15T03:00:07.104592</ts>
    <user>U2SR9DL7Q</user>
    <text>it was fun!</text>
  </message>
  <message>
    <ts>2017-07-15T03:00:25.106262</ts>
    <user>U2SR9DL7Q</user>
    <text>But shuffle is more sensible for what I need.</text>
  </message>
  <message>
    <ts>2017-07-15T03:01:27.110393</ts>
    <user>U2SR9DL7Q</user>
    <text>I'm much more willing to replace code now than when I started programming, which pleases me.</text>
  </message>
  <message>
    <ts>2017-07-15T03:01:57.112122</ts>
    <user>U4872964V</user>
    <text>less code to worry about if somebody else has already worried about it :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T03:03:30.116923</ts>
    <user>U2SR9DL7Q</user>
    <text>standing on the shoulders of giants. rigorous giants with large test suites.</text>
  </message>
  <message>
    <ts>2017-07-15T03:04:39.120332</ts>
    <user>U2SR9DL7Q</user>
    <text>But I spent all day on a single problem today, working through it piece by piece (with help from you lovely folk). I haven't had a chance to do that in awhile. Missed it.</text>
  </message>
  <message>
    <ts>2017-07-15T03:14:54.150444</ts>
    <user>U4872964V</user>
    <text>yes, this community is the best! let’s hope it can stay that way when Elm gains popularity</text>
  </message>
  <message>
    <ts>2017-07-15T03:17:47.159171</ts>
    <user>U2SR9DL7Q</user>
    <text>I believe so. Python's 26 yrs old and they're pretty friendly. Elm has a lot of similar themes in terms of people falling into it, pleasant surprise at productivity and ease of use, and enjoyment of the language features and constructs</text>
  </message>
  <message>
    <ts>2017-07-15T03:19:12.163197</ts>
    <user>U2SR9DL7Q</user>
    <text>which is odd, because they're implemented so differently. But I believe there's a shared spirit of 'principled but practical'</text>
  </message>
  <message>
    <ts>2017-07-15T03:22:17.172130</ts>
    <user>U4872964V</user>
    <text>I think Evans principled stance on features vs. practicality/real time use is almost unique. I like it very much, but I also appreciate that people can dislike it. But for those people there are a lot of other languages in this realm.</text>
  </message>
  <message>
    <ts>2017-07-15T03:24:40.179121</ts>
    <user>U4872964V</user>
    <text>this may be because i’ve worked in this industry for like 25 years :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T03:24:55.179763</ts>
    <user>U2SR9DL7Q</user>
    <text>I think if you want to use FP, proper FP, not pseudo maybe somethingscript FP... but you also need to get things done, it's a good place to start. Also just way more approachable than Haskeel imho.</text>
  </message>
  <message>
    <ts>2017-07-15T03:25:16.181106</ts>
    <user>U66RFDZ8F</user>
    <text>The only thing I hate about elm is that I can't use it server side </text>
  </message>
  <message>
    <ts>2017-07-15T03:25:47.182736</ts>
    <user>U66RFDZ8F</user>
    <text>But I will forever love it since it's shown me a new side of programming I didn't know existed </text>
  </message>
  <message>
    <ts>2017-07-15T03:26:17.184390</ts>
    <user>U66RFDZ8F</user>
    <text>F# is a good compromise for me since I'm dot net based but...</text>
  </message>
  <message>
    <ts>2017-07-15T03:27:11.186999</ts>
    <user>U4872964V</user>
    <text>&lt;@U66RFDZ8F&gt; I don’t think the Elm Architecture necessarily is the right way to do server side programming though. But the language itself, yes.</text>
  </message>
  <message>
    <ts>2017-07-15T03:28:22.190558</ts>
    <user>U4872964V</user>
    <text>I think something like Elmchemy is interesting, for instance</text>
  </message>
  <message>
    <ts>2017-07-15T03:29:10.192746</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U4872964V&gt; I'm painfully aware of this. But it doesn't hurt to dream. :D</text>
  </message>
  <message>
    <ts>2017-07-15T03:30:36.197538</ts>
    <user>U4872964V</user>
    <text>oh, it has been renamed Elchemy :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T03:31:22.200064</ts>
    <user>U4872964V</user>
    <text>&lt;@U66RFDZ8F&gt; dreaming is nice, helping is even better :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T03:33:22.206379</ts>
    <user>U66RFDZ8F</user>
    <text>One more thing about elm is, the architecture is pretty easy to pick up. 
The language as well, looks daunting coming  from a C based language, but after a while it "just makes sense". 
My problem with elixir is having to learn about supervisors and all the others. I think it's easier to make big mistakes in terms of design there if you're a beginner. </text>
  </message>
  <message>
    <ts>2017-07-15T03:40:10.227830</ts>
    <user>U4872964V</user>
    <text>for sure, backend stuff is inherently more complicated I think</text>
  </message>
  <message>
    <ts>2017-07-15T03:40:49.230044</ts>
    <user>U4872964V</user>
    <text>if you want to make it production ready</text>
  </message>
  <message>
    <ts>2017-07-15T03:41:10.231187</ts>
    <user>U4872964V</user>
    <text>the frontend app runs on the users computer so a bug there will only affect that particular user</text>
  </message>
  <message>
    <ts>2017-07-15T03:41:53.233249</ts>
    <user>U4872964V</user>
    <text>it will not crash the entire backend, which happens when you run for instance node.js</text>
  </message>
  <message>
    <ts>2017-07-15T03:45:46.244759</ts>
    <user>U4872964V</user>
    <text>so, i think the elm archicture basically “solves” the state issue with frontend code, but the solution for the backend is not that simple. supervisors is a nice way to handle things on the backend to make it robust, but as you say, they are a bit tricky to understand</text>
  </message>
  <message>
    <ts>2017-07-15T03:48:40.253506</ts>
    <user>U2MLC3R4G</user>
    <text>In one of the case that I see that nested update that you mentioned doesn't work.
The case is when you use Http.send. When using (MainMessage SubMessage) it doesn't work.</text>
  </message>
  <message>
    <ts>2017-07-15T03:54:40.271177</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2MLC3R4G&gt; try `SubMessage &amp;gt;&amp;gt; MainMessage`</text>
  </message>
  <message>
    <ts>2017-07-15T03:55:12.272838</ts>
    <user>U66RFDZ8F</user>
    <text>And it's a softer entry into FP as well. </text>
  </message>
  <message>
    <ts>2017-07-15T03:55:23.273426</ts>
    <user>U66RFDZ8F</user>
    <text>At least for me</text>
  </message>
  <message>
    <ts>2017-07-15T03:56:05.275518</ts>
    <user>U4872964V</user>
    <text>yes, it’s great that way</text>
  </message>
  <message>
    <ts>2017-07-15T03:58:08.281352</ts>
    <user>U66RFDZ8F</user>
    <text>Now I can go back and tackle elixir more comfortably. Knowing the basics of FP. </text>
  </message>
  <message>
    <ts>2017-07-15T03:58:30.282291</ts>
    <user>U66RFDZ8F</user>
    <text>But let me just add, this paradigm is amazing! </text>
  </message>
  <message>
    <ts>2017-07-15T03:59:53.286258</ts>
    <user>U2MLC3R4G</user>
    <text>Thanks &lt;@U3SJEDR96&gt; . Let me try</text>
  </message>
  <message>
    <ts>2017-07-15T04:05:23.306861</ts>
    <user>U2MLC3R4G</user>
    <text>&lt;@U3SJEDR96&gt; It works now.
It's my first time using &amp;gt;&amp;gt;
Will need to learn more about this. Thank you very much</text>
  </message>
  <message>
    <ts>2017-07-15T04:11:13.325367</ts>
    <user>U3SJEDR96</user>
    <text>It's function composition. So `SubMessage` is a function which takes a `Result Http.Error Foo` and returns a `Sub.Msg`, and `MainMessage` is a function which takes `Sub.Msg` and returns a `Msg`, right? So you have a function `Result Http.Error Foo -&amp;gt; Sub.Msg`, a function `Sub.Msg -&amp;gt; Msg` and what you really need is a function `Result Http.Error Foo -&amp;gt; Msg`. That's a solid use-case for function composition :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T04:11:35.326314</ts>
    <user>U3SJEDR96</user>
    <text>`(&amp;gt;&amp;gt;) : (a -&amp;gt; b) -&amp;gt; (b -&amp;gt; c) -&amp;gt; (a -&amp;gt; c)`</text>
  </message>
  <message>
    <ts>2017-07-15T04:12:57.330228</ts>
    <user>U4872964V</user>
    <text>it’s like `|&amp;gt;` but without the actual function argument</text>
  </message>
  <message>
    <ts>2017-07-15T07:24:31.939703</ts>
    <user>U4RR7KX45</user>
    <text>elmers, does anyone use any Intellij IDE for Elm?</text>
  </message>
  <message>
    <ts>2017-07-15T07:25:19.942421</ts>
    <user>U4RR7KX45</user>
    <text>I’m trying to integrate elm-format with my webstorm somehow</text>
  </message>
  <message>
    <ts>2017-07-15T07:25:37.943334</ts>
    <user>U4RR7KX45</user>
    <text>I set up a file watcher, but it keeps updating my file every 3 - 4 seconds</text>
  </message>
  <message>
    <ts>2017-07-15T07:57:32.050122</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U4RR7KX45&gt; I've switched to Atom and vim so I can't help, but you could try asking on &lt;#C0SP19AMA|editors-and-ides&gt; as well, so that your message will be visible longer :smiley:</text>
  </message>
  <message>
    <ts>2017-07-15T07:58:00.051563</ts>
    <user>U4RR7KX45</user>
    <text>I tried vim too but Atom seems to be the best option so far</text>
  </message>
  <message>
    <ts>2017-07-15T07:58:05.051838</ts>
    <user>U4RR7KX45</user>
    <text>am I right?</text>
  </message>
  <message>
    <ts>2017-07-15T07:58:25.052895</ts>
    <user>U0U6ML22H</user>
    <text>you are, of course, obviously wrong, since vim is always better than anything else ever</text>
  </message>
  <message>
    <ts>2017-07-15T07:58:26.052955</ts>
    <user>U0U6ML22H</user>
    <text>:wink:</text>
  </message>
  <message>
    <ts>2017-07-15T07:58:56.054550</ts>
    <user>U0U6ML22H</user>
    <text>I've used Atom for a while, and &lt;@U1HPQAHAT&gt;'s elmjutsu is a big bag of awesomeness</text>
  </message>
  <message>
    <ts>2017-07-15T07:59:04.054939</ts>
    <user>U4RR7KX45</user>
    <text>really? could you recommend the plugins please? I’ve got elm-vim but it’s nothing compared to Atom’s support</text>
  </message>
  <message>
    <ts>2017-07-15T07:59:07.055170</ts>
    <user>U0U6ML22H</user>
    <text>I ended up going back to vim because I just like it more, and it's snappier for me</text>
  </message>
  <message>
    <ts>2017-07-15T07:59:32.056559</ts>
    <user>U0U6ML22H</user>
    <text>in my own workflow, I didn't use that many of elmjutsu's features (it's probably my loss!)</text>
  </message>
  <message>
    <ts>2017-07-15T08:00:06.058727</ts>
    <user>U0U6ML22H</user>
    <text>the one thing I do miss in everyday work is the autofix feature that adds function signature and adds/removes imports</text>
  </message>
  <message>
    <ts>2017-07-15T08:00:31.060940</ts>
    <user>U0U6ML22H</user>
    <text>other than that, elm-vim + ALE does the job fine for me</text>
  </message>
  <message>
    <ts>2017-07-15T08:01:47.065955</ts>
    <user>U0U6ML22H</user>
    <text>(I'm using neovim, rather than vim)</text>
  </message>
  <message>
    <ts>2017-07-15T08:02:38.068984</ts>
    <user>U3SJEDR96</user>
    <text>because `toString` is magic</text>
  </message>
  <message>
    <ts>2017-07-15T08:02:48.069459</ts>
    <user>U3SJEDR96</user>
    <text>and a debugging tool :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T08:03:31.071981</ts>
    <user>U4RR7KX45</user>
    <text>thank you</text>
  </message>
  <message>
    <ts>2017-07-15T08:03:41.072505</ts>
    <user>U4RR7KX45</user>
    <text>didn’t know about Ale :smile:</text>
  </message>
  <message>
    <ts>2017-07-15T08:03:44.072671</ts>
    <user>U2JFD9ALE</user>
    <text>Why is `toString` able to print a `type` that is not exposed from my module? Example:

```
module FooBar (Foo)

type Foo a = Bar (List a)

init : List a -&amp;gt; Foo a
init xs =
  Bar xs
```

and

```
import FooBar as FB
import Html exposing (text)

main =
  text &amp;lt;| (FB.init [1,2,3,4,5])
```
pretty much break encapsulation :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-15T08:04:45.076335</ts>
    <user>U2JFD9ALE</user>
    <text>I mean in :haskell: I just don't _*derive*_ `Show` and it's home safe</text>
  </message>
  <message>
    <ts>2017-07-15T08:05:08.077800</ts>
    <user>U2JFD9ALE</user>
    <text>(I know, I know, I don't want to start a :elm: TypeClasses thing)</text>
  </message>
  <message>
    <ts>2017-07-15T08:05:34.079380</ts>
    <user>U4872964V</user>
    <text>&lt;@U2JFD9ALE&gt; `toString` is being moved to the `Debug` module in 0.19</text>
  </message>
  <message>
    <ts>2017-07-15T08:06:45.083447</ts>
    <user>U2JFD9ALE</user>
    <text>That is just what I was asking for !!! Partey !!!</text>
  </message>
  <message>
    <ts>2017-07-15T08:06:53.083861</ts>
    <user>U2JFD9ALE</user>
    <text>:discoball:</text>
  </message>
  <message>
    <ts>2017-07-15T08:10:16.095046</ts>
    <user>U2JFD9ALE</user>
    <text>&lt;@U4872964V&gt; do you know as from `0.19` if you compile without the `--debug` flag, that all `Debug.` will be marked as an error?</text>
  </message>
  <message>
    <ts>2017-07-15T08:11:44.100254</ts>
    <user>U3SJEDR96</user>
    <text>I think debug.log would rather become a no-op, actually</text>
  </message>
  <message>
    <ts>2017-07-15T08:11:58.101036</ts>
    <user>U2JFD9ALE</user>
    <text>I mean, I would like people to avoid taking a _*shortcut*_:

&lt;https://github.com/rundis/albums/blob/master/frontend/src/ArtistListing.elm#L47-L50&gt;

and probably go through all the cases:

```
    let
        status s =
            ( toString s.code, s.message )

        error err =
            case err of
                BadUrl url -&amp;gt;
                    "Invalid url: " ++ url

                Timeout -&amp;gt;
                    "Request timed-out"

                NetworkError -&amp;gt;
                    "No Network Connection"

                BadStatus response -&amp;gt;
                    let
                        ( code, message ) =
                            status response.status
                    in
                        "Statuscode: " ++ code ++ " and message: " ++ message

                BadPayload _ response -&amp;gt;
                    let
                        ( code, message ) =
                            status response.status
                    in
                        "Statuscode: " ++ code ++ " and message: " ++ message
    in
```</text>
  </message>
  <message>
    <ts>2017-07-15T08:12:40.103583</ts>
    <user>U1CE9DL9H</user>
    <text>there are legitimate cases for `Debug.crash` where elm's type system isn't strong enough to convince the compiler that something holds (for example a list is not empty), but it is nonetheless guaranteed</text>
  </message>
  <message>
    <ts>2017-07-15T08:13:01.104746</ts>
    <user>U2JFD9ALE</user>
    <text>wups, I'm taking a shortcut myself :smile: (`toString s.code`)</text>
  </message>
  <message>
    <ts>2017-07-15T08:13:19.106021</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2JFD9ALE&gt; that thing you linked to; I don't see how they're taking a shortcut or how it is related to debug.*?</text>
  </message>
  <message>
    <ts>2017-07-15T08:13:22.106150</ts>
    <user>U2JFD9ALE</user>
    <text>How do I convert numbers to strings if `toString` becomes part of `Debug`</text>
  </message>
  <message>
    <ts>2017-07-15T08:13:32.106765</ts>
    <user>U3SJEDR96</user>
    <text>In case of an error, they return the old model and no new commands</text>
  </message>
  <message>
    <ts>2017-07-15T08:13:45.107441</ts>
    <user>U3SJEDR96</user>
    <text>there will be a `String.fromInt` and `String.fromFloat`</text>
  </message>
  <message>
    <ts>2017-07-15T08:14:14.109173</ts>
    <user>U2D7NUGS1</user>
    <text>Hello! Good day to you all!</text>
  </message>
  <message>
    <ts>2017-07-15T08:14:15.109288</ts>
    <user>U2JFD9ALE</user>
    <text>&lt;@U3SJEDR96&gt; I would rather have something like this: `Console.log "text"` rather than `Debug.log`</text>
  </message>
  <message>
    <ts>2017-07-15T08:14:37.110632</ts>
    <user>U2JFD9ALE</user>
    <text>Console.log should produce a `Msg` like all the other side-effects</text>
  </message>
  <message>
    <ts>2017-07-15T08:14:43.110955</ts>
    <user>U2JFD9ALE</user>
    <text>I mean `Cmd msg`</text>
  </message>
  <message>
    <ts>2017-07-15T08:15:05.112451</ts>
    <user>U3SJEDR96</user>
    <text>I'm not sure I see the use-case, in general, for logging to the console _except_ for debugging purposes?</text>
  </message>
  <message>
    <ts>2017-07-15T08:15:07.112647</ts>
    <user>U2JFD9ALE</user>
    <text>That way I can built-in to my SPA if I want to provide the option to `log` to the `console`</text>
  </message>
  <message>
    <ts>2017-07-15T08:15:44.115148</ts>
    <user>U3SJEDR96</user>
    <text>but if you need that, you can sure do that - have a simple `port emit : Json.Value -&amp;gt; Cmd msg` and `app.ports.emit.subscribe(console.log)`</text>
  </message>
  <message>
    <ts>2017-07-15T08:18:41.125778</ts>
    <user>U2JFD9ALE</user>
    <text>I'm preparing a talk: _*"Data protection by design and by default" *_, which is GDPR (General Data Protection Regulation) related &lt;https://www.meetup.com/Elm-Copenhagen/events/241530394/&gt; where I will show case that from 2018-05-25, languages like :elm:, :haskell:, PureScript and Idris will really shine (&lt;http://blog.stermon.com/articles/2017/07/14/haskell-why-many-people-so-stupid-about-gdpr&gt;) but it will require that the language actually provides strict delimiters between pure and impure code :wink:</text>
  </message>
  <message>
    <ts>2017-07-15T08:20:16.131482</ts>
    <user>U2JFD9ALE</user>
    <text>so my example gets pretty much useless due (`toString`, `Debug.`, ...) and so. Therefore it would be nice if _*all*_ side-effects would be handled in a similar manner</text>
  </message>
  <message>
    <ts>2017-07-15T08:20:42.132978</ts>
    <user>U4872964V</user>
    <text>data protection cannot be handled in the front end, surely?</text>
  </message>
  <message>
    <ts>2017-07-15T08:20:50.133442</ts>
    <user>U2JFD9ALE</user>
    <text>It can</text>
  </message>
  <message>
    <ts>2017-07-15T08:21:08.134471</ts>
    <user>U2JFD9ALE</user>
    <text>Come to my talk :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T08:21:37.136134</ts>
    <user>U4872964V</user>
    <text>but it’s javascript in the end anyway</text>
  </message>
  <message>
    <ts>2017-07-15T08:21:47.136726</ts>
    <user>U4872964V</user>
    <text>i’m not sure i understand</text>
  </message>
  <message>
    <ts>2017-07-15T08:25:14.148477</ts>
    <user>U4872964V</user>
    <text>on the backend - for sure the language can help</text>
  </message>
  <message>
    <ts>2017-07-15T08:29:24.162767</ts>
    <user>U2JFD9ALE</user>
    <text>Once the slides are made, I'll send you a private message and you can decide :wink:</text>
  </message>
  <message>
    <ts>2017-07-15T08:35:40.185345</ts>
    <user>U3S9BH05U</user>
    <text>&lt;@U2JFD9ALE&gt; I'm interested in the slides too :smiley:</text>
  </message>
  <message>
    <ts>2017-07-15T08:36:34.188574</ts>
    <user>U4872964V</user>
    <text>&lt;@U2JFD9ALE&gt; sure thing</text>
  </message>
  <message>
    <ts>2017-07-15T08:47:00.227261</ts>
    <user>U0TNXFS5D</user>
    <text>I am trying to do a cross site posting and am having some trouble with Http.send &amp;amp; Http.request. Http.request returns `Request ()` and Http.send says it is expecting `Request String`.  Where have I gone wrong?</text>
  </message>
  <message>
    <ts>2017-07-15T08:53:59.253802</ts>
    <user>U4872964V</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#request&gt; seems to return `Request a` which should be fine</text>
  </message>
  <message>
    <ts>2017-07-15T08:54:22.255499</ts>
    <user>U4872964V</user>
    <text>you just have to pass the right `expect`</text>
  </message>
  <message>
    <ts>2017-07-15T08:55:00.257935</ts>
    <user>U4872964V</user>
    <text>Better to show the code instead</text>
  </message>
  <message>
    <ts>2017-07-15T08:57:28.268196</ts>
    <user>U0TNXFS5D</user>
    <text>I continue to get `Function `send` is expecting the 2nd argument to be:

    Request String`</text>
  </message>
  <message>
    <ts>2017-07-15T08:59:20.275728</ts>
    <user>U4872964V</user>
    <text>because you handle its result as a `String`. If you do that, you also need to make sure the request actually expects a `String`</text>
  </message>
  <message>
    <ts>2017-07-15T09:00:31.284060</ts>
    <user>U0TNXFS5D</user>
    <text>OK, I think I get it. Thanks!</text>
  </message>
  <message>
    <ts>2017-07-15T09:45:35.473597</ts>
    <user>U0TNXFS5D</user>
    <text>&lt;@U4872964V&gt; - thanks again. took a couple of minutes before all was clear to me. All bright and shiney now!</text>
  </message>
  <message>
    <ts>2017-07-15T09:48:22.485278</ts>
    <user>U2JFD9ALE</user>
    <text>&lt;@U0TNXFS5D&gt; I normally write something like this:

```
getHttp : String -&amp;gt; (Result Http.Error String -&amp;gt; msg) -&amp;gt; Cmd msg
getHttp url msg =
    Http.getString url
        |&amp;gt; Http.send msg
```

and call it like this:
```
(model, getHttp ("&lt;http://google.com/?q=foo&gt;") SomeMsg)
```
&amp;gt; Note: I'm using `getString`</text>
  </message>
  <message>
    <ts>2017-07-15T09:49:27.489559</ts>
    <user>U0TNXFS5D</user>
    <text>I got all twisted up because of cross site posting</text>
  </message>
  <message>
    <ts>2017-07-15T09:50:09.492420</ts>
    <user>U2JFD9ALE</user>
    <text>And then I handle data like this:
```
            SomeMsg result -&amp;gt;
                case result of
                    Ok txt -&amp;gt;
                        ( model
                        , Cmd.none
                        )

                    Err err -&amp;gt;
                        ( model
                        , Cmd.none
                        )
```</text>
  </message>
  <message>
    <ts>2017-07-15T09:50:22.493385</ts>
    <user>U2JFD9ALE</user>
    <text>&amp;gt; I got all twisted up because of cross site posting
Ah, Roger that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T10:19:21.622770</ts>
    <user>U236M9FH9</user>
    <text>Sure, but you can modify it to return `(NestedPartOfModel, Cmd NestedMessage/Msg)` or whatever works best for your situation, maybe even take &amp;amp; return the full model if you really want</text>
  </message>
  <message>
    <ts>2017-07-15T10:20:36.628279</ts>
    <user>U236M9FH9</user>
    <text>But if a nested update only returns Cmds of Cmd.none, I'll just remove that part of the return value to show that it's "pure" in the sense it doesn't need to talk to the outside world</text>
  </message>
  <message>
    <ts>2017-07-15T10:26:14.652894</ts>
    <user>U2GTQM83A</user>
    <text>Hey beautiful people. Has anyone used the Elm architecture (update loop) in Haskell? If yes. Do you have any links for examples?</text>
  </message>
  <message>
    <ts>2017-07-15T10:28:53.664436</ts>
    <user>U4872964V</user>
    <text>For gchjs or general haskell code?</text>
  </message>
  <message>
    <ts>2017-07-15T10:29:18.666414</ts>
    <user>U4872964V</user>
    <text>(i have used it in neither :)</text>
  </message>
  <message>
    <ts>2017-07-15T10:30:49.673973</ts>
    <user>U2GTQM83A</user>
    <text>For general haskell code. ghc</text>
  </message>
  <message>
    <ts>2017-07-15T10:35:47.696746</ts>
    <user>U1EQAULH2</user>
    <text>Hey would anyone point me to Elm use case articles? Companies using Elm and talking about it. </text>
  </message>
  <message>
    <ts>2017-07-15T10:37:10.702906</ts>
    <user>U1EQAULH2</user>
    <text>I really liked this one &lt;http://blog.testdouble.com/posts/2017-07-12-three-months-of-elm-our-experience&gt;</text>
  </message>
  <message>
    <ts>2017-07-15T10:40:44.718158</ts>
    <user>U153UK3FA</user>
    <text>&lt;https://www.youtube.com/watch?v=LZj_1qVURL0&gt;</text>
  </message>
  <message>
    <ts>2017-07-15T10:53:05.771385</ts>
    <user>U0EUHKVGB</user>
    <text>checkout the Oslo Elm Day playlist, it has a few: &lt;https://www.youtube.com/playlist?list=PLcAzxXzXQlPZsNcYycHittqeF3UG4dGli&gt;</text>
  </message>
  <message>
    <ts>2017-07-15T10:53:12.771898</ts>
    <user>U681TBBUP</user>
    <text>Another one from kevin yank: &lt;https://youtu.be/kuOCx0QeQ5c&gt;</text>
  </message>
  <message>
    <ts>2017-07-15T10:53:30.773250</ts>
    <user>U0EUHKVGB</user>
    <text>In particular, the talks by David, Erlend, and Nils.</text>
  </message>
  <message>
    <ts>2017-07-15T11:09:11.849445</ts>
    <user>U35100SJD</user>
    <text>hi there!</text>
  </message>
  <message>
    <ts>2017-07-15T11:09:25.850551</ts>
    <user>U35100SJD</user>
    <text>is there some way to pattern match types in function annotations?</text>
  </message>
  <message>
    <ts>2017-07-15T11:09:47.852247</ts>
    <user>U35100SJD</user>
    <text>like we can do with type aliases this way: `func : {a | foo : String}</text>
  </message>
  <message>
    <ts>2017-07-15T11:09:58.853238</ts>
    <user>U35100SJD</user>
    <text>for instance I have this function :
```
when : Bool -&amp;gt; msg -&amp;gt; msg -&amp;gt; msg
when ok msgTrue msgFalse =
    if ok then
        msgTrue
    else
        msgFalse
```</text>
  </message>
  <message>
    <ts>2017-07-15T11:10:07.854230</ts>
    <user>U35100SJD</user>
    <text>and I would like to do something like this:</text>
  </message>
  <message>
    <ts>2017-07-15T11:10:19.855425</ts>
    <user>U35100SJD</user>
    <text>```
when : Bool -&amp;gt; (msg | NoOp) -&amp;gt; msg
when ok msg =
    if ok then
        msg
    else
        NoOp
```</text>
  </message>
  <message>
    <ts>2017-07-15T11:10:35.856852</ts>
    <user>U35100SJD</user>
    <text>where we know `msg` has at least `NoOp` value</text>
  </message>
  <message>
    <ts>2017-07-15T11:10:41.857340</ts>
    <user>U3SJEDR96</user>
    <text>Nope</text>
  </message>
  <message>
    <ts>2017-07-15T11:10:48.857923</ts>
    <user>U35100SJD</user>
    <text>too bad :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-15T11:10:58.858737</ts>
    <user>U35100SJD</user>
    <text>that's what I thought</text>
  </message>
  <message>
    <ts>2017-07-15T11:11:08.859747</ts>
    <user>U35100SJD</user>
    <text>but we never know :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T11:11:17.860443</ts>
    <user>U4872964V</user>
    <text>what’s the use case?</text>
  </message>
  <message>
    <ts>2017-07-15T11:11:26.861119</ts>
    <user>U4872964V</user>
    <text>preventing messages?</text>
  </message>
  <message>
    <ts>2017-07-15T11:11:28.861379</ts>
    <user>U35100SJD</user>
    <text>the second function above</text>
  </message>
  <message>
    <ts>2017-07-15T11:11:43.862557</ts>
    <user>U35100SJD</user>
    <text>only keep one message instead of 2 in the function</text>
  </message>
  <message>
    <ts>2017-07-15T11:11:58.863810</ts>
    <user>U35100SJD</user>
    <text>because we already know what will be the second message</text>
  </message>
  <message>
    <ts>2017-07-15T11:12:31.866439</ts>
    <user>U4872964V</user>
    <text>yes but I mean when is this function used?</text>
  </message>
  <message>
    <ts>2017-07-15T11:13:22.870270</ts>
    <user>U35100SJD</user>
    <text>in my case it's for some buttons, where: if the form is valid I use a message, othterwise I use another message with no effect</text>
  </message>
  <message>
    <ts>2017-07-15T11:13:42.871737</ts>
    <user>U35100SJD</user>
    <text>well, actually it's not a button, it's a link</text>
  </message>
  <message>
    <ts>2017-07-15T11:14:16.874296</ts>
    <user>U4872964V</user>
    <text>So, I’d put that logic in my update function instead</text>
  </message>
  <message>
    <ts>2017-07-15T11:14:17.874374</ts>
    <user>U35100SJD</user>
    <text>I also may have other use cases where I want to avoid using `if`</text>
  </message>
  <message>
    <ts>2017-07-15T11:14:25.874867</ts>
    <user>U3SJEDR96</user>
    <text>Why not remove the whole attribute instead, and not have a `NoOp` at all?</text>
  </message>
  <message>
    <ts>2017-07-15T11:15:05.878022</ts>
    <user>U35100SJD</user>
    <text>well, I know I have plenty of solutions to do this, but I like the `when` function</text>
  </message>
  <message>
    <ts>2017-07-15T11:15:23.879655</ts>
    <user>U4872964V</user>
    <text>maybe not the answer you’re looking for :slightly_smiling_face: but yes, it can’t be done that way in the type system, we don’t have “extensible union types”</text>
  </message>
  <message>
    <ts>2017-07-15T11:15:54.882102</ts>
    <user>U35100SJD</user>
    <text>but this function was defined in my module so it knew about `NoOp` message, but now I'm using it in other modules so I wanted to extract it in its own module, but then I have to add another parameter for the `False` case</text>
  </message>
  <message>
    <ts>2017-07-15T11:16:32.885316</ts>
    <user>U35100SJD</user>
    <text>ok, it's not a problem, if it was possible it would have been great but it's not a big deal :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T11:16:34.885435</ts>
    <user>U35100SJD</user>
    <text>thank you!</text>
  </message>
  <message>
    <ts>2017-07-15T11:16:40.885867</ts>
    <user>U4872964V</user>
    <text>or, as &lt;@U3SJEDR96&gt; is saying, just don’t have the event handler at all when you’d send a NoOp</text>
  </message>
  <message>
    <ts>2017-07-15T11:17:08.888017</ts>
    <user>U35100SJD</user>
    <text>ok, thanks</text>
  </message>
  <message>
    <ts>2017-07-15T11:39:24.993830</ts>
    <user>U0CL0AS3V</user>
    <text>Technically you don't need the actual `Debug.crash` for this</text>
  </message>
  <message>
    <ts>2017-07-15T11:41:50.005412</ts>
    <user>U0CL0AS3V</user>
    <text>You can recurse in the empty list case - it'll lead to infinite recursion if that branch gets run, so you still gotta be real sure :wink:</text>
  </message>
  <message>
    <ts>2017-07-15T14:05:59.704383</ts>
    <user>U170TNSTZ</user>
    <text>What’s the motivation for having commas at the beginning of lines?</text>
  </message>
  <message>
    <ts>2017-07-15T14:07:42.712351</ts>
    <user>U681TBBUP</user>
    <text>One is that it makes a better diff</text>
  </message>
  <message>
    <ts>2017-07-15T14:08:13.714798</ts>
    <user>U681TBBUP</user>
    <text>I can't tell you how many times I add something to a list in some language and forget the comma at the end of the line above</text>
  </message>
  <message>
    <ts>2017-07-15T14:12:24.734177</ts>
    <user>U3SJEDR96</user>
    <text>It's actually not an uncommon coding style; for example `npm` has a similar convention (&lt;https://docs.npmjs.com/misc/coding-style#comma-first&gt;) and haskell tends to do so, too (&lt;https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md#list-declarations&gt;)</text>
  </message>
  <message>
    <ts>2017-07-15T14:15:14.747247</ts>
    <user>U3SJEDR96</user>
    <text>then again, it's not exactly "undisputed" - &lt;https://github.com/avh4/elm-format/issues/161&gt;</text>
  </message>
  <message>
    <ts>2017-07-15T14:15:36.748936</ts>
    <user>U170TNSTZ</user>
    <text>Cool! I’m coming from Clojure-land, where commas can be omitted (and I tend to forget to even put them in Elm code ;-)</text>
  </message>
  <message>
    <ts>2017-07-15T14:28:51.808461</ts>
    <user>U4872964V</user>
    <text>yes, omitting commas would be consistent with how `let` and `case` work</text>
  </message>
  <message>
    <ts>2017-07-15T14:30:44.817316</ts>
    <user>U1CFBCD4J</user>
    <text>it's mostly just Haskell/Elm/PureScript people that do the comma-first thing religiously, from what I've seen</text>
  </message>
  <message>
    <ts>2017-07-15T14:30:54.818018</ts>
    <user>U1CFBCD4J</user>
    <text>although I have seen people do it in SQL before also</text>
  </message>
  <message>
    <ts>2017-07-15T14:31:19.819912</ts>
    <user>U4872964V</user>
    <text>i’m not so sure about religiously, but yes, it’s the standard</text>
  </message>
  <message>
    <ts>2017-07-15T14:31:20.820003</ts>
    <user>U2SR9DL7Q</user>
    <text>it's funny. python (and a few other languages) encourage using commas on the last list element for the same diff reason, but it took me forever to be okay with elm-formats placement at the front.</text>
  </message>
  <message>
    <ts>2017-07-15T14:31:47.821833</ts>
    <user>U1CFBCD4J</user>
    <text>C# and JS also allow trailing commas now, so comma last is the most common in those languages</text>
  </message>
  <message>
    <ts>2017-07-15T14:32:08.823385</ts>
    <user>U4872964V</user>
    <text>Having been programming for 30 years you get used to a lot of different styles .)</text>
  </message>
  <message>
    <ts>2017-07-15T14:32:11.823625</ts>
    <user>U2SR9DL7Q</user>
    <text>But since format places the first element on the same line as the opening bracket, it ends up looking rather neat. I may be a convert.</text>
  </message>
  <message>
    <ts>2017-07-15T14:32:54.826903</ts>
    <user>U1CFBCD4J</user>
    <text>not a big fan of it, personally. it's weird having the opening bracket on the same line as the first item, IMO.</text>
  </message>
  <message>
    <ts>2017-07-15T14:33:18.828933</ts>
    <user>U1CFBCD4J</user>
    <text>it makes sense in languages where trailing commas aren't allowed at the end of a list, because it has a practical reason for being used</text>
  </message>
  <message>
    <ts>2017-07-15T14:33:25.829487</ts>
    <user>U1CFBCD4J</user>
    <text>but not in languages where trailing commas are allowed, like in JS</text>
  </message>
  <message>
    <ts>2017-07-15T14:33:26.829538</ts>
    <user>U3SJEDR96</user>
    <text>I'm not too attached to it, I just like consistency. I do find myself formatting literals in JS in Elm-style now, too.</text>
  </message>
  <message>
    <ts>2017-07-15T14:33:48.831246</ts>
    <user>U4872964V</user>
    <text>Yes, having commas being optional (newline+same indent implies comma) would give very pleasing visual style, I think</text>
  </message>
  <message>
    <ts>2017-07-15T14:34:19.833762</ts>
    <user>U4872964V</user>
    <text>inside [] and {}</text>
  </message>
  <message>
    <ts>2017-07-15T14:34:20.833863</ts>
    <user>U2SR9DL7Q</user>
    <text>Sometimes when I hit save, I see the results of elm-format and I think, "Wow. That's what you're going with?" But it's readable and consistent.</text>
  </message>
  <message>
    <ts>2017-07-15T14:35:08.837840</ts>
    <user>U1CFBCD4J</user>
    <text>i think it's just a haskell based convention that people carried with them to elm &amp;amp; purescript, honestly</text>
  </message>
  <message>
    <ts>2017-07-15T14:35:59.842244</ts>
    <user>U4872964V</user>
    <text>since we already have significant whitespace with `let` and `case` it’s not surprising to have it in more cases</text>
  </message>
  <message>
    <ts>2017-07-15T14:37:37.850179</ts>
    <user>U4872964V</user>
    <text>```
    [
        item1
        item2
    ]
```
etc</text>
  </message>
  <message>
    <ts>2017-07-15T14:38:41.855413</ts>
    <user>U4872964V</user>
    <text>otoh having a comma is a nice visual cue to where an element starts</text>
  </message>
  <message>
    <ts>2017-07-15T15:28:25.085541</ts>
    <user>U3R7CKQRX</user>
    <text>Hi everybody, I got a question about destroying elm apps and possible conflicts.</text>
  </message>
  <message>
    <ts>2017-07-15T15:29:21.089661</ts>
    <user>U3R7CKQRX</user>
    <text>As far as I know there no real API to `destroy` an elm app so I am assuming it continues to live even if the container it has been `embed()`ded  in is no longer in the DOM.</text>
  </message>
  <message>
    <ts>2017-07-15T15:30:05.093214</ts>
    <user>U3R7CKQRX</user>
    <text>If that is correct I am kind of worried that the app will still listen to some on the page and might cause weird behaviour.</text>
  </message>
  <message>
    <ts>2017-07-15T15:30:10.093604</ts>
    <user>U3R7CKQRX</user>
    <text>Scenario:</text>
  </message>
  <message>
    <ts>2017-07-15T15:31:22.099646</ts>
    <user>U3R7CKQRX</user>
    <text>I have 2 elm apps on my page. Both use the Navigation package to listen to a route that ends in `/home`. Of course only one of the apps is mounted in the DOM at the same time. Will both listen to the urlchange?</text>
  </message>
  <message>
    <ts>2017-07-15T15:46:17.166178</ts>
    <user>U1EQAULH2</user>
    <text>I asked for articles and you sent me awesome videos. Thanks :raised_hands:</text>
  </message>
  <message>
    <ts>2017-07-15T16:42:01.406960</ts>
    <user>U14Q8S4EM</user>
    <text>Hey &lt;@U3R7CKQRX&gt; , Im not sure, but I wonder if something like…
```
var pageState = { elmApp : Elm.embed(document.getElementById("elm-container") };
delete pageState.elmApp;
```
.. would be a safe approach.</text>
  </message>
  <message>
    <ts>2017-07-15T16:43:33.413173</ts>
    <user>U14Q8S4EM</user>
    <text>It really depends on whether the event listeners in Elm that are tried to the window would prevent the Elm app from getting garbage collected. But if it doesnt, deleting the Elm object entirely might help since those event listeners are a part of that.</text>
  </message>
  <message>
    <ts>2017-07-15T16:43:56.414850</ts>
    <user>U14Q8S4EM</user>
    <text>Or it could just mean the window is calling `undefined`. Not sure really.</text>
  </message>
  <message>
    <ts>2017-07-15T16:47:45.430234</ts>
    <user>U3SJEDR96</user>
    <text>deleting the `app` doesn't do much of anything. Deleting the nodes would help, but even then, subscriptions would stay active, I believe</text>
  </message>
  <message>
    <ts>2017-07-15T16:48:07.431720</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3LnCfW6kGmQa1/0&gt; (as illustrated there)</text>
  </message>
  <message>
    <ts>2017-07-15T17:01:29.486906</ts>
    <user>U14Q8S4EM</user>
    <text>Ah, cool. I tried my idea here, and it keeps ticking after you delete the `pageState.elmApp`</text>
  </message>
  <message>
    <ts>2017-07-15T17:01:31.487030</ts>
    <user>U14Q8S4EM</user>
    <text>&lt;https://ellie-app.com/3LpCZQjszCxa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-15T17:01:43.487971</ts>
    <user>U14Q8S4EM</user>
    <text>I guess that doesnt really delete the object.</text>
  </message>
  <message>
    <ts>2017-07-15T17:12:18.528696</ts>
    <user>U3R7CKQRX</user>
    <text>yeah, I also tried something like `app =null` before. But just like calling `delete` this only removes the reference and should lead to garbage collection.</text>
  </message>
  <message>
    <ts>2017-07-15T17:12:30.529531</ts>
    <user>U3R7CKQRX</user>
    <text>But the subscriptions stay :confused:</text>
  </message>
  <message>
    <ts>2017-07-15T17:14:15.536078</ts>
    <user>U3R7CKQRX</user>
    <text>As a workaround I guess one could have a js-to-elm port which will do something like this:
```{model | destroy = True}
-- and then ...
subscriptions model = if model.destroy then Sub.none else ...(some subscription)
```</text>
  </message>
  <message>
    <ts>2017-07-15T17:14:49.538167</ts>
    <user>U14Q8S4EM</user>
    <text>Yeah, I was just thinking, I wonder if you just set `subcriptions model = Sub.none` before you destroy it would work.</text>
  </message>
  <message>
    <ts>2017-07-15T17:15:08.539596</ts>
    <user>U3R7CKQRX</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-15T17:15:14.539987</ts>
    <user>U3R7CKQRX</user>
    <text>me too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T17:15:18.540320</ts>
    <user>U3R7CKQRX</user>
    <text>I think it would</text>
  </message>
  <message>
    <ts>2017-07-15T17:15:28.541028</ts>
    <user>U3R7CKQRX</user>
    <text>for subscriptions that would help</text>
  </message>
  <message>
    <ts>2017-07-15T17:16:39.546038</ts>
    <user>U3R7CKQRX</user>
    <text>But for `Navigation.program` and this that would work(if my assumption is correct that is listens to urlchanges and keeps the handlers)</text>
  </message>
  <message>
    <ts>2017-07-15T17:22:17.567380</ts>
    <user>U3R7CKQRX</user>
    <text>I should take a look into the code for the navigation package. Having elm apps on a page and them doing stuff even when they shouldn't anymore is a little scary.</text>
  </message>
  <message>
    <ts>2017-07-16T03:29:57.346392</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U1EQAULH2&gt; Here's an article I wrote &lt;http://futurice.com/blog/elm-in-the-real-world&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T10:47:50.779533</ts>
    <user>U3VH7AN30</user>
    <text>Hi there! I have a question about the update architecture. Let's say I have such code:
```
type alias Model = {
    popup : Popup
}
type alias Popup = {
    isActive : Bool
}
type Msg 
    = PopupMsg Bool
    | SomeOtherMsg
```
When I handle `SomeOtherMsg` with my update function I then want to hide my popup. And now I have 2 ways of doing this:
1. Directly change my models popup in `SomePtherMsg` case branch like this:
```
let
    popup = model.popup
    updPopup = { popup | isActive = False }
in
    { model | popup = updPopup } ! []
```
2. Send a command with `Task.perform` like this:
```
model ! Task.perform PopupMsg (Task.succeed False)
```
So, what's the more correct way to do this? Thank you.</text>
  </message>
  <message>
    <ts>2017-07-16T10:50:21.790114</ts>
    <user>U3SJEDR96</user>
    <text>3. make a function `hidePopup : Model -&amp;gt; Model` and call it from both branches</text>
  </message>
  <message>
    <ts>2017-07-16T10:59:01.826572</ts>
    <user>U3VH7AN30</user>
    <text>&lt;@U3SJEDR96&gt; I thought about this but that's not the third option because it's just refactoring and can be done in both cases. </text>
  </message>
  <message>
    <ts>2017-07-16T11:07:44.867001</ts>
    <user>U4872964V</user>
    <text>well, I say 3. too even if it’s “just refactoring” :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T11:15:44.900616</ts>
    <user>U3VH7AN30</user>
    <text>Ok then. Just to clarify - preferred option is not to use commands?</text>
  </message>
  <message>
    <ts>2017-07-16T11:18:53.914108</ts>
    <user>U4872964V</user>
    <text>yes, commands are for asynchronous stuff</text>
  </message>
  <message>
    <ts>2017-07-16T11:19:37.917315</ts>
    <user>U4872964V</user>
    <text>potentially you will have some other message come in between</text>
  </message>
  <message>
    <ts>2017-07-16T11:20:04.919312</ts>
    <user>U4872964V</user>
    <text>maybe it matters, maybe it doesn’t</text>
  </message>
  <message>
    <ts>2017-07-16T11:20:06.919481</ts>
    <user>U3VH7AN30</user>
    <text>Ah, now I see. Thank you for explanation))</text>
  </message>
  <message>
    <ts>2017-07-16T11:53:40.066922</ts>
    <user>U6AH7SUH5</user>
    <text>I'm an android developer and very intrigued by the elm architecture. I want to structure my apps similarly, unfortunately we don't have as much control over the view as web devs. 

My question is how to model things in the UI that don't really change the permanent app state. As an example, we have things called toasts (&lt;http://www.materialdoc.com/content/images/2015/12/toast-1-1.png&gt;) which is a small popup notification that disappears automatically. You would show it like this: `Toast.make("email sent", disappearDelay);`

Using a `EmailSent` state type is not always possible, because in android your application can be terminated and restarted at any time (for example when you rotate your phone to horizontal) and re-rendering the `EmailSent` state (since the `view` function would be called with the last state) when the app is restarted would lead to showing the toast again any time you rotate your phone.</text>
  </message>
  <message>
    <ts>2017-07-16T12:41:24.290820</ts>
    <user>U0CLDU8UB</user>
    <text>Well, in Elm even things like toasts are part of the app state. There can't be anything like calling `Toast.make("email sent", disappearDelay);` and having the toast appear and disappear on its own in Elm. That's a profoundly imperative API, and effectively you give a piece of state outside the main program at that point. Neither of these are possible in Elm.</text>
  </message>
  <message>
    <ts>2017-07-16T12:44:15.303361</ts>
    <user>U0CLDU8UB</user>
    <text>However, what would be sort of similar is sending stuff out through ports. Anything that happens outside of the Elm application can be imperative, so things like toasts can also happen in the imperative manner in that situation. Maybe that would be a nice analogy?</text>
  </message>
  <message>
    <ts>2017-07-16T12:48:10.320578</ts>
    <user>U6AH7SUH5</user>
    <text>how do you mean? I have been thinking about treating toasts somewhat similar to side effects. My state reducer/update function might look somewhat like this then:

```
fun reduce(view: View, state: State, event: Event) = when(event) {
		is Event.EmailSent -&amp;gt; {
			view.showEmailSent()
			state
		}
		
		is Event.EmailReceived -&amp;gt; {
			state.copy(emails = state.email + event.newEmail)
		}

                // ...
	}
```</text>
  </message>
  <message>
    <ts>2017-07-16T12:48:27.321868</ts>
    <user>U6AH7SUH5</user>
    <text>but it just feels so wrong to call functions on the view directly</text>
  </message>
  <message>
    <ts>2017-07-16T12:48:57.324020</ts>
    <user>U4872964V</user>
    <text>If you are to have the Elm architecture, your reducer would also return something like the Elm Cmd</text>
  </message>
  <message>
    <ts>2017-07-16T12:49:29.326506</ts>
    <user>U4872964V</user>
    <text>which could be “show the toast” for instance</text>
  </message>
  <message>
    <ts>2017-07-16T12:50:34.331940</ts>
    <user>U6AH7SUH5</user>
    <text>that would at least make it pure, but at the same time introduce even more boilerplate event classes</text>
  </message>
  <message>
    <ts>2017-07-16T12:51:27.335989</ts>
    <user>U4872964V</user>
    <text>well, it’s hard to take “half” the architecture I suppose :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T12:52:01.338605</ts>
    <user>U4872964V</user>
    <text>how do you handle fetching data for instance</text>
  </message>
  <message>
    <ts>2017-07-16T12:52:28.340715</ts>
    <user>U4872964V</user>
    <text>let’s say i want to click something and then it should fetch me some data</text>
  </message>
  <message>
    <ts>2017-07-16T12:53:45.346499</ts>
    <user>U0CLDU8UB</user>
    <text>I suppose you're looking for something more like the Redux side-effect libraries, and not really the Elm way?</text>
  </message>
  <message>
    <ts>2017-07-16T12:54:58.351925</ts>
    <user>U0CLDU8UB</user>
    <text>(This is not a criticism, mind you, it might work out better in an OO language like Kotlin)</text>
  </message>
  <message>
    <ts>2017-07-16T12:57:46.365181</ts>
    <user>U4872964V</user>
    <text>well, at least one of the Redux side-effect libraries does it the Elm way :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T12:59:46.373985</ts>
    <user>U4872964V</user>
    <text>in any case, you should probably handle this in the same place where you handle for instance data fetching</text>
  </message>
  <message>
    <ts>2017-07-16T13:01:43.384867</ts>
    <user>U6AH7SUH5</user>
    <text>I'm not sure yet tbh. Currently I have an ADT of event types, that could be things happening in the UI or from outside (network) etc. I have various streams of events that I merge together to form a single stream, which then gets fed into the update function. Before merging everything into the final stream, I could flatMap the event that triggers a network action to the function that loads the data, which itself returns a stream of `LoadingStarted, LoadingFinished, FailedLoading` events

```
events = Stream.merge(
        view.sendEmailEvents,
        view.composeEmailEvents,
        view.refreshInboxEvents.flatMap(emailUseCase.loadEmails())
)  
```

That way I'll have all logic that changes the app state in the update Function and none in the stream. A significant disadvantage of this approach is that not all possible event types will ever reach the update function (since the refreshInbox event is already mapped to something else in the stream), which means I lose the exhaustion checking for ADTs in the update function</text>
  </message>
  <message>
    <ts>2017-07-16T13:06:25.407318</ts>
    <user>U4872964V</user>
    <text>yes, well, it’s not easy to design these things I suppose. I would go for the Elm Architecture all the way, but that’s me :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T13:14:53.446120</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U6AH7SUH5&gt; Did you take a look at &lt;https://github.com/glung/elm-architecture-android&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-16T13:15:43.450113</ts>
    <user>U0CLDU8UB</user>
    <text>It doesn't look very polished, but maybe it has some ideas</text>
  </message>
  <message>
    <ts>2017-07-16T13:17:05.456373</ts>
    <user>U4872964V</user>
    <text>implementing the architecture naively should not be much code, the tricky parts are making it fast :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T13:18:32.463146</ts>
    <user>U4872964V</user>
    <text>something like react-native does</text>
  </message>
  <message>
    <ts>2017-07-16T13:19:06.465545</ts>
    <user>U4872964V</user>
    <text>&lt;https://github.com/zserge/anvil&gt; perhaps</text>
  </message>
  <message>
    <ts>2017-07-16T13:21:08.475436</ts>
    <user>U3E6ZPM1A</user>
    <text>I’m running into an issue using integer division:
`378282246310005 // 10 == -1847312168`
I’m pretty sure it has something to do with using very large numbers with the JS bitwise or (`|`), which is what Elm uses under the hood. Does anyone have an idea of an alternative approach I could take? My goal is essentially to sum up all the digits of a number</text>
  </message>
  <message>
    <ts>2017-07-16T13:23:12.485149</ts>
    <user>U4872964V</user>
    <text>yes, it truncates to 32 bits</text>
  </message>
  <message>
    <ts>2017-07-16T13:24:23.490403</ts>
    <user>U4872964V</user>
    <text>if you expect less than 53 bits of int you can use Float instead</text>
  </message>
  <message>
    <ts>2017-07-16T13:26:28.500361</ts>
    <user>U4872964V</user>
    <text>It’s a known issue: &lt;https://github.com/elm-lang/core/issues/721&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T13:28:04.507735</ts>
    <user>U3E6ZPM1A</user>
    <text>ah great I’ll try that approach</text>
  </message>
  <message>
    <ts>2017-07-16T13:30:09.517573</ts>
    <user>U4872964V</user>
    <text>&lt;http://package.elm-lang.org/packages/gilbertkennen/bigint/1.0.1/BigInt&gt; is also available</text>
  </message>
  <message>
    <ts>2017-07-16T13:30:57.521473</ts>
    <user>U6AH7SUH5</user>
    <text>&lt;@U0CLDU8UB&gt; interesting approach, but I'm afraid that library will be far too slow to be usable</text>
  </message>
  <message>
    <ts>2017-07-16T14:31:53.804026</ts>
    <user>U0EUHKVGB</user>
    <text>Just a PSA for anyone who is new, &lt;#C0K384K4Y|news-and-links&gt; is a great place to hang out if you like to see what's happening in the world of Elm :slightly_smiling_face: Everyone is welcome to share their projects there!</text>
  </message>
  <message>
    <ts>2017-07-16T18:02:32.769403</ts>
    <user>U0KNG2NHH</user>
    <text>evening, folks, let’s see who’s up</text>
  </message>
  <message>
    <ts>2017-07-16T18:02:42.770145</ts>
    <user>U0KNG2NHH</user>
    <text>given 
```
type Bla = A Int | B Int
valA1 = A 1
valA2 = A 2
```
is there a way for me to check whether `valA1` has been constructed with the constructor of `valA2`?</text>
  </message>
  <message>
    <ts>2017-07-16T18:07:21.790280</ts>
    <user>U1CE9DL9H</user>
    <text>not generically</text>
  </message>
  <message>
    <ts>2017-07-16T18:07:43.791744</ts>
    <user>U1CE9DL9H</user>
    <text>but  `Maybe.map2` or `Result.map2` do something like it</text>
  </message>
  <message>
    <ts>2017-07-16T18:08:37.795373</ts>
    <user>U1CE9DL9H</user>
    <text>actually, if you're feeling hacky, you could do something with `toString`, but...</text>
  </message>
  <message>
    <ts>2017-07-16T18:13:57.817795</ts>
    <user>U0KNG2NHH</user>
    <text>&lt;@U1CE9DL9H&gt; no `toString` please :}</text>
  </message>
  <message>
    <ts>2017-07-16T18:14:14.818959</ts>
    <user>U1G51S63S</user>
    <text>is anyone have an experience with elm-form? I can't skip validation at all. found this issue &lt;https://github.com/etaque/elm-form/issues/88&gt; but not sure how to use it :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-16T18:19:48.842455</ts>
    <user>U1G51S63S</user>
    <text>so when I am using it just like `succeed Contact` I got ```[TYPE MISMATCH]
The definition of `contactValidation` does not match its type annotation.
The type annotation for `contactValidation` says it is a:

    Validation () (Contact)

But the definition (shown above) is a:

    Validation () (String -&amp;gt; String -&amp;gt; String -&amp;gt; String -&amp;gt; String -&amp;gt; Contact)

Hint: It looks like a function needs 5 more arguments.```</text>
  </message>
  <message>
    <ts>2017-07-16T18:41:16.937556</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U0KNG2NHH&gt; There is not magical way to do that in Elm.</text>
  </message>
  <message>
    <ts>2017-07-16T18:41:55.940436</ts>
    <user>U0EUHKVGB</user>
    <text>You can do `toString x |&amp;gt; String.split " " |&amp;gt; List.head == toString y |&amp;gt; String.split " " |&amp;gt; List.head`</text>
  </message>
  <message>
    <ts>2017-07-16T18:42:13.941697</ts>
    <user>U0EUHKVGB</user>
    <text>Or define your own functions on a as-needed basis.</text>
  </message>
  <message>
    <ts>2017-07-16T18:42:40.943797</ts>
    <user>U0EUHKVGB</user>
    <text>E.g
```
isA : Bla -&amp;gt; Bool
isA bla = 
  case bla of
    A _ -&amp;gt; True
    _ -&amp;gt; False
```</text>
  </message>
  <message>
    <ts>2017-07-16T19:00:18.023890</ts>
    <user>U0KNG2NHH</user>
    <text>&lt;@U0EUHKVGB&gt; understood. thanx.</text>
  </message>
  <message>
    <ts>2017-07-16T19:01:16.029296</ts>
    <user>U2SQV6FRT</user>
    <text>Anyone run into an issue where calling a port in the `init` of main doesn't actually trigger a call on the JS side?</text>
  </message>
  <message>
    <ts>2017-07-16T19:01:27.030244</ts>
    <user>U2SQV6FRT</user>
    <text>Seems similar to &lt;https://github.com/elm-lang/core/issues/595&gt; but in the reverse direction (from Elm to JS)</text>
  </message>
  <message>
    <ts>2017-07-16T19:02:44.036305</ts>
    <user>U2SQV6FRT</user>
    <text>I suspect its happening before my port is subscribed to on JS. I have to defer my subscribe call because of a dependency</text>
  </message>
  <message>
    <ts>2017-07-16T19:03:48.041226</ts>
    <user>U2SQV6FRT</user>
    <text>working around it by deferring the Elm app bootstrap until my dependency is available, but that isn't great</text>
  </message>
  <message>
    <ts>2017-07-16T19:04:32.044750</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U2SQV6FRT&gt; subscribe before your dependency loads and buffer the messages</text>
  </message>
  <message>
    <ts>2017-07-16T19:04:45.045799</ts>
    <user>U2SQV6FRT</user>
    <text>so, move it out of the init you're saying</text>
  </message>
  <message>
    <ts>2017-07-16T19:07:01.056613</ts>
    <user>U153UK3FA</user>
    <text>or you can delay the port send by having `init` use `Process.sleep` to trigger a `Msg` that gets `update` to do the send later.</text>
  </message>
  <message>
    <ts>2017-07-16T19:07:27.058606</ts>
    <user>U2SQV6FRT</user>
    <text>I guess I really want to know if that is a bug or not</text>
  </message>
  <message>
    <ts>2017-07-16T19:07:44.059883</ts>
    <user>U2SQV6FRT</user>
    <text>it would have expected the init cmd to be queued or something so that I wouldn't have to worry about those timing issues</text>
  </message>
  <message>
    <ts>2017-07-16T19:08:31.063642</ts>
    <user>U153UK3FA</user>
    <text>are you asking, ‘should Elm buffer all messages to ports that don’t yet have a subscriber?’</text>
  </message>
  <message>
    <ts>2017-07-16T19:08:53.065247</ts>
    <user>U2SQV6FRT</user>
    <text>I'm asking "Should Elm buffer the very first message to compensate for any delay on the JS side in the first subscription?"</text>
  </message>
  <message>
    <ts>2017-07-16T19:09:04.066188</ts>
    <user>U0EUHKVGB</user>
    <text>No, I don't think so.</text>
  </message>
  <message>
    <ts>2017-07-16T19:09:19.067362</ts>
    <user>U0EUHKVGB</user>
    <text>Hook up ports before sending things out to the outside world.</text>
  </message>
  <message>
    <ts>2017-07-16T19:09:49.069858</ts>
    <user>U2SQV6FRT</user>
    <text>Of course that is ideal, but in cases where they thing that I need isn't available yet (because the JS side uses AMD)</text>
  </message>
  <message>
    <ts>2017-07-16T19:09:52.070098</ts>
    <user>U2SQV6FRT</user>
    <text>that isn't possible</text>
  </message>
  <message>
    <ts>2017-07-16T19:10:04.071155</ts>
    <user>U0EUHKVGB</user>
    <text>Sure it is, send in a flag to say "ports are ready"</text>
  </message>
  <message>
    <ts>2017-07-16T19:10:08.071578</ts>
    <user>U0EUHKVGB</user>
    <text>via a port</text>
  </message>
  <message>
    <ts>2017-07-16T19:10:25.073050</ts>
    <user>U2SQV6FRT</user>
    <text>right, so the "move it out of init" approach then</text>
  </message>
  <message>
    <ts>2017-07-16T19:10:41.074272</ts>
    <user>U0EUHKVGB</user>
    <text>`someSlowThing.then(() =&amp;gt; app.ports.hasFinishedInitializing.send(true))`</text>
  </message>
  <message>
    <ts>2017-07-16T19:11:47.079402</ts>
    <user>U0EUHKVGB</user>
    <text>Yeah. Some logic for buffering things could be added to the port logic and scheduler.. but that would increase the complexity of how ports currently work. It might be something to consider for future use, but generally I think the principle of least astonishment should apply</text>
  </message>
  <message>
    <ts>2017-07-16T19:12:03.080616</ts>
    <user>U0EUHKVGB</user>
    <text>(i.e ports only recieve things that are sent _after_ a port is hooked up)</text>
  </message>
  <message>
    <ts>2017-07-16T19:12:17.081753</ts>
    <user>U2SQV6FRT</user>
    <text>lol but I'm here because I'm astonished!</text>
  </message>
  <message>
    <ts>2017-07-16T19:12:43.083820</ts>
    <user>U2SQV6FRT</user>
    <text>Now that I know I can just workaround it I suppose. But I was surprised</text>
  </message>
  <message>
    <ts>2017-07-16T19:12:50.084379</ts>
    <user>U0EUHKVGB</user>
    <text>You are the first person I can remember who has asked this question :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T19:13:07.085747</ts>
    <user>U0EUHKVGB</user>
    <text>Or at least, expecting the buffering behaviour</text>
  </message>
  <message>
    <ts>2017-07-16T19:13:37.088037</ts>
    <user>U2SQV6FRT</user>
    <text>At first it was very strange. The delay was just long enough that it would intermittently work</text>
  </message>
  <message>
    <ts>2017-07-16T19:13:38.088150</ts>
    <user>U0EUHKVGB</user>
    <text>But yeah. Maybe it is worth changing. I can see the pros to that. How about making a post on elm-discuss asking for what people think?</text>
  </message>
  <message>
    <ts>2017-07-16T19:14:05.090128</ts>
    <user>U2SQV6FRT</user>
    <text>Is that the right place for these things? I can do that</text>
  </message>
  <message>
    <ts>2017-07-16T19:14:38.092655</ts>
    <user>U2SQV6FRT</user>
    <text>thx for the pointer</text>
  </message>
  <message>
    <ts>2017-07-16T19:14:58.094268</ts>
    <user>U0EUHKVGB</user>
    <text>Yep. We could discuss here, but we've discussed to the point where any further conversation on here would be lost without having an action point :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T19:16:01.099761</ts>
    <user>U0EUHKVGB</user>
    <text>So it's best to say "hey there was this thing I was surprised about, I now know how it currently works and how to get around it, but is anyone else surprised by this? What if it worked like X instead?"</text>
  </message>
  <message>
    <ts>2017-07-16T19:16:47.103447</ts>
    <user>U2SQV6FRT</user>
    <text>gotcha!</text>
  </message>
  <message>
    <ts>2017-07-16T19:17:09.105165</ts>
    <user>U0EUHKVGB</user>
    <text>elm-discuss -- _not_ elm-dev</text>
  </message>
  <message>
    <ts>2017-07-16T19:17:18.105847</ts>
    <user>U0EUHKVGB</user>
    <text>This one: &lt;https://groups.google.com/forum/#!forum/elm-discuss&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T19:21:13.124552</ts>
    <user>U3L8MM10T</user>
    <text>Regarding `BigInt` package &lt;http://package.elm-lang.org/packages/gilbertkennen/bigint/1.0.1/BigInt&gt;, `BigInt` is not included under `number`, but shouldn't it? (edited)</text>
  </message>
  <message>
    <ts>2017-07-16T19:21:36.126349</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3L8MM10T&gt; I'm not sure I follow the question</text>
  </message>
  <message>
    <ts>2017-07-16T19:21:56.127908</ts>
    <user>U0EUHKVGB</user>
    <text>Are you saying there should be a `number -&amp;gt; BigInt` function?</text>
  </message>
  <message>
    <ts>2017-07-16T19:22:57.132689</ts>
    <user>U3L8MM10T</user>
    <text>If a function arg takes a `number`, then I can pass in a `Float`, `Int`, but not `BigInt`.</text>
  </message>
  <message>
    <ts>2017-07-16T19:23:10.133749</ts>
    <user>U0EUHKVGB</user>
    <text>Correct.</text>
  </message>
  <message>
    <ts>2017-07-16T19:23:45.136501</ts>
    <user>U0EUHKVGB</user>
    <text>`number` is only defined as either `Float` or `Int`.</text>
  </message>
  <message>
    <ts>2017-07-16T19:24:20.139090</ts>
    <user>U3L8MM10T</user>
    <text>But that it not very polymorphic. I now need a special version of that same func for `BigInt`. I do not see the advantage.</text>
  </message>
  <message>
    <ts>2017-07-16T19:24:58.141878</ts>
    <user>U0EUHKVGB</user>
    <text>The advantage of what?</text>
  </message>
  <message>
    <ts>2017-07-16T19:25:15.143285</ts>
    <user>U0EUHKVGB</user>
    <text>You are right, yes, you will need a special version of that function for BigInt. That is how things work in Elm.</text>
  </message>
  <message>
    <ts>2017-07-16T19:25:25.144089</ts>
    <user>U3L8MM10T</user>
    <text>What is the advantage of excluding `BigInt` from `number`?</text>
  </message>
  <message>
    <ts>2017-07-16T19:25:59.146707</ts>
    <user>U0EUHKVGB</user>
    <text>We do not have typeclasses or polymorphic function definitions in the sense that you mean.</text>
  </message>
  <message>
    <ts>2017-07-16T19:26:27.149028</ts>
    <user>U3L8MM10T</user>
    <text>Ok, but why not *expand* the scope of `number`?</text>
  </message>
  <message>
    <ts>2017-07-16T19:27:30.154148</ts>
    <user>U0EUHKVGB</user>
    <text>Well, in this case, `BigInt` is just some package. It's not the same as a float or an int, there is no contract saying "hey, if you work in the same way as a number, you are a number".</text>
  </message>
  <message>
    <ts>2017-07-16T19:27:48.155646</ts>
    <user>U0EUHKVGB</user>
    <text>The benefit is that then you do not need to introduce typeclasses and polymorphism in the sense that you mean.</text>
  </message>
  <message>
    <ts>2017-07-16T19:28:33.159396</ts>
    <user>U0EUHKVGB</user>
    <text>In the world of languages like Haskell, which Elm falls into, typeclasses and higher-kinded types (fancy ways of doing things like this) are generally very hard to understand.</text>
  </message>
  <message>
    <ts>2017-07-16T19:28:44.160201</ts>
    <user>U0EUHKVGB</user>
    <text>In Elm, we take a focus on being simple and easy for people to use.</text>
  </message>
  <message>
    <ts>2017-07-16T19:29:17.162992</ts>
    <user>U0EUHKVGB</user>
    <text>The main argument against adding a feature that would allow you to do something like that is keeping Elm simple.</text>
  </message>
  <message>
    <ts>2017-07-16T19:29:51.165606</ts>
    <user>U3L8MM10T</user>
    <text>...at the expense of maintenance overhead.</text>
  </message>
  <message>
    <ts>2017-07-16T19:29:52.165693</ts>
    <user>U0EUHKVGB</user>
    <text>You can see here for all the many previous discussions that have happened on this topic on Github: &lt;https://github.com/elm-lang/elm-compiler/issues/1039&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T19:30:54.171743</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U3L8MM10T&gt;, that does not seem to be the case in reality. There are very few cases in Elm where typeclasses are needed. The cost of making the language more complex, when the number 1 thing people complain about in the state of elm survey was "hard to learn", is not really a good idea.</text>
  </message>
  <message>
    <ts>2017-07-16T19:33:42.184873</ts>
    <user>U3L8MM10T</user>
    <text>Ideally, I would want an `Int` to be smart enough on its own to morph into a `BigInt` (Smalltalk approach).</text>
  </message>
  <message>
    <ts>2017-07-16T19:34:39.189386</ts>
    <user>U0EUHKVGB</user>
    <text>I suggest reading through the issue I linked, and all the issues linked from that. There is a _ton_ of them, and everything has been discussed til the cows come home on there :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T19:42:53.228961</ts>
    <user>U0EUHKVGB</user>
    <text>Oh, and I just remembered I wrote a blog post about this exact topic: &lt;https://medium.com/@eeue56/why-type-classes-arent-important-in-elm-yet-dd55be125c81&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T19:46:18.245357</ts>
    <user>U3L8MM10T</user>
    <text>Perhaps it may be wise to get `BigInt` out of its package and make it a sibling of `Int`. And then simply expand the scope of `number` to include `BigInt`.  But by keeping things the way they are now, people will be reluctant to use `BigInt` because of the overhead -- and this might be a potential source of bugs (such as &lt;https://github.com/lynn/elm-arithmetic/issues/6&gt;)</text>
  </message>
  <message>
    <ts>2017-07-16T19:48:08.254264</ts>
    <user>U0EUHKVGB</user>
    <text>There are more techincal details as to why it can't be treated the same way as `number`.</text>
  </message>
  <message>
    <ts>2017-07-16T19:48:29.256092</ts>
    <user>U0EUHKVGB</user>
    <text>So it's not quite that simple.</text>
  </message>
  <message>
    <ts>2017-07-16T19:48:49.257771</ts>
    <user>U0EUHKVGB</user>
    <text>What are you making that requires `BigInt`?</text>
  </message>
  <message>
    <ts>2017-07-16T19:54:41.287584</ts>
    <user>U3L8MM10T</user>
    <text>I have a _playground_ app where user can manipulate binary trees by applying functions via clicking buttons. So for an `Int` tree, user can add arbitrary delta to the nodes, and likewise can raise the nodes to arbitrary exponent. User can then query trees with functions like `isPrime`.  (The app does not serve a real need except to educate me in writing an Elm app.)  And yes, the btree functions can be scoped to only take in `BigInt`, but this limits their reusability from being able to also handle `Float` polymorphically.</text>
  </message>
  <message>
    <ts>2017-07-16T20:02:10.329172</ts>
    <user>U153UK3FA</user>
    <text>But `BigInt` is reasonably rare to use in the kind of applications Elm is used for</text>
  </message>
  <message>
    <ts>2017-07-16T20:02:27.330739</ts>
    <user>U3L8MM10T</user>
    <text>Ok, I guess.</text>
  </message>
  <message>
    <ts>2017-07-16T20:03:55.338834</ts>
    <user>U153UK3FA</user>
    <text>the complexity of type classes is paid by everyone, the cost of duplicating your tree data structure package is actually pretty small and is only paid by you.</text>
  </message>
  <message>
    <ts>2017-07-16T20:05:06.345283</ts>
    <user>U3L8MM10T</user>
    <text>Just please tell me, how do you know in advance what Elm is used for?</text>
  </message>
  <message>
    <ts>2017-07-16T20:06:27.352425</ts>
    <user>U153UK3FA</user>
    <text>Elm is currently targeted at client side web applications, the vast majority of web applications have no use for `BigInt`</text>
  </message>
  <message>
    <ts>2017-07-16T21:18:02.756392</ts>
    <user>U57KYFW67</user>
    <text>Including custom number types is a hairy issue in any language. Haskell has the `Num` class, and you can get results like the ones you're looking for.... but it comes at a fairly large design cost.</text>
  </message>
  <message>
    <ts>2017-07-16T21:18:46.760957</ts>
    <user>U57KYFW67</user>
    <text>(as funny as it sounds, "number" is not a formal mathematical notion, and so it doesn't translate well into statically typed code)</text>
  </message>
  <message>
    <ts>2017-07-16T21:19:42.766606</ts>
    <user>U57KYFW67</user>
    <text>the `number` syntax (and related ones, like `comparable` are actually kinda hackish in Elm.</text>
  </message>
  <message>
    <ts>2017-07-16T21:20:40.772774</ts>
    <user>U57KYFW67</user>
    <text>their inclusion is a trade-off of elegance of the language for handling the most important use cases for the average web dev. They are baked into the compiler and aren't extensible in any way.</text>
  </message>
  <message>
    <ts>2017-07-16T21:22:12.782227</ts>
    <user>U57KYFW67</user>
    <text>If you need that kind of polymorphism, the answer you'll eventually land on is.... don't make it polymorphic. If you really do need to handle floats and bignums, you will need to handle each case separately</text>
  </message>
  <message>
    <ts>2017-07-16T23:04:53.488350</ts>
    <user>U1NEXBG1K</user>
    <text>Could anyone recommend a some elm learning resources for someone who has never programmed before?</text>
  </message>
  <message>
    <ts>2017-07-16T23:09:02.516701</ts>
    <user>U23SA861Y</user>
    <text>well, this slack channel :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-16T23:09:49.521804</ts>
    <user>U23SA861Y</user>
    <text>There are some nice code examples on github and there is of course the elm documentation</text>
  </message>
  <message>
    <ts>2017-07-16T23:11:20.532312</ts>
    <user>U1NEXBG1K</user>
    <text>Yes, but I frequently come across people that want "to learn to write code"  and I'd like to be able to point them to a text on FP (and then slack, project euler, etc)</text>
  </message>
  <message>
    <ts>2017-07-16T23:19:47.589496</ts>
    <user>U23SA861Y</user>
    <text>Thats a tricky thing, because it's often better to learn by doing. Reading documentation is also a skill that takes time to aquire</text>
  </message>
  <message>
    <ts>2017-07-16T23:21:30.601225</ts>
    <user>U1NEXBG1K</user>
    <text>Yeah, i know, but for someone that's never seen github or an ide . . . it'd be nice to let them focus on the "pure" side of doing</text>
  </message>
  <message>
    <ts>2017-07-16T23:26:52.638043</ts>
    <user>U1NEXBG1K</user>
    <text>at the same time, explain things, like "this import statement, it's importing functions defined in another module which itself is managed by a package manager and installed locally when  a project specifies that it needs a package . . .  this is a signiture, it shows the types that the function takes and the type it returns . . . )etc</text>
  </message>
  <message>
    <ts>2017-07-16T23:27:26.641792</ts>
    <user>U153UK3FA</user>
    <text>I think I've seen one elm tutorial for complete beginners to programming, but I can't remember where</text>
  </message>
  <message>
    <ts>2017-07-17T00:57:58.271366</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U1NEXBG1K&gt; I believe there is _learn me an elm_ that is recommended for folks with experience in imperative, but could also be approachable for those with little programming history.</text>
  </message>
  <message>
    <ts>2017-07-17T00:59:52.284639</ts>
    <user>U2SR9DL7Q</user>
    <text>Honestly, the main thing I look for in beginner tutorials is whether they adequately explain setup and configuration, which was always what frustrated me when I just started out. A lot of resources handwave over proper installation, but half the time people stop advancing it's because they can't get something to work, not that they can't understand material.</text>
  </message>
  <message>
    <ts>2017-07-17T03:22:41.696119</ts>
    <user>U2D7NUGS1</user>
    <text>Hello! Mine and &lt;@U0ZESPUAX&gt; talk about Elm + Polymer web components is on-line. &lt;https://youtu.be/A3hUjC-evlE&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T03:23:17.705045</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks to all the folks here who helped me prepare.</text>
  </message>
  <message>
    <ts>2017-07-17T03:41:53.994243</ts>
    <user>U30UHDER3</user>
    <text>tschuchort: Maybe have a look at &lt;https://github.com/iosphere/elm-toast&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T03:42:39.006681</ts>
    <user>U30UHDER3</user>
    <text>It provides a generic approach to toast and leaves it up to you how to present them. It also allows you to customize the content and data model behind toasts.</text>
  </message>
  <message>
    <ts>2017-07-17T04:56:49.411177</ts>
    <user>U44CPUA82</user>
    <text>It's hard to find resources which would not assume _any_ prior programming knowledge, but maybe you can try &lt;http://elmprogramming.com/&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T05:02:15.525148</ts>
    <user>U44CPUA82</user>
    <text>and then if you get stuck following along, you can always ask people around here - there are always folks here willing to help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T05:05:29.592073</ts>
    <user>U44CPUA82</user>
    <text>ok, not that I've read further I see it's not you needing help, but just want to point other people to good beginner resources. still, the point remains!</text>
  </message>
  <message>
    <ts>2017-07-17T05:11:43.717188</ts>
    <user>U2JFD9ALE</user>
    <text>I sometimes get the following `GET` request with the status code `404`:
```
127.0.0.1 - - [15/Jul/2017 22:38:37] code 404, message File not found
127.0.0.1 - - [15/Jul/2017 22:38:37] "GET /favicon.ico HTTP/1.1" 404 -
```
when hosting my :elm: `SPA` locally with Python: `python -m SimpleHTTPServer`

But when I search for `favicon.ico` with `grep -R "favicon.ico"` is no where to be found. My question is, why is this? Anybody knows?</text>
  </message>
  <message>
    <ts>2017-07-17T05:12:04.724258</ts>
    <user>U2JFD9ALE</user>
    <text>Is it a Python or :elm: issue?</text>
  </message>
  <message>
    <ts>2017-07-17T05:15:43.798274</ts>
    <user>U3SJEDR96</user>
    <text>it's your browser that fetches this by default</text>
  </message>
  <message>
    <ts>2017-07-17T05:15:57.803048</ts>
    <user>U3SJEDR96</user>
    <text>nothing to do with either Elm or python :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T05:20:02.885738</ts>
    <user>U4872964V</user>
    <text>yes, the browser tries to get that file to show you an icon for the page</text>
  </message>
  <message>
    <ts>2017-07-17T05:34:40.180926</ts>
    <user>U2JFD9ALE</user>
    <text>OK roger that. Thx :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T07:38:04.371216</ts>
    <user>U4RR7KX45</user>
    <text>is anyone using Elm with laravel?</text>
  </message>
  <message>
    <ts>2017-07-17T07:38:16.374610</ts>
    <user>U4RR7KX45</user>
    <text>just wondering</text>
  </message>
  <message>
    <ts>2017-07-17T07:46:28.514043</ts>
    <user>U2D7NUGS1</user>
    <text>Very nice article about Elm + GraphQL: &lt;https://alpacaaa.net/blog/post/elm-graphql-client/&gt; Thanks &lt;@U1G66P401&gt; !</text>
  </message>
  <message>
    <ts>2017-07-17T07:58:41.723737</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U4RR7KX45&gt; we use Elm with PHP, but not with Laravel. We use Drupal instead</text>
  </message>
  <message>
    <ts>2017-07-17T07:59:49.745467</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U4RR7KX45&gt; we serve our Elm apps through a Symfony 3 backend</text>
  </message>
  <message>
    <ts>2017-07-17T08:00:04.750800</ts>
    <user>U4RR7KX45</user>
    <text>nice!</text>
  </message>
  <message>
    <ts>2017-07-17T08:00:34.761343</ts>
    <user>U4RR7KX45</user>
    <text>I might try it too</text>
  </message>
  <message>
    <ts>2017-07-17T08:02:08.791432</ts>
    <user>U3SJEDR96</user>
    <text>It's generally a pretty good idea to make your front-end and back-end loosely coupled through an API, tho, so the actual choice of backend or frontend doesn't matter too much</text>
  </message>
  <message>
    <ts>2017-07-17T08:03:40.820596</ts>
    <user>U4RR7KX45</user>
    <text>the reason why I asked is that Laravel uses laravel-mix and just wanted to get an idea how well does it work with it. Laravel mix is just a pre-configured webpack essentially, with the ability to extend it further. it’s not an issue adding elm-loaders and stuff but you never know what problems one might have there..</text>
  </message>
  <message>
    <ts>2017-07-17T08:05:02.846443</ts>
    <user>U3SJEDR96</user>
    <text>ah, alright, that makes sense :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T08:05:07.848019</ts>
    <user>U4RR7KX45</user>
    <text>I have this complex admin panel written in react at the moment. I wanted to rewrite it in cycle.js, but now that Elm got my attention, I’m thinking about using Elm instead :smile:</text>
  </message>
  <message>
    <ts>2017-07-17T08:05:30.855356</ts>
    <user>U4RR7KX45</user>
    <text>there are things I can’t wrap my head around yet but..</text>
  </message>
  <message>
    <ts>2017-07-17T08:05:55.862828</ts>
    <user>U0U6ML22H</user>
    <text>if we were to do it now, we most likely wouldn't use our backend to serve our app, and instead do what &lt;@U3SJEDR96&gt; says; however, the one advantage (that we fail to leverage efficiently ourselves) is that you could do something like PWA more easily, reducing the number of HTTP requests by using flags, etc.</text>
  </message>
  <message>
    <ts>2017-07-17T08:07:50.897913</ts>
    <user>U69N2J6AY</user>
    <text>Is there a way to make my Elm app crash on numeric exceptions (e.g. division by zero, sqrt(-1), etc.) ?</text>
  </message>
  <message>
    <ts>2017-07-17T08:08:44.914796</ts>
    <user>U3SJEDR96</user>
    <text>`1 % 0` should blow up</text>
  </message>
  <message>
    <ts>2017-07-17T08:10:09.941795</ts>
    <user>U3SJEDR96</user>
    <text>but for the most part, you'll just get nonsensical output for nonsensical input</text>
  </message>
  <message>
    <ts>2017-07-17T08:10:26.947429</ts>
    <user>U3SJEDR96</user>
    <text>most of it due to JS and its weird corner-cases</text>
  </message>
  <message>
    <ts>2017-07-17T08:13:55.014418</ts>
    <user>U69N2J6AY</user>
    <text>ah I see. That is unfortunate :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-17T08:14:09.018965</ts>
    <user>U69N2J6AY</user>
    <text>thx</text>
  </message>
  <message>
    <ts>2017-07-17T08:17:35.085367</ts>
    <user>U69N2J6AY</user>
    <text>Is the fact that 1%0 blows up a feature or a liability? From the docs I get the picture that Elm does not acknowledge the usefulness of exceptions for certain cases...</text>
  </message>
  <message>
    <ts>2017-07-17T08:19:30.123576</ts>
    <user>U4872964V</user>
    <text>&lt;@U69N2J6AY&gt; look here &lt;https://github.com/elm-lang/core/issues/721&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T08:21:20.160276</ts>
    <user>U69N2J6AY</user>
    <text>thx for the link :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T08:22:44.188487</ts>
    <user>U4872964V</user>
    <text>so, it’s being categorized at least</text>
  </message>
  <message>
    <ts>2017-07-17T08:36:59.492437</ts>
    <user>U69N2J6AY</user>
    <text>The topic of numerical exceptions brings me to another question: How does one normally does sanity checks in Elm during runtime ("assert" statements in other languages)? Is it idiomatic to use Debug.crash? The documentation could be understood as "only use Debug.crash for TODO-cases".</text>
  </message>
  <message>
    <ts>2017-07-17T08:38:01.514858</ts>
    <user>U4872964V</user>
    <text>what kind of sanity checks?</text>
  </message>
  <message>
    <ts>2017-07-17T08:38:34.527518</ts>
    <user>U4872964V</user>
    <text>give an example</text>
  </message>
  <message>
    <ts>2017-07-17T08:40:48.578280</ts>
    <user>U69N2J6AY</user>
    <text>In a numeric computation, I know that something will end up &amp;gt; 0.0 because I have designed the code that way. But during a future refactoring/change this property might get lost so I want to check it's present. In C++ I would simply write "assert(foo &amp;gt;= 0.0);" and be done</text>
  </message>
  <message>
    <ts>2017-07-17T08:48:09.748611</ts>
    <user>U3SJEDR96</user>
    <text>In Elm, you'd probably write a test for catching logic errors</text>
  </message>
  <message>
    <ts>2017-07-17T08:48:15.751350</ts>
    <user>U4872964V</user>
    <text>yes but what would you do with that assertion?</text>
  </message>
  <message>
    <ts>2017-07-17T08:50:12.797861</ts>
    <user>U69N2J6AY</user>
    <text>ok, my previous example could be easily solved by a unit test. This one couldn't, I think: "given a Maybe interface i know that the result is never Nothing. If it IS nothing, my program is broken".</text>
  </message>
  <message>
    <ts>2017-07-17T08:51:39.833487</ts>
    <user>U4872964V</user>
    <text>Well, if it’s never `Nothing` you shouldn’t use a `Maybe` type</text>
  </message>
  <message>
    <ts>2017-07-17T08:52:34.855901</ts>
    <user>U69N2J6AY</user>
    <text>There are more than one kind of "Never". I think your answer applies only to the one which can be enforced via the type system</text>
  </message>
  <message>
    <ts>2017-07-17T08:54:34.904654</ts>
    <user>U69N2J6AY</user>
    <text>another kind of "Never" is the one in my first example: let's assume that I can mathematically prove that the result foo is always &amp;gt; 0. But the Elm compiler cannot check my code, so it cannot enforce that this remains valid</text>
  </message>
  <message>
    <ts>2017-07-17T08:55:40.933012</ts>
    <user>U3SJEDR96</user>
    <text>If you want your program to crash if `foo &amp;lt;= 0`, then crash. It's just generally nicer to return a  `Result` in that case, and show the error to the user</text>
  </message>
  <message>
    <ts>2017-07-17T08:56:08.944980</ts>
    <user>U69N2J6AY</user>
    <text>ok but is it idiomatic to crash? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T09:07:04.238572</ts>
    <user>U4872964V</user>
    <text>I’m not sure, I’ve never had that situation occur actually, is this a real case?</text>
  </message>
  <message>
    <ts>2017-07-17T09:09:49.312673</ts>
    <user>U69N2J6AY</user>
    <text>I think yes. In my optinion it's nicer if you have a routine which returns a simple Float for the relevant 99,9% of cases and crashes for that 0,1% corner cases instead of one which always returns a Maybe</text>
  </message>
  <message>
    <ts>2017-07-17T09:11:49.369070</ts>
    <user>U4872964V</user>
    <text>well, if you have one that returns Maybe you can make a helper to crash, but the opposite is not true</text>
  </message>
  <message>
    <ts>2017-07-17T09:13:20.412558</ts>
    <user>U4872964V</user>
    <text>well, you could make a helper to check the condition first, that’s true</text>
  </message>
  <message>
    <ts>2017-07-17T09:13:52.427620</ts>
    <user>U69N2J6AY</user>
    <text>That's true. But if there is not a realistic chance that I or somebody else will ever use the bare Maybe-returning function instead of the helper...why bother?</text>
  </message>
  <message>
    <ts>2017-07-17T09:14:34.447283</ts>
    <user>U4872964V</user>
    <text>Well, we’ll see what the summed-up conclusion will be</text>
  </message>
  <message>
    <ts>2017-07-17T09:15:31.474265</ts>
    <user>U4872964V</user>
    <text>it should also work for non-javascript implementations</text>
  </message>
  <message>
    <ts>2017-07-17T09:15:44.480919</ts>
    <user>U4872964V</user>
    <text>(even though js is the only target language currently)</text>
  </message>
  <message>
    <ts>2017-07-17T09:19:59.602908</ts>
    <user>U4872964V</user>
    <text>It may even make sense to have different behaviour for float and int, because float operations are standardized</text>
  </message>
  <message>
    <ts>2017-07-17T09:20:10.608189</ts>
    <user>U4872964V</user>
    <text>IEEE 754</text>
  </message>
  <message>
    <ts>2017-07-17T09:20:55.630156</ts>
    <user>U4872964V</user>
    <text>division by 0 is `Infinite` there</text>
  </message>
  <message>
    <ts>2017-07-17T09:26:02.781384</ts>
    <user>U69N2J6AY</user>
    <text>yes, but in my experience you virtually never want to continue computation with a value of Infinite. That's why the fpu flags this and many programming languages consider this to be a runtime error</text>
  </message>
  <message>
    <ts>2017-07-17T09:26:34.797660</ts>
    <user>U4872964V</user>
    <text>yes, but we don’t have/want runtime errors in Elm</text>
  </message>
  <message>
    <ts>2017-07-17T09:27:52.837320</ts>
    <user>U4872964V</user>
    <text>and i don’t know if javascript gives you access to the fpu flag</text>
  </message>
  <message>
    <ts>2017-07-17T09:33:35.017496</ts>
    <user>U69N2J6AY</user>
    <text>I know about the "no runtime exceptions" mantra. But I think there's a qualitative difference between being able to _avoid_ runtime exceptions and simply ignoring them, when they occur. Nullptr exceptions can certainly be avoided by the Elm static type system. But I don't think it's realistic that runtime exceptions like "division by zero" can be avoided by a type system. Until then you can either acknowledge or ignore them. In my experience it's toxic to ignore them. So Elm is practically putting this burden on the shoulder of the programmer...</text>
  </message>
  <message>
    <ts>2017-07-17T09:38:03.158899</ts>
    <user>U4872964V</user>
    <text>I agree, I think division should return a `Maybe` by default. Then you could make a helper to crash if you like or you could handle the result.</text>
  </message>
  <message>
    <ts>2017-07-17T09:38:59.188143</ts>
    <user>U681TBBUP</user>
    <text>Writing any kind of complicated expression with operators returning `Maybe`s doesn't sound to ideal</text>
  </message>
  <message>
    <ts>2017-07-17T09:39:26.202347</ts>
    <user>U4872964V</user>
    <text>Well, then you’d make that helper</text>
  </message>
  <message>
    <ts>2017-07-17T09:39:40.210276</ts>
    <user>U4872964V</user>
    <text>Normally you don’t write that complicated expressions</text>
  </message>
  <message>
    <ts>2017-07-17T09:39:57.219226</ts>
    <user>U69N2J6AY</user>
    <text>Depends on your application domain, I think</text>
  </message>
  <message>
    <ts>2017-07-17T09:40:12.227505</ts>
    <user>U4872964V</user>
    <text>The application domain I’m thinking about is user interfaces.</text>
  </message>
  <message>
    <ts>2017-07-17T09:40:46.245766</ts>
    <user>U4872964V</user>
    <text>Then you’d make division with the length of a list perhaps to make an average or whatever. Pretty great that you’d have to handle the error case then.</text>
  </message>
  <message>
    <ts>2017-07-17T09:41:03.255190</ts>
    <user>U681TBBUP</user>
    <text>It's possible that complicated visualization setups involving graphing could have some pretty heavy math</text>
  </message>
  <message>
    <ts>2017-07-17T09:41:38.273874</ts>
    <user>U681TBBUP</user>
    <text>e.g. elm-visualization implemented force-directed graphs</text>
  </message>
  <message>
    <ts>2017-07-17T09:42:02.287114</ts>
    <user>U69N2J6AY</user>
    <text>But Elm explicitely discourages the use of native libs. Therefore it's implictely encouraged that you write all sorts of numeric computations in Elm itself?!?</text>
  </message>
  <message>
    <ts>2017-07-17T09:42:24.298633</ts>
    <user>U4872964V</user>
    <text>not at all, you’d probably use a port if you have that kind of library</text>
  </message>
  <message>
    <ts>2017-07-17T09:43:04.320294</ts>
    <user>U4872964V</user>
    <text>Elm does not discourage the use of ports</text>
  </message>
  <message>
    <ts>2017-07-17T09:43:15.326199</ts>
    <user>U69N2J6AY</user>
    <text>within a library?</text>
  </message>
  <message>
    <ts>2017-07-17T09:43:43.341469</ts>
    <user>U4872964V</user>
    <text>Within a library you should not crash I don’t think. That would be a very bad user experience for the library user.</text>
  </message>
  <message>
    <ts>2017-07-17T09:44:12.357328</ts>
    <user>U69N2J6AY</user>
    <text>Fighting through many layers of Maybes can end up in a bad user experience as well I think</text>
  </message>
  <message>
    <ts>2017-07-17T09:44:58.382952</ts>
    <user>U4872964V</user>
    <text>I think it’s easier to solve the issue if there is an actual example. Otherwise I really can’t see the big problem.</text>
  </message>
  <message>
    <ts>2017-07-17T09:45:27.399612</ts>
    <user>U69N2J6AY</user>
    <text>I think your approach is too radical. Shouldn't we put ANYTHING into a Maybe because allocation could fail everytime? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T09:46:07.422352</ts>
    <user>U4872964V</user>
    <text>Allocation failure is something else. That’s outside the application domain.</text>
  </message>
  <message>
    <ts>2017-07-17T09:46:31.435588</ts>
    <user>U4872964V</user>
    <text>division by zero is inside the application</text>
  </message>
  <message>
    <ts>2017-07-17T09:46:34.437414</ts>
    <user>U69N2J6AY</user>
    <text>Why? If I blow up my data structures the application is responsible</text>
  </message>
  <message>
    <ts>2017-07-17T09:48:57.516077</ts>
    <user>U4872964V</user>
    <text>Well, I’m not arguing for not crashing if allocation fails (what else could you do?). I’m arguing for not crashing when dividing by zero, which is something different.</text>
  </message>
  <message>
    <ts>2017-07-17T09:50:44.577446</ts>
    <user>U4872964V</user>
    <text>I’ve given a normal use case, divide by the length of a list to display the average. If the list is 0 you need to handle that case. Having the division operator return a Maybe forces you to handle that case.</text>
  </message>
  <message>
    <ts>2017-07-17T09:51:43.611339</ts>
    <user>U4872964V</user>
    <text>this is the kind of use cases I expect to see in Elm</text>
  </message>
  <message>
    <ts>2017-07-17T09:52:05.623722</ts>
    <user>U4872964V</user>
    <text>and we should build our libraries and language to handle these practical use cases, if possible</text>
  </message>
  <message>
    <ts>2017-07-17T09:52:59.655345</ts>
    <user>U69N2J6AY</user>
    <text>It's alright for me if the division operator would return Maybe, but I don't think you can just ignore the requirement to be able to write down numerical expressions in a readable way. So either the other numerical operators and functions have to be able to handle Maybe themselves oder you need some other tool.</text>
  </message>
  <message>
    <ts>2017-07-17T09:54:19.701530</ts>
    <user>U4872964V</user>
    <text>well, if that is a big pain point maybe it can be adressed too</text>
  </message>
  <message>
    <ts>2017-07-17T09:54:50.719302</ts>
    <user>U69N2J6AY</user>
    <text>Maybe you could introduce another Number type which does not allow for Nan or Infinite. That way you at least can define clean contracts in your interfaces ("i don't accept Inf/NaN")</text>
  </message>
  <message>
    <ts>2017-07-17T09:54:51.719843</ts>
    <user>U4872964V</user>
    <text>i don’t really see it being that big a pain though</text>
  </message>
  <message>
    <ts>2017-07-17T09:55:44.750628</ts>
    <user>U4872964V</user>
    <text>now, I don’t write big numerical expressions in any of my code as far as I can recall, but it would be interesting to see examples of it</text>
  </message>
  <message>
    <ts>2017-07-17T09:55:57.758083</ts>
    <user>U4872964V</user>
    <text>then we can see what can be done about it</text>
  </message>
  <message>
    <ts>2017-07-17T09:56:01.760641</ts>
    <user>U69N2J6AY</user>
    <text>Look at "OpenSolid" or "elm plot"</text>
  </message>
  <message>
    <ts>2017-07-17T09:57:07.797942</ts>
    <user>U4872964V</user>
    <text>any specific file?</text>
  </message>
  <message>
    <ts>2017-07-17T09:57:58.827930</ts>
    <user>U69N2J6AY</user>
    <text>&lt;https://github.com/terezka/elm-plot/blob/5.1.0/src/Internal/Draw.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T09:58:07.832664</ts>
    <user>U69N2J6AY</user>
    <text>line 373</text>
  </message>
  <message>
    <ts>2017-07-17T09:58:31.846810</ts>
    <user>U69N2J6AY</user>
    <text>or 370</text>
  </message>
  <message>
    <ts>2017-07-17T09:58:57.862494</ts>
    <user>U4872964V</user>
    <text>yes, so what if h0 and h1 are both 0</text>
  </message>
  <message>
    <ts>2017-07-17T09:59:20.875801</ts>
    <user>U4872964V</user>
    <text>then you get isNan</text>
  </message>
  <message>
    <ts>2017-07-17T09:59:27.879994</ts>
    <user>U4872964V</user>
    <text>so it needs to be handles</text>
  </message>
  <message>
    <ts>2017-07-17T09:59:28.880578</ts>
    <user>U4872964V</user>
    <text>d</text>
  </message>
  <message>
    <ts>2017-07-17T10:00:27.917384</ts>
    <user>U69N2J6AY</user>
    <text>yes but do you really want to start using case of or Maybe.map or stuff like that in expressions like this?</text>
  </message>
  <message>
    <ts>2017-07-17T10:00:40.925945</ts>
    <user>U4872964V</user>
    <text>well, if the alternative is crashing, yes</text>
  </message>
  <message>
    <ts>2017-07-17T10:01:51.968141</ts>
    <user>U4872964V</user>
    <text>you said before it’s toxic to ignore then, so NaN should not happen then?</text>
  </message>
  <message>
    <ts>2017-07-17T10:03:51.038671</ts>
    <user>U69N2J6AY</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-17T10:04:04.046020</ts>
    <user>U4872964V</user>
    <text>So what would be your solution there?</text>
  </message>
  <message>
    <ts>2017-07-17T10:05:46.106790</ts>
    <user>U69N2J6AY</user>
    <text>let the programmer check for the necessary conditions (like if the denominator is 0) and crash the programm if a numerical exceptions occurs. Because in that case the division by zero indicates that the programmer failed to handle the necessary corner case</text>
  </message>
  <message>
    <ts>2017-07-17T10:06:20.127088</ts>
    <user>U4872964V</user>
    <text>But that is what we have types for! Is checking for 0 really harder than checking for Nothing?</text>
  </message>
  <message>
    <ts>2017-07-17T10:07:45.176909</ts>
    <user>U4872964V</user>
    <text>the type system is supposed to force you to handle the corner cases</text>
  </message>
  <message>
    <ts>2017-07-17T10:08:53.216598</ts>
    <user>U69N2J6AY</user>
    <text>Maybe could very well handle this. But i don't think it's the most programmer-friendly approach of handling it</text>
  </message>
  <message>
    <ts>2017-07-17T10:09:04.222927</ts>
    <user>U4872964V</user>
    <text>it may well be that we can make `Maybe Float` a `number` too to make that easier (if the need is great)</text>
  </message>
  <message>
    <ts>2017-07-17T10:09:30.238069</ts>
    <user>U4872964V</user>
    <text>not sure if that’s the best solution though</text>
  </message>
  <message>
    <ts>2017-07-17T10:10:08.260703</ts>
    <user>U69N2J6AY</user>
    <text>At least as long as you do not any syntactic help...like Haskell's do notation (don't know if this would be applicable here)</text>
  </message>
  <message>
    <ts>2017-07-17T10:12:22.338755</ts>
    <user>U4872964V</user>
    <text>this example, I would do something like
```
case (s0, s1, p) of
    (Just s0, Just s1, Just p) -&amp;gt; (sign s0 + sign s1) * (min (min (abs s0) (abs s1)) (0.5 * abs p))
   _ -&amp;gt; 0
```</text>
  </message>
  <message>
    <ts>2017-07-17T10:12:39.348401</ts>
    <user>U4872964V</user>
    <text>not so hard to handle</text>
  </message>
  <message>
    <ts>2017-07-17T10:16:44.492165</ts>
    <user>U69N2J6AY</user>
    <text>I don't think the inconvenience would arise for the cases where you actually want to handle the corner case but the ones where you know that the corner cases cannot happen, because you have prepared the input data yourself. Like "ok, i need the square root of 2 here. But instead of just writing sqrt(2) i have to do a pattern matching because in principle sqrt can return Nothing"</text>
  </message>
  <message>
    <ts>2017-07-17T10:17:26.517024</ts>
    <user>U2D7NUGS1</user>
    <text>Allow me to drop into your ongoing conversation. It's very interesting indeed. On a formal note, I think `Result` would be a better candidate than `Maybe`. Then encapsulating any arithmetic expression in it wouldn't sound so crazy - after all it is a result.</text>
  </message>
  <message>
    <ts>2017-07-17T10:18:04.540321</ts>
    <user>U2D7NUGS1</user>
    <text>Coming from that, perhaps it would be possible to make number literals be a sugar for `Ok number`.</text>
  </message>
  <message>
    <ts>2017-07-17T10:18:55.570485</ts>
    <user>U4872964V</user>
    <text>&lt;@U69N2J6AY&gt;, well, type safety is sometimes a bit inconvenient, for sure</text>
  </message>
  <message>
    <ts>2017-07-17T10:19:05.575915</ts>
    <user>U2D7NUGS1</user>
    <text>And then user would have to map the `Result` only once, when she want's to use the ehem... result of the computation.</text>
  </message>
  <message>
    <ts>2017-07-17T10:19:38.597438</ts>
    <user>U4872964V</user>
    <text>making every number boxed seems a bit over the top though</text>
  </message>
  <message>
    <ts>2017-07-17T10:20:40.635793</ts>
    <user>U2D7NUGS1</user>
    <text>Ok, actually I came here with a different question and got carried away by your discussion.</text>
  </message>
  <message>
    <ts>2017-07-17T10:20:44.638515</ts>
    <user>U69N2J6AY</user>
    <text>^^</text>
  </message>
  <message>
    <ts>2017-07-17T10:20:54.644055</ts>
    <user>U4872964V</user>
    <text>I would actually love having better types for sqrt and stuff, so I would like to be inconvenienced there :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T10:21:27.664702</ts>
    <user>U2D7NUGS1</user>
    <text>Is there a way of getting all types exported from a module at runtime?</text>
  </message>
  <message>
    <ts>2017-07-17T10:21:42.673671</ts>
    <user>U4872964V</user>
    <text>&lt;@U2D7NUGS1&gt; what do you mean at runtime?</text>
  </message>
  <message>
    <ts>2017-07-17T10:21:51.678528</ts>
    <user>U4872964V</user>
    <text>you want a list of the types?</text>
  </message>
  <message>
    <ts>2017-07-17T10:21:58.682948</ts>
    <user>U2D7NUGS1</user>
    <text>Yes, for starters.</text>
  </message>
  <message>
    <ts>2017-07-17T10:22:09.689430</ts>
    <user>U681TBBUP</user>
    <text>With the goal of introspection?</text>
  </message>
  <message>
    <ts>2017-07-17T10:22:12.691365</ts>
    <user>U2D7NUGS1</user>
    <text>I want to generate some code based on types I have.</text>
  </message>
  <message>
    <ts>2017-07-17T10:22:19.695429</ts>
    <user>U2D7NUGS1</user>
    <text>Yes, introspection.</text>
  </message>
  <message>
    <ts>2017-07-17T10:22:20.696595</ts>
    <user>U4872964V</user>
    <text>there is currently little support for introspecion</text>
  </message>
  <message>
    <ts>2017-07-17T10:22:47.712092</ts>
    <user>U681TBBUP</user>
    <text>Would you happen to be generating backend code to map to your front end models?</text>
  </message>
  <message>
    <ts>2017-07-17T10:22:50.714089</ts>
    <user>U4872964V</user>
    <text>I will make an exploration after 0.19 is out, though: &lt;https://github.com/norpan/elm-dynamic-types&gt; (ignore the name) :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T10:23:08.725256</ts>
    <user>U4872964V</user>
    <text>there are a number of tools that parse Elm code though and does things</text>
  </message>
  <message>
    <ts>2017-07-17T10:23:19.731927</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U681TBBUP&gt; I'm entertaining a similar idea.</text>
  </message>
  <message>
    <ts>2017-07-17T10:23:38.743607</ts>
    <user>U681TBBUP</user>
    <text>&lt;https://hackage.haskell.org/package/elm-export&gt; this is probably a good place to start</text>
  </message>
  <message>
    <ts>2017-07-17T10:23:53.752029</ts>
    <user>U2D7NUGS1</user>
    <text>Oh, cool.</text>
  </message>
  <message>
    <ts>2017-07-17T10:24:06.759770</ts>
    <user>U681TBBUP</user>
    <text>Currently also very interested in the idea</text>
  </message>
  <message>
    <ts>2017-07-17T10:24:39.780445</ts>
    <user>U4872964V</user>
    <text>there is &lt;https://github.com/Bogdanp/elm-ast&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T10:25:17.802299</ts>
    <user>U681TBBUP</user>
    <text>&lt;@U2D7NUGS1&gt; I would argue that the backend code should be generating the front end code as the backend *must* contain the implementation for data persistence</text>
  </message>
  <message>
    <ts>2017-07-17T10:25:45.819966</ts>
    <user>U681TBBUP</user>
    <text>Depends on your goals though</text>
  </message>
  <message>
    <ts>2017-07-17T10:26:03.831819</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U681TBBUP&gt; agree. Together with &lt;@U0ZESPUAX&gt; we were just discussing writing Elm code that would drive a GraphQL server inside ArangoDB (Foxx).</text>
  </message>
  <message>
    <ts>2017-07-17T10:26:13.837746</ts>
    <user>U2D7NUGS1</user>
    <text>So this would be a backend code.</text>
  </message>
  <message>
    <ts>2017-07-17T10:26:30.848509</ts>
    <user>U2D7NUGS1</user>
    <text>We would just use it directly on the client side too.</text>
  </message>
  <message>
    <ts>2017-07-17T10:27:51.897461</ts>
    <user>U681TBBUP</user>
    <text>Maybe it would make sense to use the GraphQL schema to generate the models?</text>
  </message>
  <message>
    <ts>2017-07-17T10:28:03.904748</ts>
    <user>U681TBBUP</user>
    <text>As it is the contract</text>
  </message>
  <message>
    <ts>2017-07-17T10:28:07.906552</ts>
    <user>U3SJEDR96</user>
    <text>There already is code for doing that, afaik</text>
  </message>
  <message>
    <ts>2017-07-17T10:29:53.972828</ts>
    <user>U2D7NUGS1</user>
    <text>Well, it's the schema definition that we want to use Elm for. Standard way is to write JS code :fearful: that creates the schema. We were thinking about ways to avoid it.</text>
  </message>
  <message>
    <ts>2017-07-17T10:30:45.005848</ts>
    <user>U2D7NUGS1</user>
    <text>Like maybe defining models in Elm and generating JS from that.</text>
  </message>
  <message>
    <ts>2017-07-17T10:31:05.018100</ts>
    <user>U2D7NUGS1</user>
    <text>Or using ports.</text>
  </message>
  <message>
    <ts>2017-07-17T10:31:26.031428</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U3SJEDR96&gt; can you elaborate?</text>
  </message>
  <message>
    <ts>2017-07-17T10:32:43.078349</ts>
    <user>U2D7NUGS1</user>
    <text>&lt;@U4872964V&gt; elm-ast looks very promising. Thanks for pointing to it.</text>
  </message>
  <message>
    <ts>2017-07-17T10:36:39.223878</ts>
    <user>U2D7NUGS1</user>
    <text>Hmm... everybody went silent. Does it reflect on the craziness of the idea? :upside_down_face:</text>
  </message>
  <message>
    <ts>2017-07-17T10:37:59.272568</ts>
    <user>U4872964V</user>
    <text>It’s hard to say. I would think that the api code on the server would also be responsible for generating the schema. Having the schema generated by the client seems a bit odd.</text>
  </message>
  <message>
    <ts>2017-07-17T10:38:02.274258</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/jahewson/elm-graphql&gt; this one generates Elm from graphql schema definitions, afaik</text>
  </message>
  <message>
    <ts>2017-07-17T10:38:26.288906</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/jamesmacaulay/elm-graphql&gt; and this one is a DSL for graphql queries in elm</text>
  </message>
  <message>
    <ts>2017-07-17T10:38:59.308905</ts>
    <user>U2D7NUGS1</user>
    <text>Thanks &lt;@U3SJEDR96&gt; , I've seen that.</text>
  </message>
  <message>
    <ts>2017-07-17T10:39:18.320771</ts>
    <user>U2D7NUGS1</user>
    <text>To clarify, the Elm code we are considering would be server side.</text>
  </message>
  <message>
    <ts>2017-07-17T10:39:56.344822</ts>
    <user>U4872964V</user>
    <text>Oh, so you are using Elm to create the api</text>
  </message>
  <message>
    <ts>2017-07-17T10:40:03.348747</ts>
    <user>U4872964V</user>
    <text>that’s something else</text>
  </message>
  <message>
    <ts>2017-07-17T10:40:17.358077</ts>
    <user>U4872964V</user>
    <text>never seen that</text>
  </message>
  <message>
    <ts>2017-07-17T10:40:34.368249</ts>
    <user>U2D7NUGS1</user>
    <text>ArangoDB has this thing called Foxx. It basically allows one to create an API inside the DB.</text>
  </message>
  <message>
    <ts>2017-07-17T10:41:05.387297</ts>
    <user>U2D7NUGS1</user>
    <text>It seems very nice for quick development.</text>
  </message>
  <message>
    <ts>2017-07-17T10:41:13.392507</ts>
    <user>U2D7NUGS1</user>
    <text>The problem is... the code has to be JS.</text>
  </message>
  <message>
    <ts>2017-07-17T10:41:17.394690</ts>
    <user>U4872964V</user>
    <text>doesn’t it generate the schemas too?</text>
  </message>
  <message>
    <ts>2017-07-17T10:41:44.411965</ts>
    <user>U2D7NUGS1</user>
    <text>I think so. We just gave it a first look today.</text>
  </message>
  <message>
    <ts>2017-07-17T10:42:02.422895</ts>
    <user>U2D7NUGS1</user>
    <text>Here is a quickstart for GraphQL: &lt;https://docs.arangodb.com/3.1/Manual/Foxx/GraphQL.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T10:42:37.444206</ts>
    <user>U2D7NUGS1</user>
    <text>So, we are considering using it, but we don't want our backend to be written in JS.</text>
  </message>
  <message>
    <ts>2017-07-17T10:43:28.476704</ts>
    <user>U2D7NUGS1</user>
    <text>We are already building client in Elm so we though that maybe it's an option to use it inside Arango.</text>
  </message>
  <message>
    <ts>2017-07-17T10:43:52.491751</ts>
    <user>U2D7NUGS1</user>
    <text>It's just an early idea that we are playing with.</text>
  </message>
  <message>
    <ts>2017-07-17T10:44:44.524244</ts>
    <user>U2D7NUGS1</user>
    <text>One approach would be to define models for our app, and then use it on server side to generate schema and on client side to generate queries.</text>
  </message>
  <message>
    <ts>2017-07-17T10:45:28.552313</ts>
    <user>U2D7NUGS1</user>
    <text>So the models would actually be an external dependency for both sides.</text>
  </message>
  <message>
    <ts>2017-07-17T10:49:24.702301</ts>
    <user>U4872964V</user>
    <text>sounds…interesting :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T10:53:57.877886</ts>
    <user>U2D7NUGS1</user>
    <text>Thank you. Somehow I sense an euphemism in your message :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T11:01:07.157711</ts>
    <user>U681TBBUP</user>
    <text>Seems quite sketchy for migration</text>
  </message>
  <message>
    <ts>2017-07-17T11:19:42.844602</ts>
    <user>U3L8MM10T</user>
    <text>What is the max safe `Int` that can be used in Elm?</text>
  </message>
  <message>
    <ts>2017-07-17T11:20:31.875810</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U3L8MM10T&gt; the same as javascript, but I do not know what it is</text>
  </message>
  <message>
    <ts>2017-07-17T11:21:27.910281</ts>
    <user>U3L8MM10T</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T11:21:29.911041</ts>
    <user>U3SJEDR96</user>
    <text>`2^53 - 1`</text>
  </message>
  <message>
    <ts>2017-07-17T11:21:31.912903</ts>
    <user>U3SJEDR96</user>
    <text>indeed</text>
  </message>
  <message>
    <ts>2017-07-17T11:21:37.916308</ts>
    <user>U3SJEDR96</user>
    <text>also - &lt;http://package.elm-lang.org/packages/elm-community/basics-extra/2.1.1/Basics-Extra#maxSafeInteger&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T11:22:28.948141</ts>
    <user>U1P6FFJ64</user>
    <text>Also relevant: &lt;http://package.elm-lang.org/packages/gilbertkennen/bigint/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T13:47:32.944500</ts>
    <user>U0EUHKVGB</user>
    <text>I made a channel to discuss the Sketch-to-elm exporter, &lt;#C63E5NXL5|sketch&gt;, feel free to join :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T15:17:33.938194</ts>
    <user>U60SXAF96</user>
    <text>Hey there. I'm getting a weird error -- `Uncaught TypeError: Cannot read property 'appendChild' of null`. Looks like the `debugRenderer` is being passed a null `parentNode` as an argument.</text>
  </message>
  <message>
    <ts>2017-07-17T15:18:04.954190</ts>
    <user>U60SXAF96</user>
    <text>Anyone have a sense as to what the issue is here?</text>
  </message>
  <message>
    <ts>2017-07-17T15:18:57.980205</ts>
    <user>U60SXAF96</user>
    <text>It's happening on app initialization in my `Main.elm` file...although it's unclear to me what's up/wrong.</text>
  </message>
  <message>
    <ts>2017-07-17T15:25:47.188177</ts>
    <user>U4JT89FGB</user>
    <text>does the dom node exist at the time elm is getting added to it?</text>
  </message>
  <message>
    <ts>2017-07-17T15:27:45.248520</ts>
    <user>U0EQCDADA</user>
    <text>&lt;@U60SXAF96&gt; Does this apply? 
&lt;http://faq.elm-community.org/#why-does-my-app-fail-immediately-with-a-console-error-of-uncaught-typeerror-cannot-read-property-appendchild-of-null&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T15:31:25.361810</ts>
    <user>U60SXAF96</user>
    <text>Yup, I'm almost certain that's it. Sorry about that. #RTFFAQ</text>
  </message>
  <message>
    <ts>2017-07-17T16:21:17.925772</ts>
    <user>U5AEH3L05</user>
    <text>I noticed elm-live hasn't been updated in like half a year -- does  it still work pretty well? Are people using it?</text>
  </message>
  <message>
    <ts>2017-07-17T16:24:49.036749</ts>
    <user>U3SJEDR96</user>
    <text>It does what it says on the tin :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T16:27:27.120899</ts>
    <user>U60SXAF96</user>
    <text>Is there a `Cmd.map2`? I'm looking for a function with a type along the lines of `Cmd a -&amp;gt; Cmd b -&amp;gt; (a -&amp;gt; b -&amp;gt; Cmd c)`.</text>
  </message>
  <message>
    <ts>2017-07-17T16:28:23.150822</ts>
    <user>U0LPMPL2U</user>
    <text>Would `Cmd.batch` do? or do you need to trigger a single `Msg`?</text>
  </message>
  <message>
    <ts>2017-07-17T16:29:27.185327</ts>
    <user>U60SXAF96</user>
    <text>How would `Cmd.batch` work? I need the result of two `Cmd` values (with different types) in order to create a third `Cmd`.</text>
  </message>
  <message>
    <ts>2017-07-17T16:29:55.200520</ts>
    <user>U60SXAF96</user>
    <text>Among other issues, `Cmd.batch` seems to require that `a` and `b` in my type signature would be the same.</text>
  </message>
  <message>
    <ts>2017-07-17T16:30:48.229382</ts>
    <user>U60SXAF96</user>
    <text>Or am I missing something?</text>
  </message>
  <message>
    <ts>2017-07-17T16:31:06.238697</ts>
    <user>U0LPMPL2U</user>
    <text>Hmmm, why do you have two different `Cmd` types?</text>
  </message>
  <message>
    <ts>2017-07-17T16:32:04.269234</ts>
    <user>U60SXAF96</user>
    <text>I need to do two fetches to the server to return two different JSON types, which I then parse relevant parts of and combine to create the actual model type that I want.</text>
  </message>
  <message>
    <ts>2017-07-17T16:32:49.292840</ts>
    <user>U60SXAF96</user>
    <text>So I've got a `Cmd (Result Http.Error a)` and a `Cmd (Result Http.Error b)` and a function of type `a -&amp;gt; b -&amp;gt; c`.</text>
  </message>
  <message>
    <ts>2017-07-17T16:33:04.300402</ts>
    <user>U60SXAF96</user>
    <text>I want to create a `Cmd (Result Http.Error c)`.</text>
  </message>
  <message>
    <ts>2017-07-17T16:33:58.329771</ts>
    <user>U0LPMPL2U</user>
    <text>Normally you always want to deal with `Cmd Msg`. Wrap the results with a `Msg` when using `Http.send`</text>
  </message>
  <message>
    <ts>2017-07-17T16:34:29.345903</ts>
    <user>U0LPMPL2U</user>
    <text>It sounds like you're saying `Http.send identity myRequest` right now?</text>
  </message>
  <message>
    <ts>2017-07-17T16:34:45.353992</ts>
    <user>U0LPMPL2U</user>
    <text>You probably want `Http.send SomeMsg myRequest`</text>
  </message>
  <message>
    <ts>2017-07-17T16:35:39.382499</ts>
    <user>U2XRG0UKA</user>
    <text>You can handle this with `Task`s</text>
  </message>
  <message>
    <ts>2017-07-17T16:36:13.400438</ts>
    <user>U2XRG0UKA</user>
    <text>Use `Http.toTask` on your `Request`</text>
  </message>
  <message>
    <ts>2017-07-17T16:36:39.413474</ts>
    <user>U2XRG0UKA</user>
    <text>Then `Task.map2` and finally `Task.attempt`</text>
  </message>
  <message>
    <ts>2017-07-17T16:37:22.435240</ts>
    <user>U40QW928G</user>
    <text>ugh I don't think I understand the purpose of these generic types in Elm</text>
  </message>
  <message>
    <ts>2017-07-17T16:37:28.438648</ts>
    <user>U60SXAF96</user>
    <text>&lt;@U2XRG0UKA&gt; -- Perfect. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-17T16:37:38.443879</ts>
    <user>U40QW928G</user>
    <text>when I see stuff like `Cmd msg` it feels like I can pass w/e I want buthat seems to be false</text>
  </message>
  <message>
    <ts>2017-07-17T16:38:58.485297</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U40QW928G&gt; you can pass it whatever you want but you'll be restricted to what the implementation of the function can be</text>
  </message>
  <message>
    <ts>2017-07-17T16:39:18.495769</ts>
    <user>U3SJEDR96</user>
    <text>You can, as long as you give the same type for `msg` in the whole signature</text>
  </message>
  <message>
    <ts>2017-07-17T16:40:08.520985</ts>
    <user>U0LPMPL2U</user>
    <text>For example:
```
double : List a -&amp;gt; List b
double list =
  List.map (\n -&amp;gt; n * 2) list
```
is not valid because there's on guarantee that the input list is a list of numbers</text>
  </message>
  <message>
    <ts>2017-07-17T16:46:53.729726</ts>
    <user>U0LPMPL2U</user>
    <text>as &lt;@U3SJEDR96&gt; mentioned, the `msg` must mean the _same_ thing everywhere in your signature. For example:
The List.member function has the signature: `member : a -&amp;gt; List a -&amp;gt; Bool`

```
List.member "a" [1,2,3]
```

is _not allowed_ because the signature says the first argument `a` must be of the _same type_ as the values in the list `List a`.</text>
  </message>
  <message>
    <ts>2017-07-17T16:48:06.766961</ts>
    <user>U0LPMPL2U</user>
    <text>`a` in the signature means "whatever" but all the `a`s must be the _same_ "whatever" if that makes any sense :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T17:02:04.197134</ts>
    <user>U0T2S9G6S</user>
    <text>Any recommended book to learn Elm?</text>
  </message>
  <message>
    <ts>2017-07-17T17:05:56.308884</ts>
    <user>U57KYFW67</user>
    <text>The only book for Elm isn't released quite yet</text>
  </message>
  <message>
    <ts>2017-07-17T17:06:17.318955</ts>
    <user>U0T2S9G6S</user>
    <text>How is Elm in Action? </text>
  </message>
  <message>
    <ts>2017-07-17T17:06:34.327112</ts>
    <user>U57KYFW67</user>
    <text>That's the one I'm talking about</text>
  </message>
  <message>
    <ts>2017-07-17T17:06:58.338198</ts>
    <user>U57KYFW67</user>
    <text>"MEAP began July 2016 Publication in Early 2018 (estimated)"</text>
  </message>
  <message>
    <ts>2017-07-17T17:07:34.354936</ts>
    <user>U57KYFW67</user>
    <text>It will probably be great. Feldman is very articulate and he seems very sensitive to the way people learn.</text>
  </message>
  <message>
    <ts>2017-07-17T17:10:50.445411</ts>
    <user>U3SJEDR96</user>
    <text>You can already dive into the chapters that have been written, tho, and totally should!</text>
  </message>
  <message>
    <ts>2017-07-17T17:22:19.748922</ts>
    <user>U23SA861Y</user>
    <text>any reason why Random does not have a `toTask`?</text>
  </message>
  <message>
    <ts>2017-07-17T17:26:59.871068</ts>
    <user>U0LPMPL2U</user>
    <text>You can already combine and chain random generators with `mapN` and `andThen`</text>
  </message>
  <message>
    <ts>2017-07-17T17:27:26.882404</ts>
    <user>U0LPMPL2U</user>
    <text>I suppose it might be useful if you wanted to combine a random generation with a totally different type of task?</text>
  </message>
  <message>
    <ts>2017-07-17T17:27:49.892919</ts>
    <user>U0LPMPL2U</user>
    <text>such as generate a random number andThen make an HTTP request based on that number</text>
  </message>
  <message>
    <ts>2017-07-17T17:29:12.929549</ts>
    <user>U3SJEDR96</user>
    <text>I don't think it _can_ work as a Task, or at least not the way "random as a cmd" works right now, which is using an effect manager which keeps track of the seed.</text>
  </message>
  <message>
    <ts>2017-07-17T17:30:15.957178</ts>
    <user>U3SJEDR96</user>
    <text>You could use Time.now to create a seed and create your own random-as-a-task, tho</text>
  </message>
  <message>
    <ts>2017-07-17T17:31:44.996266</ts>
    <user>U3SJEDR96</user>
    <text>(which is how Random.Pcg provides the `generate` function without being an effect mgr)</text>
  </message>
  <message>
    <ts>2017-07-17T17:32:06.005921</ts>
    <user>U23SA861Y</user>
    <text>that seems to be a in implementation detail though</text>
  </message>
  <message>
    <ts>2017-07-17T17:32:48.023408</ts>
    <user>U23SA861Y</user>
    <text>task by it's nature is sideffecting, it shouldn't really matter HOW it's side effecting</text>
  </message>
  <message>
    <ts>2017-07-17T17:33:24.038898</ts>
    <user>U3SJEDR96</user>
    <text>And yet, it does matter. Task and Cmd aren't interchangeable..</text>
  </message>
  <message>
    <ts>2017-07-17T17:33:25.039596</ts>
    <user>U23SA861Y</user>
    <text>I suppose using a seed is one way to do it</text>
  </message>
  <message>
    <ts>2017-07-17T17:34:13.059447</ts>
    <user>U23SA861Y</user>
    <text>yes, but they are a different abstraction</text>
  </message>
  <message>
    <ts>2017-07-17T17:35:26.089588</ts>
    <user>U23SA861Y</user>
    <text>it was more the `andThen` behaviour I was thinking about</text>
  </message>
  <message>
    <ts>2017-07-17T17:37:34.142411</ts>
    <user>U0JFGGZS6</user>
    <text>relevant discussion, should probably add to the FAQ as it's come up a few times recently:  &lt;https://groups.google.com/forum/#!searchin/elm-dev/random$20task$20cmd%7Csort:relevance/elm-dev/MEBzD3f7Bq8/ojpRsjObDQAJ&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T17:40:54.223785</ts>
    <user>U23SA861Y</user>
    <text>well &lt;@U2SR9DL7Q&gt;  problem got me thinking about it</text>
  </message>
  <message>
    <ts>2017-07-17T17:41:20.235005</ts>
    <user>U2SR9DL7Q</user>
    <text>o.o</text>
  </message>
  <message>
    <ts>2017-07-17T17:41:50.247062</ts>
    <user>U2SR9DL7Q</user>
    <text>I was just about to put a reminder on this convo to read through later</text>
  </message>
  <message>
    <ts>2017-07-17T17:41:57.250202</ts>
    <user>U2SR9DL7Q</user>
    <text>seemed relevant</text>
  </message>
  <message>
    <ts>2017-07-17T17:45:44.341164</ts>
    <user>U0EQCDADA</user>
    <text>I'd be glad to add something to the FAQ about this. But I don't understand this conversation well enough to write it myself.</text>
  </message>
  <message>
    <ts>2017-07-17T17:49:10.422023</ts>
    <user>U2GPAEU1L</user>
    <text>Hey everyone, just made a tutorial on extensible records, exactly what they are, and more importantly, *what they aren’t*:

&lt;http://codetidbit.com/#view/snipbit/596d2ebf7890d775c05191f7/introduction&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T17:49:12.422723</ts>
    <user>U0JFGGZS6</user>
    <text>that's my situation too :slightly_smiling_face:  I mean I think I understand it in principle but haven't used the Random module much at all myself.</text>
  </message>
  <message>
    <ts>2017-07-17T17:50:37.457517</ts>
    <user>U0JFGGZS6</user>
    <text>amilner42, looks useful, thanks</text>
  </message>
  <message>
    <ts>2017-07-17T17:53:53.534313</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0EQCDADA&gt; I'll try to write something up and make a PR, prolly tomorrow</text>
  </message>
  <message>
    <ts>2017-07-17T22:14:51.356087</ts>
    <user>U57KYFW67</user>
    <text>Does Elm have operator sections?</text>
  </message>
  <message>
    <ts>2017-07-17T22:17:46.388576</ts>
    <user>U153UK3FA</user>
    <text>AFAIK it doesn’t</text>
  </message>
  <message>
    <ts>2017-07-17T22:18:56.401455</ts>
    <user>U57KYFW67</user>
    <text>Just checking. (I personally don't care for them, but I reached for it and realized that didn't seem to work)</text>
  </message>
  <message>
    <ts>2017-07-17T23:21:00.033664</ts>
    <user>U57KYFW67</user>
    <text>Is `hiding` considered a keyword in Elm?</text>
  </message>
  <message>
    <ts>2017-07-17T23:21:32.038547</ts>
    <user>U57KYFW67</user>
    <text>I just got snagged on elm-format refusing to accept it as a variable name</text>
  </message>
  <message>
    <ts>2017-07-17T23:23:36.057249</ts>
    <user>U57KYFW67</user>
    <text>`deriving` is also considered a keyword in elm-format, despite Elm not using it.</text>
  </message>
  <message>
    <ts>2017-07-17T23:28:24.102283</ts>
    <user>U0CL0AS3V</user>
    <text>yeah neither of those exist in Elm; I would file a bug! (Also might be `elm-make` and not just `elm-format` - I'd try in Ellie to confirm.)</text>
  </message>
  <message>
    <ts>2017-07-17T23:31:00.127857</ts>
    <user>U57KYFW67</user>
    <text>I figured it out by looking through the `elm-format` code, so I might as well just send a pull request.</text>
  </message>
  <message>
    <ts>2017-07-17T23:31:09.129528</ts>
    <user>U57KYFW67</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T03:00:11.283402</ts>
    <user>U57KYFW67</user>
    <text>Is there a way to query when a certain version of a package was published on package.elm-lang?</text>
  </message>
  <message>
    <ts>2017-07-18T03:17:09.557868</ts>
    <user>U3SJEDR96</user>
    <text>I've been looking into that, too. I happened across some code that seems to indicate that may actually become a query-able thing in a next version of the package listing, but currently the best I've managed is using the github api: &lt;https://api.github.com/repos/zwilias/elm-tree/tags&gt; to get the published tags, and inspecting the relevant commit to get the data. This is only an approximation, tho - a repo can be tagged before publishing, and a tag can be repushed after publishing..</text>
  </message>
  <message>
    <ts>2017-07-18T03:34:10.848583</ts>
    <user>U69DMBMEU</user>
    <text>Hey where to look for elm jobs? I took a jab at major job boards, couldn't find much. Is elm not industry friendly yet?</text>
  </message>
  <message>
    <ts>2017-07-18T03:34:36.855933</ts>
    <user>U1B8JE3Q9</user>
    <text>&lt;@U69DMBMEU&gt;  &lt;#C0LUAGWRK|jobs&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T03:34:40.857374</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U69DMBMEU&gt; are you in the &lt;#C0LUAGWRK|jobs&gt; channel?</text>
  </message>
  <message>
    <ts>2017-07-18T03:35:00.862975</ts>
    <user>U1P6FFJ64</user>
    <text>Check the pinned messages</text>
  </message>
  <message>
    <ts>2017-07-18T03:36:20.886435</ts>
    <user>U69DMBMEU</user>
    <text>No I was not in &lt;#C0LUAGWRK|jobs&gt; channel yet.</text>
  </message>
  <message>
    <ts>2017-07-18T03:36:44.893365</ts>
    <user>U69DMBMEU</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T03:38:23.921851</ts>
    <user>U3SJEDR96</user>
    <text>I'd rather say the industry isn't terribly Elm-friendly *yet*</text>
  </message>
  <message>
    <ts>2017-07-18T04:17:59.707203</ts>
    <user>U69DMBMEU</user>
    <text>I think prospects are good, worth betting on it.</text>
  </message>
  <message>
    <ts>2017-07-18T05:11:21.898082</ts>
    <user>U31AUNK6F</user>
    <text>Is is possible to "chunk" your elm code, so only parts are downloaded that are needed for the app. Like if you have 1000 pages then the elm code will become big. But most of the users only visit a few sections then you only preload the most common pages/code</text>
  </message>
  <message>
    <ts>2017-07-18T05:11:29.901449</ts>
    <user>U31AUNK6F</user>
    <text>i hope this idea is clearly explained haha</text>
  </message>
  <message>
    <ts>2017-07-18T05:15:05.980396</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/projects/blob/master/roadmap.md#how-do-i-make-a-single-page-app&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T05:16:01.002005</ts>
    <user>U31AUNK6F</user>
    <text>Ohw nice thank you &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T05:52:40.809846</ts>
    <user>U0U6ML22H</user>
    <text>so, I think the error message is wrong here: &lt;https://ellie-app.com/3MwPWRydszfa1/2&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T05:53:30.827709</ts>
    <user>U0U6ML22H</user>
    <text>apparently, I cannot create a Dict from a `List (Date.Date, Float)`, which, why not, but the message is not at all that... is it?</text>
  </message>
  <message>
    <ts>2017-07-18T05:55:53.880378</ts>
    <user>U4872964V</user>
    <text>well, it depends on how you look at it I suppose, there is certainly room to clear away cruft and say that the mismatch is that `Date.Date` is not `comparable`</text>
  </message>
  <message>
    <ts>2017-07-18T05:56:02.883710</ts>
    <user>U3SJEDR96</user>
    <text>It's not _wrong_. It's not super clear, but it's not exactly wrong :smile:</text>
  </message>
  <message>
    <ts>2017-07-18T05:56:10.886498</ts>
    <user>U3SJEDR96</user>
    <text>but yeah, `Date` isn't `comparable`</text>
  </message>
  <message>
    <ts>2017-07-18T05:56:28.892989</ts>
    <user>U0U6ML22H</user>
    <text>I figured that was the problem, but certainly not thanks to the message ^^</text>
  </message>
  <message>
    <ts>2017-07-18T05:56:39.897026</ts>
    <user>U0U6ML22H</user>
    <text>(btw, Date could totally be comparable ^^)</text>
  </message>
  <message>
    <ts>2017-07-18T05:57:15.909956</ts>
    <user>U4872964V</user>
    <text>The Elm compiler generally has such good error messages so you get disappointed at messages like this, but coming from Haskell this message is super clear :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T05:57:59.925837</ts>
    <user>U57KYFW67</user>
    <text>"The following difference equation has no solution in the category of small Haskell types: ..." &amp;lt;- the typical Haskell error message.</text>
  </message>
  <message>
    <ts>2017-07-18T05:58:17.932214</ts>
    <user>U0U6ML22H</user>
    <text>^^</text>
  </message>
  <message>
    <ts>2017-07-18T06:05:27.085234</ts>
    <user>U3SJEDR96</user>
    <text>augustin82: if it were special cased - sure. But special casing = more magic, and that's not always good, either :wink:</text>
  </message>
  <message>
    <ts>2017-07-18T08:46:40.187407</ts>
    <user>U37HUSJ4R</user>
    <text>How would you write a json decoder for a field with dynamic keys, but you care about the key? For example I have a type
```
type alias OpeningHours =
    { verb : String, message : String }
```

and the json looks something like `{"play": "foobar"}` or it could be `{"say": "baz"}`</text>
  </message>
  <message>
    <ts>2017-07-18T08:47:00.195387</ts>
    <user>U37HUSJ4R</user>
    <text>where `verb` would be either `play` or `say`</text>
  </message>
  <message>
    <ts>2017-07-18T08:47:54.217346</ts>
    <user>U1CE9DL9H</user>
    <text>decode it as a dictionary</text>
  </message>
  <message>
    <ts>2017-07-18T08:48:21.228485</ts>
    <user>U3SJEDR96</user>
    <text>that, or `keyValuePairs string |&amp;gt; List.map (uncurry OpeningHours)`</text>
  </message>
  <message>
    <ts>2017-07-18T08:49:27.255655</ts>
    <user>U1CE9DL9H</user>
    <text>yes that is better. the dict approach will give problems when using the same key for multiple values</text>
  </message>
  <message>
    <ts>2017-07-18T08:51:09.298439</ts>
    <user>U37HUSJ4R</user>
    <text>interesting, do you have an example of using `keyValuePairs` with a decoder &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T08:51:38.310781</ts>
    <user>U1CE9DL9H</user>
    <text>there is a `Decode.map` missing I believe</text>
  </message>
  <message>
    <ts>2017-07-18T08:51:45.314031</ts>
    <user>U3SJEDR96</user>
    <text>urrgh, yeah, there is :smile:</text>
  </message>
  <message>
    <ts>2017-07-18T08:54:04.374097</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U37HUSJ4R&gt; funny, I'm writing that kind of decoder as we speak :smiley:</text>
  </message>
  <message>
    <ts>2017-07-18T08:54:39.389172</ts>
    <user>U0U6ML22H</user>
    <text>```
decodeStatuses : D.Decoder (Dict.Dict Float SM.SpotStatus)
decodeStatuses =
    D.keyValuePairs (D.string |&amp;gt; D.andThen SC.statusDecoder)
        |&amp;gt; D.map (List.map (Tuple.mapFirst stringToFloat))
        |&amp;gt; D.map (Dict.fromList)
```</text>
  </message>
  <message>
    <ts>2017-07-18T08:55:23.408799</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3MzHwFpBZpLa1/0&gt; for a quick example</text>
  </message>
  <message>
    <ts>2017-07-18T08:56:29.438078</ts>
    <user>U0U6ML22H</user>
    <text>of course, &lt;@U3SJEDR96&gt; is going to come and have a better solution ^^ thanks for `uncurry`, good to know!</text>
  </message>
  <message>
    <ts>2017-07-18T08:59:27.518626</ts>
    <user>U37HUSJ4R</user>
    <text>great</text>
  </message>
  <message>
    <ts>2017-07-18T08:59:33.521309</ts>
    <user>U37HUSJ4R</user>
    <text>thanks &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T09:01:29.579101</ts>
    <user>U0U6ML22H</user>
    <text>you're welcome ^^</text>
  </message>
  <message>
    <ts>2017-07-18T09:03:46.643510</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0U6ML22H&gt; that `stringToFloat`, tho... &amp;gt;.&amp;gt;</text>
  </message>
  <message>
    <ts>2017-07-18T09:04:25.662247</ts>
    <user>U0U6ML22H</user>
    <text>what's wrong with it?</text>
  </message>
  <message>
    <ts>2017-07-18T09:06:00.708500</ts>
    <user>U3SJEDR96</user>
    <text>it's throwing away errors, as opposed to sometihng like this: &lt;http://package.elm-lang.org/packages/elm-community/json-extra/2.3.0/Json-Decode-Extra#dict2&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T09:08:04.767592</ts>
    <user>U0U6ML22H</user>
    <text>ah, that! yeah, you're right :smiley: I've been iterating several times on this code, weighing implementations, going back and forth with Dict or List, so it's a quick'n'dirty version for now</text>
  </message>
  <message>
    <ts>2017-07-18T09:08:14.772294</ts>
    <user>U0U6ML22H</user>
    <text>(which, of course, means it'll stay in production forever)</text>
  </message>
  <message>
    <ts>2017-07-18T09:08:38.784213</ts>
    <user>U0U6ML22H</user>
    <text>I'm going to import dict2, you won =P</text>
  </message>
  <message>
    <ts>2017-07-18T09:08:52.790975</ts>
    <user>U3SJEDR96</user>
    <text>:smile: \o/</text>
  </message>
  <message>
    <ts>2017-07-18T09:09:20.804446</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U3SJEDR96&gt; on your example, how would it work if the `json` was wrapped in an object?</text>
  </message>
  <message>
    <ts>2017-07-18T09:09:47.817753</ts>
    <user>U37HUSJ4R</user>
    <text>also, there always can only ever be either a play or say never both</text>
  </message>
  <message>
    <ts>2017-07-18T09:10:23.835769</ts>
    <user>U37HUSJ4R</user>
    <text>`{example: { "play": "foobar",}}` or `{example: { "say": "foobar",}}`</text>
  </message>
  <message>
    <ts>2017-07-18T09:10:27.837689</ts>
    <user>U0U6ML22H</user>
    <text>&lt;@U3SJEDR96&gt; done, cheers mate</text>
  </message>
  <message>
    <ts>2017-07-18T09:10:31.840264</ts>
    <user>U37HUSJ4R</user>
    <text>for example</text>
  </message>
  <message>
    <ts>2017-07-18T09:12:48.906912</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3MzHwFpBZpLa1/2&gt; probably</text>
  </message>
  <message>
    <ts>2017-07-18T09:13:27.926023</ts>
    <user>U3SJEDR96</user>
    <text>is checks you have exactly one key-value pair in the JS object, and uses that to create your record. If there are zero or more  than 1 pairs, decoding fails</text>
  </message>
  <message>
    <ts>2017-07-18T09:13:28.926145</ts>
    <user>U37HUSJ4R</user>
    <text>no as nice then :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-18T09:14:11.946847</ts>
    <user>U3SJEDR96</user>
    <text>well it's not very nice JSON :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-18T09:14:36.959264</ts>
    <user>U3SJEDR96</user>
    <text>if you have a set of possible keys, you can use them create a `oneOf` decoder, which would be nicer</text>
  </message>
  <message>
    <ts>2017-07-18T09:14:58.970177</ts>
    <user>U37HUSJ4R</user>
    <text>yeh I always know that it'll either be one of them</text>
  </message>
  <message>
    <ts>2017-07-18T09:16:22.012886</ts>
    <user>U3SJEDR96</user>
    <text>ah :smile:</text>
  </message>
  <message>
    <ts>2017-07-18T09:16:36.020027</ts>
    <user>U37HUSJ4R</user>
    <text>sorry, thought I said! my bad</text>
  </message>
  <message>
    <ts>2017-07-18T09:19:20.103031</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3MzHwFpBZpLa1/4&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T09:22:14.194754</ts>
    <user>U37HUSJ4R</user>
    <text>you sir are a very good man</text>
  </message>
  <message>
    <ts>2017-07-18T09:22:18.196716</ts>
    <user>U37HUSJ4R</user>
    <text>thank you :smile:</text>
  </message>
  <message>
    <ts>2017-07-18T09:34:33.599993</ts>
    <user>U3SJEDR96</user>
    <text>Though if there really are only two possibilities... &lt;https://ellie-app.com/3MzHwFpBZpLa1/5&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T10:02:16.577530</ts>
    <user>U37HUSJ4R</user>
    <text>another interesting one, how about a list of json like so:
```
{"default":[[],[855,1900],[855,1900]}
```</text>
  </message>
  <message>
    <ts>2017-07-18T10:02:38.591939</ts>
    <user>U37HUSJ4R</user>
    <text>with the type</text>
  </message>
  <message>
    <ts>2017-07-18T10:02:41.593488</ts>
    <user>U37HUSJ4R</user>
    <text>```
type alias Times =
    { start : Int
    , close : Int
    , message : Maybe String
    }
```</text>
  </message>
  <message>
    <ts>2017-07-18T10:02:51.600123</ts>
    <user>U37HUSJ4R</user>
    <text>`openingTimes : List (Maybe Times)`</text>
  </message>
  <message>
    <ts>2017-07-18T10:03:05.608595</ts>
    <user>U37HUSJ4R</user>
    <text>can you do 'keyless' decoding</text>
  </message>
  <message>
    <ts>2017-07-18T10:03:24.621419</ts>
    <user>U37HUSJ4R</user>
    <text>so far I have `(Decode.field "default" (Decode.list currentTimes))` as a property of a `map`</text>
  </message>
  <message>
    <ts>2017-07-18T10:03:38.630421</ts>
    <user>U37HUSJ4R</user>
    <text>and current times returns `currentTimes : Decode.Decoder (Maybe Times)`</text>
  </message>
  <message>
    <ts>2017-07-18T10:06:02.721005</ts>
    <user>U0LPMPL2U</user>
    <text>that looks right. is it not working?</text>
  </message>
  <message>
    <ts>2017-07-18T10:06:11.726499</ts>
    <user>U0CL0AS3V</user>
    <text>This looks like a good candidate for &lt;https://github.com/elm-lang/error-message-catalog&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T10:06:47.748213</ts>
    <user>U37HUSJ4R</user>
    <text>not sure the correct way to decode it in `currentTimes`</text>
  </message>
  <message>
    <ts>2017-07-18T10:06:54.752576</ts>
    <user>U3SJEDR96</user>
    <text>you can use `Decode.index` to get at specific indices in an array</text>
  </message>
  <message>
    <ts>2017-07-18T10:10:18.878073</ts>
    <user>U37HUSJ4R</user>
    <text>interesting, so in `currentTimes` how would I loop through each index?</text>
  </message>
  <message>
    <ts>2017-07-18T10:13:23.992300</ts>
    <user>U3SJEDR96</user>
    <text>you wouldn't, cause you know them - `map3 Times (index 0 int) (index 1 int) (maybe &amp;lt;| index 2 string)`</text>
  </message>
  <message>
    <ts>2017-07-18T10:13:48.008146</ts>
    <user>U0LPMPL2U</user>
    <text>You don't need to loop. Define a decoder for a single `[855, 1900]` array, then you use `Json.Decode.list` to say you have a list of them.</text>
  </message>
  <message>
    <ts>2017-07-18T10:13:54.011473</ts>
    <user>U0U6ML22H</user>
    <text>Will try to post it there, thanks!</text>
  </message>
  <message>
    <ts>2017-07-18T10:14:13.022688</ts>
    <user>U37HUSJ4R</user>
    <text>I don't know the values though</text>
  </message>
  <message>
    <ts>2017-07-18T10:14:15.023956</ts>
    <user>U37HUSJ4R</user>
    <text>it might change</text>
  </message>
  <message>
    <ts>2017-07-18T10:14:20.027424</ts>
    <user>U37HUSJ4R</user>
    <text>for example index 2 might become []</text>
  </message>
  <message>
    <ts>2017-07-18T10:15:10.058181</ts>
    <user>U0LPMPL2U</user>
    <text>`maybe &amp;lt;| index 2 string` gives you `Just "hello"` if there is a string in index 2 and `Nothing` otherwise</text>
  </message>
  <message>
    <ts>2017-07-18T10:15:52.085688</ts>
    <user>U0LPMPL2U</user>
    <text>I think &lt;@U3SJEDR96&gt;'s example needs a few tweeks to handle the `[]` case</text>
  </message>
  <message>
    <ts>2017-07-18T10:16:12.098575</ts>
    <user>U3SJEDR96</user>
    <text>yeah, you'd put the whole thing in a `maybe`</text>
  </message>
  <message>
    <ts>2017-07-18T10:23:40.381501</ts>
    <user>U0LPMPL2U</user>
    <text>```
startTime : Decoder (Maybe Int)
startTime =
  maybe &amp;lt;| index 0 int

endTime : Decoder (Maybe Int)
endTime =
  maybe &amp;lt;| index 1 int

message : Decoder (Maybe String)
message =
  maybe &amp;lt;| index 2 string

time : Decoder (Maybe Times)
time =
  map3 timeFromOptions startTime endTime message

timeFromOptions : Maybe Int -&amp;gt; Maybe Int -&amp;gt; Maybe String -&amp;gt; Maybe Times
timeFromOptions start end message =
  Maybe.map2 (\s e -&amp;gt; Times s e message) start end

times : Decoder (List (Maybe Times))
times =
  list time
```</text>
  </message>
  <message>
    <ts>2017-07-18T10:23:45.384419</ts>
    <user>U0LPMPL2U</user>
    <text>something like this</text>
  </message>
  <message>
    <ts>2017-07-18T10:23:53.389767</ts>
    <user>U0LPMPL2U</user>
    <text>I broke it up into really small functions to make it easier to follow</text>
  </message>
  <message>
    <ts>2017-07-18T10:26:06.476716</ts>
    <user>U0LPMPL2U</user>
    <text>I find making tiny decoders and working from the bottom up is the easiest way to think through building decoders</text>
  </message>
  <message>
    <ts>2017-07-18T10:27:26.528811</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, I'd have gone for `maybe &amp;lt;| map3 Times (index 0 int) (index 1 int) (maybe &amp;lt;| index 2 string)` but fair enough</text>
  </message>
  <message>
    <ts>2017-07-18T10:30:30.648619</ts>
    <user>U0LPMPL2U</user>
    <text>Oh nice, I didn't think of just wrapping the whole thing with a `maybe` decoder :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-18T10:32:19.720217</ts>
    <user>U37HUSJ4R</user>
    <text>nice!</text>
  </message>
  <message>
    <ts>2017-07-18T10:32:24.723073</ts>
    <user>U37HUSJ4R</user>
    <text>thanks, I will take a look</text>
  </message>
  <message>
    <ts>2017-07-18T10:32:30.727419</ts>
    <user>U37HUSJ4R</user>
    <text>find decoding the hardest part of elm</text>
  </message>
  <message>
    <ts>2017-07-18T10:32:40.733887</ts>
    <user>U0LPMPL2U</user>
    <text>I think everyone does :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T10:33:15.756695</ts>
    <user>U0LPMPL2U</user>
    <text>The trick is to start by trying to decode only the smallest piece of your data structure</text>
  </message>
  <message>
    <ts>2017-07-18T10:33:41.773679</ts>
    <user>U3SJEDR96</user>
    <text>you might be interested in going through these: &lt;https://github.com/zwilias/elm-demystify-decoders&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T10:33:41.773970</ts>
    <user>U0LPMPL2U</user>
    <text>Then you look into how you can combine that with other parts to decode more and more complex structures</text>
  </message>
  <message>
    <ts>2017-07-18T10:35:40.851161</ts>
    <user>U37HUSJ4R</user>
    <text>will take a look</text>
  </message>
  <message>
    <ts>2017-07-18T10:35:54.859488</ts>
    <user>U37HUSJ4R</user>
    <text>and good advice &lt;@U0LPMPL2U&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T10:37:04.904273</ts>
    <user>U0LPMPL2U</user>
    <text>Also, writing small decoder functions and including their type signatures helps me think through the problem</text>
  </message>
  <message>
    <ts>2017-07-18T11:28:15.941714</ts>
    <user>U3ZNWN526</user>
    <text>Okay, here's a question.  Is there some reason that using sinon.js fakeTimers wouldn't work to simulate time passing with elm code?</text>
  </message>
  <message>
    <ts>2017-07-18T11:29:56.006832</ts>
    <user>U3ZNWN526</user>
    <text>I'm doing acceptance testing on my app using webdriver and trying to trigger actions that are supposed to happen every 30 seconds, and sinon.js has a fake timer mechanism that mocks all the time functions (Date.now(), trigger setTimeouts, etc.) and it's working, but Elm isn't doing anything.</text>
  </message>
  <message>
    <ts>2017-07-18T11:32:09.096153</ts>
    <user>U3ZNWN526</user>
    <text>(Does the elm runtime have it's own esoteric time mechanism or something?)</text>
  </message>
  <message>
    <ts>2017-07-18T11:36:28.263662</ts>
    <user>U3SJEDR96</user>
    <text>when you say "isn't doing anything", can you clarify what you mean?</text>
  </message>
  <message>
    <ts>2017-07-18T11:36:33.266452</ts>
    <user>U1L1HMV9Q</user>
    <text>What is the current recommended library for touch interactions?</text>
  </message>
  <message>
    <ts>2017-07-18T11:36:57.281616</ts>
    <user>U3SJEDR96</user>
    <text>I'm guessing this is related to Elm using requestAnimationFrame for rendering, with a fallback to `setTimeout(1000/60)`</text>
  </message>
  <message>
    <ts>2017-07-18T11:44:23.565528</ts>
    <user>U3ZNWN526</user>
    <text>&lt;@U3SJEDR96&gt; - Yeah, I mean the things that happen on a timed subscription are not happening at all (much less at an accelerated rate)</text>
  </message>
  <message>
    <ts>2017-07-18T11:46:30.647266</ts>
    <user>U3ZNWN526</user>
    <text>Ooh, so it uses requestAnimationFrame to move the runtime to the next step?  Yeah, I bet that's not mocked by sinon's fake timers...</text>
  </message>
  <message>
    <ts>2017-07-18T11:47:02.667697</ts>
    <user>U3ZNWN526</user>
    <text>So if that's the case, that could explain it...</text>
  </message>
  <message>
    <ts>2017-07-18T11:47:29.685346</ts>
    <user>U3ZNWN526</user>
    <text>I wonder if there's a way to force elm to use setTimeout... ?</text>
  </message>
  <message>
    <ts>2017-07-18T11:49:40.770198</ts>
    <user>U3SJEDR96</user>
    <text>I think `window.requestAnimationFrame = undefined` should force the fallback; though all of that (sinon and disabling rAF) should probably happen before Elm is loaded</text>
  </message>
  <message>
    <ts>2017-07-18T11:50:14.791815</ts>
    <user>U3ZNWN526</user>
    <text>Yeah, that makes sense - I'll give it a shot :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T12:04:26.343031</ts>
    <user>U3ZNWN526</user>
    <text>Huh - that didn't seem to do it either, even though window.requestAnimationFrame was undefined before the app's init function was called.</text>
  </message>
  <message>
    <ts>2017-07-18T12:07:58.475178</ts>
    <user>U681TBBUP</user>
    <text>&lt;@U3ZNWN526&gt; just dropping in but are you using a subscription to run it every 30 seconds?</text>
  </message>
  <message>
    <ts>2017-07-18T12:09:50.542004</ts>
    <user>U3ZNWN526</user>
    <text>Yeah, I sure am.</text>
  </message>
  <message>
    <ts>2017-07-18T12:14:24.704555</ts>
    <user>U681TBBUP</user>
    <text>It does seem to be using `setInterval` under the hood &lt;https://github.com/elm-lang/core/blob/f064b696a2b9ca93abf4c7d1e21ce9e35fbb1d0f/src/Elm/Kernel/Time.js&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T12:33:52.384990</ts>
    <user>U3ZNWN526</user>
    <text>Well that's pretty odd!  That should work with sinon's fake timers just fine...</text>
  </message>
  <message>
    <ts>2017-07-18T12:34:36.410407</ts>
    <user>U3ZNWN526</user>
    <text>But perhaps elm itself is getting confused by the fake timers, since once they are activated, time only moves forward in big jumps...</text>
  </message>
  <message>
    <ts>2017-07-18T12:35:17.433779</ts>
    <user>U3ZNWN526</user>
    <text>Well I gave up on it for now.  I'll just leave that test "pending" :wink:</text>
  </message>
  <message>
    <ts>2017-07-18T13:14:29.797541</ts>
    <user>U3L8MM10T</user>
    <text>For uninstalling a package, do I use `elm-package uninstall`, or do I manually edit _elm-package.json_ and delete appropriate line(s)? (Ditto for _tests\elm-package.json_.) -- and then delete elm-stuff (for tests too) as well as elm.js?</text>
  </message>
  <message>
    <ts>2017-07-18T13:27:33.243794</ts>
    <user>U3RDE7LDP</user>
    <text>&lt;@U3L8MM10T&gt; All the dependencies for your project (as of elm 0.18) are stored in the project's elm-stuff directory, so removing it from elm-package.json and deleting elm-stuff will get rid of it.</text>
  </message>
  <message>
    <ts>2017-07-18T13:42:15.747574</ts>
    <user>U3SJEDR96</user>
    <text>or removing from `elm-package.json` and re-running `elm-package install`</text>
  </message>
  <message>
    <ts>2017-07-18T14:08:36.672065</ts>
    <user>U4H406NET</user>
    <text>Is elm-graphql still being maintained?  In order to talk to the github graphql it needs to pass a basic auth header (note: this is in contravention of the documentation).  I could fork it and do a pull request, would it be taken up?</text>
  </message>
  <message>
    <ts>2017-07-18T14:10:23.733444</ts>
    <user>U3SJEDR96</user>
    <text>&lt;http://package.elm-lang.org/packages/jamesmacaulay/elm-graphql/1.4.0/GraphQL-Client-Http#RequestOptions&gt; &amp;lt;- shouldn't you be able to use those options? Or are you talking about a different `elm-graphql`?</text>
  </message>
  <message>
    <ts>2017-07-18T14:12:51.816123</ts>
    <user>U4H406NET</user>
    <text>Different one.  Sorry, didn't specify.  it's base-dev/elm-graphql.  I had a look at James's, I am going to talk to him about it when he resurfaces.</text>
  </message>
  <message>
    <ts>2017-07-18T14:14:18.866531</ts>
    <user>U3SJEDR96</user>
    <text>Ah, no experience with that one</text>
  </message>
  <message>
    <ts>2017-07-18T14:16:11.930079</ts>
    <user>U4H406NET</user>
    <text>It seems to have made the corr3ect design decision to start with the schema and the query, but it has not been touched for a few months.</text>
  </message>
  <message>
    <ts>2017-07-18T14:29:23.385079</ts>
    <user>U3SJEDR96</user>
    <text>(not being updated doesn't mean much when it does what it's supposed to do)</text>
  </message>
  <message>
    <ts>2017-07-18T14:50:19.101731</ts>
    <user>U3L8MM10T</user>
    <text>I have function ```digitCount : Int -&amp;gt; Int
digitCount i =
    abs i
        |&amp;gt; toString
        |&amp;gt; String.length``` and get `8` for `digitCount (1000^1000)` because that's the length of `"Infinity"`.  I can't imagine that this is correct behavior.</text>
  </message>
  <message>
    <ts>2017-07-18T14:51:36.146857</ts>
    <user>U0J1M0F32</user>
    <text>:thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-18T14:52:19.171649</ts>
    <user>U0LPMPL2U</user>
    <text>`floor &amp;lt;&amp;lt; logBase 10`</text>
  </message>
  <message>
    <ts>2017-07-18T14:52:40.183635</ts>
    <user>U0LPMPL2U</user>
    <text>this will give you the power of 10 of your number</text>
  </message>
  <message>
    <ts>2017-07-18T14:52:46.187095</ts>
    <user>U0LPMPL2U</user>
    <text>which is the same as n-1 digits</text>
  </message>
  <message>
    <ts>2017-07-18T14:53:43.219203</ts>
    <user>U60SXAF96</user>
    <text>...and it's faster, and more accurate, and an implementation that is actually what you mean.</text>
  </message>
  <message>
    <ts>2017-07-18T14:54:15.237431</ts>
    <user>U0LPMPL2U</user>
    <text>so maybe
```
digitCount : Int -&amp;gt; Int
digitCount i =
  abs i
    |&amp;gt; logBase 10
    |&amp;gt; floor
    |&amp;gt; (+) 1
```</text>
  </message>
  <message>
    <ts>2017-07-18T14:54:30.246347</ts>
    <user>U3L8MM10T</user>
    <text>Cool. Thanks all.</text>
  </message>
  <message>
    <ts>2017-07-18T14:54:38.250915</ts>
    <user>U60SXAF96</user>
    <text>Just watch out for 0.</text>
  </message>
  <message>
    <ts>2017-07-18T14:54:45.254766</ts>
    <user>U60SXAF96</user>
    <text>You'll need to special case that in any case.</text>
  </message>
  <message>
    <ts>2017-07-18T14:55:28.280555</ts>
    <user>U3L8MM10T</user>
    <text>Not in my version</text>
  </message>
  <message>
    <ts>2017-07-18T14:56:10.305422</ts>
    <user>U60SXAF96</user>
    <text>Uh, okay. As long as you don't mind negative infinity values floating around your runtime....</text>
  </message>
  <message>
    <ts>2017-07-18T14:57:06.338321</ts>
    <user>U0LPMPL2U</user>
    <text>`String.length &amp;lt;&amp;lt; toString` works with 0</text>
  </message>
  <message>
    <ts>2017-07-18T14:57:20.346666</ts>
    <user>U60SXAF96</user>
    <text>...or you just special case it to 1.</text>
  </message>
  <message>
    <ts>2017-07-18T14:57:39.357847</ts>
    <user>U0LPMPL2U</user>
    <text>but doesn't work for infinity</text>
  </message>
  <message>
    <ts>2017-07-18T14:58:08.375086</ts>
    <user>U0LPMPL2U</user>
    <text>the `logBase 10` approach works for infinity but returns `-Infinity` for 0</text>
  </message>
  <message>
    <ts>2017-07-18T14:59:26.419854</ts>
    <user>U60SXAF96</user>
    <text>Oh, I see what y'all are saying.</text>
  </message>
  <message>
    <ts>2017-07-18T15:00:31.459065</ts>
    <user>U60SXAF96</user>
    <text>Yes, you don't have to special case `0` in the `String.length &amp;lt;&amp;lt; toString` version.  Sorry, I thought when &lt;@U3L8MM10T&gt; said "Not in my version", he meant, "Not in the codebase where I will be implementing this function". I've been misreading things.</text>
  </message>
  <message>
    <ts>2017-07-18T15:00:49.469277</ts>
    <user>U60SXAF96</user>
    <text>Ignore my comments as attempts to correct errors that people weren't making. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-18T15:03:01.544467</ts>
    <user>U3L8MM10T</user>
    <text>Actually, my version is correct -- all you have to do is turn `8` sideways. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T15:03:16.552886</ts>
    <user>U60SXAF96</user>
    <text>The number of digits in 1000 * 1000 is not infinity.</text>
  </message>
  <message>
    <ts>2017-07-18T15:03:27.558937</ts>
    <user>U60SXAF96</user>
    <text>There's a very finite number of digits there, thankyouverymuch. :smile:</text>
  </message>
  <message>
    <ts>2017-07-18T15:05:08.613689</ts>
    <user>U0LPMPL2U</user>
    <text>```
&amp;gt; 1000 ^ 1000
Infinity : number
```</text>
  </message>
  <message>
    <ts>2017-07-18T15:05:18.619499</ts>
    <user>U0LPMPL2U</user>
    <text>this number is bigger than Elm can handle</text>
  </message>
  <message>
    <ts>2017-07-18T15:06:18.652370</ts>
    <user>U0LPMPL2U</user>
    <text>The number of digits in `Infinity` is `Infinity` :smile:</text>
  </message>
  <message>
    <ts>2017-07-18T15:06:31.659730</ts>
    <user>U0LPMPL2U</user>
    <text>```
&amp;gt; (((+) 1) &amp;lt;&amp;lt; floor &amp;lt;&amp;lt; logBase 10 &amp;lt;&amp;lt; abs) 1000 ^ 1000
Infinity : Int
```</text>
  </message>
  <message>
    <ts>2017-07-18T15:18:07.029919</ts>
    <user>U3SJEDR96</user>
    <text>we have JS to thank for that ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-18T15:18:46.050957</ts>
    <user>U5X2ZRFDF</user>
    <text>And IEEE</text>
  </message>
  <message>
    <ts>2017-07-18T15:23:35.204148</ts>
    <user>U23SA861Y</user>
    <text>be thankful it is IEEE754 compliant, because JSON is not</text>
  </message>
  <message>
    <ts>2017-07-18T15:24:55.246716</ts>
    <user>U3L8MM10T</user>
    <text>Interestingly, my elm-repl (Windows10 64bit) insists I use `toFloat`: ```abs i
    |&amp;gt; toFloat
    |&amp;gt; logBase 10
    |&amp;gt; floor
    |&amp;gt; (+) 1```</text>
  </message>
  <message>
    <ts>2017-07-18T15:30:08.411965</ts>
    <user>U0LPMPL2U</user>
    <text>So apparently `logBase : Float -&amp;gt; Float -&amp;gt; Float`</text>
  </message>
  <message>
    <ts>2017-07-18T15:30:14.415222</ts>
    <user>U0LPMPL2U</user>
    <text>that would be why</text>
  </message>
  <message>
    <ts>2017-07-18T15:30:41.430384</ts>
    <user>U23SA861Y</user>
    <text>that would make some sense</text>
  </message>
  <message>
    <ts>2017-07-18T15:31:05.443189</ts>
    <user>U0LPMPL2U</user>
    <text>```
&amp;gt; length i = abs i |&amp;gt; logBase 10 |&amp;gt; floor |&amp;gt; (+) 1
&amp;lt;function&amp;gt; : Float -&amp;gt; Int
```</text>
  </message>
  <message>
    <ts>2017-07-18T15:32:43.495633</ts>
    <user>U0LPMPL2U</user>
    <text>this function doesn't work for decimals though:</text>
  </message>
  <message>
    <ts>2017-07-18T15:32:46.497056</ts>
    <user>U0LPMPL2U</user>
    <text>```
length 3.14
1 : Int
```</text>
  </message>
  <message>
    <ts>2017-07-18T15:33:29.519469</ts>
    <user>U0LPMPL2U</user>
    <text>so you may want to constrain it to only use integers</text>
  </message>
  <message>
    <ts>2017-07-18T15:33:31.520309</ts>
    <user>U3L8MM10T</user>
    <text>Perhaps someone can help with the test. Do I need to import `Infinity`for `Expect.equal Infinity  (digitCount (1000^1000))` ? _Cannot find symbol "Infinity"_</text>
  </message>
  <message>
    <ts>2017-07-18T15:34:38.555524</ts>
    <user>U0LPMPL2U</user>
    <text>Not sure how you can access `Infinity` directly :confused:</text>
  </message>
  <message>
    <ts>2017-07-18T15:35:02.568427</ts>
    <user>U0LPMPL2U</user>
    <text>A hacky way would be to say: `Expect.equal (1000 ^ 1000)  (digitCount (1000^1000))`</text>
  </message>
  <message>
    <ts>2017-07-18T15:35:31.583419</ts>
    <user>U0LPMPL2U</user>
    <text>or you could create a function:
```
infinity : number
infinity =
  1000 ^ 1000
```</text>
  </message>
  <message>
    <ts>2017-07-18T15:40:34.739877</ts>
    <user>U3SJEDR96</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Basics#isInfinite&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T15:41:44.776271</ts>
    <user>U3SJEDR96</user>
    <text>so `digitCount (1000 ^ 1000) |&amp;gt; isInfinite |&amp;gt; Expect.true "that should really be Infinite."`</text>
  </message>
  <message>
    <ts>2017-07-18T15:42:06.787960</ts>
    <user>U3SJEDR96</user>
    <text>unless digitCount returns an `Int` :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-07-18T15:47:59.971209</ts>
    <user>U2PTZFKFX</user>
    <text>hi, can someone explain further about Routing or Navigations?   i.e do i create different div containers to load data into ti when a next page is switched? i. e Home, About us etc??? or a different views with it's own page. I m still confused in that part.</text>
  </message>
  <message>
    <ts>2017-07-18T15:49:02.003927</ts>
    <user>U2PTZFKFX</user>
    <text>mean, do i use Rest API to fetch data into containers or I need to create different html page linking then as normal html ?</text>
  </message>
  <message>
    <ts>2017-07-18T15:58:28.304625</ts>
    <user>U4WH8STNX</user>
    <text>This is a good source but as the article states it's not a smooth introduction :slightly_smiling_face: &lt;https://dev.to/rtfeldman/tour-of-an-open-source-elm-spa&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T15:58:54.319563</ts>
    <user>U2PTZFKFX</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-18T16:00:09.361566</ts>
    <user>U4WH8STNX</user>
    <text>A look into these files should suffice to get how you could do routing, as always there is no *one* solution. &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm&gt; &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Route.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T16:57:23.186419</ts>
    <user>U37HUSJ4R</user>
    <text>I have another JSON decoder question :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-18T16:57:42.196447</ts>
    <user>U37HUSJ4R</user>
    <text>this json `{"custom":{"20170414":[900, 1300],"20170415":[],"20170417":[]}`</text>
  </message>
  <message>
    <ts>2017-07-18T16:58:09.210700</ts>
    <user>U37HUSJ4R</user>
    <text>I want to try and decode into these types</text>
  </message>
  <message>
    <ts>2017-07-18T16:58:15.214059</ts>
    <user>U37HUSJ4R</user>
    <text>```
type alias Custom = {
    data: List Date
}

type alias Date =
    { date : String, extra : Maybe Time }


type alias Time = { start: Int, end: Int}
```</text>
  </message>
  <message>
    <ts>2017-07-18T16:58:48.231470</ts>
    <user>U37HUSJ4R</user>
    <text>I can’t use `keyValuePairs`</text>
  </message>
  <message>
    <ts>2017-07-18T16:58:54.234428</ts>
    <user>U37HUSJ4R</user>
    <text>any ideas</text>
  </message>
  <message>
    <ts>2017-07-18T16:59:06.240619</ts>
    <user>U23SA861Y</user>
    <text>why can't you use keyValue Pairs?</text>
  </message>
  <message>
    <ts>2017-07-18T16:59:42.260264</ts>
    <user>U37HUSJ4R</user>
    <text>because `keyValuePairs` wants the pairs to be same type (this could be wrong?)</text>
  </message>
  <message>
    <ts>2017-07-18T17:00:04.272483</ts>
    <user>U23SA861Y</user>
    <text>the pairs are the same type (String, List Int)</text>
  </message>
  <message>
    <ts>2017-07-18T17:00:53.299795</ts>
    <user>U23SA861Y</user>
    <text>or at least that's what you have written</text>
  </message>
  <message>
    <ts>2017-07-18T17:01:27.317930</ts>
    <user>U23SA861Y</user>
    <text>you then need to appropriately decode the date and times</text>
  </message>
  <message>
    <ts>2017-07-18T17:03:27.380789</ts>
    <user>U0LPMPL2U</user>
    <text>If you said `keyValuePairs timeDecoder` you would have a `Decoder (List (String, Time))`</text>
  </message>
  <message>
    <ts>2017-07-18T17:03:40.387636</ts>
    <user>U0LPMPL2U</user>
    <text>assuming you've already created a `timeDecoder`</text>
  </message>
  <message>
    <ts>2017-07-18T17:05:43.450250</ts>
    <user>U0LPMPL2U</user>
    <text>that can be turned into a `Decoder (List Date)` with something like `map (uncurry Date)`</text>
  </message>
  <message>
    <ts>2017-07-18T17:06:48.481830</ts>
    <user>U37HUSJ4R</user>
    <text>I have a timeDecoder, 
```
timeDecoder : Decoder Time
timeDecoder = 
    Decode.map2 Time
        (Decode.index 0 &lt;http://Decode.int|Decode.int&gt;)
        (Decode.index 1 &lt;http://Decode.int|Decode.int&gt;)
```</text>
  </message>
  <message>
    <ts>2017-07-18T17:08:00.516069</ts>
    <user>U0LPMPL2U</user>
    <text>```
datesDecoder : Decoder (List Date)
datesDecoder =
  Decode.keyValuePairs (Decode.maybe timeDecoder)
    |&amp;gt; Decode.map (uncurry Date)
```</text>
  </message>
  <message>
    <ts>2017-07-18T17:09:17.552504</ts>
    <user>U0LPMPL2U</user>
    <text>I think this should work</text>
  </message>
  <message>
    <ts>2017-07-18T17:09:58.572098</ts>
    <user>U0LPMPL2U</user>
    <text>this can then be turned into a `Decoder Custom` using `Decode.map`</text>
  </message>
  <message>
    <ts>2017-07-18T17:10:29.586778</ts>
    <user>U0LPMPL2U</user>
    <text>```
customDecoder : Decoder Custom
customDecoder =
  Decode.map Custom datesDecoder
```</text>
  </message>
  <message>
    <ts>2017-07-18T17:14:17.694232</ts>
    <user>U37HUSJ4R</user>
    <text>```
module Main exposing (..)

import Html exposing (Html, text)
import Json.Decode as Decode exposing (keyValuePairs, string, Decoder)


main : Html a
main =
    text &amp;lt;| toString &amp;lt;| Decode.decodeString customDecoder input

customDecoder : Decoder Custom
customDecoder =
  Decode.map Custom datesDecoder

datesDecoder : Decoder (List Date)
datesDecoder =
  Decode.keyValuePairs (Decode.maybe timeDecoder)
    |&amp;gt; Decode.map (uncurry Date)

timeDecoder : Decoder Time
timeDecoder = 
    Decode.map2 Time
        (Decode.index 0 &lt;http://Decode.int|Decode.int&gt;)
        (Decode.index 1 &lt;http://Decode.int|Decode.int&gt;)


type alias Custom = {
    data: List Date
}

type alias Date =
    { date : String, extra : Maybe Time }


type alias Time = { start: Int, end: Int} 

input : String
input =
    """
{"custom":{"20170414":[900, 1300],"20170415":[],"20170417":[],"20170429":[],"20170501":[],"20170527":[],"20170529":[],"20170828":[],"20171225":[],"20171226":[]}}
"""
```</text>
  </message>
  <message>
    <ts>2017-07-18T17:14:30.700572</ts>
    <user>U37HUSJ4R</user>
    <text>```
The right side of (|&amp;gt;) is causing a type mismatch.
(|&amp;gt;) is expecting the right side to be a:

Decoder (List ( String, Maybe Time )) -&amp;gt; a

But the right side is:

Decoder ( String, Maybe Time ) -&amp;gt; Decoder Date
```</text>
  </message>
  <message>
    <ts>2017-07-18T17:14:37.703443</ts>
    <user>U37HUSJ4R</user>
    <text>can’t save it in ellie with errors :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-18T17:15:31.728460</ts>
    <user>U0LPMPL2U</user>
    <text>oh, I forgot a `List.map` in there somewhere</text>
  </message>
  <message>
    <ts>2017-07-18T17:16:14.748870</ts>
    <user>U0LPMPL2U</user>
    <text>We've got a `Decoder (List (String, Maybe Time))` so to do stuff with that tuple we need to map both the decoder and the list</text>
  </message>
  <message>
    <ts>2017-07-18T17:16:45.762866</ts>
    <user>U23SA861Y</user>
    <text>wait, you can't save on ellie with errors :confounded:</text>
  </message>
  <message>
    <ts>2017-07-18T17:17:08.773262</ts>
    <user>U0LPMPL2U</user>
    <text>```
datesDecoder : Decoder (List Date)
datesDecoder =
  Decode.keyValuePairs (Decode.maybe timeDecoder)
    |&amp;gt; Decode.map (List.map (uncurry Date))
```</text>
  </message>
  <message>
    <ts>2017-07-18T17:17:13.775105</ts>
    <user>U0LPMPL2U</user>
    <text>I think that should fix it</text>
  </message>
  <message>
    <ts>2017-07-18T17:18:21.807143</ts>
    <user>U0F7JPK36</user>
    <text>&lt;@U23SA861Y&gt; &lt;@U37HUSJ4R&gt; you should be able to, let me see what's going on</text>
  </message>
  <message>
    <ts>2017-07-18T17:18:56.823415</ts>
    <user>U0F7JPK36</user>
    <text>seems to work fine
&lt;https://ellie-app.com/3MKkcL4YYhYa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T17:19:36.841683</ts>
    <user>U23SA861Y</user>
    <text>what to give it another go &lt;@U37HUSJ4R&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T17:22:51.929254</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U37HUSJ4R&gt; here's a fixed version based on Luke's link: &lt;https://ellie-app.com/3MKnNfkt3wha1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T17:23:08.936775</ts>
    <user>U37HUSJ4R</user>
    <text>ah yes, sorry &lt;@U0F7JPK36&gt; been a long day :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-18T17:23:16.940535</ts>
    <user>U23SA861Y</user>
    <text>so it's workign for you then</text>
  </message>
  <message>
    <ts>2017-07-18T17:23:18.941635</ts>
    <user>U0LPMPL2U</user>
    <text>I added the `List.map` and also added a `Decode.field` in the custom decoder</text>
  </message>
  <message>
    <ts>2017-07-18T17:24:02.960890</ts>
    <user>U37HUSJ4R</user>
    <text>can someone explain (very simply :D) what `uncurry` does?</text>
  </message>
  <message>
    <ts>2017-07-18T17:25:43.005479</ts>
    <user>U0LPMPL2U</user>
    <text>turns a function `a -&amp;gt; b -&amp;gt; c` into a function `(a, b) -&amp;gt; c`</text>
  </message>
  <message>
    <ts>2017-07-18T17:25:45.006473</ts>
    <user>U23SA861Y</user>
    <text>its basically a function with the signature `uncurry: (a-&amp;gt;b-&amp;gt;c) -&amp;gt; (a,b) -&amp;gt;c`</text>
  </message>
  <message>
    <ts>2017-07-18T17:26:16.020110</ts>
    <user>U0LPMPL2U</user>
    <text>In this case, it allows us to pass a tuple to the `Date` constructor instead of passing two arguments</text>
  </message>
  <message>
    <ts>2017-07-18T17:26:16.020126</ts>
    <user>U23SA861Y</user>
    <text>it unpacks the tuple and passes it to the function as the first and second parameter</text>
  </message>
  <message>
    <ts>2017-07-18T17:26:25.024086</ts>
    <user>U37HUSJ4R</user>
    <text>also not sure its working correctly</text>
  </message>
  <message>
    <ts>2017-07-18T17:26:26.024464</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;https://ellie-app.com/3MKrJZXX9G9a1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T17:26:33.027937</ts>
    <user>U37HUSJ4R</user>
    <text>look at `20170414`</text>
  </message>
  <message>
    <ts>2017-07-18T17:26:48.034474</ts>
    <user>U37HUSJ4R</user>
    <text>the `extra` shouldnt be a Nothing</text>
  </message>
  <message>
    <ts>2017-07-18T17:29:19.101641</ts>
    <user>U0LPMPL2U</user>
    <text>You changed your time decoder</text>
  </message>
  <message>
    <ts>2017-07-18T17:29:31.106800</ts>
    <user>U0LPMPL2U</user>
    <text>```
timeDecoder : Decoder Time
timeDecoder =
    Decode.map3 Time
        (Decode.index 0 &lt;http://Decode.int|Decode.int&gt;)
        (Decode.index 1 &lt;http://Decode.int|Decode.int&gt;)
        (Decode.index 2 (Decode.maybe Decode.string))
```</text>
  </message>
  <message>
    <ts>2017-07-18T17:29:56.117877</ts>
    <user>U0LPMPL2U</user>
    <text>This decoder will fail if any of these indices aren't present</text>
  </message>
  <message>
    <ts>2017-07-18T17:29:57.118416</ts>
    <user>U37HUSJ4R</user>
    <text>ah that needs to be wrapped in a maybe</text>
  </message>
  <message>
    <ts>2017-07-18T17:30:38.137325</ts>
    <user>U37HUSJ4R</user>
    <text>`        (Decode.maybe &amp;lt;| Decode.index 2 Decode.string)`</text>
  </message>
  <message>
    <ts>2017-07-18T17:31:23.157363</ts>
    <user>U0LPMPL2U</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-18T17:31:39.164562</ts>
    <user>U0LPMPL2U</user>
    <text>the maybe needs to be around the `Decode.index`, not the `Decode.string` :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-18T17:33:23.211289</ts>
    <user>U37HUSJ4R</user>
    <text>I thought it was :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-18T17:33:25.212345</ts>
    <user>U37HUSJ4R</user>
    <text>it seems to work</text>
  </message>
  <message>
    <ts>2017-07-18T17:36:19.289665</ts>
    <user>U37HUSJ4R</user>
    <text>can’t work out if I love elm or think its crazy!!</text>
  </message>
  <message>
    <ts>2017-07-18T17:36:31.294942</ts>
    <user>U37HUSJ4R</user>
    <text>maybe it’s wrong to compare to JS</text>
  </message>
  <message>
    <ts>2017-07-18T17:36:42.299602</ts>
    <user>U37HUSJ4R</user>
    <text>but with JSON decoding seems so much code :confused:</text>
  </message>
  <message>
    <ts>2017-07-18T17:36:57.306137</ts>
    <user>U37HUSJ4R</user>
    <text>this slack so so helpful though :heart:</text>
  </message>
  <message>
    <ts>2017-07-18T17:37:23.317261</ts>
    <user>U23SA861Y</user>
    <text>for decoding yes, but all thats doing is pulling to the surface bugs that would be in your javascript code</text>
  </message>
  <message>
    <ts>2017-07-18T17:37:41.324694</ts>
    <user>U23SA861Y</user>
    <text>how would your javascript respond if the data didn't match</text>
  </message>
  <message>
    <ts>2017-07-18T17:38:04.334871</ts>
    <user>U0LPMPL2U</user>
    <text>```
undefined is not a function
```</text>
  </message>
  <message>
    <ts>2017-07-18T17:38:40.350693</ts>
    <user>U0LPMPL2U</user>
    <text>The array index stuff is particularly vulnerable in JS</text>
  </message>
  <message>
    <ts>2017-07-18T22:57:59.129740</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U37HUSJ4R&gt; re JSON decoding, did you check out this: &lt;http://eeue56.github.io/json-to-elm/&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T02:54:24.167798</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U3LUC6SNS&gt; I did, and its great for simple JSON. But this is quite a complex structure</text>
  </message>
  <message>
    <ts>2017-07-19T02:59:38.244561</ts>
    <user>U4872964V</user>
    <text>&lt;@U37HUSJ4R&gt; yes, it’s a lot of code for encoders (but only linear in the size of the json structure). This is the price you currently pay for type safety.</text>
  </message>
  <message>
    <ts>2017-07-19T03:00:16.256205</ts>
    <user>U4872964V</user>
    <text>json-to-elm can help you with parts of the decoder though</text>
  </message>
  <message>
    <ts>2017-07-19T04:26:16.884083</ts>
    <user>U0U6ML22H</user>
    <text>Turns out that, when one tries to do "Dict.fromList" directly, there IS a hint about comparable types: `Hint: Only ints, floats, chars, strings, lists, and tuples are comparable.`</text>
  </message>
  <message>
    <ts>2017-07-19T05:31:09.344815</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U37HUSJ4R&gt; If you have a complex structure, give it the type-alias you are trying to make</text>
  </message>
  <message>
    <ts>2017-07-19T05:31:40.356259</ts>
    <user>U0EUHKVGB</user>
    <text>And if you have nested type aliases, give it those too -- it generates predicated names :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-19T08:51:45.358688</ts>
    <user>U601ELFEG</user>
    <text>Is there a common work around for the crash in `Array.slice`?</text>
  </message>
  <message>
    <ts>2017-07-19T08:52:37.381140</ts>
    <user>U601ELFEG</user>
    <text>I see the bug has been reported multiple times - and fixed at least twice... but &lt;@U13H7FNDQ&gt; 's recent comment (11 days ago) implies that it will be fixed in the next release.</text>
  </message>
  <message>
    <ts>2017-07-19T08:53:05.393403</ts>
    <user>U1CE9DL9H</user>
    <text>use &lt;http://package.elm-lang.org/packages/Skinney/elm-array-exploration/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T08:53:22.400857</ts>
    <user>U1CE9DL9H</user>
    <text>that library will be integrated into core with 0.19</text>
  </message>
  <message>
    <ts>2017-07-19T08:54:52.439508</ts>
    <user>U601ELFEG</user>
    <text>hmmmm... that will touch a lot of modules!  :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-19T08:55:11.447928</ts>
    <user>U601ELFEG</user>
    <text>perhaps I'll just avoid `Array.slice` for now...</text>
  </message>
  <message>
    <ts>2017-07-19T08:58:27.535066</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U601ELFEG&gt; `s/import Array/import Array.Hamt as Array/g`</text>
  </message>
  <message>
    <ts>2017-07-19T08:59:15.556635</ts>
    <user>U3SJEDR96</user>
    <text>its API is completely compatible, the main issue is interacting with other packages that use `Array`</text>
  </message>
  <message>
    <ts>2017-07-19T08:59:48.571581</ts>
    <user>U601ELFEG</user>
    <text>Exactly - and then there is the "i'll have to change it all back at the right momemnt" issue as well</text>
  </message>
  <message>
    <ts>2017-07-19T09:00:17.587085</ts>
    <user>U601ELFEG</user>
    <text>and then my code doesn't work with multiple versions of Elm (not that that is a big issue in the case, but I like to code that way)</text>
  </message>
  <message>
    <ts>2017-07-19T09:00:38.598606</ts>
    <user>U3SJEDR96</user>
    <text>Myeah, though to be honest, that type of refactoring is super-easy in Elm tho - if you miss anything, it just won't compile</text>
  </message>
  <message>
    <ts>2017-07-19T09:02:02.639477</ts>
    <user>U601ELFEG</user>
    <text>I get it... but in this case I'll just write a super quick `slice` replacement - It's like 8 lines of code if that</text>
  </message>
  <message>
    <ts>2017-07-19T09:03:04.669537</ts>
    <user>U3SJEDR96</user>
    <text>Sure, it's just that Array has more than 1 bug, and some of them are more subtle than a runtime crash :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-19T09:03:57.695123</ts>
    <user>U601ELFEG</user>
    <text>as an aside - I really dislike the negative indicies handling of `Array.slice` - that kind of thing is never really that useful, and makes all sorts of other code do checks all the time</text>
  </message>
  <message>
    <ts>2017-07-19T09:05:07.728676</ts>
    <user>U3SJEDR96</user>
    <text>agreed. Same for `String.slice`; though in both cases it's probably mostly there to reflect the JS api's</text>
  </message>
  <message>
    <ts>2017-07-19T10:02:18.605397</ts>
    <user>U3FJSB596</user>
    <text>Good morning, &lt;#C0CJ3SBBM|general&gt; 

I was asked to give a 30-minute Spanish presentation to the JS community here in Panama, and I decided to present Elm. I wanted to ask for *suggestions for Elm topics* suited for an audience that has not heard of Elm. My first instinct was to go pragmatic and talk about Elm solutions to JS problems (starting with Maybe) but I wanted to come here to ask for advice and suggestions before starting.

Any ideas?</text>
  </message>
  <message>
    <ts>2017-07-19T10:11:48.962027</ts>
    <user>U0LPMPL2U</user>
    <text>Is this audience familiar with functional programing in JS already? Are they familiar with React/Redux architecture?</text>
  </message>
  <message>
    <ts>2017-07-19T10:12:41.994810</ts>
    <user>U3FJSB596</user>
    <text>They are probably not aware of the FP influences, but some of them are familiar with R/R</text>
  </message>
  <message>
    <ts>2017-07-19T10:27:10.547339</ts>
    <user>U0LPMPL2U</user>
    <text>I like the idea of going pragmatic</text>
  </message>
  <message>
    <ts>2017-07-19T10:28:19.591571</ts>
    <user>U0LPMPL2U</user>
    <text>Are you trying to sell the crowd on Elm? Share some interesting concepts from Elm? Introduce them to the idea of types?</text>
  </message>
  <message>
    <ts>2017-07-19T10:32:31.757508</ts>
    <user>U0CL0AS3V</user>
    <text>I'd just tell your story. How you found Elm, what you were hoping to get out of it, and what the experience has been like. :simple_smile: </text>
  </message>
  <message>
    <ts>2017-07-19T10:36:22.909392</ts>
    <user>U2D0V2SAC</user>
    <text>Has anyone been using Elm "as a service", with no intention of rendering html at all ?
Using it for statically-typing and increasing robustness of some piece of logic, like handling business logic and handling API calls and so forth ?</text>
  </message>
  <message>
    <ts>2017-07-19T10:37:04.936517</ts>
    <user>U2D0V2SAC</user>
    <text>Having Elm render a simple text "" ... and using it only for its Update, and having the outside world "use it" via ports/subs</text>
  </message>
  <message>
    <ts>2017-07-19T10:38:13.980580</ts>
    <user>U2D0V2SAC</user>
    <text>Having to carry an aditonnal elm core (while in 0.18) is a bit of a chore, but really not that big of a problem, and the async/type-safe nature of the ports/subs seems like a really good fit for a service.</text>
  </message>
  <message>
    <ts>2017-07-19T10:39:26.028207</ts>
    <user>U3SJEDR96</user>
    <text>you don't have to actually render anything :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-19T10:40:02.051011</ts>
    <user>U3SJEDR96</user>
    <text>you can use `Platform.program` (rather than `Html.program`)  and use `Elm.MyModule.worker()` instead of `.fullscreen()` or `embed()`</text>
  </message>
  <message>
    <ts>2017-07-19T10:40:17.061458</ts>
    <user>U2D0V2SAC</user>
    <text>Oh really...</text>
  </message>
  <message>
    <ts>2017-07-19T10:40:25.066697</ts>
    <user>U2D0V2SAC</user>
    <text>So i dont even have to provide a useless html node</text>
  </message>
  <message>
    <ts>2017-07-19T10:40:28.068897</ts>
    <user>U3SJEDR96</user>
    <text>indeed</text>
  </message>
  <message>
    <ts>2017-07-19T10:40:41.076486</ts>
    <user>U2D0V2SAC</user>
    <text>You make my day.</text>
  </message>
  <message>
    <ts>2017-07-19T10:41:13.097591</ts>
    <user>U2D0V2SAC</user>
    <text>Thanks.</text>
  </message>
  <message>
    <ts>2017-07-19T10:41:20.102399</ts>
    <user>U3SJEDR96</user>
    <text>also useful when doing CLI stuff :wink:</text>
  </message>
  <message>
    <ts>2017-07-19T10:42:36.150952</ts>
    <user>U0J1M0F32</user>
    <text>Still haven't done any Elm CLI stuff, but always want to. Maybe I'll dig into that this weekend.</text>
  </message>
  <message>
    <ts>2017-07-19T10:45:42.274821</ts>
    <user>U2D0V2SAC</user>
    <text>When you say CLI stuff ... you mean ... running elm executables (callable functions) from a CLI ?</text>
  </message>
  <message>
    <ts>2017-07-19T10:46:06.290375</ts>
    <user>U3SJEDR96</user>
    <text>Yeah</text>
  </message>
  <message>
    <ts>2017-07-19T10:46:35.310136</ts>
    <user>U3SJEDR96</user>
    <text>like this little experiment: &lt;https://github.com/zwilias/sudoku-solver&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T10:47:24.343142</ts>
    <user>U2D0V2SAC</user>
    <text>I see. Thats nice.</text>
  </message>
  <message>
    <ts>2017-07-19T10:48:18.378901</ts>
    <user>U2D0V2SAC</user>
    <text>So basically, these can output to the console, OR return a value, and that's it though, right? (not that its a bad thing).</text>
  </message>
  <message>
    <ts>2017-07-19T10:50:27.463790</ts>
    <user>U3SJEDR96</user>
    <text>a worker is really just a headless elm app; that you can talk to through ports</text>
  </message>
  <message>
    <ts>2017-07-19T10:58:26.785779</ts>
    <user>U2P9RBH4J</user>
    <text>&lt;@U0LEKMCRW&gt; reminded me of an issue I had with Elm running on NixOS. 
NixOS runs everything with Symlinks via the /nix/store/{hash}-package-name.nix… 
So it doesn’t have a /lib or /lib32.
Anyone here use elm + webpack with NixOS and have experience fixing the issues with running npm/yarn/elm binaries on Nix?
Or just have experience running elm on NixOS in general? I’d love to see an example project.</text>
  </message>
  <message>
    <ts>2017-07-19T13:59:11.394836</ts>
    <user>U5LFUHH19</user>
    <text>Is there a nice module somewhere to put commas in numbers e.g., "12345" -&amp;gt; "12,345"?</text>
  </message>
  <message>
    <ts>2017-07-19T13:59:51.418914</ts>
    <user>U5LFUHH19</user>
    <text>Sorry, Number.Format.  D'oh!</text>
  </message>
  <message>
    <ts>2017-07-19T14:02:05.501904</ts>
    <user>U23SA861Y</user>
    <text>now is it internationalized....</text>
  </message>
  <message>
    <ts>2017-07-19T14:02:51.528656</ts>
    <user>U5LFUHH19</user>
    <text>Wait, Number.Format won't install for Elm 0.18.  What is the proper module?</text>
  </message>
  <message>
    <ts>2017-07-19T14:04:03.571830</ts>
    <user>U23SA861Y</user>
    <text>believe it or not, this is actually an extremely difficult problem</text>
  </message>
  <message>
    <ts>2017-07-19T14:04:25.585255</ts>
    <user>U5LFUHH19</user>
    <text>Maybe "FormatNumber" (&lt;http://package.elm-lang.org/packages/cuducos/elm-format-number/latest&gt;)?</text>
  </message>
  <message>
    <ts>2017-07-19T14:05:07.609972</ts>
    <user>U23SA861Y</user>
    <text>is this for currency or...?</text>
  </message>
  <message>
    <ts>2017-07-19T14:05:15.614369</ts>
    <user>U5LFUHH19</user>
    <text>No, just an Int.</text>
  </message>
  <message>
    <ts>2017-07-19T14:05:27.621161</ts>
    <user>U5LFUHH19</user>
    <text>E.g., number of results for a search.</text>
  </message>
  <message>
    <ts>2017-07-19T14:08:33.729327</ts>
    <user>U5ABF3BH7</user>
    <text>Hi everyone, I have a record I want to encode though Json.Encode
From my record ```model = { type_ = “at-need’}```, I want to create a Json object ``{“case_types” =&amp;gt; [“at_need”, “”] } ``

if I wanted to pass the param as is, I do 
  ```   Json.Object
     [(“case_types”, Json.string model.type_)] ```
Which gives me ``{“case_types” =&amp;gt; “at_need”}``
But I want to pass ``{“case_types” =&amp;gt; [“at_need”, “”] }``  (an array)
How can I do that?</text>
  </message>
  <message>
    <ts>2017-07-19T14:13:23.894501</ts>
    <user>U0LPMPL2U</user>
    <text>You want to use `Json.Encode.list` to encode a list</text>
  </message>
  <message>
    <ts>2017-07-19T14:15:11.955832</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3N7myrGxCFCa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:15:31.967432</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U5LFUHH19&gt; I don't think there is a native elm library to do what you want</text>
  </message>
  <message>
    <ts>2017-07-19T14:15:40.972646</ts>
    <user>U0U6ML22H</user>
    <text>off the top of my head: &lt;https://ellie-app.com/3N7mVqMCHYHa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:15:44.975271</ts>
    <user>U0U6ML22H</user>
    <text>ah, too slow :wink:</text>
  </message>
  <message>
    <ts>2017-07-19T14:15:58.983089</ts>
    <user>U23SA861Y</user>
    <text>snooze you lose</text>
  </message>
  <message>
    <ts>2017-07-19T14:16:14.992222</ts>
    <user>U0U6ML22H</user>
    <text>I know, but snoozing is my favorite activity, so there.</text>
  </message>
  <message>
    <ts>2017-07-19T14:16:17.994148</ts>
    <user>U0U6ML22H</user>
    <text>:wink:</text>
  </message>
  <message>
    <ts>2017-07-19T14:16:56.016584</ts>
    <user>U5ABF3BH7</user>
    <text>Never mind my question, I finally figured it out, I needed ```("case_types", Json.list [Json.string "at-need", Json.string ""])```</text>
  </message>
  <message>
    <ts>2017-07-19T14:17:57.051987</ts>
    <user>U5LFUHH19</user>
    <text>How can I do Int -&amp;gt; Float?</text>
  </message>
  <message>
    <ts>2017-07-19T14:18:25.067790</ts>
    <user>U0X1G7NVD</user>
    <text>Maybe too late, but you could use `elm-format-number` to format the number per se (customize separators for cents and thousands, amount of decimals etc) and then just concat the currency string in a separate function</text>
  </message>
  <message>
    <ts>2017-07-19T14:18:49.081471</ts>
    <user>U2XRG0UKA</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Basics#toFloat&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:18:54.084299</ts>
    <user>U2XRG0UKA</user>
    <text>`toFloat`</text>
  </message>
  <message>
    <ts>2017-07-19T14:18:59.087345</ts>
    <user>U5LFUHH19</user>
    <text>Ah, jeez, just saw that.  Thanks.</text>
  </message>
  <message>
    <ts>2017-07-19T14:19:08.092001</ts>
    <user>U0U6ML22H</user>
    <text>&lt;http://klaftertief.github.io/elm-search/?q=Int+-%3E+Float&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:19:19.098080</ts>
    <user>U0U6ML22H</user>
    <text>Fancy Search is oh so fancy</text>
  </message>
  <message>
    <ts>2017-07-19T14:19:59.121419</ts>
    <user>U5LFUHH19</user>
    <text>That is soooo nice.</text>
  </message>
  <message>
    <ts>2017-07-19T14:21:56.188166</ts>
    <user>U23SA861Y</user>
    <text>I am hesitant to recommend packages outside the stdlib which I have not had direct experience with.</text>
  </message>
  <message>
    <ts>2017-07-19T14:22:21.202669</ts>
    <user>U23SA861Y</user>
    <text>also, yours doesn't support indian numbering :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-19T14:31:58.539766</ts>
    <user>U5ABF3BH7</user>
    <text>That's pretty cool! &lt;@U3FJSB596&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:36:28.695695</ts>
    <user>U3FJSB596</user>
    <text>From modular parts build the whole</text>
  </message>
  <message>
    <ts>2017-07-19T14:39:25.794896</ts>
    <user>U23SA861Y</user>
    <text>asking the important questions</text>
  </message>
  <message>
    <ts>2017-07-19T14:41:07.852611</ts>
    <user>U0GPGFQQY</user>
    <text>I built smth similar in Elm using WebGL &lt;http://unsoundscapes.com/elm-webgl-playground/tangram.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:43:09.921442</ts>
    <user>U23SA861Y</user>
    <text>you should fix that</text>
  </message>
  <message>
    <ts>2017-07-19T14:43:12.923180</ts>
    <user>U23SA861Y</user>
    <text>:stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-19T14:44:04.952426</ts>
    <user>U3L8MM10T</user>
    <text>Where is `Color` defined, such as used here: &lt;http://package.elm-lang.org/packages/evancz/elm-graphics/1.0.1/Text#color&gt;?</text>
  </message>
  <message>
    <ts>2017-07-19T14:44:05.953327</ts>
    <user>U2GPAEU1L</user>
    <text>“fix” hahahaha :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-19T14:44:54.981207</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U3L8MM10T&gt; probably this &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Color&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:45:58.018609</ts>
    <user>U3L8MM10T</user>
    <text>Thanks, it didn't occur to me that it was in Core.</text>
  </message>
  <message>
    <ts>2017-07-19T14:51:04.192894</ts>
    <user>U23SA861Y</user>
    <text>which brings up an interesting notion that the elm docs don't give you references to the imported library types that are exposed</text>
  </message>
  <message>
    <ts>2017-07-19T14:52:59.259227</ts>
    <user>U5LFUHH19</user>
    <text>I have an &amp;lt;input&amp;gt; that "onInput" updates my model's `query` and I have a &amp;lt;button&amp;gt; that fires a search using that query.  How can I have it so that hitting &amp;lt;Return/Enter&amp;gt; will fire the search?</text>
  </message>
  <message>
    <ts>2017-07-19T14:54:25.309180</ts>
    <user>U23SA861Y</user>
    <text>setup onKeyDown to dispatch the search if it's keycode 13?</text>
  </message>
  <message>
    <ts>2017-07-19T14:54:46.321490</ts>
    <user>U5LFUHH19</user>
    <text>OK, let me try that.</text>
  </message>
  <message>
    <ts>2017-07-19T14:55:14.337807</ts>
    <user>U3R7CKQRX</user>
    <text>Hi this maybe a weird question but I've never used Google groups before. I posted something to elm discuss but can't see my own post. Is that normal?</text>
  </message>
  <message>
    <ts>2017-07-19T14:57:29.416817</ts>
    <user>U5LFUHH19</user>
    <text>If I set up the &amp;lt;input&amp;gt; inside a &amp;lt;form&amp;gt; I could possibly use `onSubmit`?</text>
  </message>
  <message>
    <ts>2017-07-19T14:59:23.481371</ts>
    <user>U23SA861Y</user>
    <text>possibly, is that exposed</text>
  </message>
  <message>
    <ts>2017-07-19T15:00:47.532037</ts>
    <user>U5LFUHH19</user>
    <text>Yes, that works!</text>
  </message>
  <message>
    <ts>2017-07-19T15:39:32.766528</ts>
    <user>U1G51S63S</user>
    <text>I am correct that &lt;https://github.com/etaque/elm-form&gt; have no type safety at all? so I can use custom type with Dict instead and it will be the same typesafety?</text>
  </message>
  <message>
    <ts>2017-07-19T15:41:35.830404</ts>
    <user>U1G51S63S</user>
    <text>just started working on new large form and not sure if there is better way then I am doing it now. In simple forms I have just messages like `SetFirstNamee String` and in large one (there is 3 forms on single page with about 30 fields total) I am using a Dict with `UpdateField Form String FieldValue` message (params are form -&amp;gt; field name -&amp;gt; value)</text>
  </message>
  <message>
    <ts>2017-07-19T15:44:20.915133</ts>
    <user>U3SJEDR96</user>
    <text>it would be roughly the same as using a raw dict in terms of type-safety, but with things like validation builtin, and a nice api to work with it</text>
  </message>
  <message>
    <ts>2017-07-19T15:45:14.944122</ts>
    <user>U1G51S63S</user>
    <text>Just not sure if there is a better way available with typesafety and w/o 30 msgs for each field :smile: just looks ugly since each message name should be prefixed also because each form have `First name` field for example and there is 2 ways to avoid name conflicts: prefix msgs or move messages for each form into its own file</text>
  </message>
  <message>
    <ts>2017-07-19T15:45:45.961036</ts>
    <user>U1G51S63S</user>
    <text>got it. I don't need client-side validation at all - everything proceed on server-side btw</text>
  </message>
  <message>
    <ts>2017-07-19T15:54:40.246458</ts>
    <user>U23SA861Y</user>
    <text>you can also have a structure thats only 1 msg like `FormUpdate formModel`</text>
  </message>
  <message>
    <ts>2017-07-19T15:55:37.277593</ts>
    <user>U23SA861Y</user>
    <text>it's similar to the msg prefix model except you compose the full item of data in your view and just dispatch it back</text>
  </message>
  <message>
    <ts>2017-07-19T15:55:54.287082</ts>
    <user>U3SJEDR96</user>
    <text>cfr elm-sortable-table</text>
  </message>
  <message>
    <ts>2017-07-19T15:56:10.295476</ts>
    <user>U23SA861Y</user>
    <text>yeah: &lt;https://github.com/evancz/elm-sortable-table&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T15:57:15.330803</ts>
    <user>U23SA861Y</user>
    <text>Your forms surface area becomes `viewForm: (FormData -&amp;gt; msg) -&amp;gt; FormData -&amp;gt; Html msg`</text>
  </message>
  <message>
    <ts>2017-07-19T17:12:04.681071</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U23SA861Y&gt; didn't get it. how keeping `formModel` in message will help with field routing?</text>
  </message>
  <message>
    <ts>2017-07-19T17:12:35.695489</ts>
    <user>U23SA861Y</user>
    <text>it dispatches back the entire form model so you only need one top level message</text>
  </message>
  <message>
    <ts>2017-07-19T17:12:56.704695</ts>
    <user>U23SA861Y</user>
    <text>in the view you do the append or edit and then dispatch the modified model back in the msg</text>
  </message>
  <message>
    <ts>2017-07-19T17:14:25.745493</ts>
    <user>U1G51S63S</user>
    <text>ah, yes. some fields have logic like autocompletion, masked inputs, etc.</text>
  </message>
  <message>
    <ts>2017-07-19T17:15:14.768605</ts>
    <user>U1G51S63S</user>
    <text>so I think it's not the best idea then. in case of `Dict` I am just pattern matching in `update` like `UpdateField "phone" (StringValue phone) -&amp;gt; ...` and processing it</text>
  </message>
  <message>
    <ts>2017-07-19T17:23:26.994835</ts>
    <user>U1G51S63S</user>
    <text>btw messages becomes a problem only when page have more than 1 form. with single form it's fine for me - I am just defining `FormMsg` type to split it from main `Msg`</text>
  </message>
  <message>
    <ts>2017-07-19T17:33:21.262784</ts>
    <user>U5WS7CJLV</user>
    <text>&lt;@U3SJEDR96&gt; I'm looking at your sudoku solver</text>
  </message>
  <message>
    <ts>2017-07-19T17:33:33.268091</ts>
    <user>U5WS7CJLV</user>
    <text>and there's no type alias Model = [stuff]</text>
  </message>
  <message>
    <ts>2017-07-19T17:34:02.280552</ts>
    <user>U5WS7CJLV</user>
    <text>did you know in the beginning that you were going sans-model?  Or was that a discovery you made along the way?</text>
  </message>
  <message>
    <ts>2017-07-19T17:34:13.284942</ts>
    <user>U5WS7CJLV</user>
    <text>"Oh, turns out I don't need a model."</text>
  </message>
  <message>
    <ts>2017-07-19T17:34:53.302075</ts>
    <user>U5WS7CJLV</user>
    <text>I guess I've yet to see how the big kids do stuff.  All of the Elm I've read is the stuff in the docs.</text>
  </message>
  <message>
    <ts>2017-07-19T17:37:07.358745</ts>
    <user>U23SA861Y</user>
    <text>solving sudoku is something that can be done in an ordinary function, it doesn't need persistent state because it isn't interacting with the world</text>
  </message>
  <message>
    <ts>2017-07-19T17:37:44.374045</ts>
    <user>U5WS7CJLV</user>
    <text>I see.  My brain does not jump that far yet :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-19T17:38:13.385978</ts>
    <user>U5WS7CJLV</user>
    <text>perhaps some day I will think in terms of ordinary functions, but for now, I shall have to google what an ordinary function is</text>
  </message>
  <message>
    <ts>2017-07-19T17:38:46.399387</ts>
    <user>U23SA861Y</user>
    <text>it means I can write something like: `solve : SudokuBoard -&amp;gt; SudokuBoard`</text>
  </message>
  <message>
    <ts>2017-07-19T17:39:21.413278</ts>
    <user>U5WS7CJLV</user>
    <text>type of input is same as type of output?  That is ordinary?</text>
  </message>
  <message>
    <ts>2017-07-19T17:39:41.421230</ts>
    <user>U23SA861Y</user>
    <text>ordinary was the wrong word, pure is what I meant</text>
  </message>
  <message>
    <ts>2017-07-19T17:40:28.440683</ts>
    <user>U23SA861Y</user>
    <text>you don't need random numbers, you don't need a network socket, you don't need to wait for a user. All you are doing is transforming one pattern of bits in memory into another pattern</text>
  </message>
  <message>
    <ts>2017-07-19T17:41:28.465697</ts>
    <user>U23SA861Y</user>
    <text>the only reason he is even using commands at all is to interact with the random number generator</text>
  </message>
  <message>
    <ts>2017-07-19T17:41:37.469165</ts>
    <user>U23SA861Y</user>
    <text>or so it seems</text>
  </message>
  <message>
    <ts>2017-07-19T17:42:56.501847</ts>
    <user>U5WS7CJLV</user>
    <text>so when you start writing some new Elm, jonf, do you start with Model, update, init, etc?  Or is it more organic?</text>
  </message>
  <message>
    <ts>2017-07-19T17:43:07.505768</ts>
    <user>U5WS7CJLV</user>
    <text>I am currently a robot following an Elm pattern</text>
  </message>
  <message>
    <ts>2017-07-19T17:43:28.514487</ts>
    <user>U23SA861Y</user>
    <text>this stuff he's got here is a bit experimental as it's a CLI thing</text>
  </message>
  <message>
    <ts>2017-07-19T17:44:05.529520</ts>
    <user>U23SA861Y</user>
    <text>If I'm reaching for elm its likely that I want to render some user interacting content</text>
  </message>
  <message>
    <ts>2017-07-19T17:44:37.542998</ts>
    <user>U23SA861Y</user>
    <text>so I'm going to be thinking about what I want to show and how I want users to interact</text>
  </message>
  <message>
    <ts>2017-07-19T17:50:33.688460</ts>
    <user>U0LPMPL2U</user>
    <text>Also worth noting that while it's convention to have a `type alias Model` in Elm apps, the name of the type that stores state can be anything</text>
  </message>
  <message>
    <ts>2017-07-19T17:51:13.704172</ts>
    <user>U23SA861Y</user>
    <text>yes, TEA is completely agnostic to the exact types of models and messages</text>
  </message>
  <message>
    <ts>2017-07-19T17:51:38.714566</ts>
    <user>U0LPMPL2U</user>
    <text>The elm architecture _does_ require some value for it's `model` / `init`</text>
  </message>
  <message>
    <ts>2017-07-19T17:51:44.717056</ts>
    <user>U0LPMPL2U</user>
    <text>but you can give it anything you want</text>
  </message>
  <message>
    <ts>2017-07-19T17:52:06.725536</ts>
    <user>U0LPMPL2U</user>
    <text>In the sudoku solver, that's the empty tuple `()`</text>
  </message>
  <message>
    <ts>2017-07-19T17:52:17.730006</ts>
    <user>U0LPMPL2U</user>
    <text>```
Platform.program
        { init = () ! [ solve board, emitBoard board ]
        , update = update
        , subscriptions = always Sub.none
        }
```</text>
  </message>
  <message>
    <ts>2017-07-19T17:52:39.738526</ts>
    <user>U0LPMPL2U</user>
    <text>thus the update function looks like:
```
update : Msg -&amp;gt; () -&amp;gt; ( (), Cmd msg )
```</text>
  </message>
  <message>
    <ts>2017-07-19T17:54:09.773389</ts>
    <user>U0LPMPL2U</user>
    <text>`()` is used as a sort of "I don't care" value</text>
  </message>
  <message>
    <ts>2017-07-19T17:54:37.784697</ts>
    <user>U0LPMPL2U</user>
    <text>If you'd wanted to track a board state, you could have used `Board` in there</text>
  </message>
  <message>
    <ts>2017-07-19T17:54:55.791621</ts>
    <user>U0LPMPL2U</user>
    <text>or done `type alias Model = Board` and used `Model` like in the examples</text>
  </message>
  <message>
    <ts>2017-07-19T17:58:45.880947</ts>
    <user>U57KYFW67</user>
    <text>`()` is essentially the same as `{}`, the empty record type.</text>
  </message>
  <message>
    <ts>2017-07-19T17:59:00.886280</ts>
    <user>U57KYFW67</user>
    <text>Instead of a record with no fields, it's a tuple with no slots :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-19T18:02:21.964988</ts>
    <user>U5WS7CJLV</user>
    <text>empty tuple for the win!  Nothing beats purity!  Makes me think of Harry Potter and the whole pureblood concept.</text>
  </message>
  <message>
    <ts>2017-07-19T18:05:09.028651</ts>
    <user>U57KYFW67</user>
    <text>Fun Fact: `()` (the type) and `Never` are actually opposites of each other</text>
  </message>
  <message>
    <ts>2017-07-19T18:05:38.039511</ts>
    <user>U57KYFW67</user>
    <text>`()` (as a type) has exactly one element (which is confusingly also called `()`, so we have `() : ()`).</text>
  </message>
  <message>
    <ts>2017-07-19T18:05:58.046776</ts>
    <user>U57KYFW67</user>
    <text>`Never` on the other hand has no elements.</text>
  </message>
  <message>
    <ts>2017-07-19T18:13:01.193711</ts>
    <user>U5LFUHH19</user>
    <text>Does a checkbox send it's text/value?</text>
  </message>
  <message>
    <ts>2017-07-19T18:13:49.209548</ts>
    <user>U57KYFW67</user>
    <text>with `onCheck`, it only sends a boolean of whether it was checked or not.</text>
  </message>
  <message>
    <ts>2017-07-19T18:14:09.215914</ts>
    <user>U57KYFW67</user>
    <text>(ie, whether it's being checked or if something else is being checked and so it's going to be deselected)</text>
  </message>
  <message>
    <ts>2017-07-19T18:14:35.224938</ts>
    <user>U57KYFW67</user>
    <text>If you need the text or value, you can stuff it into the message</text>
  </message>
  <message>
    <ts>2017-07-19T18:15:43.248034</ts>
    <user>U57KYFW67</user>
    <text>Maybe your message will be `type Msg = SelectOption String Bool` and then in attributes, you write `onCheck (SelectOption "value of this checkbox")`</text>
  </message>
  <message>
    <ts>2017-07-19T18:30:21.534393</ts>
    <user>U5LFUHH19</user>
    <text>I guess it's not possible to write a partially applied function like this? `List.filter (/= "foo") ["foo", "bar"]`</text>
  </message>
  <message>
    <ts>2017-07-19T18:31:41.560631</ts>
    <user>U5LFUHH19</user>
    <text>BTW, &lt;@U57KYFW67&gt; that did exactly what I wanted!</text>
  </message>
  <message>
    <ts>2017-07-19T18:32:29.576205</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5LFUHH19&gt; you need some parens :slightly_smiling_face: `List.filter ((/=) "foo") ["foo", "bar"]`</text>
  </message>
  <message>
    <ts>2017-07-19T18:32:56.584890</ts>
    <user>U0LPMPL2U</user>
    <text>when operators are used prefix (instead of infix), you need to wrap them in parens</text>
  </message>
  <message>
    <ts>2017-07-19T18:36:02.641783</ts>
    <user>U5LFUHH19</user>
    <text>Flippin' sweet.  Thanks &lt;@U0LPMPL2U&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T18:37:21.666049</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U5LFUHH19&gt; Glad to help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-19T18:37:40.671538</ts>
    <user>U57KYFW67</user>
    <text>That's a point I realized last night could be very confusing to some beginners</text>
  </message>
  <message>
    <ts>2017-07-19T18:38:03.678576</ts>
    <user>U57KYFW67</user>
    <text>You see `Bool -&amp;gt; Msg` and you might end up thinking you *need* to have a message which takes a bool as its only argument.</text>
  </message>
  <message>
    <ts>2017-07-19T18:38:59.695722</ts>
    <user>U57KYFW67</user>
    <text>That's a possibility, but not a requirement! It's very common to throw a lambda in there `(\bool -&amp;gt; .... { code that constructs a Msg })`</text>
  </message>
  <message>
    <ts>2017-07-19T18:57:53.028747</ts>
    <user>U650CUWGM</user>
    <text>Hi,
I am supposed to make quite a simple web app which exposes some advanced charts (by highcharts.js &lt;http://www.highcharts.com|www.highcharts.com&gt;) and tables/spreadsheets (by ag-grid &lt;http://www.ag-grid.com|www.ag-grid.com&gt;).
Since I have no experience of embedding such a visual components in Elm apps could somebody help me out and describe 
1. the easiest way 
2. the right way 
of using that components in Elm SPA app context?

For now I have the following ideas:

1. wrap the js library in elm wrapper and write some "native" js code involving virtual dom and stuff like that like they do it here: &lt;https://github.com/nmk/elm-highcharts-demo&gt; or here &lt;https://github.com/sgillis/elm-highcharts&gt; (elm 0.16) and no examples for ag-grid.

2. creating the js components next to the embedded Elm SPA and sending and receiving messages throungh ports like they do it here: &lt;https://github.com/fbonetti/great_lakes_data/blob/master/app/assets/javascripts/readings.js&gt; (elm 0.16). In this case it seems to be an issue of having an Elm SPA with its own navigation/routing and need for placing the component in the middle of some Elm pageView.

3. Since it should be a web app with simple logic and extensive usage of native js libs, maybe write it not in Elm but in TypeScript.

Any thoughts/ideas?</text>
  </message>
  <message>
    <ts>2017-07-19T19:13:28.293673</ts>
    <user>U23SA861Y</user>
    <text>Writing native code is probably not a good idea. If its an absolute requirement that you use those js dependencies then using elm with it is going to be a slog.</text>
  </message>
  <message>
    <ts>2017-07-19T19:14:58.316945</ts>
    <user>U23SA861Y</user>
    <text>umm it seems like regular old elm would handle the grid stuff fairly well</text>
  </message>
  <message>
    <ts>2017-07-19T19:16:05.334924</ts>
    <user>U23SA861Y</user>
    <text>there are some native elm modules for charting but they can be a bit feature poor.</text>
  </message>
  <message>
    <ts>2017-07-19T19:22:22.438201</ts>
    <user>U650CUWGM</user>
    <text>I'm afraid it would be too much to implement such features as column reordering, multiple column sorting and grouping just to reproduce the existing and supported library.</text>
  </message>
  <message>
    <ts>2017-07-19T19:26:22.503988</ts>
    <user>U0CL0AS3V</user>
    <text>I'd check out `elm-plot` for the charts and use ports otherwise</text>
  </message>
  <message>
    <ts>2017-07-19T20:43:27.575324</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U5WS7CJLV&gt; The `f : a -&amp;gt; a` pattern is very common when, for example, you repeatedly apply a function to something.  Imagine that `a` represents the current state of a physical system (real, or modeled by computer).  Imagine that `f a` is the state one tick later, where a tick might be a second or a hundredth of a second or  whatever.  Thus `f` is the tool by which you evolve the system forward in time.  Great for simulations.</text>
  </message>
  <message>
    <ts>2017-07-19T23:47:16.623144</ts>
    <user>U23SA861Y</user>
    <text>hamiltonian</text>
  </message>
  <message>
    <ts>2017-07-20T01:20:27.523398</ts>
    <user>U3SJEDR96</user>
    <text>Nah, it's only for ports, iirc</text>
  </message>
  <message>
    <ts>2017-07-20T02:46:12.472834</ts>
    <user>U61FZV5EK</user>
    <text>What is the reasoning behind `case of` expressions being unable to handle constant functions? This works just fine:

```case of 
   1 -&amp;gt; ...
   2 -&amp;gt; ...
  otherwise _&amp;gt; ...
```
but this does not.

```constant1 = 1
constant2 = 2

case of
   constant1 -&amp;gt; ...
   constant2 -&amp;gt; ...
   otherwise -&amp;gt; ...
```

I get that it is hard for the compiler to reason about the possible return values of a function at compile time, but wouldn't it be better to just force the use of an otherwise case when functions are used to  pattern match?</text>
  </message>
  <message>
    <ts>2017-07-20T02:53:56.581025</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U61FZV5EK&gt; the compiler would need some way to distinguish between ‘match this pattern and assign values to these variables’ and ‘match this pattern where part of the pattern is the value of these variables’</text>
  </message>
  <message>
    <ts>2017-07-20T02:56:03.611914</ts>
    <user>U3SJEDR96</user>
    <text>a pattern in a `case of` asks the question "can this value be described with this pattern". In the case of a variable, that is always "yes". Making a difference there between a "constant" function and an unknown variable would either mean special syntax for "assign to this variable", or "if you rename some function, your case suddenly behaves differently"</text>
  </message>
  <message>
    <ts>2017-07-20T03:04:45.746513</ts>
    <user>U4872964V</user>
    <text>Also, the compiler wants to statically analyze the case options to see if any is missing etc. That's hard to do if variable case constants are allowed.</text>
  </message>
  <message>
    <ts>2017-07-20T03:07:12.785024</ts>
    <user>U61FZV5EK</user>
    <text>But I don't get why it is a concern for the compiler. When it sees the numbers it says "cool, an int can match to these". When it sees the function it could just go "cool, this returns some int too". In both cases it can't know if the cases are exhaustive, so an otherwise is needed.</text>
  </message>
  <message>
    <ts>2017-07-20T03:07:14.785639</ts>
    <user>U3SJEDR96</user>
    <text>also true; you'd have an arbitrary cut-off of what the compiler can and cannot check</text>
  </message>
  <message>
    <ts>2017-07-20T03:07:37.791928</ts>
    <user>U3SJEDR96</user>
    <text>what if you make a function `otherwise : Int`?</text>
  </message>
  <message>
    <ts>2017-07-20T03:09:15.818098</ts>
    <user>U61FZV5EK</user>
    <text>Hm, what then?</text>
  </message>
  <message>
    <ts>2017-07-20T03:10:47.843112</ts>
    <user>U3SJEDR96</user>
    <text>that would have to (magically) behave differently</text>
  </message>
  <message>
    <ts>2017-07-20T03:11:38.856742</ts>
    <user>U3SJEDR96</user>
    <text>or what if `constant1 == constant2`? It can't warn you about it, as it would now. What if you remove `constant1` as a function? Now it's just a free variable, and you'd always end up in that branch</text>
  </message>
  <message>
    <ts>2017-07-20T03:12:24.869404</ts>
    <user>U61FZV5EK</user>
    <text>Nothing would break, but I see your point. It is a tradeoff</text>
  </message>
  <message>
    <ts>2017-07-20T03:12:28.870185</ts>
    <user>U3SJEDR96</user>
    <text>the behaviour is fairly non-obvious, for all but the most straightforward cases</text>
  </message>
  <message>
    <ts>2017-07-20T03:13:57.893272</ts>
    <user>U61FZV5EK</user>
    <text>Some syntax to declare functions to be constants would be nice then :grin:</text>
  </message>
  <message>
    <ts>2017-07-20T03:14:02.894801</ts>
    <user>U3SJEDR96</user>
    <text>besides, we do have `if..then..else` for a reason</text>
  </message>
  <message>
    <ts>2017-07-20T03:14:13.897650</ts>
    <user>U4872964V</user>
    <text>Well you could have special syntax, like @constant but I'd rather have pattern guards then</text>
  </message>
  <message>
    <ts>2017-07-20T03:14:52.908086</ts>
    <user>U61FZV5EK</user>
    <text>&lt;@U3SJEDR96&gt; Yeah sure, butI feel like if you have 10 cases the `case of` syntax is cleaner</text>
  </message>
  <message>
    <ts>2017-07-20T03:17:29.951228</ts>
    <user>U4872964V</user>
    <text>I've never had that many cases though. I think it says something about how you model complex data types.</text>
  </message>
  <message>
    <ts>2017-07-20T03:18:49.973192</ts>
    <user>U3SJEDR96</user>
    <text>if I have 10 constants that express something, I tend to make them a union-type, rather than variables ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-20T03:19:07.978114</ts>
    <user>U4872964V</user>
    <text>Yes exactly</text>
  </message>
  <message>
    <ts>2017-07-20T03:19:42.987933</ts>
    <user>U61FZV5EK</user>
    <text>I should probably do that, but I'm just using them once</text>
  </message>
  <message>
    <ts>2017-07-20T03:21:15.015236</ts>
    <user>U3SJEDR96</user>
    <text>then why are they in variables?</text>
  </message>
  <message>
    <ts>2017-07-20T03:24:02.062045</ts>
    <user>U4872964V</user>
    <text>Using them twice, once when created and once when matched?</text>
  </message>
  <message>
    <ts>2017-07-20T03:24:02.062049</ts>
    <user>U61FZV5EK</user>
    <text>It's pretty complex business logic. Lots of different cases that needs to be handled differently. In the other parts of the system the numbers are used to identify the different cases. So I get it as numbers, and pass it along as numbers.</text>
  </message>
  <message>
    <ts>2017-07-20T03:24:49.075104</ts>
    <user>U4872964V</user>
    <text>Even more reason to convert to a union type in the decoder</text>
  </message>
  <message>
    <ts>2017-07-20T03:24:52.076052</ts>
    <user>U61FZV5EK</user>
    <text>But I agree its probably better to just represent them as union types anyway.</text>
  </message>
  <message>
    <ts>2017-07-20T03:24:53.076450</ts>
    <user>U61FZV5EK</user>
    <text>ye</text>
  </message>
  <message>
    <ts>2017-07-20T03:25:16.082932</ts>
    <user>U61FZV5EK</user>
    <text>well. Ty for input</text>
  </message>
  <message>
    <ts>2017-07-20T03:25:20.084443</ts>
    <user>U4872964V</user>
    <text>Clear up the logic using better types</text>
  </message>
  <message>
    <ts>2017-07-20T03:25:58.095154</ts>
    <user>U3SJEDR96</user>
    <text>I think this was a pretty interesting discussion, tbh, didn't figure we'd go from "what's the rationale" to "union types ftw" :smile:</text>
  </message>
  <message>
    <ts>2017-07-20T03:26:31.104256</ts>
    <user>U4872964V</user>
    <text>You never know with these things :)</text>
  </message>
  <message>
    <ts>2017-07-20T03:28:10.132203</ts>
    <user>U3SJEDR96</user>
    <text>True, it's nice to be surprised, tho :elm:</text>
  </message>
  <message>
    <ts>2017-07-20T04:17:52.091482</ts>
    <user>U650CUWGM</user>
    <text>&lt;@U0CL0AS3V&gt; ok, in case of using ports how is it possible to embed native js UI component in the middle of my pageview?</text>
  </message>
  <message>
    <ts>2017-07-20T04:29:37.342139</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U650CUWGM&gt; The JS called via the port can find a DOM node that was created by Elm and attach arbitrary child nodes and event handlers to it.</text>
  </message>
  <message>
    <ts>2017-07-20T04:30:19.358429</ts>
    <user>U153UK3FA</user>
    <text>It’s not pretty but you trade that against the cost of reimplementing it in Elm</text>
  </message>
  <message>
    <ts>2017-07-20T04:32:35.409115</ts>
    <user>U4872964V</user>
    <text>The following method works pretty well to embed js ui components in Elm, without ports. &lt;https://ellie-app.com/qyNKkTsrNRa1/2&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T04:33:46.434158</ts>
    <user>U4872964V</user>
    <text>basically you set up a `MutationObserver` to catch the DOM node being created and then send back info to Elm through custom events</text>
  </message>
  <message>
    <ts>2017-07-20T04:35:25.469772</ts>
    <user>U153UK3FA</user>
    <text>&lt;https://github.com/terezka/elm-jquery-datepicker&gt; gives an example of using ports to attach a jquery datepicker</text>
  </message>
  <message>
    <ts>2017-07-20T04:38:48.541991</ts>
    <user>U4872964V</user>
    <text>yes, that’s another option, problem is if your node is rerendered etc</text>
  </message>
  <message>
    <ts>2017-07-20T04:39:50.563946</ts>
    <user>U4872964V</user>
    <text>with the MutationObserver, it works almost like any other Html element</text>
  </message>
  <message>
    <ts>2017-07-20T06:04:39.440992</ts>
    <user>U37HUSJ4R</user>
    <text>I am using the `RemoteData` package:

```
type alias Model =
    { data : WebData Data}

type alias Data = { foo: List Baz }

```

I am trying to update a field in the `foo` property</text>
  </message>
  <message>
    <ts>2017-07-20T06:04:53.446122</ts>
    <user>U37HUSJ4R</user>
    <text>so I am passing the index in the list when I want to update</text>
  </message>
  <message>
    <ts>2017-07-20T06:05:20.455640</ts>
    <user>U37HUSJ4R</user>
    <text>do I need to use `RemoteData.map` and then also `List.indexedMap`to update a record?</text>
  </message>
  <message>
    <ts>2017-07-20T06:05:27.458388</ts>
    <user>U37HUSJ4R</user>
    <text>or is there a 'better' way?</text>
  </message>
  <message>
    <ts>2017-07-20T06:07:16.494994</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U37HUSJ4R&gt; yep, that’s how you’ll need to do it.</text>
  </message>
  <message>
    <ts>2017-07-20T06:17:49.701920</ts>
    <user>U37HUSJ4R</user>
    <text>`RemoteData.map (List.indexedMap f) model.data`?</text>
  </message>
  <message>
    <ts>2017-07-20T06:20:19.749673</ts>
    <user>U37HUSJ4R</user>
    <text>I see the package has `update`</text>
  </message>
  <message>
    <ts>2017-07-20T06:20:19.749841</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;http://package.elm-lang.org/packages/krisajenkins/remotedata/4.3.0/RemoteData#update&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T06:20:46.757989</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U0FBZ4J5V&gt; do you have an example of how to use this? I assume this is meant for updating a record?</text>
  </message>
  <message>
    <ts>2017-07-20T06:21:05.763919</ts>
    <user>U153UK3FA</user>
    <text>Sure</text>
  </message>
  <message>
    <ts>2017-07-20T06:32:52.983027</ts>
    <user>U4872964V</user>
    <text>&lt;@U37HUSJ4R&gt; it’s just a convenience method to only run the update function if the data is fetched</text>
  </message>
  <message>
    <ts>2017-07-20T06:33:35.996255</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U4872964V&gt; ah right ok, so I need to map map then?</text>
  </message>
  <message>
    <ts>2017-07-20T06:34:12.006923</ts>
    <user>U4872964V</user>
    <text>map?</text>
  </message>
  <message>
    <ts>2017-07-20T06:34:35.013901</ts>
    <user>U4872964V</user>
    <text>update is sort of a map</text>
  </message>
  <message>
    <ts>2017-07-20T06:34:36.014007</ts>
    <user>U37HUSJ4R</user>
    <text>`RemoteData.map (List.indexedMap f) model.data`</text>
  </message>
  <message>
    <ts>2017-07-20T06:35:12.024523</ts>
    <user>U4872964V</user>
    <text>yes, sorry, didn’t see that earlier question</text>
  </message>
  <message>
    <ts>2017-07-20T06:35:33.030897</ts>
    <user>U37HUSJ4R</user>
    <text>ok thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T07:04:50.557406</ts>
    <user>U61FZV5EK</user>
    <text>Is it bad practice to save functions to the model?</text>
  </message>
  <message>
    <ts>2017-07-20T07:11:11.668337</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U61FZV5EK&gt; yes, and usually there are ways around it. what are you trying to do?</text>
  </message>
  <message>
    <ts>2017-07-20T07:11:32.674396</ts>
    <user>U650CUWGM</user>
    <text>what kind of problem do you mean?</text>
  </message>
  <message>
    <ts>2017-07-20T07:11:54.680535</ts>
    <user>U6B9DCP28</user>
    <text>Hi folks! There 2 almost identical packages in repo. Which should I use?
canadaduane/typed-svg/2.1.1
elm-community/typed-svg/1.0.1</text>
  </message>
  <message>
    <ts>2017-07-20T07:12:20.687933</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U6B9DCP28&gt; the elm-community one</text>
  </message>
  <message>
    <ts>2017-07-20T07:12:25.689586</ts>
    <user>U3SJEDR96</user>
    <text>I think elm-community adopted canadaduane's project when he decided to no longer actively maintain it</text>
  </message>
  <message>
    <ts>2017-07-20T07:15:11.737089</ts>
    <user>U61FZV5EK</user>
    <text>&lt;@U1CE9DL9H&gt; I just thought it would be nice to partially apply a function and use that curried function instead of applying the same value to a function over and over. I can do pretty much the same thing, without saving the function to the model. Just more parameters to pass around</text>
  </message>
  <message>
    <ts>2017-07-20T07:16:19.756681</ts>
    <user>U0CLDU8UB</user>
    <text>Functions in models are generally avoided, but there are certain cases where it makes code much more maintainable: sounds like your case may be exactly the kind.</text>
  </message>
  <message>
    <ts>2017-07-20T07:16:47.764573</ts>
    <user>U1CE9DL9H</user>
    <text>well you could also store the arguments in a record, so then there is really only one extra thing to pass around</text>
  </message>
  <message>
    <ts>2017-07-20T07:16:59.768038</ts>
    <user>U0CLDU8UB</user>
    <text>Can you be more specific: what is the function and why do you need to partially apply the same thing again and again?</text>
  </message>
  <message>
    <ts>2017-07-20T07:19:58.819527</ts>
    <user>U61FZV5EK</user>
    <text>A translation function that takes a language type and a key and returns a String. In this case it's just the language parameter I wanted to curry, so it doesn't make a big difference.</text>
  </message>
  <message>
    <ts>2017-07-20T07:20:21.826541</ts>
    <user>U0CLDU8UB</user>
    <text>As it happens, I am currently working on making an existing codebase use translations from flags instead of hardcoded strings. See how I am solving it here: &lt;https://github.com/Tradenomiliitto/tradenomiitti/compare/content-in-json&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T07:21:33.848152</ts>
    <user>U0CLDU8UB</user>
    <text>I am passing the `(String -&amp;gt; String)` (aliased to `T` for convenience) translation function through to almost all views.</text>
  </message>
  <message>
    <ts>2017-07-20T07:22:10.859084</ts>
    <user>U0CLDU8UB</user>
    <text>This way I don't need to store the function in the main model or any of the more specific models.</text>
  </message>
  <message>
    <ts>2017-07-20T07:23:50.888319</ts>
    <user>U1CE9DL9H</user>
    <text>also watch this talk if you haven't &lt;https://www.youtube.com/watch?v=RcHV6R-Jq00&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T07:24:07.893575</ts>
    <user>U1CE9DL9H</user>
    <text>it's an alternate approach to localization - as a build phase</text>
  </message>
  <message>
    <ts>2017-07-20T07:24:13.895283</ts>
    <user>U0CLDU8UB</user>
    <text>This is the `Translation.elm` file, in case you're interested: &lt;https://github.com/Tradenomiliitto/tradenomiitti/compare/content-in-json#diff-1f97dd159689b2c5f3696d4a9008e2c1&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T07:24:39.903093</ts>
    <user>U61FZV5EK</user>
    <text>&lt;@U0CLDU8UB&gt; That was pretty much how I thought to do it instead.</text>
  </message>
  <message>
    <ts>2017-07-20T07:24:59.908820</ts>
    <user>U61FZV5EK</user>
    <text>Thank you for feedback :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T07:25:54.924767</ts>
    <user>U0CLDU8UB</user>
    <text>Cool! :+1:</text>
  </message>
  <message>
    <ts>2017-07-20T07:26:44.939845</ts>
    <user>U0CLDU8UB</user>
    <text>I've been pretty happy with our solution so far, and it'd be totally doable to convert it into Elm in the build phase, should we decide to do so.</text>
  </message>
  <message>
    <ts>2017-07-20T07:27:23.951055</ts>
    <user>U61FZV5EK</user>
    <text>&lt;@U1CE9DL9H&gt; I will check it out later :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T07:28:01.962317</ts>
    <user>U0CLDU8UB</user>
    <text>I should probably watch the talk too, just to know if there are some benefits I'm not seeing right now.</text>
  </message>
  <message>
    <ts>2017-07-20T07:32:35.041861</ts>
    <user>U30UHDER3</user>
    <text>If you have questions regarding &lt;https://github.com/iosphere/elm-i18n&gt; feel free to contact me</text>
  </message>
  <message>
    <ts>2017-07-20T07:35:00.084290</ts>
    <user>U6B9DCP28</user>
    <text>Thanks! But what the difference? It has almost same last commit dates. So they both supported. Why?</text>
  </message>
  <message>
    <ts>2017-07-20T07:36:54.117325</ts>
    <user>U0CLDU8UB</user>
    <text>The person probably told the elm-community maintainers that they will not continue developing it further, which means the elm-community one is the safer bet come 0.19</text>
  </message>
  <message>
    <ts>2017-07-20T07:54:28.426890</ts>
    <user>U6B9DCP28</user>
    <text>&lt;@U0CLDU8UB&gt;, Ok, Thanks. :+1:
For future: it would be better if there are some mechanism to mark such kind of things to avoid questions like this. Like ‘Transfer repository in BitBucket’. Or just mark it in documentation.</text>
  </message>
  <message>
    <ts>2017-07-20T08:28:28.113055</ts>
    <user>U5WS7CJLV</user>
    <text>there a simple way to generate a sequence of ints in Elm?</text>
  </message>
  <message>
    <ts>2017-07-20T08:28:52.122143</ts>
    <user>U5WS7CJLV</user>
    <text>one that can be infinitely long?  Yield the ints on demand in a deferred execution kind of way?</text>
  </message>
  <message>
    <ts>2017-07-20T08:29:08.127691</ts>
    <user>U5WS7CJLV</user>
    <text>in C# you can manage it with IEnumerable magic</text>
  </message>
  <message>
    <ts>2017-07-20T08:29:38.138921</ts>
    <user>U3SJEDR96</user>
    <text>You'd want either a lazy-list or a stream. I have to ask, though - what's your use-case?</text>
  </message>
  <message>
    <ts>2017-07-20T08:29:44.141375</ts>
    <user>U5WS7CJLV</user>
    <text>generating ids</text>
  </message>
  <message>
    <ts>2017-07-20T08:30:02.147995</ts>
    <user>U5WS7CJLV</user>
    <text>this is all for fun, so I imagine I could get the time in milliseconds and that would do</text>
  </message>
  <message>
    <ts>2017-07-20T08:30:22.156200</ts>
    <user>U5WS7CJLV</user>
    <text>just wondering if Elm can do stuff like IEnumerable magic</text>
  </message>
  <message>
    <ts>2017-07-20T08:31:42.187138</ts>
    <user>U5WS7CJLV</user>
    <text>sounds like it can, but I'm guessing lazy list and stream are not in the core modules.</text>
  </message>
  <message>
    <ts>2017-07-20T08:31:49.189989</ts>
    <user>U3SJEDR96</user>
    <text>I'm still not sure I'm following (and I haven't done any C# in ~8 years, so no idea what IEnumerable does/can do). It's easy to make a function that can generate a "next" id given a "current" id. If ou want to do it _without_ passing it a previous id, you're basically asking for implicit state... :wink:</text>
  </message>
  <message>
    <ts>2017-07-20T08:32:13.198928</ts>
    <user>U5WS7CJLV</user>
    <text>so in C#</text>
  </message>
  <message>
    <ts>2017-07-20T08:32:16.200208</ts>
    <user>U5WS7CJLV</user>
    <text>you have a loop</text>
  </message>
  <message>
    <ts>2017-07-20T08:32:23.202962</ts>
    <user>U5WS7CJLV</user>
    <text>while(true)</text>
  </message>
  <message>
    <ts>2017-07-20T08:32:39.208777</ts>
    <user>U5WS7CJLV</user>
    <text>yield return ++someInt</text>
  </message>
  <message>
    <ts>2017-07-20T08:32:48.212277</ts>
    <user>U5WS7CJLV</user>
    <text>the "yield" keyword gives you magic</text>
  </message>
  <message>
    <ts>2017-07-20T08:32:51.213423</ts>
    <user>U3SJEDR96</user>
    <text>Ok, so implicit state :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T08:32:58.216000</ts>
    <user>U5WS7CJLV</user>
    <text>sure</text>
  </message>
  <message>
    <ts>2017-07-20T08:33:03.217913</ts>
    <user>U3JQ0PT6E</user>
    <text>Use triple backticks for code snippet. Single backtick for inline code</text>
  </message>
  <message>
    <ts>2017-07-20T08:33:26.226911</ts>
    <user>U3JQ0PT6E</user>
    <text>Like `this` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T08:34:13.244530</ts>
    <user>U3SJEDR96</user>
    <text>yeah, can't do that in Elm. Hence why for example generating random numbers requires passing a `Seed` in and receiving a value + a new seed back. (unless you're using `generate` which gives you a `Cmd` so that it can sneakily keep track of the seed-management in an effect manager)</text>
  </message>
  <message>
    <ts>2017-07-20T08:34:14.245116</ts>
    <user>U5WS7CJLV</user>
    <text>`got it` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T08:34:30.251214</ts>
    <user>U5WS7CJLV</user>
    <text>```while(true) { yield return ++someInt; }```</text>
  </message>
  <message>
    <ts>2017-07-20T08:36:40.301611</ts>
    <user>U3SJEDR96</user>
    <text>the way people _usually_ deal with this in Elm is by keeping track of the previous `id` in the model, and updating that when an `id` is needed</text>
  </message>
  <message>
    <ts>2017-07-20T08:38:03.334259</ts>
    <user>U5WS7CJLV</user>
    <text>right.  Sequence of ints is not hard to do, but if you know about something like the magic `yield` you can do it more magically.  I will just track the id somehow.  Thanks!</text>
  </message>
  <message>
    <ts>2017-07-20T08:38:25.342695</ts>
    <user>U5WS7CJLV</user>
    <text>:magic_wand:</text>
  </message>
  <message>
    <ts>2017-07-20T08:39:09.359893</ts>
    <user>U3SJEDR96</user>
    <text>Indeed, the keyword being *magic*, which is something Elm steers clear of :smile:</text>
  </message>
  <message>
    <ts>2017-07-20T08:40:04.381793</ts>
    <user>U5WS7CJLV</user>
    <text>well, haters gonna hate (magic) :smile: :magic_wand:</text>
  </message>
  <message>
    <ts>2017-07-20T08:41:07.407004</ts>
    <user>U5WS7CJLV</user>
    <text>the ! operator kind of looks like a magic wand :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T08:41:24.413591</ts>
    <user>U5WS7CJLV</user>
    <text>and it works a bit like one too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T08:41:31.416059</ts>
    <user>U5WS7CJLV</user>
    <text>until you read about it on the FAQ</text>
  </message>
  <message>
    <ts>2017-07-20T08:41:40.419634</ts>
    <user>U5WS7CJLV</user>
    <text>and then, depending on who you are, you might hate it :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T08:42:21.435598</ts>
    <user>U3SJEDR96</user>
    <text>eh, it's really just a function call `(!) model effects = (model, Cmd.batch effects)`... But yeah, it's confusing/weird/being removed :smile:</text>
  </message>
  <message>
    <ts>2017-07-20T08:43:03.452601</ts>
    <user>U5WS7CJLV</user>
    <text>a function call - yuck!  I generally hate variables, functions etc that are named in one letter/character</text>
  </message>
  <message>
    <ts>2017-07-20T08:43:09.454904</ts>
    <user>U5WS7CJLV</user>
    <text>I guess it worked well for Prince</text>
  </message>
  <message>
    <ts>2017-07-20T08:43:14.457140</ts>
    <user>U5WS7CJLV</user>
    <text>I don't like it at all in code</text>
  </message>
  <message>
    <ts>2017-07-20T08:43:30.463223</ts>
    <user>U5WS7CJLV</user>
    <text>but back to Elming!</text>
  </message>
  <message>
    <ts>2017-07-20T08:47:01.548531</ts>
    <user>U3SJEDR96</user>
    <text>(I still read it as "*BANG* effects")</text>
  </message>
  <message>
    <ts>2017-07-20T08:52:21.683834</ts>
    <user>U37HUSJ4R</user>
    <text>can anyone help with this? &lt;https://ellie-app.com/3NtgvsLjhdza1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T08:52:24.685075</ts>
    <user>U17R26VR8</user>
    <text>can’t seem to find evan’s ‘life of a file’ elm europe 2017 talk, anyone got a link</text>
  </message>
  <message>
    <ts>2017-07-20T08:52:49.695775</ts>
    <user>U37HUSJ4R</user>
    <text>I am trying to decode a json string with dynamic keys into a union type</text>
  </message>
  <message>
    <ts>2017-07-20T08:57:51.825989</ts>
    <user>U3SJEDR96</user>
    <text>Which part are you getting stuck on, &lt;@U37HUSJ4R&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-20T08:58:16.836936</ts>
    <user>U37HUSJ4R</user>
    <text>the `uncurry` into a union type part</text>
  </message>
  <message>
    <ts>2017-07-20T08:58:31.843495</ts>
    <user>U37HUSJ4R</user>
    <text>everything else works correctly</text>
  </message>
  <message>
    <ts>2017-07-20T08:59:25.867407</ts>
    <user>U3SJEDR96</user>
    <text>that part doesn't really make sense, indeed. But uhm, what should happen with the mentioned date?</text>
  </message>
  <message>
    <ts>2017-07-20T08:59:40.874378</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U37HUSJ4R&gt; `Status` is a type, you want a function there</text>
  </message>
  <message>
    <ts>2017-07-20T09:00:09.888850</ts>
    <user>U3SJEDR96</user>
    <text>I mean, you already have a decoder for `Status`</text>
  </message>
  <message>
    <ts>2017-07-20T09:00:20.894443</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U37HUSJ4R&gt; you probably want to use `Open` there</text>
  </message>
  <message>
    <ts>2017-07-20T09:00:35.902480</ts>
    <user>U37HUSJ4R</user>
    <text>I then pass it the `standardWorkingHoursDecoder` which should either be `Closed` or if `Open`</text>
  </message>
  <message>
    <ts>2017-07-20T09:01:09.918645</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U153UK3FA&gt; hmm not sure</text>
  </message>
  <message>
    <ts>2017-07-20T09:01:15.921463</ts>
    <user>U37HUSJ4R</user>
    <text>because it might not be `Open`</text>
  </message>
  <message>
    <ts>2017-07-20T09:01:24.925949</ts>
    <user>U37HUSJ4R</user>
    <text>I want the `standardWorkingHoursDecoder` to work that out</text>
  </message>
  <message>
    <ts>2017-07-20T09:02:45.962979</ts>
    <user>U3SJEDR96</user>
    <text>I just changed the types of your model and the decoder so that it returns a `List (String, Status)`, and removed that `Decode.map (List.map...)` - &lt;https://ellie-app.com/3NtqVGd2Tkpa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T09:02:48.964447</ts>
    <user>U3SJEDR96</user>
    <text>(and fixed your json)</text>
  </message>
  <message>
    <ts>2017-07-20T09:03:00.970544</ts>
    <user>U3SJEDR96</user>
    <text>But it's hard to tell what you actually _want_ to happen</text>
  </message>
  <message>
    <ts>2017-07-20T09:03:35.986704</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U3SJEDR96&gt; yes actually look at it, maybe I have modeled it incorrectly</text>
  </message>
  <message>
    <ts>2017-07-20T09:03:47.992059</ts>
    <user>U3SJEDR96</user>
    <text>cause the `standardWorkingHoursDecoder` already returns a `Status` - `Open` if it can, `Closed` if it doesn't have the times</text>
  </message>
  <message>
    <ts>2017-07-20T09:03:58.997233</ts>
    <user>U37HUSJ4R</user>
    <text>ok let me go back and take a look</text>
  </message>
  <message>
    <ts>2017-07-20T09:03:59.997894</ts>
    <user>U37HUSJ4R</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T09:04:00.998553</ts>
    <user>U37HUSJ4R</user>
    <text>thanks sir</text>
  </message>
  <message>
    <ts>2017-07-20T09:06:22.065814</ts>
    <user>U4872964V</user>
    <text>So, if you change your view so that the node is rerendered, then, if you use ports, you need to send a new message to initialize the js component, but if you use a MutationObserver, that will trigger automatically</text>
  </message>
  <message>
    <ts>2017-07-20T09:23:02.551199</ts>
    <user>U37HUSJ4R</user>
    <text>I am trying to update  a `WebData` record (&lt;http://package.elm-lang.org/packages/krisajenkins/remotedata/4.3.0/RemoteData#WebData&gt;)</text>
  </message>
  <message>
    <ts>2017-07-20T09:23:21.560519</ts>
    <user>U37HUSJ4R</user>
    <text>can someone explain why `RemoteData.map (List.map (\l -&amp;gt; l)) model.data` wouldn't work</text>
  </message>
  <message>
    <ts>2017-07-20T09:23:36.568582</ts>
    <user>U37HUSJ4R</user>
    <text>where `data` is a `WebData Foo`</text>
  </message>
  <message>
    <ts>2017-07-20T09:23:59.580084</ts>
    <user>U37HUSJ4R</user>
    <text>I want to update a record but first just trying to get something to compile</text>
  </message>
  <message>
    <ts>2017-07-20T09:24:13.587321</ts>
    <user>U4872964V</user>
    <text>because Foo is not a list?</text>
  </message>
  <message>
    <ts>2017-07-20T09:24:22.592232</ts>
    <user>U4872964V</user>
    <text>what’s the error message</text>
  </message>
  <message>
    <ts>2017-07-20T09:24:42.602287</ts>
    <user>U37HUSJ4R</user>
    <text>```
Function `map` is expecting the 2nd argument to be:

    RemoteData Http.Error (List a)

But it is:

    WebData Foo
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:24:55.609120</ts>
    <user>U4872964V</user>
    <text>Yes, so Foo is not a List</text>
  </message>
  <message>
    <ts>2017-07-20T09:25:23.624055</ts>
    <user>U37HUSJ4R</user>
    <text>ok so `Foo` looks like</text>
  </message>
  <message>
    <ts>2017-07-20T09:25:56.640787</ts>
    <user>U37HUSJ4R</user>
    <text>```
type alias Foo =
    { bar : List String
    }
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:25:59.642292</ts>
    <user>U4872964V</user>
    <text>Yes, and that is not a `List`, but you’re trying to use `List.map` on it.</text>
  </message>
  <message>
    <ts>2017-07-20T09:26:17.651427</ts>
    <user>U37HUSJ4R</user>
    <text>but if I try and do `model.foo.bar` I get</text>
  </message>
  <message>
    <ts>2017-07-20T09:26:29.657715</ts>
    <user>U37HUSJ4R</user>
    <text>```
The type of `model.data` is:

    WebData Foo

Which does not contain a field named `bar`.
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:26:33.659683</ts>
    <user>U3SJEDR96</user>
    <text>`RemoteData.map (\foo -&amp;gt; { foo | bar = List.map (\l -&amp;gt; l) foo.bar })`</text>
  </message>
  <message>
    <ts>2017-07-20T09:27:41.694984</ts>
    <user>U3SJEDR96</user>
    <text>or split that lambda of into a proper `Foo.mapBar : (List String -&amp;gt; List String) -&amp;gt; Foo -&amp;gt; Foo`  function</text>
  </message>
  <message>
    <ts>2017-07-20T09:28:09.709412</ts>
    <user>U4872964V</user>
    <text>To sort these things out, try to make a function to update a Bar, then make a function using that to update a Foo, then make a function using that to update the whole shebang</text>
  </message>
  <message>
    <ts>2017-07-20T09:37:21.010081</ts>
    <user>U6B9DCP28</user>
    <text>This code
`
type Msg
    = CreatePerson Person
    | PersonCreated (Id, Person)
cmd : Cmd Msg
cmd = Cmd (CreatePerson (Person “Vasya” “Pupkin”))
`
gives strange error message:
```
-- NAMING ERROR ----------
Cannot find variable `Cmd`

28|         cmd = Cmd (CreatePerson (Person "Vasya" "Pupkin"))
                  ^^^
Maybe you want one of the following?

    cmd
    Html.dd
    Html.em
    Html.img
```

But it works ok when I wride `cmd = Cmd.none`
Any ideas?</text>
  </message>
  <message>
    <ts>2017-07-20T09:38:44.055349</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U6B9DCP28&gt; There is no exposed constructor for `Cmd` you can't create them like that.</text>
  </message>
  <message>
    <ts>2017-07-20T09:40:48.123437</ts>
    <user>U48AEBJQ3</user>
    <text>If all you want is to have the runtime invoke `update` with a particular message, the simplest way is to just call `update` where you want it, but you are usually better off splitting off the shared functionality to its own function and then calling that from multiple places.</text>
  </message>
  <message>
    <ts>2017-07-20T09:43:08.200752</ts>
    <user>U4872964V</user>
    <text>&lt;@U6B9DCP28&gt; here is more info about `Cmd` &lt;https://guide.elm-lang.org/architecture/effects/&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T09:43:47.222882</ts>
    <user>U4872964V</user>
    <text>Cmds are not for sending messages, cmds are for doing effects that return messages</text>
  </message>
  <message>
    <ts>2017-07-20T09:44:11.236483</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U4872964V&gt; I took your advice</text>
  </message>
  <message>
    <ts>2017-07-20T09:44:18.240935</ts>
    <user>U37HUSJ4R</user>
    <text>so I have:</text>
  </message>
  <message>
    <ts>2017-07-20T09:44:21.242459</ts>
    <user>U37HUSJ4R</user>
    <text>```

updateCustomDates : Int -&amp;gt; List Status -&amp;gt; List Status
updateCustomDates index list =
    List.indexedMap
        (\i x -&amp;gt;
            if i == index then
                x
            else
                x
        )
        list
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:44:40.253628</ts>
    <user>U6B9DCP28</user>
    <text>O, I see! Thanks folks!</text>
  </message>
  <message>
    <ts>2017-07-20T09:44:47.257415</ts>
    <user>U37HUSJ4R</user>
    <text>but still unsure how I can use this with `RemoteData.map`</text>
  </message>
  <message>
    <ts>2017-07-20T09:45:11.271156</ts>
    <user>U37HUSJ4R</user>
    <text>`RemoteData.map (updateCustomDates index) model.data` obv doesn't work</text>
  </message>
  <message>
    <ts>2017-07-20T09:45:58.297642</ts>
    <user>U4872964V</user>
    <text>no, you also need the layer that updates the foo too, by doing something like `{ foo | bar = updateCustomDates index foo.bar }`</text>
  </message>
  <message>
    <ts>2017-07-20T09:46:12.305554</ts>
    <user>U4872964V</user>
    <text>so you go layer by layer</text>
  </message>
  <message>
    <ts>2017-07-20T09:49:03.401881</ts>
    <user>U4872964V</user>
    <text>once you see how you define a function for the inner part, you see how you can `map` it to work on the next level, and so on until you have the whole thing</text>
  </message>
  <message>
    <ts>2017-07-20T09:49:57.432179</ts>
    <user>U37HUSJ4R</user>
    <text>is this because I'm trying to update nested records?</text>
  </message>
  <message>
    <ts>2017-07-20T09:50:16.442965</ts>
    <user>U4872964V</user>
    <text>it’s because you are updating a field in a record, yes</text>
  </message>
  <message>
    <ts>2017-07-20T09:50:31.451848</ts>
    <user>U4872964V</user>
    <text>so you have three layers, the `WebData` layer, the record layer, and the `List` layer</text>
  </message>
  <message>
    <ts>2017-07-20T09:51:00.468770</ts>
    <user>U37HUSJ4R</user>
    <text>is there a way to simplfy it? seems so complex</text>
  </message>
  <message>
    <ts>2017-07-20T09:51:35.489615</ts>
    <user>U4872964V</user>
    <text>well, your Foo only has one field so why do you have a record? If you have multiple fields in it then that’s the complexity your data has</text>
  </message>
  <message>
    <ts>2017-07-20T09:51:55.501810</ts>
    <user>U37HUSJ4R</user>
    <text>yeh Foo was just an example</text>
  </message>
  <message>
    <ts>2017-07-20T09:51:59.503982</ts>
    <user>U37HUSJ4R</user>
    <text>I have mutliple fields</text>
  </message>
  <message>
    <ts>2017-07-20T09:52:46.531205</ts>
    <user>U4872964V</user>
    <text>but the way to make it less complex is to do what I suggested, make a function for each layer, so the functions themselves are simple, then just combine them</text>
  </message>
  <message>
    <ts>2017-07-20T09:53:20.551543</ts>
    <user>U4872964V</user>
    <text>basically the essence of functional programming :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T09:53:20.551858</ts>
    <user>U37HUSJ4R</user>
    <text>do you have a code example of this? be great to see some code even if it was a simple example</text>
  </message>
  <message>
    <ts>2017-07-20T09:53:41.563934</ts>
    <user>U4872964V</user>
    <text>yes, so you have updateCustomDates already</text>
  </message>
  <message>
    <ts>2017-07-20T09:54:13.582790</ts>
    <user>U4872964V</user>
    <text>then
```
updateFoo : Int -&amp;gt; Foo -&amp;gt; Foo
updateFoo index foo = { foo | bar = updateCustomDates index foo.bar }
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:54:34.595292</ts>
    <user>U37HUSJ4R</user>
    <text>ok then `updateFoo` can be used inside my `update`</text>
  </message>
  <message>
    <ts>2017-07-20T09:54:35.596099</ts>
    <user>U4872964V</user>
    <text>then
```
RemoteData.map (updateFoo index) foo
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:55:34.631103</ts>
    <user>U37HUSJ4R</user>
    <text>ah right ok</text>
  </message>
  <message>
    <ts>2017-07-20T09:55:36.632015</ts>
    <user>U4872964V</user>
    <text>etc</text>
  </message>
  <message>
    <ts>2017-07-20T09:56:32.665455</ts>
    <user>U4872964V</user>
    <text>and so what &lt;@U3SJEDR96&gt; was suggesting was basically the same but using anonymous functions (lambdas)</text>
  </message>
  <message>
    <ts>2017-07-20T09:56:40.669778</ts>
    <user>U37HUSJ4R</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T09:56:45.673115</ts>
    <user>U37HUSJ4R</user>
    <text>thanks will look into it</text>
  </message>
  <message>
    <ts>2017-07-20T09:56:54.677882</ts>
    <user>U37HUSJ4R</user>
    <text>very helpful</text>
  </message>
  <message>
    <ts>2017-07-20T09:57:10.687600</ts>
    <user>U4872964V</user>
    <text>you’re welcome!</text>
  </message>
  <message>
    <ts>2017-07-20T10:01:35.852951</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U37HUSJ4R&gt; the nice thing about `map` is that it allows you to not need to care about the containing type, if you later decide that ‘WebData Foo’ isn’t what you want and instead you just need a ‘Maybe Foo`, all the code for handling `Foo` is unchanged and you can pass the same functions to `Maybe.map` instead</text>
  </message>
  <message>
    <ts>2017-07-20T10:20:37.537914</ts>
    <user>U170TNSTZ</user>
    <text>Any good discussions on Elm vs Reason on the web? Google is failing me, since there are a lot of “reasons for using Elm” :wink:</text>
  </message>
  <message>
    <ts>2017-07-20T10:21:52.583195</ts>
    <user>U4872964V</user>
    <text>search for “reasonml”</text>
  </message>
  <message>
    <ts>2017-07-20T10:23:18.635470</ts>
    <user>U170TNSTZ</user>
    <text>Ah! Thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T10:25:10.704507</ts>
    <user>U4872964V</user>
    <text>(but then choose Elm) :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T10:28:18.822958</ts>
    <user>U0J1M0F32</user>
    <text>Never heard of Reason, checking it out now. :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-20T10:30:41.917934</ts>
    <user>U6BC3NCGJ</user>
    <text>Hello! Is anyone else having problems accessing &lt;http://guide.elm-lang.org|guide.elm-lang.org&gt;?</text>
  </message>
  <message>
    <ts>2017-07-20T10:31:23.944845</ts>
    <user>U1P6FFJ64</user>
    <text>Working fine here, &lt;@U6BC3NCGJ&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T10:32:36.990950</ts>
    <user>U1P6FFJ64</user>
    <text>&lt;@U6BC3NCGJ&gt; if you have problems accessing it, you can clone it from the repo: &lt;https://github.com/evancz/guide.elm-lang.org&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T10:36:56.155332</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0J1M0F32&gt; it's facebook's "JS-like frontend for ocaml"</text>
  </message>
  <message>
    <ts>2017-07-20T10:37:48.187499</ts>
    <user>U3SJEDR96</user>
    <text>it has very different trade-offs than Elm, tho</text>
  </message>
  <message>
    <ts>2017-07-20T10:38:10.201956</ts>
    <user>U0J1M0F32</user>
    <text>Yah I see that (the trade-offs). Seems interesting. I don't immediately see the use case, but I don't write Ocaml or full JS apps very often.</text>
  </message>
  <message>
    <ts>2017-07-20T10:41:59.346065</ts>
    <user>U650CUWGM</user>
    <text>got it, thank you</text>
  </message>
  <message>
    <ts>2017-07-20T10:44:59.458775</ts>
    <user>U3L8MM10T</user>
    <text>Where is the sourcecode for &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Color&gt;?</text>
  </message>
  <message>
    <ts>2017-07-20T10:45:40.485004</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/core/blob/5.1.1/src/Color.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T10:45:50.491470</ts>
    <user>U3SJEDR96</user>
    <text>there's a button "view source" in the top-right, normally</text>
  </message>
  <message>
    <ts>2017-07-20T10:46:08.503042</ts>
    <user>U3L8MM10T</user>
    <text>But it doesn't do the trick this time.</text>
  </message>
  <message>
    <ts>2017-07-20T10:46:21.511032</ts>
    <user>U6BC3NCGJ</user>
    <text>&lt;@U1P6FFJ64&gt; thanks for the link! Some DNS issue, so it might be because I'm connecting from France</text>
  </message>
  <message>
    <ts>2017-07-20T10:46:24.512583</ts>
    <user>U0LPMPL2U</user>
    <text>all packages have a "Browse source" button in the top-right :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T10:46:57.535402</ts>
    <user>U0LPMPL2U</user>
    <text>You can also guess based on the package name/owner</text>
  </message>
  <message>
    <ts>2017-07-20T10:47:26.554155</ts>
    <user>U0LPMPL2U</user>
    <text>`elm-lang/core` package can be found at &lt;http://github.com/elm-lang/core|github.com/elm-lang/core&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T10:48:04.578657</ts>
    <user>U3SJEDR96</user>
    <text>need to make sure you're viewing the right version, tho</text>
  </message>
  <message>
    <ts>2017-07-20T10:48:13.584455</ts>
    <user>U3L8MM10T</user>
    <text>_Browse Source_ gets me to &lt;https://github.com/elm-lang/core/tree/5.1.1&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T10:48:16.586282</ts>
    <user>U3SJEDR96</user>
    <text>I think `master` branch is already 0.19 prep</text>
  </message>
  <message>
    <ts>2017-07-20T10:48:30.595871</ts>
    <user>U3SJEDR96</user>
    <text>yeah, that's correct, &lt;@U3L8MM10T&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T10:48:35.599140</ts>
    <user>U3SJEDR96</user>
    <text>from there, you go src -&amp;gt; Color.elm</text>
  </message>
  <message>
    <ts>2017-07-20T10:50:10.660968</ts>
    <user>U3R7CKQRX</user>
    <text>I have recently looked into the code of the `Navigation` package. Since I would like ot circumvent the fact that its subscription cannot be unsubscribed I would like to use my own `Dom.LowLevel.onWindow` to listen for `popstate` events. Can anybody tell me if this possibble without using `effect module`, if this would work, and if this is a really bad idea?</text>
  </message>
  <message>
    <ts>2017-07-20T10:51:45.723638</ts>
    <user>U3SJEDR96</user>
    <text>that might work :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-20T10:53:22.787011</ts>
    <user>U3SJEDR96</user>
    <text>would be interesting in the academical sense; what's your use-case?</text>
  </message>
  <message>
    <ts>2017-07-20T10:54:49.843856</ts>
    <user>U3R7CKQRX</user>
    <text>So &lt;@U3SJEDR96&gt; it's kinda a long story but will try ti kee it short. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T10:55:11.858617</ts>
    <user>U3R7CKQRX</user>
    <text>We are using elm in a large scale SPA</text>
  </message>
  <message>
    <ts>2017-07-20T10:55:29.871204</ts>
    <user>U3R7CKQRX</user>
    <text>Elm apps are mounted and unmounted as you route through the app.</text>
  </message>
  <message>
    <ts>2017-07-20T10:56:09.898087</ts>
    <user>U3R7CKQRX</user>
    <text>Then I discovered there is no proper way to cleean up after elm (something like `app.kill()`), so subscriptions stay on the page</text>
  </message>
  <message>
    <ts>2017-07-20T10:57:07.936220</ts>
    <user>U3R7CKQRX</user>
    <text>There is a workaroudn to unmount the subscriptions (by using a port) but for the navigation package one subsciption that listens to the url change is always there and can't be removed.</text>
  </message>
  <message>
    <ts>2017-07-20T10:57:37.955999</ts>
    <user>U3R7CKQRX</user>
    <text>Because I don't want to leak event handlers I would like to use my own listener that I can control.</text>
  </message>
  <message>
    <ts>2017-07-20T10:58:25.987818</ts>
    <user>U3R7CKQRX</user>
    <text>thus I looked into the Navigation package code, opened this issue &lt;https://github.com/elm-lang/core/issues/886&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T10:58:30.991488</ts>
    <user>U3R7CKQRX</user>
    <text>... and here I am :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T11:00:12.061093</ts>
    <user>U3SJEDR96</user>
    <text>Right. So I hadn't realized that `onWindow` isn't a subscription, but a `Task Never Never` which can only (reasonably) be used in an EM</text>
  </message>
  <message>
    <ts>2017-07-20T11:01:50.128275</ts>
    <user>U3R7CKQRX</user>
    <text>can you please give me a short intro to EMs or point me to some resource?</text>
  </message>
  <message>
    <ts>2017-07-20T11:16:09.693515</ts>
    <user>U3L8MM10T</user>
    <text>Since `Color` is in Basics, why must I import it? I don't import `List`.</text>
  </message>
  <message>
    <ts>2017-07-20T11:17:05.730175</ts>
    <user>U3SJEDR96</user>
    <text>the implicit imports are listed here: &lt;http://package.elm-lang.org/packages/elm-lang/core/latest/&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T11:17:57.763791</ts>
    <user>U3L8MM10T</user>
    <text>Thanks for solving the mystery!</text>
  </message>
  <message>
    <ts>2017-07-20T11:28:21.171550</ts>
    <user>U16AT5E7L</user>
    <text>how can i call Task.perform with an Action that doesn’t takes args ?</text>
  </message>
  <message>
    <ts>2017-07-20T11:29:51.232088</ts>
    <user>U4872964V</user>
    <text>&lt;@U16AT5E7L&gt; what’s the type of your Action?</text>
  </message>
  <message>
    <ts>2017-07-20T11:30:21.252027</ts>
    <user>U16AT5E7L</user>
    <text>```
type Action
    = Init
    | Load Int
    | Press Int
    | Next
    | Prev
    | Noop
```</text>
  </message>
  <message>
    <ts>2017-07-20T11:30:46.269088</ts>
    <user>U4872964V</user>
    <text>I don’t understand your problem, why do you want to call Task.perform?</text>
  </message>
  <message>
    <ts>2017-07-20T11:31:13.286961</ts>
    <user>U16AT5E7L</user>
    <text>On Press is a specific key is pressed…</text>
  </message>
  <message>
    <ts>2017-07-20T11:33:29.376072</ts>
    <user>U4872964V</user>
    <text>I’m sorry, I don’t understand what the problem is</text>
  </message>
  <message>
    <ts>2017-07-20T11:34:58.433558</ts>
    <user>U16AT5E7L</user>
    <text>`Task.perform (always Prev) (Task.succeed Prev)`</text>
  </message>
  <message>
    <ts>2017-07-20T11:35:26.451530</ts>
    <user>U16AT5E7L</user>
    <text>this works but in a wrong way</text>
  </message>
  <message>
    <ts>2017-07-20T11:35:36.458055</ts>
    <user>U4872964V</user>
    <text>but why do you want to call `Task.perform`?</text>
  </message>
  <message>
    <ts>2017-07-20T11:35:50.466977</ts>
    <user>U4872964V</user>
    <text>That’s for running tasks as commands</text>
  </message>
  <message>
    <ts>2017-07-20T11:36:10.479447</ts>
    <user>U16AT5E7L</user>
    <text>```
                if (char == nextKeyCode) then
                    ( Model.initial
                    , Task.perform (always Next) (Task.succeed Next)
                    )
                else if (char == prevKeyCode) then
                    ( Model.initial
                    , Task.perform (always Prev) (Task.succeed Prev)
                    )
```</text>
  </message>
  <message>
    <ts>2017-07-20T11:36:34.495023</ts>
    <user>U4872964V</user>
    <text>so you want to send messages to your update function from your update function?</text>
  </message>
  <message>
    <ts>2017-07-20T11:36:40.498902</ts>
    <user>U16AT5E7L</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-20T11:36:55.508741</ts>
    <user>U4872964V</user>
    <text>why do you want to do that?</text>
  </message>
  <message>
    <ts>2017-07-20T11:37:04.514180</ts>
    <user>U4872964V</user>
    <text>why don’t you just update the model directly</text>
  </message>
  <message>
    <ts>2017-07-20T11:37:34.533294</ts>
    <user>U16AT5E7L</user>
    <text>because you can click the right arrow or a button</text>
  </message>
  <message>
    <ts>2017-07-20T11:37:50.543074</ts>
    <user>U4872964V</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-20T11:39:13.595620</ts>
    <user>U16AT5E7L</user>
    <text>ok I’m getting what you are trying to say :+1:</text>
  </message>
  <message>
    <ts>2017-07-20T11:40:11.633172</ts>
    <user>U16AT5E7L</user>
    <text>&lt;@U4872964V&gt; thanks!</text>
  </message>
  <message>
    <ts>2017-07-20T11:40:19.638240</ts>
    <user>U4872964V</user>
    <text>no problem :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T12:22:48.221339</ts>
    <user>U16AT5E7L</user>
    <text>New beta for my hangman game :grimacing:
code - &lt;https://github.com/puemos/elm-hangman&gt;
demo - &lt;http://puemos.github.io/elm-hangman/&gt;
:elm:  :tada:</text>
  </message>
  <message>
    <ts>2017-07-20T12:26:13.338988</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U16AT5E7L&gt; I won! (Really though, great stuff)</text>
  </message>
  <message>
    <ts>2017-07-20T12:42:16.899781</ts>
    <user>U5GPN1UPR</user>
    <text>Bit off topic, but has anyone here got team building ideas for Devs.</text>
  </message>
  <message>
    <ts>2017-07-20T12:59:08.476951</ts>
    <user>U3L8MM10T</user>
    <text>Is there a way to call an Elm function given the function name as a `String`?</text>
  </message>
  <message>
    <ts>2017-07-20T13:03:30.630238</ts>
    <user>U4872964V</user>
    <text>&lt;@U3L8MM10T&gt; from Elm, no</text>
  </message>
  <message>
    <ts>2017-07-20T13:03:49.640822</ts>
    <user>U4872964V</user>
    <text>why would you want to do that?</text>
  </message>
  <message>
    <ts>2017-07-20T13:11:51.912226</ts>
    <user>U3FJSB596</user>
    <text>If the functions is of the same type, then you can make a dictionary with a string as key and the function as its value</text>
  </message>
  <message>
    <ts>2017-07-20T13:12:55.947820</ts>
    <user>U4872964V</user>
    <text>I guess if you have a dynamic enough type of model, I’ve only done that using union types though, not strings.</text>
  </message>
  <message>
    <ts>2017-07-20T13:13:22.962963</ts>
    <user>U4872964V</user>
    <text>(with toString because of Dict comparable req, but … :)</text>
  </message>
  <message>
    <ts>2017-07-20T13:15:36.037470</ts>
    <user>U3L8MM10T</user>
    <text>&lt;@U4872964V&gt; I am using  &lt;http://package.elm-lang.org/packages/justgage/tachyons-elm/latest&gt;, as well as &lt;http://package.elm-lang.org/packages/evancz/elm-graphics/latest&gt;, and I only want to use the Tachyons colors for consistency (&lt;http://tachyons.io/docs/themes/skins/&gt;).  But I don't want code duplication such as `Tachyons.Classes.purple` for the html, and `tColor__purple` for the elm-graphics: ```tHexString__purple = "#5E2CA5"

tHexToColor : String -&amp;gt; Color
tHexToColor hex =
    Result.withDefault black &amp;lt;| Color.Convert.hexToColor hex

tColor__purple : Color
tColor__purple =
    tHexToColor tHexString__purple```  I want to take the string `"purple"` and use that directly for the Tachyons, and then for the graphics prepend with `"tColor__"`, and then call programatically. This way the colors are synched automatically.</text>
  </message>
  <message>
    <ts>2017-07-20T13:16:44.075549</ts>
    <user>U4872964V</user>
    <text>&lt;@U3L8MM10T&gt; I see, then a Dict is probably the best</text>
  </message>
  <message>
    <ts>2017-07-20T13:17:51.112926</ts>
    <user>U4872964V</user>
    <text>or, since they are just class strings, use the `class` attribute directly.</text>
  </message>
  <message>
    <ts>2017-07-20T13:21:01.218399</ts>
    <user>U3L8MM10T</user>
    <text>I don't follow how `Dict` helps.</text>
  </message>
  <message>
    <ts>2017-07-20T13:22:08.255701</ts>
    <user>U4872964V</user>
    <text>You’d put the functions that you want to call in a dict, like this:
```
Dict.fromList [(“purple”, tColor__purple), ...]
```</text>
  </message>
  <message>
    <ts>2017-07-20T13:24:14.325580</ts>
    <user>U3L8MM10T</user>
    <text>Ok yes, it's a compromise of sorts.</text>
  </message>
  <message>
    <ts>2017-07-20T13:24:15.326441</ts>
    <user>U4872964V</user>
    <text>but, you have the tHexToColor already, so why not just use that?</text>
  </message>
  <message>
    <ts>2017-07-20T13:25:05.354657</ts>
    <user>U4872964V</user>
    <text>just a dict of `[(“purple”, “#5E2CA5")]` i mean</text>
  </message>
  <message>
    <ts>2017-07-20T13:25:28.367992</ts>
    <user>U3L8MM10T</user>
    <text>very cool. Thanks</text>
  </message>
  <message>
    <ts>2017-07-20T13:26:02.387565</ts>
    <user>U4872964V</user>
    <text>or a function, with pattern matching for the colors</text>
  </message>
  <message>
    <ts>2017-07-20T13:26:09.391302</ts>
    <user>U4872964V</user>
    <text>there are a few ways</text>
  </message>
  <message>
    <ts>2017-07-20T13:29:12.497910</ts>
    <user>U3L8MM10T</user>
    <text>Calling functions programatically opens up a can of worms...</text>
  </message>
  <message>
    <ts>2017-07-20T13:32:29.612991</ts>
    <user>U60SXAF96</user>
    <text>It'd be nice if elm-graphics would provide a Dict for you.</text>
  </message>
  <message>
    <ts>2017-07-20T13:32:46.622323</ts>
    <user>U60SXAF96</user>
    <text>Then  you could map over that Dict to get the Tachyon values.</text>
  </message>
  <message>
    <ts>2017-07-20T13:33:24.644303</ts>
    <user>U3L8MM10T</user>
    <text>They don't use the same exact colors, except for black and white (and maybe a few others) :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T13:34:20.676275</ts>
    <user>U3ZNWN526</user>
    <text>Has anybody tried implementing a "don't use tuples" policy in one of your projects? :slightly_smiling_face:  It seems that for maintainability, records are basically always better, right?</text>
  </message>
  <message>
    <ts>2017-07-20T13:34:44.689934</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4872964V&gt; maybe we really _should_ create that package :smile:</text>
  </message>
  <message>
    <ts>2017-07-20T13:34:47.691242</ts>
    <user>U4872964V</user>
    <text>&lt;@U3ZNWN526&gt; we were joking around about making a “elm-no-tuples” library :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T13:35:29.715605</ts>
    <user>U4872964V</user>
    <text>&lt;@U3ZNWN526&gt; yes, except for one-offs I always use records</text>
  </message>
  <message>
    <ts>2017-07-20T13:37:00.765968</ts>
    <user>U3ZNWN526</user>
    <text>Okay, cool - I think I'm going to go that way as well! Any by one-offs, you mean like... some piece of data that's only used within a single function or something?</text>
  </message>
  <message>
    <ts>2017-07-20T13:37:33.784515</ts>
    <user>U3ZNWN526</user>
    <text>(Such that it would be more of a burden than a help to actually define a type for it, I suppose)</text>
  </message>
  <message>
    <ts>2017-07-20T13:39:07.835806</ts>
    <user>U236M9FH9</user>
    <text>Pretty much the only time I use tuples is something like this:
```
let
  (buttonClass, buttonText) = case someType of
    Foo -&amp;gt; ("btn-danger", "Quit")
    Bat -&amp;gt; ("btn-primary", "Start")
in ...
```</text>
  </message>
  <message>
    <ts>2017-07-20T13:39:28.847724</ts>
    <user>U3ZNWN526</user>
    <text>Ahh, yes, okay.</text>
  </message>
  <message>
    <ts>2017-07-20T13:43:21.980271</ts>
    <user>U4872964V</user>
    <text>yes, and
```
case (oneThing, anotherThing) of
    (Some match, SomeOther) -&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-07-20T14:37:22.859067</ts>
    <user>U5ABF3BH7</user>
    <text>Hi, is there a way to write the following in a more condensed way?</text>
  </message>
  <message>
    <ts>2017-07-20T14:37:28.862437</ts>
    <user>U5ABF3BH7</user>
    <text>```placeId = 
  case model.place of
   Nothing -&amp;gt; 
      “”
   Just place -&amp;gt; 
     toString place.id```</text>
  </message>
  <message>
    <ts>2017-07-20T14:38:20.891907</ts>
    <user>U0LPMPL2U</user>
    <text>```
model.place
  |&amp;gt; Maybe.map (toString &amp;lt;&amp;lt; .id)
  |&amp;gt; Maybe.withDefault ""
```
(edit: got the pipes wrong)</text>
  </message>
  <message>
    <ts>2017-07-20T14:38:44.905516</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0LPMPL2U&gt; Thanks you so much! You are awesome! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T14:39:02.915512</ts>
    <user>U0LPMPL2U</user>
    <text>always glad to help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T14:40:15.956855</ts>
    <user>U0LPMPL2U</user>
    <text>If you're using the `elm-community/maybe-extra` package, there's a function `Maybe.Extra.unwrap` that does the equivalent of the `Maybe.map` and `Maybe.withDefault` combo</text>
  </message>
  <message>
    <ts>2017-07-20T14:41:32.000420</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0LPMPL2U&gt; where do you put  ```model.place```?</text>
  </message>
  <message>
    <ts>2017-07-20T14:41:47.008472</ts>
    <user>U0LPMPL2U</user>
    <text>just edited my response</text>
  </message>
  <message>
    <ts>2017-07-20T14:42:05.018844</ts>
    <user>U5ABF3BH7</user>
    <text>&lt;@U0LPMPL2U&gt; thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T14:43:22.061591</ts>
    <user>U0LPMPL2U</user>
    <text>You could also write it as:
```
placeId : Model -&amp;gt; String
placeId =
  Maybe.withDefault "" &amp;lt;&amp;lt; Maybe.map (toString &amp;lt;&amp;lt; .id) &amp;lt;&amp;lt; .place
```</text>
  </message>
  <message>
    <ts>2017-07-20T14:43:37.069828</ts>
    <user>U0LPMPL2U</user>
    <text>this is called "point free style" and is probably less readable in this case</text>
  </message>
  <message>
    <ts>2017-07-20T14:45:04.119111</ts>
    <user>U4872964V</user>
    <text>I must admit I often do the `case` even though I know about the `Maybe` helpers</text>
  </message>
  <message>
    <ts>2017-07-20T14:47:15.193417</ts>
    <user>U0LPMPL2U</user>
    <text>yeah, sometimes getting all fancy doesn't really help</text>
  </message>
  <message>
    <ts>2017-07-20T14:47:17.194494</ts>
    <user>U0LPMPL2U</user>
    <text>It's nice in pipelines</text>
  </message>
  <message>
    <ts>2017-07-20T14:47:38.206333</ts>
    <user>U4G7CC18U</user>
    <text>Good day fellow elmaholics.
I am starting a new app that will be a SPA. I'll be honest and just say that I am very inspired by &lt;@U0CL0AS3V&gt; famous `elm-spa-example`. Everything was going fine, until the moment that I realized that I want to use `elm-bootstrap`. This means that my `Views\Page.elm` `view` must be able to "raise" its own `Msg`s. 

I am having quite a hard time accomplishing this :( I can at least now understand why I am failing.. in `Main.elm` `viewPage` I need (for instance) `Home` to be able to "raise" its own `Msg`s (which get `Html.map`'d to `HomeMsg`), but now when I pipe it into `frame`, this `frame` would also need to potentially be able to "raise" its own messages..

My code is getting really messy really fast, so I must discuss this with someone who has had a similar situation, because I might be getting tunnel syndrome.</text>
  </message>
  <message>
    <ts>2017-07-20T14:55:22.469338</ts>
    <user>U4G7CC18U</user>
    <text>I am going to pull my ""masterpage"" logic from `Views\Page.elm` into `Main.elm` and see if that helps</text>
  </message>
  <message>
    <ts>2017-07-20T15:07:08.873251</ts>
    <user>U3L8MM10T</user>
    <text>&lt;@U4G7CC18U&gt; Maybe think about using &lt;http://package.elm-lang.org/packages/justgage/tachyons-elm/latest&gt;, which itself is of functional nature.</text>
  </message>
  <message>
    <ts>2017-07-20T15:08:42.924249</ts>
    <user>U4872964V</user>
    <text>or &lt;#C4F9NBLR1|style-elements&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T15:09:05.935689</ts>
    <user>U4G7CC18U</user>
    <text>&lt;@U3L8MM10T&gt; &lt;@U4872964V&gt; thank you for the suggestions. :+1: :+1:</text>
  </message>
  <message>
    <ts>2017-07-20T15:09:34.950708</ts>
    <user>U4872964V</user>
    <text>exciting times in styling right now</text>
  </message>
  <message>
    <ts>2017-07-20T15:28:36.546230</ts>
    <user>U1AQQKP98</user>
    <text>from &lt;https://github.com/elm-lang/core/blob/master/src/Set.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T15:28:43.549861</ts>
    <user>U1AQQKP98</user>
    <text>&amp;gt; Insert, remove, and query operations all take *O(log n)* time.</text>
  </message>
  <message>
    <ts>2017-07-20T15:28:56.556181</ts>
    <user>U1AQQKP98</user>
    <text>not seeing benchmarks for List at &lt;https://github.com/elm-lang/core/blob/master/src/List.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:13.565126</ts>
    <user>U23SA861Y</user>
    <text>list is going to be `O(n)` for most things</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:18.567807</ts>
    <user>U1AQQKP98</user>
    <text>Dict has the same characteristics as Set it seems</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:20.569164</ts>
    <user>U1AQQKP98</user>
    <text>&lt;https://github.com/elm-lang/core/blob/master/src/Dict.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:27.572326</ts>
    <user>U1AQQKP98</user>
    <text>&amp;gt; Insert, remove, and query operations all take *O(log n)* time.</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:32.574898</ts>
    <user>U23SA861Y</user>
    <text>yeah, dict and set are implemented as sorted trees</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:48.583471</ts>
    <user>U23SA861Y</user>
    <text>I believe `type Set comparable = Dict comparable comparable`</text>
  </message>
  <message>
    <ts>2017-07-20T15:30:00.589446</ts>
    <user>U23SA861Y</user>
    <text>basically just a special case of it</text>
  </message>
  <message>
    <ts>2017-07-20T15:30:14.597423</ts>
    <user>U1AQQKP98</user>
    <text>helpful! thanks</text>
  </message>
  <message>
    <ts>2017-07-20T15:30:52.617151</ts>
    <user>U23SA861Y</user>
    <text>just remember to benchmark, because rendering is likely going to be your bottleneck anyway</text>
  </message>
  <message>
    <ts>2017-07-20T15:35:18.753149</ts>
    <user>U3SJEDR96</user>
    <text>`type Set comparable = Set (Dict comparable ())` indeed</text>
  </message>
  <message>
    <ts>2017-07-20T15:35:42.765314</ts>
    <user>U23SA861Y</user>
    <text>ahh right unit</text>
  </message>
  <message>
    <ts>2017-07-20T15:36:01.774482</ts>
    <user>U3SJEDR96</user>
    <text>close enough :smile:</text>
  </message>
  <message>
    <ts>2017-07-20T15:47:04.110326</ts>
    <user>U2Q5GJNTB</user>
    <text>I am trying to use webpack [hash] for the compiled elm bundle, but I am not sure how I would wire this up with the including html file. Any recommendations or hints?</text>
  </message>
  <message>
    <ts>2017-07-20T15:56:04.393731</ts>
    <user>U5Y72K57X</user>
    <text>Hi guys! I have the need to generate a tuple that has the current timestamp as first element, and a random integer as the second. I can solve this generating first a Time.now message, and when it succeeds a Random.generate message (code: &lt;https://pastebin.com/v7DCp2Lc&gt;). This solves the problem but it is annonying to have two different messages. I would like to do it in an unique message, like with this example that has two side effects (get the now timestamp and do an HTTP request): &lt;https://pastebin.com/SuRG42J3&gt;. The problem is that this is done with tasks, and the Random module directly generates commands instead of tasks, so I'm not sure how to do this</text>
  </message>
  <message>
    <ts>2017-07-20T15:58:07.459028</ts>
    <user>U5Y72K57X</user>
    <text>TL;DR: I need Random.generate to return a Task instead of a Cmd so I can use Task.andThen</text>
  </message>
  <message>
    <ts>2017-07-20T15:59:15.495890</ts>
    <user>U5Y72K57X</user>
    <text>Hello everyone! Thanks &lt;@USLACKBOT&gt;!</text>
  </message>
  <message>
    <ts>2017-07-20T16:01:35.572274</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5Y72K57X&gt; I don't think that can be done</text>
  </message>
  <message>
    <ts>2017-07-20T16:01:50.580405</ts>
    <user>U0LPMPL2U</user>
    <text>for now anyways</text>
  </message>
  <message>
    <ts>2017-07-20T16:02:00.585683</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5Y72K57X&gt; so, you have 2 options, both depending on `Random.step` rather than `Random.generate`:
- pass in a seed from JS, keep it in your model, and update it whenever you generate a random number. This means you don't even need a Task for random, it's just a `step: Generator a -&amp;gt; Seed -&amp;gt; (a, Seed)` call away
- Second option, use the timestamp you got to create an initial seed, and use that to create a random number</text>
  </message>
  <message>
    <ts>2017-07-20T16:02:25.598616</ts>
    <user>U3SJEDR96</user>
    <text>solution you choose should depend on how many of these you need, whether there's time between those steps, etc</text>
  </message>
  <message>
    <ts>2017-07-20T16:02:30.601114</ts>
    <user>U0LPMPL2U</user>
    <text>Oh, nice thinking &lt;@U3SJEDR96&gt; :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-20T16:03:45.639939</ts>
    <user>U0LPMPL2U</user>
    <text>Ever since they changed `Random.generate` to return commands, I've always used that instead of dealing with seeds myself. Forgot about `Random.step` :smile:</text>
  </message>
  <message>
    <ts>2017-07-20T16:04:17.656452</ts>
    <user>U3SJEDR96</user>
    <text>```
randomTask : Generator a -&amp;gt; Task Never a
randomTask generator =
    Time.now |&amp;gt; Task.map (round &amp;gt;&amp;gt; Random.initialSeed &amp;gt;&amp;gt; step generator &amp;gt;&amp;gt; Tuple.first)
```</text>
  </message>
  <message>
    <ts>2017-07-20T16:04:19.657751</ts>
    <user>U3SJEDR96</user>
    <text>something like that</text>
  </message>
  <message>
    <ts>2017-07-20T16:11:18.874369</ts>
    <user>U5Y72K57X</user>
    <text>nice idea &lt;@U3SJEDR96&gt; !</text>
  </message>
  <message>
    <ts>2017-07-20T16:12:45.918058</ts>
    <user>U5Q2CQ42U</user>
    <text>Hey everyone :slightly_smiling_face: I’m currently preparing a little company-internal recap of Elm Europe and I’d like to embed certain examples, from elm-webgl for instance. Do you have any suggestions which presentation tool to use (revealjs, elm-slides, …)? Embedding Elm code directly would be lovely, that’s why I considered elm-slides, though customizing update and subscriptions (like the webgl examples require) does not seem straight-forward to me.</text>
  </message>
  <message>
    <ts>2017-07-20T16:16:27.031468</ts>
    <user>U5Y72K57X</user>
    <text>i want to have the random number to ensure that the value is unique, because i think Task.now could return the same value if it is called at almost the same time, so using the timestamp as a seed could also generate duplicates</text>
  </message>
  <message>
    <ts>2017-07-20T16:20:03.142394</ts>
    <user>U5Y72K57X</user>
    <text>i also thought using a counter instead of a random number also, but i'm not sure if two messages can be proccessed at the same time (altough it would be very rare), accessing the same counter value</text>
  </message>
  <message>
    <ts>2017-07-20T16:20:39.161303</ts>
    <user>U4872964V</user>
    <text>no, messages are processed one at a time</text>
  </message>
  <message>
    <ts>2017-07-20T16:21:00.171981</ts>
    <user>U4872964V</user>
    <text>so if you update the counter in the model when processing a message that’s fine</text>
  </message>
  <message>
    <ts>2017-07-20T16:22:17.211245</ts>
    <user>U4872964V</user>
    <text>you can think of the `update` function as being called like `update Msg3 (update Msg2 (update Msg1 model)))`</text>
  </message>
  <message>
    <ts>2017-07-20T16:25:16.304867</ts>
    <user>U5Y72K57X</user>
    <text>thanks &lt;@U4872964V&gt;! then a counter would be an easier choice over a random number</text>
  </message>
  <message>
    <ts>2017-07-20T16:26:45.351654</ts>
    <user>U4872964V</user>
    <text>Yes, and random ints are only 32 bits right now, so the probability for collision is pretty big due to the birthday paradox</text>
  </message>
  <message>
    <ts>2017-07-20T16:28:58.422218</ts>
    <user>U5Y72K57X</user>
    <text>right, that also would be a problem</text>
  </message>
  <message>
    <ts>2017-07-20T16:31:46.511006</ts>
    <user>U5Y72K57X</user>
    <text>anyway, do you think having a toTask function in Random, like Http has would be a good idea? it could be useful in other cases, like for example generating a random timestamp that has to be close to the current time, or to perform http requests with some random data (useful to force cache invalidation)</text>
  </message>
  <message>
    <ts>2017-07-20T16:37:44.693598</ts>
    <user>U4872964V</user>
    <text>well that would certainly be useful, but I’m not sure that works technically with effects modules</text>
  </message>
  <message>
    <ts>2017-07-20T16:51:59.124325</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U5Y72K57X&gt;  see this discussion thread on that topic -&amp;gt; &lt;https://groups.google.com/forum/#!searchin/elm-dev/random$20cmd$20task%7Csort:relevance/elm-dev/MEBzD3f7Bq8/ojpRsjObDQAJ&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T16:56:22.259578</ts>
    <user>U3L8MM10T</user>
    <text>If I have ` type ABC = A Int | B | C` and `list = [A 3]`, how can I pattern-match for `A` with *any* number in `List.any ((==) A) list`?</text>
  </message>
  <message>
    <ts>2017-07-20T16:59:24.356021</ts>
    <user>U3FJSB596</user>
    <text>You wouldn’t. You would create a special function to make the comparison.</text>
  </message>
  <message>
    <ts>2017-07-20T16:59:51.369750</ts>
    <user>U3L8MM10T</user>
    <text>Ok</text>
  </message>
  <message>
    <ts>2017-07-20T17:09:59.666706</ts>
    <user>U5Y72K57X</user>
    <text>&lt;@U0JFGGZS6&gt; that thread seems to cover my concern, thanks!</text>
  </message>
  <message>
    <ts>2017-07-20T22:24:44.580081</ts>
    <user>U0M6QA0HG</user>
    <text>Hey all, I discovered an interesting way for Elm APIs to expose optional parameters to consumers. I wrote out a long thing about it over in &lt;#C2MFMKHDX|api-design&gt;, or if you want to skip ahead you can play with a proof of concept here: &lt;https://ellie-app.com/3N8yyQsKkW6a1/5&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T22:27:16.606510</ts>
    <user>U0M6QA0HG</user>
    <text>that example is a simplified version of what I'm trying to do with my GraphQL package, which is why the arguments end up as a list of key-value pairs</text>
  </message>
  <message>
    <ts>2017-07-20T22:28:06.615041</ts>
    <user>U0M6QA0HG</user>
    <text>here is another example showing how you could provide an alternate interface for the Http module: &lt;https://ellie-app.com/3NJBz9nrcvRa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T02:13:52.380441</ts>
    <user>U2Q5GJNTB</user>
    <text>I am trying to use webpack [hash] for the compiled elm bundle, but I am not sure how I would wire this up with the including html file. Any recommendations or hints?</text>
  </message>
  <message>
    <ts>2017-07-21T05:25:18.683485</ts>
    <user>U0CLDU8UB</user>
    <text>&lt;@U2Q5GJNTB&gt; If the html file goes through the webpack pipeline, the script should just magically get included</text>
  </message>
  <message>
    <ts>2017-07-21T05:52:51.243760</ts>
    <user>U0CL7EPPG</user>
    <text>&lt;https://elmlang.slack.com/archives/C0HJVT881/p1500630485964116&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T05:57:09.329528</ts>
    <user>U2FMN03NZ</user>
    <text>&lt;@U0CL7EPPG&gt; what do you  mean by join? Like, would `elm-live Main.elm --output=index.js --open &amp;amp;&amp;amp; elm-css Stylesheets.elm` count as “joined”?</text>
  </message>
  <message>
    <ts>2017-07-21T06:05:04.488327</ts>
    <user>U0CL7EPPG</user>
    <text>Hi &lt;@U2FMN03NZ&gt;, the bottom part of that quote got cut off. What I would like is if the CSS file was watched, recompiled and reloaded like the app code is.</text>
  </message>
  <message>
    <ts>2017-07-21T06:06:10.509613</ts>
    <user>U0CL7EPPG</user>
    <text>I think for that I might have to switch to the `Css.asPairs` style according to the docs:
&amp;gt; One advantage of inline styles is that these can be dynamically changed at runtime
Which is too bad.</text>
  </message>
  <message>
    <ts>2017-07-21T06:07:31.534829</ts>
    <user>U0CL7EPPG</user>
    <text>Perhaps a more comprehensive tool then `elm-live` could manage it though?</text>
  </message>
  <message>
    <ts>2017-07-21T06:37:02.056616</ts>
    <user>U0J8D9M2P</user>
    <text>Webpack</text>
  </message>
  <message>
    <ts>2017-07-21T06:37:11.059152</ts>
    <user>U0J8D9M2P</user>
    <text>Or Brunch</text>
  </message>
  <message>
    <ts>2017-07-21T06:52:45.313624</ts>
    <user>U1SF6G7PA</user>
    <text>&lt;@U0CL7EPPG&gt; you can use the --before-build option of elm-live to run a script which calls elm-css</text>
  </message>
  <message>
    <ts>2017-07-21T07:17:04.704444</ts>
    <user>U0X1G7NVD</user>
    <text>Would you mind opening an issue with that so I (or anybody else) can focus on that anytime soon? If so, please, give us a little bit of background so we can understand how Indians deal with numbering — TBH I have no clue, sorry about that ; )</text>
  </message>
  <message>
    <ts>2017-07-21T07:18:35.728272</ts>
    <user>U0X1G7NVD</user>
    <text>About that:

&amp;gt; I am hesitant to recommend packages outside the stdlib which I have not had direct experience with.

That's a very good learning strategy, cheers! Anyway you're aways welcome to jump in the source code. It's damn simple. And a friendly warning: be aware about the risk of reinventing the wheel.</text>
  </message>
  <message>
    <ts>2017-07-21T09:51:24.076615</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U4872964V&gt; or anybody — I have a question regarding “embed js ui components” (&lt;https://ellie-app.com/qyNKkTsrNRa1/2&gt;).  In the app I am working on, I do the following: send some data as a string to JS-land via ports.  That data is asciiodoc markup + latex markup.  It is rendered in JS-land first by Asciidoctor and then by MathJax.  The Asciidoctor part is straightforward: the data string is an argument to `Asciidoctor.convert`.  The value of this function is used to populate the `innerHtml` of a div.  Then MathJax, another js package, magically renders the Latex in that div.  Finally, the html file (`index.html`) is positioned to be in the place that it would be if I could do all of this with Elm, i.e., as part of a view.

Needless to say, this last step (a horrible hack) is quite awkward, and so far I can’t get  `index.html` to position itself accurately for all browsers, window sizes, machines, etc. — not horrible, but not perfect.

So the question is: with the technology you mention (or any other :smile:) is it possible to display content processed in JS-land in some better way.</text>
  </message>
  <message>
    <ts>2017-07-21T09:54:12.167930</ts>
    <user>U4872964V</user>
    <text>&lt;@U3LUC6SNS&gt; not sure how much the technology affects layout etc, that's more the domain of CSS and styling. </text>
  </message>
  <message>
    <ts>2017-07-21T11:32:38.608135</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U4872964V&gt; indeed we discussed my recent post to elm-disucss here in Slack last week; that post was in moderation for maybe 10 days or so, and then we discussed here quite a bit, and so that thread can be dismissed in the mailing list. Unfortunately, I replied to that thread to say as much, but this reply is also stuck in moderation for possibly days... perhaps you can reply to that list thread to inform that this conversation doesn't need further analysis there?</text>
  </message>
  <message>
    <ts>2017-07-21T11:33:04.623442</ts>
    <user>U4872964V</user>
    <text>yes, i replied now, just for clarification</text>
  </message>
  <message>
    <ts>2017-07-21T11:33:35.641157</ts>
    <user>U5QJW0DDE</user>
    <text>yeah but i can't reply to any replies to elm-discuss since the first X emails get stuck in moderation for it seems up to 2 weeks</text>
  </message>
  <message>
    <ts>2017-07-21T11:33:48.648639</ts>
    <user>U4872964V</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-21T11:33:55.652904</ts>
    <user>U4872964V</user>
    <text>lets do it in &lt;#C2QPJLU2X|elm-discuss&gt; then :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T12:50:09.144552</ts>
    <user>U40QW928G</user>
    <text>Has anyone implemented Elm into an existing javascript application?</text>
  </message>
  <message>
    <ts>2017-07-21T12:50:27.153563</ts>
    <user>U40QW928G</user>
    <text>I want to slowly integrate Elm so people can see it running in production</text>
  </message>
  <message>
    <ts>2017-07-21T12:51:21.181138</ts>
    <user>U681TBBUP</user>
    <text>&lt;http://elm-lang.org/blog/how-to-use-elm-at-work&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T12:52:07.204734</ts>
    <user>U681TBBUP</user>
    <text>That post assumes react</text>
  </message>
  <message>
    <ts>2017-07-21T13:14:08.878545</ts>
    <user>U3FJSB596</user>
    <text>This is for Angular 1.x
&lt;https://github.com/samcal/angular-elm-components&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T13:47:08.889442</ts>
    <user>U23SA861Y</user>
    <text>heh, the indians have a really strange delimitation system crore and lakh. I only mention it to say that numbering systems are annoyingly difficult.</text>
  </message>
  <message>
    <ts>2017-07-21T13:48:24.928654</ts>
    <user>U23SA861Y</user>
    <text>I have no fear of reinventing the wheel, its simply that dependencies have a cost that you need to pay. I don't think I would pull in a dependency to just separate numbers into bunches of 3, I would pull in a dependency the performed proper internationalization on the number formatting.</text>
  </message>
  <message>
    <ts>2017-07-21T14:09:12.586684</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U40QW928G&gt; I have been sneaking Elm progressively into our production code</text>
  </message>
  <message>
    <ts>2017-07-21T14:09:42.601783</ts>
    <user>U3R7CKQRX</user>
    <text>we have an architecture which hosts several independent apps</text>
  </message>
  <message>
    <ts>2017-07-21T14:09:43.602232</ts>
    <user>U40QW928G</user>
    <text>I have a react application and I'm going to try adding Elm to the webpack</text>
  </message>
  <message>
    <ts>2017-07-21T14:09:57.609165</ts>
    <user>U3R7CKQRX</user>
    <text>8 of those are already running on elm</text>
  </message>
  <message>
    <ts>2017-07-21T14:10:07.614322</ts>
    <user>U40QW928G</user>
    <text>and start writing non critical components in Elm</text>
  </message>
  <message>
    <ts>2017-07-21T14:10:18.620300</ts>
    <user>U3R7CKQRX</user>
    <text>that's a pretty good idea</text>
  </message>
  <message>
    <ts>2017-07-21T14:10:23.622668</ts>
    <user>U3R7CKQRX</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-07-21T14:10:46.634720</ts>
    <user>U3R7CKQRX</user>
    <text>I did some small part in elm that's not that heavily used and needed a rewrite anyway</text>
  </message>
  <message>
    <ts>2017-07-21T14:10:57.640535</ts>
    <user>U3R7CKQRX</user>
    <text>that was the first thing</text>
  </message>
  <message>
    <ts>2017-07-21T14:11:11.647370</ts>
    <user>U3R7CKQRX</user>
    <text>then I successively ramped it up</text>
  </message>
  <message>
    <ts>2017-07-21T14:12:23.683647</ts>
    <user>U3R7CKQRX</user>
    <text>let me know how that goes, I am hapy to give some pointers since I've been doing that since the beginning of the year</text>
  </message>
  <message>
    <ts>2017-07-21T14:13:05.705270</ts>
    <user>U3R7CKQRX</user>
    <text>do you have some sticky points or things were you thing it will be hard to do with your existing code?</text>
  </message>
  <message>
    <ts>2017-07-21T14:13:37.721737</ts>
    <user>U40QW928G</user>
    <text>nah it's a pretty standard react applications, I need to look into that elm react lib some more though</text>
  </message>
  <message>
    <ts>2017-07-21T14:15:01.764903</ts>
    <user>U3R7CKQRX</user>
    <text>it's pretty straightforward, just 20 lines of code &lt;https://github.com/evancz/react-elm-components/blob/master/index.js&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T14:17:18.833418</ts>
    <user>U3R7CKQRX</user>
    <text>the hardest parts for me were, using translations, formatting local dates, and convincing team mates :slightly_smiling_face: don't know if any of these apply to you, but if so let me know.</text>
  </message>
  <message>
    <ts>2017-07-21T14:25:03.068230</ts>
    <user>U3R7CKQRX</user>
    <text>&lt;@U3LUC6SNS&gt; What are you trying to do exactly. Using js ui stuff in elm? I don't know your use case exactly but I have been using web components for things like that it worked quite well so far.</text>
  </message>
  <message>
    <ts>2017-07-21T14:28:05.162073</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U3R7CKQRX&gt; I have to do the following.  (1) send a string to JS-land via ports which represents a document with text with both Asciidoc (like Markdown) markup and LaTeX markup. (2) render the “document” first using Asciidoctor and then MathJax (for Asciidoc and Latex respectively).  The result of this rendering operation is HTML  text which resides in index.html, that is in DOM external to Elm.  I have a hacky way of using this rendered text, but ideally I would like to “grab it” to display in the normal elm way via the view function.</text>
  </message>
  <message>
    <ts>2017-07-21T14:31:34.272463</ts>
    <user>U3LUC6SNS</user>
    <text>If the MathJax output were the value of a function, as is the output of `Asciidoctor.convert`, this would be easy.</text>
  </message>
  <message>
    <ts>2017-07-21T14:34:26.360142</ts>
    <user>U3R7CKQRX</user>
    <text>So the input is some Latex and the output should be HTML right?</text>
  </message>
  <message>
    <ts>2017-07-21T14:35:00.377065</ts>
    <user>U3SJEDR96</user>
    <text>I wonder if mathjax can render to a fragment?</text>
  </message>
  <message>
    <ts>2017-07-21T14:37:59.468516</ts>
    <user>U3R7CKQRX</user>
    <text>If web components are an option for you I could see something like this work quite well:
```
&amp;lt;latex-component input="&amp;lt;your latex input&amp;gt;"&amp;gt;&amp;lt;/latex-component&amp;gt;
```
The component would then take the input from it's input attribute run the mathjax or similar and the put the result into its `innerHTML`</text>
  </message>
  <message>
    <ts>2017-07-21T16:14:21.105622</ts>
    <user>U4F64AKQV</user>
    <text>Anyone have a real-world example of using keyed nodes that they'd be willing to share with me? I'm trying to understand how they're used in practice. </text>
  </message>
  <message>
    <ts>2017-07-21T16:14:32.110250</ts>
    <user>U1WJH1JU9</user>
    <text>Does anyone know how to key a table row?</text>
  </message>
  <message>
    <ts>2017-07-21T16:26:10.397429</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4F64AKQV&gt; I'm fairly sure Evan's elm-todomvc example uses keyed nodes</text>
  </message>
  <message>
    <ts>2017-07-21T16:26:17.400382</ts>
    <user>U3SJEDR96</user>
    <text>not exactly real-world</text>
  </message>
  <message>
    <ts>2017-07-21T16:26:20.401722</ts>
    <user>U3SJEDR96</user>
    <text>but ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-21T16:28:34.457100</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U1WJH1JU9&gt; you'd probably use `Html.Keyed.node "tbody" [] [ ( "row-foo", &lt;http://Html.tr|Html.tr&gt; [] [] ) ]` etc. Though most likely starting from a `List Foo` and using something like `List.map renderRow foos` where `renderRow : Foo -&amp;gt; (String, Html msg)`</text>
  </message>
  <message>
    <ts>2017-07-21T16:29:53.489321</ts>
    <user>U1WJH1JU9</user>
    <text>Thanks.</text>
  </message>
  <message>
    <ts>2017-07-21T16:31:13.524119</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4F64AKQV&gt; although there's also a secondary use-case for keyed nodes where it's used to first prevent a node from re-rendering, then force a node to re-render. &lt;https://github.com/elm-lang/html/issues/105#issuecomment-309524197&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T17:11:52.495939</ts>
    <user>U13H7FNDQ</user>
    <text>Yeah, &lt;@U4F64AKQV&gt;, I'd say the todo one is a fine place to start</text>
  </message>
  <message>
    <ts>2017-07-21T17:12:29.509316</ts>
    <user>U13H7FNDQ</user>
    <text>The usage is that when you add one entry on top, you do not want to do a deep diff of every single node after that</text>
  </message>
  <message>
    <ts>2017-07-21T17:12:39.512557</ts>
    <user>U13H7FNDQ</user>
    <text>you want to just hit the `lazy` and be done</text>
  </message>
  <message>
    <ts>2017-07-21T17:12:47.515476</ts>
    <user>U13H7FNDQ</user>
    <text>It also matters for checkbox state</text>
  </message>
  <message>
    <ts>2017-07-21T17:13:37.533014</ts>
    <user>U13H7FNDQ</user>
    <text>If you are swapping between the "active" and "completed" tabs in that example, there is checkbox state in the DOM that can get preserved in weird ways if you do not use keys, so it can be a correctness thing in those cases</text>
  </message>
  <message>
    <ts>2017-07-21T17:13:59.540855</ts>
    <user>U13H7FNDQ</user>
    <text>&lt;https://github.com/evancz/elm-todomvc&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T17:27:09.813933</ts>
    <user>U23SA861Y</user>
    <text>he speaks</text>
  </message>
  <message>
    <ts>2017-07-21T17:41:13.081558</ts>
    <user>U5LFUHH19</user>
    <text>I've been using an Elm SPA template (based on &lt;@U0CL0AS3V&gt;'s code) for a project. Each page init is `Task PageLoadError Model`.  I have a page with a Model that has 6 parts now, so I've exceeded the `Task.map*` limits.  In this case, I have only one real Task (fetching some data on load), and all the others are just `Task.succeed`.  How can I get around this?  Can I `map` the one `Task` into a partially created model?</text>
  </message>
  <message>
    <ts>2017-07-21T17:46:24.176207</ts>
    <user>U13H7FNDQ</user>
    <text>```
thatTaskYouNeed
  |&amp;gt; Task.andThen (\answer -&amp;gt; Model a b c d answer f g h i j)
```</text>
  </message>
  <message>
    <ts>2017-07-21T17:46:55.185550</ts>
    <user>U13H7FNDQ</user>
    <text>And ideally the function to create the model is broken out into a separate helper</text>
  </message>
  <message>
    <ts>2017-07-21T17:47:04.188589</ts>
    <user>U5LFUHH19</user>
    <text>Cool.  Let me try that.  BTW, not trying to be a fan-boy, but thanks very much for Elm.</text>
  </message>
  <message>
    <ts>2017-07-21T17:47:43.200400</ts>
    <user>U13H7FNDQ</user>
    <text>No problem! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T17:49:01.223664</ts>
    <user>U23SA861Y</user>
    <text>I wonder if we are going to see `andMap` appear in the core libs....</text>
  </message>
  <message>
    <ts>2017-07-21T17:55:33.340389</ts>
    <user>U5LFUHH19</user>
    <text>Not that it was ever in doubt, but that worked &lt;@U13H7FNDQ&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T17:55:52.346040</ts>
    <user>U0U6ML22H</user>
    <text>(our company uses Elm for our front-end app, it's going well, so I'm in full fan-boy mode here, me and all my team ^^)</text>
  </message>
  <message>
    <ts>2017-07-21T17:57:04.367014</ts>
    <user>U0U6ML22H</user>
    <text>so grateful for the language and for the community both!</text>
  </message>
  <message>
    <ts>2017-07-21T18:03:10.475388</ts>
    <user>U3SJEDR96</user>
    <text>```
andMap : Task e a -&amp;gt; Task e (a -&amp;gt; b) -&amp;gt; Task e b
andMap =
  Task.map2 (|&amp;gt;)
```</text>
  </message>
  <message>
    <ts>2017-07-21T18:03:26.479827</ts>
    <user>U3SJEDR96</user>
    <text>not sure if that really needs to be in core, tbh</text>
  </message>
  <message>
    <ts>2017-07-21T18:05:18.511212</ts>
    <user>U3SJEDR96</user>
    <text>interestingly, `Task.andMap` existed in 0.17</text>
  </message>
  <message>
    <ts>2017-07-21T18:06:40.532721</ts>
    <user>U23SA861Y</user>
    <text>huh, well there you go</text>
  </message>
  <message>
    <ts>2017-07-21T18:19:27.731157</ts>
    <user>U0CL7EPPG</user>
    <text>Ah that is very good to know I’ll try that out and it might be the least complicated solution. Thanks &lt;@U1SF6G7PA&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T20:29:30.141342</ts>
    <user>U0CL7EPPG</user>
    <text>&lt;@U1SF6G7PA&gt; it says it works with `elm-css` but it doesn’t support arguments so won’t do `elm-css Stylesheets.elm`. Guess I could write my own little binary to run. How have you done it?</text>
  </message>
  <message>
    <ts>2017-07-21T21:29:20.492681</ts>
    <user>U2GPAEU1L</user>
    <text>I have to run, but is it true that if the elm vdom goes from an `a` with an href to *no* href it just leaves it as `href=""`. Ping me if you know</text>
  </message>
  <message>
    <ts>2017-07-21T21:45:20.574690</ts>
    <user>U60SXAF96</user>
    <text>Anyone have guidance on running Elm via Node.js?</text>
  </message>
  <message>
    <ts>2017-07-21T21:48:08.588260</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U60SXAF96&gt; There's no official support yet. But elm-oracle is a package which manages to hack it together. I would suggest taking a look at how they do it perhaps</text>
  </message>
  <message>
    <ts>2017-07-22T02:23:52.605195</ts>
    <user>U0VMVV1DF</user>
    <text>Hi Team, does anyone know how to get an invite to the FP slack?</text>
  </message>
  <message>
    <ts>2017-07-22T02:37:19.644705</ts>
    <user>U3SJEDR96</user>
    <text>Running on node.js is just a matter of having a (preferably thin) entry point in js that requires your elm file, calls `.worker()` on your app, and sets up some ports to communicate with it. I'm not sure I'd call it "hacked together" :/</text>
  </message>
  <message>
    <ts>2017-07-22T03:35:35.816500</ts>
    <user>U14Q8S4EM</user>
    <text>Uh Oh</text>
  </message>
  <message>
    <ts>2017-07-22T03:35:42.816886</ts>
    <user>U14Q8S4EM</user>
    <text>I just got a `NaN` in my code.</text>
  </message>
  <message>
    <ts>2017-07-22T03:43:24.839915</ts>
    <user>U3SJEDR96</user>
    <text>Right, r == g ==  b should be special cased to prevent divide-by-0</text>
  </message>
  <message>
    <ts>2017-07-22T03:43:42.840807</ts>
    <user>U14Q8S4EM</user>
    <text>Ah. I see.</text>
  </message>
  <message>
    <ts>2017-07-22T03:43:51.841255</ts>
    <user>U14Q8S4EM</user>
    <text>Yeah just realized it can come from `0 / 0`</text>
  </message>
  <message>
    <ts>2017-07-22T03:44:21.842921</ts>
    <user>U14Q8S4EM</user>
    <text>Dang! For a second I thought I found some bug in Elm itself.</text>
  </message>
  <message>
    <ts>2017-07-22T03:44:26.843183</ts>
    <user>U14Q8S4EM</user>
    <text>Would have been a real easter egg.</text>
  </message>
  <message>
    <ts>2017-07-22T04:12:28.937935</ts>
    <user>U0VMVV1DF</user>
    <text>&lt;http://fpchat-invite.herokuapp.com|fpchat-invite.herokuapp.com&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T04:14:18.943501</ts>
    <user>U3SJEDR96</user>
    <text>I had no idea there was a thing like "the FP slack" :smile:</text>
  </message>
  <message>
    <ts>2017-07-22T05:46:40.244515</ts>
    <user>U57KYFW67</user>
    <text>I found a quirk in the error message reporting. I don't know if it's worth reporting or not:</text>
  </message>
  <message>
    <ts>2017-07-22T05:46:44.244725</ts>
    <user>U57KYFW67</user>
    <text>```
module Test exposing (..)

f : Int 
f = ( 
```</text>
  </message>
  <message>
    <ts>2017-07-22T05:47:25.246763</ts>
    <user>U57KYFW67</user>
    <text>This (broken) program doesn't list the line number of the error. However, removing the `exposing (..)` clause or.... the type annotation(?) causes the line number to be reported properly</text>
  </message>
  <message>
    <ts>2017-07-22T05:47:44.247705</ts>
    <user>U57KYFW67</user>
    <text>Could potentially be hard to track down in a large file.</text>
  </message>
  <message>
    <ts>2017-07-22T05:49:32.253075</ts>
    <user>U3SJEDR96</user>
    <text>weird, it actually does _know_ the place (as evidenced by using `--report=json`)</text>
  </message>
  <message>
    <ts>2017-07-22T06:59:17.472199</ts>
    <user>U2Q5GJNTB</user>
    <text>I have a simple form with numeric input  that is allowed to be empty initially. Thus I represented that as “Maybe Float”. However when I added validations add added Result String Float to the mix, to be able to show errors to the user. Now I have “Maybe (Result String Float)“. Is there a simpler more idiomatic way to do this, or is this the common way to have potential absence and validation for one field/value?</text>
  </message>
  <message>
    <ts>2017-07-22T08:57:54.874849</ts>
    <user>U3RDE7LDP</user>
    <text>&lt;@U2Q5GJNTB&gt; I would keep the errors separate from the form fields in your model. Do you want to validate the value incrementally or just when the form is submitted?</text>
  </message>
  <message>
    <ts>2017-07-22T09:01:24.890577</ts>
    <user>U3RDE7LDP</user>
    <text>If the latter, I would just make the field a string and if it fails to parse, add an error to your model. If you want to check it's valid as it's entered, you can do the same when you process the message which corresponds to input for the field. I've generally been following the pattern in the elm-spa-example, like this &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Page/Login.elm#L102&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T09:24:42.985878</ts>
    <user>U2LAL86AY</user>
    <text>i would like to understand how this 2 ideas are influencing one another.
Tony Hoare said that `null` was the biggest mistake / the billion dollar mistake - or something.
Then in elm we don't have optional arguments to functions.. it won't compile.

I'm interested to know if is possible to provide optional arguments to functions - `js style` - without neding this `null` idea. Are `we forced` between either using `null` or having no positility for `optional arguments`?</text>
  </message>
  <message>
    <ts>2017-07-22T09:25:39.989836</ts>
    <user>U2LAL86AY</user>
    <text>`null` or `nil`or whatever other equivalent  - the null idea in general i mean</text>
  </message>
  <message>
    <ts>2017-07-22T09:31:08.012291</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U2LAL86AY&gt; 'optional arguments' can mean many things, what are you referring to specifically</text>
  </message>
  <message>
    <ts>2017-07-22T09:32:01.015939</ts>
    <user>U1CE9DL9H</user>
    <text>elm typically uses records (e.g. `defaultOptions`) to handle such cases</text>
  </message>
  <message>
    <ts>2017-07-22T09:32:52.019452</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U153UK3FA&gt;  say i have a function that can take 4 arguments - but is ok, it works  if i give it only one. It will work because the other 3 have default behavior. in elm you need to put all 4 of them.</text>
  </message>
  <message>
    <ts>2017-07-22T09:33:52.023624</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U1CE9DL9H&gt; yeah i know but this is more broad. I'm trying to understand if how are they connected. 

Was null invented because is needed in optional arguments?</text>
  </message>
  <message>
    <ts>2017-07-22T09:35:56.032205</ts>
    <user>U1CE9DL9H</user>
    <text>not sure on my history here, but null pointers seem "natural", because you need a default value for a pointer. the languages at the time weren't clever enough to support static checking of validity here (like rust does)</text>
  </message>
  <message>
    <ts>2017-07-22T09:35:56.032209</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U2LAL86AY&gt; so you mean being able to pass Null for the other 3 args?</text>
  </message>
  <message>
    <ts>2017-07-22T09:36:43.035684</ts>
    <user>U2LAL86AY</user>
    <text>hmm maybe i'm wrong about this, but i thing if you don't pass an argument is null by default.</text>
  </message>
  <message>
    <ts>2017-07-22T09:37:02.036910</ts>
    <user>U1CE9DL9H</user>
    <text>in javascript?</text>
  </message>
  <message>
    <ts>2017-07-22T09:37:05.037150</ts>
    <user>U2LAL86AY</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-07-22T09:37:14.037683</ts>
    <user>U153UK3FA</user>
    <text>In JS args are undefined by default</text>
  </message>
  <message>
    <ts>2017-07-22T09:37:37.039279</ts>
    <user>U2LAL86AY</user>
    <text>ok then my mistake.</text>
  </message>
  <message>
    <ts>2017-07-22T09:37:40.039470</ts>
    <user>U3SJEDR96</user>
    <text>The "issue" here is that Elm is curried. Every function takes exactly 1 param.</text>
  </message>
  <message>
    <ts>2017-07-22T09:38:04.041100</ts>
    <user>U1CE9DL9H</user>
    <text>I see no issue, the JS way has always seemed wrong to me</text>
  </message>
  <message>
    <ts>2017-07-22T09:39:31.047152</ts>
    <user>U4872964V</user>
    <text>To me it always feels that you have built to much logic into a single function if you need default arguments</text>
  </message>
  <message>
    <ts>2017-07-22T09:39:41.047824</ts>
    <user>U3SJEDR96</user>
    <text>Hence the quotation marks. It's not an issue at all; but it sort of prevents to option of having optional arguments. Don't get me wrong, I love my curried functions, and optional params are simply a different paradigm, but I think that currying is more relevant to this discussion than having or not having `null`</text>
  </message>
  <message>
    <ts>2017-07-22T09:40:10.049850</ts>
    <user>U4872964V</user>
    <text>or, maybe not too much logic, but _too general_</text>
  </message>
  <message>
    <ts>2017-07-22T09:40:21.050736</ts>
    <user>U153UK3FA</user>
    <text>Yep, default values for args to a function indicate that you have multiple functions you're trying to pretend are one</text>
  </message>
  <message>
    <ts>2017-07-22T09:41:46.056592</ts>
    <user>U153UK3FA</user>
    <text>Python has a huge number of such APIs and they're really scary</text>
  </message>
  <message>
    <ts>2017-07-22T09:42:50.061010</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; that literally what they are. They're not `null`, they're `undefined` which is a separate concept.</text>
  </message>
  <message>
    <ts>2017-07-22T09:43:56.065579</ts>
    <user>U2LAL86AY</user>
    <text>true that, was just my confusion -getting the best of me :smile:.</text>
  </message>
  <message>
    <ts>2017-07-22T09:44:40.069002</ts>
    <user>U4872964V</user>
    <text>So, let’s take an example, the `slice` function. In Elm it can’t take default values, so instead we have other functions `left` and `right`.</text>
  </message>
  <message>
    <ts>2017-07-22T09:45:28.072675</ts>
    <user>U4872964V</user>
    <text>and `dropLeft` and `dropRight`</text>
  </message>
  <message>
    <ts>2017-07-22T10:02:52.149514</ts>
    <user>U0VQB2TC7</user>
    <text>Does anyone know if there are any plans to make"debug" as a browser extension? Since m most of the times we are interested to investigate states that happen in production, where the app is running in production mode.</text>
  </message>
  <message>
    <ts>2017-07-22T10:02:54.149701</ts>
    <user>U2Q5GJNTB</user>
    <text>&lt;@U3RDE7LDP&gt; thanks . I will give it a try </text>
  </message>
  <message>
    <ts>2017-07-22T10:05:24.161487</ts>
    <user>U0VQB2TC7</user>
    <text>Does anyone know if there are any plans to make"debug" as a browser extension? Since m most of the times we are interested to investigate states that happen in production, where the app is running in production mode.</text>
  </message>
  <message>
    <ts>2017-07-22T10:19:00.224265</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0VQB2TC7&gt; Not really, and I think your premise isn't really correct either. Have you ran into a situation where you wished you could enable the debugger, in production?</text>
  </message>
  <message>
    <ts>2017-07-22T10:19:11.225258</ts>
    <user>U3SJEDR96</user>
    <text>- with Elm</text>
  </message>
  <message>
    <ts>2017-07-22T10:19:53.228376</ts>
    <user>U0VQB2TC7</user>
    <text>No to enable the debugger, but be able to reproduce a state that happened in production</text>
  </message>
  <message>
    <ts>2017-07-22T10:19:57.228705</ts>
    <user>U52GHJJTU</user>
    <text>I guess being able to record the Msgs would be useful in production, to reproduce bugs</text>
  </message>
  <message>
    <ts>2017-07-22T10:22:08.238628</ts>
    <user>U0VQB2TC7</user>
    <text>The crucial point of time traveling debugger is to be able to reproduce a state. But how can I reproduce a state that happened to a client in production?</text>
  </message>
  <message>
    <ts>2017-07-22T10:22:25.239934</ts>
    <user>U5J0H2NS2</user>
    <text>&lt;@U2LAL86AY&gt; I think Maybe can be used everywhere where you feel a null would be useful.  At our company we have a custom Maybe in C#, which some of us are using everywhere, where a method can not always return with a valid value. I think in OO languages nullptr could be (should be) replaced by some optional type.</text>
  </message>
  <message>
    <ts>2017-07-22T10:25:55.256375</ts>
    <user>U3SJEDR96</user>
    <text>It's fairly trivial to push every msg and state into a port and send get access to that. You could build a "report an error" type thing that would simply push that whole tree to a remote server, too</text>
  </message>
  <message>
    <ts>2017-07-22T10:27:03.261679</ts>
    <user>U0VQB2TC7</user>
    <text>That can be done, of course. What is left is to know the JSON format of the debugger...</text>
  </message>
  <message>
    <ts>2017-07-22T10:27:17.262827</ts>
    <user>U3SJEDR96</user>
    <text>"debugging in production" is a bit of a last resort, though</text>
  </message>
  <message>
    <ts>2017-07-22T10:27:50.265268</ts>
    <user>U0VQB2TC7</user>
    <text>I wasn't talking about debugging in production :simple_smile: </text>
  </message>
  <message>
    <ts>2017-07-22T10:28:09.266924</ts>
    <user>U0VQB2TC7</user>
    <text>Just to be able to send the states to the support</text>
  </message>
  <message>
    <ts>2017-07-22T10:29:00.270908</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U5J0H2NS2&gt; yep, i don't feel the need to use null that much. I know about maybes they are better indeed. I thought null is required if you want to have optional arguments as a feature in a programming language - but as &lt;@U153UK3FA&gt; pointed out - they are not related. my mistake..</text>
  </message>
  <message>
    <ts>2017-07-22T10:29:51.274824</ts>
    <user>U0VQB2TC7</user>
    <text>But again - this seems like reimplementing of what debugger does for us - gathering the state history and saving it in specific fornat</text>
  </message>
  <message>
    <ts>2017-07-22T10:29:53.274953</ts>
    <user>U3SJEDR96</user>
    <text>Sorry, that was my assumption based on asking for a browser extension :slightly_smiling_face: So yeah, sending states to support is fairly trivial; making something to import that stream of messages and replay them locally is also pretty straightforward. Matching the exact format of the regular debugger is a little tougher, but still doable</text>
  </message>
  <message>
    <ts>2017-07-22T10:30:24.278125</ts>
    <user>U0VQB2TC7</user>
    <text>But again - this seems like reimplementing of what debugger does for us - gathering the state history and saving it in specific fornat</text>
  </message>
  <message>
    <ts>2017-07-22T10:30:45.279863</ts>
    <user>U3SJEDR96</user>
    <text>No need to repeat yourself, I read up after posting :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-22T10:30:56.280751</ts>
    <user>U0VQB2TC7</user>
    <text>:relaxed: </text>
  </message>
  <message>
    <ts>2017-07-22T10:31:23.282953</ts>
    <user>U0VQB2TC7</user>
    <text>I often miss the messages coming in as I type, sorry</text>
  </message>
  <message>
    <ts>2017-07-22T10:31:52.285144</ts>
    <user>U3SJEDR96</user>
    <text>And it's perhaps similar; but the debugger is made for debugging, in development mode; in production you need your own solution which can differ wildly depending on what type of support you offer, and how you wish to offer it</text>
  </message>
  <message>
    <ts>2017-07-22T10:34:16.296156</ts>
    <user>U0VQB2TC7</user>
    <text>Saving the history in the format of the debugger is very helpful, since it can be played locally. Otherwise we should implement replaying ourselves - the question I asked yesterday :wink: </text>
  </message>
  <message>
    <ts>2017-07-22T10:35:06.299956</ts>
    <user>U0VQB2TC7</user>
    <text>&lt;@U3SJEDR96&gt; thank you very much for the quick and helpful responses!!!</text>
  </message>
  <message>
    <ts>2017-07-22T10:35:52.303718</ts>
    <user>U3SJEDR96</user>
    <text>Right, I'm not sure if you actually got a response to that, yesterday? Replaying is pretty easy, though</text>
  </message>
  <message>
    <ts>2017-07-22T10:37:35.311767</ts>
    <user>U0VQB2TC7</user>
    <text>Another question - do we know the size of the Elm community? In my company one of the main reasons they don't want to try out Elm is the small community</text>
  </message>
  <message>
    <ts>2017-07-22T10:37:55.313133</ts>
    <user>U0VQB2TC7</user>
    <text>I did get the answer yesterday, thanks! :grinning: </text>
  </message>
  <message>
    <ts>2017-07-22T10:40:32.325151</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0JUBLV8F&gt; made a bunch of interesting studies and shows them here: &lt;https://www.youtube.com/watch?v=BAtql6ZbvpU&amp;amp;t=1519s&gt;
He knows more about this i guess</text>
  </message>
  <message>
    <ts>2017-07-22T10:40:35.325408</ts>
    <user>U3SJEDR96</user>
    <text>almost 10k registered slack users,  many many companies using it in production, including a few big-name companies like Adobe, MS and mozilla</text>
  </message>
  <message>
    <ts>2017-07-22T10:41:40.330395</ts>
    <user>U0VQB2TC7</user>
    <text>Great insight! Can I find about big companies using Elm online?</text>
  </message>
  <message>
    <ts>2017-07-22T10:44:10.341660</ts>
    <user>U3SJEDR96</user>
    <text>I hope your company isn't basing what to do on "how do big companies do things"... Because it really doesn't matter, as anything but "a datapoint to be aware of". I would recommend watching Brian's State of Elm presentation linked above; and hanging around on Slack :wink:</text>
  </message>
  <message>
    <ts>2017-07-22T10:44:26.342928</ts>
    <user>U3SJEDR96</user>
    <text>the Elm homepage also lists some companies</text>
  </message>
  <message>
    <ts>2017-07-22T10:44:48.344484</ts>
    <user>U3SJEDR96</user>
    <text>There's also this outdated list: &lt;https://github.com/lpil/elm-companies&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T10:45:10.346487</ts>
    <user>U3SJEDR96</user>
    <text>and then there's a whole big bunch of companies who don't feel like they have to write a blogpost whenever they try out some new tech :wink:</text>
  </message>
  <message>
    <ts>2017-07-22T10:45:19.347364</ts>
    <user>U3SJEDR96</user>
    <text>(or who are too busy making software)</text>
  </message>
  <message>
    <ts>2017-07-22T10:46:03.350879</ts>
    <user>U2LAL86AY</user>
    <text>no i guess we need an official page specifically designed for this reason</text>
  </message>
  <message>
    <ts>2017-07-22T10:46:39.353631</ts>
    <user>U2LAL86AY</user>
    <text>the easiest way to start is to build a slack channel :smile:</text>
  </message>
  <message>
    <ts>2017-07-22T10:47:01.355239</ts>
    <user>U2LAL86AY</user>
    <text>#we--are-using-elm</text>
  </message>
  <message>
    <ts>2017-07-22T10:47:07.355789</ts>
    <user>U2LAL86AY</user>
    <text>bad name</text>
  </message>
  <message>
    <ts>2017-07-22T10:47:17.356596</ts>
    <user>U0VQB2TC7</user>
    <text>That is exactly my thought! I was pretty surprised that small community was such a heavy point. They also searched Stack Overflow and didn't find anything. Also google trends...</text>
  </message>
  <message>
    <ts>2017-07-22T10:50:07.370259</ts>
    <user>U2LAL86AY</user>
    <text>983

questions tagged - with elm in stack overflow</text>
  </message>
  <message>
    <ts>2017-07-22T10:50:51.374139</ts>
    <user>U3SJEDR96</user>
    <text>There's also the Elm reddit, the `elm-discuss` mailing list, and 3 elm-only conferences in the past 12 months</text>
  </message>
  <message>
    <ts>2017-07-22T10:50:58.374747</ts>
    <user>U3SJEDR96</user>
    <text>which is 3 more than the year before :wink:</text>
  </message>
  <message>
    <ts>2017-07-22T10:52:04.379716</ts>
    <user>U3SJEDR96</user>
    <text>(I couldn't resist and threw together a "replay messages POC" - &lt;https://ellie-app.com/3PpG8HZs7BMa1/0&gt; )</text>
  </message>
  <message>
    <ts>2017-07-22T10:54:27.390759</ts>
    <user>U0VQB2TC7</user>
    <text>:grinning: </text>
  </message>
  <message>
    <ts>2017-07-22T10:54:36.391389</ts>
    <user>U3SJEDR96</user>
    <text>Note that it intentionally drops messages resulting from a replayed message; which means no HTTP requests are triggered, no ports are called, etc. However, if those commands result in a message, that message would be included so that sort of a moot point anyway</text>
  </message>
  <message>
    <ts>2017-07-22T10:59:18.413467</ts>
    <user>U0VQB2TC7</user>
    <text>Ok</text>
  </message>
  <message>
    <ts>2017-07-22T11:06:16.449934</ts>
    <user>U3SJEDR96</user>
    <text>instant replay! &lt;https://ellie-app.com/3PpG8HZs7BMa1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T11:26:20.548483</ts>
    <user>U2LAL86AY</user>
    <text>crazy stuff :smile: i will use this for my bot</text>
  </message>
  <message>
    <ts>2017-07-22T12:36:01.905186</ts>
    <user>U5ZC6V535</user>
    <text>Hi, I am trying to do a simulation using Elm (graphics package for canvas) and so far I have a moving object (boid) on the screen. The movement direction works alright until i start rotating the object. In JS i would have push+pop the matrix to avoid this but I am not sure how to do this in Elm. Can someone help with this? I have submitted my code here: &lt;https://github.com/stelioskiayias/elm-boids&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T13:14:18.095224</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U5ZC6V535&gt; push/pop as in removing an element from an array/matrix and then adding it back?</text>
  </message>
  <message>
    <ts>2017-07-22T13:17:42.112149</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U1CE9DL9H&gt; Yeah, I think so. So getting it off the global transformation matrix, rotating it and then putting it back with the rotated state without affecting the global matrix state</text>
  </message>
  <message>
    <ts>2017-07-22T13:19:46.122025</ts>
    <user>U1CE9DL9H</user>
    <text>so, you have a global transformation matrix, and then each object has a matrix of its own. the object matrix can be modified (e.g. to rotate) and you're not sure how to make all of this fit together?</text>
  </message>
  <message>
    <ts>2017-07-22T13:20:59.127818</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U1CE9DL9H&gt; Yes (roughly). I did this before by doing something like push to matrix, then rotate the object and then pop</text>
  </message>
  <message>
    <ts>2017-07-22T13:23:29.139746</ts>
    <user>U1CE9DL9H</user>
    <text>so, your model only has a boid (location, rotation) and a 2d location. that looks like one "local" matrix build up from those three values. am I missing something there?</text>
  </message>
  <message>
    <ts>2017-07-22T13:25:52.150855</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U1CE9DL9H&gt; Yes, the main issue is the fact that the transformation matrix is not part of a model/type/etc. it is part of the canvas so when i do something like rotate boid, that changes the global canvas transformation behind the since. Then every other transformation is going to be offset by how much I have rotated one of the elements. So rotate object A one by 30 degrees and then rotate another object by 30 it will actually be rotated by 60 because transformation accumulate.</text>
  </message>
  <message>
    <ts>2017-07-22T13:27:31.158615</ts>
    <user>U1CE9DL9H</user>
    <text>I think that's your problem: having state that lives outside of the model makes elm unhappy. Can you put it into the model (even if it just mirrors the external state)?</text>
  </message>
  <message>
    <ts>2017-07-22T13:29:33.167881</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U1CE9DL9H&gt; Yeah but you can’t control that state, it is part of the canvas. You can’t put it in a state an control it. The only way is that when you want to perform a “transformation” is to control the state through the canvas. Here’s an example &lt;https://html5.litten.com/understanding-save-and-restore-for-the-canvas-context/&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T13:31:45.178797</ts>
    <user>U1CE9DL9H</user>
    <text>yes, but can't you store the offset, mirroring the external state in your model ?</text>
  </message>
  <message>
    <ts>2017-07-22T13:34:10.190437</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U3SJEDR96&gt; I went a little crazy: &lt;https://ellie-app.com/3Ps8DdvxF5na1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T13:35:08.195330</ts>
    <user>U5ZC6V535</user>
    <text>Not really, that will be really tough and I don’t think it is correct to do so. There are far too many transformations that I will make it unennecesairly difficult. Maybe I am missing something from the elm-graphics packages. :disappointed: :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-22T13:37:34.207029</ts>
    <user>U1CE9DL9H</user>
    <text>well maybe you can use a port to read that state in?</text>
  </message>
  <message>
    <ts>2017-07-22T13:41:44.226640</ts>
    <user>U5ZC6V535</user>
    <text>Yeah, but it seems like there must be a simpler solution</text>
  </message>
  <message>
    <ts>2017-07-22T13:53:28.283988</ts>
    <user>U1CE9DL9H</user>
    <text>the simple (though not necessarily easy) solution is to replicate the state on the elm side, either through interaction with js, or simulating the canvas state. It seems that the canvas package wasn't developed far enough to include this sort of thing, so you'll have to do some of that work yourself</text>
  </message>
  <message>
    <ts>2017-07-22T13:58:07.305693</ts>
    <user>U5ZC6V535</user>
    <text>Yeah..</text>
  </message>
  <message>
    <ts>2017-07-22T14:11:41.373686</ts>
    <user>U2LAL86AY</user>
    <text>:aw_yeah:</text>
  </message>
  <message>
    <ts>2017-07-22T14:31:01.462165</ts>
    <user>U4KFY2V6V</user>
    <text>I'd like to have a discussion about elm and libraries being stack safe. A recursive function can potentially crash if there is no tail call optimization. There is an argument that stack safe implementations could be slower. My personal opinion is that potential runtime errors are worse.. 1000x. I'm happy to have input, opinions and perhaps information or pull requests regarding this topic :)</text>
  </message>
  <message>
    <ts>2017-07-22T14:45:01.525403</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U4KFY2V6V&gt; sure. That's why we try to make everything stacksafe, and if you run into an error due to the stack overflowing, you should definitely log an issue.</text>
  </message>
  <message>
    <ts>2017-07-22T15:03:45.615289</ts>
    <user>U0CL0AS3V</user>
    <text>I generally default to stack safe, but I think it's reasonable to make the other choice if it benchmarks better and that matters more for the library in question.</text>
  </message>
  <message>
    <ts>2017-07-22T15:04:54.620661</ts>
    <user>U0CL0AS3V</user>
    <text>deep enough recursion to blow the stack can be rare enough to be irrelevant for plenty of libraries</text>
  </message>
  <message>
    <ts>2017-07-22T16:23:55.976073</ts>
    <user>U2H92KKEY</user>
    <text>What JS data type can you pass into a subscription that will be received as a tuple?</text>
  </message>
  <message>
    <ts>2017-07-22T16:34:28.021218</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U2H92KKEY&gt; just an array</text>
  </message>
  <message>
    <ts>2017-07-22T16:35:28.025440</ts>
    <user>U1G51S63S</user>
    <text>See `Customs and Border Protection` here &lt;https://guide.elm-lang.org/interop/javascript.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T16:36:21.029053</ts>
    <user>U2H92KKEY</user>
    <text>&lt;@U1G51S63S&gt; Thanks. It seems Native modules are treated differently.</text>
  </message>
  <message>
    <ts>2017-07-22T16:37:15.032754</ts>
    <user>U1G51S63S</user>
    <text>ah, you talking about Native?</text>
  </message>
  <message>
    <ts>2017-07-22T16:37:22.033140</ts>
    <user>U2H92KKEY</user>
    <text>```
...
return callback(_elm_lang$core$Native_Scheduler.succeed( ["Tuple", "Test"]);
....
```
returns this in my elm model
```
{ 0 = "Tuple", 1 = "Test" }
```
Edit: Here is the right answer! Found it.
```
{ctor: '_Tuple2', _0: 'Tuple, _1: 'Test'} == ("Tuple", "Test")
```</text>
  </message>
  <message>
    <ts>2017-07-22T16:38:07.036318</ts>
    <user>U2H92KKEY</user>
    <text>Yeah, native was the real meat of the matter, but I was curious if subscriptions acted differently, which it seems they do.</text>
  </message>
  <message>
    <ts>2017-07-22T16:42:57.056433</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U2H92KKEY&gt; really not sure, but maybe try `_elm_lang$core$Native_Utils.Tuple2(a, b)` for example</text>
  </message>
  <message>
    <ts>2017-07-22T16:43:27.058401</ts>
    <user>U2H92KKEY</user>
    <text>literally looking at that right now as well :slightly_smiling_face: Thanks!</text>
  </message>
  <message>
    <ts>2017-07-22T16:43:33.058772</ts>
    <user>U4872964V</user>
    <text>subscriptions are part of Elm, native is just an implementation detail</text>
  </message>
  <message>
    <ts>2017-07-22T16:44:44.063412</ts>
    <user>U2H92KKEY</user>
    <text>native is a part of Elm too :wink:</text>
  </message>
  <message>
    <ts>2017-07-22T16:45:31.066755</ts>
    <user>U4872964V</user>
    <text>it’s part of the implementation, but not the language, if that makes sense</text>
  </message>
  <message>
    <ts>2017-07-22T16:46:01.068628</ts>
    <user>U2H92KKEY</user>
    <text>indeed</text>
  </message>
  <message>
    <ts>2017-07-22T16:46:36.071129</ts>
    <user>U4872964V</user>
    <text>you can use native in your Elm code, for sure, but then you are not really using Elm</text>
  </message>
  <message>
    <ts>2017-07-22T16:46:41.071489</ts>
    <user>U2H92KKEY</user>
    <text>regardless, we are building our own Native modules for our platform, to interop with a very tricky system</text>
  </message>
  <message>
    <ts>2017-07-22T16:46:54.072474</ts>
    <user>U2H92KKEY</user>
    <text>because using pure ports/subs would be abominable for our use case</text>
  </message>
  <message>
    <ts>2017-07-22T16:47:37.075550</ts>
    <user>U2H92KKEY</user>
    <text>there is a risk, obviously, when writing your own native modules, but we are  doing it precisely so we CAN use more Elm, and less javascript</text>
  </message>
  <message>
    <ts>2017-07-22T16:47:56.076879</ts>
    <user>U2H92KKEY</user>
    <text>we are wrapping a JS library, and being able to use more Elm :wink:</text>
  </message>
  <message>
    <ts>2017-07-22T16:48:31.079196</ts>
    <user>U2H92KKEY</user>
    <text>we have a lot of try/catches, and tasks, and results, and what not</text>
  </message>
  <message>
    <ts>2017-07-22T16:48:36.079566</ts>
    <user>U2H92KKEY</user>
    <text>so we’re being pretty safe with it all</text>
  </message>
  <message>
    <ts>2017-07-22T16:49:04.081511</ts>
    <user>U4872964V</user>
    <text>well, I don’t know about your interop of course, but it would be interesting to hear why ports are out. You can implement a lot by adapting a client-server architecture between Elm and JS through ports.</text>
  </message>
  <message>
    <ts>2017-07-22T16:49:58.085070</ts>
    <user>U4KFY2V6V</user>
    <text>&lt;@U3SJEDR96&gt; &lt;@U0CL0AS3V&gt; Thanks for the answers. There is currently discussion and some issues in the case of List-Extra. Very interesting. If you want to discuss a specific example you can have a look into it.</text>
  </message>
  <message>
    <ts>2017-07-22T16:50:22.086860</ts>
    <user>U4872964V</user>
    <text>&lt;@U2H92KKEY&gt; I’m not saying you can’t use native/kernel of course. It’s your code, you can do what you want :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-22T16:50:40.088075</ts>
    <user>U4KFY2V6V</user>
    <text>&lt;https://github.com/elm-community/list-extra/issues/61&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T16:51:10.090076</ts>
    <user>U4KFY2V6V</user>
    <text>But I'm generally interested in how it's handled, especially in the elm world :)</text>
  </message>
  <message>
    <ts>2017-07-22T16:53:32.100021</ts>
    <user>U2H92KKEY</user>
    <text>We’ll announce what we’re doing at some point &lt;@U4872964V&gt;. I think a lot of community members will be very intrigued. Even though our library won’t be available on elm-packages, we believe it will be immensely useful to a particular industry and subset of developers.</text>
  </message>
  <message>
    <ts>2017-07-22T17:19:00.204735</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2H92KKEY&gt; Please do not discuss native modules in here. Take it to the &lt;#C2QPJLU2X|elm-discuss&gt; instead.</text>
  </message>
  <message>
    <ts>2017-07-22T17:19:24.206362</ts>
    <user>U2H92KKEY</user>
    <text>noted, my apologies</text>
  </message>
  <message>
    <ts>2017-07-22T18:21:39.440299</ts>
    <user>U5Z5VH0Q5</user>
    <text>&lt;@U2H92KKEY&gt; automotive?</text>
  </message>
  <message>
    <ts>2017-07-22T19:37:01.696601</ts>
    <user>U5YDC1YUW</user>
    <text>Is there a way to easily chunk a list in Elm? e.g. chunk by two: `[1, 2, 3, 4, 5, 6] -&amp;gt; [[1, 2], [3, 4], [5, 6]]`</text>
  </message>
  <message>
    <ts>2017-07-22T19:43:07.715243</ts>
    <user>U5YDC1YUW</user>
    <text>ah looks like `groupsOf` from &lt;http://package.elm-lang.org/packages/elm-community/list-extra/6.1.0/List-Extra&gt; would do the trick ^</text>
  </message>
  <message>
    <ts>2017-07-22T20:42:13.906431</ts>
    <user>U17P7CBFB</user>
    <text>I have an update function with 13*5 cases, and it's not done growing yet. Many cases should either be unreachable, or do the same thing. How do you make something like this readable?</text>
  </message>
  <message>
    <ts>2017-07-22T20:43:37.910836</ts>
    <user>U17P7CBFB</user>
    <text>unreachable because in each state, I only add a subset of the possible message types in the view</text>
  </message>
  <message>
    <ts>2017-07-22T20:57:05.951180</ts>
    <user>U0J1M0F32</user>
    <text>65 cases &lt;@U17P7CBFB&gt; ? That is a lot. Hrmm. I've never dealt with that many, but I've had good luck breaking larger single case update function into sub update functions along domain lines.</text>
  </message>
  <message>
    <ts>2017-07-22T21:30:11.054692</ts>
    <user>U14Q8S4EM</user>
    <text>But certainly by “unreachable”, you dont mean “never used”, right &lt;@U17P7CBFB&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-22T21:30:31.055944</ts>
    <user>U14Q8S4EM</user>
    <text>That is a lot. Maybe theres something else you could be doing architecturally to avoid having so many.</text>
  </message>
  <message>
    <ts>2017-07-22T21:32:11.061162</ts>
    <user>U14Q8S4EM</user>
    <text>In my applications, I likely will have more than 65 things that happen, but they are subdivided into several smaller parts.</text>
  </message>
  <message>
    <ts>2017-07-22T21:32:30.062087</ts>
    <user>U14Q8S4EM</user>
    <text>If you share youre code I could look at it and give you feedback, if thats welcome.</text>
  </message>
  <message>
    <ts>2017-07-22T22:55:01.312121</ts>
    <user>U60SXAF96</user>
    <text>This is entirely a shot in the dark. Are you using `Cmd` when you should be using `Task`? Someone pointed that out to me last week, and it made a world of difference for my update function.</text>
  </message>
  <message>
    <ts>2017-07-22T23:24:43.398261</ts>
    <user>U0CL7EPPG</user>
    <text>I ended up writing a small executable so it could be run as a single command:
```
#!/usr/bin/env sh
elm-css Stylesheets.elm
```</text>
  </message>
  <message>
    <ts>2017-07-23T00:01:01.500829</ts>
    <user>U153UK3FA</user>
    <text>Is there something particular about it that makes you feel like it's not readable? </text>
  </message>
  <message>
    <ts>2017-07-23T02:10:34.845794</ts>
    <user>U24HQ3RJ7</user>
    <text>hi.. I have a question ..
In project structure, View.elm and Update.elm will need Message.elm and Model.elm ( non-trivial cases..) :slightly_smiling_face:
But if we need to .. should Model.elm import Message.elm Or Message.elm import Model.elm ? What is the hierarchy of files ?</text>
  </message>
  <message>
    <ts>2017-07-23T02:14:18.855215</ts>
    <user>U24HQ3RJ7</user>
    <text>its like i have some subparts of Model and i would like to send them in messages..
like `type alias Msg = NewActivity Name Description Quadrant`.. in `Message.elm`
`Name, Description, Quadrant` are defined in `Model.elm`.. 
Then i should be importing Model.elm in Message.elm..  right ?</text>
  </message>
  <message>
    <ts>2017-07-23T02:15:09.857459</ts>
    <user>U23SA861Y</user>
    <text>so only break it up like that if they are getting too big</text>
  </message>
  <message>
    <ts>2017-07-23T02:15:48.859398</ts>
    <user>U23SA861Y</user>
    <text>Where big has a different definition from OO.</text>
  </message>
  <message>
    <ts>2017-07-23T02:16:09.860539</ts>
    <user>U23SA861Y</user>
    <text>but generally shared types would be imported by both</text>
  </message>
  <message>
    <ts>2017-07-23T02:16:49.862166</ts>
    <user>U24HQ3RJ7</user>
    <text>so.. i should be creating separate file.. like AllTypes.elm.. :slightly_smiling_face: if Model.elm is big..</text>
  </message>
  <message>
    <ts>2017-07-23T02:18:28.866760</ts>
    <user>U14Q8S4EM</user>
    <text>Thats sort of like what I do. I usually have a folder called `Main` that contains `Model.elm` and `Message.elm`.</text>
  </message>
  <message>
    <ts>2017-07-23T02:18:52.867762</ts>
    <user>U14Q8S4EM</user>
    <text>Then from there, Ill either have a folder called `Types` that contains all sorts of files, or I will have files called `Types.elm` in various folders.</text>
  </message>
  <message>
    <ts>2017-07-23T02:18:53.867777</ts>
    <user>U23SA861Y</user>
    <text>Just make sure the abstraction makes sense</text>
  </message>
  <message>
    <ts>2017-07-23T02:19:34.869573</ts>
    <user>U23SA861Y</user>
    <text>If you are creating a whole boat load of derived types, you probably have a bunch of functions to go with them. In which case thats the line you cut along</text>
  </message>
  <message>
    <ts>2017-07-23T02:19:51.870270</ts>
    <user>U14Q8S4EM</user>
    <text>Yeah, I know I am an outlier on this. I break files into tiny pieces. I dont know how you all manage super big files tbh.</text>
  </message>
  <message>
    <ts>2017-07-23T02:20:12.871358</ts>
    <user>U23SA861Y</user>
    <text>easy when there are no side effects</text>
  </message>
  <message>
    <ts>2017-07-23T02:20:43.872878</ts>
    <user>U23SA861Y</user>
    <text>the only context you ever need to keep in your head is the length of a function</text>
  </message>
  <message>
    <ts>2017-07-23T02:21:11.873999</ts>
    <user>U23SA861Y</user>
    <text>even shorter if you don't have any let blocks</text>
  </message>
  <message>
    <ts>2017-07-23T02:23:18.879287</ts>
    <user>U23SA861Y</user>
    <text>With stateful languages the size of the context is huge, so it gets combatted by keeping structures and files small</text>
  </message>
  <message>
    <ts>2017-07-23T02:23:47.880526</ts>
    <user>U23SA861Y</user>
    <text>with functional languages the compiler ensures that the context is declared</text>
  </message>
  <message>
    <ts>2017-07-23T02:26:19.887709</ts>
    <user>U23SA861Y</user>
    <text>&lt;http://www.bopsecrets.org/gateway/passages/chuang-tzu.htm&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T02:26:32.888270</ts>
    <user>U23SA861Y</user>
    <text>slicing code is similar</text>
  </message>
  <message>
    <ts>2017-07-23T02:32:37.904233</ts>
    <user>U23SA861Y</user>
    <text>despite the colour scheme straight out of the 90s</text>
  </message>
  <message>
    <ts>2017-07-23T02:33:49.907551</ts>
    <user>U6CAFUBM2</user>
    <text>Hi folks, 
* I am badly stuck with elm-make's slow speed in dev env, which I suspect is related to code organization.
* I have been working on solving this puzzle since 2.5 weeks
* I am really fustrated and am thinking of moving back to pure js. :disappointed:
Request For Help: 
&lt;https://stackoverflow.com/questions/45253217/why-does-elm-make-takes-20-seconds-in-dev-env-even-when-just-adding-whitespace&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T02:35:02.910602</ts>
    <user>U23SA861Y</user>
    <text>I haven't found make to be slow, but I have heard that it can happen with large case statements particularly those involving pattern matching on tuples</text>
  </message>
  <message>
    <ts>2017-07-23T02:38:02.918680</ts>
    <user>U6CAFUBM2</user>
    <text>&lt;@U23SA861Y&gt; Yes, I am aware. I have done my best. And have attached grep of case expressions in the questions:
reposting it here.</text>
  </message>
  <message>
    <ts>2017-07-23T02:40:21.924910</ts>
    <user>U6CAFUBM2</user>
    <text>Snippet From the SO Question
# Steps already taken towards speeding up compilation time

 * I have been working on solving this puzzle since 2.5 weeks 
 * Initially time taken to compile was 60+ seconds, 

 * Current compilation time was achieved by:
  * reducing any direct dependency on Msg.elm, Now Msg.elm is imported only in two places Main.elm and Update.elm
  * And by minimizing the number of direct case expressions on Msg by splitting them into Sub messages.
  * [Output][1] of `grep -B 1 -A 22 "case " src/elm/**.elm  &amp;gt;
   case-expressions.elm`
[1]: &lt;https://github.com/jigargosar/elm-simple-gtd/blob/master/grep-case-expressions.elm&gt; "grep-case-expressions-output"</text>
  </message>
  <message>
    <ts>2017-07-23T02:41:13.927263</ts>
    <user>U23SA861Y</user>
    <text>I'm reading, how big is this project total?</text>
  </message>
  <message>
    <ts>2017-07-23T02:42:19.929739</ts>
    <user>U23SA861Y</user>
    <text>that url builder case looks like it might be problematic</text>
  </message>
  <message>
    <ts>2017-07-23T02:42:29.930199</ts>
    <user>U23SA861Y</user>
    <text>in routes</text>
  </message>
  <message>
    <ts>2017-07-23T02:43:54.933564</ts>
    <user>U23SA861Y</user>
    <text>Are your functions type annotated?</text>
  </message>
  <message>
    <ts>2017-07-23T02:46:24.940133</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U6CAFUBM2&gt; ^</text>
  </message>
  <message>
    <ts>2017-07-23T02:47:49.943571</ts>
    <user>U6CAFUBM2</user>
    <text>Well to be frank I had to remove some function type annotations so as to remove import statements. That helped speeding up compilation time. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T02:48:22.944885</ts>
    <user>U6CAFUBM2</user>
    <text>before when code was taking 60+ secs I had most of my top level methods annotated.</text>
  </message>
  <message>
    <ts>2017-07-23T02:48:40.945903</ts>
    <user>U23SA861Y</user>
    <text>you shouldn't need to remove annotations to remove imports</text>
  </message>
  <message>
    <ts>2017-07-23T02:50:17.950434</ts>
    <user>U6CAFUBM2</user>
    <text>Ok, would you like me to show you and example? I mean, I will create a branch, and post performance metrics.</text>
  </message>
  <message>
    <ts>2017-07-23T02:51:32.953795</ts>
    <user>U23SA861Y</user>
    <text>removing imports will undoubtedly improve compilation time, but you shouldn't have to remove type annotations to do so.</text>
  </message>
  <message>
    <ts>2017-07-23T02:58:01.970356</ts>
    <user>U6CAFUBM2</user>
    <text>Are you suggesting I redefine type aliases rather than, import them from *.Types.elm ?</text>
  </message>
  <message>
    <ts>2017-07-23T02:58:58.972825</ts>
    <user>U23SA861Y</user>
    <text>if it's and alias you can redefine or you can use the base types</text>
  </message>
  <message>
    <ts>2017-07-23T02:59:11.973370</ts>
    <user>U23SA861Y</user>
    <text>having a .Types.elm is a bit of a code smell</text>
  </message>
  <message>
    <ts>2017-07-23T02:59:16.973564</ts>
    <user>U6CAFUBM2</user>
    <text>&lt;https://gist.github.com/jigargosar/30e89aee3e860e3d30abb1dac38f29e8#file-elm-simple-gtd-elm-code-size-txt&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T02:59:39.974401</ts>
    <user>U6CAFUBM2</user>
    <text>thats the size of the project, around 10k lines of elm.</text>
  </message>
  <message>
    <ts>2017-07-23T02:59:51.974884</ts>
    <user>U23SA861Y</user>
    <text>I have it checked out</text>
  </message>
  <message>
    <ts>2017-07-23T03:00:15.976836</ts>
    <user>U6CAFUBM2</user>
    <text>The reason I split Types and Models is because Models tend to have more imports than types.</text>
  </message>
  <message>
    <ts>2017-07-23T03:00:28.977761</ts>
    <user>U6CAFUBM2</user>
    <text>that's how I was able to improve compile time.</text>
  </message>
  <message>
    <ts>2017-07-23T03:01:10.980165</ts>
    <user>U23SA861Y</user>
    <text>the reason it's a smell is because typically when things get big, you should be able to lop something into its own module</text>
  </message>
  <message>
    <ts>2017-07-23T03:03:19.986472</ts>
    <user>U6CAFUBM2</user>
    <text>Fair enough, I would really appreciate if you could identify any potential solutions, and or code smells. If you have the time for a mini code review.</text>
  </message>
  <message>
    <ts>2017-07-23T03:04:15.989277</ts>
    <user>U23SA861Y</user>
    <text>how long is it taking for you</text>
  </message>
  <message>
    <ts>2017-07-23T03:04:47.990674</ts>
    <user>U23SA861Y</user>
    <text>the compile?</text>
  </message>
  <message>
    <ts>2017-07-23T03:05:10.991953</ts>
    <user>U23SA861Y</user>
    <text>I clock in at around 30 seconds on the first build but nearly instantaneous on subsequent ones</text>
  </message>
  <message>
    <ts>2017-07-23T03:10:53.007960</ts>
    <user>U23SA861Y</user>
    <text>if you're seeing a 20+ compile time that means you are probably compiling all 120 or so modules every time</text>
  </message>
  <message>
    <ts>2017-07-23T03:11:28.009685</ts>
    <user>U23SA861Y</user>
    <text>and that can only happen if you have this sort of "master import" that all your modules inherit from and you are changing it</text>
  </message>
  <message>
    <ts>2017-07-23T03:17:07.025491</ts>
    <user>U23SA861Y</user>
    <text>also most of your files are only like 100 lines or less long?</text>
  </message>
  <message>
    <ts>2017-07-23T03:21:17.037129</ts>
    <user>U23SA861Y</user>
    <text>your imports do seem tangled</text>
  </message>
  <message>
    <ts>2017-07-23T03:21:37.038047</ts>
    <user>U23SA861Y</user>
    <text>you have files in Update/Entity importing your base Model</text>
  </message>
  <message>
    <ts>2017-07-23T03:26:41.052790</ts>
    <user>U23SA861Y</user>
    <text>hmm? yeah your imports are dancing all over the place</text>
  </message>
  <message>
    <ts>2017-07-23T03:29:39.060757</ts>
    <user>U23SA861Y</user>
    <text>I suspect the issues you are encountering are a combination of small files and twisted imports.</text>
  </message>
  <message>
    <ts>2017-07-23T03:32:13.068533</ts>
    <user>U24HQ3RJ7</user>
    <text>while writing an app in elm.. i am wondering whether to keep Model purely business-logic related Or can i insert some ui-related-info like .. to enable/disable buttons ?
If i don't put those information, some logic of enabling buttons will be in view.elm and will be recomputed each time ?
What is the opinion of community on this ?</text>
  </message>
  <message>
    <ts>2017-07-23T03:32:45.069865</ts>
    <user>U23SA861Y</user>
    <text>recompute it each time</text>
  </message>
  <message>
    <ts>2017-07-23T03:32:47.070030</ts>
    <user>U3SJEDR96</user>
    <text>Don't store what you can compute :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T03:33:03.070750</ts>
    <user>U23SA861Y</user>
    <text>put in the model why you want the buttons to change</text>
  </message>
  <message>
    <ts>2017-07-23T03:34:24.074345</ts>
    <user>U24HQ3RJ7</user>
    <text>I will experiment.. but it seems that some logic will get splitted between two files..
But yaa.. i need to check this out.. I will also recompute.. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T03:34:50.075615</ts>
    <user>U24HQ3RJ7</user>
    <text>seems to be good user experience to keep unusable buttons disabled.</text>
  </message>
  <message>
    <ts>2017-07-23T03:35:26.077483</ts>
    <user>U24HQ3RJ7</user>
    <text>Oh.. now i understood what you meant..
reason should be in model..</text>
  </message>
  <message>
    <ts>2017-07-23T03:36:04.079308</ts>
    <user>U23SA861Y</user>
    <text>right, if you have a state machine where only certain transitions are possible.</text>
  </message>
  <message>
    <ts>2017-07-23T03:36:22.080321</ts>
    <user>U23SA861Y</user>
    <text>put the state in the model and mask the transitions in the view</text>
  </message>
  <message>
    <ts>2017-07-23T03:37:29.083408</ts>
    <user>U24HQ3RJ7</user>
    <text>also well.. eventually.. View.elm will import Model.elm..
so i can keep the logical-fns in Model.elm only.. and let the view use them.. right ?</text>
  </message>
  <message>
    <ts>2017-07-23T03:38:46.086885</ts>
    <user>U23SA861Y</user>
    <text>sure, until that logic accrues until it's own entity</text>
  </message>
  <message>
    <ts>2017-07-23T03:39:25.088438</ts>
    <user>U24HQ3RJ7</user>
    <text>cool</text>
  </message>
  <message>
    <ts>2017-07-23T03:39:35.088871</ts>
    <user>U23SA861Y</user>
    <text>functions are functions, the compiler will help you and you need to import the model in both update and view eventually</text>
  </message>
  <message>
    <ts>2017-07-23T03:40:32.091729</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U3SJEDR96&gt; funny how that same logic applies to build systems as well</text>
  </message>
  <message>
    <ts>2017-07-23T04:02:46.156950</ts>
    <user>U6CAFUBM2</user>
    <text>&lt;@U23SA861Y&gt; hey did you try the SO post tests?</text>
  </message>
  <message>
    <ts>2017-07-23T04:03:46.159853</ts>
    <user>U6CAFUBM2</user>
    <text>touch src/elm/Mat.elm &amp;amp; touch src/elm/GroupDoc/View.elm</text>
  </message>
  <message>
    <ts>2017-07-23T04:03:52.160175</ts>
    <user>U6CAFUBM2</user>
    <text>&lt;https://stackoverflow.com/questions/45253217/why-does-elm-make-takes-20-seconds-in-dev-env-even-when-just-adding-whitespace&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T04:04:14.161409</ts>
    <user>U6CAFUBM2</user>
    <text>will you please verify compile time for those two files?</text>
  </message>
  <message>
    <ts>2017-07-23T04:06:26.168322</ts>
    <user>U6CAFUBM2</user>
    <text>&lt;@U23SA861Y&gt; please have a quick look at the post. It shold answer most of your questions regarding, compilation times, and modules compiled.</text>
  </message>
  <message>
    <ts>2017-07-23T04:16:35.197739</ts>
    <user>U3SJEDR96</user>
    <text>worse - `touch src/elm/X/Function.elm`. I mean, it makes perfect sense, but ouch.</text>
  </message>
  <message>
    <ts>2017-07-23T04:19:14.205360</ts>
    <user>U3SJEDR96</user>
    <text>or, well, I guess the absolute worst one might be `X/Function/Infix.elm`</text>
  </message>
  <message>
    <ts>2017-07-23T04:19:34.206186</ts>
    <user>U3SJEDR96</user>
    <text>mentally parsing those files makes _my_ head hurt, too, though</text>
  </message>
  <message>
    <ts>2017-07-23T04:23:00.216341</ts>
    <user>U3SJEDR96</user>
    <text>Anyway, I think Jon called it right - there is a some weird interconnectedness going on there. Keep in mind that when you touch a module, all modules that depend on that module will be recompiled, and all modules depending on that, and so on. I do think the compiler could be a little smarter about it - it doesn't make sense that touching one file results in something that takes _more_ time than a clean compile does - but nevertheless, there are dependencies-through-imports in that codebase that give me pause</text>
  </message>
  <message>
    <ts>2017-07-23T04:27:59.230497</ts>
    <user>U6CAFUBM2</user>
    <text>&lt;@U3SJEDR96&gt; &lt;@U23SA861Y&gt; thanks for responding. Is it possible to do a code review and give me some specific feedback?</text>
  </message>
  <message>
    <ts>2017-07-23T04:33:01.245577</ts>
    <user>U6CAFUBM2</user>
    <text>actually I am not worried about package X, its a utilities package, and It is not changed frequently.</text>
  </message>
  <message>
    <ts>2017-07-23T05:20:18.379946</ts>
    <user>U2LAL86AY</user>
    <text>you don't use minimaps? A few months back i changed my editor - and forgot to install minimap pacakge - my productivity droped so low - and i had this background thought in my mind all the time: `let me use smaller modules` - but after i realized that the tool is the issue- now i'm constantly using something with 800 - 1300 lines with no problem. Just my two cents - maybe you have other reasons.</text>
  </message>
  <message>
    <ts>2017-07-23T05:23:58.389313</ts>
    <user>U17P7CBFB</user>
    <text>&lt;@U0J1M0F32&gt; &lt;@U14Q8S4EM&gt; &lt;@U60SXAF96&gt; &lt;@U153UK3FA&gt; I's a drag'n'drop graph editor, where dragging to/from different positions on a node has different meaning, so there isn't a lot of separation between things. 

By unreachable, I mean that from this model state, you should never get a msg of this type, because it's not even in the view. Sometimes you get messages out of order, so I still have to handle them all, but make sure it's not a bug for each case. 

I'm not using any Cmd or Task; it's 100% event handlers and subscriptions on mouse; Mouse.moves, Mouse.ups, onClick, onMouseDown and onMouseUp. I have this update function:
```
update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
  ( updateHelp msg model |&amp;gt; discardInvalid model, Cmd.none )
```

It's very hard to get a sense of what happens when it doesn't even fit on a single screen. It's just an adjacency list of a state machine with 5 states and 13 message types. I do have multiple messages that signal the same event, but to/from different states; maybe that's one fast way to decrease the size of the update function, but I don't think it'll get me far enough to make me happy. After all, it's still growing.</text>
  </message>
  <message>
    <ts>2017-07-23T05:30:40.408587</ts>
    <user>U24HQ3RJ7</user>
    <text>I am taking inputs from user so, i have one input and one radio button and finally a create button..
Ideally i would like only one msg with click on button and that msg comes with (Text-input+radio_button_input values)..
Is this possible ?
Currently what i am doing is having 3 msgs.. for input,radio and button and storing temp-values in Model.. :disappointed: and on button click, finally creating object..</text>
  </message>
  <message>
    <ts>2017-07-23T05:32:57.414787</ts>
    <user>U2LAL86AY</user>
    <text>I had a issue like this some months back - i wanted to create a visual ide for elm. THe project is on hold now - but because of all this messages - i've moved the DND logic in a separate module, and i added guards. 

Have you considered making a all mighty drag and drop module with guards/conditionals - meaning you can say up front which things can be drooped into other - and keep all this logic outside - because this is where most of my dnd messages were coming from. 

Maybe i don't underestand your usecase very well but 5x13 messages is usually a bad architecture flag for me.

Why can't this be done in a different way? If you explain some parts of your system much better i think we can help you come up with something easier to wrap our heads around. Just a thought :simple_smile:</text>
  </message>
  <message>
    <ts>2017-07-23T05:36:11.424002</ts>
    <user>U4872964V</user>
    <text>&lt;@U24HQ3RJ7&gt; we do it with three messages because we keep the total state of the application in Elm.

More importantly, you should _never_ have any state in your messages. The message for a clicked button should be just that - the button was clicked. This separation between messages and state makes the programming logic much cleaner, and avoids subtle bugs when, for instance, multiple messages affect the state before the next rerender.</text>
  </message>
  <message>
    <ts>2017-07-23T05:52:16.470763</ts>
    <user>U17P7CBFB</user>
    <text>5 states, 13 messages, so 5*13 cases in the update function :slightly_smiling_face: I got an idea of how I could restructure it now, so I'll try that right away.</text>
  </message>
  <message>
    <ts>2017-07-23T05:53:48.474841</ts>
    <user>U24HQ3RJ7</user>
    <text>&lt;@U4872964V&gt; thanks for reminding me again.. 
this pain is worth it.. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T06:20:22.551405</ts>
    <user>U2LAL86AY</user>
    <text>hey and another useful idea.  one thing that i learned form evancz api design session was to try all possible combinations of data structures / apis. It's doesn't matter if is not the `best one` - just write them down - because you don't know which one is best - right form the start.. Then after going trough this with patience - you pick the one that you feel is the best.

As opposed to this - what i was doing in the begining -- was to come up with one or two or maximum 3 api designs, compare them briefly, and start coding. 

Failed so many times that now i know evancz approach - is worth the effort even if it takes time and discipline to do it. 

I feel this is specially aplicable in your case. This stuff is so big that the chance you will get it right the second time is small. The change you will do a rewrite in 2-3 weeks for now is very high. 

I usually try to get to a point where i'm confident and able to argument why the approach i choose is the best one - given all requirements.

And later when i some new info forces a change - i first look if the arguments i have for choosing a particular api / data-structure still hold. And with a few exceptions they do.
I'm curious how small you can make that update function after some more iterations. Please let me know :simple_smile:</text>
  </message>
  <message>
    <ts>2017-07-23T07:27:38.755804</ts>
    <user>U17TXDBJR</user>
    <text>Hi! I am trying to get &lt;http://package.elm-lang.org|package.elm-lang.org&gt; working locally to preview docs for a package. Is there any documentation for that, or has anyone undertaken this already? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T07:28:18.757773</ts>
    <user>U17TXDBJR</user>
    <text>I managed to compile it and start the run-server binary. But I cannot find anything about how to generate the directory structure.</text>
  </message>
  <message>
    <ts>2017-07-23T07:37:53.786696</ts>
    <user>U17TXDBJR</user>
    <text>It appears that creating all-packages.json, new-packages.json and packages/name/package/version/documentation.json is not sufficient.</text>
  </message>
  <message>
    <ts>2017-07-23T07:54:25.834917</ts>
    <user>U3LUC6SNS</user>
    <text>I tuned in on the remarks about `Types.elm` being a code smell.  Alas, that is just what I have — a 260 line file.  (a) How concerned should I be? (b) What are the downsides of such a file? (c) If I decide to refactor, what is a good strategy?</text>
  </message>
  <message>
    <ts>2017-07-23T07:55:48.839298</ts>
    <user>U17TXDBJR</user>
    <text>I summarized my effort in &lt;https://github.com/elm-lang/package.elm-lang.org/issues/247&gt;.</text>
  </message>
  <message>
    <ts>2017-07-23T07:59:00.848905</ts>
    <user>U17TXDBJR</user>
    <text>Oops, there is a "Preview docs" on &lt;http://package.elm-lang.org|package.elm-lang.org&gt; that solves my use-case. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T08:16:31.908851</ts>
    <user>U0D4VR7BP</user>
    <text>&lt;@U3LUC6SNS&gt; I think it's too early to say whether or not it's a code smell. In Elm generally almost all goes, until something gets painful -&amp;gt; refactor

I would say - don't think too much about it from the beginning :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T08:50:35.028696</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U0D4VR7BP&gt; Sounds good to me.  My compile times are fine, and with structure I know where to find things.</text>
  </message>
  <message>
    <ts>2017-07-23T08:51:02.030257</ts>
    <user>U17TXDBJR</user>
    <text>How can I create a new public channel on Elm Slack?</text>
  </message>
  <message>
    <ts>2017-07-23T08:51:25.031700</ts>
    <user>U17TXDBJR</user>
    <text>The Slack docs state there should be a plus button next to channels in the left side bar. I don't have it.</text>
  </message>
  <message>
    <ts>2017-07-23T08:56:17.048919</ts>
    <user>U6D41LX7Y</user>
    <text>Hello, is there anyone working on elm on mobile ?</text>
  </message>
  <message>
    <ts>2017-07-23T08:56:21.049224</ts>
    <user>U17P7CBFB</user>
    <text>Broke it up into multiple functions; one for moving into an action, e.g. selecting a node, or moving the set of selected nodes. Then I have one function per action, e.g. for moving around a set of nodes. It ended up about 10 lines longer than before, but it feels a lot more readable now. Still a lot of boiler plate, but it's much better now.</text>
  </message>
  <message>
    <ts>2017-07-23T08:59:19.060100</ts>
    <user>U17P7CBFB</user>
    <text>If you list out the assumptions and goals you have before listing out as many reasonable implementations as you can think of, you have my ideal design phase for a larger project. This still feels small enough that small interations work; about 800 lines of code atm, counting whitespace and comments.</text>
  </message>
  <message>
    <ts>2017-07-23T09:00:42.067010</ts>
    <user>U17P7CBFB</user>
    <text>It's still an open question if I'll rewrite messages to be around what they do, instead of what state transition they represent, when I clean up the view</text>
  </message>
  <message>
    <ts>2017-07-23T09:01:09.068888</ts>
    <user>U4872964V</user>
    <text>You can't, it's disabled. Ask in &lt;#C3FKL0A8H|admin-help&gt; </text>
  </message>
  <message>
    <ts>2017-07-23T09:02:48.075569</ts>
    <user>U0X1G7NVD</user>
    <text>Hi all… is there a cleaver way to do that?

```
format : Locales -&amp;gt; Float -&amp;gt; String
format locale num =
    num
        |&amp;gt; Helpers.parse locale
        |&amp;gt; Helpers.stringify locale
```

I mean… to avoid passing locale to `parse` and then to `stringfy`?</text>
  </message>
  <message>
    <ts>2017-07-23T09:03:07.076763</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U6D41LX7Y&gt; there is a gsoc project going on that investigates elm on ios</text>
  </message>
  <message>
    <ts>2017-07-23T09:03:29.078148</ts>
    <user>U17TXDBJR</user>
    <text>I see. Thanks! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T09:05:16.085173</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U0X1G7NVD&gt; well, technically there is but in elm it's not that nice. we like to keep everything explicit</text>
  </message>
  <message>
    <ts>2017-07-23T09:05:34.086335</ts>
    <user>U1CE9DL9H</user>
    <text>if you're curious, read up on the "Reader monad"</text>
  </message>
  <message>
    <ts>2017-07-23T09:36:42.203914</ts>
    <user>U0X1G7NVD</user>
    <text>Ok &lt;@U1CE9DL9H&gt; _ a quick Google, learned something new but gonna keep it that way — as you already guessed ; ) Many many thanks!</text>
  </message>
  <message>
    <ts>2017-07-23T10:38:51.448904</ts>
    <user>U3LUC6SNS</user>
    <text>I am planning to add navigation to the app I am working on.  Any advice on what to use?  I’ve been looking at &lt;https://github.com/rgrempel/elm-route-url&gt;, which seems interesting.

My update function has the usual signature: `update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )` This is something I’d rather not change.

And the program is `programWithFlags` ,that is, `main : Program Flags Model Msg`</text>
  </message>
  <message>
    <ts>2017-07-23T11:05:05.560429</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U3LUC6SNS&gt; I too have a Types file. I am already seeing an imminent refactor, where I migrate a large chunk of code to it's own sub folder. But having types right now works very well for me.</text>
  </message>
  <message>
    <ts>2017-07-23T11:05:08.560632</ts>
    <user>U24HQ3RJ7</user>
    <text>i have a type `type Thing = A | B | C | D`..
i need to store some struct `Data` for `A,B,C,D`.. what is a good way to store it ?
Should i have 4 variables.. `aData, bData, cData, dData` ?</text>
  </message>
  <message>
    <ts>2017-07-23T11:05:22.561740</ts>
    <user>U24HQ3RJ7</user>
    <text>Or a map with 4 keys - values.. ?</text>
  </message>
  <message>
    <ts>2017-07-23T11:08:23.575033</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U3LUC6SNS&gt; I'm doing a single page application so all my routing is handled with just `Navigation` and `UrlParser` libraries. It works well if you don't plan on having multiple html pages and if the app is fairly small. The user is none the wiser except for seeing the little _#_ symbol in the paths</text>
  </message>
  <message>
    <ts>2017-07-23T11:10:22.584193</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U24HQ3RJ7&gt; I'm not following. Could you show some code of what you want to end up with?</text>
  </message>
  <message>
    <ts>2017-07-23T11:11:00.587062</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U24HQ3RJ7&gt; cant the union type just have the data as part of constructor? `type Thing = A Data | B Data ... ?</text>
  </message>
  <message>
    <ts>2017-07-23T11:12:40.594746</ts>
    <user>U24HQ3RJ7</user>
    <text>&lt;@U3SJEDR96&gt; I have 4 quadrants.. so i have `type QuadrantType = QA | QB | QC | QD`..
now each quarant in view can have toggled state of collapse : `type ViewData = { qaData = QuadrantViewData, qbData = QuadrantViewData ... }`</text>
  </message>
  <message>
    <ts>2017-07-23T11:13:01.596314</ts>
    <user>U24HQ3RJ7</user>
    <text>Does this make question clear ?</text>
  </message>
  <message>
    <ts>2017-07-23T11:13:33.598712</ts>
    <user>U24HQ3RJ7</user>
    <text>i can also have `type ViewData = { qDatas = Map QuadrantType QuadrantViewData }`</text>
  </message>
  <message>
    <ts>2017-07-23T11:15:21.606816</ts>
    <user>U24HQ3RJ7</user>
    <text>&lt;@U2SR9DL7Q&gt; please see above.. Can you explain what should i do in `ViewData` ? I would not like to change `QuadrantType`..</text>
  </message>
  <message>
    <ts>2017-07-23T11:20:00.627271</ts>
    <user>U2Q5GJNTB</user>
    <text>Hi all. Does anybody have any recommendation for habits, tools or processes to keep elm-package.json and tests/elm-package.json in sync ? I am always painfully reminded by travis-CI that I did not add it to the tests file</text>
  </message>
  <message>
    <ts>2017-07-23T11:21:19.633414</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U6CAFUBM2&gt; I'll see if I can find some time to give it a once over.</text>
  </message>
  <message>
    <ts>2017-07-23T11:21:59.636433</ts>
    <user>U2Q5GJNTB</user>
    <text>Hmm I guess I should just regularly take a look at my elm-test --watch output maybe. I guess that should do the job until it is changed in the future</text>
  </message>
  <message>
    <ts>2017-07-23T11:22:12.637538</ts>
    <user>U6CAFUBM2</user>
    <text>thanks:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T11:22:15.637751</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U24HQ3RJ7&gt; to an extent, the most valid one is whatever is most rational for how the data is used and accessed in your application. I have a slight bias to Union types over records because they usually map my apps actual state the best. so `type QuadrantType = QA ViewData | QB ViewData | ... ` so each quadrant is built with everything it needs to represent itself. Then your views can just have a `viewQuadrant -&amp;gt; QuadrantType -&amp;gt; Html Msg` and you can use case statements to pattern match each one.</text>
  </message>
  <message>
    <ts>2017-07-23T11:23:21.642627</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2Q5GJNTB&gt; running tests before committing is always a good idea :wink:</text>
  </message>
  <message>
    <ts>2017-07-23T11:23:59.645330</ts>
    <user>U4872964V</user>
    <text>&lt;@U2Q5GJNTB&gt; this will be adressed in 0.19 i hear</text>
  </message>
  <message>
    <ts>2017-07-23T11:24:05.645804</ts>
    <user>U2Q5GJNTB</user>
    <text>yeah, I will just add it to my push hook so that I stop forgetting to look at the tests.</text>
  </message>
  <message>
    <ts>2017-07-23T11:24:22.647009</ts>
    <user>U2Q5GJNTB</user>
    <text>&lt;@U4872964V&gt; cool. That would be nice.</text>
  </message>
  <message>
    <ts>2017-07-23T11:24:43.648456</ts>
    <user>U23SA861Y</user>
    <text>one way is to prevent pushes to master directly and then require all tests in github to pass before you can merge in (provided you are using github)</text>
  </message>
  <message>
    <ts>2017-07-23T11:25:56.653731</ts>
    <user>U24HQ3RJ7</user>
    <text>&lt;@U2SR9DL7Q&gt; provided i go the route of `qaData, qbData`..
i donot understand how can i write :
```
toggleExpand : QuadrantType -&amp;gt; ViewData -&amp;gt; ViewData
toggleExpand quadrantType viewData =
    { viewData | case quadrantType of
                     QA -&amp;gt; { expanded : not viewData.q1Quadrant.expanded }
                     QB -&amp;gt; ...
    }
```
`case` will return a `QuadrantViewData`.. but How do i get right variable name before it.. like `q1Quadrant or q2Quadrant`.. ?</text>
  </message>
  <message>
    <ts>2017-07-23T11:26:26.655822</ts>
    <user>U2Q5GJNTB</user>
    <text>&lt;@U23SA861Y&gt; yeah that is true as well. I should get into that habit for documentation purpose and for the reason you just mentioned. The curse of side projects I guess… laziness</text>
  </message>
  <message>
    <ts>2017-07-23T11:27:46.661400</ts>
    <user>U23SA861Y</user>
    <text>meh, if it's just a side project then setting up all that stuff takes more time than it saves</text>
  </message>
  <message>
    <ts>2017-07-23T11:28:59.666383</ts>
    <user>U2D07QZN3</user>
    <text>Anyone interested in helping out with this? &lt;https://github.com/smckissock/trump-conflicts&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T11:29:31.668860</ts>
    <user>U2D07QZN3</user>
    <text>(please let me know if I shouldn't be posting this kind of thing here)</text>
  </message>
  <message>
    <ts>2017-07-23T11:29:49.670094</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U24HQ3RJ7&gt;  
```
viewQuadrant -&amp;gt; QuadrantType -&amp;gt; Html
viewQuadrant quadstuff =
    case quadstuff of 
        QA { expanded, otherparam otherparam } -&amp;gt; actions
        QB { expanded, otherparam otherpparam } -&amp;gt; actions
```</text>
  </message>
  <message>
    <ts>2017-07-23T11:33:04.685089</ts>
    <user>U24HQ3RJ7</user>
    <text>i figured out i will need 2 case expressions..
i want to change `ViewData`  itself.. which is part of Model.</text>
  </message>
  <message>
    <ts>2017-07-23T11:33:24.686534</ts>
    <user>U2Q5GJNTB</user>
    <text>yes, that is why i did not do it yet</text>
  </message>
  <message>
    <ts>2017-07-23T11:36:27.700066</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U24HQ3RJ7&gt; you want to change ViewData when it's not describing a quadrant?</text>
  </message>
  <message>
    <ts>2017-07-23T11:42:06.724213</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U24HQ3RJ7&gt; so your `QuadrantType` is the Unique name QA, QB, QC followed by the viewData record. You don't need two inputs. For example, I have a `type Game = NoGame | ActiveGame | WonGame Player` type. `WonGame` is just a unique name but `Player` is a record. In my view function, I have
```
viewGame game = 
    case game of 
        NoGame -&amp;gt;
        ActiveGame -&amp;gt;
        WonGame { data1, data2, data3} -&amp;gt;
``` 
the { data1, data2, data3 } type here is the `Player` record. 

I'm probably not understanding your use case clearly. In my head, it sounds like quadrants should be a union and all quadrants need viewdata on how to show them so the quadrant type should be Both a unique name and an accompanying vewData record. If you want to edit viewdata you can, but it would be within the context of updating a quadrant.</text>
  </message>
  <message>
    <ts>2017-07-23T11:47:10.745580</ts>
    <user>U24HQ3RJ7</user>
    <text>yes.. each quadrant-type will have a `QuadrantViewdata`..
but to keep data separate, i am putting them in different types.. `type QuadrantType = QA | QB | QC | QD` and `type alias ViewData = { qaData = QuadrantViewData, qbData = QuadrantViewData ... }` as all quadrants are in view.. so they will have `QuadrantViewData`. which is `type alias QuadrantViewData = { enabled : Bool } `</text>
  </message>
  <message>
    <ts>2017-07-23T11:48:19.750625</ts>
    <user>U24HQ3RJ7</user>
    <text>so, given a quadrant type if i have to toggle its view.. i.e. for function with signature : `toggleExpand : QuadrantType -&amp;gt; ViewData -&amp;gt; ViewData`</text>
  </message>
  <message>
    <ts>2017-07-23T11:48:34.751740</ts>
    <user>U2SR9DL7Q</user>
    <text>um, so qaData and qbData have the same fields?</text>
  </message>
  <message>
    <ts>2017-07-23T11:54:05.775806</ts>
    <user>U24HQ3RJ7</user>
    <text>yes..</text>
  </message>
  <message>
    <ts>2017-07-23T11:56:03.784354</ts>
    <user>U2SR9DL7Q</user>
    <text>I guess if you have operations that work only on ViewData independent of quadrants you could keep separate. But I rather just have them together `type Quadrant  = QA QuadrantViewData | QB QuadrantViewData | QC QuadrantViewData | QD QuadrantViewData` So to toggle a quadrant view you just go
```
toggleQuad quadrant = 
    case quadrant of 
       Qtype Qview -&amp;gt; Qtype { Qview | toggle = False} 
``` 
and your views know not to display quadrants with toggle set to False</text>
  </message>
  <message>
    <ts>2017-07-23T11:56:34.786673</ts>
    <user>U3LUC6SNS</user>
    <text>&lt;@U2SR9DL7Q&gt; Thanks for the comments.  I will check out `Navigation` and `UrlParser`.</text>
  </message>
  <message>
    <ts>2017-07-23T11:58:11.793895</ts>
    <user>U2SR9DL7Q</user>
    <text>if there's a view for every quadrant, why allow them independence? Just have a type that is both the Qtype and the QViewData. Then that becomes the one source of truth for your quadrants.</text>
  </message>
  <message>
    <ts>2017-07-23T11:58:57.797663</ts>
    <user>U2SR9DL7Q</user>
    <text>.... of course, I could be totally wrong. That's the nice part about elm. If you can get it to compile then whatever you choose will probably work, regardless.</text>
  </message>
  <message>
    <ts>2017-07-23T12:07:37.841282</ts>
    <user>U24HQ3RJ7</user>
    <text>the problem has now moved to upper level.. which will need to have data for 4 quadrants..</text>
  </message>
  <message>
    <ts>2017-07-23T12:18:23.888265</ts>
    <user>U2SR9DL7Q</user>
    <text>`type Thing = Quadrant Quadrant Quadrant Quadrant` ?</text>
  </message>
  <message>
    <ts>2017-07-23T12:18:52.890425</ts>
    <user>U2SR9DL7Q</user>
    <text>or `type Thing = QA QB QC QD`</text>
  </message>
  <message>
    <ts>2017-07-23T12:19:17.892234</ts>
    <user>U4GEVRVAL</user>
    <text>The elm-spa-example and accompanying article are a fascinating read, but it is rather hard to know where to begin when trying to build something along the same lines from scratch =\</text>
  </message>
  <message>
    <ts>2017-07-23T12:22:52.907480</ts>
    <user>U4GEVRVAL</user>
    <text>There are just so many moving pieces in different files</text>
  </message>
  <message>
    <ts>2017-07-23T12:24:28.914743</ts>
    <user>U23SA861Y</user>
    <text>well, there is a massive disclaimer on it that it isn't a gentle introduction to elm</text>
  </message>
  <message>
    <ts>2017-07-23T12:27:38.929194</ts>
    <user>U24HQ3RJ7</user>
    <text>what information will the button send to identify which Quadrant in `Thing` to change ?</text>
  </message>
  <message>
    <ts>2017-07-23T12:32:47.952683</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U4GEVRVAL&gt; I tend to reference it piecemeal for very specific things at different times.</text>
  </message>
  <message>
    <ts>2017-07-23T13:08:20.118712</ts>
    <user>U23SA861Y</user>
    <text>You're really trying to write this like haskell, which probably isn't the best plan.</text>
  </message>
  <message>
    <ts>2017-07-23T13:14:48.152641</ts>
    <user>U4872964V</user>
    <text>is there an easy way to see the published packages in order of last updated/published?</text>
  </message>
  <message>
    <ts>2017-07-23T13:15:12.154698</ts>
    <user>U4872964V</user>
    <text>just trying to get a feel for what’s rolling</text>
  </message>
  <message>
    <ts>2017-07-23T13:17:56.167372</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://libraries.io/search?order=desc&amp;amp;platforms=Elm&amp;amp;sort=latest_release_published_at&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T13:18:36.170288</ts>
    <user>U4872964V</user>
    <text>great!</text>
  </message>
  <message>
    <ts>2017-07-23T13:20:45.180138</ts>
    <user>U4872964V</user>
    <text>lot of things happening :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T14:05:36.389555</ts>
    <user>U1AN4JRFV</user>
    <text>there's also this, that might be up, or it mightn't. &lt;http://52.233.199.184/&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T14:06:41.394599</ts>
    <user>U1AN4JRFV</user>
    <text>(currently working on making it update after discovery)</text>
  </message>
  <message>
    <ts>2017-07-23T14:09:18.406101</ts>
    <user>U3SJEDR96</user>
    <text>Heh, cool. Also, if you're interested in parsing signatures, &lt;https://ellie-app.com/3PSwcRDd9L3a1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T14:12:40.422974</ts>
    <user>U1AN4JRFV</user>
    <text>bookmarked!</text>
  </message>
  <message>
    <ts>2017-07-23T14:29:52.501401</ts>
    <user>U6CCW4KV1</user>
    <text>Hi everybody, I have an `Elm.fullscreen` app and want to render a c3 chart into it (the code already existed), but the app is just freezing. I guess the elm rendering mechanism gets in the way. Is there an easy workaround for this, or do I have to use `Elm.embed` and render the charts in a not managed html element?</text>
  </message>
  <message>
    <ts>2017-07-23T14:51:51.601172</ts>
    <user>U2W28MK6K</user>
    <text>X-post from &lt;#C192T0Q1E|beginners&gt; :

Hi all! I've been struggling with being able to send a request that returns a 204 No Content.

I've explored creating a low level request like so:

```
myRequest msg payload =
    let
        req =
            Http.request
                { method = "POST"
                , headers = []
                , url = "/my-url"
                , body =
                    (Http.jsonBody &amp;lt;|
                        Encode.object
                            [ ( "field1", Encode.string &amp;lt;| payload.field1 )
                            ]
                    )
                , expect = Http.expectStringResponse (\response -&amp;gt; Ok response.body)
                , timeout = Nothing
                , withCredentials = False
                }
    in
        Http.send msg req
```

i've also tried:

```
expect = Http.expectString
```
to no avail

and the result that I always get is an Error regarding not being able to parse invalid JSON</text>
  </message>
  <message>
    <ts>2017-07-23T15:00:12.638290</ts>
    <user>U1SF6G7PA</user>
    <text>&lt;@U0CL7EPPG&gt; that is how i did it, too :slightly_smiling_face: sorry, for the delay, didnt have my computer on me for the weekend</text>
  </message>
  <message>
    <ts>2017-07-23T15:00:15.638569</ts>
    <user>U1AN4JRFV</user>
    <text>&lt;@U2W28MK6K&gt; : does this link apply to your case? &lt;https://stackoverflow.com/questions/41884524/http-delete-with-empty-body&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T15:00:51.641812</ts>
    <user>U1AN4JRFV</user>
    <text>specifically I wonder, if this would do the trick: ```expectUnit : Expect ()
expectUnit =
    Http.expectStringResponse &amp;lt;&amp;lt; always &amp;lt;| Ok ()```</text>
  </message>
  <message>
    <ts>2017-07-23T15:02:51.651540</ts>
    <user>U2W28MK6K</user>
    <text>~still getting `BadPayload`~ I think I just didn't have my latest code</text>
  </message>
  <message>
    <ts>2017-07-23T15:04:30.658987</ts>
    <user>U1AN4JRFV</user>
    <text>what is the error exactly?</text>
  </message>
  <message>
    <ts>2017-07-23T15:05:28.663701</ts>
    <user>U2W28MK6K</user>
    <text>&lt;@U1AN4JRFV&gt; that worked, thanks!</text>
  </message>
  <message>
    <ts>2017-07-23T15:05:34.664102</ts>
    <user>U1AN4JRFV</user>
    <text>awesome!</text>
  </message>
  <message>
    <ts>2017-07-23T16:08:28.948898</ts>
    <user>U4Z4NEUQG</user>
    <text>How would you parse date in json?</text>
  </message>
  <message>
    <ts>2017-07-23T16:11:10.961497</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U4Z4NEUQG&gt; &lt;http://package.elm-lang.org/packages/elm-community/json-extra/2.3.0/Json-Decode-Extra#date&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T16:13:06.969967</ts>
    <user>U4Z4NEUQG</user>
    <text>great, I was about to write it, but I thought it was better to ask before</text>
  </message>
  <message>
    <ts>2017-07-23T16:13:06.970050</ts>
    <user>U4Z4NEUQG</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-23T16:20:15.001540</ts>
    <user>U4Z4NEUQG</user>
    <text>The protection against brutal API changes made me, once again, happy to use a library.</text>
  </message>
  <message>
    <ts>2017-07-23T16:20:42.003549</ts>
    <user>U4Z4NEUQG</user>
    <text>With node I was so scared to have the "update hell long weekend". (that I had too many times)</text>
  </message>
  <message>
    <ts>2017-07-23T19:21:34.800401</ts>
    <user>U6C09T8HX</user>
    <text>I've got a question: In the Http library the first definition is: "type alias Request a = Request a".  I thought type alias was used to give a name to an existing type so does this mean that "Request" is already defined?  If so where?...and why define it again?</text>
  </message>
  <message>
    <ts>2017-07-23T20:02:16.013776</ts>
    <user>U0CJA7BLJ</user>
    <text>&lt;@U6C09T8HX&gt; yes it is already defined somewhere else &lt;https://github.com/elm-lang/http/blob/15e12ec430f7b25b80dbfdec0b20a08c93d76cc8/src/Http/Internal.elm&gt;
This is a way of re-exporting a type</text>
  </message>
  <message>
    <ts>2017-07-23T20:04:26.026339</ts>
    <user>U6C09T8HX</user>
    <text>Thank you sporto!</text>
  </message>
  <message>
    <ts>2017-07-23T20:45:44.276130</ts>
    <user>U2D07QZN3</user>
    <text>I'm getting "Uncaught RangeError: Maximum call stack size exceeded" in chrome, but it is fine in IE</text>
  </message>
  <message>
    <ts>2017-07-23T20:46:47.283474</ts>
    <user>U2D07QZN3</user>
    <text>&lt;https://smckissock.github.io/trump-conflicts/&gt;   Code is here: &lt;https://github.com/smckissock/trump-conflicts&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T02:28:17.184531</ts>
    <user>U6CAFUBM2</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T02:28:42.189332</ts>
    <user>U6CAFUBM2</user>
    <text>I have no idea about haskell, I have tried learning it, but just can't wrap my head around it.</text>
  </message>
  <message>
    <ts>2017-07-24T02:29:03.193292</ts>
    <user>U6CAFUBM2</user>
    <text>I would really appreciate, if you could just give me some pointers.</text>
  </message>
  <message>
    <ts>2017-07-24T02:31:36.223619</ts>
    <user>U6CAFUBM2</user>
    <text>I am trying another approach, and it is helping speed up compilation time. I am just flinging it in the blind. let me push new branch.</text>
  </message>
  <message>
    <ts>2017-07-24T02:39:09.313965</ts>
    <user>U6CAFUBM2</user>
    <text>basically I am converting sub messages into commands, this is speeding things up.</text>
  </message>
  <message>
    <ts>2017-07-24T02:41:20.340951</ts>
    <user>U6CAFUBM2</user>
    <text>I have also figured out some stuff about compiler, apart from the fact that "on any modification entire dependent tree is recompiled "</text>
  </message>
  <message>
    <ts>2017-07-24T02:43:56.373718</ts>
    <user>U6CAFUBM2</user>
    <text>there is one more thing, where dependencies are also recompiled, and that is the case with update function. so just splitting up update function doesn't help. The messages have to be decoupled and `Cmd.map`ed so as to avoid recompilation.</text>
  </message>
  <message>
    <ts>2017-07-24T02:50:06.453978</ts>
    <user>U6CAFUBM2</user>
    <text>removing that entire file had no impact on compile time. :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-24T03:12:06.770365</ts>
    <user>U1FFA46TT</user>
    <text>when I try to build locally I get
```
elm-make: elm-stuff\packages\elm-lang\core\5.1.1\src\Array.elm: getFileStatus: does not exist (No such fi
le or directory)
```</text>
  </message>
  <message>
    <ts>2017-07-24T03:25:07.972439</ts>
    <user>U0CL7EPPG</user>
    <text>All good, thanks for letting me know!</text>
  </message>
  <message>
    <ts>2017-07-24T03:33:25.109076</ts>
    <user>U1FFA46TT</user>
    <text>ok I got it after deleting the `elm-stuff` folder and reinstalling. after ~1400 lines in the `Data.elm` modules it breaks. It looks really like an issue with `List` creation: if you *split* the list into two sublists it works:

```
conflictList : List Conflict
conflictList =
    headOfConflicts ++ tailOfConflicts


headOfConflicts : List Conflict
headOfConflicts =
    -- from line 14 to line 805

tailOfConflicts : List Conflict
tailOfConflicts =
    -- from line 809 to the end
```</text>
  </message>
  <message>
    <ts>2017-07-24T04:13:19.853346</ts>
    <user>U5WD40ZA9</user>
    <text>I have two pages in a SPA, “Home” and  “Asset”, both of them have the same structure html wise. On Home I render a chart using ports (I give javascript some values and lets the lib insert itself, Elm has with other no idea that the dom is updated). If I then swap to the page with the same structure html wise, Elm is a little bit too smart and doesn’t re-render the html, but instead just change the classes of the divs which means that the chart is displayed on the Asset page. With other words, if I go from Home -&amp;gt; Asset I get this problem. If I go to Asset from any other page I don’t have this problem and I don’t have the problem with any other page getting the chart displayed when I move from Home -&amp;gt; other pages. My current solution is to add a wrapping div around the container where the chart is going to insert itself, this to trick Elm to re-render the html. This seemed like a better solution than using javascript to remove the chart itself when the url changes or something like that. Anyone else had this problem before and have some thoughts on a better solution? I don’t want another poor soul having to debug this issue in the future which is the type of issue that could take 8hrs to understand what is going on. In react I could have done something like “onComponentDidUnmount” to remove the chart when the Home page is swapped. Is there any Elm version of that?</text>
  </message>
  <message>
    <ts>2017-07-24T04:23:42.064512</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U5WD40ZA9&gt; Elm doesn't like foreign things touching its DOM. So what you'd do in Elm is used `Keyed` nodes so that you can control how the DOM is/can be reused</text>
  </message>
  <message>
    <ts>2017-07-24T04:44:46.513982</ts>
    <user>U2D07QZN3</user>
    <text>hmm- I deleted elm-stuff, and it rebuilt.  I'm using elm 0.18.0.  Still the same problem - IE ok, chrome no</text>
  </message>
  <message>
    <ts>2017-07-24T04:45:25.528389</ts>
    <user>U2D07QZN3</user>
    <text>Does your built version work on chrome?</text>
  </message>
  <message>
    <ts>2017-07-24T04:49:14.610990</ts>
    <user>U2Q5GJNTB</user>
    <text>Anybody here that implemented touch or gesture support for small screen in elm? Looks like the packages are either outdated or don't support simple swipe. Any recommendations?</text>
  </message>
  <message>
    <ts>2017-07-24T05:50:20.915976</ts>
    <user>U4SM7ECAG</user>
    <text>&lt;@U2Q5GJNTB&gt; I recently reverted to port and zingtouch (&lt;https://github.com/zingchart/zingtouch&gt;)</text>
  </message>
  <message>
    <ts>2017-07-24T05:50:36.921712</ts>
    <user>U4SM7ECAG</user>
    <text>which was easier to configure than hammer.js</text>
  </message>
  <message>
    <ts>2017-07-24T06:15:55.434829</ts>
    <user>U2Q5GJNTB</user>
    <text>Thanks , I will try that</text>
  </message>
  <message>
    <ts>2017-07-24T06:51:20.073034</ts>
    <user>U25KT36CE</user>
    <text>Hey everyone,
I am building my first nontrivial Elm SPA (Slack clone), and I've been wondering where to go for resources that could help me. I am particularly confused by complex models&amp;amp;updates, like, how to handle state for separate parts of the app (I am pretty comfortable with smaller apps). Should I use Richard Feldman's real world SPA as an example and work my way through the source or is there some other way to help one build complex apps?
Thank you in advance, have a great day.</text>
  </message>
  <message>
    <ts>2017-07-24T06:58:22.195851</ts>
    <user>U4872964V</user>
    <text>&lt;@U25KT36CE&gt; Elm has the model of a single state (source of truth, it’s called) so thinking in terms of handling state for separate parts of the app can easily lead you wrong. Instead try to think about how to pass the relevant pieces of state to the parts of your app that need them (the subfunctions for view and update etc.)

Elm is a functional language, so it’s all about functions, what inputs they take and what result they give.</text>
  </message>
  <message>
    <ts>2017-07-24T06:59:46.220798</ts>
    <user>U25KT36CE</user>
    <text>I understand that, but having read some of Richard's SPA source I found that every "page" has its model and update, this is sort of the source of my confusion.</text>
  </message>
  <message>
    <ts>2017-07-24T07:00:15.230221</ts>
    <user>U4872964V</user>
    <text>yes, that’s because each page is sort of independent from the other pages, is your app also based on “pages”?</text>
  </message>
  <message>
    <ts>2017-07-24T07:00:44.239311</ts>
    <user>U25KT36CE</user>
    <text>So basically each page acts like a separate app?</text>
  </message>
  <message>
    <ts>2017-07-24T07:00:54.242026</ts>
    <user>U4872964V</user>
    <text>yes, basically</text>
  </message>
  <message>
    <ts>2017-07-24T07:01:09.246672</ts>
    <user>U25KT36CE</user>
    <text>Ah that never crossed my mind</text>
  </message>
  <message>
    <ts>2017-07-24T07:01:24.251305</ts>
    <user>U41NK9BM4</user>
    <text>Is it your case also?</text>
  </message>
  <message>
    <ts>2017-07-24T07:01:50.258856</ts>
    <user>U25KT36CE</user>
    <text>I think I willl have 2-3 parts that can be separated</text>
  </message>
  <message>
    <ts>2017-07-24T07:02:23.268781</ts>
    <user>U4872964V</user>
    <text>it’s tricky to give general advice because apps don’t all look the same. but starting from the model is always good advice, I think :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T07:02:38.273438</ts>
    <user>U25KT36CE</user>
    <text>Yeah I understand</text>
  </message>
  <message>
    <ts>2017-07-24T07:02:47.275782</ts>
    <user>U25KT36CE</user>
    <text>Thank you for the insight</text>
  </message>
  <message>
    <ts>2017-07-24T07:03:24.286429</ts>
    <user>U25KT36CE</user>
    <text>I will start with a single model and refactor when necessary</text>
  </message>
  <message>
    <ts>2017-07-24T07:03:48.293340</ts>
    <user>U4872964V</user>
    <text>if you look at the elm-spa-example, you can see that the model is a union type for all the pages, basically, so only one page is “active” at the same time</text>
  </message>
  <message>
    <ts>2017-07-24T07:04:05.297802</ts>
    <user>U4872964V</user>
    <text>(and some common state, the session)</text>
  </message>
  <message>
    <ts>2017-07-24T07:04:19.301819</ts>
    <user>U25KT36CE</user>
    <text>I totally missed that one</text>
  </message>
  <message>
    <ts>2017-07-24T07:04:31.304918</ts>
    <user>U25KT36CE</user>
    <text>Gotta read it more carefully</text>
  </message>
  <message>
    <ts>2017-07-24T07:04:37.306549</ts>
    <user>U25KT36CE</user>
    <text>Thank you very much</text>
  </message>
  <message>
    <ts>2017-07-24T07:05:23.319586</ts>
    <user>U25KT36CE</user>
    <text>This was my first question here, I didn't expect such quick answers</text>
  </message>
  <message>
    <ts>2017-07-24T07:05:39.324214</ts>
    <user>U25KT36CE</user>
    <text>So now I have no excuse to postpone coding</text>
  </message>
  <message>
    <ts>2017-07-24T07:05:44.325434</ts>
    <user>U25KT36CE</user>
    <text>:grinning: </text>
  </message>
  <message>
    <ts>2017-07-24T07:06:02.330604</ts>
    <user>U41NK9BM4</user>
    <text>We are fast as lightning. :upside_down_face:</text>
  </message>
  <message>
    <ts>2017-07-24T07:06:16.334509</ts>
    <user>U4872964V</user>
    <text>No, you should start coding and not think too much about the structure etc. You can always refactor later. Elm is the best refactoring experience yet</text>
  </message>
  <message>
    <ts>2017-07-24T07:06:43.341902</ts>
    <user>U4872964V</user>
    <text>It’s almost impossible to get the structure right from the start anyway, I never do</text>
  </message>
  <message>
    <ts>2017-07-24T07:08:40.374261</ts>
    <user>U25KT36CE</user>
    <text>I see</text>
  </message>
  <message>
    <ts>2017-07-24T07:19:39.557641</ts>
    <user>U0H3A9XLN</user>
    <text>Is there a way to pattern match list within some tagged type?</text>
  </message>
  <message>
    <ts>2017-07-24T07:19:58.563056</ts>
    <user>U0H3A9XLN</user>
    <text>Something like `RemoteData.Success x :: xs`</text>
  </message>
  <message>
    <ts>2017-07-24T07:20:02.563988</ts>
    <user>U3SJEDR96</user>
    <text>Sure</text>
  </message>
  <message>
    <ts>2017-07-24T07:21:19.585763</ts>
    <user>U3SJEDR96</user>
    <text>though that would match if you were matching a list of remotedatas, rather than a remotedata of a list, so you may want `Success ( x :: xs )` instead</text>
  </message>
  <message>
    <ts>2017-07-24T07:27:37.693968</ts>
    <user>U0H3A9XLN</user>
    <text>Hm, getting quite weird error
```
This tuple is causing problems in this pattern match. - The pattern matches things of type:

    ( a, b, c )

But the values it will actually be trying to match are:

    RemoteData.RemoteData
        Http.Error
        ( List Foo
        , List Bar
        , List Baz
        )
```</text>
  </message>
  <message>
    <ts>2017-07-24T07:29:00.718393</ts>
    <user>U0H3A9XLN</user>
    <text>Ah, I see now, nvm</text>
  </message>
  <message>
    <ts>2017-07-24T07:29:02.719073</ts>
    <user>U0H3A9XLN</user>
    <text>thanks for help</text>
  </message>
  <message>
    <ts>2017-07-24T08:06:08.378729</ts>
    <user>U41NK9BM4</user>
    <text>Out of curiosity: I see mentioned `WebData` and `RemoteData`. What are the differences? Is one more up-to-date then the other?</text>
  </message>
  <message>
    <ts>2017-07-24T08:09:47.448553</ts>
    <user>U4872964V</user>
    <text>`WebData` is just a special case of `RemoteData` for http requests</text>
  </message>
  <message>
    <ts>2017-07-24T08:10:34.464320</ts>
    <user>U4872964V</user>
    <text>&lt;http://package.elm-lang.org/packages/krisajenkins/remotedata/4.3.0/RemoteData#WebData&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T08:39:16.072042</ts>
    <user>U195KCE9X</user>
    <text>hi guys, i have a question about mouse subscriptions</text>
  </message>
  <message>
    <ts>2017-07-24T08:56:38.483650</ts>
    <user>U1FFA46TT</user>
    <text>I actually tested it with Chrome only :smile:</text>
  </message>
  <message>
    <ts>2017-07-24T08:57:22.502018</ts>
    <user>U1FFA46TT</user>
    <text>does it work for you splitting the list into smaller lists?</text>
  </message>
  <message>
    <ts>2017-07-24T09:12:49.921139</ts>
    <user>U60SXAF96</user>
    <text>HOLY CRAP WEBDATA IS AWESOME.</text>
  </message>
  <message>
    <ts>2017-07-24T09:16:54.036682</ts>
    <user>U1FCZNA7R</user>
    <text>I'm working on internal "elm popularization" presentation to be presented in my company. I'm anticipating some questions that might be asked. When talking about elm values being immutable I'm anticipating question "Is it efficient to create copy of big immutable values every time I'm 'modyfying' existing value"? Does elm's implementation have a concept similar to Haskell's value sharing to save space/make modifications more efficient? Links to any blog post/discussion would be very  welcome :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T09:18:50.091518</ts>
    <user>U4872964V</user>
    <text>&lt;@U1FCZNA7R&gt; yes, Elm shares values very efficiently</text>
  </message>
  <message>
    <ts>2017-07-24T09:21:32.171358</ts>
    <user>U4872964V</user>
    <text>and immutability is the reason why the rendering is so fast, it does not have to take into account that values may have been modified, since they are immutable</text>
  </message>
  <message>
    <ts>2017-07-24T09:22:06.187738</ts>
    <user>U3SJEDR96</user>
    <text>Elm uses persistent collections and all the usual tricks that come with those for being space-efficient.</text>
  </message>
  <message>
    <ts>2017-07-24T09:22:28.198589</ts>
    <user>U3SJEDR96</user>
    <text>also: &lt;https://roman01la.github.io/js-memory-usage/&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T09:23:42.235110</ts>
    <user>U4872964V</user>
    <text>&lt;@U3SJEDR96&gt;, that one did not look good in safari</text>
  </message>
  <message>
    <ts>2017-07-24T09:24:39.263587</ts>
    <user>U3SJEDR96</user>
    <text>Haha, I see, that's pretty bad :smile:</text>
  </message>
  <message>
    <ts>2017-07-24T10:23:40.267193</ts>
    <user>U1L4GLFJ6</user>
    <text>hello everybody</text>
  </message>
  <message>
    <ts>2017-07-24T10:23:47.271290</ts>
    <user>U1L4GLFJ6</user>
    <text>how do you union type two type Alias</text>
  </message>
  <message>
    <ts>2017-07-24T10:24:42.305662</ts>
    <user>U1L4GLFJ6</user>
    <text>if I have `type alias Abc = { x: Int }`  and `type alias Xyz = { y : String}` how can I create `type Def = List ( Abc | Xyz )`</text>
  </message>
  <message>
    <ts>2017-07-24T10:25:16.326707</ts>
    <user>U1UGYHGCA</user>
    <text>`type Def = SomeName Abc | AnotherName Xyz`</text>
  </message>
  <message>
    <ts>2017-07-24T10:25:39.340355</ts>
    <user>U1L4GLFJ6</user>
    <text>got it</text>
  </message>
  <message>
    <ts>2017-07-24T10:40:16.881985</ts>
    <user>U4FFZE17Z</user>
    <text>hi everyone, I’m trying to get the duplicates out of a list : [“1”,“2",“3”,“2",“4”,“5",“6”,“4"] should give me [“2”,“4"].
Does someone know how to do this ? I’ve been trying with List.Extra “unique” function and change it to my needs but without success...
Here is the Ellie : &lt;https://ellie-app.com/3Qg79MFZm38a1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T10:41:24.924663</ts>
    <user>U0LPMPL2U</user>
    <text>You could do `Set.toList &amp;lt;&amp;lt; Set.fromList`</text>
  </message>
  <message>
    <ts>2017-07-24T10:42:28.963996</ts>
    <user>U1UGYHGCA</user>
    <text>Wouldn't that give you `["1", "2", "3", "4", "5", "6" ]` ?</text>
  </message>
  <message>
    <ts>2017-07-24T10:43:18.994433</ts>
    <user>U0LPMPL2U</user>
    <text>oh, you want the duplicated values, not a unique list</text>
  </message>
  <message>
    <ts>2017-07-24T10:43:55.017772</ts>
    <user>U4FFZE17Z</user>
    <text>yes :wink:</text>
  </message>
  <message>
    <ts>2017-07-24T10:44:14.029444</ts>
    <user>U0LPMPL2U</user>
    <text>if the duplicated values show up three times in the original list, should they show up two times in the result?</text>
  </message>
  <message>
    <ts>2017-07-24T10:44:28.038642</ts>
    <user>U4FFZE17Z</user>
    <text>nope, just one time</text>
  </message>
  <message>
    <ts>2017-07-24T10:44:34.042340</ts>
    <user>U1UGYHGCA</user>
    <text>Maybe using a Dict to count the number of occurences</text>
  </message>
  <message>
    <ts>2017-07-24T10:44:37.043981</ts>
    <user>U0PC31XD0</user>
    <text>I’d do it like: Sort the list, then walk through it with a “previous element” accumulator arg. if current value is same as previous, add to the “results” set (use a Set so they just show up once)</text>
  </message>
  <message>
    <ts>2017-07-24T10:44:49.051289</ts>
    <user>U0PC31XD0</user>
    <text>Dict is a great idea too</text>
  </message>
  <message>
    <ts>2017-07-24T10:45:37.082195</ts>
    <user>U4FFZE17Z</user>
    <text>ok thanks, i’ll try both!</text>
  </message>
  <message>
    <ts>2017-07-24T10:46:02.098235</ts>
    <user>U0LPMPL2U</user>
    <text>You could use `List.filter` to remove the unique values from the initial list</text>
  </message>
  <message>
    <ts>2017-07-24T10:55:15.447973</ts>
    <user>U1UGYHGCA</user>
    <text>&lt;@U4FFZE17Z&gt; &lt;https://ellie-app.com/3QhmK8mdFyqa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T11:00:37.659625</ts>
    <user>U4FFZE17Z</user>
    <text>&lt;@U1UGYHGCA&gt; awesome :smiley: thank you</text>
  </message>
  <message>
    <ts>2017-07-24T11:01:45.706915</ts>
    <user>U1UGYHGCA</user>
    <text>Np. Maybe filtering the Dict itself and then get keys would be better</text>
  </message>
  <message>
    <ts>2017-07-24T11:02:47.748052</ts>
    <user>U1UGYHGCA</user>
    <text>&lt;@U4FFZE17Z&gt; Probably a bit better &lt;https://ellie-app.com/3QhmK8mdFyqa1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T11:05:01.837324</ts>
    <user>U4FFZE17Z</user>
    <text>:+1: nice one</text>
  </message>
  <message>
    <ts>2017-07-24T11:05:23.851745</ts>
    <user>U4872964V</user>
    <text>&lt;@U4FFZE17Z&gt; if you take your ellie, and just move the `first ::` from the `else` branch to the `then` branch of the `if` it should work</text>
  </message>
  <message>
    <ts>2017-07-24T11:05:53.870580</ts>
    <user>U4872964V</user>
    <text>since it’s basically the inverse of unique</text>
  </message>
  <message>
    <ts>2017-07-24T11:06:40.900265</ts>
    <user>U4FFZE17Z</user>
    <text>ahah yes indeed it works, I tried everything but that :smiley:</text>
  </message>
  <message>
    <ts>2017-07-24T11:06:57.910747</ts>
    <user>U4872964V</user>
    <text>If you don’t want multiple matches to show multiple times, you need to do the `Set.insert` in both branches</text>
  </message>
  <message>
    <ts>2017-07-24T11:07:17.923471</ts>
    <user>U4872964V</user>
    <text>wait, no</text>
  </message>
  <message>
    <ts>2017-07-24T11:07:37.936095</ts>
    <user>U4872964V</user>
    <text>you need to call `unique` afterwards, that’s easiest :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T11:08:09.956293</ts>
    <user>U4FFZE17Z</user>
    <text>yes that’s what I was trying to do at first, perfect</text>
  </message>
  <message>
    <ts>2017-07-24T11:08:25.966106</ts>
    <user>U4872964V</user>
    <text>anyway, there are multiple solutions for sure :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T12:36:00.180280</ts>
    <user>U1G51S63S</user>
    <text>Hi folks! do you think it's possible to insert raw html node w/o container (so not via `innerHtml`) somehow and also put a classname for this node? Thought maybe it's possible to do via Native.

I am trying to create something like &lt;https://github.com/jhamlet/svg-react-loader&gt; 

I am using &lt;https://github.com/NoRedInk/elm-assets-loader&gt; with `raw-loader` already so I got SVG as string by path only on Elm side.</text>
  </message>
  <message>
    <ts>2017-07-24T12:36:49.207955</ts>
    <user>U1G51S63S</user>
    <text>And now I am able to use this string via `innerHtml` but thought maybe it's possible to get more :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T12:53:42.769747</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, that's either innerHtml or a custom virtual-dom node (which involves some native to hook things up)</text>
  </message>
  <message>
    <ts>2017-07-24T13:00:28.002025</ts>
    <user>U4872964V</user>
    <text>&lt;@U1G51S63S&gt; is it an alternative to use an `&amp;lt;img src="data:image/svg+xml;utf8,&amp;lt;svg&amp;gt; ... &amp;lt;/svg&amp;gt;"/&amp;gt;`?</text>
  </message>
  <message>
    <ts>2017-07-24T13:01:10.026721</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U4872964V&gt; I want to keep them styleable. looking at `object` now and svg defs as well</text>
  </message>
  <message>
    <ts>2017-07-24T13:01:50.051093</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U1G51S63S&gt; Why are you trying to do this?</text>
  </message>
  <message>
    <ts>2017-07-24T13:03:35.111496</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0EUHKVGB&gt; to not hardcode svg paths into code and use webpack loader instead. since I will need to style SVG's and inlining is the most customizable way to style it later</text>
  </message>
  <message>
    <ts>2017-07-24T13:04:13.132272</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U1G51S63S&gt; Pass them in via flags or load them via json.</text>
  </message>
  <message>
    <ts>2017-07-24T13:05:32.176517</ts>
    <user>U1G51S63S</user>
    <text>I have no problems with receiving svg code at all (just using elm-assets-loader)</text>
  </message>
  <message>
    <ts>2017-07-24T13:06:17.201042</ts>
    <user>U0EUHKVGB</user>
    <text>I know you are trying to avoid boilerplate. But you are making your code more fragile and prone to breaking randomly by doing this.</text>
  </message>
  <message>
    <ts>2017-07-24T13:07:01.225605</ts>
    <user>U0EUHKVGB</user>
    <text>Use flags, or json to receive the paths. Generate the svg views from that at runtime.</text>
  </message>
  <message>
    <ts>2017-07-24T13:07:08.229110</ts>
    <user>U1G51S63S</user>
    <text>so I have `Icons.elm` with all my icons now ```portfolioManagement : Arg msg
portfolioManagement =
    icon257 "portfolio-management"
        """&amp;lt;path fill="#D1D3D4" d="M128.5 115.862l-90.205 27.51v37.177l90.205 27.508 90.205-27.508v-37.177z"/&amp;gt;&amp;lt;path fill="#808285" d="M128.5 48.943L38.295 76.455v37.176l90.205 27.51 90.205-27.51V76.455z"/&amp;gt;&amp;lt;path opacity=".5" fill="#D1D3D4" d="M87.054 128.503l41.446 12.638 41.445-12.638-41.445-12.641z"/&amp;gt;"""```</text>
  </message>
  <message>
    <ts>2017-07-24T13:07:22.236849</ts>
    <user>U1G51S63S</user>
    <text>but it's about 2000 lines already and I should add 300 more icons now :smile:</text>
  </message>
  <message>
    <ts>2017-07-24T13:09:05.291714</ts>
    <user>U1G51S63S</user>
    <text>icon257/icon are ```icon : String -&amp;gt; String -&amp;gt; String -&amp;gt; String -&amp;gt; Svg msg
icon viewbox name body className =
    let
        attributes =
            [ Svg.Attributes.viewBox viewbox
            , Svg.Attributes.class ("icon icon--" ++ name ++ " " ++ className)
            , innerHtml body
            ]
    in
        Svg.svg attributes []


icon257 : String -&amp;gt; String -&amp;gt; String -&amp;gt; Svg msg
icon257 =
    icon "0 0 257 257"
``` 

(className is a string because `Svg.Attributes.class` was not special case like in `Html` and not allowed to use twice for example. looks like fixed already, need to rewrite)</text>
  </message>
  <message>
    <ts>2017-07-24T13:10:21.333006</ts>
    <user>U1G51S63S</user>
    <text>but this code requires a lot of work - need to `svgo` icons, extract paths (and avoid root `svg` tag), paste it here. I think it will be easier when webpack will do it</text>
  </message>
  <message>
    <ts>2017-07-24T13:10:48.347583</ts>
    <user>U1G51S63S</user>
    <text>and it will be a hell when icons will change</text>
  </message>
  <message>
    <ts>2017-07-24T13:11:26.368063</ts>
    <user>U1G51S63S</user>
    <text>I am really just considering other ways now - `object`, svg sprites, etc.</text>
  </message>
  <message>
    <ts>2017-07-24T13:11:45.378977</ts>
    <user>U1G51S63S</user>
    <text>looks like `object` allows some customizations too</text>
  </message>
  <message>
    <ts>2017-07-24T13:24:01.778391</ts>
    <user>U6D1E91QV</user>
    <text>is there special magic involved in the `Json.Decode` functions or can they be implemented in pure elm?</text>
  </message>
  <message>
    <ts>2017-07-24T13:27:41.900363</ts>
    <user>U0LPMPL2U</user>
    <text>You can implement json decoders in pure elm</text>
  </message>
  <message>
    <ts>2017-07-24T13:28:12.916812</ts>
    <user>U0LPMPL2U</user>
    <text>under the hood, `Json.Decode` may have some fancy stuff but you never need to deal with that</text>
  </message>
  <message>
    <ts>2017-07-24T13:28:25.923966</ts>
    <user>U6D1E91QV</user>
    <text>i'm specifically looking for that fancy stuff though</text>
  </message>
  <message>
    <ts>2017-07-24T13:28:46.935742</ts>
    <user>U6D1E91QV</user>
    <text>i am trying to construct a record piece by piece from results</text>
  </message>
  <message>
    <ts>2017-07-24T13:28:58.942214</ts>
    <user>U6D1E91QV</user>
    <text>from a form record</text>
  </message>
  <message>
    <ts>2017-07-24T13:29:16.951865</ts>
    <user>U0LPMPL2U</user>
    <text>You can do that in pure elm using the functions provided by `Json.Decode`</text>
  </message>
  <message>
    <ts>2017-07-24T13:29:34.961881</ts>
    <user>U6D1E91QV</user>
    <text>there's no json involved there, i am merely trying to copy the api</text>
  </message>
  <message>
    <ts>2017-07-24T13:30:10.982324</ts>
    <user>U0LPMPL2U</user>
    <text>Ah, so you have many `Result` values that you want to combine together?</text>
  </message>
  <message>
    <ts>2017-07-24T13:30:28.992645</ts>
    <user>U6D1E91QV</user>
    <text>in a way -- and collect in a record</text>
  </message>
  <message>
    <ts>2017-07-24T13:30:41.000348</ts>
    <user>U6D1E91QV</user>
    <text>can i paste stuff in here?</text>
  </message>
  <message>
    <ts>2017-07-24T13:30:52.006339</ts>
    <user>U0LPMPL2U</user>
    <text>sure that would be helpful :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T13:31:04.012962</ts>
    <user>U6D1E91QV</user>
    <text>```
type FieldValue raw val err
    = Empty
    | Partial raw
    | Invalid raw err
    | Valid val
```</text>
  </message>
  <message>
    <ts>2017-07-24T13:31:42.034560</ts>
    <user>U6D1E91QV</user>
    <text>that's a field type for a for field, which gets updated upon input and may or may not be valid</text>
  </message>
  <message>
    <ts>2017-07-24T13:32:09.049237</ts>
    <user>U0LPMPL2U</user>
    <text>OK</text>
  </message>
  <message>
    <ts>2017-07-24T13:32:11.050118</ts>
    <user>U6D1E91QV</user>
    <text>```
extractField : FieldValue raw val err -&amp;gt; Result (List err2) val
extractField =
    value &amp;gt;&amp;gt; Result.fromMaybe []
```</text>
  </message>
  <message>
    <ts>2017-07-24T13:32:36.064332</ts>
    <user>U6D1E91QV</user>
    <text>this will turn any FieldValue into either a `val` or a list of errors</text>
  </message>
  <message>
    <ts>2017-07-24T13:33:01.078075</ts>
    <user>U6D1E91QV</user>
    <text>example use
```
extractUsername form username = (extractField &amp;lt;&amp;lt; .username)
```</text>
  </message>
  <message>
    <ts>2017-07-24T13:33:33.095756</ts>
    <user>U6D1E91QV</user>
    <text>given some sort of form record with a field `username`, this will extract said value as a result</text>
  </message>
  <message>
    <ts>2017-07-24T13:33:56.108003</ts>
    <user>U0LPMPL2U</user>
    <text>Where does the list of errors come from? Doesn't the `Invalid` tag only allow one error?</text>
  </message>
  <message>
    <ts>2017-07-24T13:33:59.109714</ts>
    <user>U6D1E91QV</user>
    <text>(excuse the typo please)</text>
  </message>
  <message>
    <ts>2017-07-24T13:34:56.140652</ts>
    <user>U6D1E91QV</user>
    <text>the list is always empty initially</text>
  </message>
  <message>
    <ts>2017-07-24T13:35:09.147781</ts>
    <user>U6D1E91QV</user>
    <text>the errors collected are not on a field, but on a form level</text>
  </message>
  <message>
    <ts>2017-07-24T13:35:45.167082</ts>
    <user>U6D1E91QV</user>
    <text>i mean to add additional validators that validate on a form level, e.g. can check if password1 and password2 are the same</text>
  </message>
  <message>
    <ts>2017-07-24T13:35:57.173534</ts>
    <user>U0LPMPL2U</user>
    <text>hmmmm... since `extractField` only deals with a single field, shouldn't it only return a single error?</text>
  </message>
  <message>
    <ts>2017-07-24T13:36:11.180888</ts>
    <user>U6D1E91QV</user>
    <text>but you're right, that needs to go</text>
  </message>
  <message>
    <ts>2017-07-24T13:36:35.194429</ts>
    <user>U6D1E91QV</user>
    <text>i think even a Maybe would be enough here. anyway, the idea is to have a way of transforming a Form into a model</text>
  </message>
  <message>
    <ts>2017-07-24T13:36:47.201539</ts>
    <user>U0LPMPL2U</user>
    <text>makes sense</text>
  </message>
  <message>
    <ts>2017-07-24T13:37:03.210000</ts>
    <user>U6D1E91QV</user>
    <text>the matching model would be:
```
type alias Model = { username: String, password: String }
```</text>
  </message>
  <message>
    <ts>2017-07-24T13:37:14.216263</ts>
    <user>U6D1E91QV</user>
    <text>at that point, each field is a valid instance of a possibly valid value</text>
  </message>
  <message>
    <ts>2017-07-24T13:38:01.241789</ts>
    <user>U0LPMPL2U</user>
    <text>So you'd like to do something like `Field.map2 Model field1 field2` ?</text>
  </message>
  <message>
    <ts>2017-07-24T13:38:12.247489</ts>
    <user>U6D1E91QV</user>
    <text>yes, sort of, i believe</text>
  </message>
  <message>
    <ts>2017-07-24T13:38:29.257093</ts>
    <user>U6D1E91QV</user>
    <text>field1 and field2 would probably be extraction functions?</text>
  </message>
  <message>
    <ts>2017-07-24T13:38:42.264131</ts>
    <user>U6D1E91QV</user>
    <text>or Decoders, so to speak</text>
  </message>
  <message>
    <ts>2017-07-24T13:39:49.301092</ts>
    <user>U0LPMPL2U</user>
    <text>so extracting each field already gives you a `Result` right?</text>
  </message>
  <message>
    <ts>2017-07-24T13:40:04.309197</ts>
    <user>U6D1E91QV</user>
    <text>at the moment, yes. you got me thinking that a `Maybe` is enough.</text>
  </message>
  <message>
    <ts>2017-07-24T13:40:23.319464</ts>
    <user>U0LPMPL2U</user>
    <text>Both `Result` and `Maybe` define a `map2` function</text>
  </message>
  <message>
    <ts>2017-07-24T13:40:25.320758</ts>
    <user>U6D1E91QV</user>
    <text>basically, the decoding needs to only work if every field is `Valid ...`</text>
  </message>
  <message>
    <ts>2017-07-24T13:40:49.334087</ts>
    <user>U6D1E91QV</user>
    <text>woa</text>
  </message>
  <message>
    <ts>2017-07-24T13:41:12.346391</ts>
    <user>U6D1E91QV</user>
    <text>that may be what i'm looking for...</text>
  </message>
  <message>
    <ts>2017-07-24T13:42:16.382118</ts>
    <user>U0LPMPL2U</user>
    <text>I think you could do something like `Maybe.map2 Model (fetchUsername form) (fetchPassword form)`</text>
  </message>
  <message>
    <ts>2017-07-24T13:42:41.395515</ts>
    <user>U6D1E91QV</user>
    <text>yes. probably better to use (fetch .username)</text>
  </message>
  <message>
    <ts>2017-07-24T13:42:50.400792</ts>
    <user>U0LPMPL2U</user>
    <text>:thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-24T13:43:20.417404</ts>
    <user>U6D1E91QV</user>
    <text>```
value : FieldValue raw val err -&amp;gt; Maybe val
value formValue =
    case formValue of
        Valid val -&amp;gt;
            Just val

        _ -&amp;gt;
            Nothing
```</text>
  </message>
  <message>
    <ts>2017-07-24T13:44:30.456799</ts>
    <user>U0LPMPL2U</user>
    <text>that works</text>
  </message>
  <message>
    <ts>2017-07-24T13:45:47.499598</ts>
    <user>U6D1E91QV</user>
    <text>almost</text>
  </message>
  <message>
    <ts>2017-07-24T13:47:47.565958</ts>
    <user>U0LPMPL2U</user>
    <text>I wrote an article comparing `map2` on `Maybe`, `List`, `Json.Decode` and `Random` that you may find useful: &lt;https://robots.thoughtbot.com/elms-universal-pattern&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T13:48:20.584258</ts>
    <user>U6D1E91QV</user>
    <text>```
extractModel : MyForm -&amp;gt; Maybe MyModel
extractModel model =
    Maybe.map2 MyModel (value &amp;lt;| .username model) (value &amp;lt;| .password model)
```</text>
  </message>
  <message>
    <ts>2017-07-24T13:48:59.606276</ts>
    <user>U6D1E91QV</user>
    <text>i'll read the article. but the code seems to be one step away from being as smooth at the json code - i would prefer to pass model only once</text>
  </message>
  <message>
    <ts>2017-07-24T13:49:38.627849</ts>
    <user>U0LPMPL2U</user>
    <text>You mean you'd rather not have to call `value &amp;lt;| .username model` ?</text>
  </message>
  <message>
    <ts>2017-07-24T13:50:03.641881</ts>
    <user>U6D1E91QV</user>
    <text>yes. i'd rather have a Decode.string</text>
  </message>
  <message>
    <ts>2017-07-24T13:51:47.700663</ts>
    <user>U0LPMPL2U</user>
    <text>hmmm</text>
  </message>
  <message>
    <ts>2017-07-24T13:53:13.749015</ts>
    <user>U6D1E91QV</user>
    <text>i'm not sure if that chaining tricks works that decoders do, to get more than the predefined number of items as well</text>
  </message>
  <message>
    <ts>2017-07-24T13:53:32.759545</ts>
    <user>U0LPMPL2U</user>
    <text>the tricky thing is that we're switching from the `Field` context to the `Maybe` context</text>
  </message>
  <message>
    <ts>2017-07-24T13:54:08.779337</ts>
    <user>U0LPMPL2U</user>
    <text>What you're doing is the equivalent of calling `Json.Decode.fromString` a couple times and combining the results</text>
  </message>
  <message>
    <ts>2017-07-24T13:54:19.785187</ts>
    <user>U3SJEDR96</user>
    <text>so `Decoder` is _basically_ `type alias Decoder a = Json.Value -&amp;gt; Result String a`, and the `Json.Value` is only passed in when you do the actual decoding, by `decodeValue`</text>
  </message>
  <message>
    <ts>2017-07-24T13:54:21.786471</ts>
    <user>U0LPMPL2U</user>
    <text>if you were doing that you _would_ have to pass the json string multiple times</text>
  </message>
  <message>
    <ts>2017-07-24T13:54:56.805940</ts>
    <user>U3SJEDR96</user>
    <text>so in your case, you'd need something other than `Maybe` to do such a thing, but what you have right now is much more Elm-ish, and that's a good thing</text>
  </message>
  <message>
    <ts>2017-07-24T13:55:05.810963</ts>
    <user>U3SJEDR96</user>
    <text>being explicit is less confusing, mostly</text>
  </message>
  <message>
    <ts>2017-07-24T13:55:36.829395</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U3SJEDR96&gt; how do i handle the missing map9 though, for example?</text>
  </message>
  <message>
    <ts>2017-07-24T13:55:53.838579</ts>
    <user>U3SJEDR96</user>
    <text>`andMap = Maybe.map2 (|&amp;gt;)`</text>
  </message>
  <message>
    <ts>2017-07-24T13:56:07.846853</ts>
    <user>U3SJEDR96</user>
    <text>and now you can use it `pipeline` style</text>
  </message>
  <message>
    <ts>2017-07-24T13:56:50.871766</ts>
    <user>U3SJEDR96</user>
    <text>`Just MyModel |&amp;gt; andMap (value &amp;lt;| .username model) |&amp;gt; andMap (value &amp;lt;| .password model)`</text>
  </message>
  <message>
    <ts>2017-07-24T13:57:25.891876</ts>
    <user>U6D1E91QV</user>
    <text>*scribbles down everything*</text>
  </message>
  <message>
    <ts>2017-07-24T13:58:00.912260</ts>
    <user>U6D1E91QV</user>
    <text>i still want to build the decoder out of curiosity though</text>
  </message>
  <message>
    <ts>2017-07-24T14:03:41.109098</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3Qmd44kZhjja1/0&gt; you'd have something like that</text>
  </message>
  <message>
    <ts>2017-07-24T14:04:10.125803</ts>
    <user>U3SJEDR96</user>
    <text>basically you end up with a bunch of partially applied functions, and then run them against some input, but they're all bundled up in a little box</text>
  </message>
  <message>
    <ts>2017-07-24T14:05:15.163097</ts>
    <user>U6D1E91QV</user>
    <text>i see, the trick is in defining a new map2 that passes the model in</text>
  </message>
  <message>
    <ts>2017-07-24T14:06:15.197288</ts>
    <user>U0LPMPL2U</user>
    <text>Shouldn't `extractModel : MyForm -&amp;gt; Maybe MyModel` be `extractModel : Extractor a -&amp;gt;  MyForm -&amp;gt; Maybe a` ?</text>
  </message>
  <message>
    <ts>2017-07-24T14:07:57.253526</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, sorry, forgot to remove that one, it should actually be `extractModel : Extractor MyForm MyModel`</text>
  </message>
  <message>
    <ts>2017-07-24T14:08:41.277477</ts>
    <user>U3SJEDR96</user>
    <text>let me rework that a little..</text>
  </message>
  <message>
    <ts>2017-07-24T14:09:34.306294</ts>
    <user>U0LPMPL2U</user>
    <text>basically, all the "decoders" are combining partially applied functions and `extract` runs the function against a model and returns a Maybe</text>
  </message>
  <message>
    <ts>2017-07-24T14:10:10.325254</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://ellie-app.com/3Qmd44kZhjja1/1&gt; there</text>
  </message>
  <message>
    <ts>2017-07-24T14:13:21.431316</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U3SJEDR96&gt; that does look much nicer. is there any harm in using that variant instead of the Maybe one?</text>
  </message>
  <message>
    <ts>2017-07-24T14:14:47.477446</ts>
    <user>U3SJEDR96</user>
    <text>No harm, though it's another layer of abstraction, which you need to write, and anyone using your code has to "grasp" :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T14:15:43.508319</ts>
    <user>U6D1E91QV</user>
    <text>i'll take it</text>
  </message>
  <message>
    <ts>2017-07-24T14:16:07.521644</ts>
    <user>U6D1E91QV</user>
    <text>thanks guys</text>
  </message>
  <message>
    <ts>2017-07-24T14:16:40.540393</ts>
    <user>U4WH8STNX</user>
    <text>please quit trolling the slackbot, he only wants to help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T14:17:01.551901</ts>
    <user>U6D1E91QV</user>
    <text>eh, i'll stay clear of that</text>
  </message>
  <message>
    <ts>2017-07-24T14:17:49.577711</ts>
    <user>U0LPMPL2U</user>
    <text>If do end up using the "extractor" approach, I'd probably wrap it in a type and provide an explicit `extract` function so you don't leak the internals</text>
  </message>
  <message>
    <ts>2017-07-24T14:18:12.590225</ts>
    <user>U6D1E91QV</user>
    <text>don't i have wrappers already?</text>
  </message>
  <message>
    <ts>2017-07-24T14:18:27.599154</ts>
    <user>U6D1E91QV</user>
    <text>`FieldValue` and `Extractor` ?</text>
  </message>
  <message>
    <ts>2017-07-24T14:18:49.611024</ts>
    <user>U6D1E91QV</user>
    <text>or should Extractor not be an alias, but a newtype?</text>
  </message>
  <message>
    <ts>2017-07-24T14:19:09.621739</ts>
    <user>U0LPMPL2U</user>
    <text>right, make Extractor it's own type, not an alias</text>
  </message>
  <message>
    <ts>2017-07-24T14:19:56.648609</ts>
    <user>U0LPMPL2U</user>
    <text>right now, `main` is: `text &amp;lt;| toString &amp;lt;| extractModel myForm`</text>
  </message>
  <message>
    <ts>2017-07-24T14:20:12.657338</ts>
    <user>U0LPMPL2U</user>
    <text>it's treating `extractModel` like a function</text>
  </message>
  <message>
    <ts>2017-07-24T14:20:14.658351</ts>
    <user>U0LPMPL2U</user>
    <text>which it is</text>
  </message>
  <message>
    <ts>2017-07-24T14:20:15.658825</ts>
    <user>U6D1E91QV</user>
    <text>```
type Extractor2 model val
    = Extractor2 (model -&amp;gt; Maybe val)```</text>
  </message>
  <message>
    <ts>2017-07-24T14:20:28.666408</ts>
    <user>U0LPMPL2U</user>
    <text>yup</text>
  </message>
  <message>
    <ts>2017-07-24T14:20:45.675732</ts>
    <user>U3SJEDR96</user>
    <text>exactly. And wrap everything in `Extractor2 &amp;lt;|` and use `(Extractor2 theFunction)` in declarations</text>
  </message>
  <message>
    <ts>2017-07-24T14:21:07.687821</ts>
    <user>U3SJEDR96</user>
    <text>though I don't really think of that as a necessity</text>
  </message>
  <message>
    <ts>2017-07-24T14:21:26.698528</ts>
    <user>U6D1E91QV</user>
    <text>can't i decompose on definition?...apparently, i can't</text>
  </message>
  <message>
    <ts>2017-07-24T14:22:18.727647</ts>
    <user>U3SJEDR96</user>
    <text>you can, `map f (Extractor2 extractor) = Extractor2 &amp;lt;| \model -&amp;gt; extractor model |&amp;gt; f`</text>
  </message>
  <message>
    <ts>2017-07-24T14:22:19.728278</ts>
    <user>U0LPMPL2U</user>
    <text>You can only decompose in the definition if there is only one constructor</text>
  </message>
  <message>
    <ts>2017-07-24T14:22:34.736704</ts>
    <user>U6D1E91QV</user>
    <text>oh i forgot to rewrap</text>
  </message>
  <message>
    <ts>2017-07-24T14:23:44.775737</ts>
    <user>U0LPMPL2U</user>
    <text>`map` functions always follow the sequence unrwap, do thing, re-wrap :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T15:17:00.517142</ts>
    <user>U5X2ZRFDF</user>
    <text>I'm having trouble with designing some types. I'm creating a simplified model of what's going on in another application, for visualization purposes. The existing app uses a SQL database, thus a relational layout, and also computes some information on the fly. My model gets rid of some of the complexity.

Ideally I want the user to be able to initialize my app with a list of assessment event data. Then it will compute deterministically a bunch of related data. Both the assessment event data and the related data will be used in the visualization. When someone changes the view, it won't have to recompute that related data. Only if they choose to add/delete/modify an assessment event will it recompute the cache of related data.

The relationships between this data are fairly complex. I had hoped to create data structures that directly contained each other, but it may be easier to create IDs on the assessment events, put them into a Dict for indexing, and have the other elements reference them by ID. Does that seem reasonable?

Also, I'm concerned that I may need many variants on the same data type as I add more data to it. The original data specified by the user for an assessment event contains a limited set of fields. Then I'm going to compute more fields and want to cache the results. That includes the ID. It seems like too much coupling to have one function compute all those extra fields - so I guess I need a function that looks at one record type and returns a slightly larger record type. Perhaps this is where I need to take advantage of anonymous record types, where I can parameterize over the input type and only specify the fields I care about, and then specify that the output contains additional fields?</text>
  </message>
  <message>
    <ts>2017-07-24T15:19:09.581344</ts>
    <user>U5X2ZRFDF</user>
    <text>E.g., I'm afraid I'll end up with a proliferation of types like: AssessmentEvent, AssessmentEventWithId, AssessmentEventWithIdAndEffectiveDates, etc....</text>
  </message>
  <message>
    <ts>2017-07-24T15:27:34.836700</ts>
    <user>U2GPAEU1L</user>
    <text>Hey everyone, is this a bug: &lt;https://ellie-app.com/3QntKMSr7KRa1/1&gt;

When we start, the `a` has no `href`, but if you switch to an `a` with an `href` and then back, the `a` with no `href` now has an href…</text>
  </message>
  <message>
    <ts>2017-07-24T15:29:48.906122</ts>
    <user>U1UGYHGCA</user>
    <text>Looks like it :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T15:29:58.911121</ts>
    <user>U2GPAEU1L</user>
    <text>It pretty much _has_ to be a bug…

Same model, different view</text>
  </message>
  <message>
    <ts>2017-07-24T15:30:06.915268</ts>
    <user>U2GPAEU1L</user>
    <text>Filing an issue</text>
  </message>
  <message>
    <ts>2017-07-24T15:31:55.971479</ts>
    <user>U0F7JPK36</user>
    <text>oh weird, `href` is like a strange case where not having the attribute at all is different from having the attribute without a value</text>
  </message>
  <message>
    <ts>2017-07-24T15:32:37.992990</ts>
    <user>U2GPAEU1L</user>
    <text>Yes, I had this problem on my app, cause it starts creating links back to the base of the website even though no `href`</text>
  </message>
  <message>
    <ts>2017-07-24T15:32:57.002866</ts>
    <user>U2GPAEU1L</user>
    <text>Do you think I should put this in elm-lang/html or elm-lang/virtual-dom</text>
  </message>
  <message>
    <ts>2017-07-24T15:33:00.004400</ts>
    <user>U2GPAEU1L</user>
    <text>(The issue)</text>
  </message>
  <message>
    <ts>2017-07-24T15:34:13.041102</ts>
    <user>U5X2ZRFDF</user>
    <text>Oh, people answered my question on elm-discuss, thanks....</text>
  </message>
  <message>
    <ts>2017-07-24T15:36:18.103119</ts>
    <user>U2GPAEU1L</user>
    <text>I’m gonna go with vdom…</text>
  </message>
  <message>
    <ts>2017-07-24T15:38:16.162792</ts>
    <user>U0F7JPK36</user>
    <text>virtual-dom, this is a problem with patching i think</text>
  </message>
  <message>
    <ts>2017-07-24T15:44:08.341110</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/virtual-dom/blob/master/src/Native/VirtualDom.js#L496&gt; &amp;lt;- hm, do attributes actually return `undefined` when they're not set? I think they return the empty string :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-24T15:57:41.757794</ts>
    <user>U2GPAEU1L</user>
    <text>Issue here: &lt;https://github.com/elm-lang/virtual-dom/issues/109&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T15:57:54.764834</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U3SJEDR96&gt; I’m not sure, taking a look now</text>
  </message>
  <message>
    <ts>2017-07-24T15:58:46.792324</ts>
    <user>U3SJEDR96</user>
    <text>`var a = document.createElement('a'); a.title === ""`</text>
  </message>
  <message>
    <ts>2017-07-24T15:59:21.811146</ts>
    <user>U3SJEDR96</user>
    <text>`getAttribute` returns explicit `null`, though</text>
  </message>
  <message>
    <ts>2017-07-24T16:00:31.849396</ts>
    <user>U3SJEDR96</user>
    <text>I think the plain accessors are required to return the serialized version of the attribute, which - when absent - means empty string. I don't know where it says so in the spec, though, let me look that up</text>
  </message>
  <message>
    <ts>2017-07-24T16:10:26.159736</ts>
    <user>U3SJEDR96</user>
    <text>Okay, so; it's a little more complicated. But the gist is that attributes that are part of a DOM interface can only return `null` if they're defined as a `DOMString?`, which basically means "never", or at least I can't spot any optionals in the spec (&lt;https://www.w3.org/TR/DOM-Level-2-HTML/idl-definitions.html&gt;)</text>
  </message>
  <message>
    <ts>2017-07-24T16:11:40.197819</ts>
    <user>U3SJEDR96</user>
    <text>(and the spec on `DOMString` and `null`: &lt;https://heycam.github.io/webidl/#idl-DOMString&gt; )</text>
  </message>
  <message>
    <ts>2017-07-24T16:17:49.382481</ts>
    <user>U3L8MM10T</user>
    <text>Due to code logic, if I am casing on a branch that the code should never reach, is it better to use a benign value (such as `0`) , or a failing value (such as `Infinity = 1000^1000`) , or perhaps force a system crash?  (The comment in all 3 cases would be `-- should never get here`.)  And how exactly would I force a crash?</text>
  </message>
  <message>
    <ts>2017-07-24T16:18:08.392010</ts>
    <user>U3SJEDR96</user>
    <text>as for a workaround, I suggest `Html.Keyed` with different keys; though I am quite curious when you _really_ need an attribute to be absent?</text>
  </message>
  <message>
    <ts>2017-07-24T16:18:55.416156</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U3L8MM10T&gt; `Debug.crash` ?</text>
  </message>
  <message>
    <ts>2017-07-24T16:18:57.416779</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U3SJEDR96&gt; Ya just to switch diff-logic</text>
  </message>
  <message>
    <ts>2017-07-24T16:19:00.418238</ts>
    <user>U3SJEDR96</user>
    <text>I try to return a benign value when possible, or `Debug.crash "give some info why you should never reach this"` + a whole lot of fuzz tests to validate it is absolutely completely impossible to get there</text>
  </message>
  <message>
    <ts>2017-07-24T16:20:52.475006</ts>
    <user>U0F7JPK36</user>
    <text>&lt;@U3SJEDR96&gt; the diff isn't performed against the existing dom, it's performed against the previous vdom tree</text>
  </message>
  <message>
    <ts>2017-07-24T16:21:30.494629</ts>
    <user>U3SJEDR96</user>
    <text>Oh! good point :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-07-24T16:21:49.504113</ts>
    <user>U0F7JPK36</user>
    <text>yeah that was the first thing i went to look at and then i was like wait a second...</text>
  </message>
  <message>
    <ts>2017-07-24T16:21:53.505969</ts>
    <user>U0F7JPK36</user>
    <text>yeah this is a tough one</text>
  </message>
  <message>
    <ts>2017-07-24T16:22:08.513836</ts>
    <user>U2GPAEU1L</user>
    <text>Ya the `undefined` is just checking against the javascript object (here: &lt;https://github.com/elm-lang/virtual-dom/blob/master/src/Native/VirtualDom.js#L496&gt;)</text>
  </message>
  <message>
    <ts>2017-07-24T16:22:28.524288</ts>
    <user>U3L8MM10T</user>
    <text>&lt;@U3SJEDR96&gt;  But sometimes the code is super explicit. Like if I just tested that a list is non-empty, and then `case` on the `Maybe`result of `head`, then the branch of `Nothing` should never be hit. But yet, you would still have gobs of tests?!</text>
  </message>
  <message>
    <ts>2017-07-24T16:25:47.626595</ts>
    <user>U3SJEDR96</user>
    <text>No, though I'd probably not check if a list is empty before matching on the `head` ..</text>
  </message>
  <message>
    <ts>2017-07-24T16:27:02.664448</ts>
    <user>U3L8MM10T</user>
    <text>&lt;@U3SJEDR96&gt; That example was for illustration purposes only.</text>
  </message>
  <message>
    <ts>2017-07-24T16:27:05.665670</ts>
    <user>U3SJEDR96</user>
    <text>There are cases where you have invariants that the type-system can't check, though, in which case a `Debug.crash` is still a bit of an eye-sore :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T16:30:11.761545</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U3L8MM10T&gt; 

Ideally when you “check” something you do it through the type system. Like you do `List.head` and then in that _case_ where it is `Just x` you know the list is not empty and you have the first thing in the list to “prove it”. It isn’t always easy to do this, but that’s what you do as much as possible in Elm, getting the type system to be “on your side”. That’s why they make videos like “making impossible states impossible”, the idea is to avoid this very problem of having your types say one thing but the logic in your code say something else. It’s hard. The more elm I write, the better I get at avoiding these situations. Sidenote, you may want to read about _dependent types_</text>
  </message>
  <message>
    <ts>2017-07-24T16:30:38.775824</ts>
    <user>U0F7JPK36</user>
    <text>here's what's happening: `href` is being set as a `property` and not an `attribute`, so it's being set to the empty string rather than removed as an attribute</text>
  </message>
  <message>
    <ts>2017-07-24T16:31:10.792763</ts>
    <user>U0F7JPK36</user>
    <text>&lt;@U2GPAEU1L&gt; i'm gonna close your issue and reopen it on elm-lang/html</text>
  </message>
  <message>
    <ts>2017-07-24T16:31:39.808442</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U0F7JPK36&gt; Sure…happy you found it. Can you link me your issue when done.</text>
  </message>
  <message>
    <ts>2017-07-24T16:31:45.811473</ts>
    <user>U0F7JPK36</user>
    <text>yep!</text>
  </message>
  <message>
    <ts>2017-07-24T16:31:48.812967</ts>
    <user>U2GPAEU1L</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T16:37:42.994041</ts>
    <user>U3L8MM10T</user>
    <text>&lt;@U2GPAEU1L&gt; Can you point me to some reading on _dependent types_ ? Thanks</text>
  </message>
  <message>
    <ts>2017-07-24T16:38:24.014774</ts>
    <user>U2GPAEU1L</user>
    <text>I like to always start with wikipedia and see where it takes me :slightly_smiling_face:

&lt;https://www.wikiwand.com/en/Dependent_type&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T16:39:07.036765</ts>
    <user>U2GPAEU1L</user>
    <text>Also, Agda, another programming language that uses dependent types, commonly comes up:

&lt;https://www.wikiwand.com/en/Agda_(programming_language)&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T16:40:31.078404</ts>
    <user>U0F7JPK36</user>
    <text>&lt;@U2GPAEU1L&gt; &lt;https://github.com/elm-lang/html/issues/142&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T16:41:16.100918</ts>
    <user>U2GPAEU1L</user>
    <text>&lt;@U0F7JPK36&gt; Thanks</text>
  </message>
  <message>
    <ts>2017-07-24T16:44:30.198258</ts>
    <user>U4872964V</user>
    <text>Seems like a lot of attributes are being set as properties</text>
  </message>
  <message>
    <ts>2017-07-24T17:10:45.991250</ts>
    <user>U1EES739B</user>
    <text>As I write more complex things in elm I am a bit unhappy with how I am dealing with Maybe/Result. I seem to end up choosing whether to use withDefault a lot (and feeling like I am throwing away some potentially useful information) or ending up with code that feels really unclear/unwieldy (making the meaning of the code less clear). Anyone else been through this and got any recommendations of things/code to read that might help? Sorry this is vague, no concrete example to show at the moment.</text>
  </message>
  <message>
    <ts>2017-07-24T17:27:56.444166</ts>
    <user>U0LPMPL2U</user>
    <text>Try to keep Maybe/Result at the edges of your system</text>
  </message>
  <message>
    <ts>2017-07-24T17:28:17.453501</ts>
    <user>U0LPMPL2U</user>
    <text>Try to design your types so as to avoid Maybe/Result in your model</text>
  </message>
  <message>
    <ts>2017-07-24T17:30:33.512401</ts>
    <user>U3SJEDR96</user>
    <text>Personally I like dealing with things like remotedata only at the last moment possibly, usually in my view. For manipulations and whatnot, I rely heavily on function composition and `map`</text>
  </message>
  <message>
    <ts>2017-07-24T17:32:30.564114</ts>
    <user>U0LPMPL2U</user>
    <text>:thumbsup:  to using "normal" functions and `map`</text>
  </message>
  <message>
    <ts>2017-07-24T17:39:17.730332</ts>
    <user>U1EES739B</user>
    <text>Thanks for the replies, I do use normal functions and map etc. but I keep ending up with e.g. a List of Maybe and needing to do extra manipulations/functions. It all works, I just know what I am doing feels ugly! Just want to try to find some good code that legitimately has a lot of Maybes and see how it is dealt with</text>
  </message>
  <message>
    <ts>2017-07-24T18:04:59.315556</ts>
    <user>U0JFGGZS6</user>
    <text>can you share one example where it feels ugly?</text>
  </message>
  <message>
    <ts>2017-07-24T18:06:03.337919</ts>
    <user>U0JFGGZS6</user>
    <text>ugly sometimes just means unfamiliar :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T18:11:08.439635</ts>
    <user>U23SA861Y</user>
    <text>If you find yourself tripping over maybe it probably means that you are abstracting along the wrong lines</text>
  </message>
  <message>
    <ts>2017-07-24T18:12:10.459564</ts>
    <user>U57KYFW67</user>
    <text>&lt;@U0JFGGZS6&gt; I find that when I'm programming in a functional language, I'll start off first doing it the "ugly" way, then when I have it working, I go back and try to clean it up.</text>
  </message>
  <message>
    <ts>2017-07-24T18:12:51.473092</ts>
    <user>U57KYFW67</user>
    <text>Once you have the code put together, you can pick out where you need to draw boundaries for the maybe code.</text>
  </message>
  <message>
    <ts>2017-07-24T18:15:01.514393</ts>
    <user>U23SA861Y</user>
    <text>like try not to put maybes in function signatures</text>
  </message>
  <message>
    <ts>2017-07-24T18:15:11.517346</ts>
    <user>U0JFGGZS6</user>
    <text>all this is true, but to help &lt;@U1EES739B&gt; with their question, it would help to see their code.</text>
  </message>
  <message>
    <ts>2017-07-24T18:15:38.525660</ts>
    <user>U57KYFW67</user>
    <text>oh, I replied to the wrong person. My mistake :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T18:16:16.537602</ts>
    <user>U1CE9DL9H</user>
    <text>to be fair, dealing with result/maybe in a "nice" way requires that you can spot some patterns, and then use map/mapN/andMap. This requires experience</text>
  </message>
  <message>
    <ts>2017-07-24T18:16:17.537963</ts>
    <user>U0JFGGZS6</user>
    <text>np</text>
  </message>
  <message>
    <ts>2017-07-24T18:16:37.544424</ts>
    <user>U1CE9DL9H</user>
    <text>also, we can help here, if you have some particularly nasty bit of code</text>
  </message>
  <message>
    <ts>2017-07-24T18:47:12.096192</ts>
    <user>U2D07QZN3</user>
    <text>It works in both now - I got your change.</text>
  </message>
  <message>
    <ts>2017-07-24T18:49:22.133711</ts>
    <user>U2D07QZN3</user>
    <text>I knew turning it into elm was not the way to go, but I knew how to do it, and I was in a hurry!</text>
  </message>
  <message>
    <ts>2017-07-24T19:20:22.653271</ts>
    <user>U5LFUHH19</user>
    <text>A while back some kind soul on this channel helped me with a sum type to parse some JSON that might have strings/int/floats/etc.  I've got a case where I'm getting back a Dict of that union, but I was hoping it would parse the data as floats instead of Values.  Can someone set me straight on why I'm getting a `Dict String Value` instead of a `Dict String (List Float)` (and also I'm not quite sure what a `Value` is). &lt;https://ellie-app.com/3QrTxmsMGxLa1/2&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T19:29:59.799277</ts>
    <user>U5WS7CJLV</user>
    <text>how odd</text>
  </message>
  <message>
    <ts>2017-07-24T19:30:30.807951</ts>
    <user>U5WS7CJLV</user>
    <text>I never seen a question go this long without a response.  You seem to be struggling with decoding.  Which is a common struggle.</text>
  </message>
  <message>
    <ts>2017-07-24T19:36:29.897028</ts>
    <user>U5WS7CJLV</user>
    <text>not entirely sure what you are after, but if you wanted to get your chlorophyl numbers into a `List Int`, you could `Decode.decodeString (Decode.field "biological__chlorophyll" (Decode.list Decode.float)) s`</text>
  </message>
  <message>
    <ts>2017-07-24T19:53:19.138452</ts>
    <user>U5WS7CJLV</user>
    <text>not entirely there, but this compiles: &lt;https://ellie-app.com/3QscDw2frYRa1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T19:53:30.141052</ts>
    <user>U5WS7CJLV</user>
    <text>that in the neighborhood if what you need &lt;@U5LFUHH19&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-24T19:57:06.191995</ts>
    <user>U5LFUHH19</user>
    <text>&lt;@U5WS7CJLV&gt; Thanks!  My problem is that I don't know beforehand if I'm going to have a list of floats/ints/strings, so I'm not able to choose the correct decoder.  I'm going to continue to think on this.</text>
  </message>
  <message>
    <ts>2017-07-24T19:58:14.207443</ts>
    <user>U5LFUHH19</user>
    <text>I'd love to understand better how `Json.Decode.oneOf` works.  Does it try each branch in order, moving on when it fails until it finds something that works?</text>
  </message>
  <message>
    <ts>2017-07-24T19:59:50.230297</ts>
    <user>U5LFUHH19</user>
    <text>Probably everyone has gone home for the day, which is what I need to do now.  More tomorrow!</text>
  </message>
  <message>
    <ts>2017-07-24T20:02:05.264871</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U5LFUHH19&gt; yep, that’s what `Json.Decode.oneOf` does</text>
  </message>
  <message>
    <ts>2017-07-24T20:08:50.358099</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U5LFUHH19&gt; you’re getting a `Value` because it’s a list.</text>
  </message>
  <message>
    <ts>2017-07-24T20:10:05.374755</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U5LFUHH19&gt; &lt;https://ellie-app.com/3QrTxmsMGxLa1/2&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T01:16:50.597656</ts>
    <user>U23SA861Y</user>
    <text>anyone know of a way to list the import tree of an elm project, or to list the modules that are being recompiled?</text>
  </message>
  <message>
    <ts>2017-07-25T01:20:53.634580</ts>
    <user>U23SA861Y</user>
    <text>So when you change a line in that mat file I'm getting 15 modules recompiled. That seems to be quite a bit</text>
  </message>
  <message>
    <ts>2017-07-25T01:21:14.637809</ts>
    <user>U23SA861Y</user>
    <text>I'm trying to track down which modules</text>
  </message>
  <message>
    <ts>2017-07-25T01:21:43.642024</ts>
    <user>U23SA861Y</user>
    <text>as for what's haskell like and what's not, almost that entire X folder is out of place in an elm project</text>
  </message>
  <message>
    <ts>2017-07-25T01:34:59.763560</ts>
    <user>U3SJEDR96</user>
    <text>I think elm-analyse can get the tree.. alternatively, `ls -alTr` in the right subfolder or `elm-stuff` just after a compile is useful :)</text>
  </message>
  <message>
    <ts>2017-07-25T01:53:33.941248</ts>
    <user>U17MHJ12N</user>
    <text>Elm-analyse has a --serve option that serves a site giving all sorts of interesting info</text>
  </message>
  <message>
    <ts>2017-07-25T07:18:28.916378</ts>
    <user>U2L33RRR8</user>
    <text>hey! is there a way in elm to only render whats visible in viewport?</text>
  </message>
  <message>
    <ts>2017-07-25T07:30:29.123558</ts>
    <user>U4872964V</user>
    <text>&lt;@U2L33RRR8&gt; what problem are you trying to solve? infinite scroll?</text>
  </message>
  <message>
    <ts>2017-07-25T07:31:28.141397</ts>
    <user>U2L33RRR8</user>
    <text>I have some performance problem with a list type of view</text>
  </message>
  <message>
    <ts>2017-07-25T07:32:02.151344</ts>
    <user>U4872964V</user>
    <text>yes, so there are a few packages that may work for you, for instance &lt;http://package.elm-lang.org/packages/FabienHenon/elm-infinite-list-view/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T07:33:34.177844</ts>
    <user>U2L33RRR8</user>
    <text>ok thanks, I will try it out</text>
  </message>
  <message>
    <ts>2017-07-25T07:34:07.187356</ts>
    <user>U3SJEDR96</user>
    <text>More importantly, what's causing your performance issue? Re-rendering? Is it an option to use `Html.Keyed` and/or `Html.Lazy`?</text>
  </message>
  <message>
    <ts>2017-07-25T07:36:31.228471</ts>
    <user>U2L33RRR8</user>
    <text>the problem is not re-rendering (anymore), since I am using both `Html.Keyed` and `Html.Lazy`.  Now the issue is interaction became somehow slow, including scrolling.</text>
  </message>
  <message>
    <ts>2017-07-25T07:38:22.260123</ts>
    <user>U3SJEDR96</user>
    <text>is it "including scrolling" or "especially scrolling"?</text>
  </message>
  <message>
    <ts>2017-07-25T07:39:05.271807</ts>
    <user>U3SJEDR96</user>
    <text>if it's the former, you may want to investigate setting `pointer-events: none;` _during_ scrolling, so there is less re-rendering and recalculating of styles going on due to hover states and whatnot</text>
  </message>
  <message>
    <ts>2017-07-25T07:39:16.274956</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://www.thecssninja.com/css/pointer-events-60fps&gt; for some more info on that particular trick</text>
  </message>
  <message>
    <ts>2017-07-25T07:40:18.292435</ts>
    <user>U2L33RRR8</user>
    <text>other type of actions are also slow, I am investigating why other normal actions (for example showing a modal takes long).</text>
  </message>
  <message>
    <ts>2017-07-25T07:40:45.300442</ts>
    <user>U2L33RRR8</user>
    <text>thanks &lt;@U3SJEDR96&gt;, I’ll consider that</text>
  </message>
  <message>
    <ts>2017-07-25T07:42:39.333346</ts>
    <user>U4872964V</user>
    <text>I made a little list reordering animation demo, what do you all think? &lt;https://ellie-app.com/3QmmNMSn45na1/3&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T07:45:08.377140</ts>
    <user>U2L33RRR8</user>
    <text>nice norpan! I have been meaning to do something like this.</text>
  </message>
  <message>
    <ts>2017-07-25T07:45:30.383776</ts>
    <user>U4872964V</user>
    <text>the nice thing is that the Elm code is virtually unaffected</text>
  </message>
  <message>
    <ts>2017-07-25T07:47:36.423336</ts>
    <user>U4872964V</user>
    <text>so it should work for any kind of container, I think</text>
  </message>
  <message>
    <ts>2017-07-25T08:19:49.051805</ts>
    <user>U1G8WC4UR</user>
    <text>This seemed simple at first, but it beats me. I have this list:

```
[ (1,True)
, (2,True)
, (3,False)
, (4,False)
, (5,False)
, (6,True)
, (7,True)
, (8,False)
, (9,False)
, (10,True)
, (11,True)
, (12,True)
]
```

and i'd like to render it as

```
&amp;lt;div&amp;gt;1&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;2&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;div&amp;gt;3&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;4&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;5&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;6&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;7&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;div&amp;gt;8&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;9&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;10&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;11&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;12&amp;lt;/div&amp;gt;
```

that is, all "False" items should be in order enclosed by a containing div, while all "True" items should be stand alone divs.

Any smart ideas?</text>
  </message>
  <message>
    <ts>2017-07-25T08:24:27.148348</ts>
    <user>U3SJEDR96</user>
    <text>`yourList |&amp;gt; List.Extra.groupWhileTransitively (\(_, a) (_, b) -&amp;gt; a == b) |&amp;gt; List.concatMap showGroup` where in `showGroup` you check the first entry to see if it's `True` or `False` and either return a List of div's, or a list of div's wrapped in a div, wrapped in a list.</text>
  </message>
  <message>
    <ts>2017-07-25T08:27:42.219483</ts>
    <user>U0EUHKVGB</user>
    <text>PSA:

Installs for elm-format might be failing for now on your machines. This is an issue to do with Github. They're working on the fix. I'll write again when they've fixed it.</text>
  </message>
  <message>
    <ts>2017-07-25T08:29:54.268053</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U1G8WC4UR&gt; &lt;https://ellie-app.com/3QGY4Yv3DPYa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T08:33:12.343725</ts>
    <user>U3SJEDR96</user>
    <text>a little more legible: &lt;https://ellie-app.com/3QGY4Yv3DPYa1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T08:33:16.345424</ts>
    <user>U1G8WC4UR</user>
    <text>Thanks a bunch, I see it works allthough I think I'll need to look at it for a few minutes before I understand it :slightly_smiling_face: (Big kudos to &lt;@U0F7JPK36&gt; for Ellie)</text>
  </message>
  <message>
    <ts>2017-07-25T08:35:24.394379</ts>
    <user>U3SJEDR96</user>
    <text>groupWhileTransitively with that predicate results in sometihng like `[ [ (1, True), (2, True) ],  [ (3, False) (4, False), (5, False) ], ...]` etc. In other words, it groups "similar" elements together, based on a predicate that compares two elements. Using that list-of-lists, it's fairly trivial to then either make it a list of divs, or nested divs :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T08:38:35.467888</ts>
    <user>U1G8WC4UR</user>
    <text>Ok that's neat and quite readible (with a little explanation)!</text>
  </message>
  <message>
    <ts>2017-07-25T08:38:56.475664</ts>
    <user>U1G8WC4UR</user>
    <text>Thanks alot!</text>
  </message>
  <message>
    <ts>2017-07-25T09:35:50.102996</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U3SJEDR96&gt; Sometimes it pays to lurk. That example you gave just taught me how to use `&amp;gt;&amp;gt;` and I now know that I can use type signatures in let blocks</text>
  </message>
  <message>
    <ts>2017-07-25T09:40:57.269381</ts>
    <user>U4872964V</user>
    <text>&lt;@U2SR9DL7Q&gt; reading source code is good for you. i usually read through library code on my spare time :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T09:44:02.370533</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U4872964V&gt; Indeed. I've been refactoring for the last day or too, and it's mainly just reading through the List and Maybe docs (and frequently, the Extras), recognizing useful functions, and identifying where I'm doing my own hacky implementations in my own code. I typically try and leave a reminder for myself to look up elm syntax I haven't seen before if I encounter it in an answer, like what just happened.</text>
  </message>
  <message>
    <ts>2017-07-25T09:49:22.552741</ts>
    <user>U2SR9DL7Q</user>
    <text>I just turned this large, gnarly, page-long monstrosity of nested case statements into three short lines with `Maybe.map`. It makes me so happy. :joy:</text>
  </message>
  <message>
    <ts>2017-07-25T10:42:06.515504</ts>
    <user>U0EUHKVGB</user>
    <text>PSA:
The issues downloading elm-format should be fixed.</text>
  </message>
  <message>
    <ts>2017-07-25T11:14:47.809154</ts>
    <user>U6D41LX7Y</user>
    <text>is the Ellie-app open source ?</text>
  </message>
  <message>
    <ts>2017-07-25T11:33:51.564977</ts>
    <user>U3FJSB596</user>
    <text>&lt;@U6D41LX7Y&gt; As far as I can tell, it is not.</text>
  </message>
  <message>
    <ts>2017-07-25T11:34:28.590919</ts>
    <user>U6D41LX7Y</user>
    <text>&lt;@U3FJSB596&gt; thanks alot, but that is unfortunate</text>
  </message>
  <message>
    <ts>2017-07-25T11:35:50.650659</ts>
    <user>U4872964V</user>
    <text>&lt;@U6D41LX7Y&gt; it will be, the next version. &lt;@U0F7JPK36&gt; has promised :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T11:37:02.698865</ts>
    <user>U4872964V</user>
    <text>&lt;@U6D41LX7Y&gt; &lt;https://www.youtube.com/watch?v=GwmVELtQnOI&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T11:37:44.726907</ts>
    <user>U6D41LX7Y</user>
    <text>&lt;@U4872964V&gt; cool ill watch that</text>
  </message>
  <message>
    <ts>2017-07-25T12:48:53.398611</ts>
    <user>U0GR6DHEK</user>
    <text>I have a weird compiler error and would welcome another pair of eyes - see &lt;https://ellie-app.com/3QLSL8GBwXNa1/0&gt; and try compiling</text>
  </message>
  <message>
    <ts>2017-07-25T12:52:12.513480</ts>
    <user>U23SA861Y</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-07-25T12:53:26.556409</ts>
    <user>U0GR6DHEK</user>
    <text>In short we have 
```
(|&amp;gt;) is expecting the right side to be a:
Result String (List Path) -&amp;gt; a

But the right side is:

Result String (List (List Selection))
-&amp;gt; Result String (Set (List Selection))
```
but 
`type alias Path = List Selection`</text>
  </message>
  <message>
    <ts>2017-07-25T12:53:58.574541</ts>
    <user>U23SA861Y</user>
    <text>can a set contain a list?</text>
  </message>
  <message>
    <ts>2017-07-25T12:54:08.580406</ts>
    <user>U23SA861Y</user>
    <text>I don't know if lists are comparable</text>
  </message>
  <message>
    <ts>2017-07-25T12:54:26.590948</ts>
    <user>U0GR6DHEK</user>
    <text>when I define the model that contains a `Set Path` I get no compile error</text>
  </message>
  <message>
    <ts>2017-07-25T12:54:56.608109</ts>
    <user>U23SA861Y</user>
    <text>hmm, I think you should because I don't believe ADTs are comparable</text>
  </message>
  <message>
    <ts>2017-07-25T12:56:08.649190</ts>
    <user>U0GR6DHEK</user>
    <text>ok, I can see that ADTs could be an issue</text>
  </message>
  <message>
    <ts>2017-07-25T12:56:28.660956</ts>
    <user>U23SA861Y</user>
    <text>interesting it's not throwing a compile error sooner</text>
  </message>
  <message>
    <ts>2017-07-25T12:56:33.664087</ts>
    <user>U0GR6DHEK</user>
    <text>`bindingPaths : Set Path` in my model was OKed though</text>
  </message>
  <message>
    <ts>2017-07-25T12:56:47.671982</ts>
    <user>U0GR6DHEK</user>
    <text>that's in a different file</text>
  </message>
  <message>
    <ts>2017-07-25T12:56:57.677912</ts>
    <user>U23SA861Y</user>
    <text>should matter what file it's in</text>
  </message>
  <message>
    <ts>2017-07-25T12:57:29.696406</ts>
    <user>U0GR6DHEK</user>
    <text>agreed, but it confirms that this code was compiled already</text>
  </message>
  <message>
    <ts>2017-07-25T12:58:02.715782</ts>
    <user>U0GR6DHEK</user>
    <text>Ok, back to the drawing board</text>
  </message>
  <message>
    <ts>2017-07-25T12:58:05.718007</ts>
    <user>U0GR6DHEK</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-25T13:04:39.952053</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U0GR6DHEK&gt; I think you've got a legit bug here</text>
  </message>
  <message>
    <ts>2017-07-25T13:04:49.957759</ts>
    <user>U23SA861Y</user>
    <text>This is strange</text>
  </message>
  <message>
    <ts>2017-07-25T13:05:53.995111</ts>
    <user>U0GR6DHEK</user>
    <text>Thanks. It's not worth the hassle of process Bot.... </text>
  </message>
  <message>
    <ts>2017-07-25T13:06:17.008826</ts>
    <user>U23SA861Y</user>
    <text>It is worth the hassle for elm, however</text>
  </message>
  <message>
    <ts>2017-07-25T13:08:33.084294</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://ellie-app.com/3QMbpGBGkZqa1/1&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T13:08:49.093402</ts>
    <user>U3SJEDR96</user>
    <text>Elm will gladly let you define type aliases for impossible stuff; you just sort of run into a wall trying to actually build those values</text>
  </message>
  <message>
    <ts>2017-07-25T13:08:58.098237</ts>
    <user>U3SJEDR96</user>
    <text>like `type alias Foo = List`</text>
  </message>
  <message>
    <ts>2017-07-25T13:09:17.108628</ts>
    <user>U23SA861Y</user>
    <text>so the compiler error is worst than that though</text>
  </message>
  <message>
    <ts>2017-07-25T13:09:27.114611</ts>
    <user>U23SA861Y</user>
    <text>```

The right side of (|&amp;gt;) is causing a type mismatch.
(|&amp;gt;) is expecting the right side to be a:

Json.Decoder (List (List Selection)) -&amp;gt; a

But the right side is:

Json.Decoder (List (List Selection)) -&amp;gt; Json.Decoder (Set (List Selection))

Hint: With operators like (|&amp;gt;) I always check the left side first. If it seems
fine, I assume it is correct and check the right side. So the problem may be in
how the left and right arguments interact.
```</text>
  </message>
  <message>
    <ts>2017-07-25T13:09:49.126723</ts>
    <user>U23SA861Y</user>
    <text>it's like umm yeah that is an a</text>
  </message>
  <message>
    <ts>2017-07-25T13:11:48.193403</ts>
    <user>U23SA861Y</user>
    <text>It is a problem with comparable objects, it's just the compiler error is entirely not helpful</text>
  </message>
  <message>
    <ts>2017-07-25T13:15:07.304853</ts>
    <user>U23SA861Y</user>
    <text>so &lt;@U0GR6DHEK&gt; it does seem to be an issue with user defined types not being comparable</text>
  </message>
  <message>
    <ts>2017-07-25T13:17:46.395696</ts>
    <user>U0GR6DHEK</user>
    <text>Thanks. I think I can switch to a list easily enough and create a `member ` function </text>
  </message>
  <message>
    <ts>2017-07-25T13:27:37.735529</ts>
    <user>U3SJEDR96</user>
    <text>There already is a `List.member` function, isn't there?</text>
  </message>
  <message>
    <ts>2017-07-25T14:07:06.155766</ts>
    <user>U5X2ZRFDF</user>
    <text>Yes there is</text>
  </message>
  <message>
    <ts>2017-07-25T14:12:16.344731</ts>
    <user>U23SA861Y</user>
    <text>interestingly List.member accepts any type. Does that imply that every type is equateable?</text>
  </message>
  <message>
    <ts>2017-07-25T14:14:03.407201</ts>
    <user>U5X2ZRFDF</user>
    <text>`List.member : a -&amp;gt; List a -&amp;gt; Bool`
No, when you call List.member, the type of the value you are searching for has to map the element type of the list.</text>
  </message>
  <message>
    <ts>2017-07-25T14:14:14.413585</ts>
    <user>U5X2ZRFDF</user>
    <text>Those `a`s must be the same type for any particular call.</text>
  </message>
  <message>
    <ts>2017-07-25T14:14:46.431995</ts>
    <user>U5X2ZRFDF</user>
    <text>They can vary between calls to `List.member`.</text>
  </message>
  <message>
    <ts>2017-07-25T14:14:47.432946</ts>
    <user>U23SA861Y</user>
    <text>yes, but that implies that (==) is a valid operation on any type. `a-&amp;gt;a-&amp;gt;Bool`</text>
  </message>
  <message>
    <ts>2017-07-25T14:15:29.457777</ts>
    <user>U23SA861Y</user>
    <text>"that all types belong to the type class equatable", so to speak</text>
  </message>
  <message>
    <ts>2017-07-25T14:15:32.459873</ts>
    <user>U5X2ZRFDF</user>
    <text>Yeah, I suppose `==` is defined on all types</text>
  </message>
  <message>
    <ts>2017-07-25T14:16:01.477050</ts>
    <user>U23SA861Y</user>
    <text>Just unexpected</text>
  </message>
  <message>
    <ts>2017-07-25T14:16:38.499621</ts>
    <user>U5X2ZRFDF</user>
    <text>Yeah. That didn't occur to me either. Especially since `comparable` is a restricted set of types.</text>
  </message>
  <message>
    <ts>2017-07-25T14:17:04.515216</ts>
    <user>U23SA861Y</user>
    <text>comparable also includes ordering</text>
  </message>
  <message>
    <ts>2017-07-25T14:17:11.519254</ts>
    <user>U23SA861Y</user>
    <text>but yeah, unexpected</text>
  </message>
  <message>
    <ts>2017-07-25T14:17:37.534572</ts>
    <user>U23SA861Y</user>
    <text>I suppose it has to do with the type class unioning issues</text>
  </message>
  <message>
    <ts>2017-07-25T14:18:05.551437</ts>
    <user>U5X2ZRFDF</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Basics#equality&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T14:19:12.590991</ts>
    <user>U23SA861Y</user>
    <text>yeah, I knew it exploded for function types</text>
  </message>
  <message>
    <ts>2017-07-25T14:19:47.612387</ts>
    <user>U5X2ZRFDF</user>
    <text>Interesting... fun way to make Elm blow up</text>
  </message>
  <message>
    <ts>2017-07-25T14:22:31.710019</ts>
    <user>U0J1M0F32</user>
    <text>Oh I'm too late to the party.</text>
  </message>
  <message>
    <ts>2017-07-25T14:22:40.715342</ts>
    <user>U0J1M0F32</user>
    <text>I was going to demonstrate the "breaks on functions" issue &lt;https://ellie-app.com/3QNjCJx73HYa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T14:22:47.719808</ts>
    <user>U0J1M0F32</user>
    <text>but I had to rebuild the error from memory :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-25T14:23:27.743144</ts>
    <user>U0J1M0F32</user>
    <text>First time I ran into that error it was a little scary. Easy to fix, but I had to think for awhile about where exactly it was coming from and why it only showed up _sometimes_.</text>
  </message>
  <message>
    <ts>2017-07-25T14:52:28.771695</ts>
    <user>U3SJEDR96</user>
    <text>Also behaves "unexpectedly" on "types that don't behave like regular Elm types", like `Json.Encode.Value`</text>
  </message>
  <message>
    <ts>2017-07-25T14:52:59.787198</ts>
    <user>U3SJEDR96</user>
    <text>which isn't really that big of a deal; until you run into it :wink:</text>
  </message>
  <message>
    <ts>2017-07-25T16:03:47.097168</ts>
    <user>U5LFUHH19</user>
    <text>Late yesterday I was asking about `Json.Decoder.oneOf` and why I was having trouble parsing a list of floats.  After further study, I realize I didn't understand the code, and now I have something that works just as I wanted: &lt;https://ellie-app.com/3QPJnGTtfGha1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T16:30:05.933078</ts>
    <user>U2LAL86AY</user>
    <text>Hy everyone :smile:! I need your input on the following community project, i intend to do.

First let me tell you what's the issue..

Couple weeks ago i worked on a app that was pretty complex. Some of update branches were very hard to reason about - very complex calculations, recursive functions, multiple steps ..etc.

Point is **the debugging experience was very bad** compared to the little 1-2 record filed updating i'm usually used to do.

This is because in the current elm debugger we only get the Message, and the next model. **All computations in between are hidden.**

To inspect my code and find the bugs, **I was using Debug.log calls all over the place.**

Seeing the model, after each message, was not enough. **I needed to see the values returned by certain functions.**

My code got rely tangled - and **i observed myself spending time and attention deciding IF to comment a specific Debug.log call or not - or just remove it - or to keep it a little longer... because i might need it very soon..**  

A toxic anxiety was forming - because my browser console was filled with stuff. To prevent the clutter i was investing time and attention managing `Debug.log` calls instead of focusing on my elm business logic.

In JavaScript and in general we don't have this problem. We have the normal stepping debugger.

But i'm interested to know why?  Why are all this functions hidden form us in elm? There is a lot of value in seeing the computation pipeline.

To see how values flow from one function - to another... even if code is not complex. Even if is simple - it can still be useful to see the values returned by all functions.

The beautiful fact about elm functions that they are completely predictable, and there is no runtime exception, there is no async stuff. There is something going in - and something going out. And all that happens inside is pure computation.

So **in principle you can x-ray every function**, `evaluate it's arguments`, all it's `variables and functions` form inside `let / in` statements.. and also you can `sort all functions in the exact order they were called`.

I think this would be so much better then normal stepping debugger. We `don't need a stack - and breakpoints` - we can see everything in one go, which is much more effective. Stack debugging is a consequence of how the code runs and it's actually implemented, it works when are runtime exceptions - but is not the best way for elm, and it's not best for a developer brain to visualize what's happening. I think this can be done so much better.

Now my approach to solve this problem works like this. When inspecting code, **i'm only gonna focus on a single message at a time.**

So for each message / for each update step i must be able to see `all functions` in the `exact order they have been called`. their `parameters`, their `return values` - and also `what's inside` that function - `the context` so to speak..

Now this image below is a bad one, but i will make it better soon.</text>
  </message>
  <message>
    <ts>2017-07-25T16:30:33.948601</ts>
    <user>U2LAL86AY</user>
    <text>The above image is first iteration design. It's just showing the major concepts:
1. in the first panel we have all messages in order - the same stuff that is currently in elm-debugger. (and some more juicy message - filtering with that cog icon -&amp;gt; but more on this later...)

2. when clicking on a single message - the second panel get's **completed with all functions that have been called in that message / update step**. So **NOT** all functions you have in the app - but only the ones used for this update step. I expect to be no more then 20 -30 even for very, very complex update steps - which is still manageable.. and this functionality can't be matched by js. (because there is no clear separation with  messages in js, the functions from previous steps get mixed with the current one - which is bad because **you are actually only interested in one update step at a time**. Much less mental clutter.)

3. the second panel shows the functions in alphabetical order - and also shows the modules this functions belong into. I will add options to hide the `core modules and their functions` or `the library ones` - but here you can see that showing them is possible.

4. in the third panel is where all the interesting stuff happens. We have oldModel -&amp;gt; the model resulted form the previous message, and the new model - as we can already see in the current elm-debugger.

5. but in between them, we can see all functions in order they have been called. They will form a very nested tree. I couldn't find a better approach yet. This tree will have the option to be fully expanded - or partially expanded the same way chrome dev tools expands the dom in the inspect element panel.

6. there is a simple solution to this long nested tree. it's in the second panel. You can see all functions - pick the one you are interested in. There is also a number in front of every function. It indicates **how many times this function was called in this update step.**
this will be extremely useful in recursive calls - Or when the same function is called from multiple places (this is the hardest problem to track with Debug.log calls currently );

so when clicking on each of this functions - the third panel will only contain the body of this single function . Not the hole update-step pipeline.

There is a bunch of more stuff. But i think this is enough to give you an idea of how this new debugger concept can function and help your be more faster and with less mental clutter when you work.

The figma design is bad now - i'm not going to change it - because my immediate next step after this -  is to implement a **fake debugger**-  that can be used interactively. I don't expect this to take me more then 1-2 days.

So until that interactive fake replica comes live - i want to ask you folks for feedback regarding this hole idea.

What do you think about this? We can discuss this from multiple angles but i want to focus on this 2.
1. how feasible is to actually build something like this on top of elm ? My fake debugger will look like it's working in no time - but taking real data from a real elm app - i can't even imagine what needs to be done for this to happen. I'm very inexperienced in this area. And i need your help -&amp;gt; point me in the right direction :smile:

2. what do you think about this debugger-layout in general ? What other stuff you think is useful to have ? Just your general feeling.

Thank you :smile:</text>
  </message>
  <message>
    <ts>2017-07-25T16:30:59.962533</ts>
    <user>U2LAL86AY</user>
    <text>i've build a repo here: &lt;https://github.com/AionDev/xray-time-traveling-debugger&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T16:37:08.159911</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0F7JPK36&gt; ^ I remember you were looking into improving the debugging experience in Elm. You folks might want to talk, before someone jumps in and spends a buttload of time</text>
  </message>
  <message>
    <ts>2017-07-25T16:38:51.212653</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2LAL86AY&gt;, hey, if you've written something up then please put it in a gist.</text>
  </message>
  <message>
    <ts>2017-07-25T16:39:00.217458</ts>
    <user>U0EUHKVGB</user>
    <text>Long form posts like that are not well suited to Slack.</text>
  </message>
  <message>
    <ts>2017-07-25T16:39:08.221884</ts>
    <user>U0EUHKVGB</user>
    <text>It makes it very hard to give feedback to you.</text>
  </message>
  <message>
    <ts>2017-07-25T16:39:18.227094</ts>
    <user>U2LAL86AY</user>
    <text>yep i created that repo</text>
  </message>
  <message>
    <ts>2017-07-25T16:39:24.230085</ts>
    <user>U2LAL86AY</user>
    <text>will make a gist soon</text>
  </message>
  <message>
    <ts>2017-07-25T16:39:44.240423</ts>
    <user>U0EUHKVGB</user>
    <text>That repo is fine, I didn't click on it yet cause I was still reading your post :wink:</text>
  </message>
  <message>
    <ts>2017-07-25T16:41:40.299930</ts>
    <user>U2LAL86AY</user>
    <text>ah and i forgot to mention - when calling the same function multiple times in the same update step - clicking on it in the second pannel - will show every instance of it's calling in order. So nothing is hidden</text>
  </message>
  <message>
    <ts>2017-07-25T16:55:46.744319</ts>
    <user>U170TNSTZ</user>
    <text>Anyone using IntelliJ? Am I assuming correctly that it does not support showing type errors (eg missing cases), only syntax errors?</text>
  </message>
  <message>
    <ts>2017-07-25T16:59:44.873089</ts>
    <user>U2LAL86AY</user>
    <text>i need to go because here is late - regarding my request, please leave your feedback here instead of slack: &lt;https://github.com/AionDev/xray-time-traveling-debugger/issues/1&gt;
]</text>
  </message>
  <message>
    <ts>2017-07-25T17:02:08.952508</ts>
    <user>U4872964V</user>
    <text>&lt;@U2LAL86AY&gt; will read it tomorrow! interesting</text>
  </message>
  <message>
    <ts>2017-07-25T17:34:34.863443</ts>
    <user>U2U94G0QG</user>
    <text>&lt;@U2SR9DL7Q&gt; I was catching up on unread history yesterday and saw your convo. about shuffling - it reminded me of this which is my current fav way to do that:
```
shuffle : List comparable -&amp;gt; List a -&amp;gt; List a
shuffle random list =
    List.map2 (,) list random
        |&amp;gt; List.sortBy Tuple.second
        |&amp;gt; List.unzip
        |&amp;gt; Tuple.first
```</text>
  </message>
  <message>
    <ts>2017-07-25T17:36:29.912663</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2U94G0QG&gt; First off, I'm just pleased that I've reached the level where I can understand what that does. This implementation is pretty neat.</text>
  </message>
  <message>
    <ts>2017-07-25T17:36:55.923872</ts>
    <user>U2U94G0QG</user>
    <text>credit where it's due - it came from a tutorial I ran through a while back so it's not mine</text>
  </message>
  <message>
    <ts>2017-07-25T17:37:21.935133</ts>
    <user>U2U94G0QG</user>
    <text>but I love when Elm code reads like this</text>
  </message>
  <message>
    <ts>2017-07-25T17:40:11.007746</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2U94G0QG&gt; I just ended up using the `Random.shuffle` function in the random extra library. This function seems way less messy than that one. I have completely fallen in love with the `|&amp;gt;` operator.</text>
  </message>
  <message>
    <ts>2017-07-25T17:41:42.045869</ts>
    <user>U2SR9DL7Q</user>
    <text>today I ended up converting</text>
  </message>
  <message>
    <ts>2017-07-25T17:42:42.070908</ts>
    <user>U2U94G0QG</user>
    <text>haha very nice</text>
  </message>
  <message>
    <ts>2017-07-25T17:42:45.072015</ts>
    <user>U2SR9DL7Q</user>
    <text>whoops... tried to make it smaller. But I think you saw it</text>
  </message>
  <message>
    <ts>2017-07-25T17:43:16.085069</ts>
    <user>U2U94G0QG</user>
    <text>you can add it as a reply to one of our messages to put it in a thread so it doesn't spam the channel</text>
  </message>
  <message>
    <ts>2017-07-25T17:43:58.102542</ts>
    <user>U2U94G0QG</user>
    <text>(for future ref)</text>
  </message>
  <message>
    <ts>2017-07-25T17:44:15.109702</ts>
    <user>U2SR9DL7Q</user>
    <text>```
calculateHumanMatch : Domino -&amp;gt; BoardSide -&amp;gt; Maybe Board -&amp;gt; Maybe ( Domino, BoardSide )
calculateHumanMatch domino side board =
    case board of
        Nothing -&amp;gt;
            let
                newDom =
                    domino
            in
            Maybe.Just ( newDom, Left )

        Just board -&amp;gt;
            case side of
                Left -&amp;gt;
                    let
                        ( lefty, _ ) =
                            getBoardEnds board

                        matched =
                            matchHands [ domino ] lefty 7
                    in
                    case matched of
                        Nothing -&amp;gt;
                            Nothing

                        Maybe.Just ( _, _, newDoms ) -&amp;gt;
                            Maybe.Just ( newDoms, Left )

                Right -&amp;gt;
                    let
                        ( _, righty ) =
                            getBoardEnds board

                        matched =
                            matchHands [ domino ] 7 righty
                    in
                    case matched of
                        Nothing -&amp;gt;
                            Nothing

                        Maybe.Just ( _, _, newDoms ) -&amp;gt;
                            Maybe.Just ( newDoms, Right )
```
to 
```
calculateHumanMatch : Domino -&amp;gt; BoardSide -&amp;gt; Board -&amp;gt; Maybe ( Domino, BoardSide )
calculateHumanMatch domino side board =
    getBoardEnd side board
        |&amp;gt; matchDominoToInt domino
        |&amp;gt; Maybe.map (alignToBoardEnd side)
        |&amp;gt; Maybe.map (\domino -&amp;gt; ( domino, side ))
```</text>
  </message>
  <message>
    <ts>2017-07-25T17:44:43.121066</ts>
    <user>U2SR9DL7Q</user>
    <text>The day the pipe structure clicked my life changed forever</text>
  </message>
  <message>
    <ts>2017-07-25T17:45:02.129048</ts>
    <user>U2SR9DL7Q</user>
    <text>also, my update Msgs are way more sane.</text>
  </message>
  <message>
    <ts>2017-07-25T17:45:05.130697</ts>
    <user>U2U94G0QG</user>
    <text>same, I wonder how I lived without it</text>
  </message>
  <message>
    <ts>2017-07-25T17:45:35.143368</ts>
    <user>U2U94G0QG</user>
    <text>currently trying to sell my team on the benefits of Elm</text>
  </message>
  <message>
    <ts>2017-07-25T17:45:41.145756</ts>
    <user>U2SR9DL7Q</user>
    <text>I'm trying to do the same thing I did here with the calculations for the AI player, but it's trickier</text>
  </message>
  <message>
    <ts>2017-07-25T17:46:49.173489</ts>
    <user>U2SR9DL7Q</user>
    <text>My old boss would never have let me elm if I just asked. But if I'd built something awesome with it first and showed her the no runtime error thing... she'd probably get on board.</text>
  </message>
  <message>
    <ts>2017-07-25T17:48:51.222631</ts>
    <user>U2U94G0QG</user>
    <text>I'm building a little thing to show off, it's still early but I have gotten some positive feedback already - we just shipped a React/Redux app and are now planning what will be used in a rewrite of an old flash app</text>
  </message>
  <message>
    <ts>2017-07-25T17:49:20.234114</ts>
    <user>U2U94G0QG</user>
    <text>it looks like it will be about the same + TypeScript, but I want to use Elm :smile:</text>
  </message>
  <message>
    <ts>2017-07-25T17:51:18.282855</ts>
    <user>U2SR9DL7Q</user>
    <text>i'm avoiding everything 'script'</text>
  </message>
  <message>
    <ts>2017-07-25T17:51:33.288580</ts>
    <user>U2SR9DL7Q</user>
    <text>typescript, coffeescript, closurescript, javascript...</text>
  </message>
  <message>
    <ts>2017-07-25T17:51:56.298364</ts>
    <user>U2SR9DL7Q</user>
    <text>I used to write python at work, which felt so safe and secure compared to JS... till I met elm.</text>
  </message>
  <message>
    <ts>2017-07-25T18:06:07.638271</ts>
    <user>U177VRFJP</user>
    <text>Is there a way to read response headers with `elm-lang/http`? I'm trying to use an API that uses response headers for pagination &lt;https://docs.gdax.com/#pagination&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T18:07:01.658488</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#Response&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T18:07:29.668724</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#expectStringResponse&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T18:08:33.692217</ts>
    <user>U177VRFJP</user>
    <text>ah, somehow I missed `expectStringResponse`...thanks Noah :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T18:08:51.698981</ts>
    <user>U0EUHKVGB</user>
    <text>The name is not so obvious</text>
  </message>
  <message>
    <ts>2017-07-25T18:34:29.213472</ts>
    <user>U5LFUHH19</user>
    <text>I would like to `Json.Encode` a `List String` but I'm clearly not understanding how it works:
```
&amp;gt; E.list &amp;lt;| List.map E.string ["foo", "bar"]
{ 0 = "foo", 1 = "bar" } : Json.Encode.Value
```</text>
  </message>
  <message>
    <ts>2017-07-25T18:35:02.223564</ts>
    <user>U5LFUHH19</user>
    <text>I guess I'm expecting to see something that looks like `["foo","bar"]`</text>
  </message>
  <message>
    <ts>2017-07-25T18:36:06.243747</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5LFUHH19&gt; That is what is made.</text>
  </message>
  <message>
    <ts>2017-07-25T18:36:17.247239</ts>
    <user>U0EUHKVGB</user>
    <text>elm-repl uses `toString`</text>
  </message>
  <message>
    <ts>2017-07-25T18:36:28.250762</ts>
    <user>U0EUHKVGB</user>
    <text>`toString` does magic in order to represent things as strings.</text>
  </message>
  <message>
    <ts>2017-07-25T18:36:40.254548</ts>
    <user>U0EUHKVGB</user>
    <text>A JSON list gets iterated over as if it's an object</text>
  </message>
  <message>
    <ts>2017-07-25T18:36:49.257449</ts>
    <user>U5LFUHH19</user>
    <text>Hmm, OK, let me pass it to my backend and see what is the what.</text>
  </message>
  <message>
    <ts>2017-07-25T18:36:57.259765</ts>
    <user>U0EUHKVGB</user>
    <text>What you have there is this json: `["foo", "bar"]`</text>
  </message>
  <message>
    <ts>2017-07-25T18:37:20.266927</ts>
    <user>U0EUHKVGB</user>
    <text>I promise you it's that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T18:39:14.300846</ts>
    <user>U5LFUHH19</user>
    <text>You are correct, sir!  :slightly_smiling_face:  Thanks bigly.</text>
  </message>
  <message>
    <ts>2017-07-25T18:44:57.406237</ts>
    <user>U6B7NBTLZ</user>
    <text>hello</text>
  </message>
  <message>
    <ts>2017-07-25T18:45:08.409630</ts>
    <user>U6B7NBTLZ</user>
    <text>i updated elixir to v 1.5</text>
  </message>
  <message>
    <ts>2017-07-25T18:45:30.416761</ts>
    <user>U6B7NBTLZ</user>
    <text>and now i get this error when i use mix ecto.create for example</text>
  </message>
  <message>
    <ts>2017-07-25T18:45:33.417804</ts>
    <user>U6B7NBTLZ</user>
    <text>could not compile dependency :postgrex, "mix compile" failed. You can recompile this dependency with "mix deps.compile postgrex", update it with "mix deps.update postgrex" or clean it with "mix deps.clean postgrex"</text>
  </message>
  <message>
    <ts>2017-07-25T18:45:37.418906</ts>
    <user>U6B7NBTLZ</user>
    <text>some help</text>
  </message>
  <message>
    <ts>2017-07-25T18:45:39.419513</ts>
    <user>U6B7NBTLZ</user>
    <text>somebody</text>
  </message>
  <message>
    <ts>2017-07-25T18:45:40.419849</ts>
    <user>U6B7NBTLZ</user>
    <text>?</text>
  </message>
  <message>
    <ts>2017-07-25T18:56:50.617085</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U6B7NBTLZ&gt; Erm, I think you asked in the wrong slack group :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-07-25T18:56:52.617476</ts>
    <user>U1AN4JRFV</user>
    <text>i assume you ran the suggested commands and got other errors?</text>
  </message>
  <message>
    <ts>2017-07-25T18:57:07.621956</ts>
    <user>U0EUHKVGB</user>
    <text>This is the Slack group for Elm, a frontend web development language.</text>
  </message>
  <message>
    <ts>2017-07-25T18:57:28.628028</ts>
    <user>U6B7NBTLZ</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-25T18:57:36.630293</ts>
    <user>U6B7NBTLZ</user>
    <text>those are the errors</text>
  </message>
  <message>
    <ts>2017-07-25T18:57:57.636268</ts>
    <user>U6B7NBTLZ</user>
    <text>== Compilation error in file lib/postgrex/extensions/calendar.ex ==
** (ArgumentError) invalid Unix time 9224318016000
    (elixir) lib/calendar/datetime.ex:136: DateTime.from_unix!/3
    lib/postgrex/extensions/calendar.ex:113: (module)
could not compile dependency :postgrex, "mix compile" failed. You can recompile this dependency with "mix deps.compile postgrex", update it with "mix deps.update postgrex" or clean it with "mix deps.clean postgrex</text>
  </message>
  <message>
    <ts>2017-07-25T18:58:08.639380</ts>
    <user>U1AN4JRFV</user>
    <text>what is the output of `mix deps.update postgrex`</text>
  </message>
  <message>
    <ts>2017-07-25T18:58:47.650811</ts>
    <user>U6B7NBTLZ</user>
    <text>Running dependency resolution...
Dependency resolution completed:
  base64url 0.0.1
  comeonin 2.5.3
  connection 1.0.4
  cowboy 1.0.4
  cowlib 1.0.2
  csv 1.4.4
  db_connection 1.1.2
  decimal 1.4.0
  distillery 1.1.0
  earmark 1.0.1
  ecto 2.0.5
  edeliver 1.4.0
  fs 0.9.2
  gen_smtp 0.11.0
  gettext 0.11.0
  httpotion 3.0.1
  ibrowse 4.2.2
  joken 1.3.1
  jose 1.8.0
  junit_formatter 1.2.0
  mailman 0.3.0
  mime 1.0.1
  parallel_stream 1.0.5
  phoenix 1.2.1
  phoenix_ecto 3.0.1
  phoenix_html 2.6.2
  phoenix_live_reload 1.0.5
  phoenix_pubsub 1.0.0
  plug 1.2.2
  poison 2.2.0
  poolboy 1.5.1
  postgrex 0.12.1
  ranch 1.2.1</text>
  </message>
  <message>
    <ts>2017-07-25T18:58:59.654397</ts>
    <user>U1AN4JRFV</user>
    <text>now try compiling again</text>
  </message>
  <message>
    <ts>2017-07-25T18:59:24.661930</ts>
    <user>U1AN4JRFV</user>
    <text>`mix compile`</text>
  </message>
  <message>
    <ts>2017-07-25T19:00:10.676638</ts>
    <user>U6B7NBTLZ</user>
    <text>same error</text>
  </message>
  <message>
    <ts>2017-07-25T19:00:38.685281</ts>
    <user>U6B7NBTLZ</user>
    <text>=&amp;gt; postgrex
Compiling 45 files (.ex)
warning: String.strip/1 is deprecated, use String.trim/1
  lib/postgrex/error_code.ex:9

warning: module attribute @higher_types was set but never used
  lib/postgrex/types.ex:20


== Compilation error in file lib/postgrex/extensions/calendar.ex ==
** (ArgumentError) invalid Unix time 9224318016000
    (elixir) lib/calendar/datetime.ex:136: DateTime.from_unix!/3
    lib/postgrex/extensions/calendar.ex:113: (module)
could not compile dependency :postgrex, "mix compile" failed. You can recompile this dependency with "mix deps.compile postgrex", update it with "mix deps.update postgrex" or clean it with "mix deps.clean postgrex"</text>
  </message>
  <message>
    <ts>2017-07-25T19:01:18.697513</ts>
    <user>U1AN4JRFV</user>
    <text>if i was you, i'd try to a clean as well, and then head over to the elixir-slack, if nothing else helps</text>
  </message>
  <message>
    <ts>2017-07-25T19:03:47.740169</ts>
    <user>U1AN4JRFV</user>
    <text>just in case you haven't seen this, looks relevant: &lt;https://github.com/elixir-ecto/postgrex/issues/300&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T19:05:54.775938</ts>
    <user>U6B7NBTLZ</user>
    <text>thanks a lot :d</text>
  </message>
  <message>
    <ts>2017-07-25T19:06:27.784904</ts>
    <user>U1AN4JRFV</user>
    <text>:v:</text>
  </message>
  <message>
    <ts>2017-07-25T19:31:40.191629</ts>
    <user>U0LKXP19D</user>
    <text>Hi y'all. I have a question for a scenario that should be fairly common:

I have a reusable widget that has it's own model with default values. Optionally, a part of this model should be able to be overridden be the parent, by passing in a config.

So i need a "copy property if exists, else use default value"</text>
  </message>
  <message>
    <ts>2017-07-25T19:32:36.206480</ts>
    <user>U0LKXP19D</user>
    <text>I really don't want to have to manually write `if config.prop then config.prop else defaultModel.prop` for every property...</text>
  </message>
  <message>
    <ts>2017-07-25T19:35:07.245632</ts>
    <user>U0M9CNX1A</user>
    <text>I've seen the `foo { defaults | prop = "override" }` pattern used a fair bit</text>
  </message>
  <message>
    <ts>2017-07-25T19:38:36.298884</ts>
    <user>U0LKXP19D</user>
    <text>ok thanks</text>
  </message>
  <message>
    <ts>2017-07-25T19:40:13.323102</ts>
    <user>U0LKXP19D</user>
    <text>wait.. I don't understand where the conditional part is</text>
  </message>
  <message>
    <ts>2017-07-25T19:41:44.346683</ts>
    <user>U0LKXP19D</user>
    <text>ok that's saying "start with the default, then override this one property to this value", in my case the value may not exist</text>
  </message>
  <message>
    <ts>2017-07-25T19:42:16.354675</ts>
    <user>U0M9CNX1A</user>
    <text>Sorry, typing on a phone so was terse :)
There is no conditional. You just expose a default model record and the caller can pass that in with any overrides they desire</text>
  </message>
  <message>
    <ts>2017-07-25T19:44:07.382252</ts>
    <user>U0LKXP19D</user>
    <text>I'd rather not expose the entire model to the parent because it contains props that are only relevant internally (also, if I want to extend the internal model in future that would be a breaking change for all users of this widget)</text>
  </message>
  <message>
    <ts>2017-07-25T19:44:58.394954</ts>
    <user>U0LKXP19D</user>
    <text>in JavaScript i'd use something like `Object.assign(default, config)`</text>
  </message>
  <message>
    <ts>2017-07-25T19:45:24.401795</ts>
    <user>U23SA861Y</user>
    <text>yeah, you probably want to take a step back from this "reusable component with state" idea</text>
  </message>
  <message>
    <ts>2017-07-25T19:46:14.413970</ts>
    <user>U0LKXP19D</user>
    <text>I had a feeling I was doing it wrong.</text>
  </message>
  <message>
    <ts>2017-07-25T19:46:20.415288</ts>
    <user>U23SA861Y</user>
    <text>&lt;https://www.youtube.com/watch?v=2ihTgEYiKpI&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T19:47:46.436248</ts>
    <user>U23SA861Y</user>
    <text>so all your state has live in the model, you can hide it behind opaque types if that's really what you want.</text>
  </message>
  <message>
    <ts>2017-07-25T19:48:54.452935</ts>
    <user>U0LKXP19D</user>
    <text>I see.</text>
  </message>
  <message>
    <ts>2017-07-25T19:49:00.454247</ts>
    <user>U0LKXP19D</user>
    <text>old habits and all that..</text>
  </message>
  <message>
    <ts>2017-07-25T19:49:08.456158</ts>
    <user>U0LKXP19D</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-25T19:53:21.517269</ts>
    <user>U23SA861Y</user>
    <text>you can have constants defined outside the model but any changing state needs to find it's way back there</text>
  </message>
  <message>
    <ts>2017-07-25T21:22:25.665875</ts>
    <user>U2SR9DL7Q</user>
    <text>hey all. Would anyone like to help with commands and a slightly complex update function? Is anyone willing to look through a small gist? One of my commands is triggering late and I can't figure out why.</text>
  </message>
  <message>
    <ts>2017-07-25T21:30:42.762979</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;https://gist.github.com/tkshill/2c6f27b26938631f0028e210a8ffda8e&gt; 
My `ResolveTurn` Msg doesnt seem to figure out who won the game until a full cycle after that player emptied all their cards, but I'm not sure why :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-25T21:52:18.013964</ts>
    <user>U0JFGGZS6</user>
    <text>I think this line references stale state -&amp;gt; &lt;https://gist.github.com/tkshill/2c6f27b26938631f0028e210a8ffda8e#file-update-elm-L81&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T21:54:27.039169</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0JFGGZS6&gt; I suspect you're right, but I'm not sure how. The active player can only be incremented at the end of resolving the turn.</text>
  </message>
  <message>
    <ts>2017-07-25T21:59:46.101929</ts>
    <user>U0JFGGZS6</user>
    <text>I was theorizing that the `hand` was the player's hand before s/he made the last play, somehow</text>
  </message>
  <message>
    <ts>2017-07-25T22:00:10.107502</ts>
    <user>U0JFGGZS6</user>
    <text>would a `Debug.log` there help shed any light?</text>
  </message>
  <message>
    <ts>2017-07-25T22:01:07.119649</ts>
    <user>U2SR9DL7Q</user>
    <text>I guess I'm using debug.log for the first time</text>
  </message>
  <message>
    <ts>2017-07-25T22:02:10.132632</ts>
    <user>U2SR9DL7Q</user>
    <text>I'v ebeen live testing. At the time a player hits 0 dominoes first... it knows they hit zero, and the activeplayer seems to hit hand 0... but game does not become WonGame</text>
  </message>
  <message>
    <ts>2017-07-25T22:04:05.155617</ts>
    <user>U0CL92DJN</user>
    <text>Does a third party implementation of `Set` exist that isn’t limited to `comparable`? For example if I have a simple union type like:
```
type Thing = ThingA | ThingB | ThingC
```
And I want to do `Set.fromList [ThingA, ThingB]`
The hack in the implementation would be to do `toString` on the values.</text>
  </message>
  <message>
    <ts>2017-07-25T22:04:38.162052</ts>
    <user>U23SA861Y</user>
    <text>how would you search a set if they aren't comparable....</text>
  </message>
  <message>
    <ts>2017-07-25T22:06:02.178404</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;http://package.elm-lang.org/packages/eeue56/elm-all-dict/latest&gt;  has a Dict implementation that does just that</text>
  </message>
  <message>
    <ts>2017-07-25T22:07:06.190788</ts>
    <user>U23SA861Y</user>
    <text>well then that implements set because a `Set a` is just `Dict a ()`</text>
  </message>
  <message>
    <ts>2017-07-25T22:07:30.195199</ts>
    <user>U0JFGGZS6</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-25T22:08:08.202266</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U2SR9DL7Q&gt;  just curious why you need the `delay` mechanism, it seems to add confusion to me but then I don't know what you are trying to achieve exactly</text>
  </message>
  <message>
    <ts>2017-07-25T22:09:09.213343</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0JFGGZS6&gt; I don't need it everywhere, but I was testing where was the best place to implement. without delay, players act too fast.</text>
  </message>
  <message>
    <ts>2017-07-25T22:10:34.229250</ts>
    <user>U2SR9DL7Q</user>
    <text>The whole thing seemed to be working properly until I refactored into those piped update messages... but cmds should only take effect _after_ all model updates are complete...</text>
  </message>
  <message>
    <ts>2017-07-25T22:11:26.239128</ts>
    <user>U23SA861Y</user>
    <text>yeah this whole thing (although compact) looks factored a little strange</text>
  </message>
  <message>
    <ts>2017-07-25T22:11:37.241137</ts>
    <user>U0JFGGZS6</user>
    <text>it just seems like you could stick a `resolveTurn` at the end of the chain of updates when you need it, rather than going through a Cmd and back through the update cycle</text>
  </message>
  <message>
    <ts>2017-07-25T22:11:58.245213</ts>
    <user>U23SA861Y</user>
    <text>he needs to do that to get the board to play normally</text>
  </message>
  <message>
    <ts>2017-07-25T22:12:12.247620</ts>
    <user>U23SA861Y</user>
    <text>otherwise you will get all the players playing without any view updates</text>
  </message>
  <message>
    <ts>2017-07-25T22:13:14.258545</ts>
    <user>U2SR9DL7Q</user>
    <text>the idea is runGame -&amp;gt; player action or AI player Action -&amp;gt; models update -&amp;gt; Turn Resolves -&amp;gt; New activeplayer ...</text>
  </message>
  <message>
    <ts>2017-07-25T22:13:20.259704</ts>
    <user>U23SA861Y</user>
    <text>like I would expect to see a function of the form `HasWon : model -&amp;gt; Maybe Player`</text>
  </message>
  <message>
    <ts>2017-07-25T22:13:26.260713</ts>
    <user>U23SA861Y</user>
    <text>and things of that nature</text>
  </message>
  <message>
    <ts>2017-07-25T22:14:01.266838</ts>
    <user>U0JFGGZS6</user>
    <text>right so couldn't "Turn Resolves" just be incorporated into "models update" ?</text>
  </message>
  <message>
    <ts>2017-07-25T22:14:24.271013</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U23SA861Y&gt; `UpdateWInnerMsg` basically does that I think</text>
  </message>
  <message>
    <ts>2017-07-25T22:15:35.284121</ts>
    <user>U0JFGGZS6</user>
    <text>doing it asynch potentially means the AI could play before the last person's turn resolves couldn't it?  Although unlikely with a delay of 0.</text>
  </message>
  <message>
    <ts>2017-07-25T22:15:38.284538</ts>
    <user>U23SA861Y</user>
    <text>Like I would expect to see a bunch of functions where I could play a game of dominos without TEA</text>
  </message>
  <message>
    <ts>2017-07-25T22:16:30.294061</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U23SA861Y&gt; initally, the activeplayer was sent to each message explicitly as an argument</text>
  </message>
  <message>
    <ts>2017-07-25T22:16:55.298755</ts>
    <user>U2SR9DL7Q</user>
    <text>My non TEA implementation... is written in python.</text>
  </message>
  <message>
    <ts>2017-07-25T22:17:49.308419</ts>
    <user>U23SA861Y</user>
    <text>right, but I would expect to see a module where I can place dominoes and advance turns and such without messages at all, and then I wire that all in to get the flow the the game progressing</text>
  </message>
  <message>
    <ts>2017-07-25T22:18:55.320675</ts>
    <user>U23SA861Y</user>
    <text>is this posted on github somewhere or just the gist</text>
  </message>
  <message>
    <ts>2017-07-25T22:19:44.329744</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;https://github.com/tkshill/tkshill.github.io&gt; github</text>
  </message>
  <message>
    <ts>2017-07-25T22:20:21.336620</ts>
    <user>U2SR9DL7Q</user>
    <text>and &lt;https://tkshill.github.io/#portfolio&gt; crude working version, a few commits behind</text>
  </message>
  <message>
    <ts>2017-07-25T22:20:46.341298</ts>
    <user>U0JFGGZS6</user>
    <text>just to say, it's great to see a complex piece of code in the process of being worked on, so thanks!</text>
  </message>
  <message>
    <ts>2017-07-25T22:21:36.350363</ts>
    <user>U2SR9DL7Q</user>
    <text>:smile: &lt;@U0JFGGZS6&gt; thanks. I've been trying to save snippets. Wanna do a write up later on how it slowly became less garbo over time.</text>
  </message>
  <message>
    <ts>2017-07-25T22:22:17.357719</ts>
    <user>U2SR9DL7Q</user>
    <text>Still garbo though. Dominoes is... sufficiently complex for a _wanting to leave beginner_ level project.</text>
  </message>
  <message>
    <ts>2017-07-25T22:26:40.403789</ts>
    <user>U23SA861Y</user>
    <text>so I would expect to see all those types having to do with playing a game of dominoes (Player, Board, etc) in the dominoes file</text>
  </message>
  <message>
    <ts>2017-07-25T22:27:48.415941</ts>
    <user>U23SA861Y</user>
    <text>I would expect to see some function on the Board type, hasWon. availablePositions, play domino etc.</text>
  </message>
  <message>
    <ts>2017-07-25T22:28:08.419489</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U23SA861Y&gt;, literally the next thing on my schedule after getting this to work is... putting all dominoes stuff into one file.  :slightly_smiling_face: As evan said in the "life of a file talk" ... at some point you know.</text>
  </message>
  <message>
    <ts>2017-07-25T22:28:48.426808</ts>
    <user>U23SA861Y</user>
    <text>well you're right, but what you've done here is you already broke it off</text>
  </message>
  <message>
    <ts>2017-07-25T22:29:42.436149</ts>
    <user>U23SA861Y</user>
    <text>before that it would probably live entirely in a single file</text>
  </message>
  <message>
    <ts>2017-07-25T22:29:52.437934</ts>
    <user>U2BCXMGKW</user>
    <text>I guess the problem is that `handLeft` is not `0`, right? So that leaves us with either `activeplayer` having the wrong value, or `hand` being not empty.</text>
  </message>
  <message>
    <ts>2017-07-25T22:30:36.446847</ts>
    <user>U2SR9DL7Q</user>
    <text>indeed. I'm running a version on my local machine where my views always give me the hand size of every player and the active player</text>
  </message>
  <message>
    <ts>2017-07-25T22:30:47.448920</ts>
    <user>U23SA861Y</user>
    <text>either way, you've got some mixing of messages with game logic</text>
  </message>
  <message>
    <ts>2017-07-25T22:31:01.451412</ts>
    <user>U2SR9DL7Q</user>
    <text>At some point, a player's hand hits zero. The activeplayer's hand hits zero</text>
  </message>
  <message>
    <ts>2017-07-25T22:31:35.457627</ts>
    <user>U2SR9DL7Q</user>
    <text>but game isnt updated to wongame until a few more turns.</text>
  </message>
  <message>
    <ts>2017-07-25T22:32:04.462581</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U2SR9DL7Q&gt; what triggers these turns?</text>
  </message>
  <message>
    <ts>2017-07-25T22:32:04.462589</ts>
    <user>U2SR9DL7Q</user>
    <text>So players are playing after one players hand hit zero, until the next time the game encounters that player.</text>
  </message>
  <message>
    <ts>2017-07-25T22:32:58.472136</ts>
    <user>U153UK3FA</user>
    <text>ah, so the problem is that model.activeplayer is being changed before the hand size check happens</text>
  </message>
  <message>
    <ts>2017-07-25T22:33:04.473377</ts>
    <user>U2BCXMGKW</user>
    <text>and the `activeplayer` only changes in the `ResolveTurn` branch?</text>
  </message>
  <message>
    <ts>2017-07-25T22:33:04.473431</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U153UK3FA&gt; A cmd triggers ResolveTurn msg, which handles seeing if win conditions were met after last turn. If not, go to next player.</text>
  </message>
  <message>
    <ts>2017-07-25T22:33:29.477934</ts>
    <user>U2SR9DL7Q</user>
    <text>Seems so.</text>
  </message>
  <message>
    <ts>2017-07-25T22:34:48.491416</ts>
    <user>U2SR9DL7Q</user>
    <text>Honestly... I may redo large chunks of this logic from scratch. I wrote it before I really knew how to make elegant functions, so it was many mant lets and cases (and still is really).</text>
  </message>
  <message>
    <ts>2017-07-25T22:35:08.494946</ts>
    <user>U2SR9DL7Q</user>
    <text>But I'd like to know what's going wrong _now_ so I can understand how to avoid it the next time.</text>
  </message>
  <message>
    <ts>2017-07-25T22:36:12.505936</ts>
    <user>U23SA861Y</user>
    <text>fair enough, but what I'm saying is that this problem is difficult to debug because the abstractions are a bit off.</text>
  </message>
  <message>
    <ts>2017-07-25T22:37:05.515515</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U2SR9DL7Q&gt; what updates the size of the hand?</text>
  </message>
  <message>
    <ts>2017-07-25T22:37:35.520826</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U153UK3FA&gt; updatePlayersMsg</text>
  </message>
  <message>
    <ts>2017-07-25T22:38:00.525075</ts>
    <user>U2SR9DL7Q</user>
    <text>it takes the new hand to make update a player, then updates model with new player</text>
  </message>
  <message>
    <ts>2017-07-25T22:38:04.525680</ts>
    <user>U153UK3FA</user>
    <text>but that doesn’t update model.activeplayer.hand</text>
  </message>
  <message>
    <ts>2017-07-25T22:39:15.538121</ts>
    <user>U2BCXMGKW</user>
    <text>^ see, that's why you need a single source-of-truth :smile:</text>
  </message>
  <message>
    <ts>2017-07-25T22:39:49.544228</ts>
    <user>U2SR9DL7Q</user>
    <text>I... think I know what went wrong</text>
  </message>
  <message>
    <ts>2017-07-25T22:40:27.551349</ts>
    <user>U2SR9DL7Q</user>
    <text>When it worked, model had an active *name* and just kept the name of the activeplayer in the model.</text>
  </message>
  <message>
    <ts>2017-07-25T22:40:58.557018</ts>
    <user>U2SR9DL7Q</user>
    <text>so each update would get the activeplayer from the model by using that name.</text>
  </message>
  <message>
    <ts>2017-07-25T22:41:47.565757</ts>
    <user>U2SR9DL7Q</user>
    <text>the update just cycled through the names... `One -&amp;gt; Two`, `Two -&amp;gt; Three`,</text>
  </message>
  <message>
    <ts>2017-07-25T22:42:03.568415</ts>
    <user>U2BCXMGKW</user>
    <text>&lt;@U2SR9DL7Q&gt; you might like this talk: &lt;https://www.youtube.com/watch?v=IcgmSRJHu_8&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T22:42:12.569945</ts>
    <user>U2BCXMGKW</user>
    <text>it talks about modelling data to avoid these kinds of issues</text>
  </message>
  <message>
    <ts>2017-07-25T22:43:58.588463</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2BCXMGKW&gt; thanks. watched that talk already though. bookmarked it even. but at some point after like a week I was really really tired on writing the logic for this and I figured, "I'll just get it all out and refactor my way to success".</text>
  </message>
  <message>
    <ts>2017-07-25T22:45:03.600143</ts>
    <user>U2SR9DL7Q</user>
    <text>Clearly, attempting to blitz through something this... involved, causes trouble.</text>
  </message>
  <message>
    <ts>2017-07-25T22:47:30.627048</ts>
    <user>U2BCXMGKW</user>
    <text>then you could represent the players like the survey data type in that talk, I guess</text>
  </message>
  <message>
    <ts>2017-07-25T22:49:07.644132</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2BCXMGKW&gt; Thanks :slightly_smiling_face: I'll watch it again tonight.</text>
  </message>
  <message>
    <ts>2017-07-25T22:49:37.649573</ts>
    <user>U2BCXMGKW</user>
    <text>`{ previous : List Player, active : Player, remaining : List Player }`, that way you don't have duplicated values and you can still focus on the active player easily</text>
  </message>
  <message>
    <ts>2017-07-25T22:50:21.657348</ts>
    <user>U2BCXMGKW</user>
    <text>there might be better solutions though, haven't thought too much about it!</text>
  </message>
  <message>
    <ts>2017-07-25T22:50:42.661006</ts>
    <user>U2BCXMGKW</user>
    <text>but getting the data model right first normally helps a LOT when writing code later</text>
  </message>
  <message>
    <ts>2017-07-25T22:51:16.667058</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U153UK3FA&gt; &lt;@U2SR9DL7Q&gt;  looks like this updates the hand -&amp;gt; &lt;https://gist.github.com/tkshill/2c6f27b26938631f0028e210a8ffda8e#file-update-elm-L21-L22&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T22:52:06.675717</ts>
    <user>U2SR9DL7Q</user>
    <text>Yeah. I managed to get it pretty clean in the python version. I think with the "activeplayer" though I made it worse. it doesnt need to exist in addition to my players.</text>
  </message>
  <message>
    <ts>2017-07-25T22:52:23.678923</ts>
    <user>U2SR9DL7Q</user>
    <text>cuz now I technically have Five players</text>
  </message>
  <message>
    <ts>2017-07-25T22:54:04.696393</ts>
    <user>U2BCXMGKW</user>
    <text>yes, but even if you save the name of the active player like before, you can have weird issues if the name doesn't really belong to any player, etc.</text>
  </message>
  <message>
    <ts>2017-07-25T22:55:26.711439</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2BCXMGKW&gt; thats the magic of FP though. The names are a union type, with a proper function for cycling through them. It's impossible to make or pass an invalid name.
`Type PlayerName  = One | Two | Three | Four`</text>
  </message>
  <message>
    <ts>2017-07-25T22:55:53.716418</ts>
    <user>U2BCXMGKW</user>
    <text>what if a player has a duplicated name then?</text>
  </message>
  <message>
    <ts>2017-07-25T22:56:25.722506</ts>
    <user>U2BCXMGKW</user>
    <text>what if the player with that name is not in the list of players?</text>
  </message>
  <message>
    <ts>2017-07-25T22:56:49.726581</ts>
    <user>U2SR9DL7Q</user>
    <text>this function used to return the new names
```
nextPlayer : Player -&amp;gt; Players -&amp;gt; Player
nextPlayer player (FourPlayers p1 p2 p3 p4) =
    case player.name of
        One -&amp;gt;
            p2

        Two -&amp;gt;
            p3

        Three -&amp;gt;
            p4

        Four -&amp;gt;
            p1
``` 
The names are assigned once, during set up, from a list with the unique values.</text>
  </message>
  <message>
    <ts>2017-07-25T22:57:07.729602</ts>
    <user>U2SR9DL7Q</user>
    <text>It's the one thing I couldnt do in pythn easily, where I had to track an Int</text>
  </message>
  <message>
    <ts>2017-07-25T22:57:11.730332</ts>
    <user>U2BCXMGKW</user>
    <text>all I'm saying is that you can get more guarantees with a different data model</text>
  </message>
  <message>
    <ts>2017-07-25T22:57:43.735882</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U0JFGGZS6&gt; but you can see that value is never applied to model.activeplayer</text>
  </message>
  <message>
    <ts>2017-07-25T22:58:33.744629</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U0JFGGZS6&gt; it’s passed to `updatePlayerMsg` (&lt;https://gist.github.com/tkshill/2c6f27b26938631f0028e210a8ffda8e#file-update-elm-L149&gt;) which only updates `model.players`</text>
  </message>
  <message>
    <ts>2017-07-25T22:58:52.748014</ts>
    <user>U0JFGGZS6</user>
    <text>oh, yes I see</text>
  </message>
  <message>
    <ts>2017-07-25T22:58:54.748311</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2BCXMGKW&gt; I don't disagree. I'm going to have a nice rethink of the whole thing. But just referencing that this update issue occurred after I moved away from tracking just the name.</text>
  </message>
  <message>
    <ts>2017-07-25T22:59:02.749714</ts>
    <user>U0JFGGZS6</user>
    <text>duplicate state indeed</text>
  </message>
  <message>
    <ts>2017-07-25T23:01:01.772510</ts>
    <user>U2SR9DL7Q</user>
    <text>When we talk about this again, lets just say that I introduced this error so we could have a fun evening of rousing, thought-provoking discussion.</text>
  </message>
  <message>
    <ts>2017-07-25T23:02:03.784126</ts>
    <user>U153UK3FA</user>
    <text>in javascript, model.activeplayer would just be a reference to an object in model.players. References and mutable state make it much easier to have a single source of truth. But they make it hard to keep it from getting out of control.</text>
  </message>
  <message>
    <ts>2017-07-25T23:02:47.792251</ts>
    <user>U0JFGGZS6</user>
    <text>haha</text>
  </message>
  <message>
    <ts>2017-07-25T23:03:40.801624</ts>
    <user>U0JFGGZS6</user>
    <text>you could use something like a zipper list that cycles.</text>
  </message>
  <message>
    <ts>2017-07-25T23:04:47.813283</ts>
    <user>U0JFGGZS6</user>
    <text>ah, someone has made it already looks like.  &lt;http://package.elm-lang.org/packages/maorleger/elm-infinite-zipper/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T23:05:12.817573</ts>
    <user>U2SR9DL7Q</user>
    <text>I watched &lt;@U3SJEDR96&gt; I think? implementation of zipper lists. It seems interesting but I'd have to sit and map out how everything would have to change to accomodate it</text>
  </message>
  <message>
    <ts>2017-07-25T23:07:58.845224</ts>
    <user>U2SR9DL7Q</user>
    <text>_sigh_ ... today was supposed to be making the interface not garbage and posting it up for the slack and reddit folks to play. :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-25T23:08:57.854966</ts>
    <user>U2SR9DL7Q</user>
    <text>then some json work for the resume... then maybe a smarter selection algorithm for the AI, which currently play like 6 yr olds.</text>
  </message>
  <message>
    <ts>2017-07-25T23:09:53.864062</ts>
    <user>U0JFGGZS6</user>
    <text>best laid plans...</text>
  </message>
  <message>
    <ts>2017-07-25T23:10:54.874707</ts>
    <user>U2SR9DL7Q</user>
    <text>estimating time of completion...</text>
  </message>
  <message>
    <ts>2017-07-25T23:12:08.886917</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0JFGGZS6&gt; &lt;@U23SA861Y&gt; &lt;@U2BCXMGKW&gt; &lt;@U153UK3FA&gt;  you've all been wonderful, as always. I am in your debt.</text>
  </message>
  <message>
    <ts>2017-07-25T23:14:19.908844</ts>
    <user>U0JFGGZS6</user>
    <text>my experience so far, coming from dynamic languages, is that data modelling takes a ... _lot_ more time than you'd expect</text>
  </message>
  <message>
    <ts>2017-07-25T23:16:19.929379</ts>
    <user>U2SR9DL7Q</user>
    <text>in FP, you don't have to use ints and strings everywhere anymore. But the blessing of choice is the curse of having to figure out _good_ choices.</text>
  </message>
  <message>
    <ts>2017-07-25T23:18:42.953650</ts>
    <user>U14Q8S4EM</user>
    <text>Anyone ever use Reason?</text>
  </message>
  <message>
    <ts>2017-07-25T23:18:52.955124</ts>
    <user>U14Q8S4EM</user>
    <text>I kind of realized I forgot about it.</text>
  </message>
  <message>
    <ts>2017-07-25T23:19:02.956822</ts>
    <user>U14Q8S4EM</user>
    <text>Its kind of like an Elm substitute isnt it?</text>
  </message>
  <message>
    <ts>2017-07-25T23:19:20.959779</ts>
    <user>U14Q8S4EM</user>
    <text>Must not be doing well if I was able to forget about it. I wonder why they developed it in the first place.</text>
  </message>
  <message>
    <ts>2017-07-25T23:19:32.961707</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U0EUHKVGB&gt; tried it pretty recently</text>
  </message>
  <message>
    <ts>2017-07-25T23:20:09.967745</ts>
    <user>U0CL0AS3V</user>
    <text>it didn't sound like it went well</text>
  </message>
  <message>
    <ts>2017-07-25T23:20:53.974919</ts>
    <user>U0CL0AS3V</user>
    <text>but I hope they are successful someday...more ML family languages succeeding in the browser is good for all of us imo :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T23:22:41.992264</ts>
    <user>U0CL0AS3V</user>
    <text>a big part of why people shy away from even trying a language like elm is that it's so different from what's popular (js, coffeescript, typescript)</text>
  </message>
  <message>
    <ts>2017-07-25T23:23:50.003311</ts>
    <user>U0CL0AS3V</user>
    <text>more ML variants succeeding is the social proof some people need (or maybe their bosses need) to justify investing time to try it</text>
  </message>
  <message>
    <ts>2017-07-25T23:24:40.011265</ts>
    <user>U0CL0AS3V</user>
    <text>we early adopters don't have that high a barrier, evidently, but I get that others have different risk tolerances for how they spend their time</text>
  </message>
  <message>
    <ts>2017-07-25T23:28:43.049825</ts>
    <user>U153UK3FA</user>
    <text>The fact that ReasonML can take advantage of an existing set of Ocaml libraries is pretty nice.</text>
  </message>
  <message>
    <ts>2017-07-25T23:37:03.132908</ts>
    <user>U5W5F6QGP</user>
    <text>I actually moved to elm from Reason as my hobby language

It had issues with installation on my various linux machines 

Outside of that, the documentation was quite lax at that time (they've recently redone it) and I just found things to be a little bit unstable for my tastes

I will probably try it out in another ~6 months</text>
  </message>
  <message>
    <ts>2017-07-25T23:37:34.137820</ts>
    <user>U5W5F6QGP</user>
    <text>while I was researching some of the aforementioned issues I saw someone say "Elm is so easy to set up compared to this" so I gave elm a shot</text>
  </message>
  <message>
    <ts>2017-07-25T23:43:02.190950</ts>
    <user>U5W5F6QGP</user>
    <text>They get a lot for free because of their Ocaml interop story, but I also found their extensions to Ocaml tools like merlin to be where a lot of my environment pain came from</text>
  </message>
  <message>
    <ts>2017-07-25T23:51:20.272848</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U2SR9DL7Q&gt; hofstader's law states that a project will always take 3 times longer than expected, even if you account for hofstadter's law.</text>
  </message>
  <message>
    <ts>2017-07-25T23:53:10.290330</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U23SA861Y&gt; can we just blame it on kuthrapali?</text>
  </message>
  <message>
    <ts>2017-07-25T23:55:47.315442</ts>
    <user>U2SR9DL7Q</user>
    <text>Also, the recursive nature of that statement is vaguely unsettling.</text>
  </message>
  <message>
    <ts>2017-07-26T00:53:19.872038</ts>
    <user>U14Q8S4EM</user>
    <text>Just account for it -1 times and you are good.</text>
  </message>
  <message>
    <ts>2017-07-26T03:03:05.351379</ts>
    <user>U0H3A9XLN</user>
    <text>I have a form which gets several selection options from the backend. What is the best way to model it?</text>
  </message>
  <message>
    <ts>2017-07-26T03:03:51.362944</ts>
    <user>U0H3A9XLN</user>
    <text>The problem is that because of this multiple `RemoteData` stuff it’s super painful to do any field updates or other logic</text>
  </message>
  <message>
    <ts>2017-07-26T03:07:59.426893</ts>
    <user>U4872964V</user>
    <text>&lt;@U0H3A9XLN&gt; what’s the pain? do you have an example of it?</text>
  </message>
  <message>
    <ts>2017-07-26T03:10:35.468343</ts>
    <user>U0H3A9XLN</user>
    <text>having impossible branches because I have to pattern match monad</text>
  </message>
  <message>
    <ts>2017-07-26T03:11:50.488486</ts>
    <user>U4872964V</user>
    <text>i’m not sure I understand, do you have a simple code example?</text>
  </message>
  <message>
    <ts>2017-07-26T03:14:29.530750</ts>
    <user>U0H3A9XLN</user>
    <text>unfortunately I can’t just copy paste my code and it won’t be trivial to make it now</text>
  </message>
  <message>
    <ts>2017-07-26T03:14:45.534915</ts>
    <user>U0H3A9XLN</user>
    <text>maybe you can better point me to some advanced form examples?</text>
  </message>
  <message>
    <ts>2017-07-26T03:15:16.543288</ts>
    <user>U4872964V</user>
    <text>it’s hard when I don’t know what your pain is, or what your forms are, unfortunately</text>
  </message>
  <message>
    <ts>2017-07-26T03:16:27.563051</ts>
    <user>U4872964V</user>
    <text>but if you have multiple `RemoteData` it may help to use one of the `map` functions, or `andMap` on them</text>
  </message>
  <message>
    <ts>2017-07-26T03:24:21.693054</ts>
    <user>U0H3A9XLN</user>
    <text>ok, thanks</text>
  </message>
  <message>
    <ts>2017-07-26T04:05:42.473307</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0H3A9XLN&gt; are you using the `_ -&amp;gt;` pattern  in `case of` ?
```
case remoteData  of 
   Success .. -&amp;gt; 
               showSomeHtml
   _ -&amp;gt; 
        text "" 
```</text>
  </message>
  <message>
    <ts>2017-07-26T04:08:45.534079</ts>
    <user>U2LAL86AY</user>
    <text>actually it's better to use &lt;http://package.elm-lang.org/packages/bloom/remotedata/1.0.1/RemoteData#map&gt; - for success and
&lt;http://package.elm-lang.org/packages/bloom/remotedata/1.0.1/RemoteData#mapFailure&gt; -&amp;gt; for failure</text>
  </message>
  <message>
    <ts>2017-07-26T04:13:36.635105</ts>
    <user>U0H3A9XLN</user>
    <text>no, I do not use wildcard</text>
  </message>
  <message>
    <ts>2017-07-26T04:15:05.666584</ts>
    <user>U0H3A9XLN</user>
    <text>That was not about `map`, I should have formed question better. I know about the libraries API, I was really looking into different way of data modelling, not into suggestions for methods to use :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T04:19:51.765715</ts>
    <user>U4872964V</user>
    <text>&lt;@U0H3A9XLN&gt; a different way than _what_ is the obvious question. If you can't provide an example on how your code looks now it's extremely hard to suggest improvements.</text>
  </message>
  <message>
    <ts>2017-07-26T05:50:35.806657</ts>
    <user>U2LAL86AY</user>
    <text>hmm i'm curious to understand why this is not considered a compile error: 
```
import Style.Color as Color
import Color

....
someBackground = Color.background Color.red 
```
 where in fact is: 
```
someBackground = Style.Color.background Color.red 
```
Gets confusing to know if `red` is from `Style.Color` or from `Color` - elmjutsu shows intelisense for both combined. - i mean not so confusing for red - but i'm worried about the implications for other function names if this is allowed</text>
  </message>
  <message>
    <ts>2017-07-26T05:52:34.852455</ts>
    <user>U3SJEDR96</user>
    <text>If there is real confusion possible, I think you do get a compiler error:
```
This usage of variable map is ambiguous.
Maybe you want one of the following?

List.map
String.map
```</text>
  </message>
  <message>
    <ts>2017-07-26T05:53:36.876024</ts>
    <user>U2LAL86AY</user>
    <text>aa ok. So only if `red` is defined in both packages... then i get that error.. hmm</text>
  </message>
  <message>
    <ts>2017-07-26T05:53:48.880986</ts>
    <user>U3SJEDR96</user>
    <text>indeed</text>
  </message>
  <message>
    <ts>2017-07-26T05:54:55.906310</ts>
    <user>U3SJEDR96</user>
    <text>aliasing multiple modules to the same name is intentional; and allows things like `import List.Extra as List` to "combine" modules</text>
  </message>
  <message>
    <ts>2017-07-26T05:55:17.914604</ts>
    <user>U3SJEDR96</user>
    <text>I agree that it's occasionally pretty confusing, tho</text>
  </message>
  <message>
    <ts>2017-07-26T07:12:14.395600</ts>
    <user>U170TNSTZ</user>
    <text>Anybody using `create-elm-app`?</text>
  </message>
  <message>
    <ts>2017-07-26T07:16:12.466181</ts>
    <user>U170TNSTZ</user>
    <text>Anyways, I have some problems with the hot reloading. It works, and maintains the state of the model, until I encounter a compilation error. If I mess up the syntax or types, the reload will of course fail, but fixing the code afterwards will kill the state</text>
  </message>
  <message>
    <ts>2017-07-26T07:28:51.688557</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U0H3A9XLN&gt; if you're looking for alternative ways to model data, &lt;https://github.com/rtfeldman/elm-spa-example&gt; does initialization on "page" load rather than using `RemoteData`. If you don't need parts of your page to load in pieces, this style makes your `Model` easier to work with.</text>
  </message>
  <message>
    <ts>2017-07-26T07:34:20.785294</ts>
    <user>U170TNSTZ</user>
    <text>Re: my own post - Seems it’s a “bug” in `elm-hot-loader`. I created an issue here: &lt;https://github.com/fluxxu/elm-hot-loader/issues/34&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T07:41:07.906621</ts>
    <user>U0H3A9XLN</user>
    <text>&lt;@U0CL0AS3V&gt; yeah, I’ve seen it and I really enjoyed the idea. However I do now embed Elm into React application, so top level routing is done by React :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-26T08:32:05.925373</ts>
    <user>U2LAL86AY</user>
    <text>` ΓùÅ` i see this in atom terminal when installing elm packages - what does it mean?</text>
  </message>
  <message>
    <ts>2017-07-26T08:35:17.998741</ts>
    <user>U1AP08WV6</user>
    <text>&lt;@U0H3A9XLN&gt; I was wondering if routing based on hash would be useful in such cases. &lt;http://package.elm-lang.org/packages/evancz/url-parser/2.0.1/UrlParser#parseHash&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T08:39:50.105233</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2LAL86AY&gt; it's probably the "spinning circle" unicord chars that your terminal is failing to display correctly</text>
  </message>
  <message>
    <ts>2017-07-26T08:40:24.118889</ts>
    <user>U2LAL86AY</user>
    <text>that's interesting :simple_smile:</text>
  </message>
  <message>
    <ts>2017-07-26T09:02:44.695139</ts>
    <user>U2LAL86AY</user>
    <text>How can i get a `hex color  code` as a `Color` type ? Seems there is no `Color.hex` function to be used as `Color.hex "D96A6A"` for example.</text>
  </message>
  <message>
    <ts>2017-07-26T09:04:25.743275</ts>
    <user>U3SJEDR96</user>
    <text>&lt;http://klaftertief.github.io/elm-search/?q=String+-%3E+Color&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T09:05:33.775896</ts>
    <user>U3SJEDR96</user>
    <text>I think `elm-color-extra` is the best option for you</text>
  </message>
  <message>
    <ts>2017-07-26T09:08:13.850727</ts>
    <user>U2LAL86AY</user>
    <text>yep, just a thought - doesn't make more sense to include this function in  core? I mean `rbg` is there, `hex` is pretty common. why not?</text>
  </message>
  <message>
    <ts>2017-07-26T09:09:05.875553</ts>
    <user>U3SJEDR96</user>
    <text>I personally think having `Color` in core doesn't make sense, but maybe that's just me</text>
  </message>
  <message>
    <ts>2017-07-26T09:09:21.883346</ts>
    <user>U1CE9DL9H</user>
    <text>it's removed in 0.19 from core right?</text>
  </message>
  <message>
    <ts>2017-07-26T09:10:19.911589</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;https://github.com/elm-lang/core/commit/aaaaa929963b5a6a695eec28b52008de00a5c189&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T09:12:29.975708</ts>
    <user>U1CE9DL9H</user>
    <text>but, I do like that there is one standard Color type that multiple packages can use</text>
  </message>
  <message>
    <ts>2017-07-26T09:12:42.981869</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U3SJEDR96&gt; what's the reason for removing it.? I like then i can just do `import Color` and just works.</text>
  </message>
  <message>
    <ts>2017-07-26T09:13:18.000198</ts>
    <user>U1CE9DL9H</user>
    <text>the extra time packages have different types I believe, and there are many definitions of vectors over many packages. that can be really annoying</text>
  </message>
  <message>
    <ts>2017-07-26T09:13:20.001038</ts>
    <user>U3SJEDR96</user>
    <text>It's moving, not removing; to either `elm-graphics` (makes sense) or a separate package for all things color</text>
  </message>
  <message>
    <ts>2017-07-26T09:14:29.035930</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, that's fair, but if there were an `elm-lang/color`, it would make sense for other packages to provide integration with that, too..</text>
  </message>
  <message>
    <ts>2017-07-26T09:15:35.069008</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U2LAL86AY&gt; conversely, you can't `import Html` or `import Http`. You need non-core packages for that. I'd argue that they see more "real" use than `Color`, so why would `Color` have to live in core?</text>
  </message>
  <message>
    <ts>2017-07-26T09:17:12.119133</ts>
    <user>U3SJEDR96</user>
    <text>I like having the distinction between `core` and "widely considered default" packages that live under `elm-lang`</text>
  </message>
  <message>
    <ts>2017-07-26T11:55:03.107080</ts>
    <user>U2UGVS24E</user>
    <text>Has anyone dealt with users with DOM-modifying browser extensions experiencing issues with an Elm app?</text>
  </message>
  <message>
    <ts>2017-07-26T11:55:40.131818</ts>
    <user>U2UGVS24E</user>
    <text>Specifically extensions like Grammarly that add HTML elements near `&amp;lt;input&amp;gt;` and `&amp;lt;textarea&amp;gt;` elements</text>
  </message>
  <message>
    <ts>2017-07-26T11:59:52.299691</ts>
    <user>U2UGVS24E</user>
    <text>I'm thinking that using `Html.Keyed` may help mitigate such issues.  Ultimately I know this isn't an a flaw with Elm itself.</text>
  </message>
  <message>
    <ts>2017-07-26T12:02:05.392062</ts>
    <user>U2LAL86AY</user>
    <text>i think once a change happens - the view gets rendered again if you don't specify keyed element. 
So that extension - if it works by adding stuff on top of elm - will only works on static elm apps - apps with no interaction.  Because once a new update step happens - whatever was added by that browser extension will be lost due to the new view that gets rendered. - this is my understanding.</text>
  </message>
  <message>
    <ts>2017-07-26T12:02:34.412333</ts>
    <user>U0RPQMZ9S</user>
    <text>keyed will indeed help</text>
  </message>
  <message>
    <ts>2017-07-26T12:03:01.430207</ts>
    <user>U2UGVS24E</user>
    <text>I think they're experiencing runtime errors when they use such extensions and then interact with any inputs</text>
  </message>
  <message>
    <ts>2017-07-26T12:03:05.432916</ts>
    <user>U0RPQMZ9S</user>
    <text>as long as the keyed element isn't removed, vdom will reuse the keyed node with whatever other stuff you manually put in there</text>
  </message>
  <message>
    <ts>2017-07-26T12:03:24.445117</ts>
    <user>U2UGVS24E</user>
    <text>I see.  That's what I figured.</text>
  </message>
  <message>
    <ts>2017-07-26T12:05:11.515978</ts>
    <user>U0RPQMZ9S</user>
    <text>you might also want to wrap the port code that calls Grammarly with `requestAnimationFrame`. This has the effect of waiting until elm is finished rendering the view to call the js code</text>
  </message>
  <message>
    <ts>2017-07-26T12:05:56.545819</ts>
    <user>U2UGVS24E</user>
    <text>Ah well I don't have control over that.  And Grammarly is just a single example.</text>
  </message>
  <message>
    <ts>2017-07-26T12:07:01.588452</ts>
    <user>U1R5JCM55</user>
    <text>we ran into the Grammarly one, it's the only one that's come up though</text>
  </message>
  <message>
    <ts>2017-07-26T12:07:23.601794</ts>
    <user>U2UGVS24E</user>
    <text>Were you able to mitigate the issue in any way?</text>
  </message>
  <message>
    <ts>2017-07-26T12:07:29.605766</ts>
    <user>U1R5JCM55</user>
    <text>no :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T12:07:38.611042</ts>
    <user>U2UGVS24E</user>
    <text>Did you try `Html.Keyed`?</text>
  </message>
  <message>
    <ts>2017-07-26T12:07:47.616899</ts>
    <user>U2UGVS24E</user>
    <text>I just want to know whether we should even bother</text>
  </message>
  <message>
    <ts>2017-07-26T12:08:31.644615</ts>
    <user>U1R5JCM55</user>
    <text>we didn't, trying to see how `Html.Keyed` could work</text>
  </message>
  <message>
    <ts>2017-07-26T12:09:07.666600</ts>
    <user>U1R5JCM55</user>
    <text>the only way you could use it would be to force a rerender every time</text>
  </message>
  <message>
    <ts>2017-07-26T12:09:20.675185</ts>
    <user>U2UGVS24E</user>
    <text>I figure that if every input element on the page is a keyed node, the changes caused by Grammarly won't result in runtime errors.  But there might be more to it and I am wrong.</text>
  </message>
  <message>
    <ts>2017-07-26T12:09:22.676600</ts>
    <user>U1R5JCM55</user>
    <text>but that sounds like a performance nightmare</text>
  </message>
  <message>
    <ts>2017-07-26T12:10:07.703895</ts>
    <user>U1R5JCM55</user>
    <text>keyed nudges the view to rerender according to data in the model, I don't see how it would help here</text>
  </message>
  <message>
    <ts>2017-07-26T12:10:41.724117</ts>
    <user>U1R5JCM55</user>
    <text>the point is that Elm expects the DOM to be a certain way, but it isn't because something has messed with it</text>
  </message>
  <message>
    <ts>2017-07-26T12:15:00.878271</ts>
    <user>U2UGVS24E</user>
    <text>Yes.  My inclination was to think that the Elm-diffing algorithm would be able to "find" the necessary nodes if they were keyed, even with external DOM changes.  But I suppose that even out-of-place static nodes (such as a normal div) could cause issues.  I am making some assumptions about how exactly it is that Keyed works, but theoretically if every single Elm element on the page is keyed, external manipulations should never be an issue.</text>
  </message>
  <message>
    <ts>2017-07-26T12:15:09.883843</ts>
    <user>U2UGVS24E</user>
    <text>Though in the latter scenario, performance would be bad.</text>
  </message>
  <message>
    <ts>2017-07-26T12:15:38.901226</ts>
    <user>U4872964V</user>
    <text>So, Grammarly elm google: &lt;https://www.reddit.com/r/elm/comments/5p4hqu/grammarly_chrome_extension_textarea_in_elm_app/&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T12:16:57.948754</ts>
    <user>U2UGVS24E</user>
    <text>Ah yes, if what Richard Feldman (top comment) says about grammarly (removing + replacing the `&amp;lt;textarea&amp;gt;`) is the case, you probably can't prevent it from causing issues</text>
  </message>
  <message>
    <ts>2017-07-26T12:26:42.296130</ts>
    <user>U0CL0AS3V</user>
    <text>yep, unfortunately Grammarly breaks websites. I wish they wouldn't. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-26T12:27:53.338383</ts>
    <user>U23SA861Y</user>
    <text>&lt;@U0CL0AS3V&gt; I think you might be a little biased on that one.....</text>
  </message>
  <message>
    <ts>2017-07-26T13:29:49.471926</ts>
    <user>U0CL0AS3V</user>
    <text>Grammarly is not a competitor of ours. I'm just annoyed that they break stuff. :wink:</text>
  </message>
  <message>
    <ts>2017-07-26T13:31:58.546005</ts>
    <user>U0CL0AS3V</user>
    <text>(We first ran into this because many students use both Grammarly and NRI)</text>
  </message>
  <message>
    <ts>2017-07-26T13:31:58.546456</ts>
    <user>U23SA861Y</user>
    <text>I mean yeah, touching another programmers textarea without asking is just down right rude</text>
  </message>
  <message>
    <ts>2017-07-26T13:34:09.621031</ts>
    <user>U60SXAF96</user>
    <text>Are the types allowed in Flag records documented anywhere?</text>
  </message>
  <message>
    <ts>2017-07-26T13:34:38.637583</ts>
    <user>U23SA861Y</user>
    <text>flag records?</text>
  </message>
  <message>
    <ts>2017-07-26T13:34:59.649276</ts>
    <user>U60SXAF96</user>
    <text>Yeah. `type alias Flag = { foo : String, bar: Boolean }` -- what types are allowed there?</text>
  </message>
  <message>
    <ts>2017-07-26T13:35:22.663269</ts>
    <user>U60SXAF96</user>
    <text>For `programWithFlags`.</text>
  </message>
  <message>
    <ts>2017-07-26T13:35:26.665291</ts>
    <user>U23SA861Y</user>
    <text>oh, you're referring to program with flags</text>
  </message>
  <message>
    <ts>2017-07-26T13:35:49.678190</ts>
    <user>U23SA861Y</user>
    <text>look in the json interop portion of the manual</text>
  </message>
  <message>
    <ts>2017-07-26T13:36:15.693231</ts>
    <user>U3FJSB596</user>
    <text>I’m guessing these:
&lt;https://guide.elm-lang.org/interop/javascript.html#customs-and-border-protection&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T13:36:16.693416</ts>
    <user>U60SXAF96</user>
    <text>I did. I'm not seeing the allowed types in that record documented anywhere?  Am I blind?</text>
  </message>
  <message>
    <ts>2017-07-26T13:36:24.697885</ts>
    <user>U60SXAF96</user>
    <text>BINGO.</text>
  </message>
  <message>
    <ts>2017-07-26T13:36:25.698410</ts>
    <user>U60SXAF96</user>
    <text>Thank you.</text>
  </message>
  <message>
    <ts>2017-07-26T13:36:30.701081</ts>
    <user>U60SXAF96</user>
    <text>I was just blind. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-26T13:36:33.703055</ts>
    <user>U3FJSB596</user>
    <text>:wink:</text>
  </message>
  <message>
    <ts>2017-07-26T13:36:57.716375</ts>
    <user>U60SXAF96</user>
    <text>I expected Elm to have that information somewhere easy and obvious, because that's Elm. So I was confused twofold when I couldn't find it.</text>
  </message>
  <message>
    <ts>2017-07-26T13:37:36.737899</ts>
    <user>U60SXAF96</user>
    <text>(On a side note: Oh, how I wish the `Dict` of those types was allowed.....)</text>
  </message>
  <message>
    <ts>2017-07-26T13:37:50.745920</ts>
    <user>U60SXAF96</user>
    <text>(Or, y'know, a typeclass. But that's neither here nor there.)</text>
  </message>
  <message>
    <ts>2017-07-26T13:38:18.761592</ts>
    <user>U23SA861Y</user>
    <text>you would still need to know what keys that dict has and how to use them</text>
  </message>
  <message>
    <ts>2017-07-26T13:38:48.778430</ts>
    <user>U60SXAF96</user>
    <text>Exactly like this: &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Decode#dict&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T13:39:28.801664</ts>
    <user>U23SA861Y</user>
    <text>you might find that to be significantly less useful when it comes to configuring a program than for shuffling data around</text>
  </message>
  <message>
    <ts>2017-07-26T13:40:13.827534</ts>
    <user>U60SXAF96</user>
    <text>I would find that significantly useful right now: I've got a bunch of `id =&amp;gt; structure` combos. I can pass those in as a list of tuples, but it's a hash in JavaScript.</text>
  </message>
  <message>
    <ts>2017-07-26T13:40:52.850150</ts>
    <user>U60SXAF96</user>
    <text>It's a bunch of data that's generated a build-time and passed into Elm.</text>
  </message>
  <message>
    <ts>2017-07-26T13:42:02.890203</ts>
    <user>U60SXAF96</user>
    <text>Instead of having it read and re-constitute the structure at run-time, I do a `require` and Webpack bundles it right into the JS.</text>
  </message>
  <message>
    <ts>2017-07-26T13:42:28.905123</ts>
    <user>U60SXAF96</user>
    <text>JS feeds it in via a value on the Flag record.</text>
  </message>
  <message>
    <ts>2017-07-26T13:42:53.919807</ts>
    <user>U3SJEDR96</user>
    <text>You can pass in a json.encode.value and decode it</text>
  </message>
  <message>
    <ts>2017-07-26T13:43:01.924439</ts>
    <user>U23SA861Y</user>
    <text>beat me to it</text>
  </message>
  <message>
    <ts>2017-07-26T13:43:13.930970</ts>
    <user>U60SXAF96</user>
    <text>Yes, but wouldn't it be nice if Elm could just decide it to for me, just like it decodes the array of tuples for me?</text>
  </message>
  <message>
    <ts>2017-07-26T13:43:28.939770</ts>
    <user>U60SXAF96</user>
    <text>Then I don't have to build decoders.</text>
  </message>
  <message>
    <ts>2017-07-26T13:43:45.949469</ts>
    <user>U60SXAF96</user>
    <text>Because I have to build decoders for both the structure *and* the records within it.</text>
  </message>
  <message>
    <ts>2017-07-26T13:44:01.958718</ts>
    <user>U3SJEDR96</user>
    <text>Mnyeah, I don't use the automatic stuff to be honest. I like to handle errors and provide default values by myself </text>
  </message>
  <message>
    <ts>2017-07-26T13:44:02.959112</ts>
    <user>U60SXAF96</user>
    <text>Which Elm can generate automagically if it's a list of tuples of strings and records.</text>
  </message>
  <message>
    <ts>2017-07-26T13:44:33.977065</ts>
    <user>U60SXAF96</user>
    <text>(As long as I avoid union types....)</text>
  </message>
  <message>
    <ts>2017-07-26T13:45:16.002177</ts>
    <user>U60SXAF96</user>
    <text>BTW, this is exactly where typeclasses are amazing over in Haskell land...then you can have your automagical cake and eat it through manual error handling/default values, too.</text>
  </message>
  <message>
    <ts>2017-07-26T13:50:29.186697</ts>
    <user>U4872964V</user>
    <text>I'm not sure how type classes would solve that though. How would you do it in Haskell with type classes?</text>
  </message>
  <message>
    <ts>2017-07-26T13:52:25.255561</ts>
    <user>U60SXAF96</user>
    <text>There's a typeclass that denotes something which is decodable (let's call it "Decodable").  There's a typeclass defined as `(Comparable a, Decodable a, Decodable b) =&amp;gt; Dict a b`, which knows how to build a dictionary out of any two types, the first of which is anything that is both Comparable and Decodable, and the second of which is any Decodable.</text>
  </message>
  <message>
    <ts>2017-07-26T13:53:36.298118</ts>
    <user>U60SXAF96</user>
    <text>Now the compiler can figure out how to construct a `Dict` automatically, and you don't have to specify how to do it.</text>
  </message>
  <message>
    <ts>2017-07-26T13:53:52.308136</ts>
    <user>U60SXAF96</user>
    <text>In your implementation of your `Decodable`, you've got the error handling and default values.</text>
  </message>
  <message>
    <ts>2017-07-26T13:54:28.329914</ts>
    <user>U60SXAF96</user>
    <text>You can see my get into it more at this talk: &lt;https://www.youtube.com/watch?v=K7JyMKsTfgw&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T13:54:51.344473</ts>
    <user>U60SXAF96</user>
    <text>(That talk is really my subtle argument against TypeScript, and before I came to know and love Elm.)</text>
  </message>
  <message>
    <ts>2017-07-26T13:58:50.489688</ts>
    <user>U4872964V</user>
    <text>You still have to write your Decodable so I don't really see how that helps</text>
  </message>
  <message>
    <ts>2017-07-26T14:01:17.581769</ts>
    <user>U60SXAF96</user>
    <text>Right now, I can't add to those types that can be used in flags, or as keys in a dictionary, etc.</text>
  </message>
  <message>
    <ts>2017-07-26T14:02:12.615766</ts>
    <user>U60SXAF96</user>
    <text>That's what type classes allow you to do.</text>
  </message>
  <message>
    <ts>2017-07-26T14:02:46.637035</ts>
    <user>U60SXAF96</user>
    <text>Right now, I can just accept a JSON Value, and then I have to build the decoders for the whole structure all the way down.</text>
  </message>
  <message>
    <ts>2017-07-26T14:03:03.647611</ts>
    <user>U60SXAF96</user>
    <text>If I could define a Decodable implementation for my union type, for instance, then I could accept union types in my Flag records, and they'd be automagically decoded.</text>
  </message>
  <message>
    <ts>2017-07-26T14:04:06.685647</ts>
    <user>U60SXAF96</user>
    <text>Or I could accept a huge nested record structure, the leaves of which have union types, and I would only have to define the Decodable implementation for those union types, not the whole record structure.</text>
  </message>
  <message>
    <ts>2017-07-26T14:05:06.722838</ts>
    <user>U60SXAF96</user>
    <text>Because writing all those `map3` and `map2` calls are really annoying, especially since the compiler can demonstrably infer how to decode them already -- except for that one field.</text>
  </message>
  <message>
    <ts>2017-07-26T14:05:36.739977</ts>
    <user>U60SXAF96</user>
    <text>This, BTW, is exactly the case that I have right now...</text>
  </message>
  <message>
    <ts>2017-07-26T14:06:50.783194</ts>
    <user>U4872964V</user>
    <text>But you cant have multiple types `b` in that Dict (unless you have existential types). So I’m not sure how it would work actually.</text>
  </message>
  <message>
    <ts>2017-07-26T14:07:09.794055</ts>
    <user>U60SXAF96</user>
    <text>I'm not looking for multiple types in my dict.</text>
  </message>
  <message>
    <ts>2017-07-26T14:07:44.814990</ts>
    <user>U60SXAF96</user>
    <text>This is what my data structure effectively is: `Dict String (Dict String (Dict String (Dict String MyUnionType))))`.</text>
  </message>
  <message>
    <ts>2017-07-26T14:08:01.823860</ts>
    <user>U3ZNWN526</user>
    <text>Is there a general purpose "handy infix operator" package?</text>
  </message>
  <message>
    <ts>2017-07-26T14:08:19.833717</ts>
    <user>U60SXAF96</user>
    <text>Actually, it's this: `Dict String (List (Dict String (List (Dict String (List (Dict String MyUnionType)))))))`.</text>
  </message>
  <message>
    <ts>2017-07-26T14:08:25.837478</ts>
    <user>U60SXAF96</user>
    <text>(With the appropriate number of close parens.)</text>
  </message>
  <message>
    <ts>2017-07-26T14:08:29.840154</ts>
    <user>U4872964V</user>
    <text>&lt;@U60SXAF96&gt; and why can’t you just write a decoder for that type?</text>
  </message>
  <message>
    <ts>2017-07-26T14:08:40.846530</ts>
    <user>U60SXAF96</user>
    <text>I _can_. It's just annoying.</text>
  </message>
  <message>
    <ts>2017-07-26T14:08:49.852289</ts>
    <user>U4872964V</user>
    <text>But if you only have that one type, how is it annoying?</text>
  </message>
  <message>
    <ts>2017-07-26T14:09:17.868669</ts>
    <user>U60SXAF96</user>
    <text>It's dozens of lines of code that the compiler demonstrably can write for me.</text>
  </message>
  <message>
    <ts>2017-07-26T14:09:27.874469</ts>
    <user>U60SXAF96</user>
    <text>Except that it doesn't know how to decode `MyUnionType`.</text>
  </message>
  <message>
    <ts>2017-07-26T14:09:47.886260</ts>
    <user>U60SXAF96</user>
    <text>So I'd much rather just tell it how to decode `MyUnionType` and let it generate the rest of the code for me.</text>
  </message>
  <message>
    <ts>2017-07-26T14:10:07.898308</ts>
    <user>U4872964V</user>
    <text>By defining type classes instead, how is that less code?</text>
  </message>
  <message>
    <ts>2017-07-26T14:10:20.905734</ts>
    <user>U60SXAF96</user>
    <text>I only have to define one: the implementation for `MyUnionType`.</text>
  </message>
  <message>
    <ts>2017-07-26T14:10:35.914595</ts>
    <user>U60SXAF96</user>
    <text>As opposed to defining decoders for the whole structure.</text>
  </message>
  <message>
    <ts>2017-07-26T14:11:04.931328</ts>
    <user>U4872964V</user>
    <text>To me this sounds like an extreme special case, normally types don’t look like that</text>
  </message>
  <message>
    <ts>2017-07-26T14:11:08.933556</ts>
    <user>U3ZNWN526</user>
    <text>&lt;@U60SXAF96&gt; Maybe I'm wrong, jumping into the middle here and missing something, but wouldn't the decoder just be something like dict (list (dict (list (dict (list (dict myUnionTypeDecoder))))))</text>
  </message>
  <message>
    <ts>2017-07-26T14:11:38.951134</ts>
    <user>U60SXAF96</user>
    <text>&lt;@U3ZNWN526&gt; It would be, except there's actually some records in there.</text>
  </message>
  <message>
    <ts>2017-07-26T14:12:02.964419</ts>
    <user>U4872964V</user>
    <text>ok, so how would you handle those records with type classes in haskell then?</text>
  </message>
  <message>
    <ts>2017-07-26T14:13:03.999743</ts>
    <user>U60SXAF96</user>
    <text>See `appStructuresDecoder`, and then work your way down.  The compiler can infer all that, except the `OverlayStructure`.</text>
  </message>
  <message>
    <ts>2017-07-26T14:13:26.013236</ts>
    <user>U60SXAF96</user>
    <text>I would much rather tell it how to decode an `OverlayStructure` and then just accept the `Dict String AppStructure` in my `Flag` type.</text>
  </message>
  <message>
    <ts>2017-07-26T14:14:14.040206</ts>
    <user>U60SXAF96</user>
    <text>The compiler demonstrably already knows how to decode records whose values are `Decodable`. So we get that "for free".</text>
  </message>
  <message>
    <ts>2017-07-26T14:14:14.040503</ts>
    <user>U4872964V</user>
    <text>There is no question that the types uniquely determines the decoder, my question is how type classes could do that.</text>
  </message>
  <message>
    <ts>2017-07-26T14:14:52.062269</ts>
    <user>U4872964V</user>
    <text>You still have to call the `decode` function in your type class, so it’s not so different from calling `Decode.list` etc</text>
  </message>
  <message>
    <ts>2017-07-26T14:15:29.083066</ts>
    <user>U4872964V</user>
    <text>now, the haskell compiler could have some `deriving` or you could use Template Haskell, but that’s something else</text>
  </message>
  <message>
    <ts>2017-07-26T14:17:01.136340</ts>
    <user>U60SXAF96</user>
    <text>With type classes, I could delete dozens of lines from the file that I just sent you.</text>
  </message>
  <message>
    <ts>2017-07-26T14:17:10.141496</ts>
    <user>U4872964V</user>
    <text>anyway, not going to happen in Elm :slightly_smiling_face: BUT you could have something like I have experimented with in &lt;https://github.com/norpan/elm-dynamic-types/blob/master/Dynamic/Json/Encoder.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T14:17:31.153778</ts>
    <user>U60SXAF96</user>
    <text>`pageStructureDecoder` and every decoder above it in the file could go away.</text>
  </message>
  <message>
    <ts>2017-07-26T14:18:08.174757</ts>
    <user>U60SXAF96</user>
    <text>*And* I could accept them as Flag types.</text>
  </message>
  <message>
    <ts>2017-07-26T14:18:16.179199</ts>
    <user>U4872964V</user>
    <text>how would the compiler possibly infer a record of decoders, how does that type look in Haskell?</text>
  </message>
  <message>
    <ts>2017-07-26T14:18:53.200623</ts>
    <user>U4872964V</user>
    <text>You can’t specify a generic record as a type, as far as I know</text>
  </message>
  <message>
    <ts>2017-07-26T14:19:04.207109</ts>
    <user>U4872964V</user>
    <text>records are just union types</text>
  </message>
  <message>
    <ts>2017-07-26T14:20:43.265231</ts>
    <user>U60SXAF96</user>
    <text>I can add typeclass instances onto records.</text>
  </message>
  <message>
    <ts>2017-07-26T14:21:19.286214</ts>
    <user>U4872964V</user>
    <text>yes, but you have to do it for each record, so how does the `pageStructureDecoder` actually go away? You just put it inside a typeclass instance instead.</text>
  </message>
  <message>
    <ts>2017-07-26T14:22:03.311727</ts>
    <user>U60SXAF96</user>
    <text>The Elm compiler is capable of inferring how to decode `pageStructureDecoder`, etc., right up until it hits my union type, correct?</text>
  </message>
  <message>
    <ts>2017-07-26T14:22:20.321543</ts>
    <user>U60SXAF96</user>
    <text>So if I taught it how to decode my union type, it could infer how to decode everything, correct?</text>
  </message>
  <message>
    <ts>2017-07-26T14:22:35.330819</ts>
    <user>U60SXAF96</user>
    <text>That's what a typeclass does.</text>
  </message>
  <message>
    <ts>2017-07-26T14:22:51.340090</ts>
    <user>U4872964V</user>
    <text>No, that’s not what a typeclass does. That’s what _inferring_ a type class does.</text>
  </message>
  <message>
    <ts>2017-07-26T14:23:07.349036</ts>
    <user>U60SXAF96</user>
    <text>Sure, but you can't infer a type class if I can't define one for you. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-26T14:23:15.354021</ts>
    <user>U4872964V</user>
    <text>Sorry, _deriving_ a type class</text>
  </message>
  <message>
    <ts>2017-07-26T14:23:28.362120</ts>
    <user>U4872964V</user>
    <text>But my point is that the Haskell compiler can’t do that either.</text>
  </message>
  <message>
    <ts>2017-07-26T14:23:30.363208</ts>
    <user>U60SXAF96</user>
    <text>I'm lumping the whole functionality of type class under the word "type class".</text>
  </message>
  <message>
    <ts>2017-07-26T14:24:01.380876</ts>
    <user>U4872964V</user>
    <text>Ok…but please understand that these are two different things</text>
  </message>
  <message>
    <ts>2017-07-26T14:24:17.390421</ts>
    <user>U60SXAF96</user>
    <text>My point is that, if I could tell the Elm compiler how to decode my union type, then I wouldn't need all those extra decoders.</text>
  </message>
  <message>
    <ts>2017-07-26T14:24:21.393246</ts>
    <user>U60SXAF96</user>
    <text>You get what I'm saying?</text>
  </message>
  <message>
    <ts>2017-07-26T14:24:36.402314</ts>
    <user>U4872964V</user>
    <text>Yes, please look at &lt;https://github.com/norpan/elm-dynamic-types/blob/master/Dynamic/Json/Decoder.elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T14:24:59.416188</ts>
    <user>U4872964V</user>
    <text>This is one way it could be done, no type classes needed</text>
  </message>
  <message>
    <ts>2017-07-26T14:25:18.427649</ts>
    <user>U4872964V</user>
    <text>Just a way to traverse a type declaration</text>
  </message>
  <message>
    <ts>2017-07-26T14:26:00.452468</ts>
    <user>U4872964V</user>
    <text>But it’s certainly possible to have deriving of json decoders, and people are thinking hard about how to make this possible in Elm in the best possible way</text>
  </message>
  <message>
    <ts>2017-07-26T14:26:58.486956</ts>
    <user>U60SXAF96</user>
    <text>Sure. What I'm seeing is that you've got something equivalent to Haskell's `Typeable` and/or `Generic`, depending on the particular use case.</text>
  </message>
  <message>
    <ts>2017-07-26T14:27:50.518040</ts>
    <user>U60SXAF96</user>
    <text>It'll be really nice when something like that exists in Elm.</text>
  </message>
  <message>
    <ts>2017-07-26T14:27:57.521853</ts>
    <user>U60SXAF96</user>
    <text>So I'm glad you're digging at it.</text>
  </message>
  <message>
    <ts>2017-07-26T14:31:42.660374</ts>
    <user>U1PQJ4V32</user>
    <text>I'm having a problem with import statements:
```
import Data.Moment exposing (Moment(..))

```

`&lt;http://Moment.At|Moment.At&gt; x` fails. `&lt;http://Data.Moment.At|Data.Moment.At&gt; x` is OK.</text>
  </message>
  <message>
    <ts>2017-07-26T14:32:11.676992</ts>
    <user>U23SA861Y</user>
    <text>import type Moment and all it's constructors</text>
  </message>
  <message>
    <ts>2017-07-26T14:33:03.707855</ts>
    <user>U1PQJ4V32</user>
    <text>&lt;@U23SA861Y&gt; i typed enter too early. I know what it's *supposed* to do.</text>
  </message>
  <message>
    <ts>2017-07-26T14:33:19.717105</ts>
    <user>U1AN4JRFV</user>
    <text>if you want that, you can give it an alias `import Data.Moment as Moment exposing (Moment(..))`</text>
  </message>
  <message>
    <ts>2017-07-26T14:33:33.725840</ts>
    <user>U23SA861Y</user>
    <text>did you try just `At`</text>
  </message>
  <message>
    <ts>2017-07-26T14:33:47.734093</ts>
    <user>U23SA861Y</user>
    <text>because thats what you are importing the constructors as</text>
  </message>
  <message>
    <ts>2017-07-26T14:34:12.748576</ts>
    <user>U1AN4JRFV</user>
    <text>or is it `Moment(At(..))`? lol</text>
  </message>
  <message>
    <ts>2017-07-26T14:34:23.754958</ts>
    <user>U1PQJ4V32</user>
    <text>I was hoping to keep all functions fully namespaced except for the type and it's constructors.</text>
  </message>
  <message>
    <ts>2017-07-26T14:34:57.775369</ts>
    <user>U23SA861Y</user>
    <text>you might need two seperate import statements to accomplish that</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:00.848517</ts>
    <user>U1PQJ4V32</user>
    <text>ugh. `At x` works. That's a bit unintuitive. How can I do (what I wanted) with 2 import statements?</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:24.862657</ts>
    <user>U23SA861Y</user>
    <text>well when you use exposing it pulls it in without namespacing</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:43.873543</ts>
    <user>U23SA861Y</user>
    <text>you can use at to specify namespacing</text>
  </message>
  <message>
    <ts>2017-07-26T14:38:05.886307</ts>
    <user>U23SA861Y</user>
    <text>so you wanted Moment to be unnamespaced but the constructors to be?</text>
  </message>
  <message>
    <ts>2017-07-26T14:38:16.892702</ts>
    <user>U60SXAF96</user>
    <text>(Other way around, I think.)</text>
  </message>
  <message>
    <ts>2017-07-26T14:38:27.898677</ts>
    <user>U60SXAF96</user>
    <text>He doesn't want to have to say `Moment.Moment`.</text>
  </message>
  <message>
    <ts>2017-07-26T14:39:20.929863</ts>
    <user>U1PQJ4V32</user>
    <text>all functions should be fully namespaced `Data.Moment.aFunction`. The type and it's constructors can be shorthand. `x : String -&amp;gt; Moment` `&lt;http://Moment.At|Moment.At&gt; foo`</text>
  </message>
  <message>
    <ts>2017-07-26T14:41:43.011542</ts>
    <user>U1PQJ4V32</user>
    <text>Hm. I think not possible. No worries.</text>
  </message>
  <message>
    <ts>2017-07-26T14:42:58.054816</ts>
    <user>U23SA861Y</user>
    <text>```
import Moment.Data as Moment exposing (Moment)
import Moment.Data
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:43:16.064686</ts>
    <user>U23SA861Y</user>
    <text>you'll wide up having a double alias for Moment</text>
  </message>
  <message>
    <ts>2017-07-26T14:43:36.076824</ts>
    <user>U5ZC6V535</user>
    <text>Quick question: What do you think its the best practise for importing modules? Currently, I expose only what i need but i am not sure if this is the right way.

However  says: 

_Import &lt;https://github.com/ohanhi/elm-style-guide&gt; only needed modules
 Order of preference:
    non-exposing imports
    explicitly exposing imports
    imports exposing everything
 When feasible, explicitly define what to expose from current module_

```
import Best -- ✅ GOOD
import Okay exposing (This, That)
import NotGood exposing (..)
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:47:12.202274</ts>
    <user>U1PQJ4V32</user>
    <text>&lt;@U5ZC6V535&gt; I'm writing code that uses core `Date` `Time.Date.Date` and my own utility `Local.Date`. The only thing I can do *consistently* is to fully namespace (and therefore do that everywhere). Any other style requires deciding on a case-by-case basis, and refactoring if details change :disappointed:. Seems like too much deciding for my little brain.</text>
  </message>
  <message>
    <ts>2017-07-26T14:48:10.235463</ts>
    <user>U1PQJ4V32</user>
    <text>(but readability suffers a bit)</text>
  </message>
  <message>
    <ts>2017-07-26T14:49:57.298783</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U1PQJ4V32&gt; Hmm, full namespaces lead to long lines and thus hinder readability, exposing only what you need again hinders readability. Difficult to define the golden ratio of the two cases.</text>
  </message>
  <message>
    <ts>2017-07-26T14:50:42.325761</ts>
    <user>U1PQJ4V32</user>
    <text>&lt;@U5ZC6V535&gt; right. But at least with full namespaces you can be  unreadable with consistency!</text>
  </message>
  <message>
    <ts>2017-07-26T14:50:48.329593</ts>
    <user>U1PQJ4V32</user>
    <text>:confused:</text>
  </message>
  <message>
    <ts>2017-07-26T14:51:09.341763</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U1PQJ4V32&gt; Well be consistently unreadable doesn’t seem good right? :stuck_out_tongue: :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T14:51:33.355219</ts>
    <user>U1PQJ4V32</user>
    <text>Unreadable and consistent. That's better.</text>
  </message>
  <message>
    <ts>2017-07-26T14:51:40.359373</ts>
    <user>U1PQJ4V32</user>
    <text>brb</text>
  </message>
  <message>
    <ts>2017-07-26T14:51:48.363785</ts>
    <user>U5ZC6V535</user>
    <text>Hmm, perhaps</text>
  </message>
  <message>
    <ts>2017-07-26T15:14:55.146602</ts>
    <user>U3ZNWN526</user>
    <text>I really feel like it depends on the context.</text>
  </message>
  <message>
    <ts>2017-07-26T15:15:39.169994</ts>
    <user>U3ZNWN526</user>
    <text>In my JSON Decoders, I expose (..) from my related Model</text>
  </message>
  <message>
    <ts>2017-07-26T15:15:58.180176</ts>
    <user>U3ZNWN526</user>
    <text>I've also considered exposing (..) from Json.Decode (although I haven't switched to that yet)</text>
  </message>
  <message>
    <ts>2017-07-26T15:16:38.201308</ts>
    <user>U3ZNWN526</user>
    <text>(And I know if I ever run into a case where there is a conflict, I can just expose nothing, and let the compiler or IDE tell me which things I need to expose)</text>
  </message>
  <message>
    <ts>2017-07-26T15:17:48.238283</ts>
    <user>U3ZNWN526</user>
    <text>But, for other modules I only expose what I need, or often nothing at all (as their contents aren't as directly relevant to the current context)</text>
  </message>
  <message>
    <ts>2017-07-26T15:18:54.273705</ts>
    <user>U3ZNWN526</user>
    <text>Of course if you want a style guideline, this isn't much help :wink:</text>
  </message>
  <message>
    <ts>2017-07-26T15:28:55.593403</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U3ZNWN526&gt; I suppose you mean it depends :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T15:36:47.844828</ts>
    <user>U170TNSTZ</user>
    <text>What about `Import List as L`? This style is used quite a lot in Clojure</text>
  </message>
  <message>
    <ts>2017-07-26T15:37:04.853766</ts>
    <user>U170TNSTZ</user>
    <text>For instance `(:require [foo.bar.baz :as baz])`</text>
  </message>
  <message>
    <ts>2017-07-26T15:47:52.187005</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U170TNSTZ&gt; For third pary libraries I usually do that. i.e. 

```
import Math.Vector2 as V2
```

But that again depends. When it makes sense :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T15:55:02.416109</ts>
    <user>U1CE9DL9H</user>
    <text>part of the point of qualified imports is that it is easy to know what module a function comes from, a module `L` could be anything, `List` reads nicer and makes it immediately clear that we're dealing with lists</text>
  </message>
  <message>
    <ts>2017-07-26T15:55:26.429960</ts>
    <user>U1CE9DL9H</user>
    <text>I think those extra 3 characters are worth it</text>
  </message>
  <message>
    <ts>2017-07-26T16:00:40.603223</ts>
    <user>U5W50TZ6C</user>
    <text>Hello, I think I found an issue with the compiler. In "let" blocks, variables that are dependent on each other will compile, but error when run.

Example: &lt;https://ellie-app.com/3Rgzt2Hh39Xa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T16:00:46.607035</ts>
    <user>U5W50TZ6C</user>
    <text>What do you ~guys~ folks think?</text>
  </message>
  <message>
    <ts>2017-07-26T16:03:57.713363</ts>
    <user>U1AP08WV6</user>
    <text>&lt;@U5W50TZ6C&gt; `file` and `template` depend on each other. AFAIK there're some bugs similar to this reported to elm compiler already</text>
  </message>
  <message>
    <ts>2017-07-26T16:04:31.731533</ts>
    <user>U5W50TZ6C</user>
    <text>Ok, I wasn't sure if this had been reported yet. I'll check the Github just to make sure</text>
  </message>
  <message>
    <ts>2017-07-26T16:09:33.893008</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U5W50TZ6C&gt; Check out &lt;https://github.com/elm-lang/elm-compiler/blob/master/hints/bad-recursion.md&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T16:10:50.934245</ts>
    <user>U4872964V</user>
    <text>&lt;@U5W50TZ6C&gt;, yes this happens when two functions without arguments depend on each other</text>
  </message>
  <message>
    <ts>2017-07-26T16:11:18.948530</ts>
    <user>U5W50TZ6C</user>
    <text>I see, this is simply bad recursion. There's a few open issues on the compiler repo about detecting cases like the one I ran into, but it doesn't look like there's a solution yet</text>
  </message>
  <message>
    <ts>2017-07-26T16:11:57.969199</ts>
    <user>U4F64AKQV</user>
    <text>They’re kind of hard to detect without catching false-positives (which would be really bad).</text>
  </message>
  <message>
    <ts>2017-07-26T19:11:35.478818</ts>
    <user>U37HUSJ4R</user>
    <text>hi :slightly_smiling_face: can anyone elm me with &lt;https://ellie-app.com/3RkvTgdMGNYa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T19:11:52.483499</ts>
    <user>U37HUSJ4R</user>
    <text>how would I update the `paused` field on line 40</text>
  </message>
  <message>
    <ts>2017-07-26T19:14:21.524845</ts>
    <user>U17R26VR8</user>
    <text>what do you want to update it to? it's just like how you did it on line 33</text>
  </message>
  <message>
    <ts>2017-07-26T19:15:26.542932</ts>
    <user>U37HUSJ4R</user>
    <text>is it? it’s a nested field though?</text>
  </message>
  <message>
    <ts>2017-07-26T19:15:31.544275</ts>
    <user>U37HUSJ4R</user>
    <text>and the value of `toggle`</text>
  </message>
  <message>
    <ts>2017-07-26T19:16:46.564982</ts>
    <user>U17R26VR8</user>
    <text>right, so you want to set status to `OnCall { number = 0, controls = {paused = toggle} }`</text>
  </message>
  <message>
    <ts>2017-07-26T19:16:59.568612</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U17R26VR8&gt; good answer.</text>
  </message>
  <message>
    <ts>2017-07-26T19:17:09.571344</ts>
    <user>U37HUSJ4R</user>
    <text>no, as I don’t want to update number</text>
  </message>
  <message>
    <ts>2017-07-26T19:17:14.572568</ts>
    <user>U37HUSJ4R</user>
    <text>only the paused field</text>
  </message>
  <message>
    <ts>2017-07-26T19:18:16.589993</ts>
    <user>U17R26VR8</user>
    <text>ok, however nwo you have another concern, if your model.status was Available or Wrap then you'd want to do the above</text>
  </message>
  <message>
    <ts>2017-07-26T19:18:23.592139</ts>
    <user>U17R26VR8</user>
    <text>otherwise, you want to just update the paused field</text>
  </message>
  <message>
    <ts>2017-07-26T19:18:25.592672</ts>
    <user>U17R26VR8</user>
    <text>```
case model.status of
  Available -&amp;gt; ( brandNewModel, Cmd.none )
  Wrap -&amp;gt; ( brandNewModel, Cmd.none )
  OnCall call -&amp;gt; do_stuff_here
```</text>
  </message>
  <message>
    <ts>2017-07-26T19:19:23.608644</ts>
    <user>U37HUSJ4R</user>
    <text>true, whats the correct elm way to solve this then?</text>
  </message>
  <message>
    <ts>2017-07-26T19:19:27.610055</ts>
    <user>U37HUSJ4R</user>
    <text>surely this is common place?</text>
  </message>
  <message>
    <ts>2017-07-26T19:21:03.636107</ts>
    <user>U17R26VR8</user>
    <text>updated my code :point_up: , typically in elm, i try not to reach too far into a model to update things but you can by destructuring and then returning a new version with the updated fields</text>
  </message>
  <message>
    <ts>2017-07-26T19:21:52.649459</ts>
    <user>U37HUSJ4R</user>
    <text>interesting, thanks</text>
  </message>
  <message>
    <ts>2017-07-26T19:22:16.655489</ts>
    <user>U37HUSJ4R</user>
    <text>how would you model this data then to keep it simple?</text>
  </message>
  <message>
    <ts>2017-07-26T19:22:30.659782</ts>
    <user>U6EAT2Z37</user>
    <text>I don't think it's that complicated is it?</text>
  </message>
  <message>
    <ts>2017-07-26T19:22:52.665491</ts>
    <user>U37HUSJ4R</user>
    <text>well from a logic pov it’s confusing</text>
  </message>
  <message>
    <ts>2017-07-26T19:23:02.668286</ts>
    <user>U37HUSJ4R</user>
    <text>as if you are toggle pause lets say</text>
  </message>
  <message>
    <ts>2017-07-26T19:23:12.670874</ts>
    <user>U6EAT2Z37</user>
    <text>how he has it is almost right</text>
  </message>
  <message>
    <ts>2017-07-26T19:23:14.671329</ts>
    <user>U37HUSJ4R</user>
    <text>you wouldn’t be Available you’d always be on a call</text>
  </message>
  <message>
    <ts>2017-07-26T19:23:45.679849</ts>
    <user>U37HUSJ4R</user>
    <text>so feels strange to have the case statement</text>
  </message>
  <message>
    <ts>2017-07-26T19:24:44.696312</ts>
    <user>U6EAT2Z37</user>
    <text>it's not a statement</text>
  </message>
  <message>
    <ts>2017-07-26T19:24:47.697026</ts>
    <user>U6EAT2Z37</user>
    <text>(this is important)</text>
  </message>
  <message>
    <ts>2017-07-26T19:24:47.697114</ts>
    <user>U37HUSJ4R</user>
    <text>so maybe I am modelling this wrong</text>
  </message>
  <message>
    <ts>2017-07-26T19:24:49.697738</ts>
    <user>U6EAT2Z37</user>
    <text>it's an expression.</text>
  </message>
  <message>
    <ts>2017-07-26T19:25:18.705793</ts>
    <user>U6EAT2Z37</user>
    <text>I'm not trying to correct you, I'm trying to explain it's important to think about it differently</text>
  </message>
  <message>
    <ts>2017-07-26T19:25:22.706930</ts>
    <user>U17R26VR8</user>
    <text>do you have any other controls? or just paused as in the operator has put you on hold is that what it means?</text>
  </message>
  <message>
    <ts>2017-07-26T19:25:49.714277</ts>
    <user>U37HUSJ4R</user>
    <text>There are many</text>
  </message>
  <message>
    <ts>2017-07-26T19:25:57.716429</ts>
    <user>U37HUSJ4R</user>
    <text>paused is paused recording really</text>
  </message>
  <message>
    <ts>2017-07-26T19:26:00.717134</ts>
    <user>U37HUSJ4R</user>
    <text>there will be hold</text>
  </message>
  <message>
    <ts>2017-07-26T19:26:06.718740</ts>
    <user>U37HUSJ4R</user>
    <text>possible more</text>
  </message>
  <message>
    <ts>2017-07-26T19:26:20.722895</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U6EAT2Z37&gt; I understand :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T19:27:15.737456</ts>
    <user>U6EAT2Z37</user>
    <text>Okay, well it's a case because you need to take every possible value into account.</text>
  </message>
  <message>
    <ts>2017-07-26T19:27:32.741827</ts>
    <user>U37HUSJ4R</user>
    <text>yeh I get that</text>
  </message>
  <message>
    <ts>2017-07-26T19:27:37.743232</ts>
    <user>U37HUSJ4R</user>
    <text>but its not correct for my domain</text>
  </message>
  <message>
    <ts>2017-07-26T19:27:44.745101</ts>
    <user>U37HUSJ4R</user>
    <text>so I must be modelling it wrong</text>
  </message>
  <message>
    <ts>2017-07-26T19:27:44.745154</ts>
    <user>U6EAT2Z37</user>
    <text>I don't see why not</text>
  </message>
  <message>
    <ts>2017-07-26T19:28:04.750289</ts>
    <user>U37HUSJ4R</user>
    <text>because you can’t TogglePaused if someone is not on a call</text>
  </message>
  <message>
    <ts>2017-07-26T19:28:09.751339</ts>
    <user>U17R26VR8</user>
    <text>so i'd make CallState a union type `type CallState = Call | Paused | Hold` etc</text>
  </message>
  <message>
    <ts>2017-07-26T19:28:10.751787</ts>
    <user>U37HUSJ4R</user>
    <text>doesn’t make sense</text>
  </message>
  <message>
    <ts>2017-07-26T19:29:20.770331</ts>
    <user>U6EAT2Z37</user>
    <text>oh I see... CallState contains a Bool. Yeah that's not probably what you want.</text>
  </message>
  <message>
    <ts>2017-07-26T19:29:59.780833</ts>
    <user>U17R26VR8</user>
    <text>then i'd change your TogglePaused to be `TogglePaused Bool Call` so you have the call to change so you don't need to worry about if you're not on a call, because you can only toggle a state if you are in a call</text>
  </message>
  <message>
    <ts>2017-07-26T19:30:39.792379</ts>
    <user>U17R26VR8</user>
    <text>is CallState going to be:
```
paused: Bool,
hold: Bool,
otherFlag: Bool
```</text>
  </message>
  <message>
    <ts>2017-07-26T19:30:47.794798</ts>
    <user>U17R26VR8</user>
    <text>where only one of them can ever be true at a time?</text>
  </message>
  <message>
    <ts>2017-07-26T19:30:57.797446</ts>
    <user>U37HUSJ4R</user>
    <text>to make it more complex no :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-26T19:31:08.800361</ts>
    <user>U37HUSJ4R</user>
    <text>multiple can be true</text>
  </message>
  <message>
    <ts>2017-07-26T19:31:13.801498</ts>
    <user>U17R26VR8</user>
    <text>ah ok, fair enough</text>
  </message>
  <message>
    <ts>2017-07-26T19:32:28.821465</ts>
    <user>U37HUSJ4R</user>
    <text>for the union type did you mean to have `Call` in there?</text>
  </message>
  <message>
    <ts>2017-07-26T19:32:49.826671</ts>
    <user>U17R26VR8</user>
    <text>i think what you have makes sense then, it's just that because you've got 3 levels of nested records, it's going to be a pain to reach into it without helper functions</text>
  </message>
  <message>
    <ts>2017-07-26T19:33:09.832197</ts>
    <user>U17R26VR8</user>
    <text>the `Call` in the union type is a tag, it doesn't have anyhting to do with the record Call</text>
  </message>
  <message>
    <ts>2017-07-26T19:33:45.841496</ts>
    <user>U17R26VR8</user>
    <text>i thought it was a CallState can be in any of one state so the default state is you're talking to someone so i called it `Call`</text>
  </message>
  <message>
    <ts>2017-07-26T19:36:34.884923</ts>
    <user>U17R26VR8</user>
    <text>anyway, to get back to your original question, you can write a function like:
```
updatePaused: Bool -&amp;gt; Call -&amp;gt; Call
updatePaused newValue ({controls} as call) =
  { call | controls = { paused = newValue } }
```</text>
  </message>
  <message>
    <ts>2017-07-26T19:37:33.899953</ts>
    <user>U17R26VR8</user>
    <text>( swapped args around to allow piping )</text>
  </message>
  <message>
    <ts>2017-07-26T19:38:09.909152</ts>
    <user>U37HUSJ4R</user>
    <text>really nice :smile:</text>
  </message>
  <message>
    <ts>2017-07-26T19:38:27.913770</ts>
    <user>U37HUSJ4R</user>
    <text>I guess I am going to need helper functions to update, this is ok though</text>
  </message>
  <message>
    <ts>2017-07-26T19:38:33.915278</ts>
    <user>U6EAT2Z37</user>
    <text>Why pull controls out if you're not going to use them?</text>
  </message>
  <message>
    <ts>2017-07-26T19:38:55.921086</ts>
    <user>U6EAT2Z37</user>
    <text>oh... you missed out `{ controls | ...`</text>
  </message>
  <message>
    <ts>2017-07-26T19:39:29.929426</ts>
    <user>U6EAT2Z37</user>
    <text>```
updatePaused: Bool -&amp;gt; Call -&amp;gt; Call
updatePaused newValue ({controls} as call) =
  { call | controls = { controls | paused = newValue } }
```</text>
  </message>
  <message>
    <ts>2017-07-26T19:39:35.930875</ts>
    <user>U6EAT2Z37</user>
    <text>What a mouthful!</text>
  </message>
  <message>
    <ts>2017-07-26T19:43:38.992167</ts>
    <user>U37HUSJ4R</user>
    <text>I much prefer the union type way</text>
  </message>
  <message>
    <ts>2017-07-26T20:04:54.314336</ts>
    <user>U6EAT2Z37</user>
    <text>Just FYI, the "meaning" of a record is the same "meaning" as a union type, it's just the fields are named.</text>
  </message>
  <message>
    <ts>2017-07-26T20:49:24.903578</ts>
    <user>U1ZCL9GAX</user>
    <text>new dreambuggy demo, 100% elm (+ glsl shaders): &lt;https://www.youtube.com/watch?v=RDFuTzPQ3Sc&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T20:50:46.921008</ts>
    <user>U23SA861Y</user>
    <text>schweet</text>
  </message>
  <message>
    <ts>2017-07-26T22:30:17.101816</ts>
    <user>U1ZFF0E5P</user>
    <text>any pointers on how to implement this? I can't get it to work ```everyDictDecoder : Decoder k -&amp;gt; Decoder v -&amp;gt; Decoder (EveryDict k v)
everyDictDecoder keyDecoder valueDecoder =
```</text>
  </message>
  <message>
    <ts>2017-07-26T22:39:59.208749</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U1ZFF0E5P&gt; &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Decode#map2&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T22:45:10.263827</ts>
    <user>U23SA861Y</user>
    <text>so that will give you a dict with 1 value, but what you perhaps want is to create a decoder of `Decoder List (k,v)` in which case you can map over it with `EveryDict.fromList`</text>
  </message>
  <message>
    <ts>2017-07-26T23:06:29.489798</ts>
    <user>U6E03KDPE</user>
    <text>Just curious, has anyone used elm as a stepping stone to learning Haskell? And if so, how big of a transition was it?</text>
  </message>
  <message>
    <ts>2017-07-26T23:12:09.544718</ts>
    <user>U6EAT2Z37</user>
    <text>I know both, if that helps.</text>
  </message>
  <message>
    <ts>2017-07-26T23:13:55.561482</ts>
    <user>U6EAT2Z37</user>
    <text>I think Elm hides most of the complexities of pure functional programming, so the biggest stumbling blocks will probably be the same ones as all beginner Haskell people have. Things like needing to know how effects work "under the hood" if you like, but you've definitely got a leg up because you'd know the syntax and if you understand types quite well you know the basics, so that's good :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T23:15:28.576536</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U6E03KDPE&gt; here's a book that might be helpful on the way... I helped write it: &lt;http://happylearnhaskelltutorial.com|happylearnhaskelltutorial.com&gt; though it's really aimed at people who are total programming beginners</text>
  </message>
  <message>
    <ts>2017-07-26T23:19:14.613956</ts>
    <user>U6E03KDPE</user>
    <text>I'll give that book a look! I ask because so far this past summer I've been working through the haskell book. It's been kind of hard to get going though, because it seems like the barrier to being able to write programs that aren't just example problems is a little high, and it been kind of demoralizing. I came across elm, however, and it looked like it would be a good way to learn some of the stuff of haskell, while being able to quickly get some applications off the ground</text>
  </message>
  <message>
    <ts>2017-07-26T23:20:48.629114</ts>
    <user>U6EAT2Z37</user>
    <text>Yeah, the book is organised that way a bit. Most haskell books are. That's one of the troubles with Haskell, I guess. You have to pay a large cost upfront. Contrast that with Elm or purescript, and well you can get going straight away almost. Possibly that's because they're focussed on web dev, but in the case of Elm it's probably mostly because that's its focus.</text>
  </message>
  <message>
    <ts>2017-07-26T23:22:53.648689</ts>
    <user>U6EAT2Z37</user>
    <text>My book's designed to get you understanding code as quickly as possible. That has the obvious downside that you won't understand it in entirety... which is why I try to get people to not try to write any code on their own until the very end, and only then is it quite basic stuff, because I don't want people to burn themselves, or get frustrated. So, it ends up being quite "guided" in that sense.</text>
  </message>
  <message>
    <ts>2017-07-26T23:23:11.651674</ts>
    <user>U153UK3FA</user>
    <text>I found getting the basics of the Haskell language was pretty straight forward but dealing with the ecosystem of libraries was a big pain. Elm and even haskell tutorials won’t prepare you for every library having their own set of custom operators</text>
  </message>
  <message>
    <ts>2017-07-26T23:23:46.657063</ts>
    <user>U6EAT2Z37</user>
    <text>Sure, but operators are "just functions", right? :slightly_smiling_face: (functions that "take" two arguments, albeit in a weird way)</text>
  </message>
  <message>
    <ts>2017-07-26T23:25:12.670904</ts>
    <user>U153UK3FA</user>
    <text>yep, nameless functions with custom precedence</text>
  </message>
  <message>
    <ts>2017-07-26T23:25:56.678122</ts>
    <user>U6EAT2Z37</user>
    <text>Elm has some, too.... like `(==)` for example. (or `(&amp;gt;&amp;gt;)` `(&amp;lt;&amp;lt;)` `(&amp;lt;|)` etc)</text>
  </message>
  <message>
    <ts>2017-07-26T23:26:19.681795</ts>
    <user>U6E03KDPE</user>
    <text>Yeah, just learning the std library has been a bit of an exercise in patience lol</text>
  </message>
  <message>
    <ts>2017-07-26T23:26:44.685683</ts>
    <user>U153UK3FA</user>
    <text>Elm core does, but most libraries don’t</text>
  </message>
  <message>
    <ts>2017-07-26T23:27:16.690515</ts>
    <user>U6EAT2Z37</user>
    <text>For me, as soon as I realised operators are "just functions", they weren't a problem anymore.</text>
  </message>
  <message>
    <ts>2017-07-26T23:27:22.691568</ts>
    <user>U153UK3FA</user>
    <text>It’s rare to find operators in Elm libraries</text>
  </message>
  <message>
    <ts>2017-07-26T23:30:21.720255</ts>
    <user>U6EAT2Z37</user>
    <text>There are hardly any operators in the GHC prelude.</text>
  </message>
  <message>
    <ts>2017-07-26T23:30:40.723504</ts>
    <user>U6EAT2Z37</user>
    <text>About 14 I think?</text>
  </message>
  <message>
    <ts>2017-07-26T23:33:15.748831</ts>
    <user>U6EAT2Z37</user>
    <text>Granted they *are* named pretty weirdly, some of them :slightly_smiling_face: (Like `($)` which is `(&amp;lt;|)` in elm, or `(&amp;lt;$&amp;gt;)` which is a general version of `map` in elm, etc)</text>
  </message>
  <message>
    <ts>2017-07-26T23:35:56.774871</ts>
    <user>U153UK3FA</user>
    <text>As someone that struggles to recall the predecence of the arithmetic operators, having new operators in every library is insurmountable</text>
  </message>
  <message>
    <ts>2017-07-26T23:37:07.785883</ts>
    <user>U6EAT2Z37</user>
    <text>interesting</text>
  </message>
  <message>
    <ts>2017-07-26T23:37:28.789105</ts>
    <user>U6EAT2Z37</user>
    <text>I've never had a trouble with that, and I always have to look up operator precedence in JS all the time.</text>
  </message>
  <message>
    <ts>2017-07-26T23:38:19.796931</ts>
    <user>U6EAT2Z37</user>
    <text>I guess it might be my development style - I make very tiny little changes, and recompile at every step.</text>
  </message>
  <message>
    <ts>2017-07-26T23:39:34.808472</ts>
    <user>U153UK3FA</user>
    <text>I just wrap operator application in parentheses</text>
  </message>
  <message>
    <ts>2017-07-26T23:41:32.826717</ts>
    <user>U6EAT2Z37</user>
    <text>cool :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T23:47:16.880936</ts>
    <user>U14Q8S4EM</user>
    <text>Also theres the infix package in Haskell</text>
  </message>
  <message>
    <ts>2017-07-26T23:47:24.882263</ts>
    <user>U14Q8S4EM</user>
    <text>Which reveals `&amp;lt;&amp;lt;`, `&amp;lt;|` and the like</text>
  </message>
  <message>
    <ts>2017-07-26T23:53:36.943872</ts>
    <user>U6EAT2Z37</user>
    <text>reveals? We already have `&amp;lt;&amp;lt;` and `&amp;lt;|` but they're named different things.</text>
  </message>
  <message>
    <ts>2017-07-27T00:04:23.052117</ts>
    <user>U23SA861Y</user>
    <text>&amp;lt;$&amp;gt; and map literally have the same number of key strokes</text>
  </message>
  <message>
    <ts>2017-07-27T00:04:43.055452</ts>
    <user>U17R26VR8</user>
    <text>i've got a string "abc:123" and a type `type ID = ID String Int` and i'd like to decode the former into the latter</text>
  </message>
  <message>
    <ts>2017-07-27T00:05:32.063638</ts>
    <user>U17R26VR8</user>
    <text>using the pipeline, 
```
JDP.optional "id" idDecoder (ID "" 0)
```</text>
  </message>
  <message>
    <ts>2017-07-27T00:05:37.064426</ts>
    <user>U17R26VR8</user>
    <text>what should idDecoder be</text>
  </message>
  <message>
    <ts>2017-07-27T00:07:23.080915</ts>
    <user>U17R26VR8</user>
    <text>i'm thinking:
```
JDP.optional "id" (JD.string &amp;gt;&amp;gt; idDecoder) (ID "" 0)

idDecoder: String -&amp;gt; JD.Decode ID
```</text>
  </message>
  <message>
    <ts>2017-07-27T00:08:07.087516</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U17R26VR8&gt; it’s a &lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Decode#string&gt; mapped to become a `Decoder ID`</text>
  </message>
  <message>
    <ts>2017-07-27T00:08:31.091331</ts>
    <user>U153UK3FA</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Decode#map&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T00:08:39.092406</ts>
    <user>U17R26VR8</user>
    <text>ah... map, yes ok :+2:</text>
  </message>
  <message>
    <ts>2017-07-27T00:08:48.093706</ts>
    <user>U17R26VR8</user>
    <text>:two_thumbs_up:</text>
  </message>
  <message>
    <ts>2017-07-27T00:08:55.094804</ts>
    <user>U17R26VR8</user>
    <text>:emote_fail:</text>
  </message>
  <message>
    <ts>2017-07-27T00:08:58.095232</ts>
    <user>U17R26VR8</user>
    <text>but thank you</text>
  </message>
  <message>
    <ts>2017-07-27T00:20:12.206729</ts>
    <user>U6EAT2Z37</user>
    <text>@fonf `&amp;lt;$&amp;gt;` is `fmap`. One is an infix operator, the other a prefix function, but they're literally the same function. They're good for different things, and they're both more general than `map` from `List`</text>
  </message>
  <message>
    <ts>2017-07-27T00:32:42.325832</ts>
    <user>U153UK3FA</user>
    <text>my most ‘fun’ haskell operator adventure was finding an operator in a code example, I couldn’t find it in any of the imported libraries, looked it up on hoogle but none of those were it, I think I eventually found out it was in a language extension.</text>
  </message>
  <message>
    <ts>2017-07-27T00:42:46.417175</ts>
    <user>U14Q8S4EM</user>
    <text>&lt;@U6EAT2Z37&gt;, I mean theres a package that has the `&amp;lt;&amp;lt;` and `&amp;lt;|` operators</text>
  </message>
  <message>
    <ts>2017-07-27T00:42:53.418224</ts>
    <user>U14Q8S4EM</user>
    <text>It exposes them.</text>
  </message>
  <message>
    <ts>2017-07-27T00:43:20.422270</ts>
    <user>U14Q8S4EM</user>
    <text>And `&amp;gt;&amp;gt;` and `|&amp;gt;` etc</text>
  </message>
  <message>
    <ts>2017-07-27T00:43:54.427431</ts>
    <user>U14Q8S4EM</user>
    <text>I dont have a lot of Haskell experience. Their functionality it at least that of `$` and `.`, but maybe something else too, not sure.</text>
  </message>
  <message>
    <ts>2017-07-27T00:44:06.429367</ts>
    <user>U14Q8S4EM</user>
    <text>Either way, the way I think of it, is that Elm is a subset of Haskell.</text>
  </message>
  <message>
    <ts>2017-07-27T00:52:01.502767</ts>
    <user>U0CL0AS3V</user>
    <text>eh, Elm is its own thing. Nonstrict evaluation is at the heart of Haskell, and Elm is strict. Among ML families they're close in that they share syntax and the concept of managed side effects, but otherwise Elm is probably closer to Standard ML than Haskell. :smile: </text>
  </message>
  <message>
    <ts>2017-07-27T01:30:20.863819</ts>
    <user>U14Q8S4EM</user>
    <text>Ah, okay. Yeah Ive never used Standard ML</text>
  </message>
  <message>
    <ts>2017-07-27T02:03:14.197829</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U0CL0AS3V&gt; you think Elm is very different to Haskell? That's pretty interesting.</text>
  </message>
  <message>
    <ts>2017-07-27T02:04:55.216528</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U153UK3FA&gt; interestingly, there are two hoogles :slightly_smiling_face: sometimes I wish Elm had a hoogle, like how purescript does</text>
  </message>
  <message>
    <ts>2017-07-27T02:06:56.238658</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U6EAT2Z37&gt; Elm has &lt;http://klaftertief.github.io/elm-search/&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T02:17:38.363314</ts>
    <user>U6EAT2Z37</user>
    <text>Yeah, I think I saw that a while back. It's not very easy to find tho</text>
  </message>
  <message>
    <ts>2017-07-27T02:18:12.369975</ts>
    <user>U6EAT2Z37</user>
    <text>I guess I can just google for "elm search" so that works :slightly_smiling_face: :+1:</text>
  </message>
  <message>
    <ts>2017-07-27T02:40:40.649863</ts>
    <user>U0CK8CJ5D</user>
    <text>&lt;@U6EAT2Z37&gt; The “Fancy Search” link in the resources section on &lt;http://package.elm-lang.org&gt; links to it.</text>
  </message>
  <message>
    <ts>2017-07-27T02:43:56.692516</ts>
    <user>U6EAT2Z37</user>
    <text>TIL :slightly_smiling_face: Wouldn't have known that! :slightly_smiling_face: thanks</text>
  </message>
  <message>
    <ts>2017-07-27T03:04:55.994270</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U6EAT2Z37&gt; Different evaluation semantics and a different focus for the language means you end up with fairly different languages. They might look similar and there is a lot of conceptual overlap - they are, after, all, statically typed purely functional languages with similar syntax. Defining their relationship directly in terms of one another, though, is probably not very helpful. When it comes to language and library design, Elm is not (strictly) guided by Haskell, so defining one as a subset of the other is misguided at best.</text>
  </message>
  <message>
    <ts>2017-07-27T03:05:40.006316</ts>
    <user>U3SJEDR96</user>
    <text>People have tried to use Elm as "haskell for the web", and I don't think that has ever been a particularly nice experience</text>
  </message>
  <message>
    <ts>2017-07-27T03:07:08.028852</ts>
    <user>U3SJEDR96</user>
    <text>(aside: very nice to see you in here, I'm really enjoying your book!)</text>
  </message>
  <message>
    <ts>2017-07-27T03:09:14.060657</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U3SJEDR96&gt; Yeah, sure, they're different. Obviously. But they're **extremely** similar in many core ways. As you mention, algebraic data types, pure functions, lambda calculus base. I think there are more similarities than not. No one's trying to define Elm in terms of Haskell or vice versa. :slightly_smiling_face: It's just nice to compare them, when they're similar. Trying to compare JS and Elm would be... misguided... and understanding Haskell's managed effects gives a really nice insight into Elm's... (because Elm purposefully hides this away, mostly). I find it very fascinating, in general. Learning Haskell would *definitely* improve one's Elm, for example.</text>
  </message>
  <message>
    <ts>2017-07-27T03:09:36.066213</ts>
    <user>U6EAT2Z37</user>
    <text>Yeah, I agree - purescript is more "Haskell for the web" :slightly_smiling_face: tho it's interestingly inbetween, too :slightly_smiling_face: (it's eager for a start... and uses `Eff` rather than a stack of effects, which is also interesting - tho Haskell has that, too, but it's not as popular)</text>
  </message>
  <message>
    <ts>2017-07-27T03:10:38.083135</ts>
    <user>U6EAT2Z37</user>
    <text>Thanks for the book-compliment. I'd like to write one for Elm sometime</text>
  </message>
  <message>
    <ts>2017-07-27T03:11:03.089572</ts>
    <user>U3SJEDR96</user>
    <text>Very true! And of course, recognizing parallels and conceptual overlap deepens understanding. But recognizing the differences is harder than recognizing the similarities, especially for one who is new to either language; and therein lies a danger, too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T03:11:08.090751</ts>
    <user>U6EAT2Z37</user>
    <text>I realise there's a decided push towards "a language is a culture" in the Elm community. I'm not entirely sure I agree with that, but that's fine too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T03:12:19.108941</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U3SJEDR96&gt; oh my gosh yes... I mean, that's one of the biggest reasons people coming from imperative langs find pure FP lambda calculus langs so difficult - they assume it's "execute every line from the top to the bottom" semantics... when it's not, it's "evaluate from this point out" semantics :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T03:15:27.159067</ts>
    <user>U3SJEDR96</user>
    <text>I think what _irks_ me about relating Elm and Haskell in public discussion is perhaps simply that learning a new language works best when _not_ trying to understand one in terms of another. The issue being that defining one in terms of another probably leads to trying to understand one in terms of the other.</text>
  </message>
  <message>
    <ts>2017-07-27T03:15:41.162737</ts>
    <user>U3SJEDR96</user>
    <text>Does that make sense?</text>
  </message>
  <message>
    <ts>2017-07-27T03:15:50.165170</ts>
    <user>U6EAT2Z37</user>
    <text>Yeah it makes sense. I don't think I agree, though.</text>
  </message>
  <message>
    <ts>2017-07-27T03:16:03.168516</ts>
    <user>U6EAT2Z37</user>
    <text>I think it's important to use what you have to learn faster than you could without it.</text>
  </message>
  <message>
    <ts>2017-07-27T03:16:17.172507</ts>
    <user>U6EAT2Z37</user>
    <text>**use** imperative to understand functional, just don't use functional imperatively! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T03:16:37.177604</ts>
    <user>U6EAT2Z37</user>
    <text>*use* your understanding of OOP to see what pure FP is like... but don't try to do OOP in pure FP... :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T03:17:04.184974</ts>
    <user>U3SJEDR96</user>
    <text>It's a short term benefit; but it also means you have to unlearn some misguided inferred knowledge after a while.</text>
  </message>
  <message>
    <ts>2017-07-27T03:17:09.186350</ts>
    <user>U6EAT2Z37</user>
    <text>the beauty of doing that is you start to understand more about the OOP you thought you understood and then realise "hey I didn't understand it as well as I thought" and you get a better grip of both :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T03:17:22.189788</ts>
    <user>U6EAT2Z37</user>
    <text>I'm after non-confusion :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T03:18:35.209873</ts>
    <user>U6EAT2Z37</user>
    <text>But yeah, comparison is not so useful... perhaps. Tho, lately I've been learning vim... and I don't have great answers to the semantic questions I had answers to in my existing editor... so that sucks a bit - that kind of comparison is *very* useful, I think.</text>
  </message>
  <message>
    <ts>2017-07-27T03:20:15.237349</ts>
    <user>U3SJEDR96</user>
    <text>I think that this type of drawing parallels and recognizing the massive conceptuals overlaps, is easier after you've grokked at least the basics of a language. Or at least, that has been my experience spending a ton of time in &lt;#C192T0Q1E|beginners&gt;. And I suppose learning is not a universal process :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T03:26:15.341891</ts>
    <user>U6EAT2Z37</user>
    <text>Definitely.</text>
  </message>
  <message>
    <ts>2017-07-27T05:04:40.470974</ts>
    <user>U5S1LBR7Y</user>
    <text>Is there a preferred way to do set styles in elm?
Do we use classes and css files?</text>
  </message>
  <message>
    <ts>2017-07-27T05:05:21.486345</ts>
    <user>U5S1LBR7Y</user>
    <text>I want my styles to be scoped, is there a way to do it?</text>
  </message>
  <message>
    <ts>2017-07-27T05:06:20.508203</ts>
    <user>U1AP08WV6</user>
    <text>&lt;@U6EAT2Z37&gt; Forgive me my ignorance, but which book is it?</text>
  </message>
  <message>
    <ts>2017-07-27T05:06:46.518061</ts>
    <user>U3SJEDR96</user>
    <text>there are.. a few options.
- plain old inline styles
- using `elm-css` (which has `namescapes` so you can do scoping, too ;)
- using plain old classes and external css
- using style-elements (which is basically a different paradigm)
- using an existing framework in elm, like `elm-bootstrap` or `elm-tachyons`</text>
  </message>
  <message>
    <ts>2017-07-27T05:07:49.541255</ts>
    <user>U5S1LBR7Y</user>
    <text>Thanks. I will take a look</text>
  </message>
  <message>
    <ts>2017-07-27T05:08:09.548680</ts>
    <user>U5S1LBR7Y</user>
    <text>elm-css looks good. Scoping is my main issue</text>
  </message>
  <message>
    <ts>2017-07-27T05:12:14.638030</ts>
    <user>U5S1LBR7Y</user>
    <text>By style-elements do you mean similar to styled-components in react?</text>
  </message>
  <message>
    <ts>2017-07-27T05:12:46.649293</ts>
    <user>U3SJEDR96</user>
    <text>No, not really</text>
  </message>
  <message>
    <ts>2017-07-27T05:14:15.681331</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://www.youtube.com/watch?v=NYb2GDWMIm0&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T05:15:05.699590</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U1AP08WV6&gt; &lt;http://happylearnhaskelltutorial.com|happylearnhaskelltutorial.com&gt; - no need to apologise :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T05:15:43.714070</ts>
    <user>U0GR72XH8</user>
    <text>&lt;@U0EUHKVGB&gt; hi! We were thinking in Gizra about creating an elm-all-set implementation (`type EverySet t = EveryDict t ())`) -- Just making sure it wasn't already done</text>
  </message>
  <message>
    <ts>2017-07-27T05:16:26.729899</ts>
    <user>U6EAT2Z37</user>
    <text>There's an AllDict</text>
  </message>
  <message>
    <ts>2017-07-27T05:16:42.735566</ts>
    <user>U6EAT2Z37</user>
    <text>But that's not what you mean is it? &lt;http://package.elm-lang.org/packages/eeue56/elm-all-dict/2.0.1&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T05:17:35.755112</ts>
    <user>U6EAT2Z37</user>
    <text>Sets are not Dicts, so I'm guessing not.</text>
  </message>
  <message>
    <ts>2017-07-27T05:17:48.759761</ts>
    <user>U0GR72XH8</user>
    <text>&lt;@U6EAT2Z37&gt; yeah I know -- I mean build and `EverySet` on top of it (`EveryDict` to `Dict` is what `EverySet` is to `Set`)</text>
  </message>
  <message>
    <ts>2017-07-27T05:17:58.763491</ts>
    <user>U3SJEDR96</user>
    <text>`type Set a = Set (Dict a ())` tho :slightly_smiling_face: (well, in Elm)</text>
  </message>
  <message>
    <ts>2017-07-27T05:18:07.766995</ts>
    <user>U0GR72XH8</user>
    <text>and yeah, Set in Elm is a Dict where key and value are the same</text>
  </message>
  <message>
    <ts>2017-07-27T05:18:18.770787</ts>
    <user>U6EAT2Z37</user>
    <text>Isn't that really... inefficient / not so elegant?</text>
  </message>
  <message>
    <ts>2017-07-27T05:18:53.783511</ts>
    <user>U0GR72XH8</user>
    <text>&lt;@U6EAT2Z37&gt; great presentation about it by Robin -- &lt;https://www.youtube.com/watch?v=mmiNobpx7eI&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T05:19:34.798546</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U6EAT2Z37&gt; it's not optimal; but neither is maintaining two rb-tree impementations ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-27T05:19:51.804465</ts>
    <user>U0EUHKVGB</user>
    <text>There was an old package for 0.15 which did that. However, the author stopped being active in Elm</text>
  </message>
  <message>
    <ts>2017-07-27T05:21:32.841004</ts>
    <user>U1AP08WV6</user>
    <text>Thank you :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T05:27:06.963661</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0GR72XH8&gt; "where the value is `()`" rather, but let's chalk it up to a typo :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T05:27:45.977976</ts>
    <user>U6EAT2Z37</user>
    <text>Didn't realise we'd switched to tries already. Always depends :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T05:27:59.983018</ts>
    <user>U0GR72XH8</user>
    <text>Yeah, there's no _typo_ safety in chats :wink:</text>
  </message>
  <message>
    <ts>2017-07-27T05:31:00.051611</ts>
    <user>U3SJEDR96</user>
    <text>Dict in Elm is just a red-black tree (although alternative implementations exist). Sets are Dicts "without" values. You get a constant memory overhead for every entry in a set, that way, but it's not _that_ bad, and hardly a problem in reality.</text>
  </message>
  <message>
    <ts>2017-07-27T05:34:03.118341</ts>
    <user>U6EAT2Z37</user>
    <text>Be nicer if the RB tree was somehow exposed maybe? All good. Probably not possible.</text>
  </message>
  <message>
    <ts>2017-07-27T05:43:21.319230</ts>
    <user>U3SJEDR96</user>
    <text>Can't easily expose the constructors for pattern-matching without making it possible to build unbalanced trees, so the added complexity seems to outweigh the (limited) use that would have. People haven't  asked about breadth first traversal, so I doubt it would be of much practical use</text>
  </message>
  <message>
    <ts>2017-07-27T05:51:50.504429</ts>
    <user>U6EAT2Z37</user>
    <text>Thank *you*!</text>
  </message>
  <message>
    <ts>2017-07-27T07:39:17.486311</ts>
    <user>U37HUSJ4R</user>
    <text>does anyone have a link to Evans elm europe talk?</text>
  </message>
  <message>
    <ts>2017-07-27T07:50:10.675009</ts>
    <user>U2AHAPQUV</user>
    <text>&lt;@U37HUSJ4R&gt; seems like it hasn’t been released yet, I saw somewhere that they’re close to putting in online</text>
  </message>
  <message>
    <ts>2017-07-27T07:52:37.719795</ts>
    <user>U37HUSJ4R</user>
    <text>:smile: &lt;@U2AHAPQUV&gt;  thanks sir</text>
  </message>
  <message>
    <ts>2017-07-27T08:42:25.760024</ts>
    <user>U5WS7CJLV</user>
    <text>any of you ever had trouble with WebSocket?</text>
  </message>
  <message>
    <ts>2017-07-27T08:42:41.766291</ts>
    <user>U5WS7CJLV</user>
    <text>seems like one of my Elm web sockets is just not noticing messages</text>
  </message>
  <message>
    <ts>2017-07-27T08:42:46.768372</ts>
    <user>U5WS7CJLV</user>
    <text>I have 3 of them</text>
  </message>
  <message>
    <ts>2017-07-27T08:42:56.772240</ts>
    <user>U5WS7CJLV</user>
    <text>2 always get the messages</text>
  </message>
  <message>
    <ts>2017-07-27T08:43:41.789383</ts>
    <user>U5WS7CJLV</user>
    <text>the other one is a mystery - I can configure things so it will see messages, but normally it misses them</text>
  </message>
  <message>
    <ts>2017-07-27T08:43:59.796710</ts>
    <user>U5WS7CJLV</user>
    <text>and when I say "configure things", I mean "changing stuff on the server side"</text>
  </message>
  <message>
    <ts>2017-07-27T08:44:14.802309</ts>
    <user>U5WS7CJLV</user>
    <text>it is totally irrational to me why it sometimes works and sometimes doesn't</text>
  </message>
  <message>
    <ts>2017-07-27T08:44:26.807540</ts>
    <user>U5WS7CJLV</user>
    <text>and so, mine is a general question about known issues with WebSocket</text>
  </message>
  <message>
    <ts>2017-07-27T08:45:09.824771</ts>
    <user>U5WS7CJLV</user>
    <text>I have tried setting up an identical socket in the javascript console of my browser and it sees the messages just fine</text>
  </message>
  <message>
    <ts>2017-07-27T08:53:46.035019</ts>
    <user>U5WS7CJLV</user>
    <text>I believe I've solved the mystery</text>
  </message>
  <message>
    <ts>2017-07-27T08:54:11.045622</ts>
    <user>U5WS7CJLV</user>
    <text>WebSocket.listen takes a string (the url) and a String -&amp;gt; msg function</text>
  </message>
  <message>
    <ts>2017-07-27T08:54:28.052779</ts>
    <user>U5WS7CJLV</user>
    <text>and my String -&amp;gt; msg function was never returning a message</text>
  </message>
  <message>
    <ts>2017-07-27T08:54:51.062205</ts>
    <user>U5WS7CJLV</user>
    <text>Elm exploded in the course of trying to decode the socket data.  Or such is my best guess.</text>
  </message>
  <message>
    <ts>2017-07-27T08:55:58.091123</ts>
    <user>U5WS7CJLV</user>
    <text>if I just swap my decoding logic with a Result.Err, then I can see the socket messages getting processed</text>
  </message>
  <message>
    <ts>2017-07-27T08:56:25.103512</ts>
    <user>U5S1LBR7Y</user>
    <text>Is the type of List defined in elm-core? Or is it a compiler thing? 
I am looking at the List source here &lt;https://github.com/elm-lang/core/blob/5.1.1/src/List.elm&gt;.
The functions are using the type List. Where does that type come from?</text>
  </message>
  <message>
    <ts>2017-07-27T08:57:02.119861</ts>
    <user>U5WS7CJLV</user>
    <text>you will probably have better luck on the beginners channel</text>
  </message>
  <message>
    <ts>2017-07-27T08:57:30.132745</ts>
    <user>U5WS7CJLV</user>
    <text>here in general I seem to be monologue-ing to myself</text>
  </message>
  <message>
    <ts>2017-07-27T08:58:22.155590</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U5S1LBR7Y&gt; :eyes:</text>
  </message>
  <message>
    <ts>2017-07-27T08:59:15.179187</ts>
    <user>U5S1LBR7Y</user>
    <text>&lt;@U6EAT2Z37&gt; Did I miss something?</text>
  </message>
  <message>
    <ts>2017-07-27T08:59:18.180184</ts>
    <user>U6EAT2Z37</user>
    <text>Probably Native.List</text>
  </message>
  <message>
    <ts>2017-07-27T08:59:22.182051</ts>
    <user>U6EAT2Z37</user>
    <text>No, that meant I was looking :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T08:59:31.186092</ts>
    <user>U5S1LBR7Y</user>
    <text>Okay</text>
  </message>
  <message>
    <ts>2017-07-27T08:59:39.189654</ts>
    <user>U5S1LBR7Y</user>
    <text>Not in Native.List</text>
  </message>
  <message>
    <ts>2017-07-27T09:00:06.202810</ts>
    <user>U5S1LBR7Y</user>
    <text>I mean it needs to be exposed if that was the case!</text>
  </message>
  <message>
    <ts>2017-07-27T09:05:29.354939</ts>
    <user>U6EAT2Z37</user>
    <text>I *think* this is where list literals are defined: &lt;https://github.com/elm-lang/elm-compiler/blob/master/src/Parse/Expression.hs#L81&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T09:05:33.356579</ts>
    <user>U6EAT2Z37</user>
    <text>at least, the parsing of them</text>
  </message>
  <message>
    <ts>2017-07-27T09:05:39.359146</ts>
    <user>U0F01KLV6</user>
    <text>&lt;@U5S1LBR7Y&gt;: it's a compiler thing</text>
  </message>
  <message>
    <ts>2017-07-27T09:05:59.368404</ts>
    <user>U5S1LBR7Y</user>
    <text>Ohh Okay :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-27T09:06:43.387977</ts>
    <user>U0F01KLV6</user>
    <text>But it's essentially equal to:
type List a = Cons a (List a) | Empty</text>
  </message>
  <message>
    <ts>2017-07-27T09:07:41.414630</ts>
    <user>U0F01KLV6</user>
    <text>You can check out my elm europe talk for more details in the implementation, if you're interested</text>
  </message>
  <message>
    <ts>2017-07-27T09:08:10.427985</ts>
    <user>U5S1LBR7Y</user>
    <text>Sure, I will. Thanks</text>
  </message>
  <message>
    <ts>2017-07-27T09:08:20.432729</ts>
    <user>U0F01KLV6</user>
    <text>:blush:</text>
  </message>
  <message>
    <ts>2017-07-27T09:08:27.435848</ts>
    <user>U5S1LBR7Y</user>
    <text>Also I am having a hard time understanding union types</text>
  </message>
  <message>
    <ts>2017-07-27T09:08:36.440128</ts>
    <user>U5S1LBR7Y</user>
    <text>Now I understand how it works</text>
  </message>
  <message>
    <ts>2017-07-27T09:09:03.452894</ts>
    <user>U5S1LBR7Y</user>
    <text>Mainly what I dont understand is where are the types inside the union types defined?</text>
  </message>
  <message>
    <ts>2017-07-27T09:09:30.465015</ts>
    <user>U0F01KLV6</user>
    <text>Not following :/</text>
  </message>
  <message>
    <ts>2017-07-27T09:09:32.466317</ts>
    <user>U5S1LBR7Y</user>
    <text>For eg: `type Maybe a = Nothing | Just a`</text>
  </message>
  <message>
    <ts>2017-07-27T09:09:34.467256</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U0F01KLV6&gt; I couldn't seem to see any implementation details in your talk</text>
  </message>
  <message>
    <ts>2017-07-27T09:09:42.470860</ts>
    <user>U5S1LBR7Y</user>
    <text>where is Nothing and Just defined</text>
  </message>
  <message>
    <ts>2017-07-27T09:10:54.505383</ts>
    <user>U5S1LBR7Y</user>
    <text>They are not strings so they need to be defined somewhere right?</text>
  </message>
  <message>
    <ts>2017-07-27T09:10:55.505635</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U5S1LBR7Y&gt; so that means `Maybe a` is a new type. It's defined as ... one of `Nothing` (as a data value constructor) or a data constructor value/function called `Just a` where a is some value of the same type as the `a` in `Maybe a`.</text>
  </message>
  <message>
    <ts>2017-07-27T09:11:09.512113</ts>
    <user>U0F01KLV6</user>
    <text>&lt;@U6EAT2Z37&gt; bad language, i ment explinaton on how they work "under the hood"</text>
  </message>
  <message>
    <ts>2017-07-27T09:11:10.512787</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U5S1LBR7Y&gt; do you understand what I just said?</text>
  </message>
  <message>
    <ts>2017-07-27T09:11:55.533797</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U0F01KLV6&gt; yeah, similarly. There was explanation of Linked List... maybe I didn't watch the correct talk. Didn't seem to be how it was actually implemented though.</text>
  </message>
  <message>
    <ts>2017-07-27T09:12:01.537182</ts>
    <user>U5S1LBR7Y</user>
    <text>&lt;@U6EAT2Z37&gt; So it is indeed defining three types?</text>
  </message>
  <message>
    <ts>2017-07-27T09:12:23.548100</ts>
    <user>U5S1LBR7Y</user>
    <text>`Maybe`, `Just` and `Nothing`?</text>
  </message>
  <message>
    <ts>2017-07-27T09:12:45.558579</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U5S1LBR7Y&gt; nope... just one type. the things on the right are the value constructors</text>
  </message>
  <message>
    <ts>2017-07-27T09:13:03.566956</ts>
    <user>U6EAT2Z37</user>
    <text>a value constructor is a value or function that can build one of the values of that types</text>
  </message>
  <message>
    <ts>2017-07-27T09:13:25.577872</ts>
    <user>U6EAT2Z37</user>
    <text>So... `type OneOrTwo = One | Two` can have exactly one of two different values.</text>
  </message>
  <message>
    <ts>2017-07-27T09:13:45.587555</ts>
    <user>U6EAT2Z37</user>
    <text>`One : OneOrTwo` or `Two : OneOrTwo` &amp;lt;- they're both values, but I've put the type on the end of them.</text>
  </message>
  <message>
    <ts>2017-07-27T09:13:57.593380</ts>
    <user>U6EAT2Z37</user>
    <text>does that make sense?</text>
  </message>
  <message>
    <ts>2017-07-27T09:14:11.599678</ts>
    <user>U0F01KLV6</user>
    <text>&lt;@U5S1LBR7Y&gt;: one way to look at this, is that integers are essentially: type Int = 1 | 2 | 3 | 4... </text>
  </message>
  <message>
    <ts>2017-07-27T09:14:11.599879</ts>
    <user>U0F01KLV6</user>
    <text>1 and 2 are values of the type Int</text>
  </message>
  <message>
    <ts>2017-07-27T09:14:37.612567</ts>
    <user>U5S1LBR7Y</user>
    <text>Ohh I get it now!</text>
  </message>
  <message>
    <ts>2017-07-27T09:14:40.613892</ts>
    <user>U6EAT2Z37</user>
    <text>Yay :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T09:15:02.624640</ts>
    <user>U5S1LBR7Y</user>
    <text>Thanks &lt;@U0F01KLV6&gt; and &lt;@U6EAT2Z37&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T09:15:15.630771</ts>
    <user>U0F01KLV6</user>
    <text>No problem</text>
  </message>
  <message>
    <ts>2017-07-27T09:15:46.646662</ts>
    <user>U5S1LBR7Y</user>
    <text>But if I create Such union types I will have to expose those value constructors as well right?</text>
  </message>
  <message>
    <ts>2017-07-27T09:15:53.650183</ts>
    <user>U5S1LBR7Y</user>
    <text>how would I do that?</text>
  </message>
  <message>
    <ts>2017-07-27T09:16:21.664388</ts>
    <user>U0F01KLV6</user>
    <text>You don't have to, no, but you can</text>
  </message>
  <message>
    <ts>2017-07-27T09:16:28.667621</ts>
    <user>U5S1LBR7Y</user>
    <text>I am guessing `module Foo exposing (OneOrTwo, One, Two)`</text>
  </message>
  <message>
    <ts>2017-07-27T09:16:29.668067</ts>
    <user>U6EAT2Z37</user>
    <text>`exposing (OneOrTwo(..))`</text>
  </message>
  <message>
    <ts>2017-07-27T09:17:16.691592</ts>
    <user>U6EAT2Z37</user>
    <text>You might hear "opaque types" bandied about. That's when you *don't* expose the "constructors".</text>
  </message>
  <message>
    <ts>2017-07-27T09:17:53.709989</ts>
    <user>U6EAT2Z37</user>
    <text>It's often a good pattern to *not* expose them, but rather expose a function from the module. That way you can keep the implementation of the type private to the function, and it defines a very tight interface for your module.</text>
  </message>
  <message>
    <ts>2017-07-27T09:18:22.724618</ts>
    <user>U6EAT2Z37</user>
    <text>So if you need to build a string value out of your `OneOrTwo` type, you could provide `toString : OneOrTwo -&amp;gt; String`</text>
  </message>
  <message>
    <ts>2017-07-27T09:18:51.738567</ts>
    <user>U6EAT2Z37</user>
    <text>Then you've decoupled your internals from your externals, and you're free to refactor the internals however you see fit, whenever you like. (It's a *lot* easier to refactor this way, I think)</text>
  </message>
  <message>
    <ts>2017-07-27T09:19:12.749248</ts>
    <user>U5S1LBR7Y</user>
    <text>Okay! Makes Sense :simple_smile:</text>
  </message>
  <message>
    <ts>2017-07-27T09:19:15.750800</ts>
    <user>U5S1LBR7Y</user>
    <text>Thanks</text>
  </message>
  <message>
    <ts>2017-07-27T09:21:18.813039</ts>
    <user>U5S1LBR7Y</user>
    <text>Its using the same syntax as module exposing?
Just to understand, If I want to expose only `One`, i could write it like this: `exposing ( OneOrTwo(One) )`</text>
  </message>
  <message>
    <ts>2017-07-27T09:21:35.821497</ts>
    <user>U5S1LBR7Y</user>
    <text>Is that correct?</text>
  </message>
  <message>
    <ts>2017-07-27T09:21:40.824026</ts>
    <user>U6EAT2Z37</user>
    <text>Try it out. :slightly_smiling_face: You'll have your answer :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T09:21:51.829389</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;http://ellie-app.com|ellie-app.com&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T09:21:52.829960</ts>
    <user>U5S1LBR7Y</user>
    <text>Okay :laughing:</text>
  </message>
  <message>
    <ts>2017-07-27T09:22:44.857233</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;https://ellie-app.com/3RBpDqTfrNDa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T09:23:25.877813</ts>
    <user>U5S1LBR7Y</user>
    <text>Can you have multiple files in ellie-app?
Cant find that option!</text>
  </message>
  <message>
    <ts>2017-07-27T09:25:36.944582</ts>
    <user>U6EAT2Z37</user>
    <text>I don't know if you can.</text>
  </message>
  <message>
    <ts>2017-07-27T09:40:04.411768</ts>
    <user>U5S1LBR7Y</user>
    <text>I tried it locally!</text>
  </message>
  <message>
    <ts>2017-07-27T09:40:45.435151</ts>
    <user>U5S1LBR7Y</user>
    <text>It works as I thought, Now I get it!</text>
  </message>
  <message>
    <ts>2017-07-27T09:40:59.442498</ts>
    <user>U5S1LBR7Y</user>
    <text>Thank you for your time &lt;@U6EAT2Z37&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T11:20:07.115363</ts>
    <user>U0F7JPK36</user>
    <text>just one file. i don't plan on adding a multiple files option, that's not really what ellie is for</text>
  </message>
  <message>
    <ts>2017-07-27T11:22:11.197546</ts>
    <user>U42FYKFRN</user>
    <text>hello - anyone know of a way to speed up elm compile times - currently it’s taking around 5 minutes which is pretty painful - I a stack of Mains and some common code - and then I elm-make all the mains and output the js for my app</text>
  </message>
  <message>
    <ts>2017-07-27T11:22:46.220553</ts>
    <user>U42FYKFRN</user>
    <text>I have about 500 modules and a few thousand elm files (including elm-stuff)</text>
  </message>
  <message>
    <ts>2017-07-27T11:24:00.268965</ts>
    <user>U42FYKFRN</user>
    <text>when the project was smaller compilation was fast - but now if I make a change to a common elm file which is used a lot - then it takes ages - and even if I make a change to a non common one - it still takes a lot longer than I would like</text>
  </message>
  <message>
    <ts>2017-07-27T11:24:18.281364</ts>
    <user>U0J1M0F32</user>
    <text>I think the main piece of advice is going to look for ways to cut down how many modules you're using and break up any very long case statements.</text>
  </message>
  <message>
    <ts>2017-07-27T11:24:59.308200</ts>
    <user>U0J1M0F32</user>
    <text>iirc, lots of small modules and very large case statements are especially rough on the compiler.</text>
  </message>
  <message>
    <ts>2017-07-27T11:26:22.363172</ts>
    <user>U42FYKFRN</user>
    <text>hmm - if I change the implementation of a function without changing the signature of the function - then do the callers of the function need to be recompiled? I think it should only need to be “relinked”</text>
  </message>
  <message>
    <ts>2017-07-27T11:26:54.384123</ts>
    <user>U4872964V</user>
    <text>I think it’s the “linking” that takes time actually</text>
  </message>
  <message>
    <ts>2017-07-27T11:27:03.389700</ts>
    <user>U42FYKFRN</user>
    <text>really?</text>
  </message>
  <message>
    <ts>2017-07-27T11:27:11.395361</ts>
    <user>U42FYKFRN</user>
    <text>how come linking takes that long?</text>
  </message>
  <message>
    <ts>2017-07-27T11:27:27.406167</ts>
    <user>U4872964V</user>
    <text>Well, that i cannot answer :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T11:27:35.410977</ts>
    <user>U42FYKFRN</user>
    <text>is there anyway to implement compilation fire walls ?</text>
  </message>
  <message>
    <ts>2017-07-27T11:27:41.415351</ts>
    <user>U4872964V</user>
    <text>but it’s a lot of files to merge together</text>
  </message>
  <message>
    <ts>2017-07-27T11:27:44.417015</ts>
    <user>U42FYKFRN</user>
    <text>this compilation time is crippling!</text>
  </message>
  <message>
    <ts>2017-07-27T11:28:23.442624</ts>
    <user>U4872964V</user>
    <text>indeed, 0.19 is supposed to make compilation faster though</text>
  </message>
  <message>
    <ts>2017-07-27T11:28:44.455555</ts>
    <user>U4872964V</user>
    <text>500 modules sounds like a lot, i have like 20 modules or so, but then I put a lot in each file</text>
  </message>
  <message>
    <ts>2017-07-27T11:28:47.457275</ts>
    <user>U0J1M0F32</user>
    <text>Yah, the 0.19 speed bump should help, but I worry the 500+ modules is still going to be an issue if it continues to grow at that rate.</text>
  </message>
  <message>
    <ts>2017-07-27T11:29:04.468559</ts>
    <user>U0J1M0F32</user>
    <text>Whats the average LOC per file?</text>
  </message>
  <message>
    <ts>2017-07-27T11:29:11.473324</ts>
    <user>U42FYKFRN</user>
    <text>well using third party elm libs can bump up the number of modules as well</text>
  </message>
  <message>
    <ts>2017-07-27T11:30:18.517495</ts>
    <user>U0J1M0F32</user>
    <text>I don't know if those are counted/treated the same as local modules.</text>
  </message>
  <message>
    <ts>2017-07-27T11:30:26.523227</ts>
    <user>U0J1M0F32</user>
    <text>I don't know enough about the compiler to say either way confidently.</text>
  </message>
  <message>
    <ts>2017-07-27T11:34:00.667338</ts>
    <user>U42FYKFRN</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-07-27T11:36:04.748579</ts>
    <user>U42FYKFRN</user>
    <text>apparently the averge LOC is about 100</text>
  </message>
  <message>
    <ts>2017-07-27T11:36:57.783925</ts>
    <user>U0RPQMZ9S</user>
    <text>if you have any case statements with lots of possible cases, like `case (bigUnionType, anotherBigUnionType)`, those can especially slow down compilation</text>
  </message>
  <message>
    <ts>2017-07-27T11:37:25.802275</ts>
    <user>U42FYKFRN</user>
    <text>well don’t have too many of those really in the core code - not sure about 3rd party modules we use though</text>
  </message>
  <message>
    <ts>2017-07-27T11:38:29.844452</ts>
    <user>U0RPQMZ9S</user>
    <text>just rewriting them like so can give you a speed up
```case bigUnionType of 
         FirstOne -&amp;gt; 
             case anotherBigUnionType of 
                ...
```</text>
  </message>
  <message>
    <ts>2017-07-27T11:38:44.854127</ts>
    <user>U0RPQMZ9S</user>
    <text>might be worth a shot</text>
  </message>
  <message>
    <ts>2017-07-27T11:39:22.878526</ts>
    <user>U0RPQMZ9S</user>
    <text>this is one of the bugs slated to be fixed in 0.19</text>
  </message>
  <message>
    <ts>2017-07-27T11:39:33.885679</ts>
    <user>U42FYKFRN</user>
    <text>when is 0.19 due out?</text>
  </message>
  <message>
    <ts>2017-07-27T11:40:08.907822</ts>
    <user>U0RPQMZ9S</user>
    <text>No official timeline, my gut says between 1 and 2 months</text>
  </message>
  <message>
    <ts>2017-07-27T11:40:29.921492</ts>
    <user>U42FYKFRN</user>
    <text>is it likely to have much impact on existing code?</text>
  </message>
  <message>
    <ts>2017-07-27T11:40:51.935958</ts>
    <user>U0J1M0F32</user>
    <text>No way of saying for sure, but I would imagine there will be a noticeable improvement.</text>
  </message>
  <message>
    <ts>2017-07-27T11:41:03.944059</ts>
    <user>U42FYKFRN</user>
    <text>taking a speed increase but having to re-write large amounts of code might be just as painful in the short term</text>
  </message>
  <message>
    <ts>2017-07-27T11:41:11.949166</ts>
    <user>U0J1M0F32</user>
    <text>I also imagine it won't be a game changing speed increase.</text>
  </message>
  <message>
    <ts>2017-07-27T11:41:39.967435</ts>
    <user>U0J1M0F32</user>
    <text>Idk, I have personally found elm code bases fairly straightforward to refactor.</text>
  </message>
  <message>
    <ts>2017-07-27T11:42:25.997866</ts>
    <user>U42FYKFRN</user>
    <text>imaging a team of 8 devs knocking out Elm code for 6 months - it’s a lot of code - so refactoring would be a bit of down time for sure</text>
  </message>
  <message>
    <ts>2017-07-27T11:42:57.018635</ts>
    <user>U0J1M0F32</user>
    <text>~50K LOC it sounds like.</text>
  </message>
  <message>
    <ts>2017-07-27T11:43:43.048249</ts>
    <user>U0J1M0F32</user>
    <text>Yah, I'm not saying it'd be something you could do solo over a lunch break, but if the goal is to get the app into a better state, refactoring into less files could be a goal for the team to refactor towards as they keep working day in and day out.</text>
  </message>
  <message>
    <ts>2017-07-27T11:47:20.188687</ts>
    <user>U5GSVKPJS</user>
    <text>Am I right in thinking that if I use elm-webpacker-loader, you end up with serious code duplication in the resulting JS?</text>
  </message>
  <message>
    <ts>2017-07-27T11:47:52.209374</ts>
    <user>U5GSVKPJS</user>
    <text>For example, if we have modules A, B and C, and A and B both depend on C, then require('A.elm'), require('B.elm') results in C essentially being compiled and included twice?</text>
  </message>
  <message>
    <ts>2017-07-27T11:52:10.378401</ts>
    <user>U0RPQMZ9S</user>
    <text>&lt;@U0EUHKVGB&gt;, any other advice for &lt;@U42FYKFRN&gt; on reducing compile time on a large project? I feel you're the most qualified person to ask :smile:</text>
  </message>
  <message>
    <ts>2017-07-27T11:52:40.397699</ts>
    <user>U42FYKFRN</user>
    <text>we just looking through the elm-make code to see if there are any optimizations we can make</text>
  </message>
  <message>
    <ts>2017-07-27T11:53:14.419767</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U5GSVKPJS&gt; Yes. One of the things that will be addressed with 0.19</text>
  </message>
  <message>
    <ts>2017-07-27T11:54:18.461869</ts>
    <user>U42FYKFRN</user>
    <text>&lt;@U0EUHKVGB&gt; I’ll try to weed out some of the things covered here so far - and wait for 0.19 then - unless I spot a quick win in some of the haskell code</text>
  </message>
  <message>
    <ts>2017-07-27T11:55:29.508288</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U42FYKFRN&gt; You already got pretty good advice. 5 mins for that 500 files sounds about right to me. One thing you can do is to turn anything possible into a package. That way it forces code to not be entangled, and therefore lead to faster compile times. but obviously it's hard to do that without private packages.</text>
  </message>
  <message>
    <ts>2017-07-27T11:56:50.561182</ts>
    <user>U42FYKFRN</user>
    <text>&lt;@U0EUHKVGB&gt; yeah thanks - will investigate those options mentioned</text>
  </message>
  <message>
    <ts>2017-07-27T12:10:26.076094</ts>
    <user>U5GSVKPJS</user>
    <text>&lt;@U0EUHKVGB&gt; ok, I wasn't sure if it needed 0.19 or just elm-webpacker-loader to be smarter</text>
  </message>
  <message>
    <ts>2017-07-27T12:11:04.098839</ts>
    <user>U5GSVKPJS</user>
    <text>I guess as Webpack itself just runs loaders per file there's not much it could do</text>
  </message>
  <message>
    <ts>2017-07-27T12:11:27.112653</ts>
    <user>U0EUHKVGB</user>
    <text>There's not a good way to make it work consistently at the webpack level </text>
  </message>
  <message>
    <ts>2017-07-27T12:11:41.120935</ts>
    <user>U0EUHKVGB</user>
    <text>not in the way people want it to work, anyway </text>
  </message>
  <message>
    <ts>2017-07-27T12:12:02.132847</ts>
    <user>U6DG2DGAK</user>
    <text>It should _never_ ever be the case that I have to replace
```
viewRecord : Associations -&amp;gt; Element Styles Variations Msg
viewRecord =
    renderRecord [] viewAssociation
```
with
```
viewRecord : Associations -&amp;gt; Element Styles Variations Msg
viewRecord =
    renderRecord [] (\index -&amp;gt; viewAssociation index)
```
to get rid of a runtime error in elm ```Uncaught TypeError: Cannot read property 'arity' of undefined```
right?</text>
  </message>
  <message>
    <ts>2017-07-27T12:12:53.162304</ts>
    <user>U5GSVKPJS</user>
    <text>Shame</text>
  </message>
  <message>
    <ts>2017-07-27T12:13:14.173759</ts>
    <user>U6DG2DGAK</user>
    <text>Does anyone know whether this elm-compiler bug is known?</text>
  </message>
  <message>
    <ts>2017-07-27T12:18:15.350471</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U6DG2DGAK&gt; looks like a recursion bug of some sort. hard to say without seeing more code</text>
  </message>
  <message>
    <ts>2017-07-27T12:24:43.574319</ts>
    <user>U6DG2DGAK</user>
    <text>well the code is online: &lt;https://github.com/matheus23/elm-ide/blob/490e747002cd1446169420bc0c09c5f51c084d28/src/Edit/Type.elm#L107&gt;
Its not _that_ much, but its not that little either...</text>
  </message>
  <message>
    <ts>2017-07-27T12:25:22.597551</ts>
    <user>U6DG2DGAK</user>
    <text>I have already had experience with recursion bugs in elm, but after looking as hard as I could, I couldn't find any lets that seemed odd</text>
  </message>
  <message>
    <ts>2017-07-27T12:26:55.651468</ts>
    <user>U6DG2DGAK</user>
    <text>I looked through the elm-compiler open issues, and didn't find anything that looked related. I'll try to create a smaller test case</text>
  </message>
  <message>
    <ts>2017-07-27T12:29:00.722513</ts>
    <user>U6DG2DGAK</user>
    <text>ah and I'm sorry. Its got nothing to do with currying. Its actually called "eta abstraction/reduction" I just saw</text>
  </message>
  <message>
    <ts>2017-07-27T12:50:47.459939</ts>
    <user>U23SA861Y</user>
    <text>god is point free syntax ever hard to read</text>
  </message>
  <message>
    <ts>2017-07-27T13:22:33.536259</ts>
    <user>U2GTQM83A</user>
    <text>Hi people. I've got a tough problem for which I cannot find a solution that doesn't involve type classes.

I fetch objects from the server that, depending on the request, will have a full object in a field or just the object ID. To support that in my types, I have something like this:
```
type alias Book author = 
   { name: String
   , author: author
   }
```
This way I can define what I expect to be inside book. The same happens with my decoders.
But in my http request I say which fields should be populated using strings. Something like `/books?embed=author`. I don't have any type safe way to relate my type to what I send in the `embed` field of the url.

What I need is a function that given the type `Book String` would return `[]` and given the type `Book Author` would return `["author"]`.

*Is this possible in Elm?*</text>
  </message>
  <message>
    <ts>2017-07-27T13:24:52.614274</ts>
    <user>U1CE9DL9H</user>
    <text>not in this fashion, you'd need to bring stuff down from the type level to the value level, so `Book AuthorOrString` where `type AuthorOrString = A Author | S String`</text>
  </message>
  <message>
    <ts>2017-07-27T13:26:08.657610</ts>
    <user>U23SA861Y</user>
    <text>that and a oneOf decoder</text>
  </message>
  <message>
    <ts>2017-07-27T13:32:29.877852</ts>
    <user>U2GTQM83A</user>
    <text>I don't have an instance of the type when doing Http requests, but I do have the decoder. I was thinking of doing something on the lines of
```
authorToEmbed : SomeType Author -&amp;gt; String
authorToEmbed d = ["author"]

bookToEmbedString : SomeType a -&amp;gt; SomeType Book a
```

But I can't really figure out how that would work</text>
  </message>
  <message>
    <ts>2017-07-27T13:33:42.919960</ts>
    <user>U2GTQM83A</user>
    <text>&lt;@U23SA861Y&gt; I'm not really trying to decode it. I'm trying to encode it.</text>
  </message>
  <message>
    <ts>2017-07-27T13:33:54.926517</ts>
    <user>U2GTQM83A</user>
    <text>Is there anything like `oneOf` for encoding?</text>
  </message>
  <message>
    <ts>2017-07-27T13:34:13.937113</ts>
    <user>U0PC31XD0</user>
    <text>&lt;@U6DG2DGAK&gt; did you try defining the function that isn’t working in non-point-free style? might help diagnose the issue</text>
  </message>
  <message>
    <ts>2017-07-27T13:34:49.957468</ts>
    <user>U23SA861Y</user>
    <text>umm well in a sense yes. If you are using a union type an encoder would be simple enough to construct</text>
  </message>
  <message>
    <ts>2017-07-27T13:35:15.972185</ts>
    <user>U23SA861Y</user>
    <text>if you have control over then endpoint you probably shouldn have different types of data going to the same place but if you have to then..</text>
  </message>
  <message>
    <ts>2017-07-27T13:35:46.990481</ts>
    <user>U2GTQM83A</user>
    <text>Hmm. but I'm not using a union type. That's the thing. I know exactly the type I want. Sometimes I want a Book Author. Sometimes I want a Book String.</text>
  </message>
  <message>
    <ts>2017-07-27T13:37:55.064334</ts>
    <user>U23SA861Y</user>
    <text>in elm it should be a union type</text>
  </message>
  <message>
    <ts>2017-07-27T13:38:28.082615</ts>
    <user>U23SA861Y</user>
    <text>the actual record you encode doesn't have to be, but in elm you need something to tell you what data you have and the type you should use for that is a union</text>
  </message>
  <message>
    <ts>2017-07-27T13:42:54.234927</ts>
    <user>U2GTQM83A</user>
    <text>Not in this case. I have a big codebase with different Elm programs. They all share the same types, but each will use the type with different content in it.</text>
  </message>
  <message>
    <ts>2017-07-27T13:43:39.260834</ts>
    <user>U2GTQM83A</user>
    <text>Some might need to access the author of the book, so I ask the server to do a join in the database and send that. Another program will only need the book's own properties. So the author field doesn't need to be populated.</text>
  </message>
  <message>
    <ts>2017-07-27T13:43:59.271900</ts>
    <user>U2GTQM83A</user>
    <text>Here is an example decoder from my production codebase:
```
userStructure : Decoder position -&amp;gt; Decoder contact -&amp;gt; Decoder team -&amp;gt; Decoder (UserStructure position contact team)
userStructure positionDecoder contactDecoder teamDecoder =
    decode UserStructure
        |&amp;gt; required "_id" string
        |&amp;gt; required "email" string
        |&amp;gt; required "active" bool
        |&amp;gt; required "permission" (adtDecoder userPermission)
        |&amp;gt; optional "position" (nullable positionDecoder) Nothing
        |&amp;gt; optional "contact" (nullable contactDecoder) Nothing
        |&amp;gt; optional "team" (nullable teamDecoder) Nothing

```</text>
  </message>
  <message>
    <ts>2017-07-27T13:45:01.307460</ts>
    <user>U2GTQM83A</user>
    <text>In this case, position team and contact may be strings or something else.</text>
  </message>
  <message>
    <ts>2017-07-27T13:45:36.327895</ts>
    <user>U2GTQM83A</user>
    <text>I know that I can map from a JS string to my type. Now I need to map from my type to a specific Elm value.</text>
  </message>
  <message>
    <ts>2017-07-27T13:47:41.398251</ts>
    <user>U2GTQM83A</user>
    <text>I can go from one decoder to a string. like this.
```
projectToEmbed : Decoder Project -&amp;gt; String
encodeProject a =
    "created_by"
```</text>
  </message>
  <message>
    <ts>2017-07-27T13:48:26.423931</ts>
    <user>U2GTQM83A</user>
    <text>But I don't know how to do it if my decoder type is parameterised. Like `Decoder (Project a)`</text>
  </message>
  <message>
    <ts>2017-07-27T13:53:26.597845</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; What I need is a function that given the type `Book String` would return `[]` and given the type `Book Author` would return `["author"]`.
&amp;gt; [...]
&amp;gt;  I know exactly the type I want. Sometimes I want a Book Author. Sometimes I want a Book String.

since you know exactly the type you want, why not write two functions?

one takes `Book String` and the other takes `Book Author`</text>
  </message>
  <message>
    <ts>2017-07-27T13:55:07.657922</ts>
    <user>U2GTQM83A</user>
    <text>Because I have at least 5 types which take three type parameters each.</text>
  </message>
  <message>
    <ts>2017-07-27T13:55:23.667327</ts>
    <user>U2GTQM83A</user>
    <text>That would be a lot of functions</text>
  </message>
  <message>
    <ts>2017-07-27T13:55:59.688388</ts>
    <user>U2GTQM83A</user>
    <text>Aaand. Because it would end up not being type safe.</text>
  </message>
  <message>
    <ts>2017-07-27T13:56:22.702528</ts>
    <user>U23SA861Y</user>
    <text>I don't think it's possible to create a parameterized decoder....</text>
  </message>
  <message>
    <ts>2017-07-27T13:56:43.714644</ts>
    <user>U2GTQM83A</user>
    <text>Because if something changes, like the string that a project should return. If I forget to replace in one of the functions, it would not create an error.</text>
  </message>
  <message>
    <ts>2017-07-27T13:56:44.715614</ts>
    <user>U23SA861Y</user>
    <text>because that would cause a runtime error</text>
  </message>
  <message>
    <ts>2017-07-27T13:57:00.724995</ts>
    <user>U2GTQM83A</user>
    <text>I have parameterised decoders.</text>
  </message>
  <message>
    <ts>2017-07-27T13:57:15.733340</ts>
    <user>U0CL0AS3V</user>
    <text>what are the 5 types with the 3 type parameters each?</text>
  </message>
  <message>
    <ts>2017-07-27T13:57:23.738505</ts>
    <user>U2GTQM83A</user>
    <text>What I need is a way to get a string depending on the decoder type.</text>
  </message>
  <message>
    <ts>2017-07-27T13:57:26.739781</ts>
    <user>U2GTQM83A</user>
    <text>Yep.</text>
  </message>
  <message>
    <ts>2017-07-27T13:58:12.767001</ts>
    <user>U2GTQM83A</user>
    <text>Here is an example: 
```
type alias ProjectStructure user company contact =
    { id : String
    , code : String
    , name : String
    , description : String
    , type_ : ProjectType
    , startDate : Date
    , endDate : Maybe Date
    , budget : String
    , requiredFiles : List String
    , notes : String
    , company : company
    , owner : user
    , contacts : List (ProjectContact contact)
    , rates : List PositionRate
    , created_by : user
    , confidential : Bool
    }
```</text>
  </message>
  <message>
    <ts>2017-07-27T13:58:41.784350</ts>
    <user>U2GTQM83A</user>
    <text>Like Project, I have Deliverable, Contact, User, Team, TimeRecording.....</text>
  </message>
  <message>
    <ts>2017-07-27T13:59:20.806717</ts>
    <user>U0CL0AS3V</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-27T13:59:38.818313</ts>
    <user>U0CL0AS3V</user>
    <text>so you could presumably do something like</text>
  </message>
  <message>
    <ts>2017-07-27T13:59:55.828550</ts>
    <user>U0CL0AS3V</user>
    <text>`ProjectStructure user company contact -&amp;gt; String`</text>
  </message>
  <message>
    <ts>2017-07-27T14:00:06.835818</ts>
    <user>U2GTQM83A</user>
    <text>Yes!</text>
  </message>
  <message>
    <ts>2017-07-27T14:00:08.837037</ts>
    <user>U0CL0AS3V</user>
    <text>and inside it pattern matches on the argument 3 times</text>
  </message>
  <message>
    <ts>2017-07-27T14:00:12.839743</ts>
    <user>U2GTQM83A</user>
    <text>That's what I want.</text>
  </message>
  <message>
    <ts>2017-07-27T14:00:14.840701</ts>
    <user>U0CL0AS3V</user>
    <text>first one looks like this</text>
  </message>
  <message>
    <ts>2017-07-27T14:00:34.853405</ts>
    <user>U0CL0AS3V</user>
    <text>oh, sorry</text>
  </message>
  <message>
    <ts>2017-07-27T14:00:40.857366</ts>
    <user>U0CL0AS3V</user>
    <text>`type alias`</text>
  </message>
  <message>
    <ts>2017-07-27T14:00:47.861904</ts>
    <user>U0CL0AS3V</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-07-27T14:01:47.898708</ts>
    <user>U2GTQM83A</user>
    <text>And here is the thing. If I'm decoding `Project String String String` I don't need to embed anything. But if I'm decoding `Project User String String` I need to embed "created_by" and "owner".</text>
  </message>
  <message>
    <ts>2017-07-27T14:02:11.913649</ts>
    <user>U0CL0AS3V</user>
    <text>so if you refactor to this:

```
type ProjectStructure user company contact =
  ProjectStructure user company contact
    { id : String
    , code : String
    , name : String
    , description : String
    , type_ : ProjectType
    , startDate : Date
    , endDate : Maybe Date
    , budget : String
    , requiredFiles : List String
    , notes : String
    , company : company
    , owner : user
    , contacts : List (ProjectContact contact)
    , rates : List PositionRate
    , created_by : user
    , confidential : Bool
    }
```</text>
  </message>
  <message>
    <ts>2017-07-27T14:02:23.920880</ts>
    <user>U0CL0AS3V</user>
    <text>then you can pattern match on it</text>
  </message>
  <message>
    <ts>2017-07-27T14:03:17.952082</ts>
    <user>U2GTQM83A</user>
    <text>But pattern match like what? because the user itself may be a parameterised type.</text>
  </message>
  <message>
    <ts>2017-07-27T14:04:00.977383</ts>
    <user>U0CL0AS3V</user>
    <text>hm, fair point</text>
  </message>
  <message>
    <ts>2017-07-27T14:04:05.980745</ts>
    <user>U0CL0AS3V</user>
    <text>yeah I suppose that doesn't work either</text>
  </message>
  <message>
    <ts>2017-07-27T14:05:40.036165</ts>
    <user>U2GTQM83A</user>
    <text>The ideal solution would involve creating something like a `Decoder`. So that I say that an Http with `Decoder a` would need to have an `EmbedDecoder a`. This way I tie what is being decoded with what is being embedded. And then I need some function that could translate an `EmbedDecoder a` to a string.</text>
  </message>
  <message>
    <ts>2017-07-27T14:06:12.054145</ts>
    <user>U2GTQM83A</user>
    <text>And some way I could compose `EmbedDecoder a` to create a `EmbedDecoder (Project a)`</text>
  </message>
  <message>
    <ts>2017-07-27T14:07:35.101622</ts>
    <user>U0CL0AS3V</user>
    <text>okay, what about this? (in the status quo `type alias` version)

several functions, but using extensible records to avoid combinatorics:

for example:

```
{ a | owner : User String } -&amp;gt; String

{ a | owner : User () } -&amp;gt; String

{ a | contacts : List (ProjectContact ()) } -&amp;gt; String
```</text>
  </message>
  <message>
    <ts>2017-07-27T14:08:49.142933</ts>
    <user>U2GTQM83A</user>
    <text>Hmm.. I don't see how to use it.</text>
  </message>
  <message>
    <ts>2017-07-27T14:09:38.170840</ts>
    <user>U2GTQM83A</user>
    <text>There is another point also. At the time of the Http, I probably don't have a value of type `Book a`. I'm not trying to decode the value itself. I need a constraint on the type. Like a Decoder.</text>
  </message>
  <message>
    <ts>2017-07-27T14:09:39.171175</ts>
    <user>U0CL0AS3V</user>
    <text>`{ a | owner : User () } -&amp;gt; String` accepts a `ProjectStructure (User ()) company contact`</text>
  </message>
  <message>
    <ts>2017-07-27T14:10:12.189888</ts>
    <user>U0CL0AS3V</user>
    <text>because `ProjectStructure (User ()) company contact` is a record which has a field called `owner` of type `User ()`</text>
  </message>
  <message>
    <ts>2017-07-27T14:10:51.211562</ts>
    <user>U2GTQM83A</user>
    <text>I want to make sure that if I am making an Http request to my `book` endpoint requesting a `Book Author`, this http request must ask for the author to be embedded.</text>
  </message>
  <message>
    <ts>2017-07-27T14:12:43.274132</ts>
    <user>U0CL0AS3V</user>
    <text>I don't think it's (even theoretically) possible to be confident of that without tests :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-27T14:12:47.276098</ts>
    <user>U0CL0AS3V</user>
    <text>in any language</text>
  </message>
  <message>
    <ts>2017-07-27T14:13:33.302408</ts>
    <user>U0CL0AS3V</user>
    <text>like "the author is embedded" is business logic, which can be incorrect</text>
  </message>
  <message>
    <ts>2017-07-27T14:13:53.313999</ts>
    <user>U0CL0AS3V</user>
    <text>I'm not even sure how you'd use a theorem prover to check that</text>
  </message>
  <message>
    <ts>2017-07-27T14:14:06.320780</ts>
    <user>U2GTQM83A</user>
    <text>This is what I mean by author is embedded: the endpoint looks like this: `/books?embed=author`</text>
  </message>
  <message>
    <ts>2017-07-27T14:14:21.329724</ts>
    <user>U0CL0AS3V</user>
    <text>(I'm hardly an Agda/Coq/Idris expert though, so maybe it's possible and I don't know how to do it)</text>
  </message>
  <message>
    <ts>2017-07-27T14:14:28.333481</ts>
    <user>U2GTQM83A</user>
    <text>I have a function that translates a record with fields like `embeded` into a url.</text>
  </message>
  <message>
    <ts>2017-07-27T14:14:47.344355</ts>
    <user>U2GTQM83A</user>
    <text>`embeded` takes a list of strings.</text>
  </message>
  <message>
    <ts>2017-07-27T14:15:13.359541</ts>
    <user>U2GTQM83A</user>
    <text>I would like a function that given a `CustomDecoder a` could produce a list of strings.</text>
  </message>
  <message>
    <ts>2017-07-27T14:15:52.381461</ts>
    <user>U2GTQM83A</user>
    <text>I can do it for a non-parameterised type like this:
```
custom: CustomDecoder a -&amp;gt; String
custom a =
  ["some field"]
```</text>
  </message>
  <message>
    <ts>2017-07-27T14:16:26.401237</ts>
    <user>U0CL0AS3V</user>
    <text>&amp;gt; I would like a function that given a `CustomDecoder a` could produce a list of strings.

I don't think that's possible in Elm</text>
  </message>
  <message>
    <ts>2017-07-27T14:16:34.406053</ts>
    <user>U0CL0AS3V</user>
    <text>(well, a non-hardcoded list of strings)</text>
  </message>
  <message>
    <ts>2017-07-27T14:17:14.428530</ts>
    <user>U2GTQM83A</user>
    <text>But this has two problems:
 1 - It doesn't work with parameterised types
 2 - I would need to know which function to call for the type anyway because I cannot create generalised function that could pattern match on the type. Or be a type-class of some form..</text>
  </message>
  <message>
    <ts>2017-07-27T14:17:20.432586</ts>
    <user>U0CL0AS3V</user>
    <text>to be that general that would require runtime type reflection, which Elm intentionally doesn't support</text>
  </message>
  <message>
    <ts>2017-07-27T14:17:48.448230</ts>
    <user>U2GTQM83A</user>
    <text>toString is a function that takes anything and outputs an appropriate string.</text>
  </message>
  <message>
    <ts>2017-07-27T14:18:08.459261</ts>
    <user>U2GTQM83A</user>
    <text>I know we can't build functions like `toString`. But can we get close?</text>
  </message>
  <message>
    <ts>2017-07-27T14:18:55.486388</ts>
    <user>U0CL0AS3V</user>
    <text>no, by design :slightly_smiling_face: - also, the current design of `toString` led to bugs; it's moving to `Debug.toString` in 0.19 and being replaced by (if memory serves) `String.fromFloat` and `String.fromInt`</text>
  </message>
  <message>
    <ts>2017-07-27T14:19:23.502312</ts>
    <user>U0CL0AS3V</user>
    <text>(bugs like accidentally calling it on the wrong value and having it type-check anyway, thus leading to incorrect business logic)</text>
  </message>
  <message>
    <ts>2017-07-27T14:20:04.525616</ts>
    <user>U2GTQM83A</user>
    <text>hmm.. If I were to be naughty and use native code :smiling_imp:, does anything come to mind as for how I could with JS transform a `CustomEmbed MyType` into a string of my choice?</text>
  </message>
  <message>
    <ts>2017-07-27T14:20:56.557258</ts>
    <user>U2GTQM83A</user>
    <text>The idea is that if MyType has other types within it I would see that and call my custom decoder for each of them.</text>
  </message>
  <message>
    <ts>2017-07-27T14:22:09.599859</ts>
    <user>U0CL0AS3V</user>
    <text>sounds like you want TypeScript :wink:</text>
  </message>
  <message>
    <ts>2017-07-27T14:22:52.625326</ts>
    <user>U0CL0AS3V</user>
    <text>if it were me, I would do it this way: &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1501178855101622&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T14:23:36.651009</ts>
    <user>U0CL0AS3V</user>
    <text>if you want to introduce runtime exceptions for the sake of avoiding a few functions and/or fuzz tests, I would (in all seriousness) not bother with Elm and just go TypeScript or something</text>
  </message>
  <message>
    <ts>2017-07-27T14:23:47.657748</ts>
    <user>U0CL0AS3V</user>
    <text>nothing wrong with those preferences</text>
  </message>
  <message>
    <ts>2017-07-27T14:26:35.756242</ts>
    <user>U2GTQM83A</user>
    <text>Hahaha no thanks. My old company was going to do a project for a client in 3 months and 3  developers using php and JS in the front end. Before the project started they went bust. I started my own company and took the project by myself. Using Elm I was able to do it alone in 4 months.</text>
  </message>
  <message>
    <ts>2017-07-27T14:26:52.766293</ts>
    <user>U2GTQM83A</user>
    <text>Would definitely not have happened weren't for the time savings Elm allowed/</text>
  </message>
  <message>
    <ts>2017-07-27T14:27:07.775177</ts>
    <user>U0CL0AS3V</user>
    <text>fair enough!</text>
  </message>
  <message>
    <ts>2017-07-27T14:28:38.828135</ts>
    <user>U37HUSJ4R</user>
    <text>I am looking into building something with Twilio and elm, Twilio has a few js libs that make life easier</text>
  </message>
  <message>
    <ts>2017-07-27T14:28:40.829275</ts>
    <user>U37HUSJ4R</user>
    <text>for example</text>
  </message>
  <message>
    <ts>2017-07-27T14:28:41.829580</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;https://www.twilio.com/docs/api/taskrouter/worker-js#worker-activity-update&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T14:29:01.840899</ts>
    <user>U37HUSJ4R</user>
    <text>is there any way I could do stuff like this in elm and not have to use ports?</text>
  </message>
  <message>
    <ts>2017-07-27T14:29:36.861100</ts>
    <user>U37HUSJ4R</user>
    <text>I worry I’ll need to use lots of port for listening to different events</text>
  </message>
  <message>
    <ts>2017-07-27T14:31:07.914358</ts>
    <user>U37HUSJ4R</user>
    <text>also if anyone has built anything with twilio and elm I’d LOVE to chat</text>
  </message>
  <message>
    <ts>2017-07-27T14:34:28.030696</ts>
    <user>U2LAL86AY</user>
    <text>there is a solution with going native -&amp;gt; but how many ports do you have? It is rely that bad with ports? Can't you try at least to see how it goes? Because native packages can  introduce run-time errors - and are not so easy to use either.</text>
  </message>
  <message>
    <ts>2017-07-27T14:35:05.052653</ts>
    <user>U37HUSJ4R</user>
    <text>it’s not that port are that bad, just would rather keep more stuff elm side</text>
  </message>
  <message>
    <ts>2017-07-27T14:37:01.117333</ts>
    <user>U0CL0AS3V</user>
    <text>I'd say if you want to get up and running fastest, use ports; if you want something super reliable, gotta do it the hard way - scratch-write a 100% Elm interface to the Twilio API :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T14:37:47.142791</ts>
    <user>U0CL0AS3V</user>
    <text>(if it were me, and I wanted to use Twilio to build an application, I'd definitely start with ports - then maybe later if the project is going well and I want to make things nicer, tackle the bigger project of the Elm interface to Twilio API)</text>
  </message>
  <message>
    <ts>2017-07-27T14:39:36.203983</ts>
    <user>U37HUSJ4R</user>
    <text>Sounds sensible to me, a Twilio/elm interface would be dream land!</text>
  </message>
  <message>
    <ts>2017-07-27T14:39:49.211544</ts>
    <user>U37HUSJ4R</user>
    <text>thanks gentleman</text>
  </message>
  <message>
    <ts>2017-07-27T14:40:07.222394</ts>
    <user>U37HUSJ4R</user>
    <text>great talk at Elm europe by the way Richard</text>
  </message>
  <message>
    <ts>2017-07-27T14:42:31.304332</ts>
    <user>U37HUSJ4R</user>
    <text>&amp;gt; Would definitely not have happened weren’t for the time savings Elm allowed/</text>
  </message>
  <message>
    <ts>2017-07-27T14:42:50.314779</ts>
    <user>U37HUSJ4R</user>
    <text>&lt;@U2GTQM83A&gt; can you explain more about the time savings?</text>
  </message>
  <message>
    <ts>2017-07-27T14:44:19.364411</ts>
    <user>U2GTQM83A</user>
    <text>Basically, there was no debugging involved. I had my main types which were shared everywhere and each page was just an assembly of pre-existing stuff.</text>
  </message>
  <message>
    <ts>2017-07-27T14:44:48.381210</ts>
    <user>U2GTQM83A</user>
    <text>I was able to develop things very fast because all pages had the same components.</text>
  </message>
  <message>
    <ts>2017-07-27T14:45:31.405848</ts>
    <user>U2GTQM83A</user>
    <text>It is a business application, so there wasn't much UI craziness going on, just some form validation, date pickers and stuff.</text>
  </message>
  <message>
    <ts>2017-07-27T14:46:26.436867</ts>
    <user>U2GTQM83A</user>
    <text>Elm helped breaking down complex pages into very manageable chunks and allowed me to reuse code throughout.</text>
  </message>
  <message>
    <ts>2017-07-27T14:47:08.461158</ts>
    <user>U2GTQM83A</user>
    <text>In my previous company I remember I spent two weeks developing a widget in React, which I later developed in my free time in Elm in two days.</text>
  </message>
  <message>
    <ts>2017-07-27T14:47:33.475216</ts>
    <user>U2GTQM83A</user>
    <text>I was trying to demonstrate the value of Elm to them.</text>
  </message>
  <message>
    <ts>2017-07-27T14:47:52.485521</ts>
    <user>U2GTQM83A</user>
    <text>I remember it made quite an impact.</text>
  </message>
  <message>
    <ts>2017-07-27T14:59:42.892703</ts>
    <user>U1CE9DL9H</user>
    <text>is there a fix for making `number` a subset of `comparable` on the horizon. it's really annoying, as some functions cannot have a type annotation but are valid</text>
  </message>
  <message>
    <ts>2017-07-27T15:05:11.081031</ts>
    <user>U0JFGGZS6</user>
    <text>:point_up:  yes</text>
  </message>
  <message>
    <ts>2017-07-27T15:05:36.094923</ts>
    <user>U0JFGGZS6</user>
    <text>I mean, yes, I could use that too...</text>
  </message>
  <message>
    <ts>2017-07-27T15:06:02.108891</ts>
    <user>U1CE9DL9H</user>
    <text>seems that there is &lt;https://github.com/elm-lang/elm-compiler/commit/5fe9bb9602163927295a6b37a64fd47f982d502a&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T15:13:57.355821</ts>
    <user>U0H3A9XLN</user>
    <text>Well, lets be honest - "thinking" part is kinda technology independent. If you will do something first in Elm and then reimplement in in JavaScript it will probably take less time as well. </text>
  </message>
  <message>
    <ts>2017-07-27T15:15:32.404718</ts>
    <user>U0H3A9XLN</user>
    <text>I do not compare languages here, just trying to say that this fact does not prove any point</text>
  </message>
  <message>
    <ts>2017-07-27T15:15:50.413984</ts>
    <user>U2GTQM83A</user>
    <text>&lt;@U0H3A9XLN&gt; Yep that did contribute.</text>
  </message>
  <message>
    <ts>2017-07-27T15:18:01.480448</ts>
    <user>U0H3A9XLN</user>
    <text>And I am wondering when people start comparing Elm to TypeScript for example. Of course comparison to JavaScript gives more advantages, but more and more people are using typed supersets nowadays.</text>
  </message>
  <message>
    <ts>2017-07-27T15:19:26.523814</ts>
    <user>U0H3A9XLN</user>
    <text>For example while doing TypeScript for almost a year I haven't had any single runtime exception :)</text>
  </message>
  <message>
    <ts>2017-07-27T15:21:58.603007</ts>
    <user>U0H3A9XLN</user>
    <text>I still like Elm more. And I believe taking higher targets for comparison gives a good motivation for moving forward :)</text>
  </message>
  <message>
    <ts>2017-07-27T15:50:35.497025</ts>
    <user>U0CL0AS3V</user>
    <text>:heart: thanks!</text>
  </message>
  <message>
    <ts>2017-07-27T16:14:09.243998</ts>
    <user>U2SR9DL7Q</user>
    <text>Can anyone help with a bit of restructuring advice? Splitting my project into submodules currently. I'm delegating my main views to those of the submodule:
```
viewContent : Model -&amp;gt; Html Msg
viewContent model =
    case model.route of
        ...

        PortfolioRoute -&amp;gt;
            Dominoes.view model.dominoes
``` 
There's a naming conflict where the view functions in _Dominoes.elm_ return type `Html Msg` but Dominoes.elm has it's own Msg type defined. I'm thinking I should change the name of that message type to like, `DominoesMsg` or something, but I think my bigger confusion is the whole use of `Msg` vs `msg` which I thought I understood, but perhaps I don't.</text>
  </message>
  <message>
    <ts>2017-07-27T16:16:09.306684</ts>
    <user>U2GTQM83A</user>
    <text>Hey &lt;@U0CL0AS3V&gt; and &lt;@U23SA861Y&gt; , I did it! Solved the puzzle.

This is the requirement: I need to make sure that if I'm decoding something, my request must ask for it to be embedded, tying the embedding on the decoder type.
For that we would need:
    -  Have the API call be something like this `apiRequest : Decoder a -&amp;gt; Embedding a -&amp;gt; Cmd (Webdata a)`
    -  Have a `Embedding a -&amp;gt; List String` function that would be polymophic enough to take any `a` and return an appropriate list of strings
    -  Be able to compose our embeddings so that we could have a function like this `func : Decoder author -&amp;gt; Embedding (Book author)`

We faced the following problems:
    -  We can't create a function that will accept a class of allowed types to transform them to a list of strings
    -  We do not have a value of the type we are embedding at the time of the request.

Now to the code! 

Here is our magic type

``` 
type Embedding a
    = NoEmbedding (Maybe a)
    | Embedding (List String)
```

With this type I can create an `Embedding Anything` that doesn't need to contain `Anything` at all. 
It can just contain a list with the fields that must be embedded for that type.
Or, if it is a string, it can say that there is no Embedding. And it can create an
`Embedding Anything` by saying `NoEmbedding Nothing`.

You can see a compiling and working example here: &lt;https://ellie-app.com/3RJBsCTwWgVa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T16:18:35.382538</ts>
    <user>U2GTQM83A</user>
    <text>With this I was able to write our desired api call function like this:
```
someApiRequest : Decoder a -&amp;gt; Embedding a -&amp;gt; Http.Request a
someApiRequest decoder embedding =
    let
        endpoint =
            "/books/?embed=" ++ (List.foldr (++) "" &amp;lt;| embeddingToList embedding)
    in
        Http.get endpoint decoder
```</text>
  </message>
  <message>
    <ts>2017-07-27T16:21:18.465539</ts>
    <user>U2GTQM83A</user>
    <text>The drawback is that because there is no type relation between `Embedding a` and how `a` actually looks like, `Embedding Author` could look like anything and be defined many times in different ways. To avoid that I will have to make sure to only define one function to generate each `Embedding`.</text>
  </message>
  <message>
    <ts>2017-07-27T16:21:32.472810</ts>
    <user>U0JFGGZS6</user>
    <text>Yes. If you have a top-level `DominoesMsg Dominoes.Msg`, then you can do this:</text>
  </message>
  <message>
    <ts>2017-07-27T16:21:52.482930</ts>
    <user>U0JFGGZS6</user>
    <text>`Dominoes.view model.dominoes |&amp;gt; Html.map DominoesMsg`</text>
  </message>
  <message>
    <ts>2017-07-27T16:22:50.513138</ts>
    <user>U2SR9DL7Q</user>
    <text>Html has a map...</text>
  </message>
  <message>
    <ts>2017-07-27T16:23:35.536880</ts>
    <user>U0JFGGZS6</user>
    <text>alternately, you can do the mapping in `Dominoes.view` by passing in the mapping:
`Dominoes.view (\submsg -&amp;gt; DominoesMsg submsg) model.dominoes`</text>
  </message>
  <message>
    <ts>2017-07-27T16:26:10.617661</ts>
    <user>U2SR9DL7Q</user>
    <text>Sorry, taking time to respond, but I need to make sure I understand. So I can define `DominoesMsg` in the top level of my Main as The Msg type in dominoes, and pass it to my dominoes view</text>
  </message>
  <message>
    <ts>2017-07-27T16:26:19.622032</ts>
    <user>U0JFGGZS6</user>
    <text>but that's often used in 'reusable' sub-views which have generic `Html msg` return types, and are intended to be called from different 'parent' call sites.</text>
  </message>
  <message>
    <ts>2017-07-27T16:27:13.650767</ts>
    <user>U2SR9DL7Q</user>
    <text>but i think my issue is that the compiler is saying that my main view function is emitting  a _Html Msg_ in one  and a _Html Dominoes.Msg_ in another</text>
  </message>
  <message>
    <ts>2017-07-27T16:27:58.674440</ts>
    <user>U0JFGGZS6</user>
    <text>that's what Html.map helps with. It wraps `Dominoes.Msg` in `Msg`.</text>
  </message>
  <message>
    <ts>2017-07-27T16:29:12.714466</ts>
    <user>U2SR9DL7Q</user>
    <text>okay... looking at the type signature in the docs and its starting to click</text>
  </message>
  <message>
    <ts>2017-07-27T16:30:25.754473</ts>
    <user>U2SR9DL7Q</user>
    <text>I think this is similar to what the Mdl library does</text>
  </message>
  <message>
    <ts>2017-07-27T16:31:19.783685</ts>
    <user>U0JFGGZS6</user>
    <text>This pattern used to be considered the hallmark of The Elm Architecture. It still is really, but is de-emphasized in the docs, because of causing much confusion for people coming from react/redux components.</text>
  </message>
  <message>
    <ts>2017-07-27T16:31:33.791235</ts>
    <user>U2SR9DL7Q</user>
    <text>that toplevel defintion ... is that just `type DominoesMsg = Dominoes.Msg` ?</text>
  </message>
  <message>
    <ts>2017-07-27T16:32:06.809178</ts>
    <user>U0JFGGZS6</user>
    <text>no, `type Msg = DominoesMsg Dominoes.Msg | ...`</text>
  </message>
  <message>
    <ts>2017-07-27T16:32:10.811600</ts>
    <user>U2SR9DL7Q</user>
    <text>Yeah, in the docs it wards away from Html.map, but this seems like the obvious way to go about it</text>
  </message>
  <message>
    <ts>2017-07-27T16:32:48.831701</ts>
    <user>U0JFGGZS6</user>
    <text>unfortunately this de-emphasis means people have to rediscover it on their own a lot of times...</text>
  </message>
  <message>
    <ts>2017-07-27T16:33:02.839464</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0JFGGZS6&gt; I realized a moment after I typed...</text>
  </message>
  <message>
    <ts>2017-07-27T16:33:02.839518</ts>
    <user>U0JFGGZS6</user>
    <text>there's also related `Cmd.map` and `Sub.map`</text>
  </message>
  <message>
    <ts>2017-07-27T16:33:31.854896</ts>
    <user>U635238TG</user>
    <text>i just completed the pragmatic studio tutorial and i think we just did something similar with cleaning up the main code into some submodules.</text>
  </message>
  <message>
    <ts>2017-07-27T16:33:34.856460</ts>
    <user>U2SR9DL7Q</user>
    <text>Cmd.map I use. Subs are still a bit mysterious to me.</text>
  </message>
  <message>
    <ts>2017-07-27T16:33:56.868011</ts>
    <user>U635238TG</user>
    <text>but it had me changing everything from Msg to msg and fixing problems that come up with that change</text>
  </message>
  <message>
    <ts>2017-07-27T16:34:32.886020</ts>
    <user>U2SR9DL7Q</user>
    <text>Yeah... I've done this big refactor, and all that's left is sorting out the view and the updates.</text>
  </message>
  <message>
    <ts>2017-07-27T16:34:46.893206</ts>
    <user>U0JFGGZS6</user>
    <text>yeah. it's like if you have multiple subscriptions that need routing to sub-modules, same basic idea</text>
  </message>
  <message>
    <ts>2017-07-27T16:35:27.914523</ts>
    <user>U635238TG</user>
    <text>it was cool seeing the compiler helping us along the whole time</text>
  </message>
  <message>
    <ts>2017-07-27T16:37:55.990498</ts>
    <user>U2SR9DL7Q</user>
    <text>I'm not unconvinced the compiler is a tiny node of evan's brain living detached from the main host, yet connected through mysterious forces.</text>
  </message>
  <message>
    <ts>2017-07-27T16:38:52.020297</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0JFGGZS6&gt; Html.map totally worked, and makes sense.</text>
  </message>
  <message>
    <ts>2017-07-27T16:39:10.029133</ts>
    <user>U2SR9DL7Q</user>
    <text>Now for my true fear... the update.</text>
  </message>
  <message>
    <ts>2017-07-27T16:41:09.090626</ts>
    <user>U2SR9DL7Q</user>
    <text>update says I need to account for DominoesMsg...</text>
  </message>
  <message>
    <ts>2017-07-27T16:48:01.300725</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0JFGGZS6&gt; err, last question, but I think it's going to work similarly. I'm in updates now where I have
```
ChangeLocation pathname -&amp;gt;
            ( model, Navigation.newUrl pathname )

        DominoesMsg msg -&amp;gt;
            let
                ( domiModel, domiCmd ) = Dominoes.update msg model.dominoes
            in
                ( { model | dominoes = domiModel }, )
```
Again we have a case where I'm returning the Dominoes versions of model and Msg as opposed to the main versions. If I'm following right, I need a mapping function to take me from `( Dominoes.Model, Dominoes.Cmd )` to `( Model, Cmd )`. Not certain about the command part but am I on the right track?</text>
  </message>
  <message>
    <ts>2017-07-27T16:53:39.476897</ts>
    <user>U1NKH2HDX</user>
    <text>Hi folks. Is there a jsfiddle equivalent for Elm ?</text>
  </message>
  <message>
    <ts>2017-07-27T16:54:00.488144</ts>
    <user>U1NKH2HDX</user>
    <text>I’d like to show stuff to somebody but I don’t want him to install reactor etc</text>
  </message>
  <message>
    <ts>2017-07-27T16:54:36.506811</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;http://ellie-app.com&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T16:54:45.511425</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U1NKH2HDX&gt; :point_up:</text>
  </message>
  <message>
    <ts>2017-07-27T16:54:53.515820</ts>
    <user>U0CL0AS3V</user>
    <text>it's awesome!</text>
  </message>
  <message>
    <ts>2017-07-27T16:54:57.518095</ts>
    <user>U1NKH2HDX</user>
    <text>yeah !</text>
  </message>
  <message>
    <ts>2017-07-27T16:55:06.523069</ts>
    <user>U1NKH2HDX</user>
    <text>I had forgotten the name !! thx a lot !</text>
  </message>
  <message>
    <ts>2017-07-27T16:55:32.536818</ts>
    <user>U0JFGGZS6</user>
    <text>Yep. Or just a `let` to grab that pair and merge them in. This is where `Cmd.map` comes into play.</text>
  </message>
  <message>
    <ts>2017-07-27T16:57:29.598417</ts>
    <user>U1NKH2HDX</user>
    <text>does it work with Html.program ?</text>
  </message>
  <message>
    <ts>2017-07-27T16:57:45.606128</ts>
    <user>U1NKH2HDX</user>
    <text>I have a single .elm file that works in reactor</text>
  </message>
  <message>
    <ts>2017-07-27T16:57:54.611177</ts>
    <user>U1NKH2HDX</user>
    <text>but not in ellie-app</text>
  </message>
  <message>
    <ts>2017-07-27T16:58:22.625299</ts>
    <user>U1NKH2HDX</user>
    <text>`Cannot read property ‘fullscreen’ of undefined`</text>
  </message>
  <message>
    <ts>2017-07-27T16:58:40.634191</ts>
    <user>U1NKH2HDX</user>
    <text>aaah</text>
  </message>
  <message>
    <ts>2017-07-27T16:58:43.635983</ts>
    <user>U1NKH2HDX</user>
    <text>module name my bad sorry</text>
  </message>
  <message>
    <ts>2017-07-27T16:59:43.666366</ts>
    <user>U0CL0AS3V</user>
    <text>there's also an &lt;#C408UCWMN|ellie&gt; channel</text>
  </message>
  <message>
    <ts>2017-07-27T16:59:53.671418</ts>
    <user>U5WS7CJLV</user>
    <text>interesting what the docs say about Html.map: "This should not come in handy too often. Definitely read this before deciding if this is what you want."</text>
  </message>
  <message>
    <ts>2017-07-27T17:00:06.678937</ts>
    <user>U5WS7CJLV</user>
    <text>but you cannot argue very hard against something that solves your problem</text>
  </message>
  <message>
    <ts>2017-07-27T17:00:10.681643</ts>
    <user>U5WS7CJLV</user>
    <text>if something works, it works</text>
  </message>
  <message>
    <ts>2017-07-27T17:00:19.686569</ts>
    <user>U2SR9DL7Q</user>
    <text>Where or how would I define the function that goes `(a -&amp;gt; Cmd a)` for `Cmd.Map`?</text>
  </message>
  <message>
    <ts>2017-07-27T17:01:21.719636</ts>
    <user>U2SR9DL7Q</user>
    <text>I know the second argument is my _domiCmd_ (I hate that name but I'll change it after). But how would one define the first?</text>
  </message>
  <message>
    <ts>2017-07-27T17:02:17.748409</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U5WS7CJLV&gt;  as far as i understand, this is a fairly common setup for elm projects so yeah, it confused me as well.</text>
  </message>
  <message>
    <ts>2017-07-27T17:04:30.814851</ts>
    <user>U5WS7CJLV</user>
    <text>If I've understood, seems you'd need some function that returns Cmds, but the only one I know of is Http.send</text>
  </message>
  <message>
    <ts>2017-07-27T17:06:26.871667</ts>
    <user>U0JFGGZS6</user>
    <text>Cmd.map is `(a -&amp;gt; msg) -&amp;gt; Cmd a -&amp;gt; Cmd msg`</text>
  </message>
  <message>
    <ts>2017-07-27T17:07:00.888027</ts>
    <user>U5WS7CJLV</user>
    <text>right, so you need a Cmd, yes?  I don't think I've encountered anything that will return a Cmd.  Other than Http.send.</text>
  </message>
  <message>
    <ts>2017-07-27T17:07:09.891956</ts>
    <user>U0JFGGZS6</user>
    <text>so you have the `Cmd a`, that's your sub-Cmd from `Dominoes`. So you just need the `a -&amp;gt; msg`, right?</text>
  </message>
  <message>
    <ts>2017-07-27T17:08:19.924716</ts>
    <user>U2SR9DL7Q</user>
    <text>I think i got it</text>
  </message>
  <message>
    <ts>2017-07-27T17:08:26.927889</ts>
    <user>U5WS7CJLV</user>
    <text>if ericgj is on track then you probly just need one of your Msg constructors</text>
  </message>
  <message>
    <ts>2017-07-27T17:08:59.943032</ts>
    <user>U2SR9DL7Q</user>
    <text>```
DominoesMsg msg -&amp;gt;
            let
                ( domiModel, domiCmd ) =
                    Dominoes.update msg model.dominoes
            in
            ( { model | dominoes = domiModel }, Cmd.map DominoesMsg domiCmd )
```
Maybe I didn't. This compiles but it shouldn't.</text>
  </message>
  <message>
    <ts>2017-07-27T17:10:15.978437</ts>
    <user>U0JFGGZS6</user>
    <text>why do you say it shouldn't?</text>
  </message>
  <message>
    <ts>2017-07-27T17:10:44.991999</ts>
    <user>U2SR9DL7Q</user>
    <text>map _does_ need a message constructor... but we're _in_ DominoesMsg</text>
  </message>
  <message>
    <ts>2017-07-27T17:11:25.011194</ts>
    <user>U0JFGGZS6</user>
    <text>right. when it goes through the next update cycle, it ends up right here in this branch again</text>
  </message>
  <message>
    <ts>2017-07-27T17:11:47.020697</ts>
    <user>U5WS7CJLV</user>
    <text>*nods even though he doesn't understand.  Scrolls back up to review the code*</text>
  </message>
  <message>
    <ts>2017-07-27T17:13:52.077623</ts>
    <user>U0JFGGZS6</user>
    <text>but that's ok because the whole point of this branch is just to delegate messages back down to `Dominoes.update`.</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:38.098220</ts>
    <user>U2SR9DL7Q</user>
    <text>Heh. This... okay. step 1: message comes into DominoesMsg. It is a Dominoes.Msg. Step two.. evaluated in let block. step 3, model is updated. step 4... Cmd.map ... does a thing... and the result is a regular command.</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:48.102547</ts>
    <user>U2SR9DL7Q</user>
    <text>I may need to look at the source docs</text>
  </message>
  <message>
    <ts>2017-07-27T17:15:37.125049</ts>
    <user>U0JFGGZS6</user>
    <text>A command whose 'callback' is to update the Dominoes state again</text>
  </message>
  <message>
    <ts>2017-07-27T17:15:44.127848</ts>
    <user>U5WS7CJLV</user>
    <text>all roads lead back to the update function</text>
  </message>
  <message>
    <ts>2017-07-27T17:16:03.136078</ts>
    <user>U5WS7CJLV</user>
    <text>that may not help, but it's something I realized recently in one of those epiphany moments</text>
  </message>
  <message>
    <ts>2017-07-27T17:16:12.140157</ts>
    <user>U5WS7CJLV</user>
    <text>all commands are just trying to make messages for the update function</text>
  </message>
  <message>
    <ts>2017-07-27T17:16:18.143149</ts>
    <user>U5WS7CJLV</user>
    <text>all hail the update function!</text>
  </message>
  <message>
    <ts>2017-07-27T17:16:19.143441</ts>
    <user>U0JFGGZS6</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-27T17:16:38.151906</ts>
    <user>U0JFGGZS6</user>
    <text>messages with payloads from outer space :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T17:16:46.155573</ts>
    <user>U5WS7CJLV</user>
    <text>spaaaaaaace :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T17:17:03.162691</ts>
    <user>U0JFGGZS6</user>
    <text>rather than from user input back down on earth</text>
  </message>
  <message>
    <ts>2017-07-27T17:17:20.170305</ts>
    <user>U5WS7CJLV</user>
    <text>*nods*</text>
  </message>
  <message>
    <ts>2017-07-27T17:18:12.193065</ts>
    <user>U2SR9DL7Q</user>
    <text>I'm really frustrapointed, but the *click moment is not happening.</text>
  </message>
  <message>
    <ts>2017-07-27T17:19:00.214414</ts>
    <user>U5WS7CJLV</user>
    <text>yeah, it will take some time</text>
  </message>
  <message>
    <ts>2017-07-27T17:19:08.217793</ts>
    <user>U5WS7CJLV</user>
    <text>I stared at Http.send for 5 minutes</text>
  </message>
  <message>
    <ts>2017-07-27T17:19:13.219811</ts>
    <user>U5WS7CJLV</user>
    <text>2 voices in my head</text>
  </message>
  <message>
    <ts>2017-07-27T17:19:14.220632</ts>
    <user>U2SR9DL7Q</user>
    <text>I guess it's because I don't really know what commands _are_. I do what they do, but not how they do it.</text>
  </message>
  <message>
    <ts>2017-07-27T17:19:28.227141</ts>
    <user>U5WS7CJLV</user>
    <text>one saying "this sends a web request"</text>
  </message>
  <message>
    <ts>2017-07-27T17:19:42.232884</ts>
    <user>U5WS7CJLV</user>
    <text>and another saying, "No, it returns a Cmd!"</text>
  </message>
  <message>
    <ts>2017-07-27T17:20:29.254940</ts>
    <user>U5WS7CJLV</user>
    <text>Elm takes concepts you are familiar with and maps them into Elmspace, but everything looks weird at first in Elmspace</text>
  </message>
  <message>
    <ts>2017-07-27T17:21:04.270467</ts>
    <user>U5WS7CJLV</user>
    <text>have you read the Elm guide?</text>
  </message>
  <message>
    <ts>2017-07-27T17:21:04.270643</ts>
    <user>U2SR9DL7Q</user>
    <text>Actually, this is fine. Or at least, it's not any weirder than Cmd.none I suppose.</text>
  </message>
  <message>
    <ts>2017-07-27T17:21:25.279834</ts>
    <user>U5WS7CJLV</user>
    <text>Elm guide explains it as a Cmd tells the "Elm runtime" to do something</text>
  </message>
  <message>
    <ts>2017-07-27T17:21:58.294176</ts>
    <user>U5WS7CJLV</user>
    <text>you don't actually make web requests.  You describe what your request looks like in Elmspace and "the runtime" is the one that actually gets its hands dirty</text>
  </message>
  <message>
    <ts>2017-07-27T17:22:06.297888</ts>
    <user>U5WS7CJLV</user>
    <text>just like you don't ever actually touch the DOM in Elm</text>
  </message>
  <message>
    <ts>2017-07-27T17:22:16.302443</ts>
    <user>U2SR9DL7Q</user>
    <text>Yeah, i stopped freaking out once I put it in the perspective of 'cmds get things for update functions'</text>
  </message>
  <message>
    <ts>2017-07-27T17:24:41.366679</ts>
    <user>U5WS7CJLV</user>
    <text>there any known issues with WebSocket?</text>
  </message>
  <message>
    <ts>2017-07-27T17:25:15.381692</ts>
    <user>U5WS7CJLV</user>
    <text>I think I write a decoder that secretly exploded Elm (or something), and it manifest itself as a WebSocket that wasn't getting any messages.</text>
  </message>
  <message>
    <ts>2017-07-27T17:31:03.532451</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U0JFGGZS6&gt; &lt;@U5WS7CJLV&gt; it compiles! it works! sweet success! thanks so much.</text>
  </message>
  <message>
    <ts>2017-07-27T17:31:24.541927</ts>
    <user>U2SR9DL7Q</user>
    <text>about to commit the heck outta this bad boy.</text>
  </message>
  <message>
    <ts>2017-07-27T17:33:10.587578</ts>
    <user>U5WS7CJLV</user>
    <text>nope, but I've yet to touch the debugger.</text>
  </message>
  <message>
    <ts>2017-07-27T17:35:02.635972</ts>
    <user>U5WS7CJLV</user>
    <text>twas all you, fella!  I am in your same boat.  Trying to force my brain to think in Elm.  It is a constant battle.</text>
  </message>
  <message>
    <ts>2017-07-27T17:36:54.683795</ts>
    <user>U5WS7CJLV</user>
    <text>...and that is one fun thing about Elm.  For me anyways.  Once I've satisfied the compiler I have a high level of confidence my code will do exactly what I want.</text>
  </message>
  <message>
    <ts>2017-07-27T17:37:09.690411</ts>
    <user>U2SR9DL7Q</user>
    <text>programming makes me feel very clever... when everything works and nothing is broken. So... for about 5 mins a day. The rest... I am but an inquisitive fool.</text>
  </message>
  <message>
    <ts>2017-07-27T17:39:08.740056</ts>
    <user>U0JFGGZS6</user>
    <text>haha</text>
  </message>
  <message>
    <ts>2017-07-27T17:39:22.746147</ts>
    <user>U0JFGGZS6</user>
    <text>glad you figured it out, I'd stepped out for awhile</text>
  </message>
  <message>
    <ts>2017-07-27T17:40:07.764829</ts>
    <user>U0JFGGZS6</user>
    <text>I know the feeling of being a fool most of the time very well..</text>
  </message>
  <message>
    <ts>2017-07-27T17:43:20.842226</ts>
    <user>U2LAL86AY</user>
    <text>what character you are supposed to get instead of that thing:smile:?</text>
  </message>
  <message>
    <ts>2017-07-27T17:49:44.993857</ts>
    <user>U2SR9DL7Q</user>
    <text>anyone ever made a circular zipper before?</text>
  </message>
  <message>
    <ts>2017-07-27T17:50:55.021813</ts>
    <user>U2BCXMGKW</user>
    <text>I know there's this one: &lt;http://package.elm-lang.org/packages/maorleger/elm-infinite-zipper/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T17:52:15.052136</ts>
    <user>U6D1E91QV</user>
    <text>is it a bad idea to use routes for navigation, changing state?</text>
  </message>
  <message>
    <ts>2017-07-27T17:52:44.063565</ts>
    <user>U6D1E91QV</user>
    <text>as in using a `a [ href &amp;lt;| routeToString Route.Foo ] ]` instead of `a [ onClick LoadFoo ] []`</text>
  </message>
  <message>
    <ts>2017-07-27T17:52:52.066654</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2BCXMGKW&gt; cool. gonna look through the source docs</text>
  </message>
  <message>
    <ts>2017-07-27T18:02:22.290853</ts>
    <user>U2H92KKEY</user>
    <text>&lt;@U2LAL86AY&gt; Some + and - symbols for expansion and what not</text>
  </message>
  <message>
    <ts>2017-07-27T18:02:29.293380</ts>
    <user>U2H92KKEY</user>
    <text>If I remember correctly</text>
  </message>
  <message>
    <ts>2017-07-27T18:14:20.537900</ts>
    <user>U236M9FH9</user>
    <text>&lt;@U6D1E91QV&gt; Seems like that'd cause your app to re-init after every click... I use href + onClick w/ default prevented, so users can still middle click to open in a new tab</text>
  </message>
  <message>
    <ts>2017-07-27T18:37:24.972393</ts>
    <user>U2LAL86AY</user>
    <text>my guess it's browser related. Copy the `+` or whatever char is supposed to be. form somwere else - 

And then enter in developer tools -&amp;gt;  change it there to appear somewhere on the page. 

All this to see if is rendered as `+` or as something else. 

it's supposed to be a `small triangle`.</text>
  </message>
  <message>
    <ts>2017-07-27T18:37:43.978208</ts>
    <user>U2LAL86AY</user>
    <text>yes, my debugger has a small triangle</text>
  </message>
  <message>
    <ts>2017-07-27T19:36:16.935015</ts>
    <user>U17R26VR8</user>
    <text>how do i decode two or more fields into a composite type using elm.decode.pipeline, ie:
```
JDP.decode SomeCompositeType
|&amp;gt; required "field1" JD.string
|&amp;gt; required "field2" JD.string
|&amp;gt; JD.map SomeCompositeType

type SomeCompositeType = SomeCompositeType String String
```</text>
  </message>
  <message>
    <ts>2017-07-27T19:37:10.948025</ts>
    <user>U23SA861Y</user>
    <text>that would be a map2</text>
  </message>
  <message>
    <ts>2017-07-27T19:38:06.961175</ts>
    <user>U23SA861Y</user>
    <text>hmm but with the pipelines</text>
  </message>
  <message>
    <ts>2017-07-27T19:38:16.963617</ts>
    <user>U17R26VR8</user>
    <text>i'm using NRI's decode pipeline and can't see how to ... yes... use it in the pipeline</text>
  </message>
  <message>
    <ts>2017-07-27T19:39:54.986413</ts>
    <user>U23SA861Y</user>
    <text>umm if I'm reading this right you would remove that bottom element of the pipe</text>
  </message>
  <message>
    <ts>2017-07-27T19:40:11.990619</ts>
    <user>U23SA861Y</user>
    <text>```
type SomeCompositeType = SomeCompositeType String String

JDP.decode SomeCompositeType
  |&amp;gt; required "field1" JD.string
  |&amp;gt; required "field2" JD.string
```</text>
  </message>
  <message>
    <ts>2017-07-27T19:41:12.005070</ts>
    <user>U17R26VR8</user>
    <text>that's to put the type tag so it returns SomeCompositeTye</text>
  </message>
  <message>
    <ts>2017-07-27T19:41:26.008340</ts>
    <user>U23SA861Y</user>
    <text>it does that already</text>
  </message>
  <message>
    <ts>2017-07-27T19:41:34.010251</ts>
    <user>U17R26VR8</user>
    <text>it looks like a custom field is what i'm looking for?
&lt;http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/3.0.0/Json-Decode-Pipeline#custom&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T19:41:36.010844</ts>
    <user>U23SA861Y</user>
    <text>if I'm reading this correctly</text>
  </message>
  <message>
    <ts>2017-07-27T19:42:13.019250</ts>
    <user>U17R26VR8</user>
    <text>```
userDecoder : Decoder User
userDecoder =
  decode User
    |&amp;gt; required "id" int
    |&amp;gt; custom (map2 ...)
    |&amp;gt; required "email" string
```</text>
  </message>
  <message>
    <ts>2017-07-27T19:42:54.028882</ts>
    <user>U23SA861Y</user>
    <text>no, you have the same problem as decoding that user type</text>
  </message>
  <message>
    <ts>2017-07-27T19:43:24.035936</ts>
    <user>U23SA861Y</user>
    <text>`User` if a function of the type `(Int -&amp;gt; Maybe String -&amp;gt; String -&amp;gt; Float -&amp;gt; User)`</text>
  </message>
  <message>
    <ts>2017-07-27T19:44:01.044578</ts>
    <user>U23SA861Y</user>
    <text>each stage of the pipeline is applying one of the parameters until you get your final user</text>
  </message>
  <message>
    <ts>2017-07-27T19:44:50.056210</ts>
    <user>U23SA861Y</user>
    <text>in your case `SomeCompositeType` is a function of the form `String -&amp;gt; String -&amp;gt; SomeCompositeType`</text>
  </message>
  <message>
    <ts>2017-07-27T19:45:13.061872</ts>
    <user>U17R26VR8</user>
    <text>so really, should i have a intemediate type alias:</text>
  </message>
  <message>
    <ts>2017-07-27T19:45:52.071139</ts>
    <user>U23SA861Y</user>
    <text>did you try what I typed before</text>
  </message>
  <message>
    <ts>2017-07-27T19:45:58.072479</ts>
    <user>U17R26VR8</user>
    <text>```
type alias Intermediate = { String, String }

decode ( Intermediate -&amp;gt; SomeCompositeType )
|&amp;gt; ...
|&amp;gt; JD.map intermediateToSomeCompositeType
```</text>
  </message>
  <message>
    <ts>2017-07-27T19:46:28.079697</ts>
    <user>U23SA861Y</user>
    <text>you don't need that function, you have it already. It's called `SomeCompositeType`</text>
  </message>
  <message>
    <ts>2017-07-27T19:46:54.085627</ts>
    <user>U23SA861Y</user>
    <text>when you declare a type like `type Foo = Foo Int` you create both a type called `Foo` and a function `Foo: Int -&amp;gt; Foo`</text>
  </message>
  <message>
    <ts>2017-07-27T19:47:32.094576</ts>
    <user>U23SA861Y</user>
    <text>it's more clear if you do something like `type IntOrString = SomeInt Int | SomeString String`</text>
  </message>
  <message>
    <ts>2017-07-27T19:48:04.102166</ts>
    <user>U23SA861Y</user>
    <text>which defines the type `IntOrString` as well as the functions `SomeInt : Int -&amp;gt; IntOrString` and `SomeString: String -&amp;gt; IntOrString`</text>
  </message>
  <message>
    <ts>2017-07-27T19:48:05.102332</ts>
    <user>U17R26VR8</user>
    <text>so if my user is 
```
(Int -&amp;gt; SomeCompositeType -&amp;gt; String -&amp;gt; User)
```

how should my decoder look?</text>
  </message>
  <message>
    <ts>2017-07-27T19:49:27.121572</ts>
    <user>U23SA861Y</user>
    <text>what does the underlying json look like</text>
  </message>
  <message>
    <ts>2017-07-27T19:50:04.130248</ts>
    <user>U17R26VR8</user>
    <text>{ id, type, otherfield }, the composite type is made of id and type, wrapped in a record with otherfield</text>
  </message>
  <message>
    <ts>2017-07-27T19:50:40.138782</ts>
    <user>U17R26VR8</user>
    <text>it currently decodes into a three field record, but i'm trying to combine two of them</text>
  </message>
  <message>
    <ts>2017-07-27T19:52:10.159498</ts>
    <user>U23SA861Y</user>
    <text>in that case, yes you could use the custom type or create a lambda to capture the full construction</text>
  </message>
  <message>
    <ts>2017-07-27T19:52:32.164590</ts>
    <user>U23SA861Y</user>
    <text>lambda / regular function</text>
  </message>
  <message>
    <ts>2017-07-27T19:52:53.169353</ts>
    <user>U17R26VR8</user>
    <text>ok, i'll give that a go, thanks</text>
  </message>
  <message>
    <ts>2017-07-27T20:40:35.781671</ts>
    <user>U17R26VR8</user>
    <text>so i ended up doing this:
```
type alias User = {
  id : UserId,
  address: String
}

type UserId = UserId String String -- firstname lastname

decodeUser: JD.Decoder User
decodeUser = 
  JDP.decode toUser
  |&amp;gt; JDP.required "firstname" JD.string
  |&amp;gt; JDP.required "lastname" JD.string
  |&amp;gt; JDP.required "address" JD.string

toUser: String -&amp;gt; String -&amp;gt; String -&amp;gt; User
toUser first last addr = { id = UserID first last, address = addr }
```

&lt;@U23SA861Y&gt; fyi, seems to work ok, too many other things broken to be sure atm but your reminder of the tag constructor and how the pipeline takes each field *in order* helped alot</text>
  </message>
  <message>
    <ts>2017-07-27T20:41:31.792594</ts>
    <user>U23SA861Y</user>
    <text>looks good</text>
  </message>
  <message>
    <ts>2017-07-27T23:06:01.411293</ts>
    <user>U1D5GU32R</user>
    <text>So I was watching Douglas Crockford’s talk “The better parts” (&lt;https://goo.gl/X7oe27&gt;) and he was talking about the next great language. Obviously my first thought when he said it should be error free was, “Hey that could be Elm!”</text>
  </message>
  <message>
    <ts>2017-07-27T23:06:38.417275</ts>
    <user>U1D5GU32R</user>
    <text>The problem is, Elm compiles to Javascript so it will never really replace JavaScript</text>
  </message>
  <message>
    <ts>2017-07-27T23:07:20.423851</ts>
    <user>U1D5GU32R</user>
    <text>Is there any talk about creating pure Elm applications like an Elm browser or an Elm Electron-type-thing?</text>
  </message>
  <message>
    <ts>2017-07-27T23:08:39.436747</ts>
    <user>U1D5GU32R</user>
    <text>^ &lt;@U13H7FNDQ&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T23:12:17.472710</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U1D5GU32R&gt; &lt;https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T23:39:48.731644</ts>
    <user>U1D5GU32R</user>
    <text>&lt;@U153UK3FA&gt; I watched that awesome video, thanks! Was that supposed to somehow answer my question?</text>
  </message>
  <message>
    <ts>2017-07-27T23:40:39.739878</ts>
    <user>U1D5GU32R</user>
    <text>Are you saying that Elm will somehow run on asm.js?</text>
  </message>
  <message>
    <ts>2017-07-27T23:40:47.741083</ts>
    <user>U1D5GU32R</user>
    <text>That it won’t compile to JS?</text>
  </message>
  <message>
    <ts>2017-07-27T23:41:00.742861</ts>
    <user>U153UK3FA</user>
    <text>yeah, eventually</text>
  </message>
  <message>
    <ts>2017-07-27T23:41:19.745797</ts>
    <user>U153UK3FA</user>
    <text>asm.js is still JS</text>
  </message>
  <message>
    <ts>2017-07-27T23:42:06.753063</ts>
    <user>U1D5GU32R</user>
    <text>But the Metal compiler compiles C right?</text>
  </message>
  <message>
    <ts>2017-07-27T23:42:31.757075</ts>
    <user>U1D5GU32R</user>
    <text>the compiler built with asm.js is a C compiler right?</text>
  </message>
  <message>
    <ts>2017-07-27T23:43:36.766393</ts>
    <user>U1D5GU32R</user>
    <text>Are you saying Elm won’t have to compile at all, it will just run in C?</text>
  </message>
  <message>
    <ts>2017-07-27T23:44:58.778225</ts>
    <user>U153UK3FA</user>
    <text>Elm currently targets the web platform because it’s the most widely used platform in history which gives Elm a much larger reach</text>
  </message>
  <message>
    <ts>2017-07-27T23:45:21.781794</ts>
    <user>U1D5GU32R</user>
    <text>but?</text>
  </message>
  <message>
    <ts>2017-07-27T23:45:38.784455</ts>
    <user>U1D5GU32R</user>
    <text>Can it compile into anything?</text>
  </message>
  <message>
    <ts>2017-07-27T23:46:36.793068</ts>
    <user>U153UK3FA</user>
    <text>sure, you just need to write the compiler and provide wrappers for all the system libraries you want to use on your target platform</text>
  </message>
  <message>
    <ts>2017-07-27T23:47:37.801878</ts>
    <user>U1D5GU32R</user>
    <text>So there is nothing inherent in the design of Elm that makes it especially suited for compilation to JS?</text>
  </message>
  <message>
    <ts>2017-07-27T23:48:05.805876</ts>
    <user>U1D5GU32R</user>
    <text>Besides interop of course</text>
  </message>
  <message>
    <ts>2017-07-27T23:49:27.817952</ts>
    <user>U153UK3FA</user>
    <text>Elm inherits some of the semantics of JS for performance reasons, eg. Elm’s number type is a Float like JS</text>
  </message>
  <message>
    <ts>2017-07-27T23:51:12.834436</ts>
    <user>U153UK3FA</user>
    <text>You can in fact currently write apps for Electron in Elm because Electron runs JS and Elm compiles to JS</text>
  </message>
  <message>
    <ts>2017-07-27T23:51:50.839967</ts>
    <user>U1D5GU32R</user>
    <text>Got it, thanks &lt;@U153UK3FA&gt;. So to summarize, anything is possible :wink:</text>
  </message>
  <message>
    <ts>2017-07-27T23:53:17.853020</ts>
    <user>U153UK3FA</user>
    <text>summary: compiling to JS doesn’t mean having the same issues as JS, JS is a good target because it’s so widely available on every platform</text>
  </message>
  <message>
    <ts>2017-07-27T23:54:07.860115</ts>
    <user>U1D5GU32R</user>
    <text>Makes sense</text>
  </message>
  <message>
    <ts>2017-07-27T23:54:22.862123</ts>
    <user>U153UK3FA</user>
    <text>C as a target would be less useful because it’s not as widely available</text>
  </message>
  <message>
    <ts>2017-07-27T23:54:23.862381</ts>
    <user>U1D5GU32R</user>
    <text>So there are not current efforts to run Elm uncompiled?</text>
  </message>
  <message>
    <ts>2017-07-27T23:54:42.865119</ts>
    <user>U153UK3FA</user>
    <text>You mean, with an Elm interpreter?</text>
  </message>
  <message>
    <ts>2017-07-27T23:54:55.867016</ts>
    <user>U1D5GU32R</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-27T23:54:59.867654</ts>
    <user>U1D5GU32R</user>
    <text>uncompiled to JS</text>
  </message>
  <message>
    <ts>2017-07-27T23:55:07.868964</ts>
    <user>U1D5GU32R</user>
    <text>unJS</text>
  </message>
  <message>
    <ts>2017-07-27T23:55:10.869423</ts>
    <user>U153UK3FA</user>
    <text>compiled to what?</text>
  </message>
  <message>
    <ts>2017-07-27T23:55:27.872254</ts>
    <user>U153UK3FA</user>
    <text>you’ve got to compile to something</text>
  </message>
  <message>
    <ts>2017-07-27T23:55:36.873684</ts>
    <user>U1D5GU32R</user>
    <text>Well C is the obvious choice because everything runs C</text>
  </message>
  <message>
    <ts>2017-07-27T23:56:00.877256</ts>
    <user>U153UK3FA</user>
    <text>My web browser only runs C via asm.js</text>
  </message>
  <message>
    <ts>2017-07-27T23:56:06.878295</ts>
    <user>U1D5GU32R</user>
    <text>Right</text>
  </message>
  <message>
    <ts>2017-07-27T23:56:39.883037</ts>
    <user>U1D5GU32R</user>
    <text>Let me restate the question, could Elm exist as it’s own language without need to compile to anyting</text>
  </message>
  <message>
    <ts>2017-07-27T23:56:44.883792</ts>
    <user>U1D5GU32R</user>
    <text>like Python</text>
  </message>
  <message>
    <ts>2017-07-27T23:56:47.884203</ts>
    <user>U1D5GU32R</user>
    <text>or Ruby</text>
  </message>
  <message>
    <ts>2017-07-27T23:58:06.896105</ts>
    <user>U153UK3FA</user>
    <text>Sure, you can write an Elm interpreter</text>
  </message>
  <message>
    <ts>2017-07-27T23:59:20.907595</ts>
    <user>U153UK3FA</user>
    <text>There is talk of compiling Elm to BEAM (Erlang’s VM)</text>
  </message>
  <message>
    <ts>2017-07-28T00:04:05.954588</ts>
    <user>U0J8D9M2P</user>
    <text>Hello everyone. I was some website a while ago which has two courses for Elm one is free and one is paid. But I can not remember now what was the website. Maybe anyone has idea what it can be?</text>
  </message>
  <message>
    <ts>2017-07-28T00:08:17.994485</ts>
    <user>U1D5GU32R</user>
    <text>Awesome, found the HN convo: &lt;https://news.ycombinator.com/item?id=11916183&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T00:08:24.995562</ts>
    <user>U1D5GU32R</user>
    <text>Thanks &lt;@U153UK3FA&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T00:09:08.002065</ts>
    <user>U1D5GU32R</user>
    <text>&lt;https://www.udemy.com/introduction-to-elm/&gt;
&lt;https://www.udemy.com/rust-programming-for-beginners/&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T00:09:11.002621</ts>
    <user>U1D5GU32R</user>
    <text>Those maybe</text>
  </message>
  <message>
    <ts>2017-07-28T00:09:20.004056</ts>
    <user>U0F5SH6UQ</user>
    <text>&lt;@U0J8D9M2P&gt; there are a few: &lt;https://pragmaticstudio.com/elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T00:09:32.005999</ts>
    <user>U0F5SH6UQ</user>
    <text>and I made this one, which is free, but super basic:</text>
  </message>
  <message>
    <ts>2017-07-28T00:09:56.009750</ts>
    <user>U0F5SH6UQ</user>
    <text>&lt;https://egghead.io/courses/start-using-elm-to-build-web-applications&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T00:10:08.011861</ts>
    <user>U0F5SH6UQ</user>
    <text>and dailydrip has a bunch of videos</text>
  </message>
  <message>
    <ts>2017-07-28T00:11:43.026870</ts>
    <user>U0J8D9M2P</user>
    <text>That was some personal blog</text>
  </message>
  <message>
    <ts>2017-07-28T00:11:57.029034</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U1D5GU32R&gt; might be interesting to you to watch some of Edwin Brady's talks about Idris - he's written the compiler with a replaceable backend in such a way that means it can target whatever language. I don't think it's be terribly difficult to do the same thing with Elm, necessarily. There's a video of him targetting PHP as an amusing proof of concept joke</text>
  </message>
  <message>
    <ts>2017-07-28T00:12:02.029953</ts>
    <user>U0J8D9M2P</user>
    <text>I think I’ve heard about it on Elm Town :smiley:</text>
  </message>
  <message>
    <ts>2017-07-28T00:17:10.077781</ts>
    <user>U0J8D9M2P</user>
    <text>I mess everything up :smiley: It was about docker. The courses is here: &lt;https://courses.coderjourney.com/&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T01:03:56.497553</ts>
    <user>U0CL92DJN</user>
    <text>Do you mean a web browser completely written in Elm? That sounds a little far-fetched, but an interesting thought experiment! It'd be great to totally re-imagine how browsers could work - such as an immutable-first design might remove a lot of the DOM issues we have with Elm. There's a lot of interesting work going on right now with Servo, the web browser written in Rust, and some of that work is making it's way into Firefox. Servo renders everything straight to the GPU which makes the virtual-dom redundant - we'd be able to render Elm Html straight to a browser without the VDOM middleman.</text>
  </message>
  <message>
    <ts>2017-07-28T01:27:59.713706</ts>
    <user>U17R26VR8</user>
    <text>omg... the debugger is brilliant!</text>
  </message>
  <message>
    <ts>2017-07-28T04:28:48.263812</ts>
    <user>U1D5GU32R</user>
    <text>Hmmm interesting. I don’t know if it would be a web browser or just a way of writing apps with Elm. I would just like to see if Elm could stand on it’s own as a programming language for developing apps and I think the first step would be to be able to write Elm that didn’t need to compile to JS</text>
  </message>
  <message>
    <ts>2017-07-28T06:23:23.566038</ts>
    <user>U0H3A9XLN</user>
    <text>Is it correct behaviour in Elm when input field changes even though I do not provide any handling of change and put constant value in input’s value?</text>
  </message>
  <message>
    <ts>2017-07-28T06:24:28.584474</ts>
    <user>U2LC0U8JY</user>
    <text>i dont think i completely understand the question</text>
  </message>
  <message>
    <ts>2017-07-28T06:24:55.591867</ts>
    <user>U0H3A9XLN</user>
    <text>`H.input [ A.value "test" ] []`</text>
  </message>
  <message>
    <ts>2017-07-28T06:25:20.599271</ts>
    <user>U3SJEDR96</user>
    <text>Sure; since the virtual-dom won't have changed either, so the node isn't re-rendered</text>
  </message>
  <message>
    <ts>2017-07-28T06:25:25.600731</ts>
    <user>U0H3A9XLN</user>
    <text>in React if I’ll try to type something in input with this setup it’s value won’t change</text>
  </message>
  <message>
    <ts>2017-07-28T06:25:32.602742</ts>
    <user>U0H3A9XLN</user>
    <text>in Elm it does</text>
  </message>
  <message>
    <ts>2017-07-28T06:25:34.603483</ts>
    <user>U3SJEDR96</user>
    <text>if you keep state outside of the vdom, elm doesn't know about it</text>
  </message>
  <message>
    <ts>2017-07-28T06:26:10.613831</ts>
    <user>U0H3A9XLN</user>
    <text>well, I do not keep state outside, it’s just constant</text>
  </message>
  <message>
    <ts>2017-07-28T06:26:13.614746</ts>
    <user>U3SJEDR96</user>
    <text>if you were to change that string, the vdom would change, meaning the dom would be updated, too</text>
  </message>
  <message>
    <ts>2017-07-28T06:26:17.615947</ts>
    <user>U0H3A9XLN</user>
    <text>and there is no way of updating it</text>
  </message>
  <message>
    <ts>2017-07-28T06:27:10.630951</ts>
    <user>U3SJEDR96</user>
    <text>no, the dom keeps state outside; causing a mismatch between the dom and the vdom. As long as the vdom isn't changed, the dom can't be change to reflect that. I'm not sure if/how this could be done differently :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-28T06:28:02.645664</ts>
    <user>U0H3A9XLN</user>
    <text>`&amp;lt;input value="test" /&amp;gt;` in React won’t change until you provide functionality for it to change</text>
  </message>
  <message>
    <ts>2017-07-28T06:28:38.656211</ts>
    <user>U0H3A9XLN</user>
    <text>Let’s make it a bit better</text>
  </message>
  <message>
    <ts>2017-07-28T06:28:41.657105</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, react does magic to hook in really tightly with inputs, i.e. not waiting for an animation-frame to handle events and whatnot</text>
  </message>
  <message>
    <ts>2017-07-28T06:28:57.661542</ts>
    <user>U0H3A9XLN</user>
    <text>`&amp;lt;input value={model.value} /&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-07-28T06:29:02.663104</ts>
    <user>U3SJEDR96</user>
    <text>My point is mostly that this is _expected_ behaviour in Elm</text>
  </message>
  <message>
    <ts>2017-07-28T06:29:23.668875</ts>
    <user>U0H3A9XLN</user>
    <text>Doesn’t it break the idea that view is function of state?</text>
  </message>
  <message>
    <ts>2017-07-28T06:29:33.671610</ts>
    <user>U0H3A9XLN</user>
    <text>Why view changes even though state didn’t?</text>
  </message>
  <message>
    <ts>2017-07-28T06:29:55.677765</ts>
    <user>U0H3A9XLN</user>
    <text>I’d say that’s not a magic in React case, that’s reinforcement of that idea</text>
  </message>
  <message>
    <ts>2017-07-28T06:30:52.694734</ts>
    <user>U3SJEDR96</user>
    <text>The view is virtual dom; and the virtual-dom hasn't changed. Keeping the virtual-dom in sync with the actual DOM requires eventhandling</text>
  </message>
  <message>
    <ts>2017-07-28T06:31:34.707016</ts>
    <user>U3SJEDR96</user>
    <text>The DOM is stateful. I don't suppose you'd want to keep stuff like "is this `&amp;lt;select&amp;gt;` open" in your model, either?</text>
  </message>
  <message>
    <ts>2017-07-28T06:32:10.717267</ts>
    <user>U0H3A9XLN</user>
    <text>I do want, that’s the whole point of `view = f(state)` invariant</text>
  </message>
  <message>
    <ts>2017-07-28T06:32:30.723148</ts>
    <user>U0H3A9XLN</user>
    <text>it provides you explicitness and removes undesired effects</text>
  </message>
  <message>
    <ts>2017-07-28T06:33:36.741346</ts>
    <user>U0H3A9XLN</user>
    <text>otherwise I don’t really understand necessity of virtual dom, we would be cool living with dom mutations like we did before :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-28T06:34:03.748994</ts>
    <user>U3SJEDR96</user>
    <text>I see your point, really, but with the current setup, that means a _lot_ of special casing that probably isn't really worth it</text>
  </message>
  <message>
    <ts>2017-07-28T06:34:11.751314</ts>
    <user>U3SJEDR96</user>
    <text>the point of virtual dom is speed</text>
  </message>
  <message>
    <ts>2017-07-28T06:34:19.753682</ts>
    <user>U0H3A9XLN</user>
    <text>hehe, no</text>
  </message>
  <message>
    <ts>2017-07-28T06:34:41.759627</ts>
    <user>U0H3A9XLN</user>
    <text>hm, was a bit not gentle, sorry :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-28T06:35:01.765172</ts>
    <user>U153UK3FA</user>
    <text>The main value of virtual dom is speed and maintaining hidden DOM state</text>
  </message>
  <message>
    <ts>2017-07-28T06:35:06.766780</ts>
    <user>U0H3A9XLN</user>
    <text>that’s was said many times that virtual dom was created to keep invariant, not to achieve speed</text>
  </message>
  <message>
    <ts>2017-07-28T06:35:21.771517</ts>
    <user>U3SJEDR96</user>
    <text>It's okay, I understand you are frustrated</text>
  </message>
  <message>
    <ts>2017-07-28T06:35:27.773015</ts>
    <user>U0H3A9XLN</user>
    <text>speed was nice side effect, not the original target</text>
  </message>
  <message>
    <ts>2017-07-28T06:35:33.774918</ts>
    <user>U0H3A9XLN</user>
    <text>I am not frustrated</text>
  </message>
  <message>
    <ts>2017-07-28T06:36:47.795761</ts>
    <user>U0H3A9XLN</user>
    <text>well, maybe in Elm it is, but it was said many times by React core contributors that this is common misconception to look at virtual dom from the speed perspective</text>
  </message>
  <message>
    <ts>2017-07-28T06:38:12.819307</ts>
    <user>U153UK3FA</user>
    <text>The virtual DOM isn't to make things faster, it's to make view =f(state) fast enough to be usable.</text>
  </message>
  <message>
    <ts>2017-07-28T06:38:23.822410</ts>
    <user>U0H3A9XLN</user>
    <text>yep exactly</text>
  </message>
  <message>
    <ts>2017-07-28T06:38:36.826022</ts>
    <user>U37HUSJ4R</user>
    <text>interested to hear what people think about the comments here: &lt;https://news.ycombinator.com/item?id=14870642&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T06:38:42.827654</ts>
    <user>U0H3A9XLN</user>
    <text>so the initial idea is to make `view = f(state)`</text>
  </message>
  <message>
    <ts>2017-07-28T06:38:52.830399</ts>
    <user>U153UK3FA</user>
    <text>It's certainly about speed, you can do view=f(state) without a virtualdom</text>
  </message>
  <message>
    <ts>2017-07-28T06:39:04.833730</ts>
    <user>U0H3A9XLN</user>
    <text>yep, true</text>
  </message>
  <message>
    <ts>2017-07-28T06:39:27.839817</ts>
    <user>U153UK3FA</user>
    <text>But the other thing the virtual dom achieves is not blowing away hidden DOM state</text>
  </message>
  <message>
    <ts>2017-07-28T06:39:31.841048</ts>
    <user>U0H3A9XLN</user>
    <text>so speed is not the reason virtual dom was created, the reason was to keep invariant, and speed is the requirement</text>
  </message>
  <message>
    <ts>2017-07-28T06:40:13.852364</ts>
    <user>U0H3A9XLN</user>
    <text>so when we discuss what is expected and what is not I guess we need to take into account initial problem, don’t we?</text>
  </message>
  <message>
    <ts>2017-07-28T06:40:28.856602</ts>
    <user>U0H3A9XLN</user>
    <text>to not fall into XY problem</text>
  </message>
  <message>
    <ts>2017-07-28T06:40:35.858584</ts>
    <user>U153UK3FA</user>
    <text>Things like cursor position and open closed state of selects</text>
  </message>
  <message>
    <ts>2017-07-28T06:41:36.874971</ts>
    <user>U0U6ML22H</user>
    <text>leaving to eat, but really, it's laughable :smiley: "I quit Elm because elm-format won't use 2-space tabs", well, OK then! Enjoy configuring your JS tooling!</text>
  </message>
  <message>
    <ts>2017-07-28T06:42:14.885253</ts>
    <user>U37HUSJ4R</user>
    <text>yeh thats just stupid</text>
  </message>
  <message>
    <ts>2017-07-28T06:45:30.938405</ts>
    <user>U3SJEDR96</user>
    <text>Hm, I just realized that if the virtual-dom would blackhole all events that aren't specified manually, this could be done. I'm not sure if that's really something we wish for, though; I'd be pretty annoyed having to manage cursor-position, selection-state, clicking regular links and maintaining focus manually; but it _could_ be done :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-28T07:34:14.723710</ts>
    <user>U0M9CNX1A</user>
    <text>&lt;https://news.ycombinator.com/item?id=14873451&gt; So glad I got that off my chest. Clearly the world will be better for having heard my opinion. :slightly_smiling_face: </text>
  </message>
  <message>
    <ts>2017-07-28T08:45:03.011990</ts>
    <user>U28L0BHN1</user>
    <text>saying that's just stupid is kind of what they're doing on their part, so I'm not sure it helps. There is a point inside of this. I personally think Elm got it right but it is a harsh choice and it will alienate some people.</text>
  </message>
  <message>
    <ts>2017-07-28T09:12:37.685481</ts>
    <user>U0U6ML22H</user>
    <text>well, the entire point is to not have to think about it. I don't necessarily like 4 spaces, or two vertical lines. But the important thing is: it doesn't matter. If you're going to chose your programming languages based on something as futile as this, it's your loss.</text>
  </message>
  <message>
    <ts>2017-07-28T09:14:49.743554</ts>
    <user>U28L0BHN1</user>
    <text>Yes, I'm all for that also. But that does not mean it's just stupid on their part, the Elm community will be better off just explaining it calmy and not responding to trolls</text>
  </message>
  <message>
    <ts>2017-07-28T09:15:32.763178</ts>
    <user>U28L0BHN1</user>
    <text>At least, that's why I liked it</text>
  </message>
  <message>
    <ts>2017-07-28T09:16:37.792769</ts>
    <user>U0U6ML22H</user>
    <text>I agree and do my best to always try to address concerns. However, regardless of the community, my point is that, if as a professional, you're going to make decisions based on as irrational things as those, then it's going to be a problem</text>
  </message>
  <message>
    <ts>2017-07-28T09:17:06.805902</ts>
    <user>U0U6ML22H</user>
    <text>when recruiting, this is the kind of people that I wouldn't want in my team; again, regardless of the community</text>
  </message>
  <message>
    <ts>2017-07-28T09:19:18.865090</ts>
    <user>U28L0BHN1</user>
    <text>don't you think they could just be misguided and change point of view?</text>
  </message>
  <message>
    <ts>2017-07-28T09:20:46.906423</ts>
    <user>U0U6ML22H</user>
    <text>of course, everybody can; this doesn't make their argument a valid one, though, which (I think =)) was the starting point of this conversation</text>
  </message>
  <message>
    <ts>2017-07-28T09:21:53.937729</ts>
    <user>U28L0BHN1</user>
    <text>Yeah, sorry, I wasn't saying that the argument was good, just that there was a point in that it is a harsh choice that need to be explained, and not by calling them stupid.</text>
  </message>
  <message>
    <ts>2017-07-28T09:25:14.030567</ts>
    <user>U2LAL86AY</user>
    <text>anyone knows how to do : `outline: none` using style elements? I have an input box that i want to remove border and outline on focus.</text>
  </message>
  <message>
    <ts>2017-07-28T09:27:48.105364</ts>
    <user>U0JFXEUCT</user>
    <text>you can use `Attribute.inlineStyle` to manually add any style property</text>
  </message>
  <message>
    <ts>2017-07-28T09:30:48.194332</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U2LAL86AY&gt; if you remove it, consider replacing it with a different indicator for accessibility: &lt;http://a11yproject.com/posts/never-remove-css-outlines/&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T09:40:28.483151</ts>
    <user>U2LAL86AY</user>
    <text>yep that's true, i actually want to change the style - the box around it is annoying , but i will add a `bottom border ` that will change it's color and thickness on focus.</text>
  </message>
  <message>
    <ts>2017-07-28T09:41:52.525221</ts>
    <user>U0U6ML22H</user>
    <text>my point was that, as a professional, deciding to pick or not to pick a language based on such futile aspects is ridiculous; regardless of the validity of the choice itself.</text>
  </message>
  <message>
    <ts>2017-07-28T10:05:39.297076</ts>
    <user>U37HUSJ4R</user>
    <text>for the record &lt;@U28L0BHN1&gt; no one called anyone stupid, I said its stupid to "quit Elm because elm-format won't use 2-space tabs"</text>
  </message>
  <message>
    <ts>2017-07-28T10:05:50.302984</ts>
    <user>U37HUSJ4R</user>
    <text>and I stand by that statement</text>
  </message>
  <message>
    <ts>2017-07-28T11:34:52.413836</ts>
    <user>U28L0BHN1</user>
    <text>I suppose you critique the idea and not the person but a lot of people will read it that way ^^</text>
  </message>
  <message>
    <ts>2017-07-28T11:40:17.597549</ts>
    <user>U2FGMAQ5R</user>
    <text>Does Elm Test actually work ? I’m having problems with some packages when they are in the elm-package.json file, ie debois/elm-dom and elm-lang/Svg , has anybody else experienced this ?</text>
  </message>
  <message>
    <ts>2017-07-28T11:41:19.632293</ts>
    <user>U0J1M0F32</user>
    <text>&lt;@U2FGMAQ5R&gt; 1) Yes, Elm Test actually works. 2) No, I have not experienced that.</text>
  </message>
  <message>
    <ts>2017-07-28T11:41:55.652351</ts>
    <user>U0J1M0F32</user>
    <text>You could see if anyone in &lt;#C0CLGCMMF|testing&gt; has run into that issue?</text>
  </message>
  <message>
    <ts>2017-07-28T11:42:32.673158</ts>
    <user>U2FGMAQ5R</user>
    <text>I’ve added it there but no response :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-28T11:42:40.677754</ts>
    <user>U2FGMAQ5R</user>
    <text>yep :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-28T11:42:44.679522</ts>
    <user>U2FGMAQ5R</user>
    <text>yet :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-28T11:50:12.934159</ts>
    <user>U1X0EELG3</user>
    <text>Anybody get an error like this using elm-install (was elm-github-install). "error: undefined method `name' for nil:NilClass. Use --trace to view backtrace"?</text>
  </message>
  <message>
    <ts>2017-07-28T11:50:46.953739</ts>
    <user>U1X0EELG3</user>
    <text>Just upgraded my system, but now I can't use elm-install anymore....</text>
  </message>
  <message>
    <ts>2017-07-28T11:51:34.980304</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U2FGMAQ5R&gt; Yes, of course it works. That's a bad question -- lots of people use it. You have to be patient, the people on here are giving up their personal time to answer questions. You can't expect an instant answer all the time.</text>
  </message>
  <message>
    <ts>2017-07-28T11:52:09.000062</ts>
    <user>U2FGMAQ5R</user>
    <text>apologies didn’t mean to offend</text>
  </message>
  <message>
    <ts>2017-07-28T11:52:33.013587</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U1X0EELG3&gt; Have you tried uninstall and re-installing?</text>
  </message>
  <message>
    <ts>2017-07-28T11:52:58.027993</ts>
    <user>U1X0EELG3</user>
    <text>Well, I just installed it for the first time after a clean install of a new Debian 9 box.</text>
  </message>
  <message>
    <ts>2017-07-28T11:54:12.068451</ts>
    <user>U1X0EELG3</user>
    <text>Maybe something to do with versions of Ruby. I don't know ruby so its a bit of a mytery to me.</text>
  </message>
  <message>
    <ts>2017-07-28T11:58:04.200989</ts>
    <user>U1X0EELG3</user>
    <text>Hmm, version 1.1.0 of elm-install released 4 days ago. I was running an older version than that before. I guess some bug might have been introduced in later version. So I can try going back to an older version and see if that works....</text>
  </message>
  <message>
    <ts>2017-07-28T12:03:37.395504</ts>
    <user>U1X0EELG3</user>
    <text>Bugger, no joy with older version I tried so far.</text>
  </message>
  <message>
    <ts>2017-07-28T12:05:29.459252</ts>
    <user>U3S9BH05U</user>
    <text>&lt;@U1X0EELG3&gt; I've just tried installing and running elm-install on my debian (9) box, and worksforme, sorry =(</text>
  </message>
  <message>
    <ts>2017-07-28T12:06:04.478450</ts>
    <user>U3S9BH05U</user>
    <text>I've installed it from npm, and I've got ruby 2.3.3</text>
  </message>
  <message>
    <ts>2017-07-28T12:06:10.481657</ts>
    <user>U1X0EELG3</user>
    <text>Thanks. It works for most elm-package.json that I tried, just not all.</text>
  </message>
  <message>
    <ts>2017-07-28T12:06:57.507303</ts>
    <user>U3S9BH05U</user>
    <text>can you share an elm-package.json that doesn't work?</text>
  </message>
  <message>
    <ts>2017-07-28T12:07:32.526365</ts>
    <user>U1X0EELG3</user>
    <text>{
    "version": "0.0.1",
    "summary": "Auth Server UI",
    "repository": "&lt;https://github.com/no-user/not-a-github-project.git&gt;",
    "license": "private",
    "source-directories": [
        "src/elm",
        "src/auth-client/elm"
    ],
    "exposed-modules": [],
    "native-modules": true,
    "dependencies": {
        "elm-lang/core": "5.0.0 &amp;lt;= v &amp;lt; 6.0.0",
        "elm-lang/html": "2.0.0 &amp;lt;= v &amp;lt; 3.0.0",
        "elm-lang/navigation": "2.0.1 &amp;lt;= v &amp;lt; 3.0.0",
        "elm-lang/http": "1.0.0 &amp;lt;= v &amp;lt; 2.0.0",
        "rgrempel/elm-http-decorators": "2.0.0 &amp;lt;= v &amp;lt; 3.0.0",
        "debois/elm-mdl": "8.1.0 &amp;lt;= v &amp;lt; 9.0.0",
        "elm-community/json-extra": "2.0.0 &amp;lt;= v &amp;lt; 3.0.0",
        "elm-community/dict-extra": "1.3.1 &amp;lt;= v &amp;lt; 2.0.0",
        "elm-community/maybe-extra": "3.0.0 &amp;lt;= v &amp;lt; 4.0.0",
        "elm-community/list-extra": "4.0.0 &amp;lt;= v &amp;lt; 5.0.0",
        "krisajenkins/elm-exts": "26.1.0 &amp;lt;= v &amp;lt; 27.0.0",
        "rgrempel/elm-route-url": "3.0.0 &amp;lt;= v &amp;lt; 4.0.0",
        "rupertlssmith/elmq": "1.0.0 &amp;lt;= v &amp;lt; 2.0.0",
        "rupertlssmith/elm-auth": "1.0.0 &amp;lt;= v &amp;lt; 2.0.0"        
    },
    "elm-version": "0.18.0 &amp;lt;= v &amp;lt; 0.19.0"
}</text>
  </message>
  <message>
    <ts>2017-07-28T12:09:44.595937</ts>
    <user>U3S9BH05U</user>
    <text>```
   ~/src/testforrupert  ls                                                                                                                                                                                                                        ohana@pariah  18:09:03 
elm-package.json
   ~/src/testforrupert  elm install                                                                                                                                                                                                               ohana@pariah  18:09:03 
Resolving packages...
  ▶ Getting updates for: elm-lang/core
  ▶ Getting updates for: elm-lang/html
  ▶ Getting updates for: elm-lang/virtual-dom
  ▶ Getting updates for: elm-lang/navigation
  ▶ Getting updates for: elm-lang/dom
  ▶ Getting updates for: elm-lang/http
  ▶ Package: &lt;https://github.com/rgrempel/elm-http-decorators&gt; not found in cache, cloning...
  ▶ Package: &lt;https://github.com/debois/elm-mdl&gt; not found in cache, cloning...
  ▶ Getting updates for: debois/elm-dom
  ▶ Getting updates for: elm-lang/mouse
  ▶ Getting updates for: elm-lang/window
  ▶ Package: &lt;https://github.com/elm-community/json-extra&gt; not found in cache, cloning...
  ▶ Package: &lt;https://github.com/elm-community/dict-extra&gt; not found in cache, cloning...
  ▶ Getting updates for: elm-community/maybe-extra
  ▶ Getting updates for: elm-community/list-extra
  ▶ Package: &lt;https://github.com/krisajenkins/elm-exts&gt; not found in cache, cloning...
  ▶ Package: &lt;https://github.com/elm-lang/trampoline&gt; not found in cache, cloning...
  ▶ Package: &lt;https://github.com/rgrempel/elm-route-url&gt; not found in cache, cloning...
  ▶ Package: &lt;https://github.com/ccapndave/elm-update-extra&gt; not found in cache, cloning...
  ▶ Package: &lt;https://github.com/sporto/erl&gt; not found in cache, cloning...
  ▶ Package: &lt;https://github.com/rupertlssmith/elmq&gt; not found in cache, cloning...
  ▶ Package: &lt;https://github.com/rupertlssmith/elm-auth&gt; not found in cache, cloning...
  ▶ Getting updates for: truqu/elm-base64
Solving dependencies...
  ● elm-lang/core - &lt;https://github.com/elm-lang/core&gt; (5.1.1)
  ● elm-lang/html - &lt;https://github.com/elm-lang/html&gt; (2.0.0)
  ● elm-lang/navigation - &lt;https://github.com/elm-lang/navigation&gt; (2.1.0)
  ● elm-lang/http - &lt;https://github.com/elm-lang/http&gt; (1.0.0)
  ● rgrempel/elm-http-decorators - &lt;https://github.com/rgrempel/elm-http-decorators&gt; (2.0.0)
  ● debois/elm-mdl - &lt;https://github.com/debois/elm-mdl&gt; (8.1.0)
  ● elm-community/json-extra - &lt;https://github.com/elm-community/json-extra&gt; (2.3.0)
  ● elm-community/dict-extra - &lt;https://github.com/elm-community/dict-extra&gt; (1.5.0)
  ● elm-community/maybe-extra - &lt;https://github.com/elm-community/maybe-extra&gt; (3.1.0)
  ● elm-community/list-extra - &lt;https://github.com/elm-community/list-extra&gt; (4.0.0)
  ● krisajenkins/elm-exts - &lt;https://github.com/krisajenkins/elm-exts&gt; (26.5.0)
  ● rgrempel/elm-route-url - &lt;https://github.com/rgrempel/elm-route-url&gt; (3.0.1)
  ● rupertlssmith/elmq - &lt;https://github.com/rupertlssmith/elmq&gt; (1.0.0)
  ● rupertlssmith/elm-auth - &lt;https://github.com/rupertlssmith/elm-auth&gt; (1.1.0)
  ● debois/elm-dom - &lt;https://github.com/debois/elm-dom&gt; (1.2.3)
  ● elm-lang/mouse - &lt;https://github.com/elm-lang/mouse&gt; (1.0.1)
  ● elm-lang/window - &lt;https://github.com/elm-lang/window&gt; (1.0.1)
  ● elm-lang/dom - &lt;https://github.com/elm-lang/dom&gt; (1.1.1)
  ● elm-lang/virtual-dom - &lt;https://github.com/elm-lang/virtual-dom&gt; (2.0.4)
  ● truqu/elm-base64 - &lt;https://github.com/truqu/elm-base64&gt; (1.0.5)
  ● ccapndave/elm-update-extra - &lt;https://github.com/ccapndave/elm-update-extra&gt; (3.0.0)
  ● sporto/erl - &lt;https://github.com/sporto/erl&gt; (10.0.2)
  ● elm-lang/trampoline - &lt;https://github.com/elm-lang/trampoline&gt; (1.0.1)
Packages configured successfully!
   ~/src/testforrupert     
```</text>
  </message>
  <message>
    <ts>2017-07-28T12:10:21.615573</ts>
    <user>U3S9BH05U</user>
    <text>should have disabled powerline xD</text>
  </message>
  <message>
    <ts>2017-07-28T12:12:13.673492</ts>
    <user>U1X0EELG3</user>
    <text>Thanks. It worked for you! That makes the problem even weirder to figure out...</text>
  </message>
  <message>
    <ts>2017-07-28T12:14:28.745298</ts>
    <user>U1X0EELG3</user>
    <text>What version of elm-install are you running? (elm-install --version)</text>
  </message>
  <message>
    <ts>2017-07-28T12:24:20.050428</ts>
    <user>U3S9BH05U</user>
    <text>1.1.0</text>
  </message>
  <message>
    <ts>2017-07-28T12:56:26.028965</ts>
    <user>U177VRFJP</user>
    <text>Question about data structures...I am writing an app where I will have thousands of objects being passed around in memory. Right now I have this written as a record (`{ fieldA : String, fieldB: String, fieldC: String }`), but I'm wondering if re-writing it as a union type would be more efficient (`type Thing = Thing String String String`)...any thoughts?</text>
  </message>
  <message>
    <ts>2017-07-28T12:57:40.067049</ts>
    <user>U2H92KKEY</user>
    <text>ah, it must be related to the python SimpleHTTPServer I'm using</text>
  </message>
  <message>
    <ts>2017-07-28T12:58:10.082998</ts>
    <user>U2H92KKEY</user>
    <text>the proper content type was not in the header</text>
  </message>
  <message>
    <ts>2017-07-28T12:58:20.088235</ts>
    <user>U2H92KKEY</user>
    <text>added this to index.html and voila `&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-07-28T12:58:20.088608</ts>
    <user>U2H92KKEY</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-28T12:58:41.099162</ts>
    <user>U3FJSB596</user>
    <text>Have in mind that by making it a record you have access to generated getter functions and the setter syntax</text>
  </message>
  <message>
    <ts>2017-07-28T12:59:49.134079</ts>
    <user>U177VRFJP</user>
    <text>it doesn't take much time to write getter/setter functions. I'm mainly concerned about memory because there could be 100,000+ of these objects being passed around</text>
  </message>
  <message>
    <ts>2017-07-28T13:01:56.202540</ts>
    <user>U153UK3FA</user>
    <text>There’s no reason there should be a runtime difference between those representations</text>
  </message>
  <message>
    <ts>2017-07-28T13:02:42.226488</ts>
    <user>U177VRFJP</user>
    <text>Would there be a more efficient representation?</text>
  </message>
  <message>
    <ts>2017-07-28T13:03:05.238490</ts>
    <user>U177VRFJP</user>
    <text>like a Tuple perhaps?</text>
  </message>
  <message>
    <ts>2017-07-28T13:04:00.266824</ts>
    <user>U153UK3FA</user>
    <text>a tuple, record and type with parameters are all sugar</text>
  </message>
  <message>
    <ts>2017-07-28T13:04:43.289281</ts>
    <user>U177VRFJP</user>
    <text>hmm that's good to know. do you know how those are represented in JS-land?</text>
  </message>
  <message>
    <ts>2017-07-28T13:05:33.315134</ts>
    <user>U14Q8S4EM</user>
    <text>I think tuples come out as `{ _0: firstItem, _1: secondItem }`</text>
  </message>
  <message>
    <ts>2017-07-28T13:06:04.331022</ts>
    <user>U14Q8S4EM</user>
    <text>And I think records come out directly as objects</text>
  </message>
  <message>
    <ts>2017-07-28T13:06:31.344337</ts>
    <user>U14Q8S4EM</user>
    <text>So `Thing "whatever" "also whatever"` -&amp;gt; `{ fieldA: "whatever", fieldB: "also whatever"}`</text>
  </message>
  <message>
    <ts>2017-07-28T13:07:10.363905</ts>
    <user>U14Q8S4EM</user>
    <text>For that reason tuples and records are just as performant.</text>
  </message>
  <message>
    <ts>2017-07-28T13:07:32.375503</ts>
    <user>U14Q8S4EM</user>
    <text>(Although I think I vaguely remember &lt;@U0EUHKVGB&gt; saying records are more performant. I could be wrong)</text>
  </message>
  <message>
    <ts>2017-07-28T13:08:28.403844</ts>
    <user>U177VRFJP</user>
    <text>interesting. thanks! I'll have to do some benchmarking to confirm but that makes sense</text>
  </message>
  <message>
    <ts>2017-07-28T13:11:42.501581</ts>
    <user>U0EUHKVGB</user>
    <text>Memory usage is not the same thing as performance</text>
  </message>
  <message>
    <ts>2017-07-28T13:13:03.541916</ts>
    <user>U0EUHKVGB</user>
    <text>Tuples will be more efficient unless you have very short field names in your record. Basically when your field names are a combined length of 16 or more, then a tuple is better.</text>
  </message>
  <message>
    <ts>2017-07-28T13:13:13.547256</ts>
    <user>U0EUHKVGB</user>
    <text>(for tuples of size 2)</text>
  </message>
  <message>
    <ts>2017-07-28T13:13:40.560660</ts>
    <user>U177VRFJP</user>
    <text>I have 4 fields for each object</text>
  </message>
  <message>
    <ts>2017-07-28T13:14:13.577574</ts>
    <user>U177VRFJP</user>
    <text>would it make sense to use a Tuple in that case?</text>
  </message>
  <message>
    <ts>2017-07-28T13:15:24.613839</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U177VRFJP&gt;, it depends on the names of the fields.</text>
  </message>
  <message>
    <ts>2017-07-28T13:17:34.679887</ts>
    <user>U177VRFJP</user>
    <text>as they're written now they'd be over 16 characters...but trimming them down is no problem. If field name length is an issue maybe it would be better to use a union type?</text>
  </message>
  <message>
    <ts>2017-07-28T13:17:54.689770</ts>
    <user>U0EUHKVGB</user>
    <text>Let's go to &lt;#C2QPJLU2X|elm-discuss&gt; instead</text>
  </message>
  <message>
    <ts>2017-07-28T14:03:21.126980</ts>
    <user>U635238TG</user>
    <text>&lt;@U0J8D9M2P&gt; I think you might be looking for &lt;http://courses.knowthen.com/&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T14:06:43.234537</ts>
    <user>U6D3ERLA1</user>
    <text>Can folks point at some larger applications built with Elm?</text>
  </message>
  <message>
    <ts>2017-07-28T14:10:37.353436</ts>
    <user>U3SJEDR96</user>
    <text>`rtfeldman/elm-spa-example` is a nice example, `Tradenomiliitto/tradenomiitti` is a real world, deployed-on-production example. `etaque/tacks` is a pretty cool multiplayer game, also a little more complex than your run-of-the-mill small example</text>
  </message>
  <message>
    <ts>2017-07-28T16:23:02.095102</ts>
    <user>U3FJSB596</user>
    <text>&lt;#C0LUAGWRK|jobs&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T16:24:14.125713</ts>
    <user>U5XC2FJ1Y</user>
    <text>so does Elm have a good way to write polymorphic functions like `average : List number -&amp;gt; Float`? right now the best option I've seen is to define `coerceToFloat x = x |&amp;gt; toString |&amp;gt; String.toFloat |&amp;gt; Result.withDefault 0` and use specifically `Float` methods, but that seems really hacky</text>
  </message>
  <message>
    <ts>2017-07-28T16:31:22.309965</ts>
    <user>U6F6NLU59</user>
    <text>&lt;@U3FJSB596&gt; thank you!</text>
  </message>
  <message>
    <ts>2017-07-28T16:35:51.424554</ts>
    <user>U3FJSB596</user>
    <text>np :wink:</text>
  </message>
  <message>
    <ts>2017-07-28T16:44:34.645696</ts>
    <user>U6F7KJ9JR</user>
    <text>hey guys, can anyone tell me how to get started in elm !!</text>
  </message>
  <message>
    <ts>2017-07-28T16:45:02.657547</ts>
    <user>U0FP80EKB</user>
    <text>&lt;https://guide.elm-lang.org/&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T16:45:18.664610</ts>
    <user>U0FP80EKB</user>
    <text>I learned a bunch at the beginning from prag studio folks &lt;https://pragmaticstudio.com/courses/elm&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T16:45:21.666191</ts>
    <user>U3FJSB596</user>
    <text>Have you used this:
&lt;https://www.elm-tutorial.org/en/04-starting/cover.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T16:46:13.687645</ts>
    <user>U2U94G0QG</user>
    <text>ah, hehe coreyhaines' link to the guide was what I meant to post :grimacing:</text>
  </message>
  <message>
    <ts>2017-07-28T16:47:07.710129</ts>
    <user>U6F7KJ9JR</user>
    <text>thanks &lt;@U2U94G0QG&gt;  &lt;@U0FP80EKB&gt;   &lt;@U3FJSB596&gt;  :smiley:</text>
  </message>
  <message>
    <ts>2017-07-28T16:48:24.742134</ts>
    <user>U0FP80EKB</user>
    <text>Finally deployed our new elm-based embeds on some of our client sites. We’re averaging about 40k views a day.</text>
  </message>
  <message>
    <ts>2017-07-28T17:30:16.706746</ts>
    <user>U0F5SH6UQ</user>
    <text>&lt;@U6F7KJ9JR&gt; self plug, if you’re really new to elm: &lt;https://egghead.io/courses/start-using-elm-to-build-web-applications&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T18:03:01.318941</ts>
    <user>U0Z9TPK7S</user>
    <text>Working on yet another iteration of the Gamepad library. Considering two different APIs for accessing and remapping the controls.
I put a very short example usage here &lt;https://gist.github.com/xarvh/11d64ef600df1d5007d17c0ecafcb853&gt; I'm very undecided on which one is best, would be really happy to get some additional input about it. =D</text>
  </message>
  <message>
    <ts>2017-07-28T19:05:51.208665</ts>
    <user>U23SA861Y</user>
    <text>these aren't just coming in as subscriptions?</text>
  </message>
  <message>
    <ts>2017-07-28T19:07:39.230358</ts>
    <user>U0Z9TPK7S</user>
    <text>Not really. The subscription provides the blob with all the raw gamepad state  information, then you use the functions in the gist to make sense of it.</text>
  </message>
  <message>
    <ts>2017-07-28T19:13:00.291201</ts>
    <user>U23SA861Y</user>
    <text>but wouldn't it make sense as an API to basically allow the consumer of the library to just specify which Msg they want for which button or are you trying to add more flavour than that. Some of this you have here looks stringly typed</text>
  </message>
  <message>
    <ts>2017-07-28T19:19:53.364417</ts>
    <user>U0Z9TPK7S</user>
    <text>What would be the advantage?</text>
  </message>
  <message>
    <ts>2017-07-28T19:20:49.374645</ts>
    <user>U23SA861Y</user>
    <text>I'm trying to figure out which way you're going on this. Is it your intent to have remaps be done in a config file or via some user interface?</text>
  </message>
  <message>
    <ts>2017-07-28T19:21:04.377973</ts>
    <user>U0Z9TPK7S</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-07-28T19:21:29.382928</ts>
    <user>U0Z9TPK7S</user>
    <text>Thing is, the browser provides the state for gamepads, not events</text>
  </message>
  <message>
    <ts>2017-07-28T19:21:35.384183</ts>
    <user>U0Z9TPK7S</user>
    <text>games will need the state</text>
  </message>
  <message>
    <ts>2017-07-28T19:22:19.392570</ts>
    <user>U0Z9TPK7S</user>
    <text>for example, if the user is pushing the stick along the X coordinate, the useful information is its current position, not the  fact that it changed</text>
  </message>
  <message>
    <ts>2017-07-28T19:23:05.401514</ts>
    <user>U0Z9TPK7S</user>
    <text>It would be very convoluted to turn the  browser's interface to an evented one and then force the developer to keep track of the state</text>
  </message>
  <message>
    <ts>2017-07-28T19:23:28.406203</ts>
    <user>U0Z9TPK7S</user>
    <text>If you use the debugger, this will also pollute the history with a fuckton of messages.</text>
  </message>
  <message>
    <ts>2017-07-28T19:23:52.410919</ts>
    <user>U23SA861Y</user>
    <text>sure, but at the same time the last thing you want is to drop to stringly typing</text>
  </message>
  <message>
    <ts>2017-07-28T19:24:08.414028</ts>
    <user>U0Z9TPK7S</user>
    <text>What do you mean by "stringly" typing?</text>
  </message>
  <message>
    <ts>2017-07-28T19:24:17.415924</ts>
    <user>U23SA861Y</user>
    <text>using strings for things that should be types</text>
  </message>
  <message>
    <ts>2017-07-28T19:25:38.431887</ts>
    <user>U0Z9TPK7S</user>
    <text>this is not the case.
My bad, I fear that my example might be ambiguous.
The strings there are just labels, so that the player knows what they're configuring.</text>
  </message>
  <message>
    <ts>2017-07-28T19:26:23.440487</ts>
    <user>U0Z9TPK7S</user>
    <text>Their only role is being shown as text to the player</text>
  </message>
  <message>
    <ts>2017-07-28T19:30:10.479925</ts>
    <user>U23SA861Y</user>
    <text>It seems like this might be trying to mix up view logic with business logic</text>
  </message>
  <message>
    <ts>2017-07-28T19:30:58.488526</ts>
    <user>U23SA861Y</user>
    <text>I should be able to deal with remapping completely seperately from how it's going to be shown to the user</text>
  </message>
  <message>
    <ts>2017-07-28T19:32:56.508764</ts>
    <user>U0Z9TPK7S</user>
    <text>The only reason they are together is because they need to fit in a gist</text>
  </message>
  <message>
    <ts>2017-07-28T19:35:06.530670</ts>
    <user>U0Z9TPK7S</user>
    <text>But it might be better to think about those as "configuration". It's better to keep them together, because every time the developer adds or modifies an input, they would need to change both the mapping strings and the function assignment.</text>
  </message>
  <message>
    <ts>2017-07-28T19:36:18.542659</ts>
    <user>U23SA861Y</user>
    <text>so, I'm thinking that this library shouldn't even have "mapping strings". It should expose a datastructure which describes the mappings in a type safe way, but the rendering and alteration of the mapping should be up to the game writer.</text>
  </message>
  <message>
    <ts>2017-07-28T19:37:40.555839</ts>
    <user>U0Z9TPK7S</user>
    <text>Everything is very much type safe.</text>
  </message>
  <message>
    <ts>2017-07-28T19:38:22.562855</ts>
    <user>U23SA861Y</user>
    <text>that wasn't what I was getting at there. Placing the strings which you will display to the user at this library level seems like an incorrect composition</text>
  </message>
  <message>
    <ts>2017-07-28T19:39:16.571481</ts>
    <user>U0Z9TPK7S</user>
    <text>Why is that?</text>
  </message>
  <message>
    <ts>2017-07-28T19:39:46.576301</ts>
    <user>U23SA861Y</user>
    <text>what if I want to use symbols or images to display to the user</text>
  </message>
  <message>
    <ts>2017-07-28T19:40:01.578869</ts>
    <user>U23SA861Y</user>
    <text>whats key here is the data structure</text>
  </message>
  <message>
    <ts>2017-07-28T19:40:01.578916</ts>
    <user>U0Z9TPK7S</user>
    <text>Then you write your own mapping tool</text>
  </message>
  <message>
    <ts>2017-07-28T19:41:30.594095</ts>
    <user>U23SA861Y</user>
    <text>You'll be tripping over your dependencies in no time if you try to mix view and data logic like this</text>
  </message>
  <message>
    <ts>2017-07-28T19:43:44.614383</ts>
    <user>U0Z9TPK7S</user>
    <text>That list/record is only a configuration thing that's used only by the mapping tool. It's not necessary to use the library</text>
  </message>
  <message>
    <ts>2017-07-28T19:44:52.625464</ts>
    <user>U0Z9TPK7S</user>
    <text>When the developer uses the mapping tool, they need a way to tell the mapping tool which buttons are needed and how they should be presented to the player.</text>
  </message>
  <message>
    <ts>2017-07-28T19:45:29.631474</ts>
    <user>U23SA861Y</user>
    <text>right, but it seems like that should be user specified types</text>
  </message>
  <message>
    <ts>2017-07-28T19:45:50.634731</ts>
    <user>U23SA861Y</user>
    <text>which when they bind it to their view they convert into messages and descriptions</text>
  </message>
  <message>
    <ts>2017-07-28T19:47:28.650468</ts>
    <user>U0Z9TPK7S</user>
    <text>Yes. The strings are specified by the developer.
There needs to be a data structure that allows the developer to give the mapping tool two kinds of information: 1) which keys are needed and 2) how those keys should be described to the user.
What structure would you suggest?</text>
  </message>
  <message>
    <ts>2017-07-28T19:50:31.678843</ts>
    <user>U23SA861Y</user>
    <text>so the binding would be something like `Dict a Input` and how they should be described should be `a-&amp;gt;Html msg`</text>
  </message>
  <message>
    <ts>2017-07-28T19:50:47.681296</ts>
    <user>U23SA861Y</user>
    <text>maybe, I'm still thinking about how I would do it myself</text>
  </message>
  <message>
    <ts>2017-07-28T19:53:42.708467</ts>
    <user>U0Z9TPK7S</user>
    <text>what is `a` in `Dict a Input`?</text>
  </message>
  <message>
    <ts>2017-07-28T19:54:01.711370</ts>
    <user>U23SA861Y</user>
    <text>anything the user wants</text>
  </message>
  <message>
    <ts>2017-07-28T19:54:35.716663</ts>
    <user>U0Z9TPK7S</user>
    <text>`a` can be only a `comparable`, which is kind of limiting</text>
  </message>
  <message>
    <ts>2017-07-28T19:54:36.716720</ts>
    <user>U23SA861Y</user>
    <text>but would be some indication of the action the input should perform in game</text>
  </message>
  <message>
    <ts>2017-07-28T19:54:44.718054</ts>
    <user>U23SA861Y</user>
    <text>in this case yes</text>
  </message>
  <message>
    <ts>2017-07-28T19:54:55.719766</ts>
    <user>U23SA861Y</user>
    <text>more limiting that only string?</text>
  </message>
  <message>
    <ts>2017-07-28T19:56:37.735992</ts>
    <user>U23SA861Y</user>
    <text>whats going through my head here is you want to store a mapping but you also might want to serialize and store it.</text>
  </message>
  <message>
    <ts>2017-07-28T19:56:46.737346</ts>
    <user>U23SA861Y</user>
    <text>That means the mapping must be plain old data</text>
  </message>
  <message>
    <ts>2017-07-28T19:56:46.737368</ts>
    <user>U0Z9TPK7S</user>
    <text>No I wouldn't</text>
  </message>
  <message>
    <ts>2017-07-28T19:57:07.740655</ts>
    <user>U23SA861Y</user>
    <text>when I asked you that you reponded "yes"</text>
  </message>
  <message>
    <ts>2017-07-28T19:57:31.744221</ts>
    <user>U0Z9TPK7S</user>
    <text>I don't need to store that</text>
  </message>
  <message>
    <ts>2017-07-28T19:57:54.747578</ts>
    <user>U0Z9TPK7S</user>
    <text>It's two different mappings</text>
  </message>
  <message>
    <ts>2017-07-28T19:58:29.753041</ts>
    <user>U0Z9TPK7S</user>
    <text>One is the mapping between raw browser data and a button name "leftX -&amp;gt; axis #0"</text>
  </message>
  <message>
    <ts>2017-07-28T19:58:46.755617</ts>
    <user>U0Z9TPK7S</user>
    <text>That will be managed and saved by an entirely different part of the code.</text>
  </message>
  <message>
    <ts>2017-07-28T19:59:35.763069</ts>
    <user>U0Z9TPK7S</user>
    <text>The other is a mapping between a button name and a description of what it does in a specific application "leftX -&amp;gt; move horizontally"</text>
  </message>
  <message>
    <ts>2017-07-28T19:59:48.765002</ts>
    <user>U0Z9TPK7S</user>
    <text>The latter is the one that the mapping tool needs to know about.</text>
  </message>
  <message>
    <ts>2017-07-28T20:00:02.767328</ts>
    <user>U0Z9TPK7S</user>
    <text>I fear that my example is grossly inadequate</text>
  </message>
  <message>
    <ts>2017-07-28T20:00:13.769667</ts>
    <user>U0Z9TPK7S</user>
    <text>I should make a full fledged app and then ask again.</text>
  </message>
  <message>
    <ts>2017-07-28T20:00:21.771073</ts>
    <user>U23SA861Y</user>
    <text>if you need to go from data to rendered on screen just use a function</text>
  </message>
  <message>
    <ts>2017-07-28T20:01:54.786408</ts>
    <user>U23SA861Y</user>
    <text>`Input -&amp;gt; Html msg`</text>
  </message>
  <message>
    <ts>2017-07-28T20:02:52.795448</ts>
    <user>U0Z9TPK7S</user>
    <text>I don't *want* the user to specify that. The whole point is to do as much work as possible for the user. If the user needs something different, they can implement their own.</text>
  </message>
  <message>
    <ts>2017-07-28T20:03:26.800579</ts>
    <user>U0Z9TPK7S</user>
    <text>I want the user to *forget* that the player might need to remap the gamepad. It's the whole point of the library.</text>
  </message>
  <message>
    <ts>2017-07-28T20:03:57.805237</ts>
    <user>U0Z9TPK7S</user>
    <text>I want people to be able to use a gamepad with the minimum effort possible.</text>
  </message>
  <message>
    <ts>2017-07-28T20:05:31.819360</ts>
    <user>U23SA861Y</user>
    <text>when I say `Input -&amp;gt; Html msg` I mean they are just encoding the logic of how to render the individual descriptions, nothing more</text>
  </message>
  <message>
    <ts>2017-07-28T20:05:53.822760</ts>
    <user>U0Z9TPK7S</user>
    <text>And when I say that I don't want that, I don't want that.</text>
  </message>
  <message>
    <ts>2017-07-28T20:06:15.825827</ts>
    <user>U23SA861Y</user>
    <text>Then do what you want, you came here for help on an API</text>
  </message>
  <message>
    <ts>2017-07-28T20:06:24.827213</ts>
    <user>U23SA861Y</user>
    <text>you've predecided what it should be</text>
  </message>
  <message>
    <ts>2017-07-28T20:06:49.830545</ts>
    <user>U0Z9TPK7S</user>
    <text>Partially, I did.</text>
  </message>
  <message>
    <ts>2017-07-28T20:07:05.832800</ts>
    <user>U0Z9TPK7S</user>
    <text>I pre-decided that it should be one of two options, which I presented in the gist.</text>
  </message>
  <message>
    <ts>2017-07-28T20:07:51.839276</ts>
    <user>U0Z9TPK7S</user>
    <text>I really appreciate your time and effort, &lt;@U23SA861Y&gt; but I fear I'm failing you with the poor explanation I provided.</text>
  </message>
  <message>
    <ts>2017-07-28T20:09:11.850216</ts>
    <user>U0Z9TPK7S</user>
    <text>I should flip a coin, implement one, and show to the community  the finished product.</text>
  </message>
  <message>
    <ts>2017-07-28T20:09:39.853961</ts>
    <user>U23SA861Y</user>
    <text>the first one allows your required inputs to be decoded from file fairly easily</text>
  </message>
  <message>
    <ts>2017-07-28T20:12:32.877465</ts>
    <user>U0Z9TPK7S</user>
    <text>I'll consider that. Thanks. :smiley:</text>
  </message>
  <message>
    <ts>2017-07-28T21:35:05.391714</ts>
    <user>U2PTZFKFX</user>
    <text>hello, can anyone give me a good tutorial on using elm with REST? i m having hard time grasping it,</text>
  </message>
  <message>
    <ts>2017-07-28T21:35:12.392341</ts>
    <user>U2PTZFKFX</user>
    <text>specially decoding json</text>
  </message>
  <message>
    <ts>2017-07-28T21:35:20.392978</ts>
    <user>U2PTZFKFX</user>
    <text>posting contents and login</text>
  </message>
  <message>
    <ts>2017-07-28T22:04:15.534815</ts>
    <user>U32BTDW4U</user>
    <text>&lt;@U2PTZFKFX&gt; Brian Hicks wrote an excellent resource for json decoding &lt;https://www.brianthicks.com/json-survival-kit&gt; . you can get the first chapter for free IIRC. I'd also recommend the guides (&lt;https://guide.elm-lang.org/interop/json.html&gt;) as well as json decode pipeline once you get a bit more familiar (&lt;https://github.com/NoRedInk/elm-decode-pipeline&gt;)</text>
  </message>
  <message>
    <ts>2017-07-28T22:05:10.539537</ts>
    <user>U32BTDW4U</user>
    <text>Json was one of the harder parts for me to grasp, don't despair!</text>
  </message>
  <message>
    <ts>2017-07-28T22:06:32.546006</ts>
    <user>U0Z9TPK7S</user>
    <text>I gave a talk about function composition some time ago &lt;https://xarvh.github.io/talk-generators/#0&gt;
Function composition is how JSON decoders work.</text>
  </message>
  <message>
    <ts>2017-07-28T22:06:51.547477</ts>
    <user>U2PTZFKFX</user>
    <text>thanks &lt;@U32BTDW4U&gt;  what about http requests and manipulating the json data?</text>
  </message>
  <message>
    <ts>2017-07-28T22:07:04.548510</ts>
    <user>U2PTZFKFX</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-28T22:08:20.554248</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U2PTZFKFX&gt; probably the easiest way to manipulate JSON data is to decode it into Elm records and lists, manipulate those as you'd do normally in the language, and re-encode them to JSON.</text>
  </message>
  <message>
    <ts>2017-07-28T22:09:10.558257</ts>
    <user>U2PTZFKFX</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-28T22:10:08.563076</ts>
    <user>U0Z9TPK7S</user>
    <text>Does that answer your questions?</text>
  </message>
  <message>
    <ts>2017-07-28T22:11:07.567787</ts>
    <user>U2PTZFKFX</user>
    <text>somehow, let me read what is posted first,</text>
  </message>
  <message>
    <ts>2017-07-28T23:04:17.797039</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U23SA861Y&gt; I stand corrected. I see now that your suggestion of making a more generic view does make sense. Again thank you for your input.</text>
  </message>
  <message>
    <ts>2017-07-29T02:13:12.452365</ts>
    <user>U0J8D9M2P</user>
    <text>Exactly</text>
  </message>
  <message>
    <ts>2017-07-29T02:13:26.453047</ts>
    <user>U0J8D9M2P</user>
    <text>&lt;@U635238TG&gt; Thank you</text>
  </message>
  <message>
    <ts>2017-07-29T04:42:01.911718</ts>
    <user>U5ZC6V535</user>
    <text>Hi i am trying to separate my top level messages to sub messages and hence i did: 

```
type GeneratorMsg
    = BoidsGenerated (List Boid)
    | ColoursGenerated (List Color)


type Msg
    = Tick Time.Time
    | UpdateWorld Window.Size
    | GeneratorMsg
```

However, in my  main update function when I use the *BoidsGenerated* message Elm thinks that it is of type *GeneratorMsg* which is correct. In the same time though - in my mind -, it is of type *Msg*. 

Is there a way to be able to handle *Msg* and *GeneratorMsg* interchangeably? Basically, i want to split my update function to smaller functions but I want everything that has to do with generated stuff to be handled by 1 separate function. Then that function will have cases for *BoidsGenerated* and *ColoursGenerated* msgs. --- thanks</text>
  </message>
  <message>
    <ts>2017-07-29T05:33:15.072319</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U5ZC6V535&gt; You should declare those as
```
type Msg
    = Tick Time.Time
    | UpdateWorld Window.Size
    | GeneratorMsg GeneratorMsg
```</text>
  </message>
  <message>
    <ts>2017-07-29T05:36:20.082036</ts>
    <user>U0Z9TPK7S</user>
    <text>But this is going to be confusing; I would recommend to change `type GeneratorMsg` into `type GeneratorOutcome`.
Then your update function can be
```
type GeneratorOutcome
 = BoidsGenerated (List Boid)
 | ColoursGenerated (List Color)

type Msg
 = GeneratorMsg GeneratorOutcome
  | ...

update msg model =
  case msg of
    GeneratorMsg generatorOutcome -&amp;gt;
      generatorUpdate generatorOutcome model

    ...
```</text>
  </message>
  <message>
    <ts>2017-07-29T05:37:09.084873</ts>
    <user>U0Z9TPK7S</user>
    <text>Does it make sense?</text>
  </message>
  <message>
    <ts>2017-07-29T05:56:43.147916</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U0Z9TPK7S&gt; Yeah, that actually makes sense :slightly_smiling_face: Thanks.</text>
  </message>
  <message>
    <ts>2017-07-29T05:57:43.151071</ts>
    <user>U0Z9TPK7S</user>
    <text>:smiley:</text>
  </message>
  <message>
    <ts>2017-07-29T06:25:25.242871</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U5ZC6V535&gt; i use a `word pattern` for delegating messages to sub modules:
```
type Msg = 
  | MsgFor_Generator GeneratorMsg
  | MsgFor_SomethingElse SomethingElseMsg
  | Click  

type GeneratorMsg =  -- no need for GeneratorOutcome, or other variations  - because sometimes "outcome" si a word that doesn't work semantically, and you waste time thinking : "what would be a better naming ?!"
    BoidsGenerated (List Boid)    
    |  ColoursGenerated (List Color)
```
It's how i keep my mind and msgs consistent. :smile:</text>
  </message>
  <message>
    <ts>2017-07-29T06:27:09.248049</ts>
    <user>U2LAL86AY</user>
    <text>and in your elm debugger will look like:
`MsgFor_Generator ( GenerateSomething { seed: 1112112 })`</text>
  </message>
  <message>
    <ts>2017-07-29T08:57:25.752871</ts>
    <user>U24HQ3RJ7</user>
    <text>hi.. i am new to CSS and have to make a web / mobile app .. 
I am using Elm for it. :slightly_smiling_face:
Has the community converged on some particular css library ? elm-css vs elm-style-elements vs something_else ..</text>
  </message>
  <message>
    <ts>2017-07-29T09:21:00.851858</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U24HQ3RJ7&gt; Hi! Welcome!</text>
  </message>
  <message>
    <ts>2017-07-29T09:21:53.855346</ts>
    <user>U0Z9TPK7S</user>
    <text>elm-style-element is still in its infancy, the only complete and solid CSS option right now is elm-css</text>
  </message>
  <message>
    <ts>2017-07-29T09:31:30.895223</ts>
    <user>U24HQ3RJ7</user>
    <text>&lt;@U0Z9TPK7S&gt; thanks.. since this is side project, i will give style-elments a try.. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-29T11:25:43.420090</ts>
    <user>U6EQ9E3EC</user>
    <text>Hi there, people</text>
  </message>
  <message>
    <ts>2017-07-29T12:01:29.593842</ts>
    <user>U2MRDAK6U</user>
    <text>Hello! :smile: Are there any resources about how to create an Elm library online? I have already made a few standalone projects in Elm, now I would like to make my own library. I know how to use libraries available on &lt;http://package.elm-lang.org|package.elm-lang.org&gt; but I have no idea how to use a local library. Any pointers?</text>
  </message>
  <message>
    <ts>2017-07-29T12:06:37.620254</ts>
    <user>U3SJEDR96</user>
    <text>There's no official way, but there are tools like elm-github-install and elm_self_publish that support installing a local package into another package. Though if it's worth making into a package, you might as well publish is :)</text>
  </message>
  <message>
    <ts>2017-07-29T12:10:11.637525</ts>
    <user>U2MRDAK6U</user>
    <text>Great thanks for the tools! `elm_self_publish` seems to do what I want. Are there any plans for a more official method to do this?</text>
  </message>
  <message>
    <ts>2017-07-29T12:12:14.647120</ts>
    <user>U2MRDAK6U</user>
    <text>Actually `elm-github-install` seems to do relative paths as well as github repos</text>
  </message>
  <message>
    <ts>2017-07-29T12:29:27.731658</ts>
    <user>U3SJEDR96</user>
    <text>Self publish is useful for testing local modifications and whatnot, elm-github-install is a more comprehensive tool, at the cost of actually replacing most of `elm-package install`'s functionality :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-29T13:06:31.922965</ts>
    <user>U6D3ERLA1</user>
    <text>The link from &lt;http://package.elm-lang.org/packages/elm-lang/core/1.1.0/Signal&gt; -&amp;gt; &lt;http://package.elm-lang.org/packages/elm-lang/core/latest/Signal&gt; appears to be broken in the docs</text>
  </message>
  <message>
    <ts>2017-07-29T13:57:19.169348</ts>
    <user>U3SJEDR96</user>
    <text>They're also long deprecated..</text>
  </message>
  <message>
    <ts>2017-07-29T13:57:20.169413</ts>
    <user>U1AN4JRFV</user>
    <text>&lt;@U6D3ERLA1&gt;: Signals are not longer a thing in 0.18 (latest)</text>
  </message>
  <message>
    <ts>2017-07-29T13:57:33.170450</ts>
    <user>U3SJEDR96</user>
    <text>Pre-0.17 even :D</text>
  </message>
  <message>
    <ts>2017-07-29T13:58:00.172577</ts>
    <user>U6D3ERLA1</user>
    <text>Gotcha - the link is a little misleading...</text>
  </message>
  <message>
    <ts>2017-07-29T14:36:09.360206</ts>
    <user>U3FJSB596</user>
    <text>Hello everyone!

I was recently introduced to Purescript, and it seems to be a nice way to guarantee safety and correctness to my code outside of Elm. I went online to look for articles and tutorials on how to integrate Purescript and Elm but I only found articles pitting these two tools against each other.

So I have the following questions:

1)  What do you think of this? (Using mostly Elm in your FE, and use Purescript beyond your ports)
2) Any suggestions, articles, or tutorials on how to implement this?
3) If you do not use Purescript outside of Elm, what do you do to gain most of Elm’s guarantee’s outside of Elm?

Thanks for your time!</text>
  </message>
  <message>
    <ts>2017-07-29T14:57:35.460630</ts>
    <user>U0LL6NC1K</user>
    <text>&lt;@U3FJSB596&gt; i think you might ask this in a more general chat too, like the FPChat Slack (&lt;https://fpchat-invite.herokuapp.com&gt;). i've written a post about integrating and doing codegen for an elm app inside a purescript one</text>
  </message>
  <message>
    <ts>2017-07-29T15:00:28.475705</ts>
    <user>U3FJSB596</user>
    <text>&lt;@U0LL6NC1K&gt; Thanks for the tip. Where can I find the post you’ve written?</text>
  </message>
  <message>
    <ts>2017-07-29T15:00:57.478305</ts>
    <user>U0LL6NC1K</user>
    <text>i think someone posted it here the other week on &lt;#C0CJ671HU|random&gt;? it's here: &lt;http://qiita.com/kimagure/items/d12525d42516f95dd541&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T15:01:18.480024</ts>
    <user>U0LL6NC1K</user>
    <text>i'm usually in that other slack, feel free to ping me on &lt;#C0CJ3SBBM|general&gt; or #purescript there :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-29T16:20:42.848603</ts>
    <user>U5ZC6V535</user>
    <text>Thanks this looks interesting. I may give that a try.</text>
  </message>
  <message>
    <ts>2017-07-29T17:18:13.094399</ts>
    <user>U170TNSTZ</user>
    <text>In React, I can get a reference to a dom element by implementing a `ref` function for a virtual dom node. Is something similar possible in Elm?</text>
  </message>
  <message>
    <ts>2017-07-29T17:19:21.098496</ts>
    <user>U170TNSTZ</user>
    <text>I am looking at an example of setting focus, and it seems it’s using the `id` attributes for identification, which is brittle, since it’s a global id</text>
  </message>
  <message>
    <ts>2017-07-29T17:19:38.099695</ts>
    <user>U170TNSTZ</user>
    <text>(Example is here: &lt;https://embed.ellie-app.com/vsvWQMXjQqa1/0&gt;)</text>
  </message>
  <message>
    <ts>2017-07-29T17:57:47.251699</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U2MRDAK6U&gt; you want `elm package publish`. That's the official way of publishing a library :smiley:</text>
  </message>
  <message>
    <ts>2017-07-29T20:41:15.822756</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U170TNSTZ&gt; there isn't a way. </text>
  </message>
  <message>
    <ts>2017-07-29T21:23:42.955625</ts>
    <user>U2PTZFKFX</user>
    <text>Using models seems to be confusing at times analog to the MVC pattern for back end development. won't it be nice to use pattern instead?</text>
  </message>
  <message>
    <ts>2017-07-29T22:24:08.142130</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U170TNSTZ&gt; for focus there's &lt;http://package.elm-lang.org/packages/elm-lang/dom/1.1.1/Dom#focus&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T22:48:52.216637</ts>
    <user>U2PTZFKFX</user>
    <text>Hello, anyone sucessfully implemented bulk actions using ELM?</text>
  </message>
  <message>
    <ts>2017-07-29T23:18:41.304174</ts>
    <user>U0Z9TPK7S</user>
    <text>"bulk actions"?</text>
  </message>
  <message>
    <ts>2017-07-29T23:49:03.387043</ts>
    <user>U2PTZFKFX</user>
    <text>&lt;@U0Z9TPK7S&gt; yes</text>
  </message>
  <message>
    <ts>2017-07-29T23:49:09.387308</ts>
    <user>U2PTZFKFX</user>
    <text>let's say, table with 3 columns
`
Actions: update column  newmae: 'mynewname'

id, name, newname
1, testnae, mynewname
2, anothername, mynewname

and so on...
`


[3:03] 
so action update column, supposed to add a bulk action and send the updated result to the server</text>
  </message>
  <message>
    <ts>2017-07-29T23:51:56.395035</ts>
    <user>U0Z9TPK7S</user>
    <text>I'm sorry, I'm still missing the context. It might be an API I don't know about. Is this a request going from the browser to a remote server?</text>
  </message>
  <message>
    <ts>2017-07-29T23:52:25.396321</ts>
    <user>U2PTZFKFX</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-29T23:54:29.401741</ts>
    <user>U2PTZFKFX</user>
    <text>ok, to further explain, i m loading set of data via api from remote server, which will be contained in a row, later, i want to modify part of all of the record and update back, just like how gmail functionality works, were a user can mark set of messages to be send to trash, or apply some labels to some specific messages,</text>
  </message>
  <message>
    <ts>2017-07-29T23:56:04.406017</ts>
    <user>U0Z9TPK7S</user>
    <text>Ok, one thing at the time.
Do you need to modify the copy of the records that is in the browser, or the one that's on the server?</text>
  </message>
  <message>
    <ts>2017-07-29T23:56:34.407397</ts>
    <user>U2PTZFKFX</user>
    <text>that's on the server, but it will be done from the client side,</text>
  </message>
  <message>
    <ts>2017-07-29T23:58:46.413386</ts>
    <user>U0Z9TPK7S</user>
    <text>What part of it will be done on the client side?</text>
  </message>
  <message>
    <ts>2017-07-29T23:58:55.413739</ts>
    <user>U0Z9TPK7S</user>
    <text>I assume that within Elm, you are modelling that information as a `List Something`.</text>
  </message>
  <message>
    <ts>2017-07-29T23:59:16.414744</ts>
    <user>U2PTZFKFX</user>
    <text>the actions</text>
  </message>
  <message>
    <ts>2017-07-29T23:59:51.416304</ts>
    <user>U0Z9TPK7S</user>
    <text>So, you need to create a list of actions that the server will need to perform?</text>
  </message>
  <message>
    <ts>2017-07-30T00:00:12.417859</ts>
    <user>U2PTZFKFX</user>
    <text>yes,</text>
  </message>
  <message>
    <ts>2017-07-30T00:00:42.419791</ts>
    <user>U0Z9TPK7S</user>
    <text>How you want to model those actions?</text>
  </message>
  <message>
    <ts>2017-07-30T00:01:48.423785</ts>
    <user>U2PTZFKFX</user>
    <text>ok, let me start with sample examples</text>
  </message>
  <message>
    <ts>2017-07-30T03:26:43.989724</ts>
    <user>U3L8MM10T</user>
    <text>It seems that `Float` has similar limitations as `Int` regarding _maxSafeInt_, as shown here: ```&amp;gt; maxSafeInt = (2 ^ 53) - 1
9007199254740991 : number
&amp;gt; fmaxSafeInt = toFloat maxSafeInt
9007199254740991 : Float
&amp;gt; fmaxSafeInt + 2.0 - 3.0
9007199254740989 : Float
&amp;gt; fmaxSafeInt - 3.0 + 2.0
9007199254740990 : Float
``` Kindly advise.</text>
  </message>
  <message>
    <ts>2017-07-30T03:30:09.999001</ts>
    <user>U23SA861Y</user>
    <text>its backed by js, what were you expecting in large numbers?</text>
  </message>
  <message>
    <ts>2017-07-30T03:31:17.002553</ts>
    <user>U3L8MM10T</user>
    <text>I'm not sure myself, but would like to know what max safe upper limit is for `Float`.</text>
  </message>
  <message>
    <ts>2017-07-30T03:32:42.006684</ts>
    <user>U3L8MM10T</user>
    <text>Floats to my understanding are inherently imprecise at a certain point.</text>
  </message>
  <message>
    <ts>2017-07-30T03:38:19.022667</ts>
    <user>U3SJEDR96</user>
    <text>Floats are inherently imprecise at any point. `0.1 + 0.2 == 0.3` is  `False`</text>
  </message>
  <message>
    <ts>2017-07-30T03:39:22.025360</ts>
    <user>U3SJEDR96</user>
    <text>An integer is a float without decimals, basically, so for floats that end in `.0`, the limits are the same as for integers</text>
  </message>
  <message>
    <ts>2017-07-30T03:44:36.039233</ts>
    <user>U3SJEDR96</user>
    <text>when comparing floats for equality, you should generally allow for a margin of error (`epsilon`) relative to the inputs</text>
  </message>
  <message>
    <ts>2017-07-30T03:44:53.040016</ts>
    <user>U3L8MM10T</user>
    <text>yes, thanks</text>
  </message>
  <message>
    <ts>2017-07-30T03:49:33.052491</ts>
    <user>U3L8MM10T</user>
    <text>But I would expect `Basics` to have such an equality function for `Float`.</text>
  </message>
  <message>
    <ts>2017-07-30T03:50:02.053806</ts>
    <user>U4872964V</user>
    <text>&lt;@U3L8MM10T&gt; floats are as defined by IEEE 754 double precision floating-point numbers</text>
  </message>
  <message>
    <ts>2017-07-30T03:51:15.057380</ts>
    <user>U4872964V</user>
    <text>so the limitations of them are pretty well known</text>
  </message>
  <message>
    <ts>2017-07-30T03:51:34.058212</ts>
    <user>U3SJEDR96</user>
    <text>I _think_ it's somewhere on the TODO list, but it's hard to get a "one size fits all" solution for even something as seemingly simple as floating point equality. Such a function _is_ being integrated into `elm-test`, btw, with the slight annoyance that you have to manually specify a margin of error which will then be interpreted relative to the input</text>
  </message>
  <message>
    <ts>2017-07-30T03:51:49.058843</ts>
    <user>U3SJEDR96</user>
    <text>and then there's the special case of one or more args being `0` :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-07-30T04:05:21.098092</ts>
    <user>U23SA861Y</user>
    <text>floats are inheriently imprecise at any point.</text>
  </message>
  <message>
    <ts>2017-07-30T04:25:47.156764</ts>
    <user>U4872964V</user>
    <text>&lt;@U23SA861Y&gt; Re floats, indeed they are inherently imprecise. Integers should probably be some kind of bignum (unlimited) in Elm though. Having limited integers invites trouble. If you really want speed, Elm could provide special types for that.</text>
  </message>
  <message>
    <ts>2017-07-30T06:05:23.455693</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U23SA861Y&gt; that was indeed my opening statement :smile:</text>
  </message>
  <message>
    <ts>2017-07-30T06:21:29.501774</ts>
    <user>U2LAL86AY</user>
    <text>regarding floating point representation, i watched a talk a few days ago - Douglas Crockford explaining another implementation for numbers -&amp;gt;  &lt;https://youtu.be/bo36MrBfTk4?t=2580&gt; - he claims will solve a lot of our problems, i'm not experienced enough to say one of the other - but i think if something like he proposes can be implemented in elm - maybe would be useful to do it. One more awesome reason to choose elm :smile:</text>
  </message>
  <message>
    <ts>2017-07-30T06:23:56.508616</ts>
    <user>U4872964V</user>
    <text>It would be great if Elm numbers were not tied to javascript strangeness, for sure</text>
  </message>
  <message>
    <ts>2017-07-30T06:26:16.515491</ts>
    <user>U4872964V</user>
    <text>&lt;@U2LAL86AY&gt; is it the DEC64 he’s talking about?</text>
  </message>
  <message>
    <ts>2017-07-30T06:31:14.530939</ts>
    <user>U4F64AKQV</user>
    <text>&lt;@U4872964V&gt; Yeah, I’m not sure how many problems it would actually solve for Elm though.</text>
  </message>
  <message>
    <ts>2017-07-30T06:50:48.588430</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U4872964V&gt; yep, DEC64 - &lt;@U4F64AKQV&gt;  me neither. but `this idea that we could implement something completely different` - not needing to copy old stuff that's buggy - seems very applealing :simple_smile:  As Douglas Crockford says - our memory and computational power has increased a lot - and optimizing for it might be like optimizing for datastructure - when dom rendering it accounts of 90% of performance. Optimizing for ease of reasoning and no bugs is more important then memory .</text>
  </message>
  <message>
    <ts>2017-07-30T06:54:47.599599</ts>
    <user>U170TNSTZ</user>
    <text>Wouldn’t it be a good thing to have a way to get the actual HTML element of a virtual DOM node, like you can in React? Or does this somehow violate Elm principles?</text>
  </message>
  <message>
    <ts>2017-07-30T07:01:24.620241</ts>
    <user>U1G51S63S</user>
    <text>Do you know if there is easy way to "rate-limit" events? Something like with setTimeout in vanilla js. For example I am watching for `Window.resizes` and really don't want to redraw on each pixel changed, maybe just after 300ms when resizing is finished</text>
  </message>
  <message>
    <ts>2017-07-30T07:01:24.620265</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U170TNSTZ&gt; there is the issue of how you would get access to that value</text>
  </message>
  <message>
    <ts>2017-07-30T07:02:24.623365</ts>
    <user>U1G51S63S</user>
    <text>Like this snippet in jquery: ```$(window).resize(function() {
    clearTimeout(window.resizedFinished);
    window.resizedFinished = setTimeout(function(){
        console.log('Resized finished.');
    }, 250);
});
```</text>
  </message>
  <message>
    <ts>2017-07-30T07:02:58.625006</ts>
    <user>U1G51S63S</user>
    <text>So even will be fired if user finished resize (didn't touch it for a 250ms)</text>
  </message>
  <message>
    <ts>2017-07-30T07:04:02.627817</ts>
    <user>U153UK3FA</user>
    <text>set a flag in the model and check that flag</text>
  </message>
  <message>
    <ts>2017-07-30T07:04:40.629654</ts>
    <user>U4872964V</user>
    <text>&lt;@U170TNSTZ&gt; what do you mean by the actual HTML element?</text>
  </message>
  <message>
    <ts>2017-07-30T07:04:50.630070</ts>
    <user>U1G51S63S</user>
    <text>but redraw will be because of model changed then :smile:</text>
  </message>
  <message>
    <ts>2017-07-30T07:05:19.631694</ts>
    <user>U1G51S63S</user>
    <text>I thought maybe it's possible to do w/o storing flag/time in model. Maybe via `Task` and `Process.sleep`?</text>
  </message>
  <message>
    <ts>2017-07-30T07:05:53.633374</ts>
    <user>U4872964V</user>
    <text>&lt;@U170TNSTZ&gt; you mean having some kind of concrete Html type in Elm, instead of the current opaque one?</text>
  </message>
  <message>
    <ts>2017-07-30T07:08:45.641894</ts>
    <user>U170TNSTZ</user>
    <text>&lt;@U4872964V&gt; Yes, so instead of invoking eg `Dom.focus` on an id, you'd invoke it on an actual DOM node.</text>
  </message>
  <message>
    <ts>2017-07-30T07:10:11.645987</ts>
    <user>U4872964V</user>
    <text>&lt;@U170TNSTZ&gt;, ok, so not Html, but DOM access?</text>
  </message>
  <message>
    <ts>2017-07-30T07:10:34.647181</ts>
    <user>U4872964V</user>
    <text>Accessing DOM elements in Elm would indeed be against the Elm principles.</text>
  </message>
  <message>
    <ts>2017-07-30T07:11:22.649482</ts>
    <user>U0H3A9XLN</user>
    <text>Is unsafeness of global id following Elm principles?</text>
  </message>
  <message>
    <ts>2017-07-30T07:11:49.650658</ts>
    <user>U4872964V</user>
    <text>unsafeness?</text>
  </message>
  <message>
    <ts>2017-07-30T07:12:34.652780</ts>
    <user>U1G51S63S</user>
    <text>just noticed that feature I am asked for named `debounced events`. there is a lot of of packages for elm already, but all of them rely on some state. so looks like it can't be w/o state :smile:</text>
  </message>
  <message>
    <ts>2017-07-30T07:12:42.653161</ts>
    <user>U0H3A9XLN</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-07-30T07:13:23.655034</ts>
    <user>U0H3A9XLN</user>
    <text>Global string identifier, type size = infinity</text>
  </message>
  <message>
    <ts>2017-07-30T07:13:28.655262</ts>
    <user>U4872964V</user>
    <text>&lt;@U1G51S63S&gt; indeed, to debounce events in Elm you’d need to have it in the state</text>
  </message>
  <message>
    <ts>2017-07-30T07:13:57.656542</ts>
    <user>U0H3A9XLN</user>
    <text>Same as using strings instead of union types</text>
  </message>
  <message>
    <ts>2017-07-30T07:15:07.659847</ts>
    <user>U153UK3FA</user>
    <text>But any reference to a DOM node would also be unsafe since it may not exist want you want to access it</text>
  </message>
  <message>
    <ts>2017-07-30T07:15:32.661282</ts>
    <user>U170TNSTZ</user>
    <text>Agree with &lt;@U0H3A9XLN&gt; - even in plain ol' js-React, stringly typed refs are avoided :-)</text>
  </message>
  <message>
    <ts>2017-07-30T07:15:37.661522</ts>
    <user>U4872964V</user>
    <text>&lt;@U0H3A9XLN&gt; well it may be that id:s are duplicated or missing, but how is it unsafe?</text>
  </message>
  <message>
    <ts>2017-07-30T07:16:17.663605</ts>
    <user>U153UK3FA</user>
    <text>The problem is how your code would get access to the ref</text>
  </message>
  <message>
    <ts>2017-07-30T07:16:42.664935</ts>
    <user>U4872964V</user>
    <text>The DOM is not really suited to Elm, we just make a best effort to wrap it up in our type-safe, pure world</text>
  </message>
  <message>
    <ts>2017-07-30T07:17:44.667842</ts>
    <user>U0H3A9XLN</user>
    <text>&lt;@U4872964V&gt; how is it unsafe to use strings instead of union types?</text>
  </message>
  <message>
    <ts>2017-07-30T07:18:19.669575</ts>
    <user>U0H3A9XLN</user>
    <text>By answering this question you'll get answer for your one</text>
  </message>
  <message>
    <ts>2017-07-30T07:25:00.688321</ts>
    <user>U153UK3FA</user>
    <text>the refs would need to be passed in `update` so you could produce `Cmd`s that acted on them, but you’d also get all the refs for the whole view so you’d need a way to find the one that you want.</text>
  </message>
  <message>
    <ts>2017-07-30T07:25:39.690408</ts>
    <user>U153UK3FA</user>
    <text>perhaps the refs could be in a `Dict String Ref` and you could lookup the refs via a string…..</text>
  </message>
  <message>
    <ts>2017-07-30T07:30:11.704653</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U0H3A9XLN&gt; There's nothing inherently unsafe about strings. Maybe I misunderstood the point you were trying to make.</text>
  </message>
  <message>
    <ts>2017-07-30T08:03:16.815687</ts>
    <user>U170TNSTZ</user>
    <text>&lt;@U6EAT2Z37&gt; I guess I’d interpret “strings being unsafe” as them having a higher chance of not being correct. Eg, the compiler cannot help me with spelling errors. Also, several DOM elements can share an ID.

React’s `ref` feature guarantees that the reference is either pointing to a single DOM element or null:

&amp;gt; React will call the ref callback with the DOM element when the component mounts, and call it with null when it unmounts.</text>
  </message>
  <message>
    <ts>2017-07-30T08:03:23.816156</ts>
    <user>U170TNSTZ</user>
    <text>(from &lt;https://facebook.github.io/react/docs/refs-and-the-dom.html&gt;)</text>
  </message>
  <message>
    <ts>2017-07-30T08:12:29.848283</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U170TNSTZ&gt; what are you trying to achieve exactly? I have found myself in a similar situation when writing our on-click-outside code</text>
  </message>
  <message>
    <ts>2017-07-30T08:28:51.904664</ts>
    <user>U4872964V</user>
    <text>It would be interesting to see if there could be a good api for onMount/onRemove-like functionality in Elm, for sure</text>
  </message>
  <message>
    <ts>2017-07-30T08:30:19.910383</ts>
    <user>U0Z9TPK7S</user>
    <text>TBH, that seems like a terrible idea</text>
  </message>
  <message>
    <ts>2017-07-30T08:30:29.911235</ts>
    <user>U0Z9TPK7S</user>
    <text>We'd go back to the worst parts of React</text>
  </message>
  <message>
    <ts>2017-07-30T08:30:35.911680</ts>
    <user>U4872964V</user>
    <text>&lt;@U0Z9TPK7S&gt; well, for things like `Dom.focus` etc</text>
  </message>
  <message>
    <ts>2017-07-30T08:30:37.911805</ts>
    <user>U0Z9TPK7S</user>
    <text>It would be a step back</text>
  </message>
  <message>
    <ts>2017-07-30T08:31:35.915457</ts>
    <user>U4872964V</user>
    <text>Wether it’s a step back or not would depend on what the api is and what you’d use it for, I think</text>
  </message>
  <message>
    <ts>2017-07-30T08:34:47.926704</ts>
    <user>U4872964V</user>
    <text>Not having to invent unique id:s but instead get them back from the runtime</text>
  </message>
  <message>
    <ts>2017-07-30T08:36:33.932550</ts>
    <user>U153UK3FA</user>
    <text>`Dom.focus` is kind of a kludge,  what you really want to be able to do is set focus in `view`</text>
  </message>
  <message>
    <ts>2017-07-30T09:01:50.025166</ts>
    <user>U4872964V</user>
    <text>&lt;@U153UK3FA&gt;, yes, perhaps</text>
  </message>
  <message>
    <ts>2017-07-30T09:02:20.026980</ts>
    <user>U4872964V</user>
    <text>then you’d have to keep track of focus in your model too</text>
  </message>
  <message>
    <ts>2017-07-30T10:51:39.467626</ts>
    <user>U42FYKFRN</user>
    <text>hey - what are people doing for Localstorage ? There don’t seem to be any packages for it - so is everyone just doing it with ports?</text>
  </message>
  <message>
    <ts>2017-07-30T11:04:00.520601</ts>
    <user>U4872964V</user>
    <text>&lt;@U42FYKFRN&gt; yes, ports. there are some packages too, but not on elm packages (because they would use native code)</text>
  </message>
  <message>
    <ts>2017-07-30T11:06:26.531241</ts>
    <user>U42FYKFRN</user>
    <text>I tried this one: &lt;https://github.com/JohnBugner/elm-storage&gt; but it’s broken for me at least</text>
  </message>
  <message>
    <ts>2017-07-30T11:06:41.532241</ts>
    <user>U42FYKFRN</user>
    <text>I just fixed it locally - might send a pull request</text>
  </message>
  <message>
    <ts>2017-07-30T11:31:23.638261</ts>
    <user>U26VBS4NA</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-07-30T12:30:02.900546</ts>
    <user>U5ZC6V535</user>
    <text>This was an answer to a previous question of mine; but now I have a slightly different problem..

Say that I want to use `BoidsGenerated` in my main update function — I can’t really do that because `BoidsGenerated` is not of type `Msg`. Is there a way to overcome this? Maybe with Cmd.map (i am not sure). — Thanks</text>
  </message>
  <message>
    <ts>2017-07-30T12:46:45.974544</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U42FYKFRN&gt;  the [elm-spa-example](&lt;https://github.com/rtfeldman/elm-spa-example&gt;) includes a basic usage of localstorage through ports</text>
  </message>
  <message>
    <ts>2017-07-30T12:49:04.984471</ts>
    <user>U4872964V</user>
    <text>&lt;@U5ZC6V535&gt; what do you mean by “use `BoidsGenerated` in my main update function”?</text>
  </message>
  <message>
    <ts>2017-07-30T12:49:43.987201</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U4872964V&gt; Here’s what I am trying to do: 

```
        UpdateWorld size -&amp;gt;
            let
                randomPosition = (0,0)
            in
            ( { model | world = ( size.width, size.height ) }
            , Seed.generateBoids BoidsGenerated 1500 randomPosition maxRandomSpeed
            )
```</text>
  </message>
  <message>
    <ts>2017-07-30T12:50:25.990504</ts>
    <user>U4872964V</user>
    <text>&lt;@U5ZC6V535&gt; oh, I see, you have to use something like `(GeneratorMsg &amp;lt;&amp;lt; BoidsGenerated)`</text>
  </message>
  <message>
    <ts>2017-07-30T12:54:40.009186</ts>
    <user>U5ZC6V535</user>
    <text>&lt;@U4872964V&gt; Hmm, so we are combining `GeneratorMsg` and `BoidsGenerated` messages together. That makes sense :slightly_smiling_face: Thanks</text>
  </message>
  <message>
    <ts>2017-07-30T12:55:25.012612</ts>
    <user>U3SJEDR96</user>
    <text>(seeing answers *click* like that makes me so happy)</text>
  </message>
  <message>
    <ts>2017-07-30T12:57:26.021727</ts>
    <user>U4G7CC18U</user>
    <text>Good evening,
I have an array of coordinates `(Int, Int)`. Let's assume the array has at least 3 coordinates, so it defines a polygon.
I have a function that knows the `midpoint` between two coordinates.

I am now looking a function that given this array [c1, c2, c3, c4] will give me an array [midpoint(c1,c2), midpoint(c2, c3), midpoint(c3,c4), midpoint(c4,c1)]

That last part is the one that is bending my mind.. any pointers would be greatly appreciated :)</text>
  </message>
  <message>
    <ts>2017-07-30T12:58:28.026252</ts>
    <user>U4G7CC18U</user>
    <text>I have been looking into List and List.Extra, but I don't see anything too obvious</text>
  </message>
  <message>
    <ts>2017-07-30T12:58:38.026923</ts>
    <user>U4872964V</user>
    <text>if you had the array `[c1, c2, c3, c4, c1]` could you solve it easily then?</text>
  </message>
  <message>
    <ts>2017-07-30T12:59:39.031521</ts>
    <user>U4G7CC18U</user>
    <text>That came across my mind. It would then reduce the problem to something a little simpler. Now I would need to find the highorder function that applies a function to every 2 items of an array</text>
  </message>
  <message>
    <ts>2017-07-30T13:00:13.034711</ts>
    <user>U4G7CC18U</user>
    <text>highorder midpoint [c1, c2, c3, c1]  &amp;lt;-- looking for the correct `highorder`</text>
  </message>
  <message>
    <ts>2017-07-30T13:00:49.038043</ts>
    <user>U4G7CC18U</user>
    <text>because I can create an `appendHeadAsLastItem` to get my list into that state</text>
  </message>
  <message>
    <ts>2017-07-30T13:01:28.041469</ts>
    <user>U4872964V</user>
    <text>if you had the arrays `[c1, c2, c3, c4]` and `[c2, c3, c4, c1]` and the function `map2` perhaps</text>
  </message>
  <message>
    <ts>2017-07-30T13:01:46.042901</ts>
    <user>U4G7CC18U</user>
    <text>Ohh! I like your thinking</text>
  </message>
  <message>
    <ts>2017-07-30T13:02:31.046770</ts>
    <user>U4G7CC18U</user>
    <text>I'll give that a try, if I can find something like a shift function</text>
  </message>
  <message>
    <ts>2017-07-30T13:02:59.048866</ts>
    <user>U1AN4JRFV</user>
    <text>&lt;@U4G7CC18U&gt;: i can help there. that sounds exactly like the one question i had a while back: &lt;https://stackoverflow.com/questions/36485819/map-list-onto-shifted-self&gt;</text>
  </message>
  <message>
    <ts>2017-07-30T13:05:13.059940</ts>
    <user>U4872964V</user>
    <text>&lt;@U1AN4JRFV&gt; even easier is `drop 1 list ++ take 1 list`</text>
  </message>
  <message>
    <ts>2017-07-30T13:05:46.062826</ts>
    <user>U1AN4JRFV</user>
    <text>indeed!</text>
  </message>
  <message>
    <ts>2017-07-30T13:07:59.073563</ts>
    <user>U4872964V</user>
    <text>and double `reverse` if you do it the other way</text>
  </message>
  <message>
    <ts>2017-07-30T13:10:17.083950</ts>
    <user>U3SJEDR96</user>
    <text>alternatively, &lt;https://ellie-app.com/3SZgnyK64WGa1/0&gt;</text>
  </message>
  <message>
    <ts>2017-07-30T13:10:18.084028</ts>
    <user>U1AN4JRFV</user>
    <text>but it serves as an example for pattern matching with lists, which was a great lesson for me back then.</text>
  </message>
  <message>
    <ts>2017-07-30T13:13:10.097176</ts>
    <user>U4872964V</user>
    <text>so, `List.map2 midpoint list (drop 1 list ++ list)` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-30T13:14:02.101415</ts>
    <user>U3SJEDR96</user>
    <text>heh, true :smile:</text>
  </message>
  <message>
    <ts>2017-07-30T13:23:29.146947</ts>
    <user>U4G7CC18U</user>
    <text>It actually worked, I got a little further down the road, but I must now re-challenge my model, because maybe the one I have isn't being too useful haha :D ELM is such great fun :) :)</text>
  </message>
  <message>
    <ts>2017-07-30T13:23:53.148831</ts>
    <user>U4G7CC18U</user>
    <text>Being able to confidently challenge yourself and knowing that the compiler has got your back.. :)</text>
  </message>
  <message>
    <ts>2017-07-30T13:26:21.160784</ts>
    <user>U1AN4JRFV</user>
    <text>then ELM might after all be an acronym for: Elm Loves Muckers</text>
  </message>
  <message>
    <ts>2017-07-30T13:27:27.165498</ts>
    <user>U1AN4JRFV</user>
    <text>(or something.... but it's not, it's either elm or Elm, sorry for being pedantic)</text>
  </message>
  <message>
    <ts>2017-07-30T13:56:39.303328</ts>
    <user>U4G7CC18U</user>
    <text>ELM = Entry Level Mathematics.. I read that somewhere official enough</text>
  </message>
  <message>
    <ts>2017-07-30T14:45:31.538762</ts>
    <user>U5QJW0DDE</user>
    <text>what is the best way to approach concurrency; if I have a long-running calculation that is easily broken up into joined parts and I want it to process without hogging the UI, how best to approach?</text>
  </message>
  <message>
    <ts>2017-07-30T14:45:53.540519</ts>
    <user>U5QJW0DDE</user>
    <text>(without using web worker)</text>
  </message>
  <message>
    <ts>2017-07-30T14:57:59.597400</ts>
    <user>U4872964V</user>
    <text>&lt;@U5QJW0DDE&gt; make a state model of the calculation and do each part and send a message for the next part, put that state model as part of your application model</text>
  </message>
  <message>
    <ts>2017-07-30T14:58:25.599468</ts>
    <user>U5QJW0DDE</user>
    <text>so it will run a part on each requestAnimationframe ?</text>
  </message>
  <message>
    <ts>2017-07-30T14:58:38.600484</ts>
    <user>U4872964V</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-30T14:59:03.602321</ts>
    <user>U5QJW0DDE</user>
    <text>is there a higher-level library for handling this automatically, like a calculation queue, etc</text>
  </message>
  <message>
    <ts>2017-07-30T14:59:14.603237</ts>
    <user>U4872964V</user>
    <text>or more, not sure of how the runtime schedules that, actually</text>
  </message>
  <message>
    <ts>2017-07-30T15:00:32.610627</ts>
    <user>U1CE9DL9H</user>
    <text>this is where the purescript people come in to say that they can do `map2` on `Cmd`s, right?</text>
  </message>
  <message>
    <ts>2017-07-30T15:01:26.615680</ts>
    <user>U1CE9DL9H</user>
    <text>because I believe multiple Cmd`s are already ran concurrently, so the tricky bit is putting your individual results back together into something you want in your model</text>
  </message>
  <message>
    <ts>2017-07-30T15:01:40.616779</ts>
    <user>U5QJW0DDE</user>
    <text>i'm trying to find a similar abstraction to core.async where you can have multiple channels reading, writing and processing data on queues simultaneously</text>
  </message>
  <message>
    <ts>2017-07-30T15:02:43.621947</ts>
    <user>U5QJW0DDE</user>
    <text>i suppose i could try to do it manually with the models and messages as you say</text>
  </message>
  <message>
    <ts>2017-07-30T15:03:40.626602</ts>
    <user>U4872964V</user>
    <text>well, you can do it with tasks and `Process.spawn` I suppose, I’ve just never used that</text>
  </message>
  <message>
    <ts>2017-07-30T15:03:50.627458</ts>
    <user>U1CE9DL9H</user>
    <text>you can't get the result out of those tasks</text>
  </message>
  <message>
    <ts>2017-07-30T15:04:22.630054</ts>
    <user>U4872964V</user>
    <text>maybe not, when I look at ti</text>
  </message>
  <message>
    <ts>2017-07-30T15:04:23.630203</ts>
    <user>U1CE9DL9H</user>
    <text>so if they are http requests that hit a server somewhere, that's fine, but you cannot actually access the result of those tasks, for now</text>
  </message>
  <message>
    <ts>2017-07-30T15:04:34.631078</ts>
    <user>U5QJW0DDE</user>
    <text>hm ok</text>
  </message>
  <message>
    <ts>2017-07-30T15:05:48.637537</ts>
    <user>U1CE9DL9H</user>
    <text>which is a shame, because any sort of scatter/gather you create will right now be very specific to your application</text>
  </message>
  <message>
    <ts>2017-07-30T15:05:55.638064</ts>
    <user>U1CE9DL9H</user>
    <text>it is not re-usable</text>
  </message>
  <message>
    <ts>2017-07-30T15:10:48.661984</ts>
    <user>U5QJW0DDE</user>
    <text>i find that asynchronous programming has changed my mode of thinking as much as functional programming did</text>
  </message>
  <message>
    <ts>2017-07-30T15:10:56.662621</ts>
    <user>U5QJW0DDE</user>
    <text>and they are great in combination</text>
  </message>
  <message>
    <ts>2017-07-30T15:14:20.678554</ts>
    <user>U1CE9DL9H</user>
    <text>in many cases functional programming can make the asynchronicity an implementation detail, which is really nice</text>
  </message>
  <message>
    <ts>2017-07-30T15:14:32.679436</ts>
    <user>U5QJW0DDE</user>
    <text>that is true</text>
  </message>
  <message>
    <ts>2017-07-30T16:30:04.035060</ts>
    <user>U1L4GLFJ6</user>
    <text>is there an Elm idiom for downloading Json files without clicking on anything?</text>
  </message>
  <message>
    <ts>2017-07-30T16:30:56.039461</ts>
    <user>U1CE9DL9H</user>
    <text>so they should download on page load?</text>
  </message>
  <message>
    <ts>2017-07-30T16:35:06.058213</ts>
    <user>U1L4GLFJ6</user>
    <text>i am drawing a map, but the shapefiles are stored in json</text>
  </message>
  <message>
    <ts>2017-07-30T16:36:13.063428</ts>
    <user>U1CE9DL9H</user>
    <text>yes so you'll need to load these, probably when the elm app loads. The http package allows that &lt;http://package.elm-lang.org/packages/elm-lang/http/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-30T16:37:05.067441</ts>
    <user>U1CE9DL9H</user>
    <text>the cmd that you eventually get should probably go in your `init`</text>
  </message>
  <message>
    <ts>2017-07-30T16:38:08.071881</ts>
    <user>U1CE9DL9H</user>
    <text>and - if we're talking patterns - it's nices to store the data you fetch in your model as a `WebData WhateverYouNeed`, rather than as a Result or a Maybe, see &lt;http://package.elm-lang.org/packages/krisajenkins/remotedata/latest&gt;</text>
  </message>
  <message>
    <ts>2017-07-30T16:38:30.073518</ts>
    <user>U1L4GLFJ6</user>
    <text>i got it</text>
  </message>
  <message>
    <ts>2017-07-30T16:38:37.073948</ts>
    <user>U1L4GLFJ6</user>
    <text>Elm just works!!</text>
  </message>
  <message>
    <ts>2017-07-30T16:42:12.089585</ts>
    <user>U3L8MM10T</user>
    <text>In &lt;http://package.elm-lang.org/packages/yotamDvir/elm-pivot/2.0.0/Pivot&gt;, what is the meaning of `type alias Pivot a = Pivot a`</text>
  </message>
  <message>
    <ts>2017-07-30T16:43:27.095036</ts>
    <user>U0JFXEUCT</user>
    <text>it’s an alias of an internal type..so if you check out the source code you can see:  
`type alias Pivot a = Pivot.Types.Pivot a`</text>
  </message>
  <message>
    <ts>2017-07-30T16:43:59.097306</ts>
    <user>U1CE9DL9H</user>
    <text>this is a commonly used trick to re-export types</text>
  </message>
  <message>
    <ts>2017-07-30T16:44:34.099932</ts>
    <user>U0JFXEUCT</user>
    <text>so, it’s not actually an alias of itself, which is what it looks like in the docs :smile:</text>
  </message>
  <message>
    <ts>2017-07-30T17:29:27.299737</ts>
    <user>U3L8MM10T</user>
    <text>&lt;@U1CE9DL9H&gt; Please explain the advantage of this _trick_.</text>
  </message>
  <message>
    <ts>2017-07-30T17:32:58.315135</ts>
    <user>U0JFXEUCT</user>
    <text>I use it in my packages when I have an internal type where other modules in my package need access to constructors, but I don’t want to expose the constructors to the user</text>
  </message>
  <message>
    <ts>2017-07-30T17:33:21.316995</ts>
    <user>U0JFXEUCT</user>
    <text>however I also want to be able to expose the type name so they can write annotations if they want</text>
  </message>
  <message>
    <ts>2017-07-30T17:35:36.326347</ts>
    <user>U1CE9DL9H</user>
    <text>unlike some other languages, in elm a module cannot expose a value that is not defined in that module, so if a type (alias) is defined somewhere else , and it should be exposed then re-exporting in this way is the only option</text>
  </message>
  <message>
    <ts>2017-07-30T18:30:25.566459</ts>
    <user>U17P7CBFB</user>
    <text>is it ok to compare dicts for equality?</text>
  </message>
  <message>
    <ts>2017-07-30T18:33:52.580640</ts>
    <user>U0Z9TPK7S</user>
    <text>&lt;@U17P7CBFB&gt; if they don't contain functions, should be</text>
  </message>
  <message>
    <ts>2017-07-30T18:46:57.635177</ts>
    <user>U0Z9TPK7S</user>
    <text>Naming question: if I have a container of things, do I call it "thingContainer" or "thingsContainer"? (ie, plural or singular?)</text>
  </message>
  <message>
    <ts>2017-07-30T18:47:25.637171</ts>
    <user>U17P7CBFB</user>
    <text>singular</text>
  </message>
  <message>
    <ts>2017-07-30T18:47:45.638597</ts>
    <user>U17P7CBFB</user>
    <text>usually</text>
  </message>
  <message>
    <ts>2017-07-30T18:47:52.639110</ts>
    <user>U17P7CBFB</user>
    <text>thingContainer = container of things</text>
  </message>
  <message>
    <ts>2017-07-30T18:48:15.640743</ts>
    <user>U17P7CBFB</user>
    <text>thingsContainer = container of collections of things</text>
  </message>
  <message>
    <ts>2017-07-30T18:48:56.643623</ts>
    <user>U0EEGSF35</user>
    <text>i prefere singular to, note though  i try hard to not have an identifer of 'somethingXYZ' and 'somethingsXYZ' cause i just know i will misread it later at least  afew times</text>
  </message>
  <message>
    <ts>2017-07-30T18:49:17.645108</ts>
    <user>U17P7CBFB</user>
    <text>like, if you have `arrows` as type which is a collection of `arrow`, I'd use `arrowsContainer` for a container of `arrows`, but not for a container of `arrow`</text>
  </message>
  <message>
    <ts>2017-07-30T18:50:17.649447</ts>
    <user>U17P7CBFB</user>
    <text>also, that extra s could be slightly annoying if you're doing search/replace</text>
  </message>
  <message>
    <ts>2017-07-30T18:51:00.652866</ts>
    <user>U0Z9TPK7S</user>
    <text>so if I have a dictionary of targets, I'd call it "targetDictionary" rather than "targetsDictionary"?</text>
  </message>
  <message>
    <ts>2017-07-30T18:51:18.654149</ts>
    <user>U17P7CBFB</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-07-30T18:51:36.655538</ts>
    <user>U17P7CBFB</user>
    <text>targetsDictionary : Dictionary targets</text>
  </message>
  <message>
    <ts>2017-07-30T18:52:06.657719</ts>
    <user>U17P7CBFB</user>
    <text>targetDictionary : Dictionary target</text>
  </message>
  <message>
    <ts>2017-07-30T18:52:45.660690</ts>
    <user>U0Z9TPK7S</user>
    <text>Cool, thanks</text>
  </message>
  <message>
    <ts>2017-07-30T18:52:50.660993</ts>
    <user>U0Z9TPK7S</user>
    <text>:smiley:</text>
  </message>
  <message>
    <ts>2017-07-30T18:54:01.666349</ts>
    <user>U17P7CBFB</user>
    <text>aaand bam! Just committed unlimited undo/redo using ctrl+z / ctrl+shift+z for my app!</text>
  </message>
  <message>
    <ts>2017-07-30T18:54:40.669039</ts>
    <user>U17P7CBFB</user>
    <text>this is one of those times you really love functional programming, and persistent data structures</text>
  </message>
  <message>
    <ts>2017-07-31T03:14:23.885397</ts>
    <user>U4XT6TB7F</user>
    <text>Does elm somehow expose a possibility to write a custom quasiquoter like the one used for glsl shaders here?

&lt;https://github.com/kfish/elm-shadertoy&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T03:16:17.919635</ts>
    <user>U1ZCL9GAX</user>
    <text>Hi nzleemann, my understanding is that the glsl handling is baked into the elm compiler</text>
  </message>
  <message>
    <ts>2017-07-31T03:17:34.941334</ts>
    <user>U4XT6TB7F</user>
    <text>Yeah, I saw that too. I was just hoping for another possibility.</text>
  </message>
  <message>
    <ts>2017-07-31T03:33:18.201929</ts>
    <user>U3SJEDR96</user>
    <text>correct, only GLSL quasiquotes are supported. I don't think supporting others is anywhere on the roadmap, though. What's your use case, &lt;@U4XT6TB7F&gt;?</text>
  </message>
  <message>
    <ts>2017-07-31T04:23:30.168484</ts>
    <user>U4XT6TB7F</user>
    <text>&lt;@U3SJEDR96&gt; I would like to create records based on another specification format</text>
  </message>
  <message>
    <ts>2017-07-31T04:26:52.237911</ts>
    <user>U17TXDBJR</user>
    <text>Hi! Can I set CSS variables in Elm? I had no luck setting them as `Html.Attributes.style [("--my-margin", "1rem")]`. In JS I would set the variable like so: `domNode.style.setProperty('--my-margin', '1rem')`.</text>
  </message>
  <message>
    <ts>2017-07-31T04:34:54.407765</ts>
    <user>U3SJEDR96</user>
    <text>That's currently not supported. It's certainly not impossible to support it, but there hasn't been a very strong/compelling use case for it, given that Elm supports variables :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T04:42:32.570025</ts>
    <user>U17TXDBJR</user>
    <text>I am porting a CSS/JS framework to Elm by keeping the CSS and re-writing the JS in Elm. The upstream framework uses CSS variables.</text>
  </message>
  <message>
    <ts>2017-07-31T04:44:09.603619</ts>
    <user>U17TXDBJR</user>
    <text>Thanks for the info though! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T04:47:32.676238</ts>
    <user>U4872964V</user>
    <text>&lt;@U17TXDBJR&gt; so you’d like to set the css variable on a specific dom node, from within Elm?</text>
  </message>
  <message>
    <ts>2017-07-31T04:48:46.702981</ts>
    <user>U4872964V</user>
    <text>I’d be curious to know how that framework works actually (even though it’s probably not a good match for Elm)</text>
  </message>
  <message>
    <ts>2017-07-31T04:53:14.802139</ts>
    <user>U17TXDBJR</user>
    <text>&lt;@U4872964V&gt; Yes. I would like to set them like I do set attributes/styles. I am porting &lt;https://github.com/material-components/material-components-web/&gt;. It uses CSS variables for theming and animations.</text>
  </message>
  <message>
    <ts>2017-07-31T04:54:30.830390</ts>
    <user>U4872964V</user>
    <text>oh i see, so the animations would be handled in Elm by changing the values of these variables</text>
  </message>
  <message>
    <ts>2017-07-31T04:55:41.857063</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/html/issues/129#issuecomment-313608729&gt; this is relevant.</text>
  </message>
  <message>
    <ts>2017-07-31T04:55:51.860487</ts>
    <user>U17TXDBJR</user>
    <text>Yes. For instance, Ripple's animation uses CSS variables (&lt;https://github.com/material-components/material-components-web/blob/master/packages/mdc-ripple/_keyframes.scss&gt;). So my two options are to wait for CSS variable support or rewrite the CSS animation in Elm, I guess.</text>
  </message>
  <message>
    <ts>2017-07-31T04:56:04.865650</ts>
    <user>U17TXDBJR</user>
    <text>&lt;@U3SJEDR96&gt; Thanks! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T04:58:19.915856</ts>
    <user>U4872964V</user>
    <text>and &lt;https://github.com/elm-lang/virtual-dom/pull/44&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T04:59:11.934946</ts>
    <user>U17TXDBJR</user>
    <text>Thanks! I think I will share my use-case in one of those discussions.</text>
  </message>
  <message>
    <ts>2017-07-31T04:59:18.937516</ts>
    <user>U4872964V</user>
    <text>yes, that’s good1</text>
  </message>
  <message>
    <ts>2017-07-31T04:59:22.939215</ts>
    <user>U17TXDBJR</user>
    <text>Great that there's already a PR for it. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T06:41:04.016350</ts>
    <user>U6D1E91QV</user>
    <text>Did anyone else notice stack overflows (size exceeded) errors going from Chrome 57 to Chrome 58+ (i.e.60)?</text>
  </message>
  <message>
    <ts>2017-07-31T06:41:13.018991</ts>
    <user>U6D1E91QV</user>
    <text>my elm apps won't run anymore =(</text>
  </message>
  <message>
    <ts>2017-07-31T06:44:15.071097</ts>
    <user>U3SJEDR96</user>
    <text>Huh, I haven't ran into that. Can you verify that those exact same apps in the same circumstances (i.e. with or without the debugger, ..) still work on chrome 57 ?</text>
  </message>
  <message>
    <ts>2017-07-31T07:19:11.675445</ts>
    <user>U5QJW0DDE</user>
    <text>you might want to give your apps a try on browserstack. i'm running Chrome 59 myself</text>
  </message>
  <message>
    <ts>2017-07-31T07:19:50.686602</ts>
    <user>U2LC0U8JY</user>
    <text>not sure if anyone posted this
&lt;https://news.ycombinator.com/item?id=14889605&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T07:19:52.687256</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U3SJEDR96&gt; yes. or rather, some customers have. the apps works on all our machines, but none use chrome on windws &amp;gt;58</text>
  </message>
  <message>
    <ts>2017-07-31T07:20:40.700739</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U3SJEDR96&gt; debian stretch, chromium 57 works. 58 doesn't, 58 on win doesn't, 60 on win doesn't (so i'm told).</text>
  </message>
  <message>
    <ts>2017-07-31T07:21:50.720417</ts>
    <user>U3SJEDR96</user>
    <text>Do they report the app crashing on startup or during use?</text>
  </message>
  <message>
    <ts>2017-07-31T07:23:56.756280</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U6D1E91QV&gt;  i strongly recommend browserstack if you have lots of customers on different systems. you can test different versions of every browser, and also different operating systems, including mobile. great not just for the problem you are having but also to ensure good cross-platform css and html. you can confirm the reports you are hearing very quickly that way.</text>
  </message>
  <message>
    <ts>2017-07-31T07:25:15.778891</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U3SJEDR96&gt; startup</text>
  </message>
  <message>
    <ts>2017-07-31T07:25:21.780776</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U5QJW0DDE&gt; checking it out right now</text>
  </message>
  <message>
    <ts>2017-07-31T07:25:53.790328</ts>
    <user>U6D1E91QV</user>
    <text>can i post pictures in this slack?</text>
  </message>
  <message>
    <ts>2017-07-31T07:26:04.793489</ts>
    <user>U5QJW0DDE</user>
    <text>you can post images here</text>
  </message>
  <message>
    <ts>2017-07-31T07:26:33.801961</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U6D1E91QV&gt; do you have any large list literals in your code? I.e. `[ a, b, c (...), z ]` where you have either very large items or a sufficiently high number of entries?</text>
  </message>
  <message>
    <ts>2017-07-31T07:30:25.868357</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U3SJEDR96&gt; how large is large? i think the largest are still &amp;lt; 15 entries</text>
  </message>
  <message>
    <ts>2017-07-31T07:31:03.879245</ts>
    <user>U3SJEDR96</user>
    <text>It would depend on how large the entries are..</text>
  </message>
  <message>
    <ts>2017-07-31T07:31:15.882299</ts>
    <user>U6D1E91QV</user>
    <text>i have some fairly large case statements that caused the compiler to get OOM killed</text>
  </message>
  <message>
    <ts>2017-07-31T07:31:21.884245</ts>
    <user>U3SJEDR96</user>
    <text>and it's also browser-dependent, but would manifest itself at launch-time</text>
  </message>
  <message>
    <ts>2017-07-31T07:31:41.889723</ts>
    <user>U3SJEDR96</user>
    <text>nah, it's really about list literals, as they are built-up recursively in the compiled code of 0.18</text>
  </message>
  <message>
    <ts>2017-07-31T07:31:43.890549</ts>
    <user>U6D1E91QV</user>
    <text>literals are only types. like a list of folders to be shown. no (or almost no) fields</text>
  </message>
  <message>
    <ts>2017-07-31T07:32:21.900864</ts>
    <user>U6D1E91QV</user>
    <text>a large source file shouldn't be a problem, should it?</text>
  </message>
  <message>
    <ts>2017-07-31T07:33:05.913073</ts>
    <user>U3SJEDR96</user>
    <text>No, or at least it shouldn't lead to a stack overflow on startup</text>
  </message>
  <message>
    <ts>2017-07-31T07:33:11.914824</ts>
    <user>U3SJEDR96</user>
    <text>for reference - &lt;https://github.com/elm-lang/elm-compiler/issues/1521&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T07:33:37.922203</ts>
    <user>U3SJEDR96</user>
    <text>(note that a fix was commited for 0.19)</text>
  </message>
  <message>
    <ts>2017-07-31T07:33:59.927981</ts>
    <user>U6D1E91QV</user>
    <text>i'm well away from 1521 :smiley:</text>
  </message>
  <message>
    <ts>2017-07-31T07:34:48.941764</ts>
    <user>U3SJEDR96</user>
    <text>Sure, but every call that can create a stack-frame can make this problem rear its ugly head, unfortunately.</text>
  </message>
  <message>
    <ts>2017-07-31T07:38:09.998744</ts>
    <user>U3SJEDR96</user>
    <text>so, what you can do is open up the compiled code in an editor and look for `ctor: '::',`. If you find a place where it looks like it's going "deep", that's one to investigate. Splitting it up into multiple smaller lists and concatenating those using `++` is the suggested workaround for now...</text>
  </message>
  <message>
    <ts>2017-07-31T07:42:07.065963</ts>
    <user>U3SJEDR96</user>
    <text>if you're able to load that page with the chrome dev-tools on, it should pause before exploding, and this might also give you some information on where to look</text>
  </message>
  <message>
    <ts>2017-07-31T07:42:53.079083</ts>
    <user>U6D1E91QV</user>
    <text>&lt;@U3SJEDR96&gt; i'll give it a shot, thanks</text>
  </message>
  <message>
    <ts>2017-07-31T07:43:07.082970</ts>
    <user>U3SJEDR96</user>
    <text>ping me if you run into anything, I'd love to help out :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T08:11:45.615910</ts>
    <user>U5QJW0DDE</user>
    <text>&lt;@U6D1E91QV&gt; updated us later if you figure out what the problem is, i'd like to know</text>
  </message>
  <message>
    <ts>2017-07-31T08:28:52.966039</ts>
    <user>U2LAL86AY</user>
    <text>that sounds awesome!.:smile: I'm curious about memory consumption :simple_smile:</text>
  </message>
  <message>
    <ts>2017-07-31T08:39:09.192800</ts>
    <user>U2LAL86AY</user>
    <text>it is possible at list in principle to have a dict with 2 keys and one value? Right now i store the second key, inside the value like so:

`Dict.fromList [ ( 1 , Tag { secondKey = 2 , otherData = .. } ) ] `
and i wondered how something like this can work.
`Dict.fromList [ (1, 2,  Tag { otherData = .. } ) ]` 
this prevents me form doing value unwrapping like 
```
case value of 
    Tag { secondKey } -&amp;gt; do stuff with second key.
```</text>
  </message>
  <message>
    <ts>2017-07-31T08:41:34.248182</ts>
    <user>U4872964V</user>
    <text>&lt;@U2LAL86AY&gt;, not sure what you want exactly, but you can use `(1,2)` as the key</text>
  </message>
  <message>
    <ts>2017-07-31T08:43:43.297484</ts>
    <user>U2LAL86AY</user>
    <text>hmm , i can use it, but i was hoping to get something like `Dict.get2  2` -&amp;gt; and get the value.
I don't know the first part of the tuple. I need something like: `Dict.get (_, 2)`</text>
  </message>
  <message>
    <ts>2017-07-31T08:46:56.372592</ts>
    <user>U4872964V</user>
    <text>Not sure what you’re after, sorry, do you want to get the value _either_ by key 1 or 2?</text>
  </message>
  <message>
    <ts>2017-07-31T08:48:25.407396</ts>
    <user>U3SJEDR96</user>
    <text>it would pretty much have to work as 2 separate dicts under the hood, if you want to be able to select on either key</text>
  </message>
  <message>
    <ts>2017-07-31T08:50:05.447717</ts>
    <user>U2LAL86AY</user>
    <text>yes, `key1` and `key2` are both indexes for a single value: it's like having
`Dict1 key1 sameValue`
`Dict2 key2 sameValue`
but instead of duplicating the value. you use a special dict that can index by both keys. -&amp;gt; i mean for what i need i can use that unwrapping - and calculate the ke2 based on key1 but that would be some more work.
Yes &lt;@U3SJEDR96&gt; maybe. but this idea of indexing the same value on multiple keys is used a lot in elastic search and stuff. So i don't think is not implemented somewhere. Just wondering how this can work in elm.</text>
  </message>
  <message>
    <ts>2017-07-31T08:50:21.454194</ts>
    <user>U4872964V</user>
    <text>just use two dicts</text>
  </message>
  <message>
    <ts>2017-07-31T08:51:16.476317</ts>
    <user>U4872964V</user>
    <text>or if the keys are the same kind/type, just add the value under both keys in the dictionary</text>
  </message>
  <message>
    <ts>2017-07-31T08:53:32.532189</ts>
    <user>U2LAL86AY</user>
    <text>you mean i should use `Dict.fromList [ (1, 2) =&amp;gt; {val..} ]` -&amp;gt; i guess this is still an improvement over what i have.</text>
  </message>
  <message>
    <ts>2017-07-31T08:54:04.545488</ts>
    <user>U4872964V</user>
    <text>I mean you should just put the value in multiple times, it will not do any copying</text>
  </message>
  <message>
    <ts>2017-07-31T08:55:06.571340</ts>
    <user>U3SJEDR96</user>
    <text>otoh, updates become a bit more annoying</text>
  </message>
  <message>
    <ts>2017-07-31T08:55:25.579023</ts>
    <user>U4872964V</user>
    <text>well, depends on your use case, for sure</text>
  </message>
  <message>
    <ts>2017-07-31T08:55:51.589713</ts>
    <user>U2LAL86AY</user>
    <text>`it will not do any copying` &amp;gt; i don't fully underestand how this is true. Duplication is bad.</text>
  </message>
  <message>
    <ts>2017-07-31T08:56:15.600182</ts>
    <user>U4872964V</user>
    <text>Elm does not copy values, it just stores references, since values are immutable</text>
  </message>
  <message>
    <ts>2017-07-31T08:56:52.616669</ts>
    <user>U2LAL86AY</user>
    <text>hmm this is a mind bending trick :smile:</text>
  </message>
  <message>
    <ts>2017-07-31T08:57:36.635872</ts>
    <user>U4872964V</user>
    <text>if you are going to update the values, that’s another use case, which you will need to think about I suppose</text>
  </message>
  <message>
    <ts>2017-07-31T08:58:30.659490</ts>
    <user>U2LAL86AY</user>
    <text>yes i will update, and a lot. i need some time to think how this can actually work. :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-31T08:59:07.675200</ts>
    <user>U2LAL86AY</user>
    <text>thanks for now :simple_smile:</text>
  </message>
  <message>
    <ts>2017-07-31T08:59:17.679722</ts>
    <user>U4872964V</user>
    <text>so you’d want to update the value for all keys at once</text>
  </message>
  <message>
    <ts>2017-07-31T09:16:38.165044</ts>
    <user>U0D4VR7BP</user>
    <text>So, there was a bit of flamewar on Twitter today, from which came the following thought:

*If adding a syntax was not a problem, is there any other issue with auto-generating "trivial" JSON decoders for types?*

(ie. if I want to decode `{"foo": 1}` into `{foo: String}`, I obviously need to say how that conversion happens. This is not "trivial". Trivial would be `{"foo": 1}` into `{foo: Int}`)

This already happens with ports to some degree - a decoder gets created: &lt;https://github.com/elm-lang/elm-compiler/blob/master/src/Generate/JavaScript/Expression.hs#L205&gt;

So, again: if adding a new syntax was not a problem (and Evan wanted to add this), is there any other, conceptual or otherwise, hurdle to having this?
```
type alias User =
    { name : String
    , comments : List String
    , products : List Int
    }

derived userDecoder : Decoder User

-- similar syntax to port myPort : ...
```</text>
  </message>
  <message>
    <ts>2017-07-31T09:22:36.334800</ts>
    <user>U4872964V</user>
    <text>&lt;@U0D4VR7BP&gt; I see it going in the other direction, actually, remove the automatic decoding of ports

deriving decoders is definitely possible, the issue is to have the _best_ solution, not just _a_ solution</text>
  </message>
  <message>
    <ts>2017-07-31T09:25:24.418431</ts>
    <user>U3SJEDR96</user>
    <text>Potentially, this might keep people from using the proper types for things, instead choosing to rely only on primitives, records and lists because they map so nicely with json. Also, having a `Maybe` becomes tricky - should it be equivalent of `oneOf [ map Just decoder,  null Nothing ]` or `oneOf [ map Just dec, succeed Nothing ]`? Currently, it is the latter in decoders, and equivalent to the former in ports, I think</text>
  </message>
  <message>
    <ts>2017-07-31T09:27:34.484359</ts>
    <user>U0D4VR7BP</user>
    <text>yeah, I suspect that instead of creating `Decoder MyFancyTypeWithADTsAndStuff` one would have the `derived` line and then a function `ApiResponseWithOnlyPrimitives -&amp;gt; MyFancyTypeWithADTsAndStuff`.</text>
  </message>
  <message>
    <ts>2017-07-31T09:28:38.516927</ts>
    <user>U0D4VR7BP</user>
    <text>which doesn't sound _that_ bad, but it's on the user to do that and not use `ApiResponseWithOnlyPrimitives` in his Model etc.</text>
  </message>
  <message>
    <ts>2017-07-31T09:29:41.549604</ts>
    <user>U0D4VR7BP</user>
    <text>I got lost in the `Maybe` part of your post (behaviour of `null`), will chew on that a bit</text>
  </message>
  <message>
    <ts>2017-07-31T09:30:09.564811</ts>
    <user>U4872964V</user>
    <text>So, the main hurdle is that you’d very soon run into situations where you’d want to tweak the decoders a bit</text>
  </message>
  <message>
    <ts>2017-07-31T09:41:23.925715</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0D4VR7BP&gt; difference being that `type alias Foo = Maybe Int` with input "`foo`" could either end up an `Err "wrong type"` or an `Ok Nothing`. Perhaps it's not strictly related to this discussion, but it serves as a reminder that even the current ports decoders work subtly different from how you'd (naively) write a manual decoder</text>
  </message>
  <message>
    <ts>2017-07-31T09:44:50.037067</ts>
    <user>U4872964V</user>
    <text>I’m more leaning towards somethine _like_ &lt;https://github.com/norpan/elm-dynamic-types/blob/master/Dynamic/Json/Decoder.elm&gt; where you could traverse the type definition and decode accordingly, using an Elm function to do it</text>
  </message>
  <message>
    <ts>2017-07-31T12:10:36.438050</ts>
    <user>U3SQ42JJW</user>
    <text>Is ist right that Dict’s are always sorted alpabetical? So I have no chance to preserve the order of a list when transforming it to a dict and then back to a list… or?</text>
  </message>
  <message>
    <ts>2017-07-31T12:28:48.063775</ts>
    <user>U4872964V</user>
    <text>&lt;@U3SQ42JJW&gt; yes, in ascending order by key</text>
  </message>
  <message>
    <ts>2017-07-31T12:29:15.079168</ts>
    <user>U4872964V</user>
    <text>if you want order, you have to keep it a list</text>
  </message>
  <message>
    <ts>2017-07-31T12:29:36.091295</ts>
    <user>U4872964V</user>
    <text>(or put some kind of ordering info into the values)</text>
  </message>
  <message>
    <ts>2017-07-31T12:30:06.109263</ts>
    <user>U3SQ42JJW</user>
    <text>Thanks. Yes I will do the second… giving those items a sort ID…</text>
  </message>
  <message>
    <ts>2017-07-31T12:56:25.990708</ts>
    <user>U4G7CC18U</user>
    <text>Good evening everyone.
I feel like an idiot.. I have been at this since yesterday and I can't find a proper solution. I have a list that represents the vertices of a polygon. Let's say `[(-1,1), (1,1), (1,-1),(-1,-1)]`. The order matters, because it is a polygon, so going from A to B to C is different than going from A to C to B. 
Now the user wants to add a new vertex between `(1,1)` and `(1,-1)`. Let's say this vertex is `(2,0)`.
I have no idea which high order function I should use to create a new list with an item """inserted into an index""".. or I might just be looking at the whole thing wrong..
I looked into `core/List` and `community/List.Extra` and I can't seem to find anything pre-made, which makes me wonder if I am going at it with the right approach at all..</text>
  </message>
  <message>
    <ts>2017-07-31T12:57:49.038627</ts>
    <user>U4G7CC18U</user>
    <text>I have also thought of thinking about `Edges` instead of `Vertices`, but I would end up with the same problem, I think.</text>
  </message>
  <message>
    <ts>2017-07-31T12:59:33.098172</ts>
    <user>U2U94G0QG</user>
    <text>Take a look at `List.take` `List.drop` and `::`</text>
  </message>
  <message>
    <ts>2017-07-31T12:59:42.103186</ts>
    <user>U0RPQMZ9S</user>
    <text>anyone else getting some gruff from elm-package? random packages not downloading for me</text>
  </message>
  <message>
    <ts>2017-07-31T13:02:23.200061</ts>
    <user>U2U94G0QG</user>
    <text>&lt;@U4G7CC18U&gt; coincidentally, this is problem 21 from 99 Problems (in Elm) &lt;https://johncrane.gitbooks.io/ninety-nine-elm-problems/content/p/p21.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T13:02:37.208390</ts>
    <user>U4G7CC18U</user>
    <text>Ohhh! :+1: thank you</text>
  </message>
  <message>
    <ts>2017-07-31T13:03:11.228036</ts>
    <user>U2SR9DL7Q</user>
    <text>&lt;@U2U94G0QG&gt; I didn't know this existed...</text>
  </message>
  <message>
    <ts>2017-07-31T13:03:23.235118</ts>
    <user>U4G7CC18U</user>
    <text>It looks like an awesome resource!</text>
  </message>
  <message>
    <ts>2017-07-31T13:04:12.263255</ts>
    <user>U4G7CC18U</user>
    <text>mind = blown</text>
  </message>
  <message>
    <ts>2017-07-31T13:04:19.267355</ts>
    <user>U2SR9DL7Q</user>
    <text>I remember looking through the haskell version. An elm version is *way* more exciting though.</text>
  </message>
  <message>
    <ts>2017-07-31T13:04:39.278024</ts>
    <user>U2U94G0QG</user>
    <text>Yeah it's great! It's really helping me with improving my Elm chops without focusing on web apps</text>
  </message>
  <message>
    <ts>2017-07-31T13:05:15.297819</ts>
    <user>U4G7CC18U</user>
    <text>This is not so much elm itself, is just my brain struggling from hours and hours of OOP at work, and then using FP at home</text>
  </message>
  <message>
    <ts>2017-07-31T13:05:25.303445</ts>
    <user>U4G7CC18U</user>
    <text>practice, practice, practice</text>
  </message>
  <message>
    <ts>2017-07-31T13:05:33.308089</ts>
    <user>U2U94G0QG</user>
    <text>I have been doing them on &lt;http://ellie-app.com|ellie-app.com&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T13:06:14.331109</ts>
    <user>U2SR9DL7Q</user>
    <text>it's a bit like chess. 99 problems is a bit like practicing tactics, vs evan's elm architecture tutorial which focuses on strategy.</text>
  </message>
  <message>
    <ts>2017-07-31T13:13:03.554699</ts>
    <user>U2GTQM83A</user>
    <text>Hi, does anyone know of a any chart library purely in Elm?</text>
  </message>
  <message>
    <ts>2017-07-31T13:14:32.603476</ts>
    <user>U6EV3H0N7</user>
    <text>i’ve used elm-plot - &lt;http://package.elm-lang.org/packages/terezka/elm-plot/5.1.0&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T13:15:11.624913</ts>
    <user>U2GTQM83A</user>
    <text>Nice! That's exactly what I was looking for. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-31T13:28:27.074525</ts>
    <user>U0CL0AS3V</user>
    <text>&lt;@U2GTQM83A&gt; there's also an &lt;#C2W8GFQF9|elm-plot&gt; channel on here</text>
  </message>
  <message>
    <ts>2017-07-31T15:30:21.176952</ts>
    <user>U2LAL86AY</user>
    <text>given:
```
    |&amp;gt; Maybe.withDefault (
        text "&amp;lt;!error!&amp;gt;"
            |&amp;gt; Debug.log "please report bug at : .."
    )
```
this will always log in the console -&amp;gt; even if the evaluation will go trough `Just` clause..
but if i do this: 
```
    |&amp;gt; (\maybe -&amp;gt; 
            case maybe of 
                Just stuff -&amp;gt; 
                    stuff
                Nothing -&amp;gt; 
                    text "&amp;lt;!error!&amp;gt;"
                        |&amp;gt; Debug.log "please report bug at : .."
        )
```
it only logs in the `Nothing` case as expected.
So why the implementation for `Maybe.withDefault` doesn't behave like this? 
Is there any good reason for for having all this unexpected debug.log side effects ?
 --- Edit: i just tried this and i'm perplexed about why it does not work:
```
properMaybeWithDefaultImplementation : a -&amp;gt; Maybe a -&amp;gt; a
properMaybeWithDefaultImplementation a =
    (\maybe -&amp;gt;
        case maybe of
            Just stuff -&amp;gt;
                stuff

            Nothing -&amp;gt;
                a
    )
```
It doesn't work :smile: it's not proper at all :smile: I'm so confused right now..
-- EDIT Again: 
```
|&amp;gt; (\a maybe -&amp;gt;
       case maybe of
            Just stuff -&amp;gt;
                   stuff

            Nothing -&amp;gt;
                   a
      )
      (text "&amp;lt;!!error!!&amp;gt;"
                            |&amp;gt; Debug.log "error: please report bug at.."
      )
```
I think it has to do with wrapping `debug.log` in `( )` - does anyone know how to build a maybe with default function that can be used with debug.log, in  pipeline style -&amp;gt; in such a way that will not log for no reason in the `Just` case ?</text>
  </message>
  <message>
    <ts>2017-07-31T15:32:07.231398</ts>
    <user>U0LPMPL2U</user>
    <text>`Maybe.withDefault` is not lazy. It evaluates the "default" expression even if it doesn't return it</text>
  </message>
  <message>
    <ts>2017-07-31T15:33:05.260990</ts>
    <user>U0LPMPL2U</user>
    <text>So `Maybe.withDefault (2 + 2) (Just 1)` is always reduced to `Maybe.withDefault 4 (Just 1)`</text>
  </message>
  <message>
    <ts>2017-07-31T15:33:45.281972</ts>
    <user>U0LPMPL2U</user>
    <text>So if your default expression has side effects, they will always be executed</text>
  </message>
  <message>
    <ts>2017-07-31T15:33:54.286407</ts>
    <user>U2LAL86AY</user>
    <text>thanks, but can we build an alternative that will be lazy?</text>
  </message>
  <message>
    <ts>2017-07-31T15:34:02.290527</ts>
    <user>U2LAL86AY</user>
    <text>a custom one</text>
  </message>
  <message>
    <ts>2017-07-31T15:34:06.292533</ts>
    <user>U2LAL86AY</user>
    <text>somehow</text>
  </message>
  <message>
    <ts>2017-07-31T15:34:40.309934</ts>
    <user>U0LPMPL2U</user>
    <text>yes it can be done</text>
  </message>
  <message>
    <ts>2017-07-31T15:35:01.320445</ts>
    <user>U0LPMPL2U</user>
    <text>I think there might already be one in a third party package. Perhaps `Maybe.Extra` ?</text>
  </message>
  <message>
    <ts>2017-07-31T15:35:08.324065</ts>
    <user>U2LAL86AY</user>
    <text>aa</text>
  </message>
  <message>
    <ts>2017-07-31T15:35:09.324773</ts>
    <user>U2LAL86AY</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-31T15:35:32.336615</ts>
    <user>U3SJEDR96</user>
    <text>Essentially it's just doing `\_ -&amp;gt; *side effect here*`, though</text>
  </message>
  <message>
    <ts>2017-07-31T15:35:58.349110</ts>
    <user>U3SJEDR96</user>
    <text>It's that major difference between `always Debug.crash "foo"` and `\_ -&amp;gt; Debug.crash "foo"` :smile:</text>
  </message>
  <message>
    <ts>2017-07-31T15:37:46.403559</ts>
    <user>U0LPMPL2U</user>
    <text>You could write your own though:
```
withLazyDefault : (()-&amp;gt; a) -&amp;gt; Maybe a -&amp;gt; a
withLazyDefault lazyValue maybe =
  case maybe of
    Nothing -&amp;gt; lazyValue ()
    Just val -&amp;gt; val
```</text>
  </message>
  <message>
    <ts>2017-07-31T15:38:56.438527</ts>
    <user>U3SJEDR96</user>
    <text>You'd still write `\_ -&amp;gt; Debug.log ""` etc, tho</text>
  </message>
  <message>
    <ts>2017-07-31T15:39:37.459383</ts>
    <user>U0LPMPL2U</user>
    <text>You'd call it like `withLazyDefault (\_ -&amp;gt; Debug.crash "error") (Just 3)`</text>
  </message>
  <message>
    <ts>2017-07-31T15:40:08.475209</ts>
    <user>U4N4DF3GW</user>
    <text>Hello everyone.
Could anyone tell me what's the difference between Cmd and Task and why is there a need for both of these types in Elm?</text>
  </message>
  <message>
    <ts>2017-07-31T15:47:06.689772</ts>
    <user>U3SJEDR96</user>
    <text>`Task`s *must* result in either an error or a value, and hence, can be safely chained and sequenced, `Cmd`s don't have that limitation per se. One allows monadic IO, the other allows stream-based IO. We could get away with only Tasks, but interop and managed effects (or, more precisely, effect managers) would be harder to develop and maintain, with interop opening up the possibility of a JS function not returning something, and your elm-program hanging indefinitely.</text>
  </message>
  <message>
    <ts>2017-07-31T15:49:20.759703</ts>
    <user>U3SJEDR96</user>
    <text>also, this: &lt;http://faq.elm-community.org/#what-is-the-difference-between-cmd-and-task&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T15:51:37.832410</ts>
    <user>U4N4DF3GW</user>
    <text>Thank you. I wonder why I couldn't find this in google since it's exactly what I entered when searching</text>
  </message>
  <message>
    <ts>2017-07-31T15:51:48.838601</ts>
    <user>U4N4DF3GW</user>
    <text>Looks like a good read</text>
  </message>
  <message>
    <ts>2017-07-31T15:52:22.856638</ts>
    <user>U3SJEDR96</user>
    <text>a `Task` builds up a single computation, a `Cmd` tells the runtime to actually execute something. One could think of `Task`'s as the building blocks for commands, while keeping in mind that there are some Cmd's that cannot (easily) be built using tasks; for example interop (think `port out : val -&amp;gt; Cmd msg`) or using `Random.generate` (which manages the random seed in an effect manager, so you can't reuse seeds etc)</text>
  </message>
  <message>
    <ts>2017-07-31T15:52:52.872247</ts>
    <user>U4N4DF3GW</user>
    <text>Can you maybe elaborate on what's a relation of Cmd and Tasks in Elm to a concept of Algebraic Effects?</text>
  </message>
  <message>
    <ts>2017-07-31T15:55:26.954111</ts>
    <user>U3SJEDR96</user>
    <text>Let me look up what algebraic effects are and see if I can divine an answer :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-31T15:56:30.988505</ts>
    <user>U4N4DF3GW</user>
    <text>It seems to be very similar in terms of the general idea. With (or so it seems to me) an exception that Elm isn't so explicit about handlers of the effects</text>
  </message>
  <message>
    <ts>2017-07-31T15:59:49.095207</ts>
    <user>U4N4DF3GW</user>
    <text>So &lt;@U3SJEDR96&gt; if Random is a Cmd which isn't monadic, that means it's not possible in Elm to generate 2 Random values with one depending on another.
(Let's say a random number `a` that is in a range from 0 to a random number `b`) in a single update function iteration?</text>
  </message>
  <message>
    <ts>2017-07-31T16:00:51.129025</ts>
    <user>U0LPMPL2U</user>
    <text>`Random.Generator` is monadic</text>
  </message>
  <message>
    <ts>2017-07-31T16:00:56.131918</ts>
    <user>U3SJEDR96</user>
    <text>`Random.generate` returns a `Cmd`, but `Random` is definitely monadic (i.e. you have `Random.map`, `Random.andThen` and you can write a `Random.constant val = int |&amp;gt; andThen (always val)`</text>
  </message>
  <message>
    <ts>2017-07-31T16:01:06.136994</ts>
    <user>U3SJEDR96</user>
    <text>sorry for the confusion, there :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T16:01:37.154088</ts>
    <user>U3SJEDR96</user>
    <text>As for your example `&lt;http://Random.int|Random.int&gt; 0 100 |&amp;gt; Random.andThen (\v -&amp;gt; &lt;http://Random.int|Random.int&gt; 0 v)`</text>
  </message>
  <message>
    <ts>2017-07-31T16:01:38.154575</ts>
    <user>U4N4DF3GW</user>
    <text>Oh I see. So what's a reason for having Random.Generator instead of a Task generating a random number?
Sorry if the question is naive :smile:</text>
  </message>
  <message>
    <ts>2017-07-31T16:02:29.181810</ts>
    <user>U3SJEDR96</user>
    <text>Reproducability is one - i.e. running a program with the same seed yields the same effects; so you can, for example, repeat failing fuzz-tests consistently</text>
  </message>
  <message>
    <ts>2017-07-31T16:03:22.210584</ts>
    <user>U3SJEDR96</user>
    <text>Which relies on a consistent and pure seed-management. You can do this manually using `Random.step : Generator a -&amp;gt; Seed -&amp;gt; (a, Seed)` or using `Random.generate : Generator a -&amp;gt; (a -&amp;gt; msg) -&amp;gt; Cmd msg`</text>
  </message>
  <message>
    <ts>2017-07-31T16:03:50.224875</ts>
    <user>U3SJEDR96</user>
    <text>It's trivial to write a `Random.task : Generator a -&amp;gt; Task x a` *but* at the cost of losing consistent seed management</text>
  </message>
  <message>
    <ts>2017-07-31T16:04:32.246805</ts>
    <user>U3SJEDR96</user>
    <text>i.e. `task gen = Time.now |&amp;gt; Task.andThen (Random.initialSeed &amp;gt;&amp;gt; Random.step gen &amp;gt;&amp;gt; Tuple.first)`</text>
  </message>
  <message>
    <ts>2017-07-31T16:05:18.270169</ts>
    <user>U3SJEDR96</user>
    <text>It boils down to determinism of randomness, I suppose</text>
  </message>
  <message>
    <ts>2017-07-31T16:05:41.281955</ts>
    <user>U4N4DF3GW</user>
    <text>I see
Are you a writer maybe? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T16:07:07.326175</ts>
    <user>U3SJEDR96</user>
    <text>The other reason is mostly an implementation detail -  `Random.generate` does all of this same seed management as `step` does (i.e. saving the new seed after use, and setting you up with an initialSeed on the first go), but needs to store this somewhere. As we like doing our implementations mostly in Elm, storing that means the scheduler needs to talk to an effect-manager, which - in the current implementation - isn't possible for tasks, _afaik_.</text>
  </message>
  <message>
    <ts>2017-07-31T16:07:51.348008</ts>
    <user>U3SJEDR96</user>
    <text>And no, not a writer :smile:</text>
  </message>
  <message>
    <ts>2017-07-31T16:08:31.368249</ts>
    <user>U4N4DF3GW</user>
    <text>You should consider. It took me 2 weeks of research to understand half of what you just described in couple of sentences :smile:</text>
  </message>
  <message>
    <ts>2017-07-31T16:08:47.375830</ts>
    <user>U4N4DF3GW</user>
    <text>And it all makes sense now. Thank you!</text>
  </message>
  <message>
    <ts>2017-07-31T19:45:51.454480</ts>
    <user>U62MT58N9</user>
    <text>Hi all. My question is about using cookies in Elm. I've read &lt;http://tech.noredink.com/post/147676730053/maybe-the-cookies-api-should-not-exist&gt; and found the conclusion very interesting. I don't disagree with it.

Sadly, I have to use cookies for legacy reasons -- we are migrating some functionality from an Ember app with cookie-based authentication into an Elm app, and it is required that auth'ing into the Elm app also auth you into the Ember app, so we can fall back to Ember transparently when we need to.

Given that, what do you think my best option is? I currently have some ports and ten lines of inline JS in my `index.html` that handles storing and retrieving cookies. This works, but in order to get the edge cases right I don't want to interact with the raw JS API. There are nice JS libraries I'd be happy using (e.g. &lt;https://github.com/js-cookie/js-cookie&gt;) but I am not sure how to include it in the output of elm-make, short of copy+pasting it into `index.html`, which doesn't give me nice versioning.

Can I get elm-make to include a Node package somehow?

Or should I head in another direction?</text>
  </message>
  <message>
    <ts>2017-07-31T20:30:32.084728</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U62MT58N9&gt; is this an authentication cookie that you need to read/modify client side?</text>
  </message>
  <message>
    <ts>2017-07-31T20:30:49.088590</ts>
    <user>U153UK3FA</user>
    <text>that’s unusual</text>
  </message>
  <message>
    <ts>2017-07-31T20:45:39.274891</ts>
    <user>U62MT58N9</user>
    <text>&lt;@U153UK3FA&gt; Yes, &lt;https://github.com/simplabs/ember-simple-auth&gt; sets a client-side cookie to maintain its own state in addition to the actual session cookie that Rails sends back. The cookie doesn't contain any sensitive data.

I don't need to manage the server-side cookie, just the client-side one.</text>
  </message>
  <message>
    <ts>2017-07-31T20:50:33.335047</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U62MT58N9&gt; ah, you’ll probably want to use ‘webpack’ if you need to include Elm and JS in your build</text>
  </message>
  <message>
    <ts>2017-07-31T20:51:54.352337</ts>
    <user>U62MT58N9</user>
    <text>gotcha. So in theory I should be able to configure webpack rules that are like "grab this Node library and include it, also grab elm.js and include it"? (I've never used webpack before).</text>
  </message>
  <message>
    <ts>2017-07-31T20:52:16.356917</ts>
    <user>U62MT58N9</user>
    <text>And is this the direction you'd go down if you were solving this problem?</text>
  </message>
  <message>
    <ts>2017-07-31T21:08:41.562622</ts>
    <user>U153UK3FA</user>
    <text>if js-cookie is the only JS package you need to use then I’d just copy/paste, but if you expect that you’ll need more webpack is the way to go</text>
  </message>
  <message>
    <ts>2017-07-31T21:36:24.892180</ts>
    <user>U0RPQMZ9S</user>
    <text>Don't think you'll have to resort to webpack &lt;@U62MT58N9&gt;, just install the lib with npm, browserify it and link the `bundle.js` file in the html file that hosts your elm application</text>
  </message>
  <message>
    <ts>2017-07-31T21:37:04.900317</ts>
    <user>U0RPQMZ9S</user>
    <text>You won't be able to use elm-make to generate your html, you'll have to have it generate js and also link that js file into the same html</text>
  </message>
  <message>
    <ts>2017-07-31T21:56:30.128133</ts>
    <user>U2P9RBH4J</user>
    <text>Can elm be compiled out of the resulting js? 
EG: I’m thinking about using Purescript to work on a client side websockets + virtual-dom javascript library, but if elm can compile itself out of the resulting JS file ¯\_(ツ)_/¯ 
Thoughts?</text>
  </message>
  <message>
    <ts>2017-07-31T21:57:15.136636</ts>
    <user>U0J1M0F32</user>
    <text>I'm not sure I understand what you're asking, even with the example. :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-31T22:14:15.333217</ts>
    <user>U2P9RBH4J</user>
    <text>purescript compiles to “sane” js… But the cost of that is it’s harder to learn and the errors aren’t as nice (ala it’s more haskelly).
Here’s a pick of what I’m asking if there’s an Elm equivalent for…</text>
  </message>
  <message>
    <ts>2017-07-31T22:16:04.353884</ts>
    <user>U2P9RBH4J</user>
    <text>The equivalent elm code if I’m not mistaken would also include the Elm runtime. Which isn’t a bad thing, as it allows a much cleaner more “magical” ML syntax and get’s you all the nice errors and such.

I’m mostly curious if there’s an elm-make flag of sorts where you can get the sort of purescript equivalent compiled Javascript but from an elm source file.</text>
  </message>
  <message>
    <ts>2017-07-31T22:18:37.382984</ts>
    <user>U153UK3FA</user>
    <text>&lt;@U2P9RBH4J&gt; I don’t think much work has been put in to making the Elm compiler output in to very readable JS</text>
  </message>
  <message>
    <ts>2017-07-31T22:19:26.392048</ts>
    <user>U153UK3FA</user>
    <text>and not including the runtime wouldn’t leave you with much that you could do</text>
  </message>
  <message>
    <ts>2017-07-31T22:19:40.394571</ts>
    <user>U2P9RBH4J</user>
    <text>Yeh I figured, was just checking if there was something comin’ in 0.19 or something I wasn’t aware of.</text>
  </message>
  <message>
    <ts>2017-07-31T22:20:21.402252</ts>
    <user>U2P9RBH4J</user>
    <text>To be clear, I’m not suggesting, “not including” the elm runtime, only “optimizing out” what isn’t used.</text>
  </message>
  <message>
    <ts>2017-07-31T22:20:51.407454</ts>
    <user>U153UK3FA</user>
    <text>but that purescript example seems tobe pulling in a runtime as well</text>
  </message>
  <message>
    <ts>2017-07-31T22:20:54.408063</ts>
    <user>U2P9RBH4J</user>
    <text>If I’m not mistaken 0.19 ~might~ be getting code splitting? Which I think might serve my objective?</text>
  </message>
  <message>
    <ts>2017-07-31T22:22:23.424458</ts>
    <user>U153UK3FA</user>
    <text>I’m not sure what your objective is</text>
  </message>
  <message>
    <ts>2017-07-31T22:24:29.447305</ts>
    <user>U153UK3FA</user>
    <text>Both purescript and Elm need some kind of runtime to handle executing effects and libraries to implement immutable data structures</text>
  </message>
  <message>
    <ts>2017-07-31T22:36:11.577867</ts>
    <user>U2P9RBH4J</user>
    <text>Objective: write a 150 line websocket + virtual-dom wrapper lib implementing something like Pakyow’s “View Transformation Protocol”
Relevant Resources from the Elixir people
&lt;https://github.com/iamvery/ratchet&gt;
Moreso
&lt;https://github.com/dgmcguire/texas&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T23:06:16.899997</ts>
    <user>U3HQVHERX</user>
    <text>is there an ETA on 0.19 or what might be included in the next version?</text>
  </message>
  <message>
    <ts>2017-07-31T23:27:32.112252</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U153UK3FA&gt; I think the stated objective was "readable JS output"</text>
  </message>
  <message>
    <ts>2017-07-31T23:28:08.118006</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U3HQVHERX&gt; &lt;https://github.com/avh4/elm-format/milestone/18&gt; &lt;https://github.com/elm-lang/projects/blob/master/roadmap.md&gt; first two links for googling "elm 0.19"</text>
  </message>
  <message>
    <ts>2017-07-31T23:40:52.240933</ts>
    <user>U4CDMCSN4</user>
    <text>Does anybody know if implementing Type Providers (like F# and Idris do) has been discussed at some point? Can't seem to find any discussion about it in Google or Slack search.</text>
  </message>
  <message>
    <ts>2017-07-31T23:42:07.252800</ts>
    <user>U4CDMCSN4</user>
    <text>It would really go a long way removing the JSON hurdle a lot, if not most, people new to Elm face.</text>
  </message>
  <message>
    <ts>2017-07-31T23:45:25.284656</ts>
    <user>U2P9RBH4J</user>
    <text>Hey thanks for the references &lt;@U6EAT2Z37&gt;. 
While those help I think Purescript is still going to suit this use case a tid better, maybe ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-31T23:51:58.347886</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U2P9RBH4J&gt; yeah I prefer the idea of more capability, too. However, apparently the tooling isn't as good, just something to keep in mind you want to try firs.t</text>
  </message>
  <message>
    <ts>2017-08-01T00:00:06.429166</ts>
    <user>U2P9RBH4J</user>
    <text>&lt;@U6EAT2Z37&gt; Interesting… wait so you’re saying you would rather write an ~150 line JS lib in (Elm or Purescript)?</text>
  </message>
  <message>
    <ts>2017-08-01T00:03:01.461083</ts>
    <user>U2P9RBH4J</user>
    <text>I mean obviously it might just be better off as ~150 line VanillaJS lib ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-08-01T00:08:59.524427</ts>
    <user>U5W50TZ6C</user>
    <text>Can you represent a "record with anything in it" as a type?</text>
  </message>
  <message>
    <ts>2017-08-01T00:10:06.536490</ts>
    <user>U5W50TZ6C</user>
    <text>For example, `{ a | someField : String }` is a record with the field `someField` and any other fields</text>
  </message>
  <message>
    <ts>2017-08-01T00:10:31.541164</ts>
    <user>U5W50TZ6C</user>
    <text>But I'd like to accept a record with _any_ fields</text>
  </message>
  <message>
    <ts>2017-08-01T00:15:30.593031</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U5W50TZ6C&gt; yeah.</text>
  </message>
  <message>
    <ts>2017-08-01T00:15:40.594826</ts>
    <user>U6EAT2Z37</user>
    <text>`{ a | someField : b }`</text>
  </message>
  <message>
    <ts>2017-08-01T00:15:48.596030</ts>
    <user>U5W50TZ6C</user>
    <text>Ah ha</text>
  </message>
  <message>
    <ts>2017-08-01T00:15:53.596896</ts>
    <user>U5W50TZ6C</user>
    <text>That simple eh :wink:</text>
  </message>
  <message>
    <ts>2017-08-01T00:16:06.599028</ts>
    <user>U6EAT2Z37</user>
    <text>Sort of :slightly_smiling_face: there are some implicit caveats there ... but yeah.</text>
  </message>
  <message>
    <ts>2017-08-01T00:16:18.601089</ts>
    <user>U5W50TZ6C</user>
    <text>Hm fair enough. I'll give it a try</text>
  </message>
  <message>
    <ts>2017-08-01T00:16:19.601319</ts>
    <user>U5W50TZ6C</user>
    <text>Thanks!</text>
  </message>
  <message>
    <ts>2017-08-01T00:16:40.604715</ts>
    <user>U6EAT2Z37</user>
    <text>I mean the `b` is locked to a particular type as soon as it becomes a value - it's not "anything, anytime" or anything crazy like that</text>
  </message>
  <message>
    <ts>2017-08-01T00:17:17.610996</ts>
    <user>U5W50TZ6C</user>
    <text>Right! I'm trying to represent a model... which can contain anything, hence my question</text>
  </message>
  <message>
    <ts>2017-08-01T00:17:31.613518</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U2P9RBH4J&gt; I'm saying I'd like to use purescript, really. I was just saying that apparently the tooling isn't as good for it... and there are some other things that also aren't as good... I like the code ecosystem of elm quite a bit... it has more mindshare, too.</text>
  </message>
  <message>
    <ts>2017-08-01T00:17:54.617452</ts>
    <user>U6EAT2Z37</user>
    <text>and there's something to be said for actually using the abstractions we have before we reach for more complicated ones. Functions are pretty amazing, abstraction-wise. I think a lot of people miss that.</text>
  </message>
  <message>
    <ts>2017-08-01T00:25:42.694663</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U5W50TZ6C&gt; well you can do that with what I wrote... but values have types in code... they're not polymorphic. So as soon as you *use* it somewhere, it will be concretized to an actual value and therefore type.</text>
  </message>
  <message>
    <ts>2017-08-01T00:28:09.718678</ts>
    <user>U5W50TZ6C</user>
    <text>Hm, yeah I was thinking about that. Maybe I should give some context:
I'm trying to make a router, for single page apps. It was going pretty well, until this issue.
The idea is the router stores "Page" records, which are just a record with a model, an init, an, update, etc...
The issue is all "Page"'s would have to have the same model... right?</text>
  </message>
  <message>
    <ts>2017-08-01T00:31:40.754353</ts>
    <user>U5W50TZ6C</user>
    <text>(mentioning &lt;@U6EAT2Z37&gt; so you'll see this)</text>
  </message>
  <message>
    <ts>2017-08-01T00:41:03.842743</ts>
    <user>U4CDMCSN4</user>
    <text>Trying again since I got no answers earlier: Has there been any discussion about adding Type Providers to Elm, mainly to help with the JSON hurdle?</text>
  </message>
  <message>
    <ts>2017-08-01T00:52:59.955334</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U5W50TZ6C&gt; there's a router library... but that has to do with translating URLs into parts of the app... It might be worth looking at the SPA example if you haven't already</text>
  </message>
  <message>
    <ts>2017-08-01T00:53:39.961654</ts>
    <user>U5W50TZ6C</user>
    <text>That's actually why I was (attempting) to make this. The SPA example is cool, but there's a lot of boilerplate. I wanted a way to programatically register pages</text>
  </message>
  <message>
    <ts>2017-08-01T00:54:08.966140</ts>
    <user>U5W50TZ6C</user>
    <text>The best thing I've come up with so far is that each page has to serialize its model to a string, so they can be kept in a Dict or List...</text>
  </message>
  <message>
    <ts>2017-08-01T00:54:12.966878</ts>
    <user>U5W50TZ6C</user>
    <text>Not ideal</text>
  </message>
  <message>
    <ts>2017-08-01T00:55:10.976076</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U5W50TZ6C&gt; not entirely sure what you mean by programmatically register pages. What are you building? Some kind of content management system?</text>
  </message>
  <message>
    <ts>2017-08-01T00:57:34.000021</ts>
    <user>U6EAT2Z37</user>
    <text>I'm not entirely sure Elm is suited to such abstract things, necessarily. But give it a shot :slightly_smiling_face: Might be great! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T00:58:25.008061</ts>
    <user>U5W50TZ6C</user>
    <text>rtfeldman's SPA example is really cool! But there's a lot of boilerplate. Like [here](&lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L31&gt;) is one union type for each page. That kind of thing appears accross a few modules. I'd like to store the pages in a Dict, instead of as a bunch of union types.</text>
  </message>
  <message>
    <ts>2017-08-01T00:58:33.009258</ts>
    <user>U5W50TZ6C</user>
    <text>Hopefully I'm being clear :wink:</text>
  </message>
  <message>
    <ts>2017-08-01T01:10:22.125612</ts>
    <user>U6EAT2Z37</user>
    <text>Well, it's *getting there*. There's a lot of boilerplate. It's on the way to being a kind of framework. The architecture could be cleaned up some, but that makes the types a little more complex seeming. I've done that in the refactor of a project I've been working on at work, but it essentially quarantines most of the page boilerplate to a single file I'm calling a controller, and reduces it by wrapping another parameterized type around most of the type boilerplate. Anyway...</text>
  </message>
  <message>
    <ts>2017-08-01T01:11:24.135836</ts>
    <user>U5W50TZ6C</user>
    <text>Hm, that gives me an idea... I'll see if I can work with it :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T01:11:27.136440</ts>
    <user>U5W50TZ6C</user>
    <text>Thanks again!</text>
  </message>
  <message>
    <ts>2017-08-01T02:34:36.048095</ts>
    <user>U0JBSEGHY</user>
    <text>Is there a `paste` and `cut` event?</text>
  </message>
  <message>
    <ts>2017-08-01T05:08:13.963922</ts>
    <user>U2LAL86AY</user>
    <text>&lt;@U0JBSEGHY&gt; not a built in one -&amp;gt; but you can transform this:
`elem.addEventListener ("paste", handler, false);`
into this:
```
type Msg = DoStuff | AnotherMsg
on "paste" (Json.succeed DoStuff)
```</text>
  </message>
  <message>
    <ts>2017-08-01T05:08:33.971231</ts>
    <user>U2LAL86AY</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Events#on&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T05:09:35.993725</ts>
    <user>U0JBSEGHY</user>
    <text>Cool thanks. I will keep this in mind. I ended up reducing what I was doing in elm and moved it over to JS</text>
  </message>
  <message>
    <ts>2017-08-01T05:11:14.030958</ts>
    <user>U2LAL86AY</user>
    <text>every time i can, i try to keep things in elm :simple_smile:</text>
  </message>
  <message>
    <ts>2017-08-01T05:27:30.394202</ts>
    <user>U0JBSEGHY</user>
    <text>&lt;@U2LAL86AY&gt; that was my logic but things got pretty out of hand.</text>
  </message>
  <message>
    <ts>2017-08-01T06:06:53.246219</ts>
    <user>U18UD6T3J</user>
    <text>Worst thing about Elm: once you go back to working with JS, it's even more painful.
Damn you. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T07:50:42.132686</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U18UD6T3J&gt; ah, they're just languages :slightly_smiling_face: use the bits that are good, and try to put up with the bits that are bad :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T07:57:12.250434</ts>
    <user>U18UD6T3J</user>
    <text>&lt;@U6EAT2Z37&gt;  sure, they all have their pros and cons.
but JS is for small scripts, not big apps. Elm showed me how to do things properly and safely. Going back to JS is a painful experience now. 

Hopefully the jobs channel will get chattier over time :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T08:00:12.309320</ts>
    <user>U0HUBVDD2</user>
    <text>Hi, I noticed Date will be removed from 0.19, my question is how will we get the date.now after that?</text>
  </message>
  <message>
    <ts>2017-08-01T08:03:15.371303</ts>
    <user>U3SJEDR96</user>
    <text>I would suggest reading the commit message for that commit. It's pretty informative.</text>
  </message>
  <message>
    <ts>2017-08-01T08:07:27.455505</ts>
    <user>U0HUBVDD2</user>
    <text>&lt;https://github.com/elm-lang/core/commit/a892fdf705f83523752c5469384e9880fbdfe3b1&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T08:07:55.465031</ts>
    <user>U0HUBVDD2</user>
    <text>`elm-community/elm-time` doesnt get the date now</text>
  </message>
  <message>
    <ts>2017-08-01T08:08:17.472265</ts>
    <user>U3SJEDR96</user>
    <text>"Unclear if we should stick with this choice, but I would like to
explore alternatives first."</text>
  </message>
  <message>
    <ts>2017-08-01T08:09:06.488161</ts>
    <user>U3SJEDR96</user>
    <text>The point being - Elm 0.19 isn't ready for release; don't read into things too much, but do understand they are actively being worked on, and thought about</text>
  </message>
  <message>
    <ts>2017-08-01T08:12:38.559174</ts>
    <user>U3SJEDR96</user>
    <text>in particular, there is still `Time.now`, and `elm-time` has a `DateTime.fromTimeStamp : Time -&amp;gt; DateTime` function</text>
  </message>
  <message>
    <ts>2017-08-01T08:18:45.687061</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U18UD6T3J&gt; we use Ember at work . Works out ok. It's written in JS. I understand that you like Elm. There are pros and cons to all technology choices, though. I feel like maybe "golden spoon"ing isn't such a productive thing to do, if you know what I mean :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T08:23:31.790681</ts>
    <user>U18UD6T3J</user>
    <text>yeah, on the other hand saying "oh well, it works ok for me, all languages have pros and cons, so they are equal" is not accurate as well.
I'm seeing a huge difference, and that's what I said, in a dramatic maybe way. :slightly_smiling_face: 
Whether I like it or not is irrelevant. That's a personal preference.</text>
  </message>
  <message>
    <ts>2017-08-01T08:32:23.992223</ts>
    <user>U6EAT2Z37</user>
    <text>&lt;@U18UD6T3J&gt; glad the tool's working out for you, then :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T10:37:53.105959</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U0HUBVDD2&gt; &lt;@U3SJEDR96&gt;  I agree about not reading into things too much re active changes to core, but just to note `DateTime.fromTimestamp` from `elm-time` is not what you want to use to represent an actual point in time, since `DateTime` is abstracted from timezone.</text>
  </message>
  <message>
    <ts>2017-08-01T10:41:47.258893</ts>
    <user>U4872964V</user>
    <text>So, the question is, what do you need the Date for</text>
  </message>
  <message>
    <ts>2017-08-01T10:42:24.282291</ts>
    <user>U2GTQM83A</user>
    <text>Hi, what do you honourable people use for pie charts in Elm?</text>
  </message>
  <message>
    <ts>2017-08-01T10:42:50.299233</ts>
    <user>U0JFGGZS6</user>
    <text>example of why it's not good to use elm-time DateTime this way  -&amp;gt;  &lt;https://ellie-app.com/3TQDS9MWKh5a1/0&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T10:43:18.317332</ts>
    <user>U0JFGGZS6</user>
    <text>the hour is in UTC</text>
  </message>
  <message>
    <ts>2017-08-01T10:43:54.340956</ts>
    <user>U4872964V</user>
    <text>yes, so when you want to show a time in the user’s local time, what would you use</text>
  </message>
  <message>
    <ts>2017-08-01T10:44:27.362404</ts>
    <user>U4872964V</user>
    <text>you’d have to pass getTimezoneOffset() through a flag or something</text>
  </message>
  <message>
    <ts>2017-08-01T10:47:02.464554</ts>
    <user>U0JFGGZS6</user>
    <text>Yeah. `elm-time` is designed to be completely independent of javascript</text>
  </message>
  <message>
    <ts>2017-08-01T10:47:33.485632</ts>
    <user>U4872964V</user>
    <text>the issue that right now, converting to a `Date` is not a pure function is not satisfying though</text>
  </message>
  <message>
    <ts>2017-08-01T10:47:34.486228</ts>
    <user>U3SJEDR96</user>
    <text>there is a &lt;http://package.elm-lang.org/packages/elm-community/elm-time/1.0.7/Time-ZonedDateTime#fromTimestamp&gt; too, tho..</text>
  </message>
  <message>
    <ts>2017-08-01T10:47:50.496701</ts>
    <user>U3SJEDR96</user>
    <text>But yeah, I see your point</text>
  </message>
  <message>
    <ts>2017-08-01T10:48:03.505052</ts>
    <user>U0JFGGZS6</user>
    <text>yes. and then you need to know the zone</text>
  </message>
  <message>
    <ts>2017-08-01T10:48:14.512368</ts>
    <user>U4872964V</user>
    <text>there should be a method to create a `TimeZone` from an offset, though</text>
  </message>
  <message>
    <ts>2017-08-01T10:48:39.529868</ts>
    <user>U0JFGGZS6</user>
    <text>unfortunately time zones are messy beasts</text>
  </message>
  <message>
    <ts>2017-08-01T10:48:43.532454</ts>
    <user>U4872964V</user>
    <text>I think having the user explicitly specify these things is not really a bad thing</text>
  </message>
  <message>
    <ts>2017-08-01T10:51:08.628625</ts>
    <user>U0JFGGZS6</user>
    <text>indeed. but it makes it a lot more complicated than just taking in what the browser says is local time</text>
  </message>
  <message>
    <ts>2017-08-01T10:51:20.636920</ts>
    <user>U5X2ZRFDF</user>
    <text>I've been using the `Bogdanp/elm-time` package rather than the `core/Date` library, because it provides 1) an easy `date` constructor that builds a Date from a year, month and day, and 2) functions to add to the date, such as `addYears`, `addMonths` and `addDays`. Unfortunately, it does not provide a function to tell you the number of days between two dates, so I wrote my own `daysBetween` function, that just converts both Dates to Times, subtracts, and divides by ms per day.</text>
  </message>
  <message>
    <ts>2017-08-01T10:51:25.640361</ts>
    <user>U4872964V</user>
    <text>yes, but at the very least it should be a `Cmd`</text>
  </message>
  <message>
    <ts>2017-08-01T10:52:39.688994</ts>
    <user>U3SJEDR96</user>
    <text>That is, I suppose one of the larger issues with the current `Date`, indeed. `Date.fromString` being locale-dependent, that is</text>
  </message>
  <message>
    <ts>2017-08-01T10:53:50.736344</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U5X2ZRFDF&gt; yeah, and for my needs I typically just need the current date, not date-time from the browser, so I usually end up sending `(year, month, day)` in through flags and ports, and use `elm-time`'s Date type</text>
  </message>
  <message>
    <ts>2017-08-01T10:54:59.782105</ts>
    <user>U5X2ZRFDF</user>
    <text>Nice. Yeah, I am rendering a timeline, so I do a lot of date math.</text>
  </message>
  <message>
    <ts>2017-08-01T10:56:17.836317</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U2GTQM83A&gt;   `elm-visualization` has pie charts,  `elm-plot` may or may be planned, not sure.</text>
  </message>
  <message>
    <ts>2017-08-01T10:56:47.856758</ts>
    <user>U5X2ZRFDF</user>
    <text>Fortunately I don't have UTC issues since I'm only working with dates.</text>
  </message>
  <message>
    <ts>2017-08-01T10:57:40.892447</ts>
    <user>U0JFGGZS6</user>
    <text>I think there's `delta` that would give you `daysBetween` ?  &lt;https://github.com/elm-community/elm-time/blob/1.0.7/src/Time/Date.elm#L246&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T11:01:03.032481</ts>
    <user>U0HUBVDD2</user>
    <text>still need the date of today though, only `Date` can give me that</text>
  </message>
  <message>
    <ts>2017-08-01T11:01:58.070794</ts>
    <user>U5X2ZRFDF</user>
    <text>Hmm. I had been thinking `delta` would give you years first, then months from what is left over, then days from what is left. But it looks like I misunderstood, and the years, months, and day difference values are independent.</text>
  </message>
  <message>
    <ts>2017-08-01T11:06:06.239195</ts>
    <user>U5X2ZRFDF</user>
    <text>In other words, I had assumed that a `delta` between 5 Jan 2017 and 6 Jan 2018 would give you a result of 1 year, 0 months, 1 day. Which doesn't do me a lot of good, if I don't know how many days are in the year. But reading the source, it looks like it will actually tell you 1 year, 12 months, 366 days. I hadn't even tried it.</text>
  </message>
  <message>
    <ts>2017-08-01T11:06:47.267089</ts>
    <user>U4872964V</user>
    <text>&lt;@U5X2ZRFDF&gt;, yeah, that’s a strange api</text>
  </message>
  <message>
    <ts>2017-08-01T11:10:22.407117</ts>
    <user>U5X2ZRFDF</user>
    <text>Still it seems like a lot of calculations it's doing to come up with the number of days. I think converting both to times and subtracting and dividing is more efficient.</text>
  </message>
  <message>
    <ts>2017-08-01T11:11:41.460386</ts>
    <user>U3SJEDR96</user>
    <text>Might be accounting for leapseconds and whatnot</text>
  </message>
  <message>
    <ts>2017-08-01T11:11:57.470762</ts>
    <user>U3SJEDR96</user>
    <text>correctness &amp;lt;-&amp;gt; efficiency</text>
  </message>
  <message>
    <ts>2017-08-01T11:12:11.480020</ts>
    <user>U4872964V</user>
    <text>leap seconds are not in the time though</text>
  </message>
  <message>
    <ts>2017-08-01T11:12:47.504867</ts>
    <user>U3SJEDR96</user>
    <text>eh, good point</text>
  </message>
  <message>
    <ts>2017-08-01T11:12:52.507865</ts>
    <user>U3SJEDR96</user>
    <text>I have time :disappointed:</text>
  </message>
  <message>
    <ts>2017-08-01T11:12:56.510583</ts>
    <user>U3SJEDR96</user>
    <text>hate*</text>
  </message>
  <message>
    <ts>2017-08-01T11:13:04.515736</ts>
    <user>U4872964V</user>
    <text>yes, time is complicated</text>
  </message>
  <message>
    <ts>2017-08-01T11:13:35.536603</ts>
    <user>U5X2ZRFDF</user>
    <text>Agreed that correctness is important here, but... 1) Leap seconds don't matter when you're only doing date math. If you convert to a time, you use midnight, then when you convert back to dates, use `round`. 2) The library accounts for leap years but the code says nothing about leap seconds.</text>
  </message>
  <message>
    <ts>2017-08-01T11:14:09.558432</ts>
    <user>U4872964V</user>
    <text>no, leap seconds are not part of time, really, the clock is just adjusted to match</text>
  </message>
  <message>
    <ts>2017-08-01T11:19:41.777149</ts>
    <user>U5X2ZRFDF</user>
    <text>They can affect date calculations if you use time as an intermediary. If there is no leap second this year, then midnight of 1 Jan next year is a whole multiple of 86400 seconds later than midnight of 1 Jan this year. But if there's a leap second, then there will be an extra second between them. So if you divide by 86400, you have to round down to the nearest number of days.</text>
  </message>
  <message>
    <ts>2017-08-01T11:20:39.816026</ts>
    <user>U4872964V</user>
    <text>no there won’t, unix time does not have leap seconds</text>
  </message>
  <message>
    <ts>2017-08-01T11:21:56.865549</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, that's what caught me off-guard, too. It's strictly incremental, +1 every second of passing time</text>
  </message>
  <message>
    <ts>2017-08-01T11:22:24.884384</ts>
    <user>U5X2ZRFDF</user>
    <text>&lt;https://en.wikipedia.org/wiki/Unix_time&gt;
&amp;gt; Unix time (also known as POSIX time or epoch time)[citation needed] is a system for describing instants in time, defined as the number of seconds that have elapsed since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970,[1][note 1] minus the number of leap seconds that have taken place since then.</text>
  </message>
  <message>
    <ts>2017-08-01T11:22:26.885333</ts>
    <user>U4872964V</user>
    <text>UTC has leap seconds, but the unix time is simply synchronized to the UTC, meaning that when a leap second is introduces, the clock is just off and will be adjusted</text>
  </message>
  <message>
    <ts>2017-08-01T11:22:51.902258</ts>
    <user>U4872964V</user>
    <text>&lt;@U5X2ZRFDF&gt;, yes, exactly</text>
  </message>
  <message>
    <ts>2017-08-01T11:23:27.926641</ts>
    <user>U4872964V</user>
    <text>so leap seconds are just ignored</text>
  </message>
  <message>
    <ts>2017-08-01T11:23:33.930257</ts>
    <user>U5X2ZRFDF</user>
    <text>Ah I see</text>
  </message>
  <message>
    <ts>2017-08-01T11:24:03.950147</ts>
    <user>U5X2ZRFDF</user>
    <text>But... what about JavaScript? Does it follow Unix time? Or might it have leap seconds, say, on Windows?</text>
  </message>
  <message>
    <ts>2017-08-01T11:24:27.965934</ts>
    <user>U4872964V</user>
    <text>it uses the unix epoch</text>
  </message>
  <message>
    <ts>2017-08-01T11:25:33.010625</ts>
    <user>U5X2ZRFDF</user>
    <text>OK. So JS time could be off by several seconds from UTC.</text>
  </message>
  <message>
    <ts>2017-08-01T11:25:53.024055</ts>
    <user>U5X2ZRFDF</user>
    <text>Oh, but it's adjusted to match, as you said</text>
  </message>
  <message>
    <ts>2017-08-01T11:25:57.026427</ts>
    <user>U4872964V</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-08-01T11:26:49.061794</ts>
    <user>U4872964V</user>
    <text>UTC seconds and unix seconds do not match, but the dates _do_ match :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T11:28:53.146047</ts>
    <user>U5X2ZRFDF</user>
    <text>By "do not match", do you mean, at most given points in time, they don't match? Or do you mean, measuring differences over large periods of time, they don't match?</text>
  </message>
  <message>
    <ts>2017-08-01T11:29:15.160461</ts>
    <user>U4872964V</user>
    <text>UTC seconds since 1970 is not the same number as unix seconds since 1970</text>
  </message>
  <message>
    <ts>2017-08-01T11:29:21.165338</ts>
    <user>U5X2ZRFDF</user>
    <text>Right</text>
  </message>
  <message>
    <ts>2017-08-01T11:29:31.171661</ts>
    <user>U5X2ZRFDF</user>
    <text>So, the latter</text>
  </message>
  <message>
    <ts>2017-08-01T11:30:09.197449</ts>
    <user>U5X2ZRFDF</user>
    <text>But _current_ UTC time and _current_ Unix time should match. Unless we're in the middle of a leap second.</text>
  </message>
  <message>
    <ts>2017-08-01T11:30:27.209902</ts>
    <user>U4872964V</user>
    <text>yes, if you display the time as a date</text>
  </message>
  <message>
    <ts>2017-08-01T11:30:38.217845</ts>
    <user>U4872964V</user>
    <text>date+time</text>
  </message>
  <message>
    <ts>2017-08-01T11:30:47.223410</ts>
    <user>U4872964V</user>
    <text>but not if you display it as a second offset</text>
  </message>
  <message>
    <ts>2017-08-01T11:30:59.231743</ts>
    <user>U5X2ZRFDF</user>
    <text>Right... which is what it's actually stored as.</text>
  </message>
  <message>
    <ts>2017-08-01T11:31:16.243419</ts>
    <user>U5X2ZRFDF</user>
    <text>Makes sense.</text>
  </message>
  <message>
    <ts>2017-08-01T11:31:17.244448</ts>
    <user>U4872964V</user>
    <text>yes, so you need to know which one is which, fortunately, we do know that</text>
  </message>
  <message>
    <ts>2017-08-01T11:31:43.261927</ts>
    <user>U5X2ZRFDF</user>
    <text>So just don't use Unix time if you're trying to do astronomical calculations</text>
  </message>
  <message>
    <ts>2017-08-01T11:32:07.278749</ts>
    <user>U4872964V</user>
    <text>or measure seconds over a leap second addition</text>
  </message>
  <message>
    <ts>2017-08-01T11:32:23.289266</ts>
    <user>U4872964V</user>
    <text>the clock will stop for one second, basically</text>
  </message>
  <message>
    <ts>2017-08-01T11:35:36.417453</ts>
    <user>U4872964V</user>
    <text>It’s hard to imagine how to incorporate leap seconds, actually, because you want to be able to represent _future_ dates too, and you don’t know in advance if there will be a leap second.</text>
  </message>
  <message>
    <ts>2017-08-01T11:36:34.455663</ts>
    <user>U5X2ZRFDF</user>
    <text>Yep</text>
  </message>
  <message>
    <ts>2017-08-01T11:37:01.473928</ts>
    <user>U5X2ZRFDF</user>
    <text>There have been 27 leap seconds added in the past 45 years!</text>
  </message>
  <message>
    <ts>2017-08-01T11:42:03.672617</ts>
    <user>U3LUC6SNS</user>
    <text>I’ve managed to deploy the Elixir/Phoenix backend to Heroku for the project I am working on, and would now like to do the same with the Elm frontend.  The frontend is running locally using webpack.  What do you recommend?

(Cross-posted from &lt;#C192T0Q1E|beginners&gt;)</text>
  </message>
  <message>
    <ts>2017-08-01T11:48:21.919271</ts>
    <user>U5AR0LDQA</user>
    <text>Anybody know if its possible to remove the elm embed / instance ?</text>
  </message>
  <message>
    <ts>2017-08-01T11:50:10.990248</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U5AR0LDQA&gt; what do you mean? Do you want to run a headless Elm program?</text>
  </message>
  <message>
    <ts>2017-08-01T11:51:28.041612</ts>
    <user>U5AR0LDQA</user>
    <text>I’m running `elm` in a safari extension and it appears that the global keyboard keys are being fired from multiple elm instances. So I’d like to on opening the extension initialize elm and then on closing the popup possibly remove the instance.</text>
  </message>
  <message>
    <ts>2017-08-01T11:51:46.053104</ts>
    <user>U5AR0LDQA</user>
    <text>&lt;@U0LPMPL2U&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T11:52:53.097303</ts>
    <user>U0LPMPL2U</user>
    <text>hmmm I'm not sure</text>
  </message>
  <message>
    <ts>2017-08-01T11:53:18.114243</ts>
    <user>U0LPMPL2U</user>
    <text>in the javascript, if you set the `app = undefined`, does the Elm app get garbage collected?</text>
  </message>
  <message>
    <ts>2017-08-01T11:53:27.120354</ts>
    <user>U3SJEDR96</user>
    <text>Nope</text>
  </message>
  <message>
    <ts>2017-08-01T11:53:52.137368</ts>
    <user>U3SJEDR96</user>
    <text>and no, there currently isn't a (decent) way of stopping and unmounting an elm app</text>
  </message>
  <message>
    <ts>2017-08-01T11:55:24.200498</ts>
    <user>U0J1M0F32</user>
    <text>Especially if you don't find, `window.location.href = '/';` to be a decent way of unmounting your javascript.</text>
  </message>
  <message>
    <ts>2017-08-01T11:55:34.206506</ts>
    <user>U3SJEDR96</user>
    <text>what you can do, however, is make the `isThePopupOpen` part of your state, so you can do `subscriptions { isItOpen } = if isItOpen then *subscribe things* else * don't* `</text>
  </message>
  <message>
    <ts>2017-08-01T11:57:08.270937</ts>
    <user>U3SJEDR96</user>
    <text>I think the hackiest way of "stopping Elm" I've come across is this one &lt;https://github.com/fluxxu/elm-hot-loader/blob/master/hmr.js#L55-L58&gt; (please don't do that)</text>
  </message>
  <message>
    <ts>2017-08-01T11:59:18.359612</ts>
    <user>U5AR0LDQA</user>
    <text>Hmmm thanks everyone! I think that could solve my solution by checking to make sure its open. :smiley:</text>
  </message>
  <message>
    <ts>2017-08-01T11:59:37.372827</ts>
    <user>U17R1GD96</user>
    <text>I need to add some microdata to the page. I found part of them in `Html.Attributes` module. It has `itemprop` but it has no `itemscope`, or `itemtype`. Is it intentional? How to inject those missing attributes?</text>
  </message>
  <message>
    <ts>2017-08-01T12:01:07.437025</ts>
    <user>U3SJEDR96</user>
    <text>You can do this using either `property` or `attribute` - I'm not sure which one you should use for those</text>
  </message>
  <message>
    <ts>2017-08-01T12:03:20.527481</ts>
    <user>U3SJEDR96</user>
    <text>so I think `itemScope : String -&amp;gt; Html.Attribute msg` with a definition like `itemScope scope = Html.Attribute.property "itemScope" (Json.Encode.string scope)` should do</text>
  </message>
  <message>
    <ts>2017-08-01T12:03:29.533149</ts>
    <user>U3SJEDR96</user>
    <text>and something similar for `itemType`</text>
  </message>
  <message>
    <ts>2017-08-01T12:20:16.148743</ts>
    <user>U5AR0LDQA</user>
    <text>Hey that worked &lt;@U3SJEDR96&gt;! I only subscribe to the keyboard events if the popup is open. Thanks for the help.</text>
  </message>
  <message>
    <ts>2017-08-01T13:40:55.974569</ts>
    <user>U5LFUHH19</user>
    <text>Re: &lt;https://ellie-app.com/3TTcht9V6Nxa1/0&gt; How do I handle a possible null in JSON for what could be a record?  I've tried using `Maybe Project` but can't fix the types.</text>
  </message>
  <message>
    <ts>2017-08-01T13:42:33.031923</ts>
    <user>U5LFUHH19</user>
    <text>To explain more, the `project` field, if present, becomes a `Project` -- but what if the field is null?  How can I use `Json.Decode.Pipeline.optional` to handle the optional part?</text>
  </message>
  <message>
    <ts>2017-08-01T13:47:39.215265</ts>
    <user>U5LFUHH19</user>
    <text>OK, I got it!</text>
  </message>
  <message>
    <ts>2017-08-01T13:48:37.250500</ts>
    <user>U5LFUHH19</user>
    <text>I hit this yesterday, thought about it overnight, boiled down the problem to the bare minimum, studied on it, then finally saw the path through the types.  Whew!</text>
  </message>
  <message>
    <ts>2017-08-01T13:49:22.278015</ts>
    <user>U5LFUHH19</user>
    <text>Here is my solution, in case anyone else hits this: &lt;https://ellie-app.com/3TTcht9V6Nxa1/1&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T14:49:17.434831</ts>
    <user>U1G7E1P9S</user>
    <text>Anyone use emacs and elm-mode?</text>
  </message>
  <message>
    <ts>2017-08-01T15:28:00.730639</ts>
    <user>U6CB44HMF</user>
    <text>Hey all, I don't know if it is very applicable, but I made a hidden layer neural net library with backprop training for elm &lt;http://package.elm-lang.org/packages/cakenggt/elm-net/latest&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T17:09:33.026045</ts>
    <user>U60SXAF96</user>
    <text>Is `elm-install` still supported?</text>
  </message>
  <message>
    <ts>2017-08-01T17:10:01.039772</ts>
    <user>U60SXAF96</user>
    <text>I'm getting some super exciting errors:
```
/home/robert/.rbenv/versions/jruby-9.1.12.0/lib/ruby/gems/shared/gems/commander-4.4.3/lib/commander/user_interaction.rb:334: warning: constant ::JavaPackageModuleTemplate is deprecated
error: Contract violation for return value:
        Expected: [Solve::Constraint],
        Actual: [#&amp;lt;Solve::Constraint &amp;lt; 4.0.0&amp;gt;, #&amp;lt;Solve::Constraint &amp;gt;= 3.0.0&amp;gt;]
        Value guarded in: ElmInstall::Utils::transform_constraint
        With Contract: String =&amp;gt; Array
        At: /home/robert/.rbenv/versions/jruby-9.1.12.0/lib/ruby/gems/shared/gems/elm_install-1.1.1/lib/elm_install/utils.rb:23 . Use --trace to view backtrace
```</text>
  </message>
  <message>
    <ts>2017-08-01T17:10:36.057462</ts>
    <user>U60SXAF96</user>
    <text>I just did `elm-package install "ccapndave/elm-update-extra"` on a fresh project, and then an `elm-install`, and then got that.</text>
  </message>
  <message>
    <ts>2017-08-01T17:25:37.486176</ts>
    <user>U60SXAF96</user>
    <text>Filed an issue. &lt;https://github.com/gdotdesign/elm-github-install/issues/32&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T17:34:12.722223</ts>
    <user>U60SXAF96</user>
    <text>Looks like it's a jRuby issue. :disappointed:</text>
  </message>
  <message>
    <ts>2017-08-01T19:33:28.160430</ts>
    <user>U6FN5S74P</user>
    <text>I do! There's also a (pretty quiet) &lt;#C0KAH4D5X|emacs&gt; channel.</text>
  </message>
  <message>
    <ts>2017-08-02T02:34:31.995530</ts>
    <user>U17R26VR8</user>
    <text>I'm doing quite alot of cleaning up of files atm, merging them together. I didn't realise that with elm-format@exp, i can just cat the whole imports lists together, save and elm-format will merge exposings and prude duplicates for you! LOVE IT!</text>
  </message>
  <message>
    <ts>2017-08-02T04:14:51.727103</ts>
    <user>U2L33RRR8</user>
    <text>Hi, does anyone know how to cross-compile elm-format for mac and linux?</text>
  </message>
  <message>
    <ts>2017-08-02T04:45:20.391012</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U2L33RRR8&gt; it's a haskell program, so you should look into how ghc cross-compiling works</text>
  </message>
  <message>
    <ts>2017-08-02T04:46:56.428490</ts>
    <user>U4872964V</user>
    <text>&lt;@U2L33RRR8&gt; exactly what do you want?</text>
  </message>
  <message>
    <ts>2017-08-02T04:49:27.485183</ts>
    <user>U4872964V</user>
    <text>since there are already versions of elm-format for both mac and linux</text>
  </message>
  <message>
    <ts>2017-08-02T04:51:47.537554</ts>
    <user>U2LC0U8JY</user>
    <text>trying to decode recursive json</text>
  </message>
  <message>
    <ts>2017-08-02T04:51:49.538093</ts>
    <user>U2LC0U8JY</user>
    <text>&lt;https://ellie-app.com/3Vb75V7Wfyja1/0&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T04:52:02.542739</ts>
    <user>U2LC0U8JY</user>
    <text>can someone hint me in the right direction?</text>
  </message>
  <message>
    <ts>2017-08-02T04:53:41.580059</ts>
    <user>U6EV3H0N7</user>
    <text>first thing i’d try would be to write it using Json.Decode, rather than Json.Decode.Pipeline</text>
  </message>
  <message>
    <ts>2017-08-02T04:54:00.587275</ts>
    <user>U6EV3H0N7</user>
    <text>in general i try to avoid Pipeline if I can because I find it much harder to work out the type errors from it</text>
  </message>
  <message>
    <ts>2017-08-02T04:54:13.591853</ts>
    <user>U6EV3H0N7</user>
    <text>(and in most cases i can get away without it)</text>
  </message>
  <message>
    <ts>2017-08-02T04:55:08.613085</ts>
    <user>U4872964V</user>
    <text>&lt;@U2LC0U8JY&gt; if you look at that type error it seems that you have a record with a field elements, but your decoder does not return a record</text>
  </message>
  <message>
    <ts>2017-08-02T04:55:21.618099</ts>
    <user>U1CE9DL9H</user>
    <text>general awesome document on recursive decoders and using lazy &lt;https://github.com/zwilias/elm-demystify-decoders/blob/66dcc279b6d74b41fd84b68e8028f94cb95ffc6c/recursive-help.md&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T04:58:19.685698</ts>
    <user>U2LC0U8JY</user>
    <text>yeah i know that. just dont know how to write the decoder so that it returns the correct record</text>
  </message>
  <message>
    <ts>2017-08-02T05:00:14.729265</ts>
    <user>U1CE9DL9H</user>
    <text>you currently decode a `Maybe (List Element)`, and have a constructor `Element : Maybe (List Element) -&amp;gt; Element`</text>
  </message>
  <message>
    <ts>2017-08-02T05:00:30.736328</ts>
    <user>U1CE9DL9H</user>
    <text>so you have to apply the constructor to the decoder, which you can do with `Decode.map`</text>
  </message>
  <message>
    <ts>2017-08-02T05:21:21.205829</ts>
    <user>U2L33RRR8</user>
    <text>&lt;@U4872964V&gt; I want to use one binary for dev machine (mac) and ci (redhat). Also, I am using `elm-format` with 2 tabs so I have to build it my own.</text>
  </message>
  <message>
    <ts>2017-08-02T05:38:35.590317</ts>
    <user>U4872964V</user>
    <text>&lt;@U2L33RRR8&gt;, one binary for two different architectures? I don’t think that’s possible.</text>
  </message>
  <message>
    <ts>2017-08-02T05:39:07.601732</ts>
    <user>U4872964V</user>
    <text>I’d just build one binary on each machine. Why cross-compile when you can do that?</text>
  </message>
  <message>
    <ts>2017-08-02T05:41:21.651482</ts>
    <user>U2L33RRR8</user>
    <text>because I didn’t want to setup build tools for haskell in the ci</text>
  </message>
  <message>
    <ts>2017-08-02T05:41:37.657420</ts>
    <user>U2L33RRR8</user>
    <text>but maybe that is easier, or do it in another machine</text>
  </message>
  <message>
    <ts>2017-08-02T05:42:03.667049</ts>
    <user>U4872964V</user>
    <text>yes, that’s definitely easier than building a cross compiler (you’d have to build ghc yourself, and make all sorts of configuration stuff)</text>
  </message>
  <message>
    <ts>2017-08-02T06:02:23.107766</ts>
    <user>U2LC0U8JY</user>
    <text>I could not figure out how to decode 
```
type Element
    = Element
        { uuid : Int
        , elements : Maybe (List Element)
        }
```</text>
  </message>
  <message>
    <ts>2017-08-02T06:02:27.109209</ts>
    <user>U2LC0U8JY</user>
    <text>:disappointed:</text>
  </message>
  <message>
    <ts>2017-08-02T06:03:29.130969</ts>
    <user>U2LC0U8JY</user>
    <text>also, this makes it much harder to work with</text>
  </message>
  <message>
    <ts>2017-08-02T06:03:30.131322</ts>
    <user>U2LC0U8JY</user>
    <text>right?</text>
  </message>
  <message>
    <ts>2017-08-02T06:03:51.138675</ts>
    <user>U2LC0U8JY</user>
    <text>using a record would be easier, but is not possible in a recursive way</text>
  </message>
  <message>
    <ts>2017-08-02T06:09:36.255569</ts>
    <user>U4872964V</user>
    <text>what could you not figure out? It would be exactly the same using a record (though you can’t define recursive records of course)</text>
  </message>
  <message>
    <ts>2017-08-02T06:10:46.278394</ts>
    <user>U4872964V</user>
    <text>&lt;@U2LC0U8JY&gt; first, what is the difference between `elements = Just []` and `elements = Nothing`?</text>
  </message>
  <message>
    <ts>2017-08-02T06:16:46.392498</ts>
    <user>U2LC0U8JY</user>
    <text>with a record i would write it like this:
```
elDecoder : Decode.Decoder Element
elDecoder =
    Decode.map2 Element
        (Decode.field "uuid" &lt;http://Decode.int|Decode.int&gt;)
        (Decode.field "elements" (Decode.list (Decode.lazy (\_ -&amp;gt; elDecoder))))
```</text>
  </message>
  <message>
    <ts>2017-08-02T06:18:32.425403</ts>
    <user>U3SJEDR96</user>
    <text>`Decode.map2 (\uuid elements -&amp;gt; Element { uuid = uuid, elements = elements } )` would be the "opaque" translation of that</text>
  </message>
  <message>
    <ts>2017-08-02T07:39:55.906945</ts>
    <user>U2LC0U8JY</user>
    <text>thx &lt;@U3SJEDR96&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T09:55:42.515140</ts>
    <user>U1G7E1P9S</user>
    <text>hello</text>
  </message>
  <message>
    <ts>2017-08-02T10:00:15.691097</ts>
    <user>U1G7E1P9S</user>
    <text>I need some help with this error. ```The 3rd argument to function `foldr` is causing a mismatch.

166|                     List.foldr insertPermit [] fimps
                                                    ^^^^^
Function `foldr` is expecting the 3rd argument to be:

    List
        { building : String
        , elevation : String
        , location : String
        , permitNumber : String
        , room : String
        , roomDescription : String
        }

But it is:

    List FIMP```</text>
  </message>
  <message>
    <ts>2017-08-02T10:00:58.720446</ts>
    <user>U1G7E1P9S</user>
    <text>```type alias FIMP =
    { permitNumber : String
    , watchType : String
    , room : String
    , roomDescription : String
    , building : String
    , elevation : String
    , routeChanges : String
    , permitStatus : String
    , location : String
    }```</text>
  </message>
  <message>
    <ts>2017-08-02T10:01:56.758849</ts>
    <user>U1G7E1P9S</user>
    <text>insertPermit should work on two types of permits having some common fields, but I get this error and I don't understand why.</text>
  </message>
  <message>
    <ts>2017-08-02T10:02:08.766986</ts>
    <user>U6EV3H0N7</user>
    <text>what’s the type signature of insertPermit?</text>
  </message>
  <message>
    <ts>2017-08-02T10:02:35.784296</ts>
    <user>U1G7E1P9S</user>
    <text>```insertPermit :
    { permitNumber : String
    , room : String
    , roomDescription : String
    , building : String
    , elevation : String
    , location : String
    }
    -&amp;gt;
        List
            { room : String
            , building : String
            , roomDescription : String
            , elevation : String
            , permits : List String
            }
    -&amp;gt;
        List
            { room : String
            , building : String
            , roomDescription : String
            , elevation : String
            , permits : List String
            }```</text>
  </message>
  <message>
    <ts>2017-08-02T10:03:00.800942</ts>
    <user>U6EV3H0N7</user>
    <text>ah, so that doesn’t let the first argument have any extra fields in it</text>
  </message>
  <message>
    <ts>2017-08-02T10:03:18.812557</ts>
    <user>U6EV3H0N7</user>
    <text>you want `{ a | permitNumber : String, ... }` to allow “any record including these fields”</text>
  </message>
  <message>
    <ts>2017-08-02T10:03:28.818761</ts>
    <user>U6EV3H0N7</user>
    <text>(rather than “this exact record”)</text>
  </message>
  <message>
    <ts>2017-08-02T10:03:33.822222</ts>
    <user>U1G7E1P9S</user>
    <text>ah.</text>
  </message>
  <message>
    <ts>2017-08-02T10:04:00.839880</ts>
    <user>U6EV3H0N7</user>
    <text>it’s a super useful feature I didn’t discover for ages</text>
  </message>
  <message>
    <ts>2017-08-02T10:04:24.854472</ts>
    <user>U1G7E1P9S</user>
    <text>This is how you make a function work on similar types?</text>
  </message>
  <message>
    <ts>2017-08-02T10:05:30.896750</ts>
    <user>U3SJEDR96</user>
    <text>It's how you say a function works on "any record with at least these fields", while also restricting that function so it can _only_ access those fields and no others</text>
  </message>
  <message>
    <ts>2017-08-02T10:06:11.923184</ts>
    <user>U1G7E1P9S</user>
    <text>Thanks much!</text>
  </message>
  <message>
    <ts>2017-08-02T10:06:44.943951</ts>
    <user>U1G7E1P9S</user>
    <text>Does this work on return types? or should I give the exact field names for returns?</text>
  </message>
  <message>
    <ts>2017-08-02T10:07:01.955456</ts>
    <user>U6EV3H0N7</user>
    <text>you’ll want the same in the return types</text>
  </message>
  <message>
    <ts>2017-08-02T10:08:12.000467</ts>
    <user>U6EV3H0N7</user>
    <text>so something like:
```
changePartOfRecord : { a | field1 : String } -&amp;gt; { a | field1 : String }
changePartOfRecord record = 
     { record | field1 = field1 ++ " changed!" }
```</text>
  </message>
  <message>
    <ts>2017-08-02T10:18:05.374770</ts>
    <user>U0HCQALRH</user>
    <text>&lt;https://twitter.com/dailydripcom/status/892740546208440320&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T10:43:39.366261</ts>
    <user>U62KVQVD1</user>
    <text>Hi, I am using HttpBuilder and my question is: “Can I get response headers somehow?“.</text>
  </message>
  <message>
    <ts>2017-08-02T10:51:14.667221</ts>
    <user>U3SJEDR96</user>
    <text>yeah, you can use `expectStringResponse` which will give you the entire response, with the body as a string (so you need to do any json decoding yourself using `Json.Decode.decodeString`</text>
  </message>
  <message>
    <ts>2017-08-02T10:51:52.693459</ts>
    <user>U3SJEDR96</user>
    <text>&lt;http://package.elm-lang.org/packages/lukewestby/elm-http-builder/5.1.0/HttpBuilder#withExpect&gt; + &lt;http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#expectStringResponse&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T10:54:18.792933</ts>
    <user>U0S6BNVNY</user>
    <text>&lt;https://twitter.com/dailydripcom/status/892740546208440320&gt; today I decided to try to proselytize for elm a bit so I'm answering anyone's questions I can. Retweets and/or hop-ons welcome! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-02T10:54:33.802731</ts>
    <user>U0S6BNVNY</user>
    <text>ahh I just saw Franzé shared that sorry</text>
  </message>
  <message>
    <ts>2017-08-02T11:00:53.065629</ts>
    <user>U62KVQVD1</user>
    <text>&lt;@U3SJEDR96&gt; Thanks a lot!</text>
  </message>
  <message>
    <ts>2017-08-02T11:22:10.931525</ts>
    <user>U0F7JPK36</user>
    <text>&lt;@U62KVQVD1&gt; i made a package just now for stuff like this: &lt;http://package.elm-lang.org/packages/lukewestby/http-extra/1.0.0/Http-Extra#expectJsonResponse&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T11:22:35.948792</ts>
    <user>U0F7JPK36</user>
    <text>y'all feel free to submit PRs with whatever you want, i'm not so concerned with how stuff will fit into the http-builder API this way</text>
  </message>
  <message>
    <ts>2017-08-02T11:24:33.029094</ts>
    <user>U3SJEDR96</user>
    <text>dope!</text>
  </message>
  <message>
    <ts>2017-08-02T11:40:55.693690</ts>
    <user>U0UKSE1SP</user>
    <text>Can someone help me understand some syntax? `type alias Thing` makes sense to me at first glance, but I'm having a hard time wrapping my brain around the meaning of `type alias Thing msg`? (The appended ` msg`, as in `type alias Html msg`)</text>
  </message>
  <message>
    <ts>2017-08-02T11:44:48.846429</ts>
    <user>U0J1M0F32</user>
    <text>The `msg` part could be `a` or `t`, its a stand-in for a generic "other" type.</text>
  </message>
  <message>
    <ts>2017-08-02T11:44:53.849367</ts>
    <user>U0J1M0F32</user>
    <text>At least, that is my understanding of it.</text>
  </message>
  <message>
    <ts>2017-08-02T11:47:37.957673</ts>
    <user>U0J1M0F32</user>
    <text>```
type alias Post = { title: String, body: String }

type alias Comment thing = { on : thing, content: String }

somePost = { title = "Amazing!", body = "etc etc etc..." }

postComment = { content = "Cool Post!", on = somePost }

commentComment = { content = " I disagree!", on = postComment }

```</text>
  </message>
  <message>
    <ts>2017-08-02T11:49:58.050124</ts>
    <user>U3SJEDR96</user>
    <text>Alternatively, say I'm using a list to represent a stack of things, I could `type alias Stack a = List a`, where `a` just means it's not constrained to any specific type. If I were to say `type alias Stack = List String`, You don't need a variable because a `Stack` will _always_ be a list of strings.</text>
  </message>
  <message>
    <ts>2017-08-02T11:58:11.376178</ts>
    <user>U1G51S63S</user>
    <text>Hi folks! is anyone used google maps polymer within Elm?</text>
  </message>
  <message>
    <ts>2017-08-02T11:58:31.389258</ts>
    <user>U62KVQVD1</user>
    <text>&lt;@U0F7JPK36&gt; great. Btw, I am elm newbie so can you update README.md with some example, please?</text>
  </message>
  <message>
    <ts>2017-08-02T12:01:33.514528</ts>
    <user>U0LPMPL2U</user>
    <text>&lt;@U1G51S63S&gt; check out &lt;https://www.youtube.com/watch?v=ar3TakwE8o0&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T12:03:17.582683</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U0LPMPL2U&gt; yep, I saw it. I have strange problem - just tried to use polymer within server-side rendered template (Elixir/Phoenix) and it works. Then added a map to my view and it don't :disappointed:

Got this errors ```No Google Maps API Key or Client ID specified. See &lt;https://developers.google.com/maps/documentation/javascript/get-api-key&gt; for instructions to get started with a key or client id.
You have included the Google Maps API multiple times on this page. This may cause unexpected errors.```</text>
  </message>
  <message>
    <ts>2017-08-02T12:03:44.600166</ts>
    <user>U1G51S63S</user>
    <text>and code looks like ```googleMap
                    [ attribute "api-key" "..."
                    , attribute "latitude" "37.790"
                    , attribute "longitude" "-122.390"
                    , class "listing-neighborhood__map"
                    ]
                    []


googleMap : List (Html.Attribute msg) -&amp;gt; List (Html msg) -&amp;gt; Html msg
googleMap =
    Html.node "google-map"```</text>
  </message>
  <message>
    <ts>2017-08-02T12:04:24.624878</ts>
    <user>U1G51S63S</user>
    <text>so everything looks the same as html version or rtfeldman one</text>
  </message>
  <message>
    <ts>2017-08-02T12:04:44.638007</ts>
    <user>U0LPMPL2U</user>
    <text>Are you sure the attributes are named correctly?</text>
  </message>
  <message>
    <ts>2017-08-02T12:04:54.644290</ts>
    <user>U0LPMPL2U</user>
    <text>it sounds like it's not able to read the api key</text>
  </message>
  <message>
    <ts>2017-08-02T12:05:23.662336</ts>
    <user>U1G51S63S</user>
    <text>yes, I am sure, it's just copied from the same html `&amp;lt;google-map api-key="..." latitude="37.790" longitude="-122.390" style="height: 400px; width: 600px;"&amp;gt;&amp;lt;/google-map&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-08-02T12:05:56.683061</ts>
    <user>U0LPMPL2U</user>
    <text>That's copied from the talk?</text>
  </message>
  <message>
    <ts>2017-08-02T12:06:28.703185</ts>
    <user>U1G51S63S</user>
    <text>no, this code is from my webpage where I tested it (w/o elm, within the same template where Elm is embedded)</text>
  </message>
  <message>
    <ts>2017-08-02T12:06:37.708812</ts>
    <user>U0LPMPL2U</user>
    <text>ah, I see</text>
  </message>
  <message>
    <ts>2017-08-02T12:06:54.719456</ts>
    <user>U4872964V</user>
    <text>“You have included the Google Maps API multiple times on this page. This may cause unexpected errors.”</text>
  </message>
  <message>
    <ts>2017-08-02T12:06:58.721863</ts>
    <user>U1G51S63S</user>
    <text>so I am just disabled elm app at all, tested this html. then embedded Elm app again and converted this code to Elm</text>
  </message>
  <message>
    <ts>2017-08-02T12:07:24.737698</ts>
    <user>U1G51S63S</user>
    <text>yep, but they isn't</text>
  </message>
  <message>
    <ts>2017-08-02T12:07:58.758924</ts>
    <user>U1G51S63S</user>
    <text>just looking at webpack config - maybe because of HMR or something like this</text>
  </message>
  <message>
    <ts>2017-08-02T12:10:05.837289</ts>
    <user>U0UKSE1SP</user>
    <text>Looking at the HTML library, I see `type alias Html msg = Node msg` and `type alias Attribute msg = Property msg` are passing along the generic to `Node` and `Property` respectively. Following those to the source, I found:

&lt;https://github.com/elm-lang/virtual-dom/blob/2e4f74331d010c7199d803bd9a5c244e1939ef55/src/VirtualDom.elm#L46&gt;

&lt;https://github.com/elm-lang/virtual-dom/blob/2e4f74331d010c7199d803bd9a5c244e1939ef55/src/VirtualDom.elm#L126&gt;

I'm still not understanding what passing that generic all the way down allows for?</text>
  </message>
  <message>
    <ts>2017-08-02T12:13:17.952023</ts>
    <user>U62KVQVD1</user>
    <text>&lt;@U0F7JPK36&gt; I made it working, thanks for writing this.</text>
  </message>
  <message>
    <ts>2017-08-02T12:50:44.283136</ts>
    <user>U1S70NKFF</user>
    <text>what event am I looking for to capture a selected option in a drop down?</text>
  </message>
  <message>
    <ts>2017-08-02T12:51:28.308669</ts>
    <user>U4872964V</user>
    <text>&lt;@U1S70NKFF&gt; “changed” is the on, but “input” should also work in most browsers</text>
  </message>
  <message>
    <ts>2017-08-02T12:51:40.315669</ts>
    <user>U1S70NKFF</user>
    <text>thx!</text>
  </message>
  <message>
    <ts>2017-08-02T12:51:47.319868</ts>
    <user>U4872964V</user>
    <text>sorry, “change”</text>
  </message>
  <message>
    <ts>2017-08-02T12:51:53.323625</ts>
    <user>U1S70NKFF</user>
    <text>roger that</text>
  </message>
  <message>
    <ts>2017-08-02T12:52:34.347945</ts>
    <user>U4872964V</user>
    <text>if you are talking about the &amp;lt;select&amp;gt; element, that is</text>
  </message>
  <message>
    <ts>2017-08-02T12:54:27.415068</ts>
    <user>U3SJEDR96</user>
    <text>They're special in that they are actually implemented in native code, which is why you see the generic suddenly being "swallowed". Nevertheless, they are useful in that they make sure that, at the end of the day, the `view` in your main can send out a consistent message-type, and that this can be guaranteed at compile time</text>
  </message>
  <message>
    <ts>2017-08-02T12:54:36.420624</ts>
    <user>U1G51S63S</user>
    <text>thats really strange :disappointed: still not working even w/o any webpack config (just elm-loader only). and I am absolutely sure there is no 2 google maps imports, etc.

my html looks like this: ```&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
    &amp;lt;meta name="description" content=""&amp;gt;
    &amp;lt;meta name="author" content=""&amp;gt;
    &amp;lt;%= render "_favicon.html", conn: @conn %&amp;gt;
    &amp;lt;script src="&amp;lt;%= static_url(@conn, "/bower_components/webcomponentsjs/webcomponents-lite.min.js") %&amp;gt;"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel="import" href="&amp;lt;%= static_url(@conn, "/bower_components/google-map/google-map.html") %&amp;gt;"&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body class="body" id="body"&amp;gt;
    &amp;lt;div class="loading" id="loading"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src="&amp;lt;%= static_url(@conn, "/js/app.js") %&amp;gt;"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
``` and app.js is a just ```import '../css/app.scss';
import Elm from '../elm/Main';

Elm.Main.fullscreen({
  devicePixelRatio: window.devicePixelRatio,
  now: + new Date()
});
```</text>
  </message>
  <message>
    <ts>2017-08-02T13:33:00.784871</ts>
    <user>U0UKSE1SP</user>
    <text>The specialness is good to know! The "swallowing" of the generic is what was really throwing me off. Thanks for helping me understand</text>
  </message>
  <message>
    <ts>2017-08-02T13:37:09.929952</ts>
    <user>U3SJEDR96</user>
    <text>Now, there _are_ cases where you have a type variable that _only_ appears on the left-hand side of a definition, too. They're called "phantom types" and they have their use, too; but they're definitely not very common, and you can safely ignore their existence for now :wink:</text>
  </message>
  <message>
    <ts>2017-08-02T13:49:33.370940</ts>
    <user>U1S70NKFF</user>
    <text>&lt;@U0S6BNVNY&gt; as soon as I drop in MDL css I can't reach the debugger tab. It's like it's shadowed by some element with a higher z value. Any thoughts on how get around that?</text>
  </message>
  <message>
    <ts>2017-08-02T13:50:15.396142</ts>
    <user>U3SJEDR96</user>
    <text>Adding extra css to bump the z-val of the debugger tab is a good first step</text>
  </message>
  <message>
    <ts>2017-08-02T13:50:24.401688</ts>
    <user>U3SJEDR96</user>
    <text>I think there's an issue for fixing it, too</text>
  </message>
  <message>
    <ts>2017-08-02T13:50:45.414305</ts>
    <user>U1S70NKFF</user>
    <text>will try thx</text>
  </message>
  <message>
    <ts>2017-08-02T13:51:47.452314</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://github.com/elm-lang/virtual-dom/issues/98&gt; "#100 - Controls get covered by elements with a higher z-index"</text>
  </message>
  <message>
    <ts>2017-08-02T13:51:49.453721</ts>
    <user>U3SJEDR96</user>
    <text>so all good :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-02T13:52:52.493057</ts>
    <user>U4872964V</user>
    <text>is 999 enough? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-02T13:53:51.529117</ts>
    <user>U1S70NKFF</user>
    <text>elm-mini-controls cool thx</text>
  </message>
  <message>
    <ts>2017-08-02T13:54:52.568001</ts>
    <user>U1AN4JRFV</user>
    <text>&lt;@U1G51S63S&gt;: what does this evaluate to? ` now: + new Date()`</text>
  </message>
  <message>
    <ts>2017-08-02T13:55:09.578590</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U1AN4JRFV&gt; just a timestamp</text>
  </message>
  <message>
    <ts>2017-08-02T13:55:24.587833</ts>
    <user>U1AN4JRFV</user>
    <text>why the `+` tho?</text>
  </message>
  <message>
    <ts>2017-08-02T13:56:12.618002</ts>
    <user>U1AN4JRFV</user>
    <text>just wondering, if you had a typo in there, that's all. not sure, what your initial issue was.</text>
  </message>
  <message>
    <ts>2017-08-02T13:56:51.642813</ts>
    <user>U1G51S63S</user>
    <text>casting Date to Int :slightly_smiling_face: no, it's not an issue</text>
  </message>
  <message>
    <ts>2017-08-02T13:57:46.675763</ts>
    <user>U1AN4JRFV</user>
    <text>yeah, no problem, i see it now, just looked off</text>
  </message>
  <message>
    <ts>2017-08-02T13:58:43.711171</ts>
    <user>U1AN4JRFV</user>
    <text>as opposed to ```&amp;gt; -new Date()
-1501696693928
```</text>
  </message>
  <message>
    <ts>2017-08-02T14:01:22.813471</ts>
    <user>U1S70NKFF</user>
    <text>yeah .elm-overlay { z-index: 999; } did the trick</text>
  </message>
  <message>
    <ts>2017-08-02T14:03:25.890080</ts>
    <user>U0S6BNVNY</user>
    <text>I haven't had that issue before but I would just include some inline CSS that makes its z-index higher perhaps?</text>
  </message>
  <message>
    <ts>2017-08-02T14:03:37.897513</ts>
    <user>U0S6BNVNY</user>
    <text>ahh I see you just did that</text>
  </message>
  <message>
    <ts>2017-08-02T14:07:43.045232</ts>
    <user>U1AN4JRFV</user>
    <text>&lt;@U1G51S63S&gt;: maybe you have a redirect-rule that returns the index for a route not found, which leads to linking it twice?</text>
  </message>
  <message>
    <ts>2017-08-02T14:10:43.150920</ts>
    <user>U1AN4JRFV</user>
    <text>(meaning, i now read your issue, and this is all i have to offer :slightly_smiling_face: )</text>
  </message>
  <message>
    <ts>2017-08-02T14:11:52.191075</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U1AN4JRFV&gt; thought about this already. removed routing (navigation/url-parser) at all - didn't helped :disappointed:</text>
  </message>
  <message>
    <ts>2017-08-02T14:12:48.223467</ts>
    <user>U1AN4JRFV</user>
    <text>i'd click through all the responses in the dev-console after a fresh reload and check if any of them returned the index.</text>
  </message>
  <message>
    <ts>2017-08-02T14:13:10.236719</ts>
    <user>U1AN4JRFV</user>
    <text>other than index.html, of course</text>
  </message>
  <message>
    <ts>2017-08-02T14:13:33.250317</ts>
    <user>U1G51S63S</user>
    <text>nope, it's not. google maps really loaded twice btw. first time w/o api key and second one with it</text>
  </message>
  <message>
    <ts>2017-08-02T14:13:49.259459</ts>
    <user>U1AN4JRFV</user>
    <text>so, did you get it? is it mapping?</text>
  </message>
  <message>
    <ts>2017-08-02T14:14:19.277996</ts>
    <user>U1G51S63S</user>
    <text>no, I still have no idea why it's loading twice</text>
  </message>
  <message>
    <ts>2017-08-02T14:14:36.287566</ts>
    <user>U1G51S63S</user>
    <text>I am just added debug log to `googleMap` function (which returns Html.node) and it's called once</text>
  </message>
  <message>
    <ts>2017-08-02T14:15:24.316333</ts>
    <user>U4872964V</user>
    <text>so, it’s loading as a response to that DOM element being created, you could compare the stack trace for the two loads</text>
  </message>
  <message>
    <ts>2017-08-02T14:16:02.338961</ts>
    <user>U4872964V</user>
    <text>maybe something funny is going on with the DOM node being created twice, or the attribute added later or something</text>
  </message>
  <message>
    <ts>2017-08-02T14:22:03.552645</ts>
    <user>U66RFDZ8F</user>
    <text>I decided to go with Elm for a major project, contrary to RedInk's advice to start small</text>
  </message>
  <message>
    <ts>2017-08-02T14:22:07.555242</ts>
    <user>U66RFDZ8F</user>
    <text>I don't regret it</text>
  </message>
  <message>
    <ts>2017-08-02T14:22:17.561801</ts>
    <user>U66RFDZ8F</user>
    <text>absolutely amazing!</text>
  </message>
  <message>
    <ts>2017-08-02T14:25:43.685934</ts>
    <user>U4872964V</user>
    <text>&lt;@U66RFDZ8F&gt; if you _can_ go big, you should :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-02T14:25:55.693454</ts>
    <user>U3SQ42JJW</user>
    <text></text>
  </message>
  <message>
    <ts>2017-08-02T14:27:57.767722</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U3SQ42JJW&gt; maybe?

```
List.range (Tuple.first record.range) (Tuple.second record.range)
```</text>
  </message>
  <message>
    <ts>2017-08-02T14:31:54.915490</ts>
    <user>U3SQ42JJW</user>
    <text>sorry for double posting :disappointed: Thanks &lt;@U66RFDZ8F&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-02T14:33:30.973398</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U4872964V&gt; huh, thats funny. just noticed it's present in chrome only - works fine in FF or Safari. error happens in jquery (there is no jquery on my site ofc) even in incognito mode with all extensions disabled :smile: will try to figure it out now</text>
  </message>
  <message>
    <ts>2017-08-02T14:44:17.358331</ts>
    <user>U329ZV5T8</user>
    <text>Anybody have experience swapping out part of an Angular 1 application for an Elm module?</text>
  </message>
  <message>
    <ts>2017-08-02T14:44:28.364748</ts>
    <user>U329ZV5T8</user>
    <text>Should I start with a service or controller or directive or what?</text>
  </message>
  <message>
    <ts>2017-08-02T14:55:14.747994</ts>
    <user>U66RFDZ8F</user>
    <text>Is the default `Array` implementation still broken?</text>
  </message>
  <message>
    <ts>2017-08-02T14:55:50.769057</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, it will be fixed in the next release of `elm-lang/core` which will most likely coincide with 0.19</text>
  </message>
  <message>
    <ts>2017-08-02T14:57:13.817634</ts>
    <user>U66RFDZ8F</user>
    <text>I see `Array.Hamt` is available, but can I decode to it?</text>
  </message>
  <message>
    <ts>2017-08-02T14:59:15.889145</ts>
    <user>U66RFDZ8F</user>
    <text>or `elm-array-exploration`</text>
  </message>
  <message>
    <ts>2017-08-02T15:00:09.922392</ts>
    <user>U23SA861Y</user>
    <text>decode it?</text>
  </message>
  <message>
    <ts>2017-08-02T15:00:23.931487</ts>
    <user>U3SJEDR96</user>
    <text>You usually decode to a `List`</text>
  </message>
  <message>
    <ts>2017-08-02T15:00:38.940139</ts>
    <user>U3SJEDR96</user>
    <text>which you can then `Json.Decode.map (Array.fromList)`</text>
  </message>
  <message>
    <ts>2017-08-02T15:00:39.940902</ts>
    <user>U23SA861Y</user>
    <text>presumably array has a `fromList` method</text>
  </message>
  <message>
    <ts>2017-08-02T15:00:49.946674</ts>
    <user>U23SA861Y</user>
    <text>dammit :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-08-02T15:02:37.012166</ts>
    <user>U66RFDZ8F</user>
    <text>won't work with decoding, I guess I have to fallback on `fromList`</text>
  </message>
  <message>
    <ts>2017-08-02T15:02:48.018241</ts>
    <user>U66RFDZ8F</user>
    <text>I wanted to short cut it lol</text>
  </message>
  <message>
    <ts>2017-08-02T15:03:41.049054</ts>
    <user>U66RFDZ8F</user>
    <text>but if my arrays are not even up to 5 elements, won't it work okay?</text>
  </message>
  <message>
    <ts>2017-08-02T15:03:50.054127</ts>
    <user>U3SJEDR96</user>
    <text>you can always define a `array = list &amp;gt;&amp;gt; map Array.fromList`  function, tho</text>
  </message>
  <message>
    <ts>2017-08-02T15:04:20.071556</ts>
    <user>U3SJEDR96</user>
    <text>it would work perfectly for thousand of elements. Actually the above is exactly how it works for the regular `Json.Decode.array`</text>
  </message>
  <message>
    <ts>2017-08-02T15:04:34.079478</ts>
    <user>U23SA861Y</user>
    <text>growing a linked list is constant time, growing an array is order N</text>
  </message>
  <message>
    <ts>2017-08-02T15:05:11.100701</ts>
    <user>U66RFDZ8F</user>
    <text>you know what, I just realized I only need the first element of the list</text>
  </message>
  <message>
    <ts>2017-08-02T15:05:22.106899</ts>
    <user>U66RFDZ8F</user>
    <text>I will stick to lists for now</text>
  </message>
  <message>
    <ts>2017-08-02T15:09:59.260006</ts>
    <user>U170TNSTZ</user>
    <text>Is this an anti-pattern? `Task.perform (always (Value s)) (Task.succeed ())`</text>
  </message>
  <message>
    <ts>2017-08-02T15:10:02.262130</ts>
    <user>U170TNSTZ</user>
    <text>Looks a bit ugly.</text>
  </message>
  <message>
    <ts>2017-08-02T15:10:55.290919</ts>
    <user>U170TNSTZ</user>
    <text>What I’m trying to achieve, is to get one component’s `update` fn to notify the parent.</text>
  </message>
  <message>
    <ts>2017-08-02T15:14:50.419094</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U170TNSTZ&gt; I pass a third value in the response of the `update` function of the child</text>
  </message>
  <message>
    <ts>2017-08-02T15:15:05.427873</ts>
    <user>U66RFDZ8F</user>
    <text>e.g `update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg, Action )`</text>
  </message>
  <message>
    <ts>2017-08-02T15:15:37.445318</ts>
    <user>U66RFDZ8F</user>
    <text>```
type Action
    = DoNothing
    | Authenticate String
    | HttpAction Network.HttpAction
```</text>
  </message>
  <message>
    <ts>2017-08-02T15:16:40.479397</ts>
    <user>U66RFDZ8F</user>
    <text>my parent update can get cluttered, but I can always extract the code into reusable functions</text>
  </message>
  <message>
    <ts>2017-08-02T15:16:51.485353</ts>
    <user>U170TNSTZ</user>
    <text>Ah, that sounds like a better pattern</text>
  </message>
  <message>
    <ts>2017-08-02T15:16:55.487272</ts>
    <user>U66RFDZ8F</user>
    <text>I find it easier to reason about this way</text>
  </message>
  <message>
    <ts>2017-08-02T15:17:46.514098</ts>
    <user>U4872964V</user>
    <text>&lt;@U170TNSTZ&gt; it’s definitely an anti-pattern unless you really do have a completely separate component</text>
  </message>
  <message>
    <ts>2017-08-02T15:17:53.517860</ts>
    <user>U170TNSTZ</user>
    <text>Sure. Is it something you picked up anywhere? I’m trying to stick to rtfeltman’s  `elm-spa-example`, but it doesn’t do much child-&amp;gt;parent communication</text>
  </message>
  <message>
    <ts>2017-08-02T15:18:18.531119</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U170TNSTZ&gt; I found `elm-spa` to not really meet my needs</text>
  </message>
  <message>
    <ts>2017-08-02T15:18:26.536021</ts>
    <user>U170TNSTZ</user>
    <text>I am trying to do an autocomplete which has some self-contained state.</text>
  </message>
  <message>
    <ts>2017-08-02T15:18:29.537204</ts>
    <user>U170TNSTZ</user>
    <text>Ok</text>
  </message>
  <message>
    <ts>2017-08-02T15:18:33.539543</ts>
    <user>U4872964V</user>
    <text>&lt;@U170TNSTZ&gt; that “pattern” is just how we do things in functional languages: if a function needs to return more info, we return more info</text>
  </message>
  <message>
    <ts>2017-08-02T15:19:07.557436</ts>
    <user>U23SA861Y</user>
    <text>just a heads up that "easier to reason about" is typically a euphemism for "this is the way I'm used to thinking about things"</text>
  </message>
  <message>
    <ts>2017-08-02T15:19:23.565314</ts>
    <user>U4872964V</user>
    <text>there is nothing magical about the `update` function (except for the one you pass to the `program` of course)</text>
  </message>
  <message>
    <ts>2017-08-02T15:19:35.572270</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U170TNSTZ&gt; that sounds like a separate component, but you can use `opaque types`</text>
  </message>
  <message>
    <ts>2017-08-02T15:20:03.587311</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U23SA861Y&gt; well...</text>
  </message>
  <message>
    <ts>2017-08-02T15:20:53.614611</ts>
    <user>U170TNSTZ</user>
    <text>&lt;@U66RFDZ8F&gt; I haven’t heard of that before?</text>
  </message>
  <message>
    <ts>2017-08-02T15:21:09.623442</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U170TNSTZ&gt; I think &lt;https://github.com/evancz/elm-sortable-table&gt; has a really good way of doing it</text>
  </message>
  <message>
    <ts>2017-08-02T15:21:45.643491</ts>
    <user>U66RFDZ8F</user>
    <text>I mean self contained components</text>
  </message>
  <message>
    <ts>2017-08-02T15:22:13.658064</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;https://stackoverflow.com/questions/40794368/what-is-an-opaque-type-in-elm-and-why-is-it-valuable&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T15:25:50.774807</ts>
    <user>U170TNSTZ</user>
    <text>&lt;@U66RFDZ8F&gt; Great, I’ll read up on both :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-02T15:26:37.800124</ts>
    <user>U23SA861Y</user>
    <text>I generally lean more towards the sortable tables method of a config/context where you pass your message constructors in</text>
  </message>
  <message>
    <ts>2017-08-02T15:27:07.816027</ts>
    <user>U23SA861Y</user>
    <text>the reason is because then it plays nicely with partial application and currying</text>
  </message>
  <message>
    <ts>2017-08-02T15:27:19.822595</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U23SA861Y&gt; definitely the best way to do reusable components</text>
  </message>
  <message>
    <ts>2017-08-02T15:27:49.838682</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U170TNSTZ&gt;, unless your component is meant to be reusable, opaque types are a headache to deal with</text>
  </message>
  <message>
    <ts>2017-08-02T15:28:15.852932</ts>
    <user>U66RFDZ8F</user>
    <text>Sortable tables has a great pattern as mentioned by &lt;@U23SA861Y&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T15:37:27.148956</ts>
    <user>U3SJEDR96</user>
    <text>Though be careful with sending calculated state through messages. Sortable tables can get away with it because it doesn't need the previous state to calculate the new state, but if you happen to calculate new state based on rpevious state and send _that_ in your msg from the view, you're up for subtle bugs the moment someone can trigger two messages without your view re-rendering in between...</text>
  </message>
  <message>
    <ts>2017-08-02T15:39:51.224105</ts>
    <user>U0JFGGZS6</user>
    <text>&lt;@U170TNSTZ&gt; I went with returning `(model, Cmd msg, childState)` from `update` in my first approach to a reusable autocomplete thing.</text>
  </message>
  <message>
    <ts>2017-08-02T15:39:52.224378</ts>
    <user>U4872964V</user>
    <text>You should _never_ send messages that contain something from your state :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-02T15:40:08.233055</ts>
    <user>U4872964V</user>
    <text>in my _humble_ opinion</text>
  </message>
  <message>
    <ts>2017-08-02T15:40:35.247563</ts>
    <user>U4872964V</user>
    <text>if you want to get data from your state, it’s right there, no need to put it in a message</text>
  </message>
  <message>
    <ts>2017-08-02T15:41:02.261397</ts>
    <user>U0JFGGZS6</user>
    <text>It seems intuitive. You want to get the selected state back out of it.  But later I dropped doing this, I can't remember exactly why</text>
  </message>
  <message>
    <ts>2017-08-02T15:42:50.318078</ts>
    <user>U0JFGGZS6</user>
    <text>I guess it was more of an approach that your app should own its own state, not rely on the component to pass it back up.</text>
  </message>
  <message>
    <ts>2017-08-02T15:43:48.348855</ts>
    <user>U3SJEDR96</user>
    <text>The potential bugs it can lead to are _very_ tricky to figure out</text>
  </message>
  <message>
    <ts>2017-08-02T15:50:29.567759</ts>
    <user>U23SA861Y</user>
    <text>I meant less passing in a message wrapper that dispatched back state and more just providing a dispatch table that lifts the lower events to your upper messages</text>
  </message>
  <message>
    <ts>2017-08-02T15:50:55.582395</ts>
    <user>U3SJEDR96</user>
    <text>That _is_ a great pattern</text>
  </message>
  <message>
    <ts>2017-08-02T16:33:40.984274</ts>
    <user>U1G7E1P9S</user>
    <text>Got a list of `a` tags that I want to drop into a `td`, but I want to have them comma separated. How would you recommend doing this?</text>
  </message>
  <message>
    <ts>2017-08-02T16:36:05.062390</ts>
    <user>U3SJEDR96</user>
    <text>`&lt;http://Html.td|Html.td&gt; [] &amp;lt;| List.intersperse (Html.text ", ") [ Html.a [] [], ... ]`</text>
  </message>
  <message>
    <ts>2017-08-02T16:38:06.125884</ts>
    <user>U1G7E1P9S</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-08-02T17:40:28.992638</ts>
    <user>U6DUP1WMA</user>
    <text>Has anyone deployed an Elm app into an android WebView? I'm thinking about using elm to implement a part of my android app that has to done with a WebView...</text>
  </message>
  <message>
    <ts>2017-08-02T17:55:33.371127</ts>
    <user>U0EUHKVGB</user>
    <text>&lt;@U6DUP1WMA&gt; yes, I have</text>
  </message>
  <message>
    <ts>2017-08-02T17:55:46.376329</ts>
    <user>U0EUHKVGB</user>
    <text>Works fine</text>
  </message>
  <message>
    <ts>2017-08-02T17:58:56.454479</ts>
    <user>U6DUP1WMA</user>
    <text>cool, might give it a shot. Thanks</text>
  </message>
  <message>
    <ts>2017-08-02T18:08:43.686949</ts>
    <user>U6FK3K430</user>
    <text>&lt;@U6DUP1WMA&gt; we are doing so now using React Native to wrap it.. works fine on Android</text>
  </message>
  <message>
    <ts>2017-08-02T18:12:28.767170</ts>
    <user>U6DUP1WMA</user>
    <text>Wow that sounds dangerous, but I'm glad it's working fine for you. Will definitely try it out.</text>
  </message>
  <message>
    <ts>2017-08-02T19:07:50.823597</ts>
    <user>U1G7E1P9S</user>
    <text>```    let
        roomNumber =
            if List.length (String.words room) &amp;gt; 1 then
                List.head (String.words room)
            else
                room
    in```</text>
  </message>
  <message>
    <ts>2017-08-02T19:08:17.831517</ts>
    <user>U1G7E1P9S</user>
    <text>how do I get rid of `Maybe` type to just get s `String`?</text>
  </message>
  <message>
    <ts>2017-08-02T19:10:28.869475</ts>
    <user>U48AEBJQ3</user>
    <text>&lt;@U1G7E1P9S&gt;

```
roomNumber =
    List.head (String.words room)
        |&amp;gt; Maybe.withDefault room
```
?</text>
  </message>
  <message>
    <ts>2017-08-02T19:25:39.114081</ts>
    <user>U23SA861Y</user>
    <text>yeah so rather than check first that it's possible to get the head, you should try to get the head and then deal with the fact that you couldn't</text>
  </message>
  <message>
    <ts>2017-08-02T19:27:41.146667</ts>
    <user>U48AEBJQ3</user>
    <text>It might even make more sense to not use a default and actually handle the error case in a more intentional way.</text>
  </message>
  <message>
    <ts>2017-08-02T19:28:01.151996</ts>
    <user>U1G7E1P9S</user>
    <text>Ah</text>
  </message>
  <message>
    <ts>2017-08-02T19:29:13.171260</ts>
    <user>U1G7E1P9S</user>
    <text>In this case I find it awkward, because I'm only going to evaluate that branch if `String.words room` produces a list &amp;gt; 1, so of course there's a head</text>
  </message>
  <message>
    <ts>2017-08-02T19:29:48.180923</ts>
    <user>U1G7E1P9S</user>
    <text>but that works much better, thanks</text>
  </message>
  <message>
    <ts>2017-08-02T19:30:17.189204</ts>
    <user>U23SA861Y</user>
    <text>The compiler doesn't really have anyway of knowing the list length was just checked</text>
  </message>
  <message>
    <ts>2017-08-02T19:31:35.210898</ts>
    <user>U48AEBJQ3</user>
    <text>If you know the list has values, you might try using a data structure which models a non-empty list as early as possible.</text>
  </message>
  <message>
    <ts>2017-08-02T20:01:51.705924</ts>
    <user>U2LAL86AY</user>
    <text>I want to clarify something for my brain :simple_smile: - can you point out if i have some mistakes in the following statements? I'm interesteed in what happens to the app before the first message arrives. :simple_smile: 

1. when the app first starts the first function called is init. Is not a real function more like a value - but if it contains functions inside they get called.

2. update does not run until the first message arrives.

3.  view is rendered using the model generated by init function.

4. what about subscriptions? it is safe to assume that the subscription function is called?? or will not be called until i receive the first message?</text>
  </message>
  <message>
    <ts>2017-08-02T20:11:51.867698</ts>
    <user>U23SA861Y</user>
    <text>I believe it is called immediately after init generates your model</text>
  </message>
  <message>
    <ts>2017-08-02T20:12:05.871460</ts>
    <user>U23SA861Y</user>
    <text>and then subsequently after each update</text>
  </message>
  <message>
    <ts>2017-08-02T20:15:21.921997</ts>
    <user>U23SA861Y</user>
    <text>it is possible to write headless programs and without subscriptions being registered early the program would never start</text>
  </message>
  <message>
    <ts>2017-08-02T20:15:43.927730</ts>
    <user>U2LAL86AY</user>
    <text>:simple_smile: makes sense</text>
  </message>
  <message>
    <ts>2017-08-02T20:18:12.965136</ts>
    <user>U23SA861Y</user>
    <text>I'm not actually sure if it's after "each" update or if the message queue is burned down and then it is called</text>
  </message>
  <message>
    <ts>2017-08-02T20:19:09.978433</ts>
    <user>U2LAL86AY</user>
    <text>and i also want to know - do you believe it's possible to take elm code - and add debug.log calls in certain places? something like
```
myFunction x = 
   x + 1
```
transformed into:
```
myFunction x = 
  let
    _ = Debug.log "argument x " x 
  in 
    x  + 1
```
It's for my debuggger - i'm trying to come up with ways of inspecting functions on the go.. Maybe not debug.log but Inspector.log or something that works similar with how Debug.log is implemented.</text>
  </message>
  <message>
    <ts>2017-08-02T20:24:45.054054</ts>
    <user>U23SA861Y</user>
    <text>you can add debug.log like that yes</text>
  </message>
  <message>
    <ts>2017-08-02T20:25:15.061199</ts>
    <user>U2LAL86AY</user>
    <text>no i mean doing that automatically. using the ast or something.</text>
  </message>
  <message>
    <ts>2017-08-02T20:25:52.069902</ts>
    <user>U23SA861Y</user>
    <text>you can do it there, or because the x is passed through you can also 
```
myFunction x = Debug.log "argument x" x |&amp;gt; ((+) 1)
```</text>
  </message>
  <message>
    <ts>2017-08-02T20:35:47.208198</ts>
    <user>U2LAL86AY</user>
    <text>hmm..  i need to do some research on that for sure.
One more question. I can't wrap my head around this. When a function is partially applied: Say `add x y` is only applied with `add 5` -&amp;gt; this in principle means it has:

```
add y = 
  5 + y
```
IS there a way to see that `5`? I mean to see the values that are already passed in? Because `x` is known, is bound to the `add y` function,  i would like to see it somehow. `Debugging.log` `add 5` gives back `&amp;lt;function&amp;gt;` -&amp;gt; not Debug.log - but do it in some other way - can it be actually possible to see that 5 there? 

How function application is actually implemented? I'm still in researching phase now - so any hint is  a good one - not looking for a full blown explanation - just some point were to start wrapping my head around this :simple_smile:</text>
  </message>
  <message>
    <ts>2017-08-02T20:41:37.285704</ts>
    <user>U5X2ZRFDF</user>
    <text>Sure, there's a way to see the 5. Just call `add 0` and you'll get `5`.</text>
  </message>
  <message>
    <ts>2017-08-02T20:43:22.308486</ts>
    <user>U5X2ZRFDF</user>
    <text>I haven't seen the implementation code, but I'll bet function application in Elm is just implemented as function application in JavaScript.</text>
  </message>
  <message>
    <ts>2017-08-02T20:44:01.317026</ts>
    <user>U2LAL86AY</user>
    <text>:smile:  that's a nice trick :smile: No i'm loking for a way to see inside partially applied functions in general. that only works will add 5 not with `Maybe.withDefault (SomeComplexDecoderwarped as maybe)`</text>
  </message>
  <message>
    <ts>2017-08-02T20:44:22.321625</ts>
    <user>U5X2ZRFDF</user>
    <text>No, there's no way to do it in general. Closures are, well, closed.</text>
  </message>
  <message>
    <ts>2017-08-02T20:44:32.323962</ts>
    <user>U5X2ZRFDF</user>
    <text>That is, function values</text>
  </message>
  <message>
    <ts>2017-08-02T20:44:59.329764</ts>
    <user>U5X2ZRFDF</user>
    <text>If you want to "see inside", then you should represent it with a custom data type instead of a function.</text>
  </message>
  <message>
    <ts>2017-08-02T20:49:00.380778</ts>
    <user>U2LAL86AY</user>
    <text>just to give you some context. I'm buliding a new elm debugger - i call it the x-ray debugger - and it'a all about seeing the computation pipeline. And for normal functions will work. Not 100% sure but pretty sure i can make it do what i want - but i'm stuck on this partially applied ones. No idea what to do. That `5` is stored somwere. Just need a good way to see it/grab it - even if it's not just in elm - meta elm/ JavaScript - or something.  I don't expect facts here - this is a unusual request - but just your thoughts on this issue.</text>
  </message>
  <message>
    <ts>2017-08-02T21:00:23.526664</ts>
    <user>U5X2ZRFDF</user>
    <text>It's possible the 5 is just some jitted V8 code that is now assembly instructions somewhere.</text>
  </message>
  <message>
    <ts>2017-08-02T21:02:06.550302</ts>
    <user>U5X2ZRFDF</user>
    <text>How would it work for normal functions?</text>
  </message>
  <message>
    <ts>2017-08-02T21:03:02.562966</ts>
    <user>U4CDPP9HR</user>
    <text>Hey, trying to figure out what `elm-test --watch` uses for monitoring disk changes, because it’s burning up my CPU. I’m guessing `chokidar`, but I’m not seeing a `package.json` in the repo and I’m not sure where to look.</text>
  </message>
  <message>
    <ts>2017-08-02T21:03:03.563155</ts>
    <user>U5X2ZRFDF</user>
    <text>I guess the 5 is in the environment part of the closure in the JS.</text>
  </message>
  <message>
    <ts>2017-08-02T21:03:07.564007</ts>
    <user>U2LAL86AY</user>
    <text>:grin: that sounds.. :grin: Anyway we'l see in the worst case i will just provide arguments for the normal functions and use &amp;lt;function&amp;gt; as the debugger does it for what it can't evaluate.</text>
  </message>
  <message>
    <ts>2017-08-02T21:04:46.585283</ts>
    <user>U5X2ZRFDF</user>
    <text>If you analyze the original code, you could transform it to store the arguments somewhere where you can get at them later.</text>
  </message>
  <message>
    <ts>2017-08-02T21:07:52.625389</ts>
    <user>U2LAL86AY</user>
    <text>my plan is to see the `arguments evaluated`, and see the `internalValues evaluated`. and i do that by wrapping code in Debug.log - on the AST level. Didn't test it but form what i've read online seems this can work. 

and for internal functions - the ones defined in let in statement - i just show them as normal function the moment they get evaluated. 

And when one of this can't be evaluated- for now i will just use the `&amp;lt;function&amp;gt;` placeholder as the debugger does it.

Kind of dissapoinging but good enough for the first stage.</text>
  </message>
  <message>
    <ts>2017-08-02T21:11:23.669785</ts>
    <user>U2LAL86AY</user>
    <text>when saving and compiling code - you don't see the same CPU spikes? It's only happening with `elm-test`?</text>
  </message>
  <message>
    <ts>2017-08-02T22:29:27.586446</ts>
    <user>U4CDPP9HR</user>
    <text>Hey, sorry, didn’t see this until just now, let me czech…</text>
  </message>
  <message>
    <ts>2017-08-02T22:31:39.612386</ts>
    <user>U4CDPP9HR</user>
    <text>Yeah, I mean, I can run `elm-make` on its own, but it’s barely a blip on the radar, whereas `elm-test --watch` runs at a constant 110-150% CPU even when idling.</text>
  </message>
  <message>
    <ts>2017-08-02T23:06:20.993761</ts>
    <user>U0CL0AS3V</user>
    <text>maybe we *should* be using chokidar :smile:</text>
  </message>
  <message>
    <ts>2017-08-02T23:06:39.996947</ts>
    <user>U0CL0AS3V</user>
    <text>mind opening an issue on &lt;https://github.com/rtfeldman/node-test-runner/issues&gt; ?</text>
  </message>
  <message>
    <ts>2017-08-02T23:06:55.999734</ts>
    <user>U0CL0AS3V</user>
    <text>ideally with system info and something small that reproduces it</text>
  </message>
  <message>
    <ts>2017-08-02T23:10:31.036677</ts>
    <user>U0CL0AS3V</user>
    <text>you could also use a pattern match for this:

```
let
    roomNumber =
        case String.words room of
            first :: second :: others -&amp;gt;
                first

            _ -&amp;gt;
                room
```</text>
  </message>
  <message>
    <ts>2017-08-02T23:14:00.071423</ts>
    <user>U4CDPP9HR</user>
    <text>I’ll see if I can isolate a test case.</text>
  </message>
  <message>
    <ts>2017-08-02T23:36:41.299058</ts>
    <user>U4CDPP9HR</user>
    <text>Did a little bit more digging and this seems to be the issue: &lt;https://github.com/webpack/webpack/issues/701&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T23:37:27.306808</ts>
    <user>U4CDPP9HR</user>
    <text>Doing an `npm install fsevents` inside my `lib/node_modules/elm-test` directory fixed it.</text>
  </message>
  <message>
    <ts>2017-08-02T23:38:12.314204</ts>
    <user>U4CDPP9HR</user>
    <text>I’ll still see if I can come up with a reproducible test case without dumping you my entire repo if you want though. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T00:25:02.776224</ts>
    <user>U0S6BNVNY</user>
    <text>I'm running into an issue where elm-extra's innerHtml is not seemingly placing the Html I think should be there in there</text>
  </message>
  <message>
    <ts>2017-08-03T00:25:08.777322</ts>
    <user>U0S6BNVNY</user>
    <text>sometimes a portion of the HTML arrives</text>
  </message>
  <message>
    <ts>2017-08-03T00:25:12.777899</ts>
    <user>U0S6BNVNY</user>
    <text>it's...fascinating</text>
  </message>
  <message>
    <ts>2017-08-03T00:28:49.814495</ts>
    <user>U0S6BNVNY</user>
    <text>it's like the last node is always missing</text>
  </message>
  <message>
    <ts>2017-08-03T00:30:57.835839</ts>
    <user>U0S6BNVNY</user>
    <text>oh it's definitely something weirder than that</text>
  </message>
  <message>
    <ts>2017-08-03T00:32:34.851927</ts>
    <user>U0S6BNVNY</user>
    <text>I think using keyed will sort it out but I'm completely unsure</text>
  </message>
  <message>
    <ts>2017-08-03T00:35:24.879266</ts>
    <user>U0S6BNVNY</user>
    <text>yup that was it</text>
  </message>
  <message>
    <ts>2017-08-03T00:35:25.879460</ts>
    <user>U0S6BNVNY</user>
    <text>super weird</text>
  </message>
  <message>
    <ts>2017-08-03T00:35:38.881477</ts>
    <user>U0S6BNVNY</user>
    <text>some li were being reused as I moved through the SPA :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T02:32:27.117192</ts>
    <user>U0S6BNVNY</user>
    <text>anyone up and doing things at this hour? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T02:39:42.211986</ts>
    <user>U1G51S63S</user>
    <text>I am asked about google maps polymer yesterday. I found an issue - it was in `api-key` attribute. it works w/o api key at all (50/50. sometimes it fails with error that api key is required and not just warning).</text>
  </message>
  <message>
    <ts>2017-08-03T02:40:07.217615</ts>
    <user>U1G51S63S</user>
    <text>So it's really looks like some timing issue. Looks like node is created w/o attributes first time and then attributes are added</text>
  </message>
  <message>
    <ts>2017-08-03T03:07:35.624135</ts>
    <user>U3SJEDR96</user>
    <text>Totally up.</text>
  </message>
  <message>
    <ts>2017-08-03T03:09:09.647354</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U1G51S63S&gt; that's actually correct. Node creation and setting attributes can't happen atomically</text>
  </message>
  <message>
    <ts>2017-08-03T03:09:21.650217</ts>
    <user>U37HUSJ4R</user>
    <text>has anyone used this? &lt;https://github.com/ktonon/elm-serverless&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T03:09:28.651982</ts>
    <user>U37HUSJ4R</user>
    <text>looks really cool</text>
  </message>
  <message>
    <ts>2017-08-03T03:12:26.699394</ts>
    <user>U2LC0U8JY</user>
    <text>still waiting for a reason to try it :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T03:12:51.705947</ts>
    <user>U0S6BNVNY</user>
    <text>huh...the instagram oEmbed won't work by just shoving innerHtml into Elm</text>
  </message>
  <message>
    <ts>2017-08-03T03:13:37.718160</ts>
    <user>U0S6BNVNY</user>
    <text>and twitter's oembed doesn't look fantastic</text>
  </message>
  <message>
    <ts>2017-08-03T03:14:48.736750</ts>
    <user>U0S6BNVNY</user>
    <text>something quirky's going on with trying to jam oEmbed stuff in with innerHtml, should've guessed :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T03:15:30.748414</ts>
    <user>U0S6BNVNY</user>
    <text>handling the oembed on the server isn't necessarily the best idea there anyway</text>
  </message>
  <message>
    <ts>2017-08-03T03:27:25.947745</ts>
    <user>U0S6BNVNY</user>
    <text>youtube's video embed works fine but tweets don't. I find that hilarious</text>
  </message>
  <message>
    <ts>2017-08-03T03:29:05.977211</ts>
    <user>U3SJEDR96</user>
    <text>huh, that's pretty weird!</text>
  </message>
  <message>
    <ts>2017-08-03T04:27:00.121321</ts>
    <user>U1G51S63S</user>
    <text>&lt;@U3SJEDR96&gt; :disappointed: do you think there is some workaround around this to use webcomponents?</text>
  </message>
  <message>
    <ts>2017-08-03T04:32:44.247917</ts>
    <user>U3SJEDR96</user>
    <text>Hmm. You could do a test to check what the behavior is like when the webcomponent node is create within a documentfragment before being added to the DOM. If that behaves differently, creating a wrapper webcomponent that waits until the next animation frame before replacing itself with the documentfragment is an option.</text>
  </message>
  <message>
    <ts>2017-08-03T04:35:26.307655</ts>
    <user>U1G51S63S</user>
    <text>Yep, just found Angular have exactly the same problem and solution is only to create wrapper component</text>
  </message>
  <message>
    <ts>2017-08-03T04:36:31.330926</ts>
    <user>U1G51S63S</user>
    <text>there is even &lt;@U0CL0AS3V&gt; google maps example fork with wrapper :thumbsup: &lt;https://github.com/lisardo/elm-google-maps/commit/8c5c83d58445524d01d81592bf6bf1557a71066e&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T04:37:31.352752</ts>
    <user>U1G51S63S</user>
    <text>will try it now :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T04:37:42.356365</ts>
    <user>U3SJEDR96</user>
    <text>:thumbsup:</text>
  </message>
  <message>
    <ts>2017-08-03T04:55:16.742979</ts>
    <user>U42FYKFRN</user>
    <text>hey - If I have a string which is a timestamp e.g. 1501750359529 - how can I convert that to an Elm Time so I can format it?</text>
  </message>
  <message>
    <ts>2017-08-03T04:58:24.814154</ts>
    <user>U1A4GSPT4</user>
    <text>&lt;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Date#fromTime&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T04:58:35.818775</ts>
    <user>U3SJEDR96</user>
    <text>Elm `Time` is just a `Float`, so you'd turn that into a float and multiply it with `Time.seconds`</text>
  </message>
  <message>
    <ts>2017-08-03T05:05:57.989660</ts>
    <user>U42FYKFRN</user>
    <text>got it thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T05:09:32.067505</ts>
    <user>U0GR62XBP</user>
    <text>Hey there! When embedding Elm into a JS app, is there a straightforward way to catch all runtime errors and have a central handling for this?

I know, I know, there simply are no runtime errors, but actually there could be, like stack overflow on infinite recursion or the things outlined by Noah in “Top 6 ways to make your Elm app crash at runtime” etc. Personally, I would not care too much about these cases but my current client made delegating all JS runtime errors into the central error handling routine a strict requirement for introducing Elm into the stack.</text>
  </message>
  <message>
    <ts>2017-08-03T05:12:56.141232</ts>
    <user>U66RFDZ8F</user>
    <text>I was developing and hit this error out of the blue.
My project fails to compile with the following error 
`elm-make: getFileAttributesExStandard: does not exist (The system cannot find the path specified.)`</text>
  </message>
  <message>
    <ts>2017-08-03T05:13:40.157391</ts>
    <user>U66RFDZ8F</user>
    <text>It was working till I installed `elm-json-extra`</text>
  </message>
  <message>
    <ts>2017-08-03T05:14:22.172748</ts>
    <user>U3SJEDR96</user>
    <text>(`elm-community/json-extra` is preferred) You may want to remove `elm-stuff` and `elm-package install --yes` after that</text>
  </message>
  <message>
    <ts>2017-08-03T05:14:46.181409</ts>
    <user>U66RFDZ8F</user>
    <text>let me try</text>
  </message>
  <message>
    <ts>2017-08-03T05:14:49.182661</ts>
    <user>U3SJEDR96</user>
    <text>did you install that package by editing `elm-package.json` or by issuing `elm-package install circuithub/elm-json-extra`?</text>
  </message>
  <message>
    <ts>2017-08-03T05:15:34.199333</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0GR62XBP&gt; I suppose a `try/catch` around your whole app might.. do.. something. Haven't tried that, tho</text>
  </message>
  <message>
    <ts>2017-08-03T05:16:17.215008</ts>
    <user>U66RFDZ8F</user>
    <text>I actually installed `"elm-community/json-extra": "2.3.0 &amp;lt;= v &amp;lt; 3.0.0",` but I used the VS Code package manager which calls `elm-package install --yes` under the hood</text>
  </message>
  <message>
    <ts>2017-08-03T05:17:51.249079</ts>
    <user>U66RFDZ8F</user>
    <text>&lt;@U3SJEDR96&gt; worked! thanks</text>
  </message>
  <message>
    <ts>2017-08-03T05:18:15.257578</ts>
    <user>U3SJEDR96</user>
    <text>ah, alright... That error seems more prevalent when editing elm-package.json rather than using the proper `elm-package` command, not sure what gives, tho</text>
  </message>
  <message>
    <ts>2017-08-03T05:18:28.262415</ts>
    <user>U3SJEDR96</user>
    <text>and alright, cool, that's the proper package :thumbsup:</text>
  </message>
  <message>
    <ts>2017-08-03T05:19:28.284473</ts>
    <user>U66RFDZ8F</user>
    <text>well, VS Code terminated with `failed to run command`ish message so</text>
  </message>
  <message>
    <ts>2017-08-03T05:19:38.287982</ts>
    <user>U66RFDZ8F</user>
    <text>maybe something happened</text>
  </message>
  <message>
    <ts>2017-08-03T05:19:41.289022</ts>
    <user>U66RFDZ8F</user>
    <text>thanks again</text>
  </message>
  <message>
    <ts>2017-08-03T05:22:23.350139</ts>
    <user>U66RFDZ8F</user>
    <text>does elm `Int` cover 64 bit integers?</text>
  </message>
  <message>
    <ts>2017-08-03T05:22:58.362709</ts>
    <user>U66RFDZ8F</user>
    <text>Also, where can I find more information on the behaviour of `float`? I need to handle some decimals from C#</text>
  </message>
  <message>
    <ts>2017-08-03T05:23:55.384141</ts>
    <user>U3SJEDR96</user>
    <text>both `Int` and `Float` are 64bit floats under the hood, i.e. regular JS numbers</text>
  </message>
  <message>
    <ts>2017-08-03T05:24:51.405097</ts>
    <user>U3SJEDR96</user>
    <text>&lt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER&gt; a little more info there</text>
  </message>
  <message>
    <ts>2017-08-03T05:25:09.412143</ts>
    <user>U66RFDZ8F</user>
    <text>awesome! thanks</text>
  </message>
  <message>
    <ts>2017-08-03T05:25:35.422238</ts>
    <user>U3SJEDR96</user>
    <text>(so you don't actually have 64bits for the integer part)</text>
  </message>
  <message>
    <ts>2017-08-03T05:25:41.424313</ts>
    <user>U0GR62XBP</user>
    <text>&lt;@U3SJEDR96&gt; No, unfortunately just wrapping the embed in try/catch does nothing. The Elm code is not executed in the context of the embed call.

Here is a stack trace:</text>
  </message>
  <message>
    <ts>2017-08-03T05:35:00.635768</ts>
    <user>U3SJEDR96</user>
    <text>seems to work if it's an actual run-time error: &lt;https://ellie-app.com/3VDBXx3MkTxa1/0&gt; (check the console)</text>
  </message>
  <message>
    <ts>2017-08-03T05:37:00.681033</ts>
    <user>U3SJEDR96</user>
    <text>If the regex is a top-level value, you'll get the error while the JS is actually loading, so before you even do the embed. Not sure how to handle that, tbh</text>
  </message>
  <message>
    <ts>2017-08-03T05:37:11.684815</ts>
    <user>U3SJEDR96</user>
    <text>But then again, that can't just _slip through_</text>
  </message>
  <message>
    <ts>2017-08-03T06:12:46.449791</ts>
    <user>U0GR62XBP</user>
    <text>Funny, I also tried that and it did not catch the runtime error (I produced the Regex error in my update but that should not make a difference). Not sure what’s going on here. Maybe Ellie does things slightly different or my webpack build makes for a difference. Good to know that it _should_ work (at least in some cases).</text>
  </message>
  <message>
    <ts>2017-08-03T06:14:58.491650</ts>
    <user>U0GR62XBP</user>
    <text>When debugging, the top level function call for me was the event handler function in Elm core (in makeEventHandler).</text>
  </message>
  <message>
    <ts>2017-08-03T06:17:43.545624</ts>
    <user>U0GR62XBP</user>
    <text>Oh, look: &lt;https://ellie-app.com/3VF78MYHyHva1/1&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T06:18:18.556804</ts>
    <user>U0GR62XBP</user>
    <text>When the error is in the update function, it goes through uncaught. The difference was that you produced the error in the init.</text>
  </message>
  <message>
    <ts>2017-08-03T06:18:57.569136</ts>
    <user>U63E8NR33</user>
    <text>Hi everyone! My first question on Elm-Slack! Yeah! Here it goes: Is there an elm equivalent of ramdas anyPass or allPass &lt;http://ramdajs.com/docs/#anyPass&gt; ?
I have written it myself but I'm wondering if it already exists and I'm not able to find it.</text>
  </message>
  <message>
    <ts>2017-08-03T06:19:18.575838</ts>
    <user>U0GR62XBP</user>
    <text>&lt;@U3SJEDR96&gt; So, that’s not an option, but thanks for the discussion :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T06:20:05.591016</ts>
    <user>U17MSA88M</user>
    <text>&lt;@U63E8NR33&gt; you'd probably map your predicate over the list and then use the `any`/`all` function</text>
  </message>
  <message>
    <ts>2017-08-03T06:21:05.610763</ts>
    <user>U17MSA88M</user>
    <text>Oh nvm. I just saw what that function actually does. sry</text>
  </message>
  <message>
    <ts>2017-08-03T06:22:49.644008</ts>
    <user>U3SJEDR96</user>
    <text>&lt;http://klaftertief.github.io/elm-search/?q=List%20(a%20-%3E%20Bool)%20-%3E%20a%20-%3E%20Bool&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T06:24:01.667581</ts>
    <user>U3SJEDR96</user>
    <text>though I'd probably do what &lt;@U17MSA88M&gt; suggested. Give a `List (a -&amp;gt; Bool)`and an `a`, - `predicates |&amp;gt; List.map (\f -&amp;gt; f a) |&amp;gt; List.any identity` for `anyPass`</text>
  </message>
  <message>
    <ts>2017-08-03T06:25:58.705443</ts>
    <user>U17MSA88M</user>
    <text>I wanted to see what I'd have to do in PureScript and typed it in: &lt;http://try.purescript.org/?gist=4f542a569c9001dd3afd1f5a3cde7014&amp;amp;backend=core|try.purescript.org/?gist=4f542a569c9001dd3afd1f5a3cde7014&amp;amp;backend=core&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T06:26:38.717803</ts>
    <user>U17MSA88M</user>
    <text>funnily enough the usual `and` is polymorphic enough in PureScript to combine a bunch of predicates</text>
  </message>
  <message>
    <ts>2017-08-03T06:27:01.724695</ts>
    <user>U3SJEDR96</user>
    <text>Seems like your code didn't save</text>
  </message>
  <message>
    <ts>2017-08-03T06:27:20.731013</ts>
    <user>U17MSA88M</user>
    <text>why not? does it not show the right solution in the error pane?</text>
  </message>
  <message>
    <ts>2017-08-03T06:31:47.816764</ts>
    <user>U0LL6NC1K</user>
    <text>looking for &lt;http://package.elm-lang.org/packages/powet/elm-funfolding/2.0.1&gt; ?</text>
  </message>
  <message>
    <ts>2017-08-03T06:42:54.021606</ts>
    <user>U3SJEDR96</user>
    <text>&lt;@U0LL6NC1K&gt; that package is an option (and linked from that search :point_up: ) but it's a pretty un-elm-ish package. I think a simple `map` and `any`/`all` should suffice without needing a package that creates an abstraction of that</text>
  </message>
  <message>
    <ts>2017-08-03T06:48:08.117967</ts>
    <user>U63E8NR33</user>
    <text>Thank you for the answers!
elm-funfolding almost does what I want. But I stick with my solution:
`allPass predicates x = List.foldl (\f acc -&amp;gt; acc &amp;amp;&amp;amp; f x) True predicates`</text>
  </message>
  <message>
    <ts>2017-08-03T06:49:11.136252</ts>
    <user>U3SJEDR96</user>
    <text>That, of course, also works :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T06:52:06.189542</ts>
    <user>U63E8NR33</user>
    <text>I guessed such a basic function is defined somewhere. Maybe in a future elm release. But klaftertief's elm-search is an awesome hint! Thanks for that!</text>
  </message>
  <message>
    <ts>2017-08-03T06:52:44.201141</ts>
    <user>U0EUHKVGB</user>
    <text>My advice: if you need a function and the type is simple, stick with the simple solution rather than introducing a new data structure. Only use a new data structure when you need _that_ data structure.</text>
  </message>
  <message>
    <ts>2017-08-03T07:41:00.081205</ts>
    <user>U42FYKFRN</user>
    <text>hi - what’s the best way to turn an Encode.Value into a pretty json string?</text>
  </message>
  <message>
    <ts>2017-08-03T07:53:59.318344</ts>
    <user>U3SJEDR96</user>
    <text>`Json.Encode.encode 2 yourValue`</text>
  </message>
  <message>
    <ts>2017-08-03T07:56:00.355762</ts>
    <user>U42FYKFRN</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-08-03T08:14:37.731088</ts>
    <user>U63E8NR33</user>
    <text>&lt;@U3SJEDR96&gt; , &lt;@U17MSA88M&gt; , &lt;@U0LL6NC1K&gt;: regarding my previous question, I made a pull request.  &lt;https://github.com/elm-community/list-extra/pull/79&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T08:40:28.308838</ts>
    <user>U1AP08WV6</user>
    <text>&lt;@U0GR62XBP&gt; I had good results with &lt;https://github.com/getsentry/raven-js&gt;, which is basically subscribing to `window.onerror`. Perhaps digging in its source code could be helpful for you. BTW it has "breadcrumbs" functionality, which works really well for recording incoming messages to your `update` through a port. Thanks to this you have a stack trace and a pretty good idea what user might have been doing when something bad happened.</text>
  </message>
  <message>
    <ts>2017-08-03T08:43:32.380595</ts>
    <user>U0GR62XBP</user>
    <text>I know about window.onerror. That would indeed be a solution. That part of the code is not mine, so I was looking for an Elm specific solution. But it’s probably better to convince the folks responsible to add a general window.onerror handler.</text>
  </message>
  <message>
    <ts>2017-08-03T09:09:22.081039</ts>
    <user>U1CE9DL9H</user>
    <text>Does someone have a trick to make this snippet typecheck? The problem is that in 0.18, a `number` is not `comparable` (fixed in 0.19). Here `(+)` needs a number and `List.sortBy` needs a comparable. 
```
sortByInsideOut : (a -&amp;gt; number) -&amp;gt; List a -&amp;gt; List a
sortByInsideOut toNumber items =
    let
        withSum =
            List.map (\element -&amp;gt; ( element, toNumber element )) items

        folder ( element, sum ) ( bottom, bottoms, top, tops ) =
            if lt (top - bottom) then
                ( bottom, bottoms, top + sum, element :: tops )
            else
                ( bottom + sum, element :: bottoms, top, tops )

        ( _, bottom, _, top ) =
            withSum
                |&amp;gt; List.sortBy Tuple.second
                |&amp;gt; List.foldl folder ( 0, [], 0, [] )
    in
        List.reverse bottom ++ top

```</text>
  </message>
  <message>
    <ts>2017-08-03T09:14:34.237079</ts>
    <user>U1CE9DL9H</user>
    <text>&lt;@U1N4KAHT6&gt; I don't think we can make this work without some really nasty stuff (toString, then parse or something like that)</text>
  </message>
  <message>
    <ts>2017-08-03T09:16:17.289543</ts>
    <user>U0EUHKVGB</user>
    <text>Yeah, you would have to make `toNumber : (a -&amp;gt; comparable)` and then use `toString` with `String.toInt`</text>
  </message>
  <message>
    <ts>2017-08-03T09:21:46.457496</ts>
    <user>U1CE9DL9H</user>
    <text>things we do for nice type signatures...
```

accursedUnutterableNumberToFloat : number -&amp;gt; Float
accursedUnutterableNumberToFloat value =
    case toFloat (toString value) of
        Err e -&amp;gt;
            Debug.crash "a number could not be parsed as a float"

        Ok v -&amp;gt;
            v
```</text>
  </message>
  <message>
    <ts>2017-08-03T09:22:12.471668</ts>
    <user>U1N4KAHT6</user>
    <text>oh dear</text>
  </message>
  <message>
    <ts>2017-08-03T09:22:51.492033</ts>
    <user>U1CE9DL9H</user>
    <text>the thing is, if we resort to `(a -&amp;gt; Float)`for now, then upgrading to `(a -&amp;gt; number)` with 0.19 is a breaking change</text>
  </message>
  <message>
    <ts>2017-08-03T09:23:46.520542</ts>
    <user>U1N4KAHT6</user>
    <text>Because of these sort of issues, I’ve been designing a lot of apis now to just use floats</text>
  </message>
  <message>
    <ts>2017-08-03T09:24:06.531261</ts>
    <user>U1N4KAHT6</user>
    <text>If the user has Ints, they can convert them pretty easily themselves</text>
  </message>
  <message>
    <ts>2017-08-03T09:24:50.554092</ts>
    <user>U1N4KAHT6</user>
    <text>The loss of generality kind of pains me, but avoiding `accursedUnutterableNumberToFloat` is worth it</text>
  </message>
  <message>
    <ts>2017-08-03T09:25:31.576005</ts>
    <user>U1CE9DL9H</user>
    <text>sure, we might be able to slip it in with some other breaking change once 0.19 is around</text>
  </message>
  <message>
    <ts>2017-08-03T09:26:51.619030</ts>
    <user>U1N4KAHT6</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-08-03T09:28:03.657656</ts>
    <user>U1N4KAHT6</user>
    <text>Was there not an issue that essentially proposed `Basics.toFloat` to be `number -&amp;gt; Float`?</text>
  </message>
  <message>
    <ts>2017-08-03T09:28:47.681532</ts>
    <user>U1CE9DL9H</user>
    <text>it's been mentioned, but the constraint system in 0.19 is also fixed, so number is a subset of comparable</text>
  </message>
  <message>
    <ts>2017-08-03T09:28:59.687758</ts>
    <user>U1CE9DL9H</user>
    <text>so the above will be valid then</text>
  </message>
  <message>
    <ts>2017-08-03T09:29:29.703730</ts>
    <user>U1N4KAHT6</user>
    <text>sure but still you can’t have division, which is sometimes pretty useful</text>
  </message>
  <message>
    <ts>2017-08-03T09:32:14.794858</ts>
    <user>U0CL0AS3V</user>
    <text>hrm... perhaps we should install `fsevents` automatically?</text>
  </message>
  <message>
    <ts>2017-08-03T09:35:18.896703</ts>
    <user>U1CE9DL9H</user>
    <text>here it is &lt;https://github.com/elm-lang/core/issues/190&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T09:36:11.925826</ts>
    <user>U1CE9DL9H</user>
    <text>sadly, it's still `Int -&amp;gt; Float` on the dev branch &lt;https://github.com/elm-lang/core/blob/dev/src/Basics.elm#L455&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T09:44:17.197547</ts>
    <user>U0F01KLV6</user>
    <text>What do people use to count the number of lines in their Elm projects?</text>
  </message>
  <message>
    <ts>2017-08-03T09:44:25.201908</ts>
    <user>U0EUHKVGB</user>
    <text>`cloc`</text>
  </message>
  <message>
    <ts>2017-08-03T09:45:08.227208</ts>
    <user>U2GGQ9YE7</user>
    <text>&lt;https://github.com/lrosa007/cn-chkrs&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T09:45:31.240602</ts>
    <user>U2GGQ9YE7</user>
    <text>Chinese Checkers... not done yet though</text>
  </message>
  <message>
    <ts>2017-08-03T09:54:18.546500</ts>
    <user>U5XC2FJ1Y</user>
    <text>yeah i'm annoyed that there's no `number -&amp;gt; Float` in core, it seems like not having it really hurts your ability to write polymorphic functions using `number`. e.g. I don't think there's a way to implement `average : List number -&amp;gt; Float` without implementing something like `accursedUnutterableNumberToFloat` first</text>
  </message>
  <message>
    <ts>2017-08-03T09:59:12.726001</ts>
    <user>U4872964V</user>
    <text>Since there is no real loss of generality just using `Float` (`Int` is a subset of `Float`) I tend to just use `Float`</text>
  </message>
  <message>
    <ts>2017-08-03T10:00:00.756320</ts>
    <user>U1CE9DL9H</user>
    <text>fun fact: Float is Int &lt;https://github.com/elm-lang/core/blob/dev/src/Elm/Kernel/Basics.js#L60&gt;</text>
  </message>
  <message>
    <ts>2017-08-03T10:00:36.781442</ts>
    <user>U4872964V</user>
    <text>yes, `Int` is a subset of `Float`</text>
  </message>
  <message>
    <ts>2017-08-03T10:01:20.809071</ts>
    <user>U1CE9DL9H</user>
    <text>I was surprised that the distinction is totally on the type level (a bit like phantom types)</text>
  </message>
  <message>
    <ts>2017-08-03T10:01:39.821650</ts>
    <user>U4872964V</user>
    <text>an even more fun fact: `Char` is really a `String` of length 1</text>
  </message>
  <message>
    <ts>2017-08-03T10:03:16.882681</ts>
    <user>U3SJEDR96</user>
    <text>Some functions that return an Int cheat by using `|0` though, which truncates to 32 bits :disappointed:</text>
  </message>
  <message>
    <ts>2017-08-03T10:03:53.905855</ts>
    <user>U4872964V</user>
    <text>yeah, numbers in javascript are pretty crazy</text>
  </message>
  <message>
    <ts>2017-08-03T10:04:27.927356</ts>
    <user>U4872964V</user>
    <text>elm really should have unbounded ints by default in my opinion</text>
  </message>
  <message>
    <ts>2017-08-03T10:05:26.964172</ts>
    <user>U3SJEDR96</user>
    <text>Yeah, I don't know how I feel about that. Better topic for &lt;#C2QPJLU2X|elm-discuss&gt;, tho</text>
  </message>
  <message>
    <ts>2017-08-03T10:26:10.748376</ts>
    <user>U26G362G2</user>
    <text>i'm getting a json parsing error in ie 9 (actually 11 in 9 "document mode"), but everything's fine in 10+ and other browsers. anyone seen something like that before? 'BadPayload "Given an invalid JSON: Invalid character"'</text>
  </message>
  <message>
    <ts>2017-08-03T10:29:24.875012</ts>
    <user>U26G362G2</user>
    <text>sorry, wrong channel, i mean to post in a different one</text>
  </message>
  <message>
    <ts>2017-08-03T11:21:47.942217</ts>
    <user>U17P7CBFB</user>
    <text>That's where persistent data structures shine :slightly_smiling_face: I'm essentially storing the diff between each state change, so I can walk back and forth in time with the undo/redo messages</text>
  </message>
  <message>
    <ts>2017-08-03T11:25:55.104791</ts>
    <user>U17P7CBFB</user>
    <text>&lt;@U4872964V&gt; are you sure it's always length one? Aren't strings utf-16 encoded, like in javascript? If so, isn't any emoji character stored as two code units? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T11:35:38.487664</ts>
    <user>U3SJEDR96</user>
    <text>Currently that a _little_ broken, in that `String.toList` will return single code-units, while it is possible and valid to construct a single char that exists of 2 code units. In other words, `['💩'] |&amp;gt; String.fromList |&amp;gt; String.toList  /= ['💩']`</text>
  </message>
  <message>
    <ts>2017-08-03T11:37:08.547727</ts>
    <user>U3SJEDR96</user>
    <text>Afaik the intention (in 0.19) is a single displayable character, which may exist of multiple UTF-16 bytes.</text>
  </message>
  <message>
    <ts>2017-08-03T11:56:49.310856</ts>
    <user>U17P7CBFB</user>
    <text>&lt;@U3SJEDR96&gt; yep, the bug fix was made in May, but for some reason they're refusing to release a patch for core :disappointed:</text>
  </message>
  <message>
    <ts>2017-08-03T11:58:32.378377</ts>
    <user>U3SJEDR96</user>
    <text>Eh, you can work around it, tho</text>
  </message>
  <message>
    <ts>2017-08-03T11:59:35.420095</ts>
    <user>U17P7CBFB</user>
    <text>not really, since it's for a release of elm-test, so that would require forking core, releasing a patch and forcing every elm-test user who wants to use the new feature to use our fork :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-03T11:59:48.428183</ts>
    <user>U17P7CBFB</user>
    <text>looks like we'll be waiting for 0.19 for this one</text>
  </message>
  <message>
    <ts>2017-08-03T11:59:49.428640</ts>
    <user>U3SJEDR96</user>
    <text>What? I mean _in Elm_</text>
  </message>
  <message>
    <ts>2017-08-03T12:00:24.453820</ts>
    <user>U3SJEDR96</user>
    <text>Perhaps I'm missing how the bug impacts you right now; could you give some context?</text>
  </message>
  <message>
    <ts>2017-08-03T12:01:07.482989</ts>
    <user>U17P7CBFB</user>
    <text>elm-test has a string fuzzer, and I want to make it generate unicode strings instead of a small subset of ascii, but I cannot do that until this bug has been patched</text>
  </message>
</slack>

