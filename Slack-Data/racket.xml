<?xml version='1.0' encoding='utf-8'?>
<slack>
  <team_domain>racket</team_domain>
  <channel_name>general</channel_name>
  <start_date>2014-11-07T12:02:12.695655</start_date>
  <end_date>2017-08-03T12:02:12.695655</end_date>
  <message>
    <ts>2017-05-11T15:46:08.512661</ts>
    <user>U3SEVDPJT</user>
    <text>`db` library doesn't seem to provide support for executing batch statements against a database. I'm trying to initialize and create an in-memory database using a SQL schema file. `query-exec` and its friends only support executing single SQL statements. Reading documentation isn't showing me a way to be able to execute more than one statement at once or allow a SQL text file to be read in and executed. Does anyone know a better method?</text>
  </message>
  <message>
    <ts>2017-05-12T10:21:29.214211</ts>
    <user>U2Y8JBMUJ</user>
    <text>Is there a `match` predicate in the standard libraries? Something that means "if this given value matches this given pattern, then return `#t`, else return `#f`.” I keep finding myself writing this in terms of `match`, and I feel like there should be a better way.</text>
  </message>
  <message>
    <ts>2017-05-12T11:21:34.597619</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U2Y8JBMUJ&gt; I thought there was one, but cannot find it, so I may have imagined it. There's `check-match` from `rackunit` for tests (it does not return a boolean). Otherwise, seems like you will have to roll your own.</text>
  </message>
  <message>
    <ts>2017-05-12T11:39:00.996497</ts>
    <user>U2Y8JBMUJ</user>
    <text>&lt;@U3ZACTKTP&gt;: Thank you for your answer.</text>
  </message>
  <message>
    <ts>2017-05-12T11:47:05.175228</ts>
    <user>U2Y8JBMUJ</user>
    <text>&lt;@U3ZACTKTP&gt;: I'm doing something about this: &lt;https://github.com/racket/racket/issues/1690&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-05-12T14:03:18.960113</ts>
    <user>U0C55P16F</user>
    <text>I read Fortifying Macros by Culpepper and Felleisen, where ports of `loop` and `parser` were made using `syntax-parse`. I can't seem to find the code for those, though. Does anybody know where/if they can be found?</text>
  </message>
  <message>
    <ts>2017-05-12T16:09:26.321438</ts>
    <user>U3SEVDPJT</user>
    <text>Answered by Alex Harsanyi on Racket Users listserv.</text>
  </message>
  <message>
    <ts>2017-05-12T16:12:57.381337</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U0C55P16F&gt;: I'd email &lt;@U3VGR2S7Q&gt; and ask.</text>
  </message>
  <message>
    <ts>2017-05-12T19:13:13.647582</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U0C55P16F&gt; Wait, so there's (already) a Racket implementation of the CL `loop` hiding somewhere?
_Throwing a glance at my early implementation draft which has been bitrotting for the last few weeks…_
Be sure to post back here if you get an answer from &lt;@U3VGR2S7Q&gt; !</text>
  </message>
  <message>
    <ts>2017-05-12T19:33:34.790796</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3ZACTKTP&gt;: &lt;http://planet.racket-lang.org/display.ss?package=loop.plt&amp;amp;owner=jphelps&gt;</text>
  </message>
  <message>
    <ts>2017-05-12T20:30:48.115167</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U07SCV14J&gt; Sweet, thanks a lot!</text>
  </message>
  <message>
    <ts>2017-05-12T20:52:21.207456</ts>
    <user>U462H29AR</user>
    <text>Has anyone used, from `scribble/srcdoc`, any of `parameter-doc`, `thing-doc`, or `struct-doc`? All give me `"illegal use of syntax"` errors.  Whereas `proc-doc` works great.</text>
  </message>
  <message>
    <ts>2017-05-12T20:53:18.211125</ts>
    <user>U462H29AR</user>
    <text>For instance
```
#lang at-exp racket/base

(require scribble/srcdoc
         (for-doc racket/base
                  scribble/manual))

(define current-foo (make-parameter "bar"))

(parameter-doc current-foo
               (parameter/c string?)
               v
               @{Hi})
```</text>
  </message>
  <message>
    <ts>2017-05-12T21:33:45.364198</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U462H29AR&gt; A better error message would have been "must be used within a `provide` form" (and I'm guessing that you've used `proc-doc` successfully within `provide`)</text>
  </message>
  <message>
    <ts>2017-05-12T21:52:33.426666</ts>
    <user>U462H29AR</user>
    <text>&lt;@U3NJS8H7C&gt; Thanks! I'd wrapped `proc-doc` in a `define/doc` macro, long enough ago, that I forgot it was nested in a `provide`. Dang.</text>
  </message>
  <message>
    <ts>2017-05-12T22:35:17.559970</ts>
    <user>U462H29AR</user>
    <text>It would be neat if &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; showed, in addition to direct dependencies, direct dependents ("needed by") as for example &lt;https://melpa.org/#/helm&gt;</text>
  </message>
  <message>
    <ts>2017-05-13T13:50:20.226789</ts>
    <user>U462H29AR</user>
    <text>Meanwhile: &lt;https://gist.github.com/greghendershott/b20effb9d9c48211e1c11d9486257918&gt; ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-05-13T15:27:53.590389</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U3PUZ2Z5K&gt; Thanks for the tip about using `Regexp` instead of `-Regexp`!
I'm checking that everything runs fine now, but I have issues with `tc-err`.
The test `[tc-err (ann (ann #px#"abc" Byte-PRegexp) PRegexp)]` fails:
```
actual:     (tc-results (list (tc-result PRegexp (Top | Bot) -)) #f)
expected:   (tc-results (list (tc-result Nothing (Bot | Bot) -)) #f)
```
I feel like I should supply one of the `ret:err-return` or `ex:expected` arguments to `tc-err`, but their exact meaning is not documented. Any hint?</text>
  </message>
  <message>
    <ts>2017-05-13T15:29:31.595652</ts>
    <user>U3PUZ2Z5K</user>
    <text>I don't know there exact meaning either and wish it was documented =( that code is really clever/cute and I always struggle re-parsing what exactly it does</text>
  </message>
  <message>
    <ts>2017-05-13T15:35:26.616470</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U3PUZ2Z5K&gt; Seems like this does the trick (as I understand it, `tc-err` checks that the return type is correct, even if an error is there, and `ann` is clever enough to indicate its return type, even when it fails)
```
[tc-err (ann (ann #px#"abc" Byte-PRegexp) PRegexp) #:ret (tc-ret -PRegexp)]
```</text>
  </message>
  <message>
    <ts>2017-05-13T15:53:29.679509</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U3PUZ2Z5K&gt; Sorry for bothering you once more: in generalize.rkt, should I do `[(? (lambda (t) (subtype t -Base-Regexp))) -Base-Regexp]` (to generalize literals which are `regexp?` to `-BaseRegexp`), or should I generalize to `-Regexp`, i.e. `[(? (lambda (t) (subtype t -Base-Regexp))) -Regexp]` ?
I tried to see if it made any difference in the way the type is printed when entering a literal `#rx"abc"` at the REPL, but it makes no difference.
I also expected `(let ([x #rx"foo"]) (set! x #px"foo"))` to fail in the second case (generalizing to `-Base-Regexp`), but it still works (so it seems something else is further generalizing `-Base-Regexp` to `-Regexp`).
Any preference? I feel this will matter only if/when we decide to make the `Base-Regexp` type "public" (for now it seems to be used internally only).</text>
  </message>
  <message>
    <ts>2017-05-13T18:20:46.159069</ts>
    <user>U3PUZ2Z5K</user>
    <text>&lt;@U3ZACTKTP&gt; sorry for the delay -- I'm not super familiar with typing regexps... my gut is to favor the more general Regexp, but like I said I don't have much experience working with those in practice</text>
  </message>
  <message>
    <ts>2017-05-13T18:22:59.165498</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U3PUZ2Z5K&gt; Okay, thanks! I'll put Regexp then (I think if we expose Basic-Regexp at some point, the user could always force it with (ann #rx"abc" Basic-Regexp).</text>
  </message>
  <message>
    <ts>2017-05-14T11:48:12.794286</ts>
    <user>U3ZACTKTP</user>
    <text>I and others expressed concern in the past about Slack's logs, which are limited to 10K messages.
Seems like we could do something about it: &lt;https://github.com/mlegy/Slack-logger-bot&gt;
I don't have time to look into this right now, but it could be at some point a compromise between setting up a full-blown chat server (which some of the regulars rightfully expressed concerns about, since it increases the maintenance burden for the Racket team), and having a free-to-use-but-without-logs service like Slack.</text>
  </message>
  <message>
    <ts>2017-05-14T12:12:25.871842</ts>
    <user>U4L6H669J</user>
    <text>isn't this slack archived in that one public logging service for slack (forget the name)?</text>
  </message>
  <message>
    <ts>2017-05-14T12:19:21.893661</ts>
    <user>U4L6H669J</user>
    <text>&lt;https://racket.slackarchive.io/&gt;</text>
  </message>
  <message>
    <ts>2017-05-14T12:19:33.894346</ts>
    <user>U4L6H669J</user>
    <text>I don't know if the logs are exportable</text>
  </message>
  <message>
    <ts>2017-05-14T13:23:07.101024</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U4L6H669J&gt; Hm. I thought the slackarchive log was also limited, but it seems it goes back further in time (the earliest message I can get in &lt;#C06V96CKX|general&gt; is from march 14th, but slackarchive goes back to November 15th). That's cool :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-05-14T18:15:31.022736</ts>
    <user>U3QF0EM0E</user>
    <text>anyone know how to center a `tabular` in a pdf?</text>
  </message>
  <message>
    <ts>2017-05-14T18:42:22.102126</ts>
    <user>U3QF0EM0E</user>
    <text>(well, renewing the `bigtabular` environment to `tabular` for the main document --- then back to `pltstabular` for the bibliography --- works as a LaTeX-level fix)</text>
  </message>
  <message>
    <ts>2017-05-15T00:41:04.781681</ts>
    <user>U3QF0EM0E</user>
    <text>&lt;@U0A96R8F2&gt; &lt;@U0G0JDQGZ&gt;  I just tried to make a new package and am getting "Save failed."</text>
  </message>
  <message>
    <ts>2017-05-15T09:12:44.648389</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U3QF0EM0E&gt; Have a look at `tex-addition`. You can use that to inject LaTeX code and renew the environment "by hand", I suppose.</text>
  </message>
  <message>
    <ts>2017-05-15T11:13:38.406036</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U3QF0EM0E&gt; If I remember correctly, using `@tabular[#:style 'block]` has the same effect as switching to `tabular` at the Latex level, so `@centered` plus `@tabular[#:style 'block]` should work</text>
  </message>
  <message>
    <ts>2017-05-15T15:05:04.494398</ts>
    <user>U3QF0EM0E</user>
    <text>I think the problem was my tag `syntax/parse`</text>
  </message>
  <message>
    <ts>2017-05-15T20:05:26.115110</ts>
    <user>U07SCV14J</user>
    <text>I've somehow managed to break my DrRacket installation in a confusing way. When I start it up, or when I run any module, the following error message is produced in the interactions window:
```
racket/collects/racket/compiled/errortrace/runtime-config_rkt.zo::1: read (compiled): wrong version for compiled code
  compiled version: 6.8.0.2
  expected version: 6.9.0.4
```
I've tried removing `racket/build/` and `racket/racket/src/build/` and re-running `make base`, and I've tried running `raco setup --clean` and rebuilding everything with `raco setup`, but the problem is still there, and I'm not sure what's causing it or how to fix it.</text>
  </message>
  <message>
    <ts>2017-05-15T20:08:05.137746</ts>
    <user>U07SCV14J</user>
    <text>I can't seem to trigger the error at all in the REPL. Switching off debugging in the DrRacket Language menu also makes the issue go away, so it has _something_ to do with errortrace, but I don't know what.</text>
  </message>
  <message>
    <ts>2017-05-15T20:08:56.144789</ts>
    <user>U07SCV14J</user>
    <text>Maybe DrRacket's .zos don't get cleaned out by `raco setup --clean`?</text>
  </message>
  <message>
    <ts>2017-05-15T20:13:58.186767</ts>
    <user>U07SCV14J</user>
    <text>Yeah, it seems like that may have been the problem. I ran `find racket/collects -type d -name errortrace -exec rm -rf {} \;` and that seemed to fix the issue. I still wonder what caused it, though…</text>
  </message>
  <message>
    <ts>2017-05-16T01:50:11.521530</ts>
    <user>U58GZUP5J</user>
    <text>Hey folks! Our startup &lt;http://Standuply.com|Standuply.com&gt; has partnered with two awesome events for AI, ML and chatbot enthusiasts. One is called Chatbot Summit and will be held in BERLIN on 26th of June. Now can offer you 30% discount. Visit their website at &lt;http://bit.ly/chatbotsummit|bit.ly/chatbotsummit&gt; and use the promo code STANDUPLYBOTS in order to get it.</text>
  </message>
  <message>
    <ts>2017-05-16T01:50:27.523428</ts>
    <user>U58GZUP5J</user>
    <text>The other one is AL ML World 2017 - in LONDON on 13-15 of June, we offer you 20% discount. Same thing - visit their vebsite at &lt;http://bit.ly/aimlworld2017|bit.ly/aimlworld2017&gt; and use promocode STANDUPLY</text>
  </message>
  <message>
    <ts>2017-05-16T01:50:47.525617</ts>
    <user>U58GZUP5J</user>
    <text>Hope this information will be helpful for those who might need it :wink:</text>
  </message>
  <message>
    <ts>2017-05-16T14:09:58.245475</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; &lt;@U0702F2CE&gt; &lt;@U3NP867S6&gt; &lt;@U3NGSC6AF&gt; or someone else with admin privileges, gleb seems like a spam bot.  (If you are a real person I apologize.)</text>
  </message>
  <message>
    <ts>2017-05-16T14:10:34.259061</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U08JL5H89&gt; I don't think we need to do anything unless someone spams multiple times</text>
  </message>
  <message>
    <ts>2017-05-16T14:10:47.263625</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U0702F2CE&gt; okay</text>
  </message>
  <message>
    <ts>2017-05-16T14:11:17.274905</ts>
    <user>U3NGSC6AF</user>
    <text>I don't think I have any admin privileges. </text>
  </message>
  <message>
    <ts>2017-05-16T14:11:31.279774</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NGSC6AF&gt; Oops, sorry.</text>
  </message>
  <message>
    <ts>2017-05-16T14:11:58.289284</ts>
    <user>U08JL5H89</user>
    <text>Ya, I don't know who manages this slack instance, only the #racket irc channel.</text>
  </message>
  <message>
    <ts>2017-05-16T14:18:31.431990</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U08JL5H89&gt; I think I'm the person to talk to, or &lt;@U06V8QARY&gt;</text>
  </message>
  <message>
    <ts>2017-05-16T14:21:06.488306</ts>
    <user>U08JL5H89</user>
    <text>Alright, good to know for future reference, thanks.</text>
  </message>
  <message>
    <ts>2017-05-16T15:08:33.548824</ts>
    <user>U3QFE5KGX</user>
    <text>does raco test support just running a single test within a module?</text>
  </message>
  <message>
    <ts>2017-05-16T15:36:12.111421</ts>
    <user>U0G0JDQGZ</user>
    <text>jamesswaine: It doesn't know anything about the tests in the module. It just runs the test submodule. It might be possible to use the same code that counts the number of tests to quit after a certain number of them</text>
  </message>
  <message>
    <ts>2017-05-16T15:43:32.260042</ts>
    <user>U3QFE5KGX</user>
    <text>ah okay, bummer, i sort of figured</text>
  </message>
  <message>
    <ts>2017-05-16T15:44:20.276463</ts>
    <user>U3QFE5KGX</user>
    <text>yeah i was looking for something like what rspec gives you (ruby testing framework), where you can run a specific test in a suite by giving either a name or source line number on the command line</text>
  </message>
  <message>
    <ts>2017-05-16T16:13:40.891517</ts>
    <user>U3NGSC6AF</user>
    <text>&lt;@U3QFE5KGX&gt; that would be super useful, I agree. Right now the pipe of information isn't very rich, but there is one, so it could probably be extended.  This is the current library: &lt;https://github.com/racket/rackunit/blob/master/testing-util-lib/rackunit/log.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-05-16T16:14:40.911781</ts>
    <user>U3NGSC6AF</user>
    <text>I imagine that someone could add something to say "I am interested only in tests with this name” or "on this line in this file” and then rackunit could look there and `raco test` could initialize it.</text>
  </message>
  <message>
    <ts>2017-05-16T16:17:25.966631</ts>
    <user>U3NGSC6AF</user>
    <text>(not that that'd be high on your priority list, of course :wink: )</text>
  </message>
  <message>
    <ts>2017-05-16T16:33:05.289955</ts>
    <user>U3QFE5KGX</user>
    <text>haha, well, i've been wanting that forever so</text>
  </message>
  <message>
    <ts>2017-05-16T16:38:57.410112</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3ZACTKTP&gt; The highlighting change you proposed is super neat and makes me wonder if you could combine `scribble/lp` with cover usefully</text>
  </message>
  <message>
    <ts>2017-05-16T17:18:03.171641</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3QFE5KGX&gt; I've found various command line forms like that very useful in python, so consider this another vote :wink:</text>
  </message>
  <message>
    <ts>2017-05-16T17:25:59.308727</ts>
    <user>U0L0F9F2Q</user>
    <text>raco setup take forever…. and mostly on scribbling docs it seems like? has anyone looked at where the bottlenecks are in that process?</text>
  </message>
  <message>
    <ts>2017-05-16T17:26:46.322194</ts>
    <user>U0L0F9F2Q</user>
    <text>&amp;gt;1GB of RAM for raco setup also seems a bit surprising.</text>
  </message>
  <message>
    <ts>2017-05-16T17:29:22.366278</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U0L0F9F2Q&gt; a lot of it is typed racket + plot</text>
  </message>
  <message>
    <ts>2017-05-16T17:29:34.369463</ts>
    <user>U0702F2CE</user>
    <text>see &lt;http://build-plot.racket-lang.org|build-plot.racket-lang.org&gt; for details</text>
  </message>
  <message>
    <ts>2017-05-16T19:21:14.812199</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; what specific part of typed racket causes the speed issues? Is it some weird artifact of how typed racket is implemented or is the type checking process itself just that expensive?</text>
  </message>
  <message>
    <ts>2017-05-16T19:21:47.817953</ts>
    <user>U0702F2CE</user>
    <text>we believe that the type checking process is expensive</text>
  </message>
  <message>
    <ts>2017-05-16T19:22:13.822243</ts>
    <user>U07SCV14J</user>
    <text>I eagerly await absolutely abysmal Hackett compile-times</text>
  </message>
  <message>
    <ts>2017-05-16T20:20:35.356976</ts>
    <user>U0G0JDQGZ</user>
    <text>@jamesswainer &lt;@U0702F2CE&gt; &lt;@U3NGSC6AF&gt; - I think that raco test could do something like "raco test args files -- more" and when it ran an individual test submodule, it could make "more" be (current-command-line-arguments) then we could change rackunit, chk. eli-tester, and other popular testing libraries to look at those arguments to determine whether to run </text>
  </message>
  <message>
    <ts>2017-05-16T20:20:35.356979</ts>
    <user>U0G0JDQGZ</user>
    <text>a test. For example, if it was empty, then they'd run everything, otherwise they'd consider it a set of tags to run, etc</text>
  </message>
  <message>
    <ts>2017-05-16T20:23:33.382823</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U07SJGB4H&gt; thanks :slightly_smiling_face: . I added the highlighting stuff to &lt;http://docs.racket-lang.org/hyper-literate/&gt; (online docs are not up-to-date yet).
The highlighting form `@hlite[name pat . code]` works like `@chunk[name . code]`, but also expects a pattern. The pattern indicates which portions of the code should be highlighted as added/removed/dimmed/normal, so e.g. `{+ _ _ - _}` will highlight the first two expressions in green and the third in red (patterns can be more complex than that, and I hope to add support for syntax/parse-like syntax `{a:+ b:+ c:-}` soon, as it is more readable for complex patterns.
So I think it should be reasonably easy to generate the pattern from the coverage information, but we would have to add line numbers to `hlite` first, though — don't hold your breath, it won't happen overnight :slightly_smiling_face:.</text>
  </message>
  <message>
    <ts>2017-05-16T20:27:23.413469</ts>
    <user>U3NGSC6AF</user>
    <text>It seems reasonable to consider a more general solution but there is something to be said (both error messagewise and human convenience wise) for a shorter command line. Maybe we can solve that with some specific shorthands, starting from the ruby experience that &lt;@U3QFE5KGX&gt; enjoyed?</text>
  </message>
  <message>
    <ts>2017-05-16T20:33:48.465479</ts>
    <user>U0702F2CE</user>
    <text>From my pytest experience, the shorthand I used most was '-k foo' which ran every test whose name included foo</text>
  </message>
  <message>
    <ts>2017-05-16T20:45:59.560013</ts>
    <user>U3NGSC6AF</user>
    <text>I am often copying a single test out and running it over and over as I work towards a fix for a bug, and generally in tests suites where I didn't bother to name the tests (like the thousands of tests in the contract system), so an option that took a line number would be great for me.  </text>
  </message>
  <message>
    <ts>2017-05-16T22:40:00.423935</ts>
    <user>U0702F2CE</user>
    <text>Right, I agree that the exact same thing wouldn't be as effective in Racket</text>
  </message>
  <message>
    <ts>2017-05-16T22:40:16.425966</ts>
    <user>U0702F2CE</user>
    <text>Just documenting my experience</text>
  </message>
  <message>
    <ts>2017-05-16T22:40:42.428789</ts>
    <user>U0702F2CE</user>
    <text>The other option I used a lot was "stop on first failure"</text>
  </message>
  <message>
    <ts>2017-05-17T09:38:26.835594</ts>
    <user>U3QFE5KGX</user>
    <text>i do agree with robby that shorter is preferable, but support in any form is better than nothing</text>
  </message>
  <message>
    <ts>2017-05-17T09:38:54.845609</ts>
    <user>U3QFE5KGX</user>
    <text>in the ruby rspec case, you just have `rspec &amp;lt;file&amp;gt;:&amp;lt;line-number&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-05-17T09:39:40.862001</ts>
    <user>U3NGSC6AF</user>
    <text>also, now that I think about it, it would be nice if DrRacket could get in on the fun too, so having the `raco test` command-line be a thin wrapper over a prgorammable interface would be nice</text>
  </message>
  <message>
    <ts>2017-05-17T09:39:43.863166</ts>
    <user>U3NGSC6AF</user>
    <text>programmable</text>
  </message>
  <message>
    <ts>2017-05-17T09:40:02.870459</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3QFE5KGX&gt; the major issue is that the current way rackunit works/is used is to just run the code, and testing is a side effect</text>
  </message>
  <message>
    <ts>2017-05-17T09:40:14.874746</ts>
    <user>U3QFE5KGX</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-05-17T09:40:22.877822</ts>
    <user>U0702F2CE</user>
    <text>whereas rspec/pytest/etc collect tests and then run them</text>
  </message>
  <message>
    <ts>2017-05-17T09:45:04.980804</ts>
    <user>U3QFE5KGX</user>
    <text>would it be better to roll something totally different as opposed to bolting it onto raco test?</text>
  </message>
  <message>
    <ts>2017-05-17T09:45:07.982212</ts>
    <user>U3QFE5KGX</user>
    <text>or worse?</text>
  </message>
  <message>
    <ts>2017-05-17T15:57:08.602331</ts>
    <user>U462H29AR</user>
    <text>robby: In that scenario, I could imagine giving that one test a name, then? (Maybe the name even includes the bug number; maybe handy to commit that edit for posterity, idk.)

That _seems_ plausible, to me, because often I'd be mucking in the test file or submodule, anyway. Say to write a comment with the bug number, and/or add more, regression test(s).

TL;DR: Maybe tests could be lazily named -- if/as/ever needed.  And that would fit with a run-tests-named-x feature.</text>
  </message>
  <message>
    <ts>2017-05-17T15:58:19.628001</ts>
    <user>U4L6H669J</user>
    <text>&lt;@U3ZACTKTP&gt; hyper-literate seems pretty interesting</text>
  </message>
  <message>
    <ts>2017-05-17T16:09:32.862557</ts>
    <user>U3NGSC6AF</user>
    <text>good point!</text>
  </message>
  <message>
    <ts>2017-05-17T16:16:03.994831</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U4L6H669J&gt; Thanks :slightly_smiling_face: For now it's mostly a collection of wishes for the future, though.
The features which are actualy implemented and useful are
* Choice of the language for `@chunk`s
* Choice of the at-exp `@` character, e.g. change it to `♦` or `꩜`, like with the `_-exp` package
* Ability to save chunks and show them multiple times (including display (but not definition (yet)) inside list items, whereas with `scribble/lp2` you cannot put a chunk in a list item at all)
* And very recently, highlighting parts of the code.
So there's not much yet, but given infinite time and resources, I would like to add the missing features:
* It's not drawing DrRacket-like arrows in the HTML,
* It's not showing the contract/type on hover
* It's not hyperlinking identifiers to their definition site
* It lacks an interactive REPL embedded in the HTML (we'll need a full-blown `whalesong` for that :smile: or a running server)
* It lacks a step-by-step debugger embedded in the HTML (but well, that would be very interesting for stepping through macro code running at compile-time, and we still don't have that in DrRacket yet!)
* It certainly lacks user-driven code navigation in the spirit of Code Bubbles (although that might not be as hard as it seems to actually implement, most of the information is there, and it needs a bit of glue and some HTML+JS UI)
* It definitely lacks multi-module capabilities (the HTML page should not be limited to describing a single `.rkt` file)
* It certainly lacks the possibility to write the literate program as an interactive story. Ideally, the reader would start with a nearly empty file, and choose an action (define foo, define bar, read the overview, …) and gradually build the program that way, with the possibility from the writer's point of view to switch between a couple of more or less in-depth explanations depending on whether an identifier was already defined or not). But that's me daydreaming :slightly_smiling_face:

The exciting part is that we can in principle get 90% of the way thanks to the awesomeness of Racket's macros and Scribble, without having to change language's core.</text>
  </message>
  <message>
    <ts>2017-05-17T16:49:42.668864</ts>
    <user>U3PRC73C2</user>
    <text>any good tutorials on using slideshow?</text>
  </message>
  <message>
    <ts>2017-05-17T16:50:09.678192</ts>
    <user>U3PRC73C2</user>
    <text>the documentation is pretty good, but i'm looking for quick helpers to make doing things like background images and font changes quick and easy</text>
  </message>
  <message>
    <ts>2017-05-17T16:52:02.715588</ts>
    <user>U3PRC73C2</user>
    <text>(i assume tutorials would have helpers or something that make that easy...)</text>
  </message>
  <message>
    <ts>2017-05-17T18:16:13.101671</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U3PRC73C2&gt; I vaguely remember some of last year's racketcon presentations were made with `#lang slideshow`, but the website only hosts the PDFs. And a quick search for `#lang slideshow` on github did not return any code results. Maybe try to ask on the mailing list? I'm sure some people have some code lying around.</text>
  </message>
  <message>
    <ts>2017-05-17T18:33:28.314286</ts>
    <user>U3N2Z5LBT</user>
    <text>Here's the code for a talk I gave last year, it's not a good example of well written racket code, but it demonstrates some of the things you can do in slideshow &lt;https://github.com/dfeltey/lwc2016/blob/master/talk/slides.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-05-17T20:29:39.443098</ts>
    <user>U3PRC73C2</user>
    <text>&lt;@U3ZACTKTP&gt; ok. thanks!</text>
  </message>
  <message>
    <ts>2017-05-18T09:53:22.203610</ts>
    <user>U3NGSC6AF</user>
    <text>&lt;@U3PRC73C2&gt; I turn some of my talks into packages; links here: &lt;http://www.eecs.northwestern.edu/~robby/talks/&gt;</text>
  </message>
  <message>
    <ts>2017-05-18T11:08:56.106161</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3PRC73C2&gt; also &lt;@U3NJS8H7C&gt; posted the source for all of his slideshow talks here: &lt;https://github.com/mflatt/talks&gt;</text>
  </message>
  <message>
    <ts>2017-05-18T11:39:15.875493</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U0702F2CE&gt;: I'm about merge TR PR 540 (from @georges-duperon). I noticed that the merge button seems to default to "squash and merge". Is that a repo setting you set?</text>
  </message>
  <message>
    <ts>2017-05-18T11:39:57.892606</ts>
    <user>U3NP867S6</user>
    <text>FWIW, it's not what I want here (squash + rebase + merge is what I want), but switching the default to "rebase + merge" on the racket repos would be nice.</text>
  </message>
  <message>
    <ts>2017-05-18T11:42:01.944942</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NP867S6&gt; yes, that's a setting</text>
  </message>
  <message>
    <ts>2017-05-18T11:42:25.953331</ts>
    <user>U0702F2CE</user>
    <text>I think "squash and merge" means "squash + rebase + merge"</text>
  </message>
  <message>
    <ts>2017-05-18T11:42:53.965756</ts>
    <user>U0702F2CE</user>
    <text>and "rebase + merge" doesn't squash, but sqaush + merge without rebase doesn't make sense AFAICT</text>
  </message>
  <message>
    <ts>2017-05-18T11:43:06.971050</ts>
    <user>U3NP867S6</user>
    <text>Ah, found it.</text>
  </message>
  <message>
    <ts>2017-05-18T11:43:13.973925</ts>
    <user>U3NP867S6</user>
    <text>Disabling merge commits for racket/racket.</text>
  </message>
  <message>
    <ts>2017-05-18T11:44:44.010858</ts>
    <user>U3NP867S6</user>
    <text>Doesn't seem to be an org-wide setting. Will write a script to do all of them later.</text>
  </message>
  <message>
    <ts>2017-05-18T12:48:58.498459</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Is it okay if I merge this: &lt;https://github.com/racket/scribble/pull/111&gt;</text>
  </message>
  <message>
    <ts>2017-05-18T12:58:18.700665</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; I left a suggestion (version and `history`) in the PR</text>
  </message>
  <message>
    <ts>2017-05-18T13:14:03.041915</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3NJS8H7C&gt;: Could I ask you to take a quick look at this PR? It should be brief; the changeset is very small. &lt;https://github.com/racket/r5rs/pull/2&gt;</text>
  </message>
  <message>
    <ts>2017-05-18T13:14:55.059973</ts>
    <user>U07SCV14J</user>
    <text>Someone else would probably also be able to review it, but it looks like you're the primary maintainer for that repo?</text>
  </message>
  <message>
    <ts>2017-05-18T13:16:25.092004</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U07SCV14J&gt; Done. (Does anyone have a guess at why GitHub sends me email alerts only sometimes?)</text>
  </message>
  <message>
    <ts>2017-05-18T13:16:35.095722</ts>
    <user>U07SCV14J</user>
    <text>Thank you!</text>
  </message>
  <message>
    <ts>2017-05-18T13:18:00.125624</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3NJS8H7C&gt;: I have email notifications turned off for watched repos but turned on for threads I've participated in. What do your settings look at for the Notifications section in your GitHub settings?</text>
  </message>
  <message>
    <ts>2017-05-18T13:18:13.130369</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U3NJS8H7C&gt;: There was a point in time where not all our repos had email integration, but I fixed that a couple (few?) months ago.</text>
  </message>
  <message>
    <ts>2017-05-18T13:18:57.145583</ts>
    <user>U3NJS8H7C</user>
    <text>I have everything checked except "Include your own updates"</text>
  </message>
  <message>
    <ts>2017-05-18T13:19:46.162360</ts>
    <user>U3NJS8H7C</user>
    <text>I haven't yet tried unchecking "web"; maybe N browser tabs on GitHub confuse it?</text>
  </message>
  <message>
    <ts>2017-05-18T13:20:25.176665</ts>
    <user>U07SCV14J</user>
    <text>I have no idea what the issue is then. ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-05-18T15:49:24.356908</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U07SCV14J&gt;: From the git history, it looks like you've been involved with the homebrew packaging for Racket. Is that correct?</text>
  </message>
  <message>
    <ts>2017-05-18T15:49:39.362202</ts>
    <user>U07SCV14J</user>
    <text>I think I touched it once to update it</text>
  </message>
  <message>
    <ts>2017-05-18T15:49:53.367026</ts>
    <user>U3NP867S6</user>
    <text>That's more than I have. :)</text>
  </message>
  <message>
    <ts>2017-05-18T15:49:58.368610</ts>
    <user>U07SCV14J</user>
    <text>but it was a very easy change, IIRC</text>
  </message>
  <message>
    <ts>2017-05-18T15:50:00.369005</ts>
    <user>U3NP867S6</user>
    <text>Any idea about &lt;https://github.com/racket/racket/issues/1680&gt;</text>
  </message>
  <message>
    <ts>2017-05-18T15:50:02.369645</ts>
    <user>U3NP867S6</user>
    <text>?</text>
  </message>
  <message>
    <ts>2017-05-18T15:50:22.376381</ts>
    <user>U3NP867S6</user>
    <text>ISTR we've had other reports, possibly about similar things, with homebrew before.</text>
  </message>
  <message>
    <ts>2017-05-18T15:50:47.384653</ts>
    <user>U07SCV14J</user>
    <text>I'm not sure, but I could make guesses. I don't (and never have) run Racket from a Homebrew installation</text>
  </message>
  <message>
    <ts>2017-05-18T15:51:38.400909</ts>
    <user>U3NP867S6</user>
    <text>Do you know how the main person behind Racket's homebrew package is?</text>
  </message>
  <message>
    <ts>2017-05-18T15:52:46.422465</ts>
    <user>U07SCV14J</user>
    <text>I'm afraid I have no idea.</text>
  </message>
  <message>
    <ts>2017-05-18T15:55:48.482357</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3NP867S6&gt;: It sounds like Homebrew renamed the formula to `minimal-racket`, but whatever the installation is does not properly set the relevant prefix. I'm a bit surprised by this, since the formula appears to pass the right `--prefix` option.</text>
  </message>
  <message>
    <ts>2017-05-18T15:57:47.521600</ts>
    <user>U3NP867S6</user>
    <text>Hmm, that does sound odd.</text>
  </message>
  <message>
    <ts>2017-05-18T16:00:24.574292</ts>
    <user>U07SCV14J</user>
    <text>It looks like &lt;@U2Y8JBMUJ&gt; did the initial rename of `racket` to `minimal-racket`, so perhaps he knows more about this issue.</text>
  </message>
  <message>
    <ts>2017-05-18T16:05:10.670020</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U07SCV14J&gt;: Talking to @florence, it seems like there's a cask for Racket, that uses our installers. So probably best to use that, instead of the recipe.</text>
  </message>
  <message>
    <ts>2017-05-18T16:05:26.674671</ts>
    <user>U3NP867S6</user>
    <text>So we may be able to just ask for the recipe to be removed. I'll post on the mailing list.</text>
  </message>
  <message>
    <ts>2017-05-18T16:07:38.717357</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NP867S6&gt; I think some people have expressed a preference for formulas over casks</text>
  </message>
  <message>
    <ts>2017-05-18T16:07:46.720150</ts>
    <user>U0702F2CE</user>
    <text>not that I understand this at all</text>
  </message>
  <message>
    <ts>2017-05-18T16:08:09.727644</ts>
    <user>U3NP867S6</user>
    <text>I think most people also prefer working things to broken ones. :)</text>
  </message>
  <message>
    <ts>2017-05-18T16:12:10.802833</ts>
    <user>U07SCV14J</user>
    <text>I think having the `minimal-racket` installation is a good idea if we can get it working. It mentions in the description to use the cask if you want the full installation.</text>
  </message>
  <message>
    <ts>2017-05-18T16:13:00.818166</ts>
    <user>U3NP867S6</user>
    <text>Yep, would be nice to get it working. But unless you're volunteering, it may be better to remove it. :)</text>
  </message>
  <message>
    <ts>2017-05-18T17:08:49.866293</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U0702F2CE&gt; &lt;@U3NJS8H7C&gt;: I can take a look at the broken test</text>
  </message>
  <message>
    <ts>2017-05-18T17:21:14.072349</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U0702F2CE&gt;, &lt;@U3NJS8H7C&gt;: it seems like the relevant file, `psyntax.sch` is generated from `psyntax-input.txt`? is that true? if so, how do I regenerate it?</text>
  </message>
  <message>
    <ts>2017-05-18T17:26:46.165355</ts>
    <user>U0702F2CE</user>
    <text>I think by running psyntax :wink:</text>
  </message>
  <message>
    <ts>2017-05-18T17:27:01.169264</ts>
    <user>U0702F2CE</user>
    <text>but we don't want to be breaking that code, do we?</text>
  </message>
  <message>
    <ts>2017-05-18T17:28:14.189133</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U0702F2CE&gt;: `psyntax-input.txt` has a note that it was modified from the original version, and the offending line is a modified line that uses `[` `]` instead of parens.</text>
  </message>
  <message>
    <ts>2017-05-18T17:28:31.193975</ts>
    <user>U07SCV14J</user>
    <text>so my guess is that modification was basically a mistake and it should be replaced with parens.</text>
  </message>
  <message>
    <ts>2017-05-18T17:28:45.197791</ts>
    <user>U0702F2CE</user>
    <text>ah ok</text>
  </message>
  <message>
    <ts>2017-05-18T17:41:20.398523</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U0702F2CE&gt;: fixing `psyntax-input.txt` makes `raco test -l tests/racket/benchmarks/common/psyntax` pass, but it doesn't change `psyntax.sch`, so I'm not sure if that's a problem or not.</text>
  </message>
  <message>
    <ts>2017-05-18T17:42:08.410486</ts>
    <user>U0702F2CE</user>
    <text>I believe the problem (based solely on the change and what I think might happen) is that psyntax.sch calls `read` to read in `psyntax-input.sch`</text>
  </message>
  <message>
    <ts>2017-05-18T17:42:21.413612</ts>
    <user>U0702F2CE</user>
    <text>and your change caused it to fail on the `[]` there</text>
  </message>
  <message>
    <ts>2017-05-18T17:42:38.417748</ts>
    <user>U0702F2CE</user>
    <text>so we shouldn't need to change `psyntax.sch` at all</text>
  </message>
  <message>
    <ts>2017-05-18T17:51:33.550757</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U0702F2CE&gt;: what confuses me is that `psyntax.sch` is clearly a generated file, and it also has a single pair of square brackets that appear to correspond to the single pair of square brackets in `psyntax-input.txt`</text>
  </message>
  <message>
    <ts>2017-05-18T17:52:35.566172</ts>
    <user>U0702F2CE</user>
    <text>those are read by the implementation of `read` inside `include` in `scheme/include` (see `psyntax.rkt`) which will accept them</text>
  </message>
  <message>
    <ts>2017-05-18T17:53:03.572995</ts>
    <user>U07SCV14J</user>
    <text>right, but I'm still left wondering how `psyntax.sch` was created in the first place</text>
  </message>
  <message>
    <ts>2017-05-18T17:55:40.609648</ts>
    <user>U0702F2CE</user>
    <text>probably by running psyntax on a system with different treatment of []</text>
  </message>
  <message>
    <ts>2017-05-18T17:55:58.614287</ts>
    <user>U0702F2CE</user>
    <text>such as racket/r5rs before your change, or chez, or something</text>
  </message>
  <message>
    <ts>2017-05-18T17:56:49.626456</ts>
    <user>U07SCV14J</user>
    <text>what I'm really getting at is that it seems like maybe `psyntax.sch` ought to be kept in sync with `psyntax-input.txt` and I don't know how to do that</text>
  </message>
  <message>
    <ts>2017-05-18T17:57:05.630203</ts>
    <user>U07SCV14J</user>
    <text>but if you are okay with just changing `psyntax-input.txt` so that the test passes, I have a patch I can push</text>
  </message>
  <message>
    <ts>2017-05-18T17:58:11.645926</ts>
    <user>U0702F2CE</user>
    <text>That's my suggestion</text>
  </message>
  <message>
    <ts>2017-05-18T17:59:01.658241</ts>
    <user>U07SCV14J</user>
    <text>alright, pushed</text>
  </message>
  <message>
    <ts>2017-05-18T18:51:22.284887</ts>
    <user>U3PRC73C2</user>
    <text>&lt;@U3NGSC6AF&gt; &lt;@U0702F2CE&gt; thanks for the links to slideshow talks. I gave a successful talk last night with slideshow (not *on* racket), but wasn't quite happy with the way the slides looked. Was happy with the tool itself though.</text>
  </message>
  <message>
    <ts>2017-05-18T18:59:23.369874</ts>
    <user>U3PRC73C2</user>
    <text>OK, so I guess what I didn't realize about slideshow, but now do, is that it doesn't do much more than create the UI and handle keyboard events, and provide some very naive things. Basically, it gives you the minimal scaffolding in order to build custom slideshows with the whole power of pict.</text>
  </message>
  <message>
    <ts>2017-05-18T19:00:00.376308</ts>
    <user>U3PRC73C2</user>
    <text>now that I have that understanding, it's even better.</text>
  </message>
  <message>
    <ts>2017-05-19T12:47:20.160100</ts>
    <user>U2Y8JBMUJ</user>
    <text>&lt;@U07SCV14J&gt;, &lt;@U3NP867S6&gt;: My involvement with the Racket formula/cask in Homebrew is: (1) I use the cask as my main Racket installation on my development machine; (2) I sometimes update the cask when a new version of Racket is released (other times other people do it before me); and (3) a few months ago the Homebrew team wanted to remove duplicates, so they removed the Racket cask, only giving the Minimal Racket version—I asked them to bring back the Racket cask.

In summary, I'm far from being a maintainer :stuck_out_tongue:

That said, if there's anything I can do to help, I'm here :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-05-19T12:56:58.347164</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U2Y8JBMUJ&gt;: That's already more maintenance than the non-cask version gets.</text>
  </message>
  <message>
    <ts>2017-05-19T12:57:02.348443</ts>
    <user>U3NP867S6</user>
    <text>Thanks for your help!</text>
  </message>
  <message>
    <ts>2017-05-19T13:14:55.701087</ts>
    <user>U2Y8JBMUJ</user>
    <text>&lt;@U3NP867S6&gt;: My pleasure :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-05-19T16:14:19.123570</ts>
    <user>U3QF0EM0E</user>
    <text>&lt;@U3NJS8H7C&gt; can you look at the "Last,First parsing" PR when you have time: &lt;https://github.com/racket/scribble/pull/92&gt;</text>
  </message>
  <message>
    <ts>2017-05-19T16:19:31.209189</ts>
    <user>U07SCV14J</user>
    <text>I have a complex situation where I'm stashing an identifier somewhere and then pulling it out somewhere else, and I'm getting an unbound identifier error, but there are too many moving parts for me to figure out what is going on :/</text>
  </message>
  <message>
    <ts>2017-05-19T16:20:17.222280</ts>
    <user>U07SCV14J</user>
    <text>I've been trying to use &lt;@U3ZACTKTP&gt;'s `debug-scopes` package, but I'm not totally sure how to read its output</text>
  </message>
  <message>
    <ts>2017-05-19T16:40:08.549551</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U3QF0EM0E&gt; That's &lt;@U0G0JDQGZ&gt;'s code, so he may have an opinion; I have no objections</text>
  </message>
  <message>
    <ts>2017-05-19T16:40:35.557138</ts>
    <user>U3QF0EM0E</user>
    <text>ok thank you</text>
  </message>
  <message>
    <ts>2017-05-19T16:47:48.672374</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SCV14J&gt; what does the output look like?</text>
  </message>
  <message>
    <ts>2017-05-19T16:48:21.680841</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U0702F2CE&gt; I ended up managing to fix it, but tbh I'm not sure why it works</text>
  </message>
  <message>
    <ts>2017-05-19T16:49:45.702330</ts>
    <user>U07SCV14J</user>
    <text>typeclasses are real complicated :no_mouth:</text>
  </message>
  <message>
    <ts>2017-05-19T18:23:57.884175</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U07SCV14J&gt; You have to use `(displayln (+scopes id))`, and it indicates the scopes with sub/superscript numbers. Each Racket scope (which normally has a large 7-digit numeric identifier) is given a short and readable number starting with `0`. Ranges are indicated with `³˙˙⁹` (3 till 9). When you are done printing the scopes of one or more ids and stx objects, you'll want to call `(print-full-scopes)`, which prints a table associating short numbers with their long counterpart as well as other info (if it is a macro, use-site or module scope, and the module name for module scopes, i.e. the info that you get in DrRacket's macro stepper).</text>
  </message>
  <message>
    <ts>2017-05-19T18:28:13.922833</ts>
    <user>U3ZACTKTP</user>
    <text>I'm not automatically running `(print-full-scopes)`, because it would clutter the output. Also, after executing `(print-full-scopes)` the scope counter is reset (and `+scopes` therefore starts numbering scopes starting from `0` again), so if you want to compare two ids, you have to call `(displayln (+scopes id1)) (displayln (+scopes id2)) (print-full-scopes)`, possibly across several macro invocations (I should probably add a parameter to `print-full-scopes` to ask it to not reset the counter).</text>
  </message>
  <message>
    <ts>2017-05-22T12:34:34.026088</ts>
    <user>U3NGSC6AF</user>
    <text>&lt;@U3PC27CUQ&gt; just noticed: &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/deps/debug.txt&gt;</text>
  </message>
  <message>
    <ts>2017-05-23T14:28:55.983452</ts>
    <user>U3SEVDPJT</user>
    <text>&lt;@U3VGR2S7Q&gt; hi Ryan, I would like to contribute a pull request in the near future to improve the `'multiple statements given'` error message being returned from `db` package when working with Sqlite3 databases. My changes involve the `connection.rkt` and `ffi.rkt` files in `collects/db/private/sqlite3` directory in the main racket repository. Since those files aren't in the `db` repository, where would be the appropriate place to put tests in? My guess is the `db` repository but wasn't sure.</text>
  </message>
  <message>
    <ts>2017-05-23T14:30:34.023606</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U3SEVDPJT&gt;: I'm not ryanc, but I'd assume that would be the place: &lt;https://github.com/racket/db/tree/master/db-test/tests/db&gt;</text>
  </message>
  <message>
    <ts>2017-05-23T14:32:21.065446</ts>
    <user>U3SEVDPJT</user>
    <text>that was my first thought, I'd need to submit separate pull requests against the db repo and the racket repo, is that fine?</text>
  </message>
  <message>
    <ts>2017-05-23T14:32:49.076379</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3SEVDPJT&gt; yes, that's fine</text>
  </message>
  <message>
    <ts>2017-05-23T14:34:41.119037</ts>
    <user>U3SEVDPJT</user>
    <text>ok thank you</text>
  </message>
  <message>
    <ts>2017-05-23T15:06:39.839037</ts>
    <user>U0G0JDQGZ</user>
    <text>mflatt: I get a really weird error building old versions of Racket on Ubuntu 16.04 --- &lt;https://gist.github.com/jeapostrophe/b8f7256657d490f83f5a453db049bf5a&gt; --- I've got it on 5.92, 5.93, 6.0 and 6.3</text>
  </message>
  <message>
    <ts>2017-05-23T15:06:55.844908</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U3SEVDPJT&gt;, confirming stamourv's and samth's answers</text>
  </message>
  <message>
    <ts>2017-05-23T15:07:29.856797</ts>
    <user>U0G0JDQGZ</user>
    <text>the same error is here --- &lt;https://github.com/racket/racket/issues/1222&gt;</text>
  </message>
  <message>
    <ts>2017-05-23T15:08:24.876403</ts>
    <user>U0G0JDQGZ</user>
    <text>so the problem is that back then we used a different compiler, so there wasn't a problem. very weird!</text>
  </message>
  <message>
    <ts>2017-05-23T15:24:58.215742</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3VGR2S7Q&gt; would it be reasonable to disable the 4 failing tests here: &lt;http://drdr.racket-lang.org/40417/racket/share/pkgs/macro-debugger/tests/macro-debugger/all-tests.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-05-23T15:25:52.234582</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U0G0JDQGZ&gt; the xform step works by knowing that various functions are predefined and won't trigger a GC; that approach interacts badly with C headers that expand things that look like functions in different ways, since xform is looking at preprocessed input</text>
  </message>
  <message>
    <ts>2017-05-23T15:26:53.255549</ts>
    <user>U0G0JDQGZ</user>
    <text>Ya, I think I understand the problem. I'm thinking about how to effectively warn users that old versions are broken because GCC isn't backwards compatible. It's a weird problem.</text>
  </message>
  <message>
    <ts>2017-05-23T15:27:41.272225</ts>
    <user>U3NJS8H7C</user>
    <text>probably you just want to annotate the definitions of `mz_long_double_eqv` and `double_eqv` with `XFORM_SKIP_PROC`, which goes after the argument list and before the function's opening `{`</text>
  </message>
  <message>
    <ts>2017-05-23T15:28:15.284137</ts>
    <user>U3NJS8H7C</user>
    <text>Oh – you're not just looking for a way to make the compile go through?</text>
  </message>
  <message>
    <ts>2017-05-23T16:47:20.955041</ts>
    <user>U0G0JDQGZ</user>
    <text>mflatt: correct, i know how to make it work. i'm thinking about what to do about people that email saying all the old versions are broken because they are trying to build on a modern linux distribution.</text>
  </message>
  <message>
    <ts>2017-05-23T16:53:27.081609</ts>
    <user>U3NJS8H7C</user>
    <text>I think we don't get those requests because old software generally doesn't build</text>
  </message>
  <message>
    <ts>2017-05-23T17:25:06.706282</ts>
    <user>U07SCV14J</user>
    <text>I have a sort of diabolical abuse of the macroexpander that produces an unbound identifier error, and I don't understand why. Here's a pasterack link, though pasterack produces a different error: &lt;http://pasterack.org/pastes/92495&gt;</text>
  </message>
  <message>
    <ts>2017-05-23T17:25:24.711808</ts>
    <user>U07SCV14J</user>
    <text>The actual error I get when really running the program is this:
```
the-binding2: unbound identifier;
 also, no #%top syntax transformer is bound
```</text>
  </message>
  <message>
    <ts>2017-05-23T17:26:23.729071</ts>
    <user>U07SCV14J</user>
    <text>I don't understand why the identifier is unbound, though. I think I must be missing something about how scopes get introduced in this sort of situation, but I don't know how to debug this problem.</text>
  </message>
  <message>
    <ts>2017-05-23T17:27:55.756077</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3NJS8H7C&gt; or &lt;@U0702F2CE&gt;, might either of you be able to help me with this? I realize this program is pretty bizarre, but yes, it is a reduction of a real (admittedly quite evil ;)) thing I am trying to do in Hackett.</text>
  </message>
  <message>
    <ts>2017-05-23T17:28:08.759945</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SCV14J&gt; you seem to have `#@plain-app` where you mean `#%plain-app`</text>
  </message>
  <message>
    <ts>2017-05-23T17:28:20.763593</ts>
    <user>U07SCV14J</user>
    <text>Yeah, I noticed that, but it doesn't affect the program.</text>
  </message>
  <message>
    <ts>2017-05-23T17:28:49.772161</ts>
    <user>U07SCV14J</user>
    <text>Here's a fixed paste: &lt;http://pasterack.org/pastes/48560&gt;</text>
  </message>
  <message>
    <ts>2017-05-23T17:30:46.808338</ts>
    <user>U0702F2CE</user>
    <text>I don't really understand what's going on there, but it looks like the usual issue where you communicate the identifier behind the back of the macro expander and thus it doesn't have the right scope</text>
  </message>
  <message>
    <ts>2017-05-23T17:31:45.825786</ts>
    <user>U07SCV14J</user>
    <text>Yeah. I'm just not sure in this case how to arrange for the right scope, or even what scope is getting added or removed.</text>
  </message>
  <message>
    <ts>2017-05-23T17:32:47.843513</ts>
    <user>U07SCV14J</user>
    <text>I think that to do this "right” might require some additional cooperation from the macroexpander, so right now it's pretty hacky. :)</text>
  </message>
  <message>
    <ts>2017-05-23T17:34:42.876091</ts>
    <user>U0702F2CE</user>
    <text>the problem is that when you expand the `lambda` that `bind` generates, it adds a scope to the binder and to the body</text>
  </message>
  <message>
    <ts>2017-05-23T17:35:02.881669</ts>
    <user>U0702F2CE</user>
    <text>but that isn't there on the reference, since the reference is hidden from the expander in a parameter</text>
  </message>
  <message>
    <ts>2017-05-23T17:35:46.893947</ts>
    <user>U07SCV14J</user>
    <text>that makes sense. so I might be able to expand the `lambda`, then stash the identifier with the extra scope on it.</text>
  </message>
  <message>
    <ts>2017-05-23T17:36:09.900450</ts>
    <user>U0702F2CE</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-05-23T17:37:26.921598</ts>
    <user>U07SCV14J</user>
    <text>hmm, that gives me an `identifier used out of context` error, though I could be doing something else wrong.</text>
  </message>
  <message>
    <ts>2017-05-23T17:38:07.932565</ts>
    <user>U0702F2CE</user>
    <text>really you want to put the identifier in some macro in the body of the lambda, and arrange for that macro to put it in the parameter</text>
  </message>
  <message>
    <ts>2017-05-23T17:38:50.944411</ts>
    <user>U07SCV14J</user>
    <text>yeah. I should probably explain the actual motivation behind this whole thing, since it's pretty gross and there might be a better way.</text>
  </message>
  <message>
    <ts>2017-05-23T17:39:36.956906</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U07SCV14J&gt; Like this?
```
      [(#%plain-app @%bind-id ~! e:expr)
       (let ([id-to-bind (generate-temporary 'the-binding)])
         (exp #`(λ (#,id-to-bind)
                  (let-syntax ([result-transformer
                                (make-variable-like-transformer
                                 (parameterize ([current-id #'#,id-to-bind])
                                   (exp (walk+expand #'e))))])
                    result-transformer))))]

```</text>
  </message>
  <message>
    <ts>2017-05-23T17:43:32.021834</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3NJS8H7C&gt;: Thanks, that works in that case, but it doesn't seem to work in my real situation. I'll fiddle with it a bit and see if I can make it work.</text>
  </message>
  <message>
    <ts>2017-05-23T17:43:52.027075</ts>
    <user>U07SCV14J</user>
    <text>All this is actually part of typeclass dictionary elaboration. I need to perform a sort of "delimited expansion” where I leave placeholders in the expansion where typeclass dictionaries will be inserted later. However, I can't call `local-expand` with a stop-list, since that won't recursively expand.</text>
  </message>
  <message>
    <ts>2017-05-23T17:44:03.029870</ts>
    <user>U0702F2CE</user>
    <text>right, what &lt;@U3NJS8H7C&gt; said, although I have often wrapped that pattern in a macro called something like `(put-in-parameter id-to-bind expr)`</text>
  </message>
  <message>
    <ts>2017-05-23T17:48:30.102690</ts>
    <user>U07SCV14J</user>
    <text>Yep, that seems to have worked. Thanks &lt;@U0702F2CE&gt; and &lt;@U3NJS8H7C&gt;. I think this `local-expand` abuse is probably not the best solution to what I'm doing, but I admit I am not 100% sure what I'm doing, and it seems to sort of work so far. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-05-23T18:01:08.305054</ts>
    <user>U07SCV14J</user>
    <text>I think, with those changes, I have working typeclasses in Racket. :)</text>
  </message>
  <message>
    <ts>2017-05-24T14:03:52.029529</ts>
    <user>U0G0JDQGZ</user>
    <text>mflatt: I have a process that uses a lot of memory (more than system has) and I would expect it to give me an out of memory error. Instead, I get ```unmap failed: 7fda46834000, 16384, 12 [x100]</text>
  </message>
  <message>
    <ts>2017-05-24T14:03:52.029537</ts>
    <user>U0G0JDQGZ</user>
    <text>mprotect failed: 7fdb09ea0000, 16384, 1, 12</text>
  </message>
  <message>
    <ts>2017-05-24T14:03:52.029541</ts>
    <user>U0G0JDQGZ</user>
    <text>Seg fault (internal error during gc) at 0x7fdb09ea16c0</text>
  </message>
  <message>
    <ts>2017-05-24T14:03:52.029542</ts>
    <user>U0G0JDQGZ</user>
    <text>SIGSEGV SEGV_ACCERR SI_CODE 2 fault on 0x7fdb09ea16c0```</text>
  </message>
  <message>
    <ts>2017-05-24T14:09:27.157988</ts>
    <user>U0G0JDQGZ</user>
    <text>Why does racket not just abort when the unmap/mprotect fail? (As an aside, when I run without JIT, I don't get the segfault, but it appears to run forever.)</text>
  </message>
  <message>
    <ts>2017-05-24T14:10:41.185267</ts>
    <user>U0G0JDQGZ</user>
    <text>If I increase the number of mmaps, with: "sysctl -w vm.max_map_count=131060", then I run out of memory (as I would otherwise expect). [Reading the manual suggest that when you unmap in the middle of a region, then it has to make two, so munmap consumes resources.]</text>
  </message>
  <message>
    <ts>2017-05-24T14:38:23.816388</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U0G0JDQGZ&gt; It would make sense to abort if `munmap` or `mprotect` fails; I guess the current behavior is misguided optimism</text>
  </message>
  <message>
    <ts>2017-05-24T16:49:04.585230</ts>
    <user>U0G0JDQGZ</user>
    <text>mflatt: k, i'll submit a pull request. I think the mprotect can be particular bad because it can cause the write barrier to not install.</text>
  </message>
  <message>
    <ts>2017-05-25T00:56:58.513223</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3NJS8H7C&gt;, &lt;@U0702F2CE&gt;, &lt;@U3NGSC6AF&gt;: Is there a recommended way to include a piece of syntax in the expansion of a macro for the purposes of letting DrRacket pick up origin and disappeared-use/binding properties without actually impacting the program in any other way?</text>
  </message>
  <message>
    <ts>2017-05-25T00:58:14.521755</ts>
    <user>U07SCV14J</user>
    <text>Right now I am producing a bunch of pieces of syntax that are basically nested invocations of `void`, so I end up with something silly like `(let () (void (void) (void (void) (void)))) my-real-expression)`.</text>
  </message>
  <message>
    <ts>2017-05-25T00:58:50.525656</ts>
    <user>U07SCV14J</user>
    <text>But I am not sure if Racket guarantees that those will get optimized away or not.</text>
  </message>
  <message>
    <ts>2017-05-25T06:46:15.950439</ts>
    <user>U3NGSC6AF</user>
    <text>I think they'll be gone. You can use raco decompile to check. </text>
  </message>
  <message>
    <ts>2017-05-25T09:38:29.201770</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SCV14J&gt; usually I use `(quote blah)` but I'm confident `void` works too</text>
  </message>
  <message>
    <ts>2017-05-25T11:27:54.727730</ts>
    <user>U07SCV14J</user>
    <text>ok, thanks. checking with decompile is a good idea.</text>
  </message>
  <message>
    <ts>2017-05-25T16:10:28.025759</ts>
    <user>U3NGSC6AF</user>
    <text>&lt;@U07SCV14J&gt; racket subscribes to the macro writers bill of rights iiuc, so you can consider not eliminating things like that to be bugs, I believe.</text>
  </message>
  <message>
    <ts>2017-05-25T19:23:17.079090</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3NGSC6AF&gt; what do you mean "macro writers bill of rights"? are you using that phrase as a metaphor or is there some document somewhere that says what macro writers can expect racket to handle gracefully when it comes to macro expansion?</text>
  </message>
  <message>
    <ts>2017-05-25T19:23:43.083234</ts>
    <user>U3NGSC6AF</user>
    <text>It is by Kent Dybvig</text>
  </message>
  <message>
    <ts>2017-05-25T19:23:54.085196</ts>
    <user>U07SCV14J</user>
    <text>there's a talk somewhere on youtube about it IIRC</text>
  </message>
  <message>
    <ts>2017-05-25T19:24:07.087301</ts>
    <user>U07SCV14J</user>
    <text>though tbh I remember finding that talk a little vague</text>
  </message>
  <message>
    <ts>2017-05-25T21:46:12.259520</ts>
    <user>U462H29AR</user>
    <text>Somewhat specific starting at 13:00 &lt;https://youtu.be/LIEX3tUliHw?t=13m&gt;</text>
  </message>
  <message>
    <ts>2017-05-26T00:34:54.412179</ts>
    <user>U07SCV14J</user>
    <text>I'm doing a lot of really weird things with syntax, and I have run into a `quote-syntax: cannot use identifier tainted by macro transformation` error, which unfortunately lists `racket/private/stxcase` as its source location. Is there any good way to debug these sorts of errors?</text>
  </message>
  <message>
    <ts>2017-05-26T00:35:12.414151</ts>
    <user>U07SCV14J</user>
    <text>I remember running into them a while back, and I had no idea how to figure out where they were coming from in a large program.</text>
  </message>
  <message>
    <ts>2017-05-26T00:47:49.491324</ts>
    <user>U07SCV14J</user>
    <text>Okay, now I'm even more confused. The error goes away if I replace a use of `syntax` with `quote-syntax`. Does `syntax` do something special I don't know about related to taints/dye packs/other cute names?</text>
  </message>
  <message>
    <ts>2017-05-28T11:46:58.498445</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U3NJS8H7C&gt; user mrm on IRC asked yesterday if there were any explanation of how linklets work. Do you have something within hyperlink's reach ? I had a quick look at your racket7 repo, but didn't see any obvious pointers.</text>
  </message>
  <message>
    <ts>2017-05-28T12:18:16.591690</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U3ZACTKTP&gt; I guess this is as close as it gets to web-accessible: &lt;https://github.com/racket/racket7/blob/master/pkgs/racket-doc/scribblings/reference/linklet.scrbl&gt;</text>
  </message>
  <message>
    <ts>2017-05-28T12:19:49.596113</ts>
    <user>U3ZACTKTP</user>
    <text>&lt;@U3NJS8H7C&gt; Thanks! I had explicitly searched for files containing "linklet" in the repo, and somehow managed to miss that one :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-05-28T12:24:17.608939</ts>
    <user>U08JL5H89</user>
    <text>Does anyone know how to ‘collapse' the padding in two cstructs in the FFI?</text>
  </message>
  <message>
    <ts>2017-05-28T12:24:59.610954</ts>
    <user>U08JL5H89</user>
    <text>Like, I have a struct with a lot of fields, and in the middle, I have for a list size, followed by a pointer to that list.</text>
  </message>
  <message>
    <ts>2017-05-28T12:25:24.612171</ts>
    <user>U08JL5H89</user>
    <text>I want to make a ctype that will give me a safe list given those two values.</text>
  </message>
  <message>
    <ts>2017-05-28T12:26:02.613857</ts>
    <user>U08JL5H89</user>
    <text>And I can do that in another cstruct, but because the padding is now larger, it messes up the offsets for the rest of the struct.</text>
  </message>
  <message>
    <ts>2017-05-28T12:26:30.615100</ts>
    <user>U08JL5H89</user>
    <text>So, is there any way I can insert a cstruct into another cstruct such that it takes the paddings of the element in the inner cstruct?</text>
  </message>
  <message>
    <ts>2017-05-28T12:26:37.615441</ts>
    <user>U08JL5H89</user>
    <text>Either way, thank you.</text>
  </message>
  <message>
    <ts>2017-05-28T12:36:35.643595</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; You be able to achieve the effect you want by declaring `#:alignment`</text>
  </message>
  <message>
    <ts>2017-05-28T12:37:00.644658</ts>
    <user>U08JL5H89</user>
    <text>Okay cool. In which cstruct?</text>
  </message>
  <message>
    <ts>2017-05-28T12:38:17.648289</ts>
    <user>U08JL5H89</user>
    <text>Like, it seems like I'd need to set it in the outer one, and then manually calculate the allignment for the rest of the struct, is tht correct &lt;@U3NJS8H7C&gt; ?</text>
  </message>
  <message>
    <ts>2017-05-28T12:39:38.652149</ts>
    <user>U3NJS8H7C</user>
    <text>I was thinking that you'd set it for the inner one</text>
  </message>
  <message>
    <ts>2017-05-28T12:47:42.674049</ts>
    <user>U08JL5H89</user>
    <text>Oh, okay. In that case the docs kind of confused me what it does. As I thought you attached it to specific fields?</text>
  </message>
  <message>
    <ts>2017-05-28T12:48:16.675601</ts>
    <user>U08JL5H89</user>
    <text>(I mean, I know you can attach it to the whole struct, but in this case, I only want one field to be alligned differently.)</text>
  </message>
  <message>
    <ts>2017-05-28T12:49:10.678081</ts>
    <user>U08JL5H89</user>
    <text>Oh, I see what you mean, `#:alignment 1` worked, thank you &lt;@U3NJS8H7C&gt;</text>
  </message>
  <message>
    <ts>2017-05-28T17:33:04.463167</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Actually, after thinking about it a bit more, I don't think `#:alignment 1` would work, or any ‘alignment' on the inside struct would be good enough.</text>
  </message>
  <message>
    <ts>2017-05-28T17:33:28.464261</ts>
    <user>U08JL5H89</user>
    <text>Because this is going to be context sensitive on the placement of the outside struct and its alignment.</text>
  </message>
  <message>
    <ts>2017-05-28T17:35:27.469491</ts>
    <user>U08JL5H89</user>
    <text>Like, if I had:
```
struct{
char prefix,
char count,
void *data
}
```,
I would want it to be compacted (on 32-bit x86 for simplicity) as:
```
[prefix][count][padding][padding][padding][data][data][data][data]
```</text>
  </message>
  <message>
    <ts>2017-05-28T17:35:56.470651</ts>
    <user>U08JL5H89</user>
    <text>(Where I have specified each byte in `[...]`)</text>
  </message>
  <message>
    <ts>2017-05-28T17:37:04.473474</ts>
    <user>U08JL5H89</user>
    <text>But when I do `#:alignment 1` on the inner struct, the layout is going to be:

```
[prefix][count][data][data][data][data]
```

which removes the padding.</text>
  </message>
  <message>
    <ts>2017-05-28T17:37:09.473663</ts>
    <user>U08JL5H89</user>
    <text>Any thoughts &lt;@U3NJS8H7C&gt; ?</text>
  </message>
  <message>
    <ts>2017-05-28T17:55:29.519362</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; I think you'd have to add the padding back manually in that case. There's not much in between "do the default thing" and "let me control layout completely".</text>
  </message>
  <message>
    <ts>2017-05-28T17:58:04.525656</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Ah fair. Well thank you.</text>
  </message>
  <message>
    <ts>2017-05-29T18:16:18.295135</ts>
    <user>U07SJGB4H</user>
    <text>It looks like the slack irc bridge is down again</text>
  </message>
  <message>
    <ts>2017-05-30T11:17:29.655179</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U0G0JDQGZ&gt; pkgd appears to be down</text>
  </message>
  <message>
    <ts>2017-05-30T16:50:22.505898</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3WFKLLHM&gt;: ping</text>
  </message>
  <message>
    <ts>2017-05-30T17:31:42.225890</ts>
    <user>U0702F2CE</user>
    <text>hi &lt;@U5L5JLWAG&gt;</text>
  </message>
  <message>
    <ts>2017-05-30T19:26:50.890918</ts>
    <user>U5KU1HNKY</user>
    <text>,doc fails with (in a plain repl in OSX's terminal.app): 0:131: execution error: "file:///MyApplications/dev/lisp/Racket/doc/reference/strings.html#(def._((lib._racket%2Fstring..rkt)._string-trim))” doesn't understand the "open location” message. (-1708)</text>
  </message>
  <message>
    <ts>2017-05-30T19:27:01.892530</ts>
    <user>U5KU1HNKY</user>
    <text>running `open $ABOVE_URL` opens just fine</text>
  </message>
  <message>
    <ts>2017-05-30T19:27:13.894493</ts>
    <user>U5KU1HNKY</user>
    <text>(except that it ignores the anchor, but that's separate)</text>
  </message>
  <message>
    <ts>2017-05-30T19:27:24.896119</ts>
    <user>U5KU1HNKY</user>
    <text>any hints? or suggestions where to poke?</text>
  </message>
  <message>
    <ts>2017-05-30T19:29:24.914515</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U5KU1HNKY&gt;: what version of racket is this on?</text>
  </message>
  <message>
    <ts>2017-05-30T19:29:38.916629</ts>
    <user>U5KU1HNKY</user>
    <text>sorry. 6.9 and latest osx too</text>
  </message>
  <message>
    <ts>2017-05-30T19:30:08.921598</ts>
    <user>U07SCV14J</user>
    <text>stable, right? not a snapshot?</text>
  </message>
  <message>
    <ts>2017-05-30T19:30:18.923209</ts>
    <user>U07SCV14J</user>
    <text>I ask because I know that code recently changed, but I don't think it made it into the release</text>
  </message>
  <message>
    <ts>2017-05-30T19:30:23.923948</ts>
    <user>U5KU1HNKY</user>
    <text>correct. I'm not leet :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-05-30T19:30:46.927589</ts>
    <user>U07SCV14J</user>
    <text>maybe try a snapshot and see if you get the same error? the answer would be informative, at least.</text>
  </message>
  <message>
    <ts>2017-05-30T19:34:22.961244</ts>
    <user>U462H29AR</user>
    <text>&lt;@U5KU1HNKY&gt; I see you switched here from `#racket` on this so I will, too. :slightly_smiling_face:  Found the thing this reminded me of: &lt;https://groups.google.com/d/msg/racket-users/Jw3jMB2viCk/ggJbXHu5BQAJ&gt;</text>
  </message>
  <message>
    <ts>2017-05-30T19:35:47.973967</ts>
    <user>U5KU1HNKY</user>
    <text>hrm… left side of nightlies (6.9.0.4) or right side (current)?</text>
  </message>
  <message>
    <ts>2017-05-30T19:36:35.981095</ts>
    <user>U5KU1HNKY</user>
    <text>and wow… can I check this with minimal? 90% smaller and I'm in a cafe</text>
  </message>
  <message>
    <ts>2017-05-30T19:38:57.002067</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U5KU1HNKY&gt;: you can probably check it with minimal, but you'll want to use `racket/help` instead of `xrepl`, since the latter is not shipped with minimal racket, and it ends up pulling in a lot of dependencies</text>
  </message>
  <message>
    <ts>2017-05-30T19:39:13.004478</ts>
    <user>U07SCV14J</user>
    <text>(see &lt;https://github.com/racket/racket/issues/1465&gt; )</text>
  </message>
  <message>
    <ts>2017-05-30T19:40:32.016227</ts>
    <user>U07SCV14J</user>
    <text>also, 6.9.0.4 and current are the same version, the latter is just a stable alias for things like CI scripts</text>
  </message>
  <message>
    <ts>2017-05-30T19:57:51.165626</ts>
    <user>U5KU1HNKY</user>
    <text>is there a way to isolate this? in ruby we can set GEM_HOME to create a temporary repository that you can later throw away</text>
  </message>
  <message>
    <ts>2017-05-30T19:58:27.170753</ts>
    <user>U5KU1HNKY</user>
    <text>moot point:

```
10058 % ./bin/raco pkg install --dry-run racket-help
Resolving "racket-help" via &lt;https://www.cs.utah.edu/plt/snapshots/20170527-7f1ab90/catalog/&gt;
tcp-connect: connection failed
  detail: host not found
  address: &lt;http://www.cs.utah.edu|www.cs.utah.edu&gt;
  port number: 443
  step: 1
  system error: nodename nor servname provided, or not known; errno=8
```</text>
  </message>
  <message>
    <ts>2017-05-30T19:58:49.173902</ts>
    <user>U07SCV14J</user>
    <text>I mean the module `racket/help`. it's in the `base` package; you won't have to install it.</text>
  </message>
  <message>
    <ts>2017-05-30T19:58:59.175297</ts>
    <user>U07SCV14J</user>
    <text>also, the snapshot should maintain its own set of packages.</text>
  </message>
  <message>
    <ts>2017-05-30T20:01:57.203961</ts>
    <user>U5KU1HNKY</user>
    <text>I can't figure this out… ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-05-30T20:02:01.204549</ts>
    <user>U5KU1HNKY</user>
    <text>```
&amp;gt; (help string-trim)
standard-module-name-resolver: collection not found
  for module path: help/help-utils
```</text>
  </message>
  <message>
    <ts>2017-05-30T20:02:40.210543</ts>
    <user>U07SCV14J</user>
    <text>oh, right. apparently that requires the `racket-doc` package to be installed, which admittedly makes sense.</text>
  </message>
  <message>
    <ts>2017-05-30T20:02:46.211376</ts>
    <user>U07SCV14J</user>
    <text>(since it's opening the docs)</text>
  </message>
  <message>
    <ts>2017-05-30T20:02:52.212219</ts>
    <user>U5KU1HNKY</user>
    <text>yeah. as far as I can tell, minimal is too minimal for this :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-05-30T20:02:59.213338</ts>
    <user>U07SCV14J</user>
    <text>but it's `racket-doc` that will bring in the whole universe of dependencies. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-05-30T20:03:43.219818</ts>
    <user>U07SCV14J</user>
    <text>since `racket-doc` currently links to other docs, including the web server docs… which means you'll end up installing the web server (and a whole bunch of other packages) if you "just” install the docs.</text>
  </message>
  <message>
    <ts>2017-05-30T20:05:52.238255</ts>
    <user>U5KU1HNKY</user>
    <text>yeah… I'll just download the minimal+gui+docs package. it's 80mb (instead of 9!)… it'll just be slower on this cafe network</text>
  </message>
  <message>
    <ts>2017-05-30T20:06:47.246104</ts>
    <user>U07SCV14J</user>
    <text>that's probably the safest bet, yes</text>
  </message>
  <message>
    <ts>2017-05-30T20:10:38.278129</ts>
    <user>U5KU1HNKY</user>
    <text>maybe it should have a more descriptive name than "gui-6.9.0.4-x86_64-macosx.dmg” … maybe "racket” should be in there somewhere. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-05-30T20:10:58.280906</ts>
    <user>U5KU1HNKY</user>
    <text>compared to: min-racket-6.9.0.4-x86_64-macosx.dmg</text>
  </message>
  <message>
    <ts>2017-05-30T20:15:07.314363</ts>
    <user>U5KU1HNKY</user>
    <text>ok. confirmed that on 6.9.0.4 that `,doc` is fixed. I wonder if I should steal the patch and try to compile it into my current version</text>
  </message>
  <message>
    <ts>2017-05-30T20:17:22.332532</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U5KU1HNKY&gt;: Make sure you try running the snapshot from outside of your home directory (that is, the snapshot distribution itself should be placed outside your home directory). IIUC, the issues around that feature stem from very odd macOS behavior around opening file URLs in/outside of your home directory.</text>
  </message>
  <message>
    <ts>2017-05-30T20:17:47.335919</ts>
    <user>U07SCV14J</user>
    <text>If you had the snapshot in your home directory and the release outside of it, you might get false positives.</text>
  </message>
  <message>
    <ts>2017-05-30T20:17:54.336776</ts>
    <user>U5KU1HNKY</user>
    <text>I ran it straight out of the disk image</text>
  </message>
  <message>
    <ts>2017-05-30T20:19:01.345593</ts>
    <user>U07SCV14J</user>
    <text>that's probably safe then</text>
  </message>
  <message>
    <ts>2017-05-30T20:27:07.410922</ts>
    <user>U5KU1HNKY</user>
    <text>is there a bar-chart plot type somewhere? I'm trying to hack it into discrete-histogram and it's screwing up w/ my x-axis.</text>
  </message>
  <message>
    <ts>2017-05-30T20:29:02.426285</ts>
    <user>U5KU1HNKY</user>
    <text>ah. it ignores negative values even if you set `y-min`</text>
  </message>
  <message>
    <ts>2017-05-30T22:40:02.398868</ts>
    <user>U4L6H669J</user>
    <text>considering the irc bridge is down, I'll ask here</text>
  </message>
  <message>
    <ts>2017-05-30T22:40:32.402507</ts>
    <user>U4L6H669J</user>
    <text>how can I custom print objects? the reference says printable&amp;lt;%&amp;gt; should be implemented, and that it seems to be a wrapper around prop:custom-write</text>
  </message>
  <message>
    <ts>2017-05-30T22:40:44.403841</ts>
    <user>U4L6H669J</user>
    <text>&lt;https://docs.racket-lang.org/reference/objectprinting.html&gt;</text>
  </message>
  <message>
    <ts>2017-05-30T22:41:04.406060</ts>
    <user>U4L6H669J</user>
    <text>but the docs for prop:custom-write say it's deprecated in favor of gen:custom-write</text>
  </message>
  <message>
    <ts>2017-05-30T22:42:39.416713</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U4L6H669J&gt;: `gen:custom-write` is for structs; it still uses `prop:custom-write` under the hood. if you're using `racket/class`, I'm pretty sure `printable&amp;lt;%&amp;gt;` is the right thing to implement.</text>
  </message>
  <message>
    <ts>2017-05-30T22:43:18.420828</ts>
    <user>U4L6H669J</user>
    <text>the docs are confusing then</text>
  </message>
  <message>
    <ts>2017-05-30T22:43:55.424774</ts>
    <user>U07SCV14J</user>
    <text>my guess is that the `printable&amp;lt;%&amp;gt;` docs weren't updated when `gen:custom-write` was added, since the latter is (I believe) a relatively recent addition.</text>
  </message>
  <message>
    <ts>2017-05-30T22:57:29.514785</ts>
    <user>U4L6H669J</user>
    <text>yes, I see `printable&amp;lt;%&amp;gt;` is still defined in terms of `prop:custom-write`</text>
  </message>
  <message>
    <ts>2017-05-30T23:00:41.537707</ts>
    <user>U07SCV14J</user>
    <text>as it probably ought to be. I somewhat doubt `prop:custom-write` itself is really deprecated; I think using it directly with `struct` via a `#:property` clause probably is.</text>
  </message>
  <message>
    <ts>2017-05-31T09:53:50.938054</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SCV14J&gt; I think it really is deprecated in the sense that there's no need to ever use it yourself directly</text>
  </message>
  <message>
    <ts>2017-05-31T13:47:05.295844</ts>
    <user>U4L6H669J</user>
    <text>My first thought was that the documentation is outdated, so maybe a different wording would be better</text>
  </message>
  <message>
    <ts>2017-05-31T21:00:55.111812</ts>
    <user>U0G0JDQGZ</user>
    <text>mflatt: can you take a look at this and tell me if there's a work-around of if I need to make `make-import` different? &lt;https://gist.github.com/jeapostrophe/ab3e1837bf6c7627fe3b07555ba49bea&gt;</text>
  </message>
  <message>
    <ts>2017-06-01T12:00:15.437988</ts>
    <user>U0G0JDQGZ</user>
    <text>mflatt: looks like the kernel error is that resolve-module-path-index returns `'#%kernel` rather than `''#%kernel`</text>
  </message>
  <message>
    <ts>2017-06-01T12:01:07.460067</ts>
    <user>U0G0JDQGZ</user>
    <text>but that violates the return contract</text>
  </message>
  <message>
    <ts>2017-06-01T14:19:28.640007</ts>
    <user>U07SJGB4H</user>
    <text>IRC bridge is down again</text>
  </message>
  <message>
    <ts>2017-06-01T19:15:46.837463</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U0G0JDQGZ&gt; `'#%kernel` seems like a fit for the contract of `resolve-module-path-index`, which promises to return a path or a symbol or an encoding of a submodule reference; possibly, you want `module-path-index-resolve`, or maybe you want to use `collapse-module-path-index`</text>
  </message>
  <message>
    <ts>2017-06-01T20:59:32.698418</ts>
    <user>U0G0JDQGZ</user>
    <text>mflatt: `collapse-module-path-index` solves the #%kernel problem, but not the way to figure out what `self` is</text>
  </message>
  <message>
    <ts>2017-06-01T21:02:30.724191</ts>
    <user>U3NJS8H7C</user>
    <text>Normally, you'd do that with `variable-reference-&amp;gt;module-path-index`, but I don't see a way to use that for a require transfomer</text>
  </message>
  <message>
    <ts>2017-06-01T21:03:47.734178</ts>
    <user>U3NJS8H7C</user>
    <text>Or does the single-argument form of `collapse-module-path-index` work in this case?</text>
  </message>
  <message>
    <ts>2017-06-01T21:04:18.738184</ts>
    <user>U3NJS8H7C</user>
    <text>Or maybe you're looking for `(module-path-index-join #f #f)` as the "self" index</text>
  </message>
  <message>
    <ts>2017-06-01T21:06:40.756943</ts>
    <user>U0G0JDQGZ</user>
    <text>I just updated the example and I get collapse-m-p-i to violate its own contract --- &lt;https://gist.github.com/jeapostrophe/ab3e1837bf6c7627fe3b07555ba49bea&gt;</text>
  </message>
  <message>
    <ts>2017-06-01T21:06:52.758389</ts>
    <user>U0G0JDQGZ</user>
    <text>i'll try the self idea</text>
  </message>
  <message>
    <ts>2017-06-01T21:09:55.780568</ts>
    <user>U0G0JDQGZ</user>
    <text>ya, i don't know how to make variable-reference-&amp;gt;module-path-index useful</text>
  </message>
  <message>
    <ts>2017-06-01T21:20:27.857324</ts>
    <user>U3NJS8H7C</user>
    <text>I think the contract of `collapse-module-path-index` with a single argument will have to be changed to allow a `#f` result if the given module path index is a "self" index. You can work around the bug by checking specifically for that before calling `collapse-module-path-index`</text>
  </message>
  <message>
    <ts>2017-06-01T21:22:59.875995</ts>
    <user>U0G0JDQGZ</user>
    <text>it turns out that I can also pass in the thunk to lookup self and throw an error there</text>
  </message>
  <message>
    <ts>2017-06-01T21:23:31.879780</ts>
    <user>U0G0JDQGZ</user>
    <text>no idea on how to get self though? (thinking ahead: suppose I could, I assume that `make-import` will fail if it tries to import from itself?)</text>
  </message>
  <message>
    <ts>2017-06-01T21:24:33.887016</ts>
    <user>U0G0JDQGZ</user>
    <text>I assume it's clear what this transformer does? I'm pretty happy with it generally</text>
  </message>
  <message>
    <ts>2017-06-01T21:24:38.887604</ts>
    <user>U3NJS8H7C</user>
    <text>Right - it makes no sense for a module to import from itself, and it's not expressible as an `import` struct</text>
  </message>
  <message>
    <ts>2017-06-01T21:25:00.890134</ts>
    <user>U3NJS8H7C</user>
    <text>No, I haven't yet tried to figure out what the transformer does</text>
  </message>
  <message>
    <ts>2017-06-01T21:25:35.894457</ts>
    <user>U0G0JDQGZ</user>
    <text>Ah, if you look down at the example, `(default-in m [id def])` imports `id` from `m` if `m` provides it OR it binds `id` to `def`</text>
  </message>
  <message>
    <ts>2017-06-01T21:25:55.896698</ts>
    <user>U0G0JDQGZ</user>
    <text>right now it works assuming that `def` is actually imported from somewhere</text>
  </message>
  <message>
    <ts>2017-06-01T21:26:11.898539</ts>
    <user>U0G0JDQGZ</user>
    <text>but it would be nice if it didn't have to be and could be locally defined</text>
  </message>
  <message>
    <ts>2017-06-01T21:29:14.920343</ts>
    <user>U0G0JDQGZ</user>
    <text>(remix makes its so that when you require a module `m`, you automatically put `(m:#%required)` in your module, so it can mess with your environment)</text>
  </message>
  <message>
    <ts>2017-06-01T21:32:31.945094</ts>
    <user>U3NJS8H7C</user>
    <text>You can use `syntax-local-lift-module-end-declaration` during a require transformer, if that helps</text>
  </message>
  <message>
    <ts>2017-06-01T21:33:09.949801</ts>
    <user>U0G0JDQGZ</user>
    <text>I just tried that :) for some reason I thought that wasn't allowed</text>
  </message>
  <message>
    <ts>2017-06-01T21:33:14.950440</ts>
    <user>U0G0JDQGZ</user>
    <text>Thanks!</text>
  </message>
  <message>
    <ts>2017-06-01T21:35:11.964659</ts>
    <user>U0G0JDQGZ</user>
    <text>I'll just change `collapse-...`'s contract to allow #f</text>
  </message>
  <message>
    <ts>2017-06-01T21:35:50.969336</ts>
    <user>U3NJS8H7C</user>
    <text>I'll push a repair soon</text>
  </message>
  <message>
    <ts>2017-06-01T21:36:04.970914</ts>
    <user>U0G0JDQGZ</user>
    <text>Ok, I'll wait</text>
  </message>
  <message>
    <ts>2017-06-01T21:36:06.971219</ts>
    <user>U3NJS8H7C</user>
    <text>(will need to rebuild, since I'm days behind)</text>
  </message>
  <message>
    <ts>2017-06-01T21:36:15.972268</ts>
    <user>U0G0JDQGZ</user>
    <text>np</text>
  </message>
  <message>
    <ts>2017-06-02T06:14:25.558766</ts>
    <user>U3VT0L7C5</user>
    <text>PLaneT seems to be down - index page works fine but browsing to any package results in proxy error</text>
  </message>
  <message>
    <ts>2017-06-03T20:49:56.904131</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Do you have any thoughts about: &lt;https://github.com/racket/racket/pull/1713&gt;</text>
  </message>
  <message>
    <ts>2017-06-04T06:09:45.121765</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; I vaguely remembered there are issues with calling `atexit()` directly, and I found the relevant code. See the PR comment.
Although no one is likely to try to compile Racket on SunOS 4 where `atexit()` is unavailable, the potential indirection through `replacement_at_exit` is important for Windows due to libc sharing (or not) in DLLs.</text>
  </message>
  <message>
    <ts>2017-06-05T17:21:42.517624</ts>
    <user>U07SJGB4H</user>
    <text>anyone available to review &lt;https://github.com/racket/rackunit/pull/27&gt;?</text>
  </message>
  <message>
    <ts>2017-06-05T17:32:54.708687</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U07SJGB4H&gt;: I'd ping ryanc.</text>
  </message>
  <message>
    <ts>2017-06-05T17:37:15.779353</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3NP867S6&gt; here, email, or github?</text>
  </message>
  <message>
    <ts>2017-06-05T17:38:01.790793</ts>
    <user>U3NP867S6</user>
    <text>Github, I'd say.</text>
  </message>
  <message>
    <ts>2017-06-05T19:20:29.057706</ts>
    <user>U3QF0EM0E</user>
    <text>does `racket/contract` have a direct analog to Typed Racket's `Rec`?
(seems like `recursive-contract` has to be used with a `define`)</text>
  </message>
  <message>
    <ts>2017-06-05T19:20:57.062124</ts>
    <user>U3QF0EM0E</user>
    <text>I want something like `(rec/c sexp (or/c symbol? (listof sexp)))` ... but this is just an example, my actual contract isn't just `(treeof symbol?)`</text>
  </message>
  <message>
    <ts>2017-06-05T19:40:50.248551</ts>
    <user>U0L0F9F2Q</user>
    <text>(define-syntax (rec/c stx) (syntax-parse stx [(_ name:id ctc) #‘(let ([name (let-syntax ([name (recursive-contract name)])]) name)]))</text>
  </message>
  <message>
    <ts>2017-06-05T19:40:52.248990</ts>
    <user>U0L0F9F2Q</user>
    <text>or there-abouts?</text>
  </message>
  <message>
    <ts>2017-06-05T19:41:08.251118</ts>
    <user>U0L0F9F2Q</user>
    <text>not sure if my shadowing works on not… my need to make a transformer…</text>
  </message>
  <message>
    <ts>2017-06-05T19:47:43.308696</ts>
    <user>U3QF0EM0E</user>
    <text>WHOA. I did not realize you could do `(contract-out (f (let ([x ....]) ....)))`</text>
  </message>
  <message>
    <ts>2017-06-05T20:00:16.419810</ts>
    <user>U07SCV14J</user>
    <text>contract expressions are just that—expressions :)</text>
  </message>
  <message>
    <ts>2017-06-05T21:41:53.199560</ts>
    <user>U0702F2CE</user>
    <text>You probably need a letrec there</text>
  </message>
  <message>
    <ts>2017-06-06T09:32:41.395154</ts>
    <user>U3NGSC6AF</user>
    <text>&lt;@U3QF0EM0E&gt; check out section 2.4 of the 2002 icfp contracts paper</text>
  </message>
  <message>
    <ts>2017-06-08T17:38:11.017641</ts>
    <user>U3PRC73C2</user>
    <text>is there a danger of the con selling out?</text>
  </message>
  <message>
    <ts>2017-06-08T17:39:55.044165</ts>
    <user>U0702F2CE</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-06-08T17:50:01.197685</ts>
    <user>U462H29AR</user>
    <text>but people should register early to ensure a seat in the main auditorium instead of getting bumped to the overflow venue</text>
  </message>
  <message>
    <ts>2017-06-08T17:54:39.265698</ts>
    <user>U3PRC73C2</user>
    <text>thanks, &lt;@U462H29AR&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-08T17:55:10.273166</ts>
    <user>U3PRC73C2</user>
    <text>&lt;@U0702F2CE&gt; that was my thinking. likely have to wait until august to see if i'm making the trip from my new home in pdx.</text>
  </message>
  <message>
    <ts>2017-06-10T20:44:55.391237</ts>
    <user>U5KU1HNKY</user>
    <text>anyone know how the &lt;#C3PCSK2DN|mailing-lists&gt; channel works? I ‘d like to set up a similar channel in our group for our mailing list</text>
  </message>
  <message>
    <ts>2017-06-11T02:36:25.119618</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; What do you think of adding a `(check-fail &amp;lt;some-check-expr&amp;gt;)` check to rackunit? So `(check-fail (check-equal? 1 1))` would be a failing test and `(check-fail (check-equal? 1 2))` would be a passing one.</text>
  </message>
  <message>
    <ts>2017-06-11T02:47:34.140873</ts>
    <user>U3QF0EM0E</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-06-11T02:47:52.141370</ts>
    <user>U3QF0EM0E</user>
    <text>I think it makes more sense to change `fail-check`</text>
  </message>
  <message>
    <ts>2017-06-11T02:48:35.142596</ts>
    <user>U07SJGB4H</user>
    <text>in what way?</text>
  </message>
  <message>
    <ts>2017-06-11T02:49:47.144807</ts>
    <user>U07SJGB4H</user>
    <text>suppose I have a custom check `check-foo`, how should I test it ideally?</text>
  </message>
  <message>
    <ts>2017-06-11T02:50:38.146566</ts>
    <user>U07SJGB4H</user>
    <text>`check-fail` plus just using `check-foo` directly seems like it'd cover testing that the check passes and fails at the right times, but it wouldn't let you test that the check adds the right check-info</text>
  </message>
  <message>
    <ts>2017-06-11T03:07:04.180535</ts>
    <user>U3QF0EM0E</user>
    <text>I thought you just wanted this for `define-check`, and the trouble with `define-check` is that when it raises an exception it always says 1 test failed</text>
  </message>
  <message>
    <ts>2017-06-11T03:07:31.181330</ts>
    <user>U3QF0EM0E</user>
    <text>so changing `fail-check` to get rid of the "1 failure" would fix that issue</text>
  </message>
  <message>
    <ts>2017-06-11T03:08:07.182429</ts>
    <user>U3QF0EM0E</user>
    <text>I don't really understand the second thing you last said ---</text>
  </message>
  <message>
    <ts>2017-06-11T03:08:22.182896</ts>
    <user>U3QF0EM0E</user>
    <text>is that a problem with `(check-fail (my-check ....))` ?</text>
  </message>
  <message>
    <ts>2017-06-11T03:08:59.184134</ts>
    <user>U07SJGB4H</user>
    <text>yes, I meant it's a problem with the hypothetical `(check-fail (my-check ....))` idea</text>
  </message>
  <message>
    <ts>2017-06-11T03:09:10.184487</ts>
    <user>U07SJGB4H</user>
    <text>the high level thing I want is a way to test custom checks so I know they pass when I expect, fail when I expect, and add whatever specialized check-info I expect</text>
  </message>
  <message>
    <ts>2017-06-11T03:09:47.185797</ts>
    <user>U3QF0EM0E</user>
    <text>ok, yes</text>
  </message>
  <message>
    <ts>2017-06-11T03:09:49.185850</ts>
    <user>U07SJGB4H</user>
    <text>it's easy enough to test that a custom check passes when you expect; just write some tests using it</text>
  </message>
  <message>
    <ts>2017-06-11T03:10:13.186944</ts>
    <user>U07SJGB4H</user>
    <text>the other two things I have no idea how to do reasonably and I think it would be useful for rackunit to provide ways to do that</text>
  </message>
  <message>
    <ts>2017-06-11T03:20:06.208510</ts>
    <user>U07SJGB4H</user>
    <text>a neat side effect might be that rackunit can simplify its own test suite</text>
  </message>
  <message>
    <ts>2017-06-11T03:20:30.209469</ts>
    <user>U3QF0EM0E</user>
    <text>haha yeah, I was just wondering what rackunit does</text>
  </message>
  <message>
    <ts>2017-06-11T03:21:07.210788</ts>
    <user>U07SJGB4H</user>
    <text>some of the tests rely on calling a module with failing tests in a separate namespace and checking the stderr output</text>
  </message>
  <message>
    <ts>2017-06-11T03:21:26.211521</ts>
    <user>U07SJGB4H</user>
    <text>that... I would like to avoid :p</text>
  </message>
  <message>
    <ts>2017-06-11T17:40:04.644982</ts>
    <user>U3QF0EM0E</user>
    <text>&lt;@U0702F2CE&gt; &lt;@U3PUZ2Z5K&gt;  I'm trying to work on types for immutable data and I have a problem</text>
  </message>
  <message>
    <ts>2017-06-11T17:40:43.646995</ts>
    <user>U3QF0EM0E</user>
    <text>I just added some cases to `types/subtype.rkt` and am getting "unbound identifier `uid:Immutable-Hashtable:`"</text>
  </message>
  <message>
    <ts>2017-06-11T17:41:16.648699</ts>
    <user>U3QF0EM0E</user>
    <text>I'm trying to read the source, but I haven't found where the `uid:` is supposed to get defined</text>
  </message>
  <message>
    <ts>2017-06-11T17:42:07.651272</ts>
    <user>U3QF0EM0E</user>
    <text>(I have a `def-structural Immutable-Hashtable ....`with its own mask)</text>
  </message>
  <message>
    <ts>2017-06-11T17:48:51.672785</ts>
    <user>U3QF0EM0E</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-06-11T17:49:10.673701</ts>
    <user>U3QF0EM0E</user>
    <text>I had written `(case: Immutable-Hashtable: (Immutable-Hashtable: k v))`</text>
  </message>
  <message>
    <ts>2017-06-11T17:49:23.674398</ts>
    <user>U3QF0EM0E</user>
    <text>but it should be `(case: Immutable-Hashtable (Immutable-Hashtable: k v))`</text>
  </message>
  <message>
    <ts>2017-06-11T18:15:10.756218</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; I've got an experimental change to rackunit that extracts the `rackunit/text-ui` code into a separate package, do you think that's a reasonable idea?</text>
  </message>
  <message>
    <ts>2017-06-11T18:17:45.764249</ts>
    <user>U3QF0EM0E</user>
    <text>I'm not sure</text>
  </message>
  <message>
    <ts>2017-06-11T18:18:07.765510</ts>
    <user>U3QF0EM0E</user>
    <text>I think that should be OK to do ... but I also think that shouldn't be necessary</text>
  </message>
  <message>
    <ts>2017-06-11T18:18:22.766315</ts>
    <user>U3QF0EM0E</user>
    <text>because (I hope) nothing in rackunit depends on `rackunit/text-ui`</text>
  </message>
  <message>
    <ts>2017-06-11T18:18:29.766638</ts>
    <user>U3QF0EM0E</user>
    <text>why do you want the separate package?</text>
  </message>
  <message>
    <ts>2017-06-11T18:18:50.767711</ts>
    <user>U3QF0EM0E</user>
    <text>(I'm guessing its to make rackunit more testable, I just don't see how, yet)</text>
  </message>
  <message>
    <ts>2017-06-11T18:19:22.769387</ts>
    <user>U07SJGB4H</user>
    <text>I'm trying to figure out what parts of `run-tests` need to be changed to make it easier for me to implement things like &lt;https://github.com/racket/rackunit/issues/10&gt;</text>
  </message>
  <message>
    <ts>2017-06-11T18:20:02.771386</ts>
    <user>U07SJGB4H</user>
    <text>because it currently uses a lot of internal details of the error message format and duplicates a bunch of logic in `display-test-failure/error` but with slight variations</text>
  </message>
  <message>
    <ts>2017-06-11T18:20:33.773118</ts>
    <user>U07SJGB4H</user>
    <text>so the separate package is an attempt to figure out what the hard boundary between `run-tests` and the core of rackunit is</text>
  </message>
  <message>
    <ts>2017-06-11T18:20:57.774403</ts>
    <user>U3QF0EM0E</user>
    <text>ok I like all of this</text>
  </message>
  <message>
    <ts>2017-06-11T18:21:12.775158</ts>
    <user>U07SJGB4H</user>
    <text>from reading the commit history I think Robby wanted to move towards making `run-tests` behave a lot more like `display-test-failure/error`</text>
  </message>
  <message>
    <ts>2017-06-11T18:22:53.780019</ts>
    <user>U07SJGB4H</user>
    <text>&lt;https://github.com/racket/rackunit/pull/34&gt; is slightly related as well</text>
  </message>
  <message>
    <ts>2017-06-11T20:46:48.221287</ts>
    <user>U3QF0EM0E</user>
    <text>&lt;@U0702F2CE&gt; &lt;@U3PUZ2Z5K&gt;  another question, I'm having trouble with `base-env/base-types.rkt`</text>
  </message>
  <message>
    <ts>2017-06-11T20:48:11.226217</ts>
    <user>U3QF0EM0E</user>
    <text>I'm able to do things like `(def-structural T (args ....))`, then apply T like a function in `base-env/base-types.rkt` (I mean, I can write `(T arg ...)`)</text>
  </message>
  <message>
    <ts>2017-06-11T20:48:13.226356</ts>
    <user>U3QF0EM0E</user>
    <text>but</text>
  </message>
  <message>
    <ts>2017-06-11T20:48:57.228972</ts>
    <user>U3QF0EM0E</user>
    <text>I want to define `-HT` as a name for `(-poly (a b) (Un (T1 a b) (T2 a b)))` (for some `T1` `T2`)</text>
  </message>
  <message>
    <ts>2017-06-11T20:49:30.230858</ts>
    <user>U3QF0EM0E</user>
    <text>so I tried `(define -HT (-poly ....))` and then I can't write `(-HT a b)` later in `base-env/base-types.rkt`</text>
  </message>
  <message>
    <ts>2017-06-11T20:49:51.232183</ts>
    <user>U3QF0EM0E</user>
    <text>I guess the question is, how do I define a polymorphic type?</text>
  </message>
  <message>
    <ts>2017-06-11T20:49:58.232551</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3QF0EM0E&gt; you seem to be confusing polymorphic types and functions</text>
  </message>
  <message>
    <ts>2017-06-11T20:50:18.233903</ts>
    <user>U3QF0EM0E</user>
    <text>should I do `(define -HT (lambda (a b) (-poly ....)))` ?</text>
  </message>
  <message>
    <ts>2017-06-11T20:50:20.234016</ts>
    <user>U0702F2CE</user>
    <text>TR makes them seem like the same thing in the surface syntax</text>
  </message>
  <message>
    <ts>2017-06-11T20:50:44.235656</ts>
    <user>U0702F2CE</user>
    <text>But the first thing you wrote was a polymorphic type, and the second is a function</text>
  </message>
  <message>
    <ts>2017-06-11T20:51:04.237066</ts>
    <user>U0702F2CE</user>
    <text>It depends what you want</text>
  </message>
  <message>
    <ts>2017-06-11T20:51:14.237670</ts>
    <user>U3QF0EM0E</user>
    <text>`(-poly ...)` is a polymorphic type, `(lambda (a b) ...` is a function? ok that makes sense</text>
  </message>
  <message>
    <ts>2017-06-11T20:51:21.238085</ts>
    <user>U0702F2CE</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-11T20:51:48.239709</ts>
    <user>U0702F2CE</user>
    <text>-poly is just a shorthand for a type constructor</text>
  </message>
  <message>
    <ts>2017-06-11T20:52:18.241529</ts>
    <user>U3QF0EM0E</user>
    <text>so I guess I have to read `def-structural` to see what its making?</text>
  </message>
  <message>
    <ts>2017-06-11T20:52:40.242882</ts>
    <user>U0702F2CE</user>
    <text>It's making types and type constructors</text>
  </message>
  <message>
    <ts>2017-06-11T20:56:41.258531</ts>
    <user>U3QF0EM0E</user>
    <text>is there a type constructor for `-poly`?</text>
  </message>
  <message>
    <ts>2017-06-11T20:59:13.268583</ts>
    <user>U0702F2CE</user>
    <text>There's several levels of abstraction there to manage the binding</text>
  </message>
  <message>
    <ts>2017-06-11T20:59:33.270039</ts>
    <user>U0702F2CE</user>
    <text>But -Poly is the function</text>
  </message>
  <message>
    <ts>2017-06-11T20:59:53.271553</ts>
    <user>U0702F2CE</user>
    <text>I don't recommend using it directly though</text>
  </message>
  <message>
    <ts>2017-06-11T21:11:12.320310</ts>
    <user>U3NGSC6AF</user>
    <text>&lt;@U07SJGB4H&gt; I found that rackunit's output when tests aren't in a test suite to be hard to read and so I tried to clean things up to make that usecase a little bit nicer.</text>
  </message>
  <message>
    <ts>2017-06-12T15:57:11.393890</ts>
    <user>U5KU1HNKY</user>
    <text>what was yesterday's drracket logo about?</text>
  </message>
  <message>
    <ts>2017-06-12T15:58:15.415697</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U5KU1HNKY&gt; what did it look like?</text>
  </message>
  <message>
    <ts>2017-06-12T15:58:31.421119</ts>
    <user>U07SJGB4H</user>
    <text>Turtle with red and blue shell</text>
  </message>
  <message>
    <ts>2017-06-12T15:59:07.433059</ts>
    <user>U0702F2CE</user>
    <text>&lt;https://en.wikipedia.org/wiki/Kamehameha_Day&gt;</text>
  </message>
  <message>
    <ts>2017-06-12T16:00:10.455279</ts>
    <user>U5KU1HNKY</user>
    <text>nice</text>
  </message>
  <message>
    <ts>2017-06-12T16:00:11.455734</ts>
    <user>U5KU1HNKY</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-06-12T16:39:50.250764</ts>
    <user>U3QF0EM0E</user>
    <text>lol, I thought June 11 was just an important day for `#lang honu` &lt;https://www.cs.utah.edu/~rafkind/papers/honu-2012.pdf&gt;</text>
  </message>
  <message>
    <ts>2017-06-12T18:37:15.098527</ts>
    <user>U5M3B8HRV</user>
    <text>I'm not quite understanding the documentation on this &lt;http://docs.racket-lang.org/draw/bitmap_.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-12T18:37:45.104093</ts>
    <user>U5M3B8HRV</user>
    <text>How do I set individual pixels to be a certain color in a bitmap?</text>
  </message>
  <message>
    <ts>2017-06-12T18:40:11.130287</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U5M3B8HRV&gt;: `set-argb-pixels`, I think</text>
  </message>
  <message>
    <ts>2017-06-12T18:41:48.147710</ts>
    <user>U5M3B8HRV</user>
    <text>What's the 'pixels' argument?</text>
  </message>
  <message>
    <ts>2017-06-12T18:44:03.172206</ts>
    <user>U07SCV14J</user>
    <text>it's documented here: &lt;http://docs.racket-lang.org/draw/bitmap-dc_.html#%28meth._%28%28%28lib._racket%2Fdraw..rkt%29._bitmap-dc~25%29._set-argb-pixels%29%29&gt;</text>
  </message>
  <message>
    <ts>2017-06-12T18:45:43.190299</ts>
    <user>U5M3B8HRV</user>
    <text>I saw the documentation for it. I don't understand what it's saying.</text>
  </message>
  <message>
    <ts>2017-06-12T18:46:44.201036</ts>
    <user>U3ZV4UG3T</user>
    <text>four consecutive bytes represent a single pixel: (alpha, red, green, blue)</text>
  </message>
  <message>
    <ts>2017-06-12T18:46:50.201926</ts>
    <user>U07SCV14J</user>
    <text>if you want to set a single pixel, pass `1` for `width` and `height`, and provide a 4-byte byte array</text>
  </message>
  <message>
    <ts>2017-06-12T18:47:58.214245</ts>
    <user>U5M3B8HRV</user>
    <text>Ah good, width and height you color a grid of pixels at the same time?</text>
  </message>
  <message>
    <ts>2017-06-12T18:48:11.216512</ts>
    <user>U5M3B8HRV</user>
    <text>&lt;@U3ZV4UG3T&gt; Thanks</text>
  </message>
  <message>
    <ts>2017-06-12T18:48:45.222670</ts>
    <user>U3ZV4UG3T</user>
    <text>you can set a block of pixels all at once, yes, starting at `(x, y)`</text>
  </message>
  <message>
    <ts>2017-06-12T18:49:29.230680</ts>
    <user>U5M3B8HRV</user>
    <text>The coordinates are from the upper left corner, right?</text>
  </message>
  <message>
    <ts>2017-06-12T18:49:57.235684</ts>
    <user>U07SCV14J</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-12T18:49:58.235837</ts>
    <user>U3ZV4UG3T</user>
    <text>says "The pixels are in row-major order, left to right then top to bottom."</text>
  </message>
  <message>
    <ts>2017-06-12T18:50:01.236265</ts>
    <user>U3ZV4UG3T</user>
    <text>so yep</text>
  </message>
  <message>
    <ts>2017-06-12T18:50:44.244475</ts>
    <user>U5M3B8HRV</user>
    <text>Thanks.</text>
  </message>
  <message>
    <ts>2017-06-12T18:56:16.302877</ts>
    <user>U5M3B8HRV</user>
    <text>I wrote a quick and dirty thing with pict a couple weeks ago to provide visualizations of some experimental math thing for some colleges, and now they kind of are depending on them a bit more regularly, so I'm trying to make it more efficient. I haven't done much with graphics or pictures prior to this, so all the stuff about alphas and back-channels and whatnot was making it kind of hard to parse.</text>
  </message>
  <message>
    <ts>2017-06-12T18:57:13.313350</ts>
    <user>U5M3B8HRV</user>
    <text>(context)</text>
  </message>
  <message>
    <ts>2017-06-12T18:57:33.316886</ts>
    <user>U5M3B8HRV</user>
    <text>Anyways, thanks for the help :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-12T19:25:49.598882</ts>
    <user>U3PRC73C2</user>
    <text>&lt;@U5KU1HNKY&gt; is there a place to view all of the custom logos? I didn't know Dr Racket logos on different days was a thing. Though I don't spin it up all that often.</text>
  </message>
  <message>
    <ts>2017-06-12T19:58:28.888556</ts>
    <user>U5KU1HNKY</user>
    <text>no clue</text>
  </message>
  <message>
    <ts>2017-06-12T20:01:38.917957</ts>
    <user>U5KU1HNKY</user>
    <text>search for the-bitmap-spec in the racket source</text>
  </message>
  <message>
    <ts>2017-06-12T20:02:48.927945</ts>
    <user>U5KU1HNKY</user>
    <text>drracket/drracket/private/honu-logo.rkt etc</text>
  </message>
  <message>
    <ts>2017-06-13T02:21:19.490845</ts>
    <user>U3PRC73C2</user>
    <text>Ah. Of course it wouldn't just be a set of png files... :upside_down_face:</text>
  </message>
  <message>
    <ts>2017-06-13T06:41:58.781533</ts>
    <user>U086VDRBK</user>
    <text>The bridge to IRC seems to be down?</text>
  </message>
  <message>
    <ts>2017-06-13T16:40:12.826243</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; How many contributors are left in the Great Relicensing?</text>
  </message>
  <message>
    <ts>2017-06-13T16:41:02.842698</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; I haven't gone through every repo yet searching for contributors, but my spreadsheet has 92 people left</text>
  </message>
  <message>
    <ts>2017-06-13T16:41:24.849986</ts>
    <user>U0702F2CE</user>
    <text>many of them may not have seen any of the prior requests</text>
  </message>
  <message>
    <ts>2017-06-13T16:41:48.857972</ts>
    <user>U07SJGB4H</user>
    <text>what about contributors to only the racket/racket repo?</text>
  </message>
  <message>
    <ts>2017-06-13T16:43:04.882261</ts>
    <user>U0702F2CE</user>
    <text>that's from racket/racket, racket/typed-racket, racket/htdp, racket/drracket, racket/racket-lang-org</text>
  </message>
  <message>
    <ts>2017-06-13T16:43:11.884373</ts>
    <user>U0702F2CE</user>
    <text>but racket/racket is the majority</text>
  </message>
  <message>
    <ts>2017-06-13T16:43:40.893809</ts>
    <user>U0702F2CE</user>
    <text>Only about ~20 have more than 1 commit</text>
  </message>
  <message>
    <ts>2017-06-13T16:44:30.909854</ts>
    <user>U07SJGB4H</user>
    <text>in theory could you undo the commits of those contributors in order to skip them for relicensing?</text>
  </message>
  <message>
    <ts>2017-06-13T16:45:15.925304</ts>
    <user>U0702F2CE</user>
    <text>some of those remaining people are major past contributors who we just have to work harder to contact</text>
  </message>
  <message>
    <ts>2017-06-13T16:45:25.928729</ts>
    <user>U0702F2CE</user>
    <text>no need to worry so far</text>
  </message>
  <message>
    <ts>2017-06-13T17:41:37.945296</ts>
    <user>U5KU1HNKY</user>
    <text>are any of them pre-github/git?</text>
  </message>
  <message>
    <ts>2017-06-13T22:35:02.759665</ts>
    <user>U0702F2CE</user>
    <text>Yes</text>
  </message>
  <message>
    <ts>2017-06-13T22:35:38.764021</ts>
    <user>U0702F2CE</user>
    <text>Fortunately I have the revision history back to 1995</text>
  </message>
  <message>
    <ts>2017-06-13T22:42:20.809521</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; I opened &lt;https://github.com/racket/rackunit/issues/35&gt;, would like your feedback when you have a moment</text>
  </message>
  <message>
    <ts>2017-06-14T07:57:40.458378</ts>
    <user>U0702F2CE</user>
    <text>I think someone is volunteering to be the new rackunit maintainer ... ;)</text>
  </message>
  <message>
    <ts>2017-06-14T10:32:50.398990</ts>
    <user>U3RLL109E</user>
    <text>&lt;@U0702F2CE&gt; am i one of those 92 people left?</text>
  </message>
  <message>
    <ts>2017-06-14T10:36:37.495457</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3RLL109E&gt; You aren't on my current list, which I assume means I have something from you</text>
  </message>
  <message>
    <ts>2017-06-14T10:37:05.507136</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3RLL109E&gt; should you be on my list? if so, just comment on &lt;https://github.com/racket/racket/issues/1570&gt;</text>
  </message>
  <message>
    <ts>2017-06-14T10:40:12.586236</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3WFKLLHM&gt; You have some graph test failures: &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/graph.txt&gt;</text>
  </message>
  <message>
    <ts>2017-06-14T10:40:39.597131</ts>
    <user>U0702F2CE</user>
    <text>also the turnstile tests time out: &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/turnstile.txt&gt;</text>
  </message>
  <message>
    <ts>2017-06-14T10:43:15.660577</ts>
    <user>U3RLL109E</user>
    <text>&lt;@U0702F2CE&gt; great, thanks.</text>
  </message>
  <message>
    <ts>2017-06-14T10:43:43.671851</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U462H29AR&gt; your markdown pkg also has a test failure &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/markdown.txt&gt;</text>
  </message>
  <message>
    <ts>2017-06-14T10:46:50.747857</ts>
    <user>U462H29AR</user>
    <text>&lt;@U0702F2CE&gt; That perf test should be disabled in CI. It is on Travis by checking for env var. Remind me the DrDr env var to check, if any?</text>
  </message>
  <message>
    <ts>2017-06-14T10:47:58.775671</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U462H29AR&gt; &lt;http://pkg-build.racket-lang.org/about.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-14T10:48:10.780447</ts>
    <user>U462H29AR</user>
    <text>Thanks!!</text>
  </message>
  <message>
    <ts>2017-06-14T10:50:31.838490</ts>
    <user>U462H29AR</user>
    <text>I feel like I've asked this before (sorry!), but, never seem to be able to find that searching from &lt;https://docs.racket-lang.org/&gt; (like I did before I asked you again just now :smile:)</text>
  </message>
  <message>
    <ts>2017-06-14T10:51:32.863817</ts>
    <user>U0702F2CE</user>
    <text>I don't know that it's there (maybe it should be)</text>
  </message>
  <message>
    <ts>2017-06-14T11:29:39.822771</ts>
    <user>U462H29AR</user>
    <text>Might be handy if `CI=true` env var were defined -- as does Travis CI, Circle CI, AppVeyor

&lt;https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables&gt;
&lt;https://circleci.com/docs/1.0/environment-variables/&gt;
&lt;https://www.appveyor.com/docs/environment-variables/&gt;

Meanwhile I'll push a commit that checks for `(ormap getenv '("CI" "TRAVIS" "PLT_PKG_BUILD_SERVICE"))`.</text>
  </message>
  <message>
    <ts>2017-06-14T11:45:43.216931</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U462H29AR&gt; I bet mflatt would take that pull request</text>
  </message>
  <message>
    <ts>2017-06-14T13:43:36.821040</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3N84RDKJ&gt; can you respond to the relicensing request? &lt;https://github.com/racket/racket/issues/1570&gt;</text>
  </message>
  <message>
    <ts>2017-06-14T14:03:06.248410</ts>
    <user>U3N84RDKJ</user>
    <text>reponded! sorry for that</text>
  </message>
  <message>
    <ts>2017-06-14T14:03:31.257538</ts>
    <user>U0702F2CE</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-06-14T14:14:45.497254</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; Somebody's gotta do it ;)</text>
  </message>
  <message>
    <ts>2017-06-14T14:15:00.502450</ts>
    <user>U462H29AR</user>
    <text>&lt;@U0702F2CE&gt; Point. Done: &lt;https://github.com/racket/pkg-build/pull/2&gt;</text>
  </message>
  <message>
    <ts>2017-06-14T19:15:14.691223</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; what are some of the things you wish `test-case` did better in the Typed Racket tests?</text>
  </message>
  <message>
    <ts>2017-06-15T10:57:37.750430</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; mostly I wish that it was simpler to put together test suites</text>
  </message>
  <message>
    <ts>2017-06-15T10:57:50.756082</ts>
    <user>U0702F2CE</user>
    <text>in TR, we can do pretty much what we need, but it's complicated</text>
  </message>
  <message>
    <ts>2017-06-15T16:03:55.292103</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U0702F2CE&gt; I'm curious: why is it complicated?</text>
  </message>
  <message>
    <ts>2017-06-15T16:05:37.325327</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U5KU1HNKY&gt; why is which complicated? TR or rackunit?</text>
  </message>
  <message>
    <ts>2017-06-15T16:06:20.339172</ts>
    <user>U5KU1HNKY</user>
    <text>I assume both at the same time? rackunit is pretty straightforward. I don't do TR but I suspect that *you* don't find it that complicated. :wink:</text>
  </message>
  <message>
    <ts>2017-06-15T16:07:16.356894</ts>
    <user>U0702F2CE</user>
    <text>the TR test suite code is complicated because it does a lot of different stuff (load a lot of files dynamically as tests, run in parallel, etc)</text>
  </message>
  <message>
    <ts>2017-06-15T16:07:46.366718</ts>
    <user>U0702F2CE</user>
    <text>rackunit is complicated to use when you want to do more than just use `check-equal?` etc at the top-level of your `test` module</text>
  </message>
  <message>
    <ts>2017-06-15T16:07:56.369899</ts>
    <user>U0702F2CE</user>
    <text>that use case is very simple (which is great)</text>
  </message>
  <message>
    <ts>2017-06-15T16:18:43.573744</ts>
    <user>U5KU1HNKY</user>
    <text>can you point me at any of the rackunit complication so I can wrap my head around it? I might be able to help out there a bit.</text>
  </message>
  <message>
    <ts>2017-06-15T16:19:41.591592</ts>
    <user>U0702F2CE</user>
    <text>for example, the distinction between a test case and a test suite</text>
  </message>
  <message>
    <ts>2017-06-15T16:20:48.612981</ts>
    <user>U0702F2CE</user>
    <text>I think this paragraph describes my unhappiness well:</text>
  </message>
  <message>
    <ts>2017-06-15T16:20:50.613661</ts>
    <user>U0702F2CE</user>
    <text>"Test cases can themselves be grouped into test suites. A test suite can contain both test cases and test suites. Unlike a check or test case, a test suite is not immediately run. Instead use one of the functions described in User Interfaces or Programmatically Running Tests and Inspecting Results."</text>
  </message>
  <message>
    <ts>2017-06-15T16:35:21.896443</ts>
    <user>U5KU1HNKY</user>
    <text>yeah. I'm not entirely thrilled with that myself. IMHO any time you need to do anything more than just require something to run your tests you've failed.</text>
  </message>
  <message>
    <ts>2017-06-15T16:36:28.918553</ts>
    <user>U5KU1HNKY</user>
    <text>I'm not sure how to fix that in a way that would make "normal” racket devs happy tho. I know how to do it to make *me* happy but that's different. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-15T16:36:59.928583</ts>
    <user>U0702F2CE</user>
    <text>something that makes one person happy is better than making 0 people happy</text>
  </message>
  <message>
    <ts>2017-06-15T16:42:29.030936</ts>
    <user>U07SCV14J</user>
    <text>In my opinion, the things I find the most frustrating about rackunit is that test failures are often remarkably useless and "checks” don't compose at all.</text>
  </message>
  <message>
    <ts>2017-06-15T16:43:35.051437</ts>
    <user>U07SCV14J</user>
    <text>I have spent more time than I would like trying to understand why two things rackunit claims aren't equal actually aren't equal.</text>
  </message>
  <message>
    <ts>2017-06-15T16:44:21.065111</ts>
    <user>U07SCV14J</user>
    <text>And writing custom checks that produce decent error messages is a huge chore, mostly because you can't really implement a new check in terms of an existing one and still produce good check failure messages.</text>
  </message>
  <message>
    <ts>2017-06-15T16:45:39.089363</ts>
    <user>U07SCV14J</user>
    <text>My understanding is that rackunit was just schemeunit, rolled into the main distribution, but I am not sure it's really the same quality and adheres to the same principles as other libraries that get distributed with racket. :/</text>
  </message>
  <message>
    <ts>2017-06-15T16:59:27.345927</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U07SCV14J&gt; I'm working on a library to improve rackunit error messages, especially when two data structures are "almost" the same: &lt;http://docs.racket-lang.org/expect/index.html?q=expect&gt;</text>
  </message>
  <message>
    <ts>2017-06-15T17:00:12.361309</ts>
    <user>U07SJGB4H</user>
    <text>It's not ready for a 0.1 release yet though (mainly due to needing some rackunit features implemented so the check info doesn't look awful)</text>
  </message>
  <message>
    <ts>2017-06-15T17:02:26.405144</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U07SCV14J&gt; I published check-sexp-equal for that reason… but since I can't define any formatting it is still kinda hard to read</text>
  </message>
  <message>
    <ts>2017-06-15T17:02:32.407161</ts>
    <user>U07SJGB4H</user>
    <text>here's an example:
```
&amp;gt; (expect! '(10 12) (expect-list (expect-pred number?) (expect-pred string?)))

expected a different kind of value
  subject: '(10 12)
  in: item at position 1
  expected: value satisfying string?
  actual: 12
```</text>
  </message>
  <message>
    <ts>2017-06-15T17:03:06.417883</ts>
    <user>U5KU1HNKY</user>
    <text>minitest (in ruby) does diffing on `assert_equal` failures and provides `make_my_diffs_pretty` to ensure that big things get printed structurally. makes finding the problems a breeze in comparison</text>
  </message>
  <message>
    <ts>2017-06-15T17:05:10.456146</ts>
    <user>U5KU1HNKY</user>
    <text>It does it that way specifically to find inequalities deep in a nested sexp and it is really really quick to hone in on where the problem is. `check-sexp-equal?` has to embed `#:new` and `#:old` tags to show you where the differences are but the whole sexp is printed flat</text>
  </message>
  <message>
    <ts>2017-06-15T17:05:30.462264</ts>
    <user>U5KU1HNKY</user>
    <text>just doing a pretty-print of the output would make it much better</text>
  </message>
  <message>
    <ts>2017-06-15T17:06:04.472437</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U5KU1HNKY&gt; check-sexp-equal is very nice and was part of the inspiration for `expect` :)</text>
  </message>
  <message>
    <ts>2017-06-15T17:06:09.473874</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U07SJGB4H&gt; I'm not a fan of expectations (at least from the BDD perspective). I imagine that your RHS blows up really quickly on anything non-trivial</text>
  </message>
  <message>
    <ts>2017-06-15T17:06:27.479598</ts>
    <user>U5KU1HNKY</user>
    <text>thanks! if you have any insight on how to improve its output I'm all ears</text>
  </message>
  <message>
    <ts>2017-06-15T17:07:09.492956</ts>
    <user>U07SJGB4H</user>
    <text>there's "expectation conversion" so that you can write something like `(hash 'foo (list 1 2 (vector 'a 'b (expect-pred? number?))))` and it will convert it to an expectation that structurally matches things and reports errors in contexts</text>
  </message>
  <message>
    <ts>2017-06-15T17:07:42.503161</ts>
    <user>U07SJGB4H</user>
    <text>the above example I had didn't do that because `expect!` does not yet convert its expectation argument automatically</text>
  </message>
  <message>
    <ts>2017-06-15T17:08:02.509083</ts>
    <user>U07SJGB4H</user>
    <text>`(expect-equal? some-complex-data-with-hashes-and-lists-and-stuff)` will do it though</text>
  </message>
  <message>
    <ts>2017-06-15T17:08:32.518330</ts>
    <user>U07SJGB4H</user>
    <text>They're more like junit/hamcrest "matchers" than anything else, but I wanted a more noun-y name</text>
  </message>
  <message>
    <ts>2017-06-15T18:34:21.752702</ts>
    <user>U5GQ7TC3H</user>
    <text>I'm currently working on a test filtering feature for chk and rackunit. The idea is to be able to call `raco test my/module -- args to forward` and the test lib interprets `args to forward` as filters for test names, files, lines to run. I'm looking for feedback/feature requests based on the WIP documentation: &lt;https://cfinegan.github.io/chk-docs/chk.html#(part._.Filtering_.Tests_with_.Command-line_.Arguments)&gt;</text>
  </message>
  <message>
    <ts>2017-06-15T18:35:04.760748</ts>
    <user>U5GQ7TC3H</user>
    <text>Please let me know what you think. Rackunit docs are coming after I figure out what features are the most popular.</text>
  </message>
  <message>
    <ts>2017-06-15T20:30:18.820748</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U5GQ7TC3H&gt; instead of relying on command line arguments, would it be cleaner for `raco test` to define some sort of "filters" concept and pass it along to test submodules? module-level filtering could work with a config submod in the test module</text>
  </message>
  <message>
    <ts>2017-06-15T20:37:15.872705</ts>
    <user>U462H29AR</user>
    <text>There's always `getenv` plus the ability to define an env var on the command-line ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-06-15T20:37:22.873475</ts>
    <user>U462H29AR</user>
    <text>```
$ cat example.rkt 
#lang racket/base

(module test racket/base
  (if (getenv "BIG_TEST")
      (println "Running big tests")
      (println "Skipping big tests")))

$ raco test example.rkt 
raco test: (submod "example.rkt" test)
"Skipping big tests"

$ BIG_TEST=1 raco test example.rkt 
raco test: (submod "example.rkt" test)
"Running big tests"
```</text>
  </message>
  <message>
    <ts>2017-06-15T20:38:04.878350</ts>
    <user>U462H29AR</user>
    <text>Just from the POV of "simplest thing that could possibly work".</text>
  </message>
  <message>
    <ts>2017-06-15T20:39:07.885699</ts>
    <user>U462H29AR</user>
    <text>Could still use some macros the sweeten the raw `getenv` stuff I suppose.</text>
  </message>
  <message>
    <ts>2017-06-15T20:39:43.889874</ts>
    <user>U07SJGB4H</user>
    <text>I always imagined doing that kind of thing with a separate submodule</text>
  </message>
  <message>
    <ts>2017-06-15T20:39:56.891395</ts>
    <user>U07SJGB4H</user>
    <text>`(module+ integration-test ...)`</text>
  </message>
  <message>
    <ts>2017-06-15T20:40:46.897451</ts>
    <user>U462H29AR</user>
    <text>Actually yes I think I've done that way, too.</text>
  </message>
  <message>
    <ts>2017-06-15T20:41:14.900803</ts>
    <user>U07SJGB4H</user>
    <text>I'm not sure how to write the "run these submods by default unless you're in the CI environment" logic though</text>
  </message>
  <message>
    <ts>2017-06-16T01:12:13.670945</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; progress is a new info type &lt;https://github.com/racket/rackunit/pull/40&gt;</text>
  </message>
  <message>
    <ts>2017-06-16T13:35:11.218264</ts>
    <user>U5GQ7TC3H</user>
    <text>&lt;@U07SJGB4H&gt; `raco test` already allows you specify command-line arguments to forward in `info.rkt` so we could implement a better interface for specifying these filters (i.e. using data structures instead of raw strings) and allow users to do it either way, if that makes sense. What kind of interface would you like to see for something like this? I'm thinking along the lines of `(struct test-filters (names-to-run k/v-filters files-to-run lines-to-run))`.
&lt;@U462H29AR&gt; Part of the idea is that users can drill down to pretty much any individual test without altering the test file itself, so you could do things like `raco test my/module -- file=foo.rkt line=20` and get just that one test result. I'm not sure that environment variables can offer the same flexibility.</text>
  </message>
  <message>
    <ts>2017-06-16T14:48:16.652782</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U5GQ7TC3H&gt; the interface I'd ideally like is two part, where there's a way to filter "kinds" of tests (each test has exactly 1 kind) and there's a way to filter specific named tests</text>
  </message>
  <message>
    <ts>2017-06-16T14:49:27.674833</ts>
    <user>U07SJGB4H</user>
    <text>the "kinds" part requires a programmer declare what kinds of tests they have. I think different submodules like `test`, `integration-test`,  `perf-test`, etc. would be fine for that. Then `info.rkt` could declare what submodule names to look for by default (does `raco test` already support that?)</text>
  </message>
  <message>
    <ts>2017-06-16T15:00:17.878829</ts>
    <user>U462H29AR</user>
    <text>There is a `-s` command like flag e.g. `raco test -s slow-test file.rkt` run the `slow-test` submodule in `file.rkt`</text>
  </message>
  <message>
    <ts>2017-06-16T15:01:07.895531</ts>
    <user>U462H29AR</user>
    <text>You can specify `-s mod` multiple times, too.</text>
  </message>
  <message>
    <ts>2017-06-16T15:01:18.899621</ts>
    <user>U462H29AR</user>
    <text>Per command line.</text>
  </message>
  <message>
    <ts>2017-06-16T15:01:33.904651</ts>
    <user>U07SJGB4H</user>
    <text>the flag is definitely useful when you're in control of the test command, like when setting up Travis</text>
  </message>
  <message>
    <ts>2017-06-16T15:01:51.910120</ts>
    <user>U07SJGB4H</user>
    <text>but I'm specifically wondering how to say "these are tests that shouldn't run locally but should run in DrDr"</text>
  </message>
  <message>
    <ts>2017-06-16T15:03:37.944029</ts>
    <user>U462H29AR</user>
    <text>I think there a variety of usage scenarios, plus people have different kinds of projects with tests of varying number and speed, and also have seen different approaches in various languages.</text>
  </message>
  <message>
    <ts>2017-06-16T15:04:29.959952</ts>
    <user>U462H29AR</user>
    <text>So for instance I'm thinking, "why would I want to run only a test at line 20?", but, that's just because I haven't been in that situation so far.</text>
  </message>
  <message>
    <ts>2017-06-16T15:04:56.968027</ts>
    <user>U462H29AR</user>
    <text>I think it's probably good to lay out, "What are some situations where we want to run some but not all tests?"</text>
  </message>
  <message>
    <ts>2017-06-16T15:05:10.972453</ts>
    <user>U07SJGB4H</user>
    <text>I think we need to write the test frameworks that would actually need filtering before figuring out filtering :)</text>
  </message>
  <message>
    <ts>2017-06-16T15:05:12.973218</ts>
    <user>U462H29AR</user>
    <text>And maybe also, "What are some existing ways you can run some but not all code?"</text>
  </message>
  <message>
    <ts>2017-06-16T15:05:33.979674</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U462H29AR&gt; what do you typically do for tests that make network calls?</text>
  </message>
  <message>
    <ts>2017-06-16T15:05:44.982621</ts>
    <user>U462H29AR</user>
    <text>And maybe think about economical but convenient ways to compose all those? idk</text>
  </message>
  <message>
    <ts>2017-06-16T15:06:19.993465</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; &lt;@U462H29AR&gt;: TR has a `--just` flag for its test suite</text>
  </message>
  <message>
    <ts>2017-06-16T15:06:34.998063</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; what's that do?</text>
  </message>
  <message>
    <ts>2017-06-16T15:06:49.002832</ts>
    <user>U0702F2CE</user>
    <text>runs a single integration test</text>
  </message>
  <message>
    <ts>2017-06-16T15:08:39.035232</ts>
    <user>U462H29AR</user>
    <text>&lt;@U07SJGB4H&gt; That's a good example where, e.g. the AWS package, I just run the tests locally with my AWS creds and there are $$ involved, so I don't run those on Travis CI or on the pkg build server.
Also I run specific tests in the REPL, usually. In racket-mode if point is inside a `module` form, then when you "run" you "enter" that (sub)module. That includes test submods, of course. So I sometimes use that to run individual tests.</text>
  </message>
  <message>
    <ts>2017-06-16T15:12:58.108679</ts>
    <user>U462H29AR</user>
    <text>btw I know you can feed creds securely to Travis CI, so I _could_ have it run tests against real AWS. I just mean that I don't want to have Travis run those tests on 10 different Racket versions, and on every little commit, on my nickel :wink:</text>
  </message>
  <message>
    <ts>2017-06-16T15:13:32.117912</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; how large is an integration test? is it typically a couple of lines that does something heavyweight, or something module sized, or something with multiple sizable modules?</text>
  </message>
  <message>
    <ts>2017-06-16T15:13:41.120472</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U462H29AR&gt; that's definitely a good use case to keep in mind</text>
  </message>
  <message>
    <ts>2017-06-16T15:14:05.126996</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; Integration tests are by definition modules that we run to see if they typecheck/run (or if they error in the right way)</text>
  </message>
  <message>
    <ts>2017-06-16T15:14:48.138614</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; out of curiosity, could you do that as a regular `check` that takes a syntax object and evals it?</text>
  </message>
  <message>
    <ts>2017-06-16T15:14:50.139238</ts>
    <user>U0702F2CE</user>
    <text>you might be interested in the code here: &lt;https://github.com/racket/typed-racket/blob/master/typed-racket-test/main.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-06-16T15:15:09.144299</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; the code is really a lot more complicated than that</text>
  </message>
  <message>
    <ts>2017-06-16T15:16:54.174038</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; oh wow it's spinning up multiple places and parallelizing too</text>
  </message>
  <message>
    <ts>2017-06-16T15:17:07.177558</ts>
    <user>U0702F2CE</user>
    <text>yeah there's a lot there</text>
  </message>
  <message>
    <ts>2017-06-16T15:17:53.190561</ts>
    <user>U07SJGB4H</user>
    <text>_and_ conditionally doing text output or gui output</text>
  </message>
  <message>
    <ts>2017-06-16T15:17:55.191189</ts>
    <user>U07SJGB4H</user>
    <text>dang</text>
  </message>
  <message>
    <ts>2017-06-16T15:18:03.193513</ts>
    <user>U0702F2CE</user>
    <text>you might also be interested in the much simpler match tests: &lt;https://github.com/racket/racket/blob/master/pkgs/racket-test/tests/match/main.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-06-16T15:18:21.198455</ts>
    <user>U0702F2CE</user>
    <text>the gui code is never used and probably doesn't work</text>
  </message>
  <message>
    <ts>2017-06-16T15:18:31.201572</ts>
    <user>U07SJGB4H</user>
    <text>heh</text>
  </message>
  <message>
    <ts>2017-06-16T16:16:50.173010</ts>
    <user>U5GQ7TC3H</user>
    <text>I'm getting the impression that it's more popular to organize tests into modules than to name individual tests (or groups of tests) using the testing libraries' info tracking features. What about the ability to supply `raco test` a set of regular expressions that would be used to match against module names? Or would people be more likely to separate tests within the same module into named groups if there was better support for filtering upon that predicate?</text>
  </message>
  <message>
    <ts>2017-06-16T16:17:20.181224</ts>
    <user>U0702F2CE</user>
    <text>cfinegan I bet better support would make it more used</text>
  </message>
  <message>
    <ts>2017-06-16T16:23:47.284139</ts>
    <user>U5GQ7TC3H</user>
    <text>I agree, although it would have to be compatible with the way people organize their tests. Right now for example rackunit "names" tests after the type of test being invoked (`check-equal?`, `check-not-false`, etc.), which isn't a super useful thing to filter upon</text>
  </message>
  <message>
    <ts>2017-06-17T10:31:01.099593</ts>
    <user>U3NJS8H7C</user>
    <text>I'm preparing a substantial refactoring of Racket's I/O layer just above the OS: &lt;https://github.com/mflatt/racket/tree/rktio&gt;
The Windows part isn't ready. It's supposed to work on other platforms – but the 10k lines of code that shifted around are heavily `#ifdef`ed, and I also tried to clean up `#ifdef`s, so I expect configuration and compilation problems.
If you build Racket on anything other than the most common OS distributions, I'd appreciate reports (a reply there here would be good) on whether it builds and/or has build/test errors.</text>
  </message>
  <message>
    <ts>2017-06-18T14:55:38.844789</ts>
    <user>U4L6H669J</user>
    <text>I'm not too familiar with the racket build process, but I think it built the base/minimal racket, failed building packages:</text>
  </message>
  <message>
    <ts>2017-06-18T14:56:10.846589</ts>
    <user>U4L6H669J</user>
    <text>&amp;gt; raco pkg install: version mismatch for dependency
&amp;gt; for package: 2d-lib
&amp;gt; mismatch packages:
&amp;gt; base (have 6.5.0.7, need 6.6.0.3)</text>
  </message>
  <message>
    <ts>2017-06-18T14:57:11.850095</ts>
    <user>U4L6H669J</user>
    <text>Windows 10, Visual Studio 2015</text>
  </message>
  <message>
    <ts>2017-06-18T19:54:08.781874</ts>
    <user>U3NJS8H7C</user>
    <text>andreiformiga: Thanks for checking! I should have been clearer that it's the `rktio` branch of the repo; I haven't used the main branch in a while, which (based on the version number) seems to be what you built.
Also, I'm going to count Windows 10 as a common OS distribution, and I'm checking that one directly. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-19T03:30:02.517785</ts>
    <user>U5KU1HNKY</user>
    <text>this is a bit premature where I'm at, but can someone point me towards any code that racket provides to do free-variable analysis at macro expansion or run time? I'm wanting to expand a system I have to allow for free variables to be treated symbolically (a la Mathmatica) instead of erroring out as undefined.</text>
  </message>
  <message>
    <ts>2017-06-19T03:31:42.538244</ts>
    <user>U5KU1HNKY</user>
    <text>I'm still working through BR so this is a bit ahead of myself. Concrete examples (that are understandable) would be nice</text>
  </message>
  <message>
    <ts>2017-06-19T03:42:27.660117</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U5KU1HNKY&gt; if you _only_ wish to change the behavior of undefined variables, might I recommend looking at the `#%top` macro? it's inserted as a wrapper around all unbound identifiers and you can override it to change what happens when an unbound identifier occurs.</text>
  </message>
  <message>
    <ts>2017-06-19T07:54:50.908923</ts>
    <user>U0G0JDQGZ</user>
    <text>zenspider: (require syntax/free-vars)</text>
  </message>
  <message>
    <ts>2017-06-19T09:23:55.265274</ts>
    <user>U3NJS8H7C</user>
    <text>I've run out of immediately available test failures for the rtkio refactoring, so I'm going to push it to the main repo's master branch. I'm still interested in build reports, though.</text>
  </message>
  <message>
    <ts>2017-06-19T09:47:12.739573</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NJS8H7C&gt; here's a build failure: &lt;https://travis-ci.org/racket/racket/jobs/244521015&gt;</text>
  </message>
  <message>
    <ts>2017-06-19T10:12:17.310853</ts>
    <user>U0G0JDQGZ</user>
    <text>mflatt: I like the log message :)</text>
  </message>
  <message>
    <ts>2017-06-19T13:23:34.691983</ts>
    <user>U07SJGB4H</user>
    <text>IRC-slack bridge is malfunctioning again</text>
  </message>
  <message>
    <ts>2017-06-19T16:00:17.949862</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U3NP867S6&gt; It looks like the `contract-profile` commits on June 1 caused the documentation build for `contract-profile.scrbl` to take substantially more memory. At over 1GB, it's now the two peak memory-use points during a build (at "running" and "rendering") as shown on the graph &lt;http://build-plot.racket-lang.org/&gt; .
Do you know offhand what might have triggered the memory use and whether it would be easily avoidable?</text>
  </message>
  <message>
    <ts>2017-06-19T16:28:21.498739</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U3NJS8H7C&gt;: Yes, I increased the size of the examples in the docs. The original input sizes were too small to show anything.</text>
  </message>
  <message>
    <ts>2017-06-19T16:28:52.508742</ts>
    <user>U3NP867S6</user>
    <text>But I should find a better solution; that kind of memory use is not good.</text>
  </message>
  <message>
    <ts>2017-06-19T16:52:14.965415</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U07SJGB4H&gt; that might actually be perfect. thank you.</text>
  </message>
  <message>
    <ts>2017-06-19T18:47:16.663505</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; I'd like to be a contributor to `racket/rackunit` in order to label / organize issues and not deal with keeping my own fork in sync, who hath the authority to bestow this power upon me?</text>
  </message>
  <message>
    <ts>2017-06-19T18:56:15.761814</ts>
    <user>U3QF0EM0E</user>
    <text>&lt;@U0702F2CE&gt; can you give jack push/issue-labeling access to `racket/rackunit`?</text>
  </message>
  <message>
    <ts>2017-06-20T08:56:03.304889</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3QF0EM0E&gt; &lt;@U07SJGB4H&gt; Done</text>
  </message>
  <message>
    <ts>2017-06-20T10:39:26.639709</ts>
    <user>U5GQ7TC3H</user>
    <text>What does it mean when the Travis CI build fails? I submitted a pull request that's causing the travis build to fail with GCC errors even though I didn't touch any of the C code. &lt;https://github.com/racket/racket/pull/1726&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T11:47:30.374446</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U5GQ7TC3H&gt; it's not clear to me what's going on with those build failures</text>
  </message>
  <message>
    <ts>2017-06-20T11:49:01.411587</ts>
    <user>U0702F2CE</user>
    <text>I think that something's wrong with subprocess handling on linux on master, based on &lt;@U3NJS8H7C&gt;'s recent changes</text>
  </message>
  <message>
    <ts>2017-06-20T11:50:41.453206</ts>
    <user>U5GQ7TC3H</user>
    <text>Okay, I wanted to confirm that it wasn't an issue with the changes in my fork.</text>
  </message>
  <message>
    <ts>2017-06-20T11:54:32.548456</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U5GQ7TC3H&gt; It's probably not an issue with your changes, but I think your branch doesn't include the rktio changes that samth has in mind</text>
  </message>
  <message>
    <ts>2017-06-20T11:56:23.594152</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NJS8H7C&gt; while &lt;@U5GQ7TC3H&gt;'s branch doesn't have those changes, Travis tests the merge of that with master</text>
  </message>
  <message>
    <ts>2017-06-20T11:56:28.596082</ts>
    <user>U0702F2CE</user>
    <text>the revision tested is here: &lt;https://github.com/racket/racket/commit/4da654e8fdeee6d196979af760f98bd4bba15732&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T12:03:33.776610</ts>
    <user>U3NJS8H7C</user>
    <text>Ok, that's good to know. I'm not seeing that particular failure elsewhere, but I'll watch for it.</text>
  </message>
  <message>
    <ts>2017-06-20T12:06:07.839747</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NJS8H7C&gt; the errors I see in &lt;@U5GQ7TC3H&gt;'s PR tests are the same ones I see in the tests for master -- timeouts either in git-related pkg tests, or in the regular subprocess tests</text>
  </message>
  <message>
    <ts>2017-06-20T12:06:29.848583</ts>
    <user>U0702F2CE</user>
    <text>I don't know if that's related to your most recent change though</text>
  </message>
  <message>
    <ts>2017-06-20T12:06:59.860462</ts>
    <user>U3NJS8H7C</user>
    <text>I'm seeing the pkg-test failures, and I hope the most recent change addresses those. I'm probably not looking at the right variant to see the subprocess example; can you point me to one?</text>
  </message>
  <message>
    <ts>2017-06-20T12:07:41.877859</ts>
    <user>U0702F2CE</user>
    <text>here's an example: &lt;https://travis-ci.org/racket/racket/jobs/244965444&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T12:07:48.880503</ts>
    <user>U3NJS8H7C</user>
    <text>Oh – it's the ones with places &amp;amp; futures disabled. Now I know how to find the bug.</text>
  </message>
  <message>
    <ts>2017-06-20T12:08:05.887188</ts>
    <user>U0702F2CE</user>
    <text>Great</text>
  </message>
  <message>
    <ts>2017-06-20T14:57:36.658269</ts>
    <user>U07SJGB4H</user>
    <text>Is "require all modules in directory X" a reasonable thing to do? or does it have subtle problems with when exactly the directory is read based on when modules are compiled?</text>
  </message>
  <message>
    <ts>2017-06-20T15:05:44.840421</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U07SJGB4H&gt; It wouldn't be supported well by tools like `raco make`, which can't deal with a dependency on a directory</text>
  </message>
  <message>
    <ts>2017-06-20T15:12:41.985018</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3NJS8H7C&gt; what would it take to make `raco make` aware of unusual dependencies like that?</text>
  </message>
  <message>
    <ts>2017-06-20T15:14:14.016230</ts>
    <user>U3NJS8H7C</user>
    <text>I'm not sure. One complication is assigning a hash code to the directory. Another is that creating a "compiled" subdirectory would change the enclosing directory, which would be interpreted as a need to recompile. I bet there are more complications that I won't think of offhand.</text>
  </message>
  <message>
    <ts>2017-06-20T15:15:35.043662</ts>
    <user>U07SJGB4H</user>
    <text>How does the planet require form work with `raco make`?</text>
  </message>
  <message>
    <ts>2017-06-20T15:17:21.079913</ts>
    <user>U3NJS8H7C</user>
    <text>The default module name resolver calls out to `planet-module-name-resolver` when it sees `planet`</text>
  </message>
  <message>
    <ts>2017-06-20T15:18:01.093067</ts>
    <user>U3NJS8H7C</user>
    <text>Other tools similarly have hard-wired support for `planet`, which helps explain a class of problems that PLaneT has</text>
  </message>
  <message>
    <ts>2017-06-20T15:23:18.200632</ts>
    <user>U07SJGB4H</user>
    <text>huh, never would have guessed that but it makes sense</text>
  </message>
  <message>
    <ts>2017-06-20T15:24:06.216891</ts>
    <user>U0702F2CE</user>
    <text>yeah, when splitting the old code into pkgs, I tried to remove planet from "base" but was unsuccessful</text>
  </message>
  <message>
    <ts>2017-06-20T15:35:41.456130</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NJS8H7C&gt; with your latest changes, only the `--disable-jit` tests failed, and that may just be the tests in general taking too long; I'm rerunning it (&lt;https://travis-ci.org/racket/racket/builds/245045634?utm_source=slack&amp;amp;utm_medium=notification&gt;)</text>
  </message>
  <message>
    <ts>2017-06-20T15:36:40.475860</ts>
    <user>U0702F2CE</user>
    <text>more generally our tests have gotten to the point where we have lots of intermittent failures from hitting the time limit; we should probably either speed some up or run fewer tests</text>
  </message>
  <message>
    <ts>2017-06-20T17:07:07.319705</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U5GQ7TC3H&gt; got time for some questions about racket/rackunit#44?</text>
  </message>
  <message>
    <ts>2017-06-20T17:27:54.690347</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U0702F2CE&gt; Is it *just* a pure timeout or are these performance tests? If the former, you might want to dynamically pick the timeout based on the machine &amp;amp; load. If the latter, my test framework has a benchmark test type that does curve fitting and asserts the R^2 value instead of the time. Makes it much more CI/VM proof.</text>
  </message>
  <message>
    <ts>2017-06-20T17:28:24.698620</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U5KU1HNKY&gt; It's the former, and it's the Travis timeout, not ours</text>
  </message>
  <message>
    <ts>2017-06-20T17:29:50.722424</ts>
    <user>U0702F2CE</user>
    <text>see &lt;https://travis-ci.org/racket/racket/jobs/245059751&gt; for an example</text>
  </message>
  <message>
    <ts>2017-06-20T17:30:01.725685</ts>
    <user>U0702F2CE</user>
    <text>the major problem is that the pkg tests take about 20 minutes</text>
  </message>
  <message>
    <ts>2017-06-20T17:30:15.729803</ts>
    <user>U5KU1HNKY</user>
    <text>I didn't realize that travis had a global timeout. I've worked on many projects that take a really long time on CI</text>
  </message>
  <message>
    <ts>2017-06-20T17:31:06.744891</ts>
    <user>U0702F2CE</user>
    <text>yeah, it's about 45 minutes</text>
  </message>
  <message>
    <ts>2017-06-20T17:32:20.765576</ts>
    <user>U5KU1HNKY</user>
    <text>I think that's configurable… definitely had projects that went over that before I got to them (I *hate* long test times)</text>
  </message>
  <message>
    <ts>2017-06-20T17:33:34.786319</ts>
    <user>U5KU1HNKY</user>
    <text>oh… but maybe those projects were on circleci…</text>
  </message>
  <message>
    <ts>2017-06-20T17:33:46.789659</ts>
    <user>U5KU1HNKY</user>
    <text>easy parallelization options there too</text>
  </message>
  <message>
    <ts>2017-06-20T17:34:30.801644</ts>
    <user>U0702F2CE</user>
    <text>this doesn't parallelize well either, because you have to build racket to start with</text>
  </message>
  <message>
    <ts>2017-06-20T17:34:52.807813</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U0702F2CE&gt;: you're not parallelizing the make phase: `make CPUS="2" PKGS="racket-test db-test unstable-flonum-lib net-test" CONFIGURE_ARGS_qq="$RACKET_CONFIGURE_ARGS"`</text>
  </message>
  <message>
    <ts>2017-06-20T17:35:02.810543</ts>
    <user>U5KU1HNKY</user>
    <text>IIRC, racket does build well with `-j N`</text>
  </message>
  <message>
    <ts>2017-06-20T17:35:10.812821</ts>
    <user>U0702F2CE</user>
    <text>`CPUS=2` does that</text>
  </message>
  <message>
    <ts>2017-06-20T17:35:23.816609</ts>
    <user>U0702F2CE</user>
    <text>but also parallelizes `raco setup`</text>
  </message>
  <message>
    <ts>2017-06-20T17:36:22.832725</ts>
    <user>U5GQ7TC3H</user>
    <text>&lt;@U07SJGB4H&gt; might not be able to get to everything until tomorrow morning, but I'm happy to take questions</text>
  </message>
  <message>
    <ts>2017-06-20T17:36:48.839803</ts>
    <user>U5KU1HNKY</user>
    <text>I don't think so… I think you still need `-j`… checking.</text>
  </message>
  <message>
    <ts>2017-06-20T17:37:24.848947</ts>
    <user>U0702F2CE</user>
    <text>I promise, that does it</text>
  </message>
  <message>
    <ts>2017-06-20T17:38:03.859074</ts>
    <user>U0702F2CE</user>
    <text>`CPUS=N` exists because you can't get the value passed to `-j` to use with `raco setup`</text>
  </message>
  <message>
    <ts>2017-06-20T17:38:37.868007</ts>
    <user>U07SJGB4H</user>
    <text>cfinegan: No rush</text>
  </message>
  <message>
    <ts>2017-06-20T17:39:46.886518</ts>
    <user>U5KU1HNKY</user>
    <text>I get the `raco` side of it wrt ENV… `CPUS` is not described at all throughout the gnu make doco. It's really obtuse doco, but seems thorough.</text>
  </message>
  <message>
    <ts>2017-06-20T17:40:12.893428</ts>
    <user>U0702F2CE</user>
    <text>no, `CPUS` is part of the racket makefile</text>
  </message>
  <message>
    <ts>2017-06-20T17:40:15.894155</ts>
    <user>U07SJGB4H</user>
    <text>My first impression is that the filtering logic seems complex and out of place, but I agree filtering is useful and thank you for working on it.</text>
  </message>
  <message>
    <ts>2017-06-20T17:40:38.900388</ts>
    <user>U0702F2CE</user>
    <text>see this code: &lt;https://github.com/racket/racket/blob/master/Makefile#L45-L53&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T17:40:39.900485</ts>
    <user>U5KU1HNKY</user>
    <text>I'm post workout, so I'm probably not explaining myself well…</text>
  </message>
  <message>
    <ts>2017-06-20T17:40:52.904092</ts>
    <user>U07SJGB4H</user>
    <text>how specifically do you intend to use the filtering? in DrRacket with test submodules and without test suites and only checks? in CI with test suites? some other combination?</text>
  </message>
  <message>
    <ts>2017-06-20T17:41:51.919524</ts>
    <user>U5KU1HNKY</user>
    <text>gotcha… kk. Could also tune it. I've found for GCC being mostly IO bound that nproc*2 often works quite well.</text>
  </message>
  <message>
    <ts>2017-06-20T17:42:22.927856</ts>
    <user>U0702F2CE</user>
    <text>that's true for the C build step, but not for the `raco setup` build step</text>
  </message>
  <message>
    <ts>2017-06-20T17:42:39.932226</ts>
    <user>U0702F2CE</user>
    <text>but the C build on Travis takes very little time</text>
  </message>
  <message>
    <ts>2017-06-20T17:42:41.932750</ts>
    <user>U5KU1HNKY</user>
    <text>thank you for having such a clean makefile…</text>
  </message>
  <message>
    <ts>2017-06-20T17:43:05.939148</ts>
    <user>U0702F2CE</user>
    <text>Really we just need to make some of the tests faster</text>
  </message>
  <message>
    <ts>2017-06-20T17:43:43.949109</ts>
    <user>U5KU1HNKY</user>
    <text>I can't see how long just the C side takes… but that whole thing is 15 minutes. That's 1/3rd the total timeout.</text>
  </message>
  <message>
    <ts>2017-06-20T17:44:13.957184</ts>
    <user>U5KU1HNKY</user>
    <text>you could break up the raco vs gcc side and scale accordingly… but… I'll shut up now. you obviously have this in hand and I'm just making noise at this point</text>
  </message>
  <message>
    <ts>2017-06-20T17:44:27.961015</ts>
    <user>U0702F2CE</user>
    <text>sadly we don't have it in hand</text>
  </message>
  <message>
    <ts>2017-06-20T17:44:36.963212</ts>
    <user>U5KU1HNKY</user>
    <text>hah. well… let me know if i can help</text>
  </message>
  <message>
    <ts>2017-06-20T17:44:49.966739</ts>
    <user>U0702F2CE</user>
    <text>well, if you can make the pkg tests faster ... :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-20T17:44:57.968851</ts>
    <user>U0702F2CE</user>
    <text>or even figure out which ones are particularly slow</text>
  </message>
  <message>
    <ts>2017-06-20T17:45:02.970225</ts>
    <user>U0702F2CE</user>
    <text>that would be a big help</text>
  </message>
  <message>
    <ts>2017-06-20T17:45:04.970767</ts>
    <user>U5KU1HNKY</user>
    <text>I was curious… &lt;@U3NJS8H7C&gt; was working on nuking C for chez… but then I saw a 10kloc diff for revamping IO in C. Is that a precursor to make porting easier?</text>
  </message>
  <message>
    <ts>2017-06-20T17:45:09.972209</ts>
    <user>U0702F2CE</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-20T17:45:28.977368</ts>
    <user>U0702F2CE</user>
    <text>the `rktio` library is intended to be usable from other places (such as Chez)</text>
  </message>
  <message>
    <ts>2017-06-20T17:45:42.981123</ts>
    <user>U5KU1HNKY</user>
    <text>I'm excited about the chez port, even if it is initially slower, I suspect it'll help in the medium+ term a lot</text>
  </message>
  <message>
    <ts>2017-06-20T17:46:27.993047</ts>
    <user>U0702F2CE</user>
    <text>I'm also excited</text>
  </message>
  <message>
    <ts>2017-06-20T17:46:49.999036</ts>
    <user>U5KU1HNKY</user>
    <text>I was blown away by a recently published table of scheme benchmarks… chez was fairly consistently 1st-2nd place. Racket often in the top 5. I had no fucking idea… chicken always FELT faster because startup costs were zero, but overall perf was shite</text>
  </message>
  <message>
    <ts>2017-06-20T17:47:15.005871</ts>
    <user>U5KU1HNKY</user>
    <text>I should have dug in on those benchmarks to see if they were using /base</text>
  </message>
  <message>
    <ts>2017-06-20T17:47:38.011728</ts>
    <user>U0702F2CE</user>
    <text>Chez is very good, although those benchmarks somewhat overstate the advantage over Racket</text>
  </message>
  <message>
    <ts>2017-06-20T17:48:00.017389</ts>
    <user>U0702F2CE</user>
    <text>Chez is best on old-school Scheme code -- lots of plain functions and s-expressions</text>
  </message>
  <message>
    <ts>2017-06-20T17:48:29.025069</ts>
    <user>U5KU1HNKY</user>
    <text>basically.. the same problems all benchmarks have :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-20T17:48:34.026187</ts>
    <user>U0702F2CE</user>
    <text>more user-defined data structures and tricky indirections reduce the advantage</text>
  </message>
  <message>
    <ts>2017-06-20T17:48:44.028718</ts>
    <user>U0702F2CE</user>
    <text>which isn't to say that it isn't still there</text>
  </message>
  <message>
    <ts>2017-06-20T17:49:29.040698</ts>
    <user>U5KU1HNKY</user>
    <text>you(? I think) helped me make a CPU simulation fast for advent of code… really nice thing to study. Then I saw a chez impl that used `define-register` and… fuck. it was soo fast</text>
  </message>
  <message>
    <ts>2017-06-20T17:49:39.043289</ts>
    <user>U5KU1HNKY</user>
    <text>I didn't _understand_ it… but FAST</text>
  </message>
  <message>
    <ts>2017-06-20T17:49:50.046085</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; in general, what effect do functions-stored-in-structs have on Chez's optimizations?</text>
  </message>
  <message>
    <ts>2017-06-20T17:50:14.052191</ts>
    <user>U07SJGB4H</user>
    <text>is that sort of thing tricky to handle?</text>
  </message>
  <message>
    <ts>2017-06-20T17:50:19.053520</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; I don't think I could give a useful answer there</text>
  </message>
  <message>
    <ts>2017-06-20T17:50:24.054850</ts>
    <user>U0702F2CE</user>
    <text>that's certainly trickier</text>
  </message>
  <message>
    <ts>2017-06-21T10:28:01.487786</ts>
    <user>U5GQ7TC3H</user>
    <text>I agree that the filtering logic is complex. However, I'm not sure that it can be improved through simplification. Using a strict `or` relationship would result in behaviors that, I think would be unintuitive to users. An argument `file:foo.rkt line:20`, for example, would result in all test that are in file `foo.rkt` *or* line 20 being run, when the user probably meant "run the test in foo.rkt on line 20." Similarly with names, under a strict `or` relationship, an argument of `mytest file:foo.rkt` would result in all tests with the name "mytest" *or* the file name `foo.rkt` being run. The user in this circumstance probably meant "Run all the tests named 'mytest' in foo.rkt." The `and` relationship allows users to make more specific queries, which in my opinion is more valuable than simplicity of implemenation, since a user who wishes to cast a wider net can simply run `raco test` multiple times.</text>
  </message>
  <message>
    <ts>2017-06-21T10:34:54.665204</ts>
    <user>U5GQ7TC3H</user>
    <text>I think the primary use case is for users who want to avoid running tests which are computationally expensive or which clutter standard output. It's intended to be used in combination with racket pull request 1726 (&lt;https://github.com/racket/racket/pull/1726&gt;), which allows users of `raco test` to forward arguments to the test modules being invoked. This was inspired in part by the testing frameworks of other popular languages like Ruby and Python, which allow users to specify from the command line sets of names to run.</text>
  </message>
  <message>
    <ts>2017-06-21T13:52:09.346562</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NJS8H7C&gt; I don't know if you saw this failing test, but it seems rktio-related: &lt;http://drdr.racket-lang.org/40902/racket/share/pkgs/unix-socket-test/tests/unix-socket/unix-socket.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T13:56:50.454622</ts>
    <user>U0702F2CE</user>
    <text>similarly this looks like a rktio failure: &lt;http://drdr.racket-lang.org/40902/racket/collects/file/private/glob.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T13:57:05.460532</ts>
    <user>U0702F2CE</user>
    <text>If it would be helpful to track these elsewhere, I can do that</text>
  </message>
  <message>
    <ts>2017-06-21T14:00:22.537312</ts>
    <user>U0702F2CE</user>
    <text>and &lt;http://drdr.racket-lang.org/40902/pkgs/racket-test/tests/file/cache.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T14:36:23.344321</ts>
    <user>U3NJS8H7C</user>
    <text>Thanks – I've been looking at those, but I haven't yet fixed them</text>
  </message>
  <message>
    <ts>2017-06-21T16:27:13.680512</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U3VGR2S7Q&gt; I think the test failure with "unix-socket.rkt" is a bug in "unix-socket.rkt". When the custodian-shutdown callback is triggered for a listener, the listerner struct still has a value for `fd` – so the `prop:evt` callback can recreate the semaphore for `fd` even though that's not a valid file descriptor anymore. Adding a poll of `reg-box` before creating the semaphore makes the test to pass on my machine, but if I'm diagnosing the problem correctly, maybe there's a better repair.</text>
  </message>
  <message>
    <ts>2017-06-21T17:37:17.016663</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U3NJS8H7C&gt;, yes, that makes sense. But now I can't understand why it ever worked in the past. Any idea what changed?</text>
  </message>
  <message>
    <ts>2017-06-21T17:38:24.034956</ts>
    <user>U3NJS8H7C</user>
    <text>The way the fd-semaphore table interacts with the scheduler is probably slightly different than before</text>
  </message>
  <message>
    <ts>2017-06-21T17:40:16.065237</ts>
    <user>U3VGR2S7Q</user>
    <text>I think maybe that code is trying too hard to compose a pretty solution out of nice pieces like custodian-boxes-acting-as-evts. It might be cleaner with another custodian shutdown procedure specialized to listeners. I'll try that.</text>
  </message>
  <message>
    <ts>2017-06-21T18:36:33.843043</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U3NJS8H7C&gt;, just pushed a fix</text>
  </message>
  <message>
    <ts>2017-06-21T23:15:50.187291</ts>
    <user>U5KU1HNKY</user>
    <text>my get-info function for my #lang is buggy… is there a lighter weight way to test it w/o reloading drracket left and right?</text>
  </message>
  <message>
    <ts>2017-06-21T23:16:28.191431</ts>
    <user>U5KU1HNKY</user>
    <text>```
exception raised by exception handler: result arity mismatch;
 expected number of values not received
  expected: 1
  received: 7
  values...:
   "\n"
   'white-space
   #f
   12
   13
   0
   #f; original exception raised: colorer.rkt:11:5: srcloc-token: unbound identifier in module
  in: srcloc-token
```</text>
  </message>
  <message>
    <ts>2017-06-21T23:36:28.318345</ts>
    <user>U5KU1HNKY</user>
    <text>ok… I have that fixed… tho I have to say I have no idea how / why the lexer coloring function works the way it does. Also seems buggy. If I type `prin` it in red. It should go black when I add the final `t` for `print` but then I have a word that is 80% red and 20% black. DrRacket doesn't seem to re-lex &amp;amp; color the whole word as it changes?</text>
  </message>
  <message>
    <ts>2017-06-22T09:38:41.280940</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U5KU1HNKY&gt; DrRacket's colorer depends on the lexer giving it information to back up just enough to recolor. I'm guessing that something about the lexer prevented the colorer from going pack to the "p" to re-lex from there. Exactly what went wrong is difficult to guess, although I recall implementing error tokens wrong once or twice, maybe because it's easy to have the wrong backup or not have the error range covered by a single token.</text>
  </message>
  <message>
    <ts>2017-06-22T11:53:36.583114</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U0702F2CE&gt; On Travis tests: It looks like we spend about 15 minutes on `make`, about 8 minutes on `racket-test-core`, about 20 minutes on `raco pkg` tests, and a little while for the rest.
What if we drop the `raco pkg` tests? Has that set of test ever exposed a problem via Travis that wasn't discovered otherwise (either through DrDr or other tests)?</text>
  </message>
  <message>
    <ts>2017-06-22T11:54:48.611199</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NJS8H7C&gt; I think we probably have at some point, but maybe not enough to be worth it (or worth trying to make the `raco pkg` tests faster)</text>
  </message>
  <message>
    <ts>2017-06-22T11:54:59.615999</ts>
    <user>U0702F2CE</user>
    <text>let me look at the history for the pkg code</text>
  </message>
  <message>
    <ts>2017-06-22T12:12:19.035792</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NJS8H7C&gt; Travis exposed some problems in the `raco pkg` tests themselves, and it's possible that &lt;https://github.com/racket/racket/commit/a5f6bf34dc75e33dd8a09d6ee7c9ea509395feb2&gt; was motivated by Travis tests (but hard to tell now)</text>
  </message>
  <message>
    <ts>2017-06-22T12:12:30.039842</ts>
    <user>U0702F2CE</user>
    <text>that seems to be it that I can find</text>
  </message>
  <message>
    <ts>2017-06-22T12:13:47.068258</ts>
    <user>U0702F2CE</user>
    <text>Not sure that's enough of a positive record to be worth running 80 min of tests on every commit</text>
  </message>
  <message>
    <ts>2017-06-22T12:51:25.898384</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U0702F2CE&gt; I don't recall the immediate motivation there, either. Turning off the `raco pkg` test for Travis seems right to me.</text>
  </message>
  <message>
    <ts>2017-06-22T15:24:15.231393</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U3NJS8H7C&gt; this is what I'm working from: &lt;http://beautifulracket.com/basic-2/the-syntax-colorer.html&gt; — seems straightforward to me. I would have thought it would always be going back some to do coloring… I do find it rather odd that it is creating a `basic-lexer` on each call. What if the language needed stateful info to tell?</text>
  </message>
  <message>
    <ts>2017-06-22T15:31:09.369684</ts>
    <user>U3NJS8H7C</user>
    <text>I'll look a little more, but to answer your last question, the coloring API supports an extended mode to let you thread through state (i.e., store-passing), so the colorer can keep track of which state to send back if it needs to resume from a particular point</text>
  </message>
  <message>
    <ts>2017-06-22T15:56:10.873291</ts>
    <user>U3SEVDPJT</user>
    <text>hi &lt;@U3VGR2S7Q&gt;, may I ask how you were able to configure the build you used to test &lt;https://github.com/racket/racket/pull/1704&gt; changes? I tried doing a local merge with the master branch but the build keeps failing with Racket aborting in middle of `raco setup` so I'm currently unable to replicate the errors you got.

I do totally believe you :slightly_smiling_face: and I understand that my code caused SQL_BUSY status codes to be converted into raised exceptions, breaking automatic retry. I'm just concerned that I'm effectively blind to seeing that at my end.</text>
  </message>
  <message>
    <ts>2017-06-22T16:08:15.124427</ts>
    <user>U3NJS8H7C</user>
    <text>zenspider: I'm not clear what code you're running. Do you mean that you're using "basic-2-tutorial.zip" unmodified?</text>
  </message>
  <message>
    <ts>2017-06-22T16:16:06.277703</ts>
    <user>U5KU1HNKY</user>
    <text>sorry, no. I have implemented all of basic up to the point of implementing the completed colorer, so `#lang basic` w/ my own main and basic/colorer. Lemme see if I'm fully pushed</text>
  </message>
  <message>
    <ts>2017-06-22T16:16:57.294763</ts>
    <user>U5KU1HNKY</user>
    <text>OK. I am: &lt;https://github.com/zenspider/schemers/tree/master/br/basic&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T16:31:19.582453</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U3SEVDPJT&gt; I started with the current master branch and used `hub am` (`hub` is a github-enhanced version of the `git` command) to add your changes. The effect should be the same as starting with your PR branch and rebasing with the current master branch. (And probably the same as just doing a merge, except without the merge commit.) How is the build failing? Out of memory, or something else?</text>
  </message>
  <message>
    <ts>2017-06-22T16:43:23.820688</ts>
    <user>U3NJS8H7C</user>
    <text>Ok, I guess I'm actually unclear on how to get into the state you showed. But I also notice that keywords are given the style `'no-color`, which seems to mean "don't change the color" – that is, if "prin" was formerly red to show an error then it won't be changed to a different color if it becomes part of "print"</text>
  </message>
  <message>
    <ts>2017-06-22T17:44:19.903115</ts>
    <user>U5KU1HNKY</user>
    <text>that's exactly the scenario. I can make a video to show it… but put `print” up there, it'll turn a proper color, backspace once and wait until "prin” goes red, and then type "t”. Only the "t” is black at that point.</text>
  </message>
  <message>
    <ts>2017-06-22T17:44:42.909336</ts>
    <user>U5KU1HNKY</user>
    <text>sorry to bother you with this. mbutterick isn't on anything online and doesn't respond much to my MANY reports against his content</text>
  </message>
  <message>
    <ts>2017-06-22T17:50:20.994746</ts>
    <user>U5KU1HNKY</user>
    <text>well… damn. I can't reproduce the red color right now either… I'm gonna have to back up to figure out why/how</text>
  </message>
  <message>
    <ts>2017-06-23T04:21:37.231520</ts>
    <user>U5KU1HNKY</user>
    <text>OK. Yes, I can reproduce. I had an extra commit from halfway through the next section which adds variables to the lexer. If I roll that out, then the 80% red 20% black thing sticks. If I change the no-color line to symbol, then it does redraw properly. Is there a "normal-but-not-no-color” value? I don't see where drracket's color semantics are documented</text>
  </message>
  <message>
    <ts>2017-06-23T05:03:34.785433</ts>
    <user>U5KU1HNKY</user>
    <text>OK. I used `ag` and dug up `syntax-color` module and decided a fair default was `other` and it seems to have fixed it… I'll send that as feedback to BR</text>
  </message>
  <message>
    <ts>2017-06-23T11:55:22.265052</ts>
    <user>U3SEVDPJT</user>
    <text>So far when I'm building a fresh `amd64` binary on my Windows machine using `nmake win32-in-place` it fails with either error `nmake : fatal error U1077: 'racket/racket.EXE' : return code '0xc0000005'` or `nmake : fatal error U1077: 'racket/racket.EXE' : return code '0xc0000374'` Googling those error codes tell me that it appears to be a memory corruption issue. 

I tried doing build based off just the `master` branch without my changes merged and also a fresh build after doing a checkout of the v6.9 tag. I still get failing builds so I think this is something specific to my machine. I don't know yet what's wrong, I was able to build from the v6.9 codebase without issues at least a month ago.

I'll give this another try when I have access to a different Windows machine. Are you satisfied with the most recent PR commit push?</text>
  </message>
  <message>
    <ts>2017-06-23T20:10:46.801683</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U3SEVDPJT&gt; yes, I'll push them, thanks!</text>
  </message>
  <message>
    <ts>2017-06-26T11:43:22.701180</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; did you have more comments on &lt;https://github.com/racket/rackunit/pull/41&gt; or shall I merge?</text>
  </message>
  <message>
    <ts>2017-06-26T12:30:57.767575</ts>
    <user>U3QF0EM0E</user>
    <text>go merge!</text>
  </message>
  <message>
    <ts>2017-06-26T12:31:17.774855</ts>
    <user>U07SJGB4H</user>
    <text>huzzah!</text>
  </message>
  <message>
    <ts>2017-06-26T17:06:53.444660</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NJS8H7C&gt; since the rktio changes, this test and a few like it have been failing on and off: &lt;http://drdr.racket-lang.org/41014/pkgs/racket-benchmarks/tests/racket/benchmarks/shootout/typed/echo-non-optimizing.rkt&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T17:07:08.449020</ts>
    <user>U0702F2CE</user>
    <text>I realize that's not the most helpful diagnostic information</text>
  </message>
  <message>
    <ts>2017-06-26T17:09:45.495072</ts>
    <user>U0702F2CE</user>
    <text>It's also not clear if this is a concurrency bug in the tests that just started happening because of your changes, or if it's a real bug in Racket</text>
  </message>
  <message>
    <ts>2017-06-26T17:11:09.520486</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U0702F2CE&gt; Is port number 8888 reserved in DrDr for that test?</text>
  </message>
  <message>
    <ts>2017-06-26T17:12:02.535826</ts>
    <user>U0702F2CE</user>
    <text>It's the only occurrence of 8888 in `racket/racket`</text>
  </message>
  <message>
    <ts>2017-06-26T17:12:11.538483</ts>
    <user>U3NJS8H7C</user>
    <text>I guess non-registration would be a `listen` error anyway</text>
  </message>
  <message>
    <ts>2017-06-26T17:12:18.540211</ts>
    <user>U0702F2CE</user>
    <text>is there a reservation mechanism in DrDr that I've forgotten about?</text>
  </message>
  <message>
    <ts>2017-06-26T17:12:50.549967</ts>
    <user>U3NJS8H7C</user>
    <text>There's some list of ports somewhere. Maybe it's not actually registered other than being in the list.</text>
  </message>
  <message>
    <ts>2017-06-26T17:13:12.556320</ts>
    <user>U3NJS8H7C</user>
    <text>Looking at that test, though, isn't there a race between the client starting and the server listening?</text>
  </message>
  <message>
    <ts>2017-06-26T17:16:33.614686</ts>
    <user>U0702F2CE</user>
    <text>it does look like a race</text>
  </message>
  <message>
    <ts>2017-06-26T17:18:35.648829</ts>
    <user>U0702F2CE</user>
    <text>looks like the race was there from the beginning, in &lt;https://github.com/racket/racket/blob/d615bccb08274398f347b78a1dd746fe40eb3671/collects/tests/mzscheme/benchmarks/shootout/echo.ss&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T17:18:43.651144</ts>
    <user>U0702F2CE</user>
    <text>I'll add some synchronization</text>
  </message>
  <message>
    <ts>2017-06-26T17:34:53.916921</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U0702F2CE&gt; what's the racket'y way of doing that? I don't find an equivalent to C/unix `select`, which is what I'd normally reach for…</text>
  </message>
  <message>
    <ts>2017-06-26T17:35:15.922509</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U5KU1HNKY&gt; `sync` is the equivalent of `select`</text>
  </message>
  <message>
    <ts>2017-06-26T17:35:28.926122</ts>
    <user>U0702F2CE</user>
    <text>but in this case I think I can just start the client later</text>
  </message>
  <message>
    <ts>2017-06-26T17:36:10.936463</ts>
    <user>U0702F2CE</user>
    <text>no, that's wrong too</text>
  </message>
  <message>
    <ts>2017-06-26T17:36:29.941640</ts>
    <user>U5KU1HNKY</user>
    <text>heh. sure.</text>
  </message>
  <message>
    <ts>2017-06-26T17:36:58.948997</ts>
    <user>U5KU1HNKY</user>
    <text>hrm. sync is on _any_ data you send through the channel?</text>
  </message>
  <message>
    <ts>2017-06-26T17:37:10.952408</ts>
    <user>U5KU1HNKY</user>
    <text>that's nice</text>
  </message>
  <message>
    <ts>2017-06-26T17:37:30.957456</ts>
    <user>U0702F2CE</user>
    <text>`sync` is very nice</text>
  </message>
  <message>
    <ts>2017-06-26T17:37:39.959628</ts>
    <user>U0702F2CE</user>
    <text>and more composable than select</text>
  </message>
  <message>
    <ts>2017-06-26T17:38:12.967988</ts>
    <user>U5KU1HNKY</user>
    <text>but `break` is an exception, not some sort of event you send through?</text>
  </message>
  <message>
    <ts>2017-06-26T17:38:28.972080</ts>
    <user>U5KU1HNKY</user>
    <text>hrm… I can't tell how the break stuff gets fired</text>
  </message>
  <message>
    <ts>2017-06-26T17:41:26.017247</ts>
    <user>U5KU1HNKY</user>
    <text>is it more idiomatic to send off a `break-thread` to all your child threads or to send through some sort of `stop` datum/event to all of them?</text>
  </message>
  <message>
    <ts>2017-06-26T17:43:06.042681</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U5KU1HNKY&gt; why would you need to do that?</text>
  </message>
  <message>
    <ts>2017-06-26T17:43:57.055640</ts>
    <user>U5KU1HNKY</user>
    <text>thinking of the worker model… fire off a pool of threads to do work, throw them things to work on via `sync`, then when you're done shut them down by telling them to stop somehow</text>
  </message>
  <message>
    <ts>2017-06-26T17:44:07.058037</ts>
    <user>U5KU1HNKY</user>
    <text>might be backwards thinking in racket land</text>
  </message>
  <message>
    <ts>2017-06-26T17:44:35.065411</ts>
    <user>U0702F2CE</user>
    <text>mostly you do `thread`-per-connection</text>
  </message>
  <message>
    <ts>2017-06-26T17:52:21.181971</ts>
    <user>U07SJGB4H</user>
    <text>worker thread pools are more useful when stopping and starting threads is expensive and the resource overhead per-thread is significant</text>
  </message>
  <message>
    <ts>2017-06-26T17:52:56.190549</ts>
    <user>U07SJGB4H</user>
    <text>for green thread systems like racket's that's typically not the case</text>
  </message>
  <message>
    <ts>2017-06-26T17:53:20.196308</ts>
    <user>U0702F2CE</user>
    <text>right, I use pools of Racket places in some situations</text>
  </message>
  <message>
    <ts>2017-06-26T17:53:24.197278</ts>
    <user>U0702F2CE</user>
    <text>since those are expensive</text>
  </message>
  <message>
    <ts>2017-06-26T17:53:55.204826</ts>
    <user>U07SJGB4H</user>
    <text>a package providing a nice place-pool abstraction might be useful</text>
  </message>
  <message>
    <ts>2017-06-26T17:55:19.225491</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; out of curiosity, do you know of any multicore webservers written in racket with places?</text>
  </message>
  <message>
    <ts>2017-06-26T17:55:53.233657</ts>
    <user>U0702F2CE</user>
    <text>I think I've seen examples, but not that I recall offhand</text>
  </message>
  <message>
    <ts>2017-06-26T17:59:03.279019</ts>
    <user>U3ZV4UG3T</user>
    <text>&lt;@U07SJGB4H&gt; I've played around with that idea in the past. I think it would be a bit more straightforward if a tcp listener could be sent over a place channel.</text>
  </message>
  <message>
    <ts>2017-06-26T18:03:08.338884</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3ZV4UG3T&gt; how'd it work out? my first impression is that it seems like individual places should be responsible for binding to OS ports, but I haven't really done more than idly daydream about the problem</text>
  </message>
  <message>
    <ts>2017-06-26T18:05:54.377426</ts>
    <user>U3ZV4UG3T</user>
    <text>&lt;@U07SJGB4H&gt; I never took the idea very far :slightly_smiling_face:

You definitely could have different places bind to different ports, but then you'd need a proxy layer in front of that, right? You can also leave a single place in charge of accepting connections and handing them off to workers (which is what I was toying around with), but that seems like a bit lightweight of a task for a place.</text>
  </message>
  <message>
    <ts>2017-06-26T18:06:57.391388</ts>
    <user>U07SJGB4H</user>
    <text>proxy layer would definitely be needed, yes</text>
  </message>
  <message>
    <ts>2017-06-26T18:07:10.394280</ts>
    <user>U07SJGB4H</user>
    <text>specifically I was thinking of how to make a Racket web service with the SEDA architecture &lt;https://en.wikipedia.org/wiki/Staged_event-driven_architecture&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T21:23:02.249685</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; :party: :party: :party: &lt;https://github.com/racket/rackunit/pull/48&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T21:46:21.423778</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3QF0EM0E&gt; &lt;http://drdr.racket-lang.org/41016/racket/share/pkgs/redex-test/redex/tests/run-tests.rkt&gt; looks like it's caused by your changes</text>
  </message>
  <message>
    <ts>2017-06-27T17:11:48.420307</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; responded to #48, assuming your approval means it's good to merge</text>
  </message>
  <message>
    <ts>2017-06-27T17:12:58.440984</ts>
    <user>U07SJGB4H</user>
    <text>death to the monads :tada:</text>
  </message>
  <message>
    <ts>2017-06-27T17:24:10.642788</ts>
    <user>U3QF0EM0E</user>
    <text>yep! I just had those little questions</text>
  </message>
  <message>
    <ts>2017-06-27T17:27:17.698440</ts>
    <user>U07SJGB4H</user>
    <text>thanks for all the reviews :)</text>
  </message>
  <message>
    <ts>2017-06-27T17:28:25.718344</ts>
    <user>U3QF0EM0E</user>
    <text>of course, I'm just a concerned user of Rackunit. Thanks for all the improvements</text>
  </message>
  <message>
    <ts>2017-06-27T19:54:34.546247</ts>
    <user>U07SJGB4H</user>
    <text>would it be inappropriate for rackunit to depend on `syntax/parse`?</text>
  </message>
  <message>
    <ts>2017-06-27T19:55:28.554953</ts>
    <user>U07SCV14J</user>
    <text>I doubt it would be a problem, given that `syntax/parse` is in `base`</text>
  </message>
  <message>
    <ts>2017-06-27T19:56:21.562866</ts>
    <user>U07SJGB4H</user>
    <text>I'm less worried about package dependencies and more worried about test execution speed slowing down if loading `syntax/parse` is expensive</text>
  </message>
  <message>
    <ts>2017-06-27T19:57:27.573133</ts>
    <user>U07SCV14J</user>
    <text>I guess that's a valid concern, yeah</text>
  </message>
  <message>
    <ts>2017-06-27T19:58:30.582336</ts>
    <user>U07SJGB4H</user>
    <text>but I have no idea how expensive loading `syntax/parse` is</text>
  </message>
  <message>
    <ts>2017-06-27T20:28:51.849913</ts>
    <user>U0702F2CE</user>
    <text>It should be fine</text>
  </message>
  <message>
    <ts>2017-06-27T23:37:19.233141</ts>
    <user>U5KU1HNKY</user>
    <text>Is there a way to "run” an input file as if it had a `#lang xxx` line at the front… basically say eval this port/file/whatever with xxx lang?</text>
  </message>
  <message>
    <ts>2017-06-27T23:38:02.237234</ts>
    <user>U5KU1HNKY</user>
    <text>I want to write a more "traditional” style of tool, then have that slurp into racket as if it were a `.rkt` file with a proper `#lang`</text>
  </message>
  <message>
    <ts>2017-06-28T07:35:17.241479</ts>
    <user>U0L0F9F2Q</user>
    <text>&lt;@U5KU1HNKY&gt; if its a module language (and doesn't have a special reader), you can read the file in, construct a module with the language xxx and the read in stuff as the body, and eval that. might be an easier way though</text>
  </message>
  <message>
    <ts>2017-06-28T09:52:23.498947</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U5KU1HNKY&gt; If the module language does have a reader, you can call it directory, but another option is to use `input-port-append` to add the `#lang` line. In any case, to handle relative paths,  you'll want to set `current-load-relative-directory` while reading; to get the module declaration associated with the original path, set `current-module-declare-name` during `eval`.</text>
  </message>
  <message>
    <ts>2017-06-29T12:57:31.134607</ts>
    <user>U086VDRBK</user>
    <text>Is the order of the marks of continuation-mark-set-&amp;gt;list specified?  &lt;http://docs.racket-lang.org/reference/contmarks.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T13:14:35.510839</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U086VDRBK&gt; the innermost mark is first, I think</text>
  </message>
  <message>
    <ts>2017-06-29T13:14:54.517418</ts>
    <user>U086VDRBK</user>
    <text>Makes sense.</text>
  </message>
  <message>
    <ts>2017-06-30T14:00:57.580946</ts>
    <user>U0702F2CE</user>
    <text>discussion about 2d syntax on Hacker News: &lt;https://news.ycombinator.com/item?id=14657857&gt; (cc &lt;@U3NGSC6AF&gt;)</text>
  </message>
  <message>
    <ts>2017-06-30T14:02:18.609785</ts>
    <user>U3NGSC6AF</user>
    <text>whee!</text>
  </message>
  <message>
    <ts>2017-06-30T14:02:29.613605</ts>
    <user>U0702F2CE</user>
    <text>it's actually pretty positive</text>
  </message>
  <message>
    <ts>2017-06-30T15:14:52.015781</ts>
    <user>U086VDRBK</user>
    <text>There has been some Racket talk on HN lately.   &lt;https://hn.algolia.com/?query=racket&amp;amp;sort=byDate&amp;amp;prefix&amp;amp;page=0&amp;amp;dateRange=pastWeek&amp;amp;type=all&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T17:13:41.061803</ts>
    <user>U5KU1HNKY</user>
    <text>are there macro forms of IO that don't take thunks? (iow, use `expr ...`) just feels klunky</text>
  </message>
  <message>
    <ts>2017-07-01T17:15:01.066821</ts>
    <user>U5KU1HNKY</user>
    <text>also, I'm trying to do &lt;@U3NJS8H7C&gt;'s suggestion of using `input-port-append` to prepend a `#lang` line … Will location info be for the concatenation or for each port being used? IE, will error info be off-by-one?</text>
  </message>
  <message>
    <ts>2017-07-01T17:16:57.073900</ts>
    <user>U5KU1HNKY</user>
    <text>Hrm… actually:

```
UNKNOWN::0: read: #lang not enabled in the current context
```</text>
  </message>
  <message>
    <ts>2017-07-01T17:17:38.076465</ts>
    <user>U5KU1HNKY</user>
    <text>… that must be from C? I can't find it in the racket source</text>
  </message>
  <message>
    <ts>2017-07-01T17:41:53.168949</ts>
    <user>U07SD9T7W</user>
    <text>&lt;@U5KU1HNKY&gt;  `#lang not enabled in the current context` usually means you want `with-module-reading-parameterization`</text>
  </message>
  <message>
    <ts>2017-07-01T17:45:43.182552</ts>
    <user>U5KU1HNKY</user>
    <text>looking… I used `(read-accept-reader #t)` and feel like I'm going down a rabbit hole</text>
  </message>
  <message>
    <ts>2017-07-01T17:48:31.193241</ts>
    <user>U5KU1HNKY</user>
    <text>same rabbit hole:

```
dynamic-require: name is not provided
name: 'read
module: #&amp;lt;resolved-module-path:(submod "/Users/ryan/Work/git/zenspider/schemers/br/basic/main.rkt" reader)&amp;gt;
```

the only dynamic-require I use anywhere is for the colorer, which shouldn't be invoked at this point</text>
  </message>
  <message>
    <ts>2017-07-01T17:48:59.194803</ts>
    <user>U5KU1HNKY</user>
    <text>also, `syntax/modred` vs `syntax/module-reader`? :confused:</text>
  </message>
  <message>
    <ts>2017-07-01T17:57:15.225582</ts>
    <user>U5KU1HNKY</user>
    <text>ok. Stole some code from &lt;https://github.com/AlexKnauth/postfix-dot-notation/blob/master/postfix-dot-notation/lang/reader.rkt&gt; and have it reading in correctly. Don't understand why `read` is the wrong approach but `read-syntax` works just fine</text>
  </message>
  <message>
    <ts>2017-07-01T18:31:28.357277</ts>
    <user>U5KU1HNKY</user>
    <text>can somebody help me with this last bit? I clearly don't understand something in the glue of racket's `#lang` handling:

&lt;https://gist.github.com/6c4e50cdea9925f706ac1ff0019e3105&gt;

outputs:

```
code:
(module basic-mod basic/expander
  (b-program
   (b-line ...lots of stuff...)))
define:
run:
dynamic-require: unknown module
  module name: #&amp;lt;resolved-module-path:'basic-mod&amp;gt;
  context...:
   /Users/ryan/Work/git/zenspider/schemers/br/basic/basic: [running body]
```</text>
  </message>
  <message>
    <ts>2017-07-01T18:49:22.421178</ts>
    <user>U3NJS8H7C</user>
    <text>The module is declared in `ns`, but `ns` isn't the current namespace when `dynamic-require` looks for a module.</text>
  </message>
  <message>
    <ts>2017-07-01T18:55:45.443831</ts>
    <user>U5KU1HNKY</user>
    <text>but if  I declare the module in current-namespace then it blows up because `module` and `#%app` aren't defined</text>
  </message>
  <message>
    <ts>2017-07-01T18:56:16.445680</ts>
    <user>U3NJS8H7C</user>
    <text>I recommend using `dynamic-wind` with `ns`:
```
(parameterize ([current-namespace ns])
    (dynamic-require ''basic-mod #f))
```</text>
  </message>
  <message>
    <ts>2017-07-01T18:57:01.448046</ts>
    <user>U5KU1HNKY</user>
    <text>and not using `make-resolved-module-path` ?</text>
  </message>
  <message>
    <ts>2017-07-01T18:57:20.449300</ts>
    <user>U5KU1HNKY</user>
    <text>that was it…</text>
  </message>
  <message>
    <ts>2017-07-01T18:57:32.449980</ts>
    <user>U5KU1HNKY</user>
    <text>how could I have figured that out??</text>
  </message>
  <message>
    <ts>2017-07-01T18:59:37.457078</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U5KU1HNKY&gt; what led you to use `make-resolved-module-path` originally? was that described in Beautiful Racket?</text>
  </message>
  <message>
    <ts>2017-07-01T19:00:12.459518</ts>
    <user>U3NJS8H7C</user>
    <text>Using `woot` in place of `''basic-mod` (uncommenting out the two earlier lines that set it up) is a fine idea. Usually the goal is to use a path instead of a symbol, though.</text>
  </message>
  <message>
    <ts>2017-07-01T19:00:44.461934</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U0702F2CE&gt; I think I earlier recommended using `current-module-declare-name`, which needs a resolved module path</text>
  </message>
  <message>
    <ts>2017-07-01T19:04:17.475386</ts>
    <user>U5KU1HNKY</user>
    <text>wow! `Process Racket REPL abort trap: 6` go me!</text>
  </message>
  <message>
    <ts>2017-07-01T19:05:00.477783</ts>
    <user>U5KU1HNKY</user>
    <text>should my reader be doing a gensym for the module name? If I add multiple basic files on the cmdline the second one blows up because it's the same name</text>
  </message>
  <message>
    <ts>2017-07-01T19:05:41.480417</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U3NJS8H7C&gt; thank you… that was 2 hours in the making and I wouldn't have come up with that diagnosis or that 2 line block of code</text>
  </message>
  <message>
    <ts>2017-07-01T19:06:16.482465</ts>
    <user>U5KU1HNKY</user>
    <text>is there a way to tell that I'm running in the repl vs not?</text>
  </message>
  <message>
    <ts>2017-07-01T19:06:36.483596</ts>
    <user>U5KU1HNKY</user>
    <text>right now I'm testing `(current-command-line-arguments)` being empty, but that isn't right</text>
  </message>
  <message>
    <ts>2017-07-01T19:07:19.486182</ts>
    <user>U07SJGB4H</user>
    <text>The REPL wraps forms in `#%top-interaction`, so you could customize that form to set a parameter that you inspect</text>
  </message>
  <message>
    <ts>2017-07-01T19:09:57.495544</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U07SJGB4H&gt; … idgi… how would it know that it is in the repl? by being used? that implies I won't know until it's eval'd something and displayed it?</text>
  </message>
  <message>
    <ts>2017-07-01T19:11:20.500715</ts>
    <user>U07SJGB4H</user>
    <text>Racket wraps all REPL expressions in `#%top-interaction` for you. So you define your lang's `#%top-interaction` to be a macro that sets a parameter like `(current-eval-is-repl?)` to true, then you can dynamically do something different in the repl.</text>
  </message>
  <message>
    <ts>2017-07-01T19:12:27.504509</ts>
    <user>U07SJGB4H</user>
    <text>The `#lang racket` language doesn't do this so it would only work in a custom language where you redefined `#%top-interaction`</text>
  </message>
  <message>
    <ts>2017-07-01T19:35:19.583454</ts>
    <user>U5KU1HNKY</user>
    <text>ok. `make-resolved-module-path` with `gensym` seems to be a happy combo</text>
  </message>
  <message>
    <ts>2017-07-01T19:35:29.584073</ts>
    <user>U5KU1HNKY</user>
    <text>here's my latest version: &lt;https://gist.github.com/zenspider/6c4e50cdea9925f706ac1ff0019e3105&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T19:35:51.585290</ts>
    <user>U5KU1HNKY</user>
    <text>I'm now trying to take it one step further and get it so I can shebang the basic files and run them directly</text>
  </message>
  <message>
    <ts>2017-07-01T19:37:07.589854</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; can I suggest that you do development on your fork, rather than in `racket/rackunit`?</text>
  </message>
  <message>
    <ts>2017-07-01T19:37:19.590547</ts>
    <user>U0702F2CE</user>
    <text>I ask mostly because commits to `racket/rackunit` send a bunch of people mail</text>
  </message>
  <message>
    <ts>2017-07-01T19:38:52.595687</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; is it possible to change the mail settings? working on the fork is slightly irritating</text>
  </message>
  <message>
    <ts>2017-07-01T19:39:43.598697</ts>
    <user>U0702F2CE</user>
    <text>Sadly there's no option to only send mail for `master`</text>
  </message>
  <message>
    <ts>2017-07-01T19:39:54.599551</ts>
    <user>U07SJGB4H</user>
    <text>is it github mail or travis mail?</text>
  </message>
  <message>
    <ts>2017-07-01T19:40:50.602923</ts>
    <user>U0702F2CE</user>
    <text>it's github mail</text>
  </message>
  <message>
    <ts>2017-07-01T19:42:07.607184</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U07SJGB4H&gt; I think if you worked in a branch it wouldn't send email</text>
  </message>
  <message>
    <ts>2017-07-01T19:42:40.609011</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U5KU1HNKY&gt; that's not correct, sadly -- &lt;@U07SJGB4H&gt; is working on a branch</text>
  </message>
  <message>
    <ts>2017-07-01T19:42:44.609254</ts>
    <user>U07SJGB4H</user>
    <text>I am working in branches - checking &lt;https://help.github.com/articles/about-notification-emails/&gt; for more details</text>
  </message>
  <message>
    <ts>2017-07-01T19:42:58.610053</ts>
    <user>U5KU1HNKY</user>
    <text>at least… that's how we work on some of our projects and we don't get inundated by my crazy commit storms</text>
  </message>
  <message>
    <ts>2017-07-01T19:43:14.611013</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; it's a hook, that sends mail to a mailing list</text>
  </message>
  <message>
    <ts>2017-07-01T19:43:19.611301</ts>
    <user>U0702F2CE</user>
    <text>it's not notification email</text>
  </message>
  <message>
    <ts>2017-07-01T19:43:26.611703</ts>
    <user>U07SJGB4H</user>
    <text>ohhh, so it's not coming directly from github?</text>
  </message>
  <message>
    <ts>2017-07-01T19:43:37.612265</ts>
    <user>U07SJGB4H</user>
    <text>wait what list</text>
  </message>
  <message>
    <ts>2017-07-01T19:44:09.614083</ts>
    <user>U0702F2CE</user>
    <text>github has an "email" service, and that's set up to email `&lt;mailto:committers@racket-lang.org|committers@racket-lang.org&gt;` which is basically all the people who got email before we moved the canonical repo to github</text>
  </message>
  <message>
    <ts>2017-07-01T19:44:16.614490</ts>
    <user>U5KU1HNKY</user>
    <text>ah. gotcha</text>
  </message>
  <message>
    <ts>2017-07-01T19:44:43.616207</ts>
    <user>U07SJGB4H</user>
    <text>this thing? &lt;https://help.github.com/articles/managing-notifications-for-pushes-to-a-repository/#enabling-email-service-notifications-for-pushes-to-your-repository&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T19:44:59.617128</ts>
    <user>U0702F2CE</user>
    <text>perhaps we should just get rid of it, but for the moment it's easier to just keep it</text>
  </message>
  <message>
    <ts>2017-07-01T19:45:15.618218</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; yes</text>
  </message>
  <message>
    <ts>2017-07-01T19:45:45.619997</ts>
    <user>U5KU1HNKY</user>
    <text>final version… &lt;https://gist.github.com/zenspider/6c4e50cdea9925f706ac1ff0019e3105&gt; … is something like `run-with-lang` of general use?</text>
  </message>
  <message>
    <ts>2017-07-01T19:48:25.629611</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; I'll work on the fork, sorry about the noise</text>
  </message>
  <message>
    <ts>2017-07-01T19:48:32.629966</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; thanks</text>
  </message>
  <message>
    <ts>2017-07-01T19:48:39.630352</ts>
    <user>U07SJGB4H</user>
    <text>shame it can't distinguish master from non-master though</text>
  </message>
  <message>
    <ts>2017-07-01T19:49:07.631868</ts>
    <user>U0702F2CE</user>
    <text>This is in reality not a great system since it's really reliant on the not-true idea that there's a general "committers" set for all of Racket</text>
  </message>
  <message>
    <ts>2017-07-01T19:49:25.632874</ts>
    <user>U07SJGB4H</user>
    <text>was it created pre-package-split?</text>
  </message>
  <message>
    <ts>2017-07-01T19:50:16.635800</ts>
    <user>U0702F2CE</user>
    <text>no it was created to emulate the old behavior when we split the old repository</text>
  </message>
  <message>
    <ts>2017-07-01T19:50:35.636883</ts>
    <user>U0702F2CE</user>
    <text>because the old repo of course had a single set of committers</text>
  </message>
  <message>
    <ts>2017-07-01T19:50:47.637526</ts>
    <user>U07SJGB4H</user>
    <text>gotcha</text>
  </message>
  <message>
    <ts>2017-07-01T19:53:21.645456</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; the incomplete PRs I've got open already would be difficult to move, is it alright if I just do new dev on the fork?</text>
  </message>
  <message>
    <ts>2017-07-01T19:53:51.647116</ts>
    <user>U0702F2CE</user>
    <text>yes that's certainly fine</text>
  </message>
  <message>
    <ts>2017-07-03T06:27:48.540598</ts>
    <user>U5KU1HNKY</user>
    <text>is it possible to profile / report where startup time is being spent? cost of requires and #langs I guess?</text>
  </message>
  <message>
    <ts>2017-07-03T11:59:24.861468</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U5KU1HNKY&gt; You could try `racket -l mzlib/traceld -t &amp;lt;your-module&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-07-03T17:14:41.175465</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U3NJS8H7C&gt; are those milliseconds?</text>
  </message>
  <message>
    <ts>2017-07-03T17:15:03.179803</ts>
    <user>U3NJS8H7C</user>
    <text>Yes, CPU milliseconds since startup</text>
  </message>
  <message>
    <ts>2017-07-03T17:16:23.196266</ts>
    <user>U5KU1HNKY</user>
    <text>huh… it hits my lexer and loads rackunit, even tho the require is in a submodule that isn't being activated</text>
  </message>
  <message>
    <ts>2017-07-03T17:16:28.197360</ts>
    <user>U5KU1HNKY</user>
    <text>```
  loading /Users/ryan/Work/git/zenspider/schemers/br/basic/lexer.rkt at 1063
   loading /MyApplications/dev/lisp/Racket/share/pkgs/rackunit-lib/rackunit/compiled/main_rkt.zo at 1243
```</text>
  </message>
  <message>
    <ts>2017-07-03T17:18:26.221158</ts>
    <user>U07SCV14J</user>
    <text>it looks like it isn't loading `lexer.rkt` from a `.zo`, so it would need to load rackunit to compile `lexer.rkt`</text>
  </message>
  <message>
    <ts>2017-07-03T17:18:42.224116</ts>
    <user>U07SCV14J</user>
    <text>try precompiling the lexer?</text>
  </message>
  <message>
    <ts>2017-07-03T17:18:49.225558</ts>
    <user>U5KU1HNKY</user>
    <text>ah</text>
  </message>
  <message>
    <ts>2017-07-03T17:20:06.240269</ts>
    <user>U5KU1HNKY</user>
    <text>compiling the lexer and expander count for .6-.7s… but it's still a lot more than it feels like it should be</text>
  </message>
  <message>
    <ts>2017-07-03T17:20:32.245365</ts>
    <user>U5KU1HNKY</user>
    <text>nice to see just how much is loading… I'll write a post-processor for that tracer output to report the expensive bits nicely</text>
  </message>
  <message>
    <ts>2017-07-04T17:54:59.626650</ts>
    <user>U5KU1HNKY</user>
    <text>hey. I made a thing to make profiling load times easier to figure out: &lt;https://gist.github.com/d31e7d54e8350370b141393f4afc24d6&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T17:55:17.628752</ts>
    <user>U5KU1HNKY</user>
    <text>I'll port to racket later</text>
  </message>
  <message>
    <ts>2017-07-04T18:04:26.691821</ts>
    <user>U60J15S1Y</user>
    <text>is there anyway to catch a `(values x y ...)` as a whole when passing it to a function?</text>
  </message>
  <message>
    <ts>2017-07-04T18:16:32.770800</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U60J15S1Y&gt; ? can you explain?</text>
  </message>
  <message>
    <ts>2017-07-04T18:19:30.788161</ts>
    <user>U60J15S1Y</user>
    <text>for example, I have a function `f` and it takes one argument, when applying `(values ...)` to `f`, I would like to use `(values ...)` as a single variable inside of `f`</text>
  </message>
  <message>
    <ts>2017-07-04T18:19:34.788567</ts>
    <user>U2Y8JBMUJ</user>
    <text>Something like &lt;https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._call-with-values%29%29&gt; , or maybe &lt;https://docs.racket-lang.org/sugar/index.html?q=values-%3E#(form._((lib._sugar%2Flist..rkt)._values-~3elist))&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-04T18:20:23.793640</ts>
    <user>U5KU1HNKY</user>
    <text>(call-with-values (thunk (values 1 2 3)) list) ; ‘(1 2 3)</text>
  </message>
  <message>
    <ts>2017-07-04T18:20:55.797095</ts>
    <user>U5KU1HNKY</user>
    <text>but… I don't think you can make a function that takes a variable number of values… hence the thunk</text>
  </message>
  <message>
    <ts>2017-07-04T18:20:57.797347</ts>
    <user>U60J15S1Y</user>
    <text>I do found `call-with-values` but it restricts me to put values inside of lambda, I'm just looking for a more elegant way to do this</text>
  </message>
  <message>
    <ts>2017-07-04T18:21:35.801309</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U60J15S1Y&gt; why do you want to apply `values` as an arg? can you explain what you're trying to do?</text>
  </message>
  <message>
    <ts>2017-07-04T18:23:47.815077</ts>
    <user>U5KU1HNKY</user>
    <text>&amp;gt; It is impossible to bind the evaluated result of values expression to a single variable unlike other Scheme expressions

&lt;http://docs.racket-lang.org/srfi/srfi-86.html&gt;

Might want to check out mu/nu from 86</text>
  </message>
  <message>
    <ts>2017-07-04T18:23:52.815632</ts>
    <user>U5KU1HNKY</user>
    <text>they look interesting</text>
  </message>
  <message>
    <ts>2017-07-04T18:24:04.816775</ts>
    <user>U60J15S1Y</user>
    <text>Well, I have a function that returns `values`, I would like to compare the results of two applications of that function. Probably macro could do that?</text>
  </message>
  <message>
    <ts>2017-07-04T18:24:40.820857</ts>
    <user>U5KU1HNKY</user>
    <text>```
(define v (values 1 2 3))		=&amp;gt; error
(define v (lambda () (values 1 2 3)))	=&amp;gt; (lambda () (values 1 2 3))
(define m (mu 1 2 3))			=&amp;gt; (lambda (f) (f 1 2 3))
(define a (apply values 1 '(2 3)))	=&amp;gt; error
(define a
  (lambda () (apply values 1 '(2 3))))	=&amp;gt; (lambda () (apply values 1 '(2 3)))
(define n (nu 1 '(2 3)))		=&amp;gt; (lambda (f) (apply f 1 '(2 3)))

(call-with-values v list)	=&amp;gt; (1 2 3)
(m list)			=&amp;gt; (1 2 3)
(call-with-values a list)	=&amp;gt; (1 2 3)
(n list)			=&amp;gt; (1 2 3)
```</text>
  </message>
  <message>
    <ts>2017-07-04T18:25:36.826735</ts>
    <user>U5KU1HNKY</user>
    <text>so for testing? yeah… you could do that with a macro. wrap up LHS and RHS with call-with-values … list</text>
  </message>
  <message>
    <ts>2017-07-04T18:25:48.828186</ts>
    <user>U5KU1HNKY</user>
    <text>then use check-equal?</text>
  </message>
  <message>
    <ts>2017-07-04T18:26:42.834146</ts>
    <user>U60J15S1Y</user>
    <text>yeah, for testing, right, for now I just put `values` into a lambda and use nested call-with-values, then I could compare the equality of two lists</text>
  </message>
  <message>
    <ts>2017-07-04T18:27:36.839791</ts>
    <user>U60J15S1Y</user>
    <text>&lt;@U5KU1HNKY&gt; anyway, SRFI-86 looks helpful, thank you!</text>
  </message>
  <message>
    <ts>2017-07-06T17:14:12.614563</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U0702F2CE|samth&gt; set the channel topic: Racket — &lt;http://racket-lang.org&gt; — &lt;http://pasterack.org&gt; - Slack invite link: &lt;http://racket-slack.herokuapp.com&gt; - Archives: &lt;http://racket.slackarchive.io/&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T17:21:59.810353</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3NP867S6&gt; if I wanted to write benchmarks for a package that are part of a test suite and don't produce pretty plots, should I extend &lt;https://github.com/stamourv/racket-benchmark&gt; or would I be better off making my own package for that?</text>
  </message>
  <message>
    <ts>2017-07-06T17:26:50.932734</ts>
    <user>U3QF0EM0E</user>
    <text>notjack: extending `racket-benchmark` would be cool</text>
  </message>
  <message>
    <ts>2017-07-06T17:27:49.956857</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3QF0EM0E&gt; do you use it often?</text>
  </message>
  <message>
    <ts>2017-07-06T17:28:01.961553</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U07SJGB4H&gt;: Sure, I'm all for making racket-benchmark better!</text>
  </message>
  <message>
    <ts>2017-07-06T17:28:31.973815</ts>
    <user>U3NP867S6</user>
    <text>We have a number of experiments that use it, so not breaking it is important, but improvements would be welcome!</text>
  </message>
  <message>
    <ts>2017-07-06T17:29:26.996674</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3NP867S6&gt; do you have links to some of the experiments?</text>
  </message>
  <message>
    <ts>2017-07-06T17:30:21.019787</ts>
    <user>U3NP867S6</user>
    <text>Not directly, but I think some of our research artifacts may have some, lemme check.</text>
  </message>
  <message>
    <ts>2017-07-06T17:31:39.052635</ts>
    <user>U3QF0EM0E</user>
    <text>never</text>
  </message>
  <message>
    <ts>2017-07-06T17:32:13.066211</ts>
    <user>U3QF0EM0E</user>
    <text>but yeah I had put some benchmarks here: &lt;https://github.com/nuprl/gradual-typing-performance/tree/master/benchmarks&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T17:32:34.074986</ts>
    <user>U3QF0EM0E</user>
    <text>and then I put some others here: &lt;https://github.com/bennn/eidetic/tree/master/benchmarks/rkt&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T17:33:11.089712</ts>
    <user>U3QF0EM0E</user>
    <text>and this is getting silly. Usually I want some tooling around these benchmarks (to reproduce data in a paper), but the code should all be in 1 place</text>
  </message>
  <message>
    <ts>2017-07-06T17:33:40.101264</ts>
    <user>U3QF0EM0E</user>
    <text>like the larceny benchmarks &lt;http://www.larcenists.org/benchmarksAboutR7.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T17:33:41.101785</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U07SJGB4H&gt;: Here's one artifact: &lt;http://drops.dagstuhl.de/opus/frontdoor.php?source_opus=5514&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T17:33:58.108793</ts>
    <user>U3NP867S6</user>
    <text>It's a large VM, that has a benchmark suite (and other stuff) inside.</text>
  </message>
  <message>
    <ts>2017-07-06T17:34:26.119777</ts>
    <user>U07SJGB4H</user>
    <text>thanks &lt;@U3QF0EM0E&gt; and &lt;@U3NP867S6&gt;  for links :)</text>
  </message>
  <message>
    <ts>2017-07-06T17:34:48.128476</ts>
    <user>U07SJGB4H</user>
    <text>really the main thing I want is something like `(check-faster (foo-benchmark foo-impl1) (foo-benchmark foo-impl2))`</text>
  </message>
  <message>
    <ts>2017-07-06T17:37:13.185709</ts>
    <user>U3NP867S6</user>
    <text>Oh, sure. That should be easy to do with the results data structure.</text>
  </message>
  <message>
    <ts>2017-07-06T17:37:34.194115</ts>
    <user>U3NP867S6</user>
    <text>Beware of the case where the confidence intervals overlap, though. Can't conclude that either is faster.</text>
  </message>
  <message>
    <ts>2017-07-06T17:40:57.271814</ts>
    <user>U07SJGB4H</user>
    <text>memory consumption benchmarks instead of timing benchmarks would also be useful</text>
  </message>
  <message>
    <ts>2017-07-06T17:52:40.537643</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U07SJGB4H&gt; I have benchmark-ips… it might help normalize some of the error</text>
  </message>
  <message>
    <ts>2017-07-06T17:53:30.557274</ts>
    <user>U5KU1HNKY</user>
    <text>and in minitest, I have minitest/benchmark which allows you to assert that the performance of a block of code fits well to a particular curve. Allows tests to pass regardless of the hardware you run on.</text>
  </message>
  <message>
    <ts>2017-07-06T17:59:12.681687</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U5KU1HNKY&gt; I definitely want curve-fitting perf tests for racket. The lens library in particular could benefit from perf testing.</text>
  </message>
  <message>
    <ts>2017-07-06T18:00:38.715110</ts>
    <user>U5KU1HNKY</user>
    <text>basically looks like:

```
    def bench_my_algorithm
      assert_performance_linear 0.9999 do |n| # n is a range value
        @obj.my_algorithm(n)
      end
    end
```

And asserts against the R^2 of the fit instead of actual measurements</text>
  </message>
  <message>
    <ts>2017-07-06T18:01:30.734656</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;https://github.com/seattlerb/minitest/blob/master/lib/minitest/benchmark.rb&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T18:02:50.763522</ts>
    <user>U5KU1HNKY</user>
    <text>benchmark-ips is my port of a ruby tool. Similar to racket's benchmark, but it doesn't graph and it is focused on iterations per second instead of some fixed number of iterations… I mostly use it when experimenting with N different implementations of something</text>
  </message>
  <message>
    <ts>2017-07-07T14:40:23.988120</ts>
    <user>U07SJGB4H</user>
    <text>Happy branch day! :party: </text>
  </message>
  <message>
    <ts>2017-07-07T14:57:33.484317</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U07SJGB4H&gt;: Haven't gotten to starting the festivities yet. ;)</text>
  </message>
  <message>
    <ts>2017-07-07T15:36:21.523572</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NP867S6&gt; I don't know if you get this email, but the stxparse tests failed on windows on the release branch &lt;https://ci.appveyor.com/project/plt/racket/build/1.0.2619&gt; cc &lt;@U3VGR2S7Q&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T15:38:12.571483</ts>
    <user>U3NP867S6</user>
    <text>FWIW, fails on master as well: &lt;https://ci.appveyor.com/project/plt/racket/build/1.0.2619&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T15:39:21.600634</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NP867S6&gt; that link is to the release branch build</text>
  </message>
  <message>
    <ts>2017-07-07T15:39:50.613180</ts>
    <user>U0702F2CE</user>
    <text>you can see the history here; it's passing on master: &lt;https://ci.appveyor.com/project/plt/racket/history&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T15:40:18.624996</ts>
    <user>U3NP867S6</user>
    <text>Oh, you're right. I can't read appveyor's page.</text>
  </message>
  <message>
    <ts>2017-07-07T15:40:45.636754</ts>
    <user>U3NP867S6</user>
    <text>I guess I wasn't expecting it to test back from the tip of the branch?</text>
  </message>
  <message>
    <ts>2017-07-07T15:49:53.873144</ts>
    <user>U0702F2CE</user>
    <text>looks like it failed similarly for the tip of the `release` branch (see &lt;#C3P4M37H7|notifications&gt;)</text>
  </message>
  <message>
    <ts>2017-07-07T15:54:10.983925</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U3NP867S6&gt;, it "fails" under `raco test` but not when run directly by `racket`. I suspect a bug in one of the recent rackunit changes, but I won't really be inclined to spend time debugging it until tomorrow at 8:01am EDT :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-07T15:54:50.000520</ts>
    <user>U3NP867S6</user>
    <text>Heh. :)</text>
  </message>
  <message>
    <ts>2017-07-07T15:54:59.004367</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U07SJGB4H&gt;: ^</text>
  </message>
  <message>
    <ts>2017-07-07T15:56:01.031681</ts>
    <user>U3VGR2S7Q</user>
    <text>If anyone else wants to investigate, I did narrow it down to the test case in `test-litset.rkt` labelled `"litset, #:at"`</text>
  </message>
  <message>
    <ts>2017-07-07T15:57:27.069459</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3VGR2S7Q&gt; is it a failure in the sense of a rackunit check failing,  or an error of some sort? I recently started using syntax parse in rackunit, maybe there's a circular dependency somewhere?</text>
  </message>
  <message>
    <ts>2017-07-07T15:59:05.111244</ts>
    <user>U07SJGB4H</user>
    <text>this expression in that test looks funky: `(check-equal? (syntax-&amp;gt;datum (getvar lambda #'(lambda b c))))`</text>
  </message>
  <message>
    <ts>2017-07-07T15:59:56.133451</ts>
    <user>U07SJGB4H</user>
    <text>did that used to syntax error, which was expected, and now it runtime errors?</text>
  </message>
  <message>
    <ts>2017-07-07T16:01:19.173013</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U07SJGB4H&gt;: it's a misbehavior in that `racket test-litset.rkt` shows no failure output, but `raco test test-litset.rkt` prints "1/3 test failures"</text>
  </message>
  <message>
    <ts>2017-07-07T16:02:26.202610</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3VGR2S7Q&gt; looking at `tcerr`, I think that test was never run before</text>
  </message>
  <message>
    <ts>2017-07-07T16:02:40.208653</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U07SJGB4H&gt;: ah, good point, I missed that...</text>
  </message>
  <message>
    <ts>2017-07-07T16:02:50.213363</ts>
    <user>U07SJGB4H</user>
    <text>old implementation of `check-equal?` would syntax error when given one argument instead of two, new version makes it a runtime error</text>
  </message>
  <message>
    <ts>2017-07-07T16:03:10.221900</ts>
    <user>U07SJGB4H</user>
    <text>and tcerr would catch the syntax error and try to match it against error message patterns, of which there are none for that test</text>
  </message>
  <message>
    <ts>2017-07-07T16:03:12.222554</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; that seems potentially worrying</text>
  </message>
  <message>
    <ts>2017-07-07T16:04:30.256155</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; I agree. The docs for rackunit never mentioned that checks test their arity during macro expansion though, so it's at least not a break in documented behavior. But rackunit has a lot of odd undocumented internal behavior.</text>
  </message>
  <message>
    <ts>2017-07-07T16:04:58.268109</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; since it actually broke something, it seems like maybe that behavior needs to be kept</text>
  </message>
  <message>
    <ts>2017-07-07T16:06:23.304913</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U0702F2CE&gt; well, the code in the test case is definitely wrong too, so I don't think we should hold rackunit to the old behaviour</text>
  </message>
  <message>
    <ts>2017-07-07T16:07:08.324051</ts>
    <user>U07SCV14J</user>
    <text>it'd be cool if we had a versioning system that made it possible to break backwards compatibility</text>
  </message>
  <message>
    <ts>2017-07-07T16:07:30.333306</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U07SCV14J&gt; don't get too radical :P</text>
  </message>
  <message>
    <ts>2017-07-07T16:14:16.503747</ts>
    <user>U5KU1HNKY</user>
    <text>Does the doco really need to explicitly mention checking arity tho? Seems a safe assumption to me unless it says otherwise.</text>
  </message>
  <message>
    <ts>2017-07-07T16:15:19.530648</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U5KU1HNKY&gt; checking arity wouldn't need to be documented. checking arity at compile time using macros probably should be, I'd be really surprised if a library provided "functions" that did that without mentioning it</text>
  </message>
  <message>
    <ts>2017-07-07T16:23:56.749016</ts>
    <user>U3VGR2S7Q</user>
    <text>Thanks &lt;@U07SJGB4H&gt;, that explains the rackunit issue; I'll change the test case. Unfortunately, fixing the test case made me realize literal sets with `#:at` aren't working the way I expected, so I've got to think harder about that before I commit a fix.</text>
  </message>
  <message>
    <ts>2017-07-07T16:26:26.811911</ts>
    <user>U07SJGB4H</user>
    <text>glad to help, and happy to hear the rackunit changes didn't explode everything</text>
  </message>
  <message>
    <ts>2017-07-12T10:24:45.326242</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3QF0EM0E&gt; you might be interested in `datum-&amp;gt;syntax`</text>
  </message>
  <message>
    <ts>2017-07-12T10:25:17.346995</ts>
    <user>U0702F2CE</user>
    <text>as well as this line from the docs for `datum-&amp;gt;syntax`: "Mutable vectors and boxes are replaced by immutable vectors and boxes."</text>
  </message>
  <message>
    <ts>2017-07-12T10:28:16.461995</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U0702F2CE&gt; That makes sense for one direction. But then it doesn't make sense why when its done at phase 1 the vector becomes mutable.</text>
  </message>
  <message>
    <ts>2017-07-12T10:29:24.504253</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U08JL5H89&gt; I agree, I don't understand what's going on there</text>
  </message>
  <message>
    <ts>2017-07-12T10:29:37.512243</ts>
    <user>U0702F2CE</user>
    <text>but that should be investigated without using 3 layers of quoting</text>
  </message>
  <message>
    <ts>2017-07-12T10:29:48.518838</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U0702F2CE&gt; Ha, ya, I do agree with that.</text>
  </message>
  <message>
    <ts>2017-07-12T10:29:48.519120</ts>
    <user>U0702F2CE</user>
    <text>and is unrelated to the typing issue</text>
  </message>
  <message>
    <ts>2017-07-12T10:30:02.527793</ts>
    <user>U08JL5H89</user>
    <text>I also agree with that.</text>
  </message>
  <message>
    <ts>2017-07-12T10:30:45.555559</ts>
    <user>U08JL5H89</user>
    <text>(I forgot that this originated from a typed/racket thing. &lt;@U3QF0EM0E&gt; and I were discussing it (outside of slack) without the context of TR.)</text>
  </message>
  <message>
    <ts>2017-07-12T10:31:45.594217</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; (Or anyone else familiar enough with the FFI to answer), I have the following program that uses ffi/unsafe/alloc: &lt;https://gist.github.com/LeifAndersen/353e0da21d9213dcd6a79cbd9b8c94ee&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T10:32:15.613341</ts>
    <user>U08JL5H89</user>
    <text>In a loop, it allocates a frame, relying on the GC to clean up.</text>
  </message>
  <message>
    <ts>2017-07-12T10:32:22.617961</ts>
    <user>U08JL5H89</user>
    <text>However, it leaks memory very quickly.</text>
  </message>
  <message>
    <ts>2017-07-12T10:32:24.618867</ts>
    <user>U3QF0EM0E</user>
    <text>yes &lt;@U0702F2CE&gt; thanks for pointing out `datum-&amp;gt;syntax`. Here's another phase 1 example (still returns the weird result)
```
#lang racket/base
(require (for-syntax racket/base))

(define-syntax (foo stx)
  (with-syntax ((x (datum-&amp;gt;syntax stx (vector-immutable 1))))
   (syntax (syntax x))))

(immutable? (syntax-e (foo)))
```</text>
  </message>
  <message>
    <ts>2017-07-12T10:32:36.626688</ts>
    <user>U08JL5H89</user>
    <text>BUT, if I remove line 15 (the deallocator wrapper), it stops leaking memory.</text>
  </message>
  <message>
    <ts>2017-07-12T10:32:41.630027</ts>
    <user>U08JL5H89</user>
    <text>Does anyone have any suggestions?</text>
  </message>
  <message>
    <ts>2017-07-12T10:33:58.677476</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3QF0EM0E&gt; here's the bug:</text>
  </message>
  <message>
    <ts>2017-07-12T10:33:58.677646</ts>
    <user>U08JL5H89</user>
    <text>(For the record, if I remove both alloc and dealloc, and just call the `av-frame-free` function by hand everything works fine.)</text>
  </message>
  <message>
    <ts>2017-07-12T10:34:05.682117</ts>
    <user>U0702F2CE</user>
    <text>```
&amp;gt; (immutable? (syntax-e (quote-syntax #(1))))
#f
```</text>
  </message>
  <message>
    <ts>2017-07-12T10:34:40.703492</ts>
    <user>U0702F2CE</user>
    <text>note that `syntax-&amp;gt;datum` does the right thing</text>
  </message>
  <message>
    <ts>2017-07-12T10:59:39.664089</ts>
    <user>U3NJS8H7C</user>
    <text>leif: The short answer is that the finalization system used by `allocator` is not good enough (and wouldn't be good enough in most runtimes). Finalizers via `allocator` are run in a separate thread, so the program requires a combination of a GC and a context switch and another GC before some relevant memory can be reclaimed. Some solutions might involve limiting the allocator via `(sleep)` or forcing an occasional GC via `(collect-garbage)`.</text>
  </message>
  <message>
    <ts>2017-07-12T11:17:10.348840</ts>
    <user>U3NJS8H7C</user>
    <text>I now see the rest of your original message, and I'm puzzled offhand that removing `#:wrap (deallocator)` helps, so I'll investigate a little more.</text>
  </message>
  <message>
    <ts>2017-07-12T11:25:48.683637</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U0702F2CE&gt; and &lt;@U3QF0EM0E&gt; FWIW, I ran this test on Racket7, and got:
```
leif@FATT ~/src/racket7/racket/bin (master) $ ./racket test.rkt
--------------------
FAILURE
name:       check-false
location:   test.rkt:4:0
params:     '(#t)
message:    "(syntax-e (syntax (vector))) made immutable vector"
--------------------
--------------------
FAILURE
name:       check-false
location:   test.rkt:19:0
params:     '(#t)
message:    "(syntax-e (syntax (vector))) made immutable vector"
--------------------
```</text>
  </message>
  <message>
    <ts>2017-07-12T11:26:04.694412</ts>
    <user>U08JL5H89</user>
    <text>So I'm pretty sure there is a bug here.</text>
  </message>
  <message>
    <ts>2017-07-12T11:27:03.732454</ts>
    <user>U3QF0EM0E</user>
    <text>^ this test = &lt;http://pasterack.org/pastes/86496&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T11:27:17.741509</ts>
    <user>U3QF0EM0E</user>
    <text>(point is, now the failures are consistent)</text>
  </message>
  <message>
    <ts>2017-07-12T11:44:22.399419</ts>
    <user>U3NJS8H7C</user>
    <text>As far as I can tell, adding `#:wrap (deallocator)` slows down `av-frame-free` enough that the finalization thread moves more slowly than the allocation thread, so my original answer is still what I think is happening. Removing `#:wrap (deallocator)` might be a reasonable solution if `av-frame-free` is not to be called directly.</text>
  </message>
  <message>
    <ts>2017-07-12T13:25:01.912261</ts>
    <user>U08JL5H89</user>
    <text>Ah, okay, thanks makes a lot of sense. Thank you.</text>
  </message>
  <message>
    <ts>2017-07-12T13:27:55.011655</ts>
    <user>U08JL5H89</user>
    <text>That would also explain why writing my own finalizer (and a single thread that calls the will executors in a loop), doesn't have the same problem.</text>
  </message>
  <message>
    <ts>2017-07-12T14:48:26.761040</ts>
    <user>U07SJGB4H</user>
    <text>If I register a will for a value exported by a module, can that will ever be executed?</text>
  </message>
  <message>
    <ts>2017-07-12T14:49:21.791620</ts>
    <user>U07SJGB4H</user>
    <text>use case is a value used by test modules, wondering if it can be automatically cleaned up after the tests finish by relying on `raco test` somehow</text>
  </message>
  <message>
    <ts>2017-07-12T15:04:59.319938</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U07SJGB4H&gt; The namespace where the module is instantiated would have to become inaccessible, including not being `current-namespace`</text>
  </message>
  <message>
    <ts>2017-07-12T15:28:43.050463</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3NJS8H7C&gt; if I `raco test -p mypackage`, which contains some test submodules that require a module providing a value with an attached will, would `raco test`'s shutdown process trigger the will execution? would running the tests in parallel with `-j` affect that?</text>
  </message>
  <message>
    <ts>2017-07-12T15:44:54.551223</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U07SJGB4H&gt; No, I don't think `raco test` will trigger the will execution. Either you're in `--direct` mode and it's all done in one namespace or the relevant place/process exits still holding its namespace</text>
  </message>
  <message>
    <ts>2017-07-12T15:45:40.576921</ts>
    <user>U07SJGB4H</user>
    <text>drat</text>
  </message>
  <message>
    <ts>2017-07-12T19:33:31.239905</ts>
    <user>U629NGMAM</user>
    <text>leif: Hi Leif!</text>
  </message>
  <message>
    <ts>2017-07-13T00:14:40.596134</ts>
    <user>U5KU1HNKY</user>
    <text>Awwww</text>
  </message>
  <message>
    <ts>2017-07-13T01:16:49.154057</ts>
    <user>U5KU1HNKY</user>
    <text>is there an addendum for the redex book anywhere? the syntax in the book is a bit crufty. not sure what else changed</text>
  </message>
  <message>
    <ts>2017-07-13T10:17:05.768802</ts>
    <user>U08JL5H89</user>
    <text>Hello</text>
  </message>
  <message>
    <ts>2017-07-13T11:27:20.629834</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NP867S6&gt; JFYI:</text>
  </message>
  <message>
    <ts>2017-07-13T11:27:24.632064</ts>
    <user>U0702F2CE</user>
    <text>```
#hash(("semver" . (success test-fail))
        ("racketscript-extras" . (no-docs build-fail))
        ("wrap" . (install-conflict build-fail))
        ("css" . (success test-fail))
        ("racketscript" . (no-docs build-fail))
        ("turnstile" . (success test-fail))
        ("racketscript-compiler" . (no-docs build-fail)))
```</text>
  </message>
  <message>
    <ts>2017-07-13T11:27:31.636535</ts>
    <user>U0702F2CE</user>
    <text>those are the current build regressions</text>
  </message>
  <message>
    <ts>2017-07-13T11:28:09.660337</ts>
    <user>U0702F2CE</user>
    <text>I believe that `racketscript` and `racketscript-compiler` are &lt;https://github.com/racket/typed-racket/issues/579&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T11:29:50.723779</ts>
    <user>U0702F2CE</user>
    <text>`wrap` is &lt;https://github.com/racket/typed-racket/issues/581&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T11:31:42.796189</ts>
    <user>U0702F2CE</user>
    <text>`semver` is &lt;https://github.com/racket/rackunit/issues/60&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T11:32:10.814027</ts>
    <user>U0702F2CE</user>
    <text>`turnstile` is a timeout in the test suite</text>
  </message>
  <message>
    <ts>2017-07-13T11:32:21.821394</ts>
    <user>U0702F2CE</user>
    <text>`css` I don't understand the test failure</text>
  </message>
  <message>
    <ts>2017-07-13T11:39:11.074437</ts>
    <user>U0702F2CE</user>
    <text>also, `turnstile` passes on Travis on HEAD so we probably don't need to worry about it</text>
  </message>
  <message>
    <ts>2017-07-13T13:55:49.691809</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; the rackunit issue is caused by one of my changes to the typed rackunit code in `typed-racket-more`. On a semi-related note, what would you think of moving the typed rackunit wrapper into the `racket/rackunit` repo?</text>
  </message>
  <message>
    <ts>2017-07-13T14:19:49.480183</ts>
    <user>U3QF0EM0E</user>
    <text>zenspider: no I don't think there's any "readers guide" that connects the book to "modern day redex" :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T14:20:32.503862</ts>
    <user>U3QF0EM0E</user>
    <text>but I don't remember the syntax being confusingly-different --- I think using the book you just miss out on new things like `#;binding-forms`</text>
  </message>
  <message>
    <ts>2017-07-13T17:51:45.687911</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; I'm not sure what you're suggesting. I don't think that `rackunit` should depend on `typed-racket`</text>
  </message>
  <message>
    <ts>2017-07-13T17:52:04.695396</ts>
    <user>U0702F2CE</user>
    <text>also, what needs to change to fix that regression?</text>
  </message>
  <message>
    <ts>2017-07-13T17:52:47.712567</ts>
    <user>U07SJGB4H</user>
    <text>Not positive on the fix yet, haven't had to time for more than a glance.</text>
  </message>
  <message>
    <ts>2017-07-13T17:53:41.733307</ts>
    <user>U0702F2CE</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-13T17:54:08.743048</ts>
    <user>U08JL5H89</user>
    <text>Does anyone know if `async-channel-put` can be called in atomic mode?</text>
  </message>
  <message>
    <ts>2017-07-13T17:54:13.744752</ts>
    <user>U07SJGB4H</user>
    <text>About the suggestion, I mean making a `rackunit-typed` package in the rackunit repo and having `typed-racket-more` imply that package</text>
  </message>
  <message>
    <ts>2017-07-13T17:56:09.788481</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U07SJGB4H&gt; that seems reasonable to me</text>
  </message>
  <message>
    <ts>2017-07-13T17:57:13.812695</ts>
    <user>U08JL5H89</user>
    <text>Actually, never mind. I can probably just use `call-with-semaphore`</text>
  </message>
  <message>
    <ts>2017-07-13T18:43:08.696116</ts>
    <user>U3SEVDPJT</user>
    <text>Ahh interesting I wasn't aware that the current version of Redex had diverged from the book version. Good to know so I'll be sure to pay attention carefully when I'm tackling the book.</text>
  </message>
  <message>
    <ts>2017-07-13T19:14:56.207311</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt;: Neither `async-channel-put` nor `call-with-semaphore` seem like a good idea in atomic mode, since they can block. If `call-with-semaphore` can can't block in your use and you're already in atomic mode, then would the semaphore serve a purpose? I guess you could have a function where you know the `call-with-semaphore` won't block in cases where the function is called in atomic mode, but that sounds unusual.</text>
  </message>
  <message>
    <ts>2017-07-13T19:26:34.376955</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U0702F2CE&gt; I think &lt;https://github.com/racket/typed-racket/pull/583&gt; isolates and fixes the rackunit issue. As an aside, rackunit's test suite code is probably due for quite a bit of housekeeping..</text>
  </message>
  <message>
    <ts>2017-07-13T19:37:39.534987</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Woops, I meant, I can get away with using `call-with-semaphore`, instead of `call-as-atomic` in this case.</text>
  </message>
  <message>
    <ts>2017-07-13T19:37:59.539663</ts>
    <user>U08JL5H89</user>
    <text>I absolutely agree that `call-with-semaphore`is a bad idea to do in a `call-as-atomic`.</text>
  </message>
  <message>
    <ts>2017-07-13T19:38:23.545120</ts>
    <user>U08JL5H89</user>
    <text>Although the `async-channel-put` I was thinking of using had an unbounded buffer size.</text>
  </message>
  <message>
    <ts>2017-07-13T19:46:21.653733</ts>
    <user>U3NJS8H7C</user>
    <text>Oh, that makes sense!</text>
  </message>
  <message>
    <ts>2017-07-13T19:49:00.688727</ts>
    <user>U08JL5H89</user>
    <text>Okay cool, thanks.</text>
  </message>
  <message>
    <ts>2017-07-14T00:02:24.416932</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U629NGMAM&gt; you should repost these in &lt;#C5T5RQ546|summer-school&gt; … I think you can do that in the `...` menu</text>
  </message>
  <message>
    <ts>2017-07-14T10:01:05.201012</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3VGR2S7Q&gt; Is it possible to fix the stxparse tests soon? currently all of our CI except DrDr is failing because of that, which limits our test coverage as a whole and makes it hard to tell if we regress things</text>
  </message>
  <message>
    <ts>2017-07-14T13:29:46.808681</ts>
    <user>U3VGR2S7Q</user>
    <text>&lt;@U0702F2CE&gt; should be fixed now</text>
  </message>
  <message>
    <ts>2017-07-14T13:53:02.508107</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3VGR2S7Q&gt; great</text>
  </message>
  <message>
    <ts>2017-07-14T18:54:07.578716</ts>
    <user>U07SJGB4H</user>
    <text>why does a plumber flush callback receive its flush handle as an argument? the docs say it's so it can conveniently unregister itself, but why would it need to do that? is it to guard against the plumber being flushed more than once, or to deal with the case where flushing is unsuccessful and should be retried?</text>
  </message>
  <message>
    <ts>2017-07-14T19:06:24.732350</ts>
    <user>U3NJS8H7C</user>
    <text>Yes, helping to avoid another flush was the intent. But I'm often unsure whether it's better to make a callback receive a relevant argument or have the callback be a closure as needed.</text>
  </message>
  <message>
    <ts>2017-07-14T19:07:13.741877</ts>
    <user>U07SJGB4H</user>
    <text>is there a reason flushing the callbacks doesn't automatically unregister them?</text>
  </message>
  <message>
    <ts>2017-07-14T21:45:00.913947</ts>
    <user>U5KU1HNKY</user>
    <text>`test-log` is documented as displaying by default, but that's not the case. I need to use `(void (test-log #:display? #t))` to get actual output. cc/ &lt;@U07SJGB4H&gt; (since you're in there a lot of late)</text>
  </message>
  <message>
    <ts>2017-07-14T21:59:47.986154</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U5KU1HNKY&gt; I think the docs are just wrong there. Based on the git history those two arguments have always defaulted to `#f` and been documented as defaulting to `#t`</text>
  </message>
  <message>
    <ts>2017-07-14T21:59:57.986818</ts>
    <user>U07SJGB4H</user>
    <text>doc patches welcome :)</text>
  </message>
  <message>
    <ts>2017-07-15T00:12:37.502245</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U07SJGB4H&gt; &lt;https://github.com/racket/rackunit/pull/62&gt;</text>
  </message>
  <message>
    <ts>2017-07-15T07:39:50.960025</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U07SJGB4H&gt; For things like flushing output ports, the callback should be preserved for future flushes</text>
  </message>
  <message>
    <ts>2017-07-15T18:05:23.784089</ts>
    <user>U5KU1HNKY</user>
    <text>How am I supposed to write this?

```
(define-syntax (function stx)
  (syntax-parse stx
    [(_ id:id)
    #'(if (identifier-binding #'id)
          (if (procedure? id)           ; blows up here for missing
              id
              (or 'ERROR (error 'function "~v is not a function" id)))
          `(function ,'id)
        )]))

(define x 42)
(define y (fn 'y (lambda (x) 42)))

(function x)                            ; 'ERROR
(function y)                            ; (function y)
(function missing)                      ; missing: unbound identifier in module
```</text>
  </message>
  <message>
    <ts>2017-07-15T18:09:31.799353</ts>
    <user>U5KU1HNKY</user>
    <text>aaaaah… I push the `#'` down to the true and false results…</text>
  </message>
  <message>
    <ts>2017-07-15T21:24:11.454007</ts>
    <user>U5KU1HNKY</user>
    <text>```
redex-check: /Users/ryan/Work/git/zenspider/schemers/racket-summerschool/driver.rkt:70
no counterexamples in 1000 attempts
```</text>
  </message>
  <message>
    <ts>2017-07-15T23:08:27.768303</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3NJS8H7C&gt; I think I'm missing an understanding of when plumbers are flushed then. Wouldn't an output port's flush callback only be called just as a racket process was exiting or if someone manually called `plumber-flush-all`? Are there times other than exiting that plumbers are flushed automatically?</text>
  </message>
  <message>
    <ts>2017-07-16T08:36:40.448692</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U07SJGB4H&gt; There are no other times that plumbers are flushed automatically, but the intent is that `plumber-flush-all` can be called at any time (in much the same way that a C program might call `fflush(NULL)`).</text>
  </message>
  <message>
    <ts>2017-07-16T20:17:08.626890</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NP867S6&gt; we're now down to one pkg regression, in the `css` pkg tests</text>
  </message>
  <message>
    <ts>2017-07-16T20:20:32.645508</ts>
    <user>U0702F2CE</user>
    <text>(after the next build with the TR changes)</text>
  </message>
  <message>
    <ts>2017-07-16T21:15:39.969442</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U0702F2CE&gt;: Thanks, good to know.</text>
  </message>
  <message>
    <ts>2017-07-17T20:50:37.780040</ts>
    <user>U07SJGB4H</user>
    <text>What's the best way to take a thunk and make it run after the current thread dies?</text>
  </message>
  <message>
    <ts>2017-07-17T20:51:51.794194</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U07SJGB4H&gt; I have no idea if this would work, but would `(let ([t (current-thread)]) (thread (lambda () (sync t) (thunk))))` do something useful?</text>
  </message>
  <message>
    <ts>2017-07-17T20:52:15.798885</ts>
    <user>U07SCV14J</user>
    <text>I realize I don't actually know what happens if a thread waits on the thread that spawned it</text>
  </message>
  <message>
    <ts>2017-07-17T20:53:40.815175</ts>
    <user>U0702F2CE</user>
    <text>that should work</text>
  </message>
  <message>
    <ts>2017-07-17T20:54:26.823542</ts>
    <user>U07SJGB4H</user>
    <text>hmms. what about if the thread exits abnormally? e.g. an exception or escape continuation jump?</text>
  </message>
  <message>
    <ts>2017-07-17T20:55:13.832835</ts>
    <user>U07SJGB4H</user>
    <text>I've seen `thread-dead-evt` in the docs which might help</text>
  </message>
  <message>
    <ts>2017-07-17T21:02:34.920411</ts>
    <user>U07SCV14J</user>
    <text>I think a continuation jump couldn't change a thread's liveness, since that would just change the continuation of the current thread</text>
  </message>
  <message>
    <ts>2017-07-17T21:03:08.927205</ts>
    <user>U07SCV14J</user>
    <text>and an unhandled exception would still just kill the thread</text>
  </message>
  <message>
    <ts>2017-07-18T10:07:58.975679</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Any idea what I'm missing here? ^</text>
  </message>
  <message>
    <ts>2017-07-18T10:08:24.991336</ts>
    <user>U08JL5H89</user>
    <text>Namely, it looks like `ffi-lib` is not searching where `get-lib-search-dirs` says it will, despite what the docs says?</text>
  </message>
  <message>
    <ts>2017-07-18T10:09:21.025016</ts>
    <user>U3NJS8H7C</user>
    <text>You're definitely using a 32/64-bit DLL with a 32/64-bit Racket?</text>
  </message>
  <message>
    <ts>2017-07-18T10:09:37.034295</ts>
    <user>U636VLRHQ</user>
    <text>55 vs 57?</text>
  </message>
  <message>
    <ts>2017-07-18T10:09:45.038764</ts>
    <user>U08JL5H89</user>
    <text>Woops, wrong image</text>
  </message>
  <message>
    <ts>2017-07-18T10:09:57.045512</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U636VLRHQ&gt; I get the same issue with 57.</text>
  </message>
  <message>
    <ts>2017-07-18T10:10:02.048672</ts>
    <user>U3NJS8H7C</user>
    <text>Does the DLL have any dependencies?</text>
  </message>
  <message>
    <ts>2017-07-18T10:10:26.062784</ts>
    <user>U08JL5H89</user>
    <text>I get this issue with both 32 and 64 bit varients of windows.</text>
  </message>
  <message>
    <ts>2017-07-18T10:10:44.073979</ts>
    <user>U08JL5H89</user>
    <text>I downloaded them from the ffmpeg website. So honestly, I don't know if they have any deps.</text>
  </message>
  <message>
    <ts>2017-07-18T10:10:49.077057</ts>
    <user>U08JL5H89</user>
    <text>I can check.</text>
  </message>
  <message>
    <ts>2017-07-18T10:12:33.137974</ts>
    <user>U08JL5H89</user>
    <text>Hmm…the website lets you pick. And I'm pretty sure I picked the right one. I'll see if there is anyway to tell on Windows.</text>
  </message>
  <message>
    <ts>2017-07-18T10:12:43.143344</ts>
    <user>U08JL5H89</user>
    <text>Also, here is the website: &lt;https://ffmpeg.zeranoe.com/builds/&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T10:12:57.151569</ts>
    <user>U3NJS8H7C</user>
    <text>I recommend "depends.exe"</text>
  </message>
  <message>
    <ts>2017-07-18T10:13:11.160013</ts>
    <user>U08JL5H89</user>
    <text>Specifically 3.3.2 &amp;gt; 32/64 (in this case 32) &amp;gt; Shared</text>
  </message>
  <message>
    <ts>2017-07-18T10:13:15.163077</ts>
    <user>U08JL5H89</user>
    <text>Oh cool, thanks.</text>
  </message>
  <message>
    <ts>2017-07-18T10:17:04.302389</ts>
    <user>U08JL5H89</user>
    <text>Hmm…that very likely could be the problem:</text>
  </message>
  <message>
    <ts>2017-07-18T10:17:37.323091</ts>
    <user>U08JL5H89</user>
    <text>They look like standard libraries, but apparently they're not there.</text>
  </message>
  <message>
    <ts>2017-07-18T10:20:18.421427</ts>
    <user>U3NJS8H7C</user>
    <text>I think those are VC++ redistributable DLLs, which means that they don't come with the OS, but applications can redistribute and install them. They're a pain.</text>
  </message>
  <message>
    <ts>2017-07-18T10:20:18.422002</ts>
    <user>U08JL5H89</user>
    <text>OH</text>
  </message>
  <message>
    <ts>2017-07-18T10:20:52.442960</ts>
    <user>U08JL5H89</user>
    <text>Yup, that's what I just found out too. (Although its not clear what version of the packages they are).</text>
  </message>
  <message>
    <ts>2017-07-18T10:20:55.445164</ts>
    <user>U08JL5H89</user>
    <text>Anyway…ugg…thanks.</text>
  </message>
  <message>
    <ts>2017-07-18T10:21:44.474535</ts>
    <user>U3NJS8H7C</user>
    <text>Also keep in mind that just putting the dependencies in Racket's "lib" won't make them found. The strategy that works best is to manually load every dependency before anything that needs it.</text>
  </message>
  <message>
    <ts>2017-07-18T10:23:42.547763</ts>
    <user>U08JL5H89</user>
    <text>Welp…ugg… I see.</text>
  </message>
  <message>
    <ts>2017-07-18T10:23:55.555827</ts>
    <user>U08JL5H89</user>
    <text>Would you happen to have a good tutorial on the proper use of them?</text>
  </message>
  <message>
    <ts>2017-07-18T10:24:07.563403</ts>
    <user>U08JL5H89</user>
    <text>(I'm going to assume no, but its worth asking anyway. :slightly_smiling_face: )</text>
  </message>
  <message>
    <ts>2017-07-18T10:29:35.769845</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Oh interesting, it looks like the library was compiled on Ubuntu with the MinGW-w64 toolchain.</text>
  </message>
  <message>
    <ts>2017-07-18T10:31:30.845775</ts>
    <user>U3NJS8H7C</user>
    <text>I have managed to avoid all VC redistributables – mostly by using MinGW-w64, but maybe there are modes that involve them even with MinGW-w64</text>
  </message>
  <message>
    <ts>2017-07-18T10:31:58.863567</ts>
    <user>U3NJS8H7C</user>
    <text>So, other than avoiding them, I don't have good advice for dealing with redistributables</text>
  </message>
  <message>
    <ts>2017-07-18T10:36:14.024242</ts>
    <user>U08JL5H89</user>
    <text>Ha, fair, thanks.</text>
  </message>
  <message>
    <ts>2017-07-18T10:47:29.446140</ts>
    <user>U08JL5H89</user>
    <text>Interesting. I am not finding a mode where mingw-w64 uses VC++ libraries. I wonder if one of the DLLs that build used linked to those libraries.</text>
  </message>
  <message>
    <ts>2017-07-18T10:51:21.597378</ts>
    <user>U08JL5H89</user>
    <text>Oh, here's a thought. Maybe GCC has its own runtime that tries to mimic the VC++ one.</text>
  </message>
  <message>
    <ts>2017-07-18T10:58:31.880475</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Hmm…apparently this post seems to indeicate that this might not be the case: &lt;https://www.windowsforum.org/topic/51273-mingw-c11-app-compiles-cant-run-outside-ide-0xc000007b/&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T10:58:43.887969</ts>
    <user>U08JL5H89</user>
    <text>Err…that dependency walker is misleading here.</text>
  </message>
  <message>
    <ts>2017-07-18T11:01:48.012605</ts>
    <user>U3NJS8H7C</user>
    <text>Ok – now I understand the part of the screen shown by your image. For this purpose, you should pay attention only to the top-left panel of "depends.exe"</text>
  </message>
  <message>
    <ts>2017-07-18T11:11:12.379236</ts>
    <user>U08JL5H89</user>
    <text>But wasn't that screenshot from the top panel?</text>
  </message>
  <message>
    <ts>2017-07-18T11:12:06.414166</ts>
    <user>U08JL5H89</user>
    <text>Like, here is the whole window.</text>
  </message>
  <message>
    <ts>2017-07-18T11:28:39.051449</ts>
    <user>U08JL5H89</user>
    <text>Ah, okay, I see what you mean now</text>
  </message>
  <message>
    <ts>2017-07-18T11:28:43.054195</ts>
    <user>U08JL5H89</user>
    <text>(I needed a reboot apparently)</text>
  </message>
  <message>
    <ts>2017-07-18T11:30:59.145439</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Ya, it doesn't seem to have any extra libs.</text>
  </message>
  <message>
    <ts>2017-07-18T11:31:42.173262</ts>
    <user>U08JL5H89</user>
    <text>(AVUtil and SWResample are also part of ffmpeg and in the same directory as AVcocec)</text>
  </message>
  <message>
    <ts>2017-07-18T11:32:07.189192</ts>
    <user>U3NJS8H7C</user>
    <text>So, does it work to explicitly load "AVUTIL-55.DLL" and "SWRESAMPLE-2.DLL" first?</text>
  </message>
  <message>
    <ts>2017-07-18T11:32:19.197015</ts>
    <user>U3NJS8H7C</user>
    <text>(since they won't be found by just being in "lib")</text>
  </message>
  <message>
    <ts>2017-07-18T11:33:53.255506</ts>
    <user>U08JL5H89</user>
    <text>Oh yes they are.</text>
  </message>
  <message>
    <ts>2017-07-18T11:33:57.258266</ts>
    <user>U08JL5H89</user>
    <text>err…yes it does work.</text>
  </message>
  <message>
    <ts>2017-07-18T11:34:03.262046</ts>
    <user>U08JL5H89</user>
    <text>Odd. I wonder why that worked on OS X. :confused:</text>
  </message>
  <message>
    <ts>2017-07-18T11:34:32.280234</ts>
    <user>U08JL5H89</user>
    <text>(I used the @loader_path symbol when compiling it for os x, that might be why.)</text>
  </message>
  <message>
    <ts>2017-07-18T11:34:34.281817</ts>
    <user>U08JL5H89</user>
    <text>Anyway, thanks. :smile:</text>
  </message>
  <message>
    <ts>2017-07-18T11:35:07.301843</ts>
    <user>U3NJS8H7C</user>
    <text>Yes, `@loader_path` avoids the problem</text>
  </message>
  <message>
    <ts>2017-07-18T11:36:05.338138</ts>
    <user>U08JL5H89</user>
    <text>Anyway, this seems to work, if I just reorder the way I load the libraries. Thanks. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T11:42:36.583502</ts>
    <user>U08JL5H89</user>
    <text>So, question I should probably know the answer to; does this mean that if I have some lib `a.so`, that links to `b.so` (but the link has an absolute path), if the program dynamically loads `b.so` first, and then `a.so`, it doesn't matter what directories the two libraries are in?</text>
  </message>
  <message>
    <ts>2017-07-18T12:10:56.650558</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; Possibly. Probably it depends on the OS, and it may depend on whether the shared library is opened in "global" mode versus "local" mode (where racket uses the latter by default, at least on most platforms)</text>
  </message>
  <message>
    <ts>2017-07-18T12:13:24.738318</ts>
    <user>U08JL5H89</user>
    <text>That makes sense.</text>
  </message>
  <message>
    <ts>2017-07-18T12:13:31.742806</ts>
    <user>U08JL5H89</user>
    <text>Well at least it seems to work on Windows. So thanks. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-18T12:15:44.820470</ts>
    <user>U086VDRBK</user>
    <text>&lt;@U08JL5H89&gt; If you haven't seen it already:  &lt;https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T12:39:21.646039</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U086VDRBK&gt; Oh cool, thanks.</text>
  </message>
  <message>
    <ts>2017-07-19T10:18:35.071340</ts>
    <user>U0702F2CE</user>
    <text>&lt;@U3NP867S6&gt; a new weird difference: &lt;https://plt.eecs.northwestern.edu/release-pkg-build/server/built/deps/dssl2.txt&gt; is only happening on the release build</text>
  </message>
  <message>
    <ts>2017-07-19T10:18:50.080191</ts>
    <user>U0702F2CE</user>
    <text>also, `css` passed on HEAD, still failed on the release</text>
  </message>
  <message>
    <ts>2017-07-19T12:19:54.670699</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U0702F2CE&gt;: Re dssl2: I see that &lt;@U3P6ZDH60&gt; made changes to the deps between the pre-release pkg-build run and the HEAD pkg-build run. Let's see what the next pre-release pkg-build says.</text>
  </message>
  <message>
    <ts>2017-07-19T12:20:05.677060</ts>
    <user>U0702F2CE</user>
    <text>ah ok</text>
  </message>
  <message>
    <ts>2017-07-19T12:20:35.694574</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U0702F2CE&gt;: Re css: Wargrey got back to me, looking more into it is on my to-do list.</text>
  </message>
  <message>
    <ts>2017-07-19T12:20:59.708789</ts>
    <user>U0702F2CE</user>
    <text>also, I also ran the turnstile tests, they passed, I took it off the checklist</text>
  </message>
  <message>
    <ts>2017-07-19T12:20:59.709326</ts>
    <user>U3NP867S6</user>
    <text>If you'd like to investigate too, I can forward you the info.</text>
  </message>
  <message>
    <ts>2017-07-19T12:21:07.713938</ts>
    <user>U0702F2CE</user>
    <text>I won't have time</text>
  </message>
  <message>
    <ts>2017-07-19T12:22:22.756801</ts>
    <user>U0702F2CE</user>
    <text>But I ran some tests and checked them off</text>
  </message>
  <message>
    <ts>2017-07-19T12:22:25.758227</ts>
    <user>U3P6ZDH60</user>
    <text>&lt;@U3NP867S6&gt; indeed I added deps yesterday. Did I do something wrong?</text>
  </message>
  <message>
    <ts>2017-07-19T12:24:17.822266</ts>
    <user>U3NP867S6</user>
    <text>&lt;@U3P6ZDH60&gt;: I don't think so? A pre-release pkg-build (see link from samth above) that happened before your changes had some deps errors. Your changes may have fixed them.</text>
  </message>
  <message>
    <ts>2017-07-19T12:24:39.834694</ts>
    <user>U3NP867S6</user>
    <text>But we'll have to wait for the next pre-release pkg-build to know for sure.</text>
  </message>
  <message>
    <ts>2017-07-19T12:25:12.853904</ts>
    <user>U3P6ZDH60</user>
    <text>Oh, okay, I think I fixed them. Cheers!</text>
  </message>
  <message>
    <ts>2017-07-19T12:25:44.871876</ts>
    <user>U3NP867S6</user>
    <text>:)</text>
  </message>
  <message>
    <ts>2017-07-20T01:40:18.047672</ts>
    <user>U07SJGB4H</user>
    <text>Would it be bad to spawn a thread in a plumber flush callback that frees some resource and not wait on the thread before removing the flush callback registration? Could racket exit after the plumber is flushed but before the background thread finishes?</text>
  </message>
  <message>
    <ts>2017-07-20T08:36:35.400841</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U07SJGB4H&gt; Yes, Racket could exit before the thread finishes</text>
  </message>
  <message>
    <ts>2017-07-20T13:13:58.815273</ts>
    <user>U6580B1UM</user>
    <text>is there a way to define something once and have it be available in both the for-syntax and the top-level without copying and pasting?
`(begin-for-syntax (define my-fn my-fn))`
is the dumb first thought that comes to mind, and obviously that doesn't work. (If it did, I would be surprised.)
(edit: where my-fn is already defined, of course)</text>
  </message>
  <message>
    <ts>2017-07-20T13:31:34.394424</ts>
    <user>U462H29AR</user>
    <text>&lt;@U6580B1UM&gt; You can define the thing in a module, then `require` the module both for runtime and `for-syntax`.

For instance using `module` in the same file:
```
#lang racket

(module m racket/base
  (provide f)
  (define (f)
    (println "f")
    42))

(require (for-syntax 'm)
         'm)
```</text>
  </message>
  <message>
    <ts>2017-07-20T13:32:42.432902</ts>
    <user>U462H29AR</user>
    <text>Or you could define `f` in a module that is another  file like `f.rkt`, and `(require "f.rkt" (for-syntax "f.rkt"))`. Same difference.</text>
  </message>
  <message>
    <ts>2017-07-20T13:34:07.479866</ts>
    <user>U6580B1UM</user>
    <text>gotcha, thanks &lt;@U462H29AR&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T13:35:12.516615</ts>
    <user>U462H29AR</user>
    <text>&lt;@U6580B1UM&gt; You're welcome.  The TL;DR is define things once in a module. Then, how/when they're available is a function of how you `require` their module.</text>
  </message>
  <message>
    <ts>2017-07-20T16:32:41.205883</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; How often do we update the versions of various native packages?</text>
  </message>
  <message>
    <ts>2017-07-20T16:32:47.208762</ts>
    <user>U08JL5H89</user>
    <text>As listed here: &lt;https://github.com/racket/racket/tree/master/racket/src/native-libs&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T16:33:09.219705</ts>
    <user>U08JL5H89</user>
    <text>I ask because I would like to know if I can rely on Racket coming with libpng16. (Except on Linux obviously.)</text>
  </message>
  <message>
    <ts>2017-07-20T16:33:23.226968</ts>
    <user>U3NJS8H7C</user>
    <text>Rarely, and on no particular schedule</text>
  </message>
  <message>
    <ts>2017-07-20T16:33:39.235110</ts>
    <user>U08JL5H89</user>
    <text>That makes sense. Do we have any announcement when we do?</text>
  </message>
  <message>
    <ts>2017-07-20T16:34:57.273560</ts>
    <user>U08JL5H89</user>
    <text>I mean, I would be happy to have racket install libpng16 when its needed. But I'm worried about that conflicting with the one Racket comes with.</text>
  </message>
  <message>
    <ts>2017-07-20T16:36:00.304993</ts>
    <user>U08JL5H89</user>
    <text>I guess, since its not going to update in the middle of a Racket version, I can just make a libpng16 package, and have an exception to not install libpng16 for versions that already have it installed.</text>
  </message>
  <message>
    <ts>2017-07-20T16:37:40.354445</ts>
    <user>U3NJS8H7C</user>
    <text>We provide libpng16 right now on Windows and Mac OS, right?</text>
  </message>
  <message>
    <ts>2017-07-20T16:42:40.500818</ts>
    <user>U08JL5H89</user>
    <text>That is correct.</text>
  </message>
  <message>
    <ts>2017-07-20T16:43:01.510747</ts>
    <user>U08JL5H89</user>
    <text>And on linux it needs to be installed (which it is on basically every distro….)</text>
  </message>
  <message>
    <ts>2017-07-20T16:59:41.002857</ts>
    <user>U6580B1UM</user>
    <text>I've having trouble with the `str` syntax class (or, at least I think I am...?): I have a custom syntax class that uses `str` in its pattern, but when I give it a str in the correct location it fails to match, even though the output of `(string? (syntax-e stx))` is #t.

I made a gist of the issue in an effort to make up a minimal reproduction: &lt;https://gist.github.com/fluffywaffles/e616df5399d5e7140b76229af94b30d0&gt;

Any help would be much appreciated! I have absolutely no idea why this is happening.</text>
  </message>
  <message>
    <ts>2017-07-20T17:00:49.037385</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U6580B1UM&gt; It looks like the `q` class matches a string, but the last subform provided to select is a list containing a string.</text>
  </message>
  <message>
    <ts>2017-07-20T17:01:08.047092</ts>
    <user>U6580B1UM</user>
    <text>Right; I explain that I still think the error is unexpected... Can you explain why it does what it does?</text>
  </message>
  <message>
    <ts>2017-07-20T17:01:23.054515</ts>
    <user>U6580B1UM</user>
    <text>In the gist, rather, I explain in a comment (on the gist, not in the code)</text>
  </message>
  <message>
    <ts>2017-07-20T17:03:01.102396</ts>
    <user>U07SCV14J</user>
    <text>I think you'll get the behavior you expect if you add the `#:commit` option to the `q` syntax class.</text>
  </message>
  <message>
    <ts>2017-07-20T17:03:18.110170</ts>
    <user>U07SCV14J</user>
    <text>Unfortunately, I have to run—maybe someone else can explain in more detail (or I can once I get back).</text>
  </message>
  <message>
    <ts>2017-07-20T17:03:35.118446</ts>
    <user>U6580B1UM</user>
    <text>that works -- thanks &lt;@U07SCV14J&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T17:03:51.126205</ts>
    <user>U6580B1UM</user>
    <text>I don't know why, but it works</text>
  </message>
  <message>
    <ts>2017-07-20T17:04:49.153252</ts>
    <user>U07SCV14J</user>
    <text>I have another minute or two… basically, without `#:commit`, syntax-parse can backtrack back _into_ a syntax class even if the syntax class originally succeeded if a later parse fails.</text>
  </message>
  <message>
    <ts>2017-07-20T17:05:31.172918</ts>
    <user>U07SCV14J</user>
    <text>So your `q` pattern successfully matches `"hello"` against the first pattern, then continues matching the top-level pattern, and that fails. So it backtracks into `q` and tries to match `"hello"` against the second pattern, which always fails.</text>
  </message>
  <message>
    <ts>2017-07-20T17:05:56.184378</ts>
    <user>U07SCV14J</user>
    <text>And specifically, it fails by throwing an exception, not by using `~fail` or something like that, so that failure is unrecoverable, and parsing halts.</text>
  </message>
  <message>
    <ts>2017-07-20T17:07:33.228441</ts>
    <user>U6580B1UM</user>
    <text>oh, interesting -- so if the first syntax class pattern matches, but then after moving on, the next form in the overall syntax object doesn't match, it'll go back to the most recently tested syntax class and try other patterns?</text>
  </message>
  <message>
    <ts>2017-07-20T17:07:34.229249</ts>
    <user>U6580B1UM</user>
    <text>Why is that?</text>
  </message>
  <message>
    <ts>2017-07-20T17:07:36.230157</ts>
    <user>U07SCV14J</user>
    <text>You probably want to use `~fail` instead of `(~do (raise-syntax-error ...))`. Of course, in this case, you probably don't want the second case at all, and instead might just want to add `#:description "question"` to `q` and just let syntax-parse generate its own error message.</text>
  </message>
  <message>
    <ts>2017-07-20T17:08:17.247811</ts>
    <user>U07SCV14J</user>
    <text>But yes, generally, syntax-parse tries _everything_. It backtracks to try every possible solution unless you explicitly add cuts/commits.</text>
  </message>
  <message>
    <ts>2017-07-20T17:08:59.266123</ts>
    <user>U07SCV14J</user>
    <text>It's possible to construct a situation in which that backtracking behavior is desirable, but it often isn't, so `#:commit` is a useful option for a lot of syntax classes.</text>
  </message>
  <message>
    <ts>2017-07-20T17:09:15.273111</ts>
    <user>U07SCV14J</user>
    <text>Unfortunately, I don't have time to construct such an example, though.</text>
  </message>
  <message>
    <ts>2017-07-20T17:12:44.366117</ts>
    <user>U6580B1UM</user>
    <text>No, you've been plenty helpful even without! Thanks &lt;@U07SCV14J&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T17:30:53.825327</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U6580B1UM&gt; The "try everything" approach is also paired with a notion of "progress" - syntax-parse orders possible parses based on how early they fail. When parsing fails, this lets syntax-parse choose the parse that failed the latest and uses that parse for an error message, since that's likely what you want. The "Introduction" section of the syntax parse docs describes this and other aspects of syntax-parse in a friendly manner, I recommend reading it: &lt;http://docs.racket-lang.org/syntax/stxparse-intro.html?q=syntax%20parse&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:15:34.005978</ts>
    <user>U08JL5H89</user>
    <text>You can use the #:version keyword to specify a min version. Is there any easy way to specify a max version?</text>
  </message>
  <message>
    <ts>2017-07-21T16:18:07.068771</ts>
    <user>U07SCV14J</user>
    <text>Not only is there not an easy way, there is no way at all.</text>
  </message>
  <message>
    <ts>2017-07-21T16:34:38.467182</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U07SCV14J&gt; Hmm…welp lol</text>
  </message>
  <message>
    <ts>2017-07-21T16:35:16.481782</ts>
    <user>U08JL5H89</user>
    <text>Looks like I'll have to catch that at runtime instead then. That sucs.</text>
  </message>
  <message>
    <ts>2017-07-21T16:35:19.482861</ts>
    <user>U08JL5H89</user>
    <text>sucks*</text>
  </message>
  <message>
    <ts>2017-07-21T16:35:28.486640</ts>
    <user>U08JL5H89</user>
    <text>(And is also _really_ bad. :confused: )</text>
  </message>
  <message>
    <ts>2017-07-21T16:37:13.528862</ts>
    <user>U07SCV14J</user>
    <text>The correct policy, according to the current package system policies, is to never break backwards compatibility. That way, there's never any reason to have a max version.</text>
  </message>
  <message>
    <ts>2017-07-21T16:37:26.534209</ts>
    <user>U07SCV14J</user>
    <text>I make no comment on whether or not I find that policy reasonable.</text>
  </message>
  <message>
    <ts>2017-07-21T16:41:58.643002</ts>
    <user>U08JL5H89</user>
    <text>Ya….that's not ganna fly.</text>
  </message>
  <message>
    <ts>2017-07-21T16:42:16.649987</ts>
    <user>U08JL5H89</user>
    <text>FFmpeg, for example, WILL break backwards compatibility, on major version updates.</text>
  </message>
  <message>
    <ts>2017-07-21T16:42:32.656317</ts>
    <user>U08JL5H89</user>
    <text>(Minor ones will only add functionality, not breaking anything.)</text>
  </message>
  <message>
    <ts>2017-07-21T16:42:46.661864</ts>
    <user>U08JL5H89</user>
    <text>As such, the only thing I can think of is to make a ffmpeg package for every version.</text>
  </message>
  <message>
    <ts>2017-07-21T16:42:46.662008</ts>
    <user>U07SCV14J</user>
    <text>Then, according to the current package system policy, you should make a new (Racket) package for each breaking version of FFmpeg.</text>
  </message>
  <message>
    <ts>2017-07-21T16:43:01.667805</ts>
    <user>U08JL5H89</user>
    <text>Well fun.</text>
  </message>
  <message>
    <ts>2017-07-21T16:44:00.691031</ts>
    <user>U07SCV14J</user>
    <text>See section 10.5 of the package documentation. &lt;http://docs.racket-lang.org/pkg/FAQ.html#%28part._.How_can_.I_specify_which_version_of_a_package_.I_depend_on_if_its_interface_has_changed_and_.I_need_an_old_version_%29&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:45:40.730786</ts>
    <user>U08JL5H89</user>
    <text>Welp great.</text>
  </message>
  <message>
    <ts>2017-07-21T16:46:09.742001</ts>
    <user>U08JL5H89</user>
    <text>So basically the official policy is to flood the package server with slightly different versions of ffmpeg.</text>
  </message>
  <message>
    <ts>2017-07-21T16:46:19.746125</ts>
    <user>U08JL5H89</user>
    <text>(whenever they break compatibility anyway.)</text>
  </message>
  <message>
    <ts>2017-07-21T16:46:43.755519</ts>
    <user>U08JL5H89</user>
    <text>I guess at worst, it'll be ~200 packages.</text>
  </message>
  <message>
    <ts>2017-07-24T12:01:58.868141</ts>
    <user>U3SEVDPJT</user>
    <text>I'd been thinking about the current package policy, I was wondering if it would be feasible to layer a protocol on top of the current package system. Create a package of packages, a "meta-package", give it a canonical name, and each package in the meta-package would represent a major version with minor versions being kept within each package.</text>
  </message>
  <message>
    <ts>2017-07-24T12:02:33.889879</ts>
    <user>U3SEVDPJT</user>
    <text>I'm not sure how feasible that idea would be and whether the current system can be hacked in that fashion.</text>
  </message>
  <message>
    <ts>2017-07-24T12:24:58.653393</ts>
    <user>U462H29AR</user>
    <text>I mean, as _users_ of packages I think everyone agrees we want them to act like persistent data structures -- only add new capabilities, never take away old ones?</text>
  </message>
  <message>
    <ts>2017-07-24T12:25:47.680947</ts>
    <user>U462H29AR</user>
    <text>As _developers_ of packages: There's no shame in saying, well, after making Thing, I realize it should have had a whole other design -- and going on to make Other Thing.</text>
  </message>
  <message>
    <ts>2017-07-24T12:26:52.716953</ts>
    <user>U462H29AR</user>
    <text>I think there's some shame in saying, Thing is now a shadow of its former self, and will suddenly break things. And transitively break things.</text>
  </message>
  <message>
    <ts>2017-07-24T12:27:35.740200</ts>
    <user>U462H29AR</user>
    <text>I'd love to see us stick with this idea(l) as long as we can?</text>
  </message>
  <message>
    <ts>2017-07-24T12:28:35.773765</ts>
    <user>U462H29AR</user>
    <text>But I don't know what to do about situations like &lt;@U08JL5H89&gt; trying to wrap or use something that is rampantly mutating its interface with contract-busting major versions.</text>
  </message>
  <message>
    <ts>2017-07-24T12:31:21.866622</ts>
    <user>U086VDRBK</user>
    <text>Have thing1, thing2, ..., thingN  and then have a bonus package named thing that just reexports  thingN ?</text>
  </message>
  <message>
    <ts>2017-07-24T12:35:10.991226</ts>
    <user>U3SEVDPJT</user>
    <text>&lt;@U462H29AR&gt;, I'm sympathetic to that idea, it is frustrating to manage compatibility breaking issues and I'm interested in seeing how far we can go with one package per compatibility-respecting code , but on the other hand, it would be nice to have some notion of namespace management to handle various versions</text>
  </message>
  <message>
    <ts>2017-07-24T12:35:24.998691</ts>
    <user>U07SCV14J</user>
    <text>I strongly believe that Racket would benefit from a more ordinary language package management solution, with version bounds and a constraint solver.</text>
  </message>
  <message>
    <ts>2017-07-24T12:35:27.000437</ts>
    <user>U3SEVDPJT</user>
    <text>&lt;@U086VDRBK&gt; yeah that pretty much sums up what I am talking about.</text>
  </message>
  <message>
    <ts>2017-07-24T12:35:47.011114</ts>
    <user>U07SCV14J</user>
    <text>I've discussed a little bit about what that would take to do right with… &lt;@U3NJS8H7C&gt; and &lt;@U0702F2CE&gt;, IIRC?</text>
  </message>
  <message>
    <ts>2017-07-24T12:35:52.013715</ts>
    <user>U07SCV14J</user>
    <text>But it's been a little while.</text>
  </message>
  <message>
    <ts>2017-07-24T12:36:04.020133</ts>
    <user>U3SEVDPJT</user>
    <text>Would that be possible to reexport packages through one package?</text>
  </message>
  <message>
    <ts>2017-07-24T12:36:27.032166</ts>
    <user>U086VDRBK</user>
    <text>&lt;@U3SEVDPJT&gt;  If I recall correctly, there were a discussion on the mailing list (about the time the new package system arrived)</text>
  </message>
  <message>
    <ts>2017-07-24T12:37:19.059947</ts>
    <user>U3SEVDPJT</user>
    <text>yes, I do recall that as well, I read all of correspondence that got generated when the new system was released, I'd have to go back and review to see if any viable ideas were proposed</text>
  </message>
  <message>
    <ts>2017-07-24T12:37:37.069436</ts>
    <user>U07SCV14J</user>
    <text>FWIW, I thought about adding a metaprotocol of sorts on top of the existing package system, but since then I've realized it would probably be easier to just extend the package system to add more metadata to packages and features to `raco pkg`.</text>
  </message>
  <message>
    <ts>2017-07-24T12:38:42.103752</ts>
    <user>U3SEVDPJT</user>
    <text>yeah, I'm in agreement, it seems it'd be easier to just extend the system, most of the ideas to date can be categorized as "adding more metadata" and have better metadata aware tools.</text>
  </message>
  <message>
    <ts>2017-07-24T12:41:26.190952</ts>
    <user>U07SCV14J</user>
    <text>So, my current understanding is that there would need to be four changes to get the package system to where I want it to be. (1) Packages need to become a mapping from package name *+* version to package sources, instead of just package name. This can be added by adding more metadata to the existing package protocol. (2) Packages need to be able to specify version ranges in their `info.rkt` files. (3) `raco pkg` needs to be extended to do constraint solving when installing packages. (4) Racket needs support for package "sandboxes” a la Cabal sandboxes, Bundler environments, or Python virtualenv, so that multiple versions of a package can be installed on the same machine without breaking everything.</text>
  </message>
  <message>
    <ts>2017-07-24T12:42:09.213908</ts>
    <user>U07SCV14J</user>
    <text>None of those things are anywhere near new research, but they are still a lot of work.</text>
  </message>
  <message>
    <ts>2017-07-24T12:42:21.220540</ts>
    <user>U462H29AR</user>
    <text>Should there also be Scribble enhancements -- so that as well as "added in version x" you can say "taken away in version x" or "gratuitously changed in version x"?  I am mostly but not entirely joking. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T12:43:02.242381</ts>
    <user>U07SCV14J</user>
    <text>I think so! Having better tooling support for deprecations would be good, too.</text>
  </message>
  <message>
    <ts>2017-07-24T12:43:11.247165</ts>
    <user>U3SEVDPJT</user>
    <text>or available in #lang version4.5</text>
  </message>
  <message>
    <ts>2017-07-24T12:43:28.256445</ts>
    <user>U3SEVDPJT</user>
    <text>though that probably would be an abuse of the lang system!</text>
  </message>
  <message>
    <ts>2017-07-24T12:44:19.283961</ts>
    <user>U07SCV14J</user>
    <text>Well, to be clear, my vision does _not_ involve installing multiple versions of a package at the same time, or specifying versions in imports a la PLaneT. There are various reasons why you want to decouple version specification from module imports.</text>
  </message>
  <message>
    <ts>2017-07-24T12:44:31.290366</ts>
    <user>U462H29AR</user>
    <text>Are these versions a new dimension by which we multiply the `{-lib -doc -test}` packages, too?</text>
  </message>
  <message>
    <ts>2017-07-24T12:44:39.294877</ts>
    <user>U3SEVDPJT</user>
    <text>&lt;@U07SCV14J&gt; your understanding seems spot-on and is what I was thinking too. The package sources are already uniquely identified by the package checksum so it would be a simple mapping from name to the checksum.</text>
  </message>
  <message>
    <ts>2017-07-24T12:45:19.316126</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U462H29AR&gt; No, not in the sense that they would take up multiple spots in the package index. Think closer to a generalization of version exceptions.</text>
  </message>
  <message>
    <ts>2017-07-24T12:45:21.317523</ts>
    <user>U3SEVDPJT</user>
    <text>&lt;@U462H29AR&gt; I would consider those packages to be "satellite packages" and grouped together</text>
  </message>
  <message>
    <ts>2017-07-24T12:46:44.363507</ts>
    <user>U07SCV14J</user>
    <text>There are a lot of other changes I would ideally make to Racket's package system if we could start from scratch, including a way to subsume the lib/doc/test split, but those things are far harder than anything I mentioned so far, since they would involve more fundamental changes to how Racket internally treats modules and module loading.</text>
  </message>
  <message>
    <ts>2017-07-24T12:47:18.382106</ts>
    <user>U07SCV14J</user>
    <text>The package system is currently designed in such a way that the core of Racket knows effectively nothing about packages. Packages just extend collections, and Racket only knows about collections.</text>
  </message>
  <message>
    <ts>2017-07-24T12:47:50.399877</ts>
    <user>U07SCV14J</user>
    <text>There are downsides to this, though, such as the fact that it's impossible to resolve conflicts in the case where multiple packages provide modules at the same path.</text>
  </message>
  <message>
    <ts>2017-07-24T12:48:05.408342</ts>
    <user>U07SCV14J</user>
    <text>(And that includes multiple versions of the same package, in the proposed system.)</text>
  </message>
  <message>
    <ts>2017-07-24T12:48:36.425024</ts>
    <user>U462H29AR</user>
    <text>If the pkg mgr could handle modules (for the lib/doc/test purpose), it could handle modules like api1, api2 ... and _that_ feels better to me than arbitrary version numbers and disappearing interfaces.</text>
  </message>
  <message>
    <ts>2017-07-24T12:49:08.442836</ts>
    <user>U07SCV14J</user>
    <text>I don't think you want multiple versions to be distinct packages because you really want to be able to depend on version ranges.</text>
  </message>
  <message>
    <ts>2017-07-24T12:49:43.461767</ts>
    <user>U462H29AR</user>
    <text>But I don't care about version ranges. Those are a proxy for capabilities, which I do care about. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T12:50:21.482688</ts>
    <user>U462H29AR</user>
    <text>I'd rather say, "I need api-that-gives-me-foo, and the docs, but not the tests", for example..</text>
  </message>
  <message>
    <ts>2017-07-24T12:50:22.483559</ts>
    <user>U3SEVDPJT</user>
    <text>I'm not sure if changing module treatment and loading would be good idea, at the end of the day, the packages are being combined to create a set of collections that are available for Racket to load.
lib/tests/docs don't necessarily need to be handled specially at the module level.</text>
  </message>
  <message>
    <ts>2017-07-24T12:51:24.517858</ts>
    <user>U3SEVDPJT</user>
    <text>Indeed, I feel would rather have a capability that points to specified set of interfaces and dependencies, instead of harder to understand version numbers.</text>
  </message>
  <message>
    <ts>2017-07-24T12:52:03.539219</ts>
    <user>U3SEVDPJT</user>
    <text>hmmm, that does seem like a potentially fruitful direction, but I fear it likely need a lot more research before it'd be viable for general community use.</text>
  </message>
  <message>
    <ts>2017-07-24T12:52:04.539621</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U462H29AR&gt; You could certainly try and design something much more elaborate than version numbers, but generally some notion of semantic versioning tends to be a good set of compromises to solve that problem.</text>
  </message>
  <message>
    <ts>2017-07-24T12:53:17.580148</ts>
    <user>U07SCV14J</user>
    <text>Especially since often you want to break compatibility in a small way, and you want some dependent packages to use conditional compilation to pave over the differences.</text>
  </message>
  <message>
    <ts>2017-07-24T12:54:57.635062</ts>
    <user>U462H29AR</user>
    <text>I guess I've logged some time with things like `QueryInterface` in COM, `fboundp` in Emacs Lisp, and `dynamic-require` in Racket.
And I've found it preferable (to me) to ask directly for the thing I actually care about.
Than to have a level of indirection looking at hopefully correct docs and change logs.</text>
  </message>
  <message>
    <ts>2017-07-24T12:55:53.665821</ts>
    <user>U462H29AR</user>
    <text>If the desired function turns out not to exist, and the pkg versioning theory is "only add", then I can give the user an error message like "Please update to the latest ___", and that's it.  [Edit: Or, maybe gracefully downgrade something.]</text>
  </message>
  <message>
    <ts>2017-07-24T12:57:16.710536</ts>
    <user>U462H29AR</user>
    <text>Maybe that's impractical but I stubbornly want to live in a world like that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T12:58:07.735161</ts>
    <user>U07SCV14J</user>
    <text>For what it's worth, I abandoned the idea of using Racket at work because of the lack of versioning. And I've sort of drifted away from Racket development _in general_ because of it. The burden on package authors to divine a perfect architecture in the first version is far, far too much in a field that strongly benefits from rapid iteration on incremental changes.</text>
  </message>
  <message>
    <ts>2017-07-24T12:59:26.781265</ts>
    <user>U07SCV14J</user>
    <text>The strategy of adding an entirely new package for breaking changes isn't good enough, since often the change in question is actually quite small, and you don't want to completely fragment your own ecosystem just to change a small thing that likely won't impact 90% of users.</text>
  </message>
  <message>
    <ts>2017-07-24T13:00:17.811137</ts>
    <user>U462H29AR</user>
    <text>Those are great points. And to be clear, I'm definitely in favor of a boolean "I'm ready/willing for other packages to depend on mine" flag, and having the option not to set that until you're ready!</text>
  </message>
  <message>
    <ts>2017-07-24T13:00:21.813190</ts>
    <user>U07SCV14J</user>
    <text>The current package policy works okay with very small teams, but I now work in a large organization that needs the ability to move asynchronously and update at their own pace.</text>
  </message>
  <message>
    <ts>2017-07-24T13:00:46.828425</ts>
    <user>U07SCV14J</user>
    <text>JS's and Haskell's package systems have supported our needs there quite nicely.</text>
  </message>
  <message>
    <ts>2017-07-24T13:00:55.834279</ts>
    <user>U07SJGB4H</user>
    <text>for open source racket the problem is somewhat mitigated by the package-wide continuous build system</text>
  </message>
  <message>
    <ts>2017-07-24T13:01:13.844274</ts>
    <user>U07SJGB4H</user>
    <text>but if you're not using that and you write a lot of packages the pain will magnify</text>
  </message>
  <message>
    <ts>2017-07-24T13:01:20.849120</ts>
    <user>U07SCV14J</user>
    <text>We have a number of internal packages that break compatibility on a monthly basis, and that's okay, because we publish detailed changelogs and let people upgrade whenever they get the chance.</text>
  </message>
  <message>
    <ts>2017-07-24T13:01:46.864109</ts>
    <user>U07SCV14J</user>
    <text>CI can't change the fundamental problem of backwards incompatible changes retroactively breaking code that worked before without changing anything, which is unacceptable.</text>
  </message>
  <message>
    <ts>2017-07-24T13:02:08.876555</ts>
    <user>U07SJGB4H</user>
    <text>I didn't say it changed the fundamental problem, I said it somewhat mitigated it</text>
  </message>
  <message>
    <ts>2017-07-24T13:03:17.916803</ts>
    <user>U07SCV14J</user>
    <text>I didn't claim you did, but I'm mostly just expressing that these problems are not imaginary, since _I_ have basically ditched Racket for anything "real” because the tooling doesn't support my needs.</text>
  </message>
  <message>
    <ts>2017-07-24T13:03:51.935357</ts>
    <user>U3SEVDPJT</user>
    <text>&lt;@U07SCV14J&gt; it's concerning that you weren't able to accommodate the current package system to your organization's needs, that says to me the system needs at least a review. It's been in use for how long as it been? 3-4 years? That's long enough to reassess how successful the system has been and what improvements would be needed.</text>
  </message>
  <message>
    <ts>2017-07-24T13:04:43.964424</ts>
    <user>U07SCV14J</user>
    <text>I don't think the changes I mentioned would be terribly controversial; they were formed in a discussion between me and a few other people. Someone just needs to implement them.</text>
  </message>
  <message>
    <ts>2017-07-24T13:05:01.974245</ts>
    <user>U07SCV14J</user>
    <text>But that takes time and effort, and currently nobody has enough of that to spare.</text>
  </message>
  <message>
    <ts>2017-07-24T13:05:14.981369</ts>
    <user>U3SEVDPJT</user>
    <text>I'm in a position where I'm using Racket at work for small-scale projects, I've yet had the opportunity to seriously use the package system to manage my needs, so it'll be interesting to see how far I'm able to go.</text>
  </message>
  <message>
    <ts>2017-07-24T13:07:11.044222</ts>
    <user>U07SCV14J</user>
    <text>One example of something we've done at my organization that has been extremely successful is a Haskell DSL we use for writing deployment scripts. We use Haskell's package versioning system to write self-executing scripts in Haskell (with a relevant shebang), which is pretty cool. Since the scripts express the version they depend on, we can judiciously break backwards compatibility whenever it makes sense, which has let us rapidly iterate without feeling a need for BDUF.</text>
  </message>
  <message>
    <ts>2017-07-24T13:07:40.059351</ts>
    <user>U07SCV14J</user>
    <text>I couldn't really do that in Racket, even if it would be a good tool for the job.</text>
  </message>
  <message>
    <ts>2017-07-24T13:08:52.097277</ts>
    <user>U07SJGB4H</user>
    <text>How well would a two stage solution work that first added everything except the ability to install multiple versions at the same time? The other three pieces are much easier to implement and might work as a temporary solution.</text>
  </message>
  <message>
    <ts>2017-07-24T13:10:02.135086</ts>
    <user>U07SCV14J</user>
    <text>They're mostly independent, but the sandboxing is pretty necessary to avoid inventing Cabal Hell in the Racket ecosystem. Sandboxing is actually mostly implemented, too, so it's actually probably not that much effort to add.</text>
  </message>
  <message>
    <ts>2017-07-24T13:10:50.161173</ts>
    <user>U07SCV14J</user>
    <text>If it were a huge amount of work, I would agree with you, but I don't think it makes a ton of sense to skip if you're also going to do the comparatively monumental amount of work to implement the other parts.</text>
  </message>
  <message>
    <ts>2017-07-24T13:10:56.164329</ts>
    <user>U3SEVDPJT</user>
    <text>may you point me to where the sandbox environment has been implemented? Is it a raco feature?</text>
  </message>
  <message>
    <ts>2017-07-24T13:12:26.211495</ts>
    <user>U07SCV14J</user>
    <text>There isn't really user-facing tooling for it, so the work would basically just be to integrate it with raco, but the infrastructure exists. I can't remember exactly where the relevant features are documented, but the feature is called "tethering”.</text>
  </message>
  <message>
    <ts>2017-07-24T13:12:45.221720</ts>
    <user>U3SEVDPJT</user>
    <text>ooh I do remember coming across that term</text>
  </message>
  <message>
    <ts>2017-07-24T13:12:50.224321</ts>
    <user>U07SCV14J</user>
    <text>It's alluded to here: &lt;http://docs.racket-lang.org/raco/dirs.html#%28def._%28%28lib._setup%2Fdirs..rkt%29._find-addon-tethered-console-bin-dir%29%29&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T13:14:27.277034</ts>
    <user>U07SJGB4H</user>
    <text>An important question is whether implementing it would require help from mflatt, since he likely won't have time to focus on stuff other than racket7</text>
  </message>
  <message>
    <ts>2017-07-24T13:15:17.304981</ts>
    <user>U07SCV14J</user>
    <text>I think it could be done with minimal knowledge of Racket internals. A few questions here and there maybe, but I don't see why much of it would involve anything complicated.</text>
  </message>
  <message>
    <ts>2017-07-24T13:15:58.326976</ts>
    <user>U07SCV14J</user>
    <text>I would bet the majority of the work would be extending `raco pkg install` to do constraint solving and handle the notion of version conflicts.</text>
  </message>
  <message>
    <ts>2017-07-24T13:16:11.333523</ts>
    <user>U3SEVDPJT</user>
    <text>Suppose the four main items are designed and made available in a side-branch of the racket mainline. Would it be able to accommodate the current style of additive changes. Suppose one package favors the additive style and other one takes the version numbering approach. How do we manage users experience so they don't get confused by two different styles?</text>
  </message>
  <message>
    <ts>2017-07-24T13:16:55.357135</ts>
    <user>U07SCV14J</user>
    <text>A package could easily just only make additive changes by only ever bumping the minor version.</text>
  </message>
  <message>
    <ts>2017-07-24T13:17:07.363744</ts>
    <user>U07SCV14J</user>
    <text>But there would certainly be some tricky migration/compat issues to work out.</text>
  </message>
  <message>
    <ts>2017-07-24T13:17:13.367260</ts>
    <user>U07SCV14J</user>
    <text>I don't think any of them are super hard, though.</text>
  </message>
  <message>
    <ts>2017-07-24T13:17:17.369162</ts>
    <user>U3SEVDPJT</user>
    <text>and by setting max version to #f indefinitely really</text>
  </message>
  <message>
    <ts>2017-07-24T13:18:31.408670</ts>
    <user>U07SCV14J</user>
    <text>IIRC, the proposed compatibility solution was to basically (for now) treat packages specified without bounds as `&amp;gt;=1 &amp;amp;&amp;amp; &amp;lt;2`.</text>
  </message>
  <message>
    <ts>2017-07-24T13:18:47.417500</ts>
    <user>U07SJGB4H</user>
    <text>The version constraint solving doesn't sound like the hard part, especially if it's implemented with the aid of a logic programming dsl</text>
  </message>
  <message>
    <ts>2017-07-24T13:19:25.437452</ts>
    <user>U07SCV14J</user>
    <text>I don't really mean the constraint solving algorithm itself, but I mean plumbing the inputs and outputs of that algorithm through the rest of the system.</text>
  </message>
  <message>
    <ts>2017-07-24T13:20:46.480769</ts>
    <user>U07SCV14J</user>
    <text>You need to set up the infrastructure to make the version information available to the solver and configurable by users. You need to handle all the corner cases of version conflicts and solver failures. You need to present meaningful error messages when the solver doesn't come up with a solution. And you need to implement all of this while maintaining backwards compatibility with the old system.</text>
  </message>
  <message>
    <ts>2017-07-24T13:21:43.511361</ts>
    <user>U3SEVDPJT</user>
    <text>indeed oof that sums up the problem.</text>
  </message>
  <message>
    <ts>2017-07-24T13:23:44.576274</ts>
    <user>U07SCV14J</user>
    <text>Doing package management right is really hard! I don't know of any programming language that got it right from the beginning, most added it on only after it became obvious how necessary it was. :p</text>
  </message>
  <message>
    <ts>2017-07-24T13:24:14.592476</ts>
    <user>U07SCV14J</user>
    <text>(And many langs still have awful package management. Go comes to mind…)</text>
  </message>
  <message>
    <ts>2017-07-24T13:24:32.602176</ts>
    <user>U3SEVDPJT</user>
    <text>we just need to find that magic wand everybody keeps talking about.</text>
  </message>
  <message>
    <ts>2017-07-24T13:24:45.609110</ts>
    <user>U08JL5H89</user>
    <text>I agree with &lt;@U07SCV14J&gt; Saying ‘make a new package' whenever you make a breaking change seems fine, until you realize that what is going to happen is that your going to get a package catalog with hundreds of packages per actual package.</text>
  </message>
  <message>
    <ts>2017-07-24T13:25:02.618407</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3SEVDPJT&gt;  Oh, its in the cellar, let me go grab it.</text>
  </message>
  <message>
    <ts>2017-07-24T13:25:11.623188</ts>
    <user>U07SJGB4H</user>
    <text>Plus different users have different ideas of what a breaking change is</text>
  </message>
  <message>
    <ts>2017-07-24T13:25:21.629034</ts>
    <user>U3SEVDPJT</user>
    <text>and the current package index is not easy to parse so your own study case is only going to exacerbate it.</text>
  </message>
  <message>
    <ts>2017-07-24T13:26:03.652098</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U07SJGB4H&gt; That too. So….this is why I make a new package for every git commit.</text>
  </message>
  <message>
    <ts>2017-07-24T13:26:12.657043</ts>
    <user>U08JL5H89</user>
    <text>(Or at least every commit I push.)</text>
  </message>
  <message>
    <ts>2017-07-24T13:27:29.699632</ts>
    <user>U07SJGB4H</user>
    <text>_Plus_ you can't even tell ahead of time whether a change is going to break any dependents with perfect accuracy!</text>
  </message>
  <message>
    <ts>2017-07-24T13:27:56.714250</ts>
    <user>U07SJGB4H</user>
    <text>in a large enough ecosystem someone's always using your thing in a way you never could have anticipated</text>
  </message>
  <message>
    <ts>2017-07-24T13:28:02.717592</ts>
    <user>U07SCV14J</user>
    <text>Tbh that's one of the reasons why I think Hackage's ability to edit constraints after publishing a package is a good feature.</text>
  </message>
  <message>
    <ts>2017-07-24T13:28:35.736152</ts>
    <user>U07SCV14J</user>
    <text>A lot of tools get unhappy with the notion that releases are not immutable. But otherwise, if you don't have that option, those bad constraints stick around and mess up the solver forever.</text>
  </message>
  <message>
    <ts>2017-07-24T13:29:22.762285</ts>
    <user>U07SJGB4H</user>
    <text>a release's content being immutable while its declared relationships to other releases being mutable doesn't sound so bad to me either</text>
  </message>
  <message>
    <ts>2017-07-24T13:29:25.764356</ts>
    <user>U07SCV14J</user>
    <text>But yeah. All of Maven, Bundler, NPM/Yarn, Cabal, etc. are tools added long after the lang was invented to solve this problem.</text>
  </message>
  <message>
    <ts>2017-07-24T13:29:54.780659</ts>
    <user>U07SCV14J</user>
    <text>I guess maybe Cargo gets this right from the beginning? But Rust is unique in a lot of different ways. :)</text>
  </message>
  <message>
    <ts>2017-07-24T13:30:47.811198</ts>
    <user>U3SEVDPJT</user>
    <text>so we have several notions at work here, some set of release source files, versions, canonical names, bundling variants with or without docs, constraints. Need to figure out how to stir all of them into a workable backwards compatible solution.</text>
  </message>
  <message>
    <ts>2017-07-24T13:31:59.851582</ts>
    <user>U3SEVDPJT</user>
    <text>the idea of dependency relationships being modified after the release doesn't sound too bad to me either.</text>
  </message>
  <message>
    <ts>2017-07-24T13:32:24.865806</ts>
    <user>U07SCV14J</user>
    <text>Racket's package model is more mutable than many, anyway, since the package system doesn't even host the package sources.</text>
  </message>
  <message>
    <ts>2017-07-24T13:33:07.889742</ts>
    <user>U3SEVDPJT</user>
    <text>The obvious next step for me is to study other package solutions, see what ideas they overlap in and what work and doesn't work.</text>
  </message>
  <message>
    <ts>2017-07-24T13:33:16.894554</ts>
    <user>U07SCV14J</user>
    <text>So a bad actor could just nuke a git repo or push a change to a release tag and cause a lot of problems. But I would not recommend addressing that problem with all of this.</text>
  </message>
  <message>
    <ts>2017-07-24T13:33:38.906477</ts>
    <user>U07SJGB4H</user>
    <text>there's a really good blog post about package systems that's helpful for this</text>
  </message>
  <message>
    <ts>2017-07-24T13:33:49.912525</ts>
    <user>U07SJGB4H</user>
    <text>&lt;https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T13:34:06.921494</ts>
    <user>U3SEVDPJT</user>
    <text>That reminds me of that time when someone blew away their npm contributions and crashed the npm network which had been depending on one small packages released by that author departing with all of his toys.</text>
  </message>
  <message>
    <ts>2017-07-24T13:34:21.929921</ts>
    <user>U07SJGB4H</user>
    <text>wasn't that the "leftpad" package?</text>
  </message>
  <message>
    <ts>2017-07-24T13:34:26.932805</ts>
    <user>U3SEVDPJT</user>
    <text>yeah that sounds right</text>
  </message>
  <message>
    <ts>2017-07-24T13:34:35.937613</ts>
    <user>U07SCV14J</user>
    <text>IMO, the Bundler/Cabal models are a really good set of tools to study. Yarn is good, too, but its model is different from Racket's, so it's not really relevant.</text>
  </message>
  <message>
    <ts>2017-07-24T13:35:53.979135</ts>
    <user>U3SEVDPJT</user>
    <text>thanks &lt;@U07SJGB4H&gt; and &lt;@U07SCV14J&gt; it's probably foolish of me to contemplate coming up with something that makes an impact but this is definitely a problem area that deserves a closer look.</text>
  </message>
  <message>
    <ts>2017-07-24T13:36:47.007788</ts>
    <user>U07SJGB4H</user>
    <text>at the very least a tracking issue in the racket repo with some sort of plan and a breakdown of the work to do would be a big step forward</text>
  </message>
  <message>
    <ts>2017-07-24T13:37:26.028930</ts>
    <user>U3SEVDPJT</user>
    <text>ha, &lt;#C06V96CKX|general&gt; anybody wants to join in?</text>
  </message>
  <message>
    <ts>2017-07-24T13:37:42.037636</ts>
    <user>U07SJGB4H</user>
    <text>maybe after I finish working on stuff for racketcon :p</text>
  </message>
  <message>
    <ts>2017-07-24T13:38:03.048939</ts>
    <user>U3SEVDPJT</user>
    <text>and a few other projects, or next year...</text>
  </message>
  <message>
    <ts>2017-07-24T13:39:17.088798</ts>
    <user>U07SCV14J</user>
    <text>I'd be interested in working on it if I had about 40 more hours per week. ;)</text>
  </message>
  <message>
    <ts>2017-07-24T13:39:21.090661</ts>
    <user>U3SEVDPJT</user>
    <text>more seriously, is the general management interested in entertaining a significant update to the package system? Or would we need to do some lobbying?</text>
  </message>
  <message>
    <ts>2017-07-24T13:40:22.123466</ts>
    <user>U3SEVDPJT</user>
    <text>I do realize this likely may need changes to be made to DrRacket's package manager, and the package index site, so that'll be nontrivial to coordinate.</text>
  </message>
  <message>
    <ts>2017-07-24T13:40:53.139784</ts>
    <user>U07SJGB4H</user>
    <text>the package site probably wouldn't _have_ to change to support this</text>
  </message>
  <message>
    <ts>2017-07-24T13:41:13.150796</ts>
    <user>U07SCV14J</user>
    <text>The package server would. But not necessarily the frontend, I suppose.</text>
  </message>
  <message>
    <ts>2017-07-24T13:43:49.236277</ts>
    <user>U07SCV14J</user>
    <text>I found the email thread from a little over a year ago between me, &lt;@U3NJS8H7C&gt;, and &lt;@U0702F2CE&gt;. Here's the bulk of what we concluded, as outlined by Matthew:
```
* Change the information for a package in a catalog to include a
  version -&amp;gt; source mapping.

  Concretely, this mapping could go under a `pkg-versions` key added
  to the current table. So, for backward compatibility, we still have
  the current information (for the latest version) as it's reported
  now. Also, package clients could continue to deal with catalogs that
  don;t include a `pkg-versions` entry.

  The version listed for a given source and checksum would be checked
  against the `version` declaration in a package's "info.rkt" file.
  The package manager would still only allow the installation of one
  checksum (as selected by version number, typically) per package.

* Change the catalog at &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; to accumulate a
  version-keyed mapping by noticing when, in the case of a Git-based
  source, a new checksum has a new version. When the version changes,
  the server can keep the previous version mapped to the previous
  checksum.

  For sources not based on Git, package authors would have to use some
  extra interface or tool to set a mapping. We'd want a `raco` tool
  for tasks like that. (It's strange to me that such a tool doesn't
  exist already.) The tool could also help authors using a Git repo
  update the package version number appropriately.

  If &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; missed a version due to a rapid sequence of
  version updates, if broken versions need to be removed, if a new
  revision for an old version needs to be introduced on a branch, etc.
  --- all of those would be possible manually. The automatic
  construction of the version table by &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; would just
  be a convenience for the common case and make it behave similar to
  the current system in those simple cases.

* Change the package-manager client to support the usual constraints
  on dependency versions. The package installation and update tools
  would have to solve those dependencies.

  The current `#:version` field in a dependency would be interpreted
  as allow &amp;gt;= version and &amp;lt;= the next major version (non-inclusive). A
  new keyword for a dependency would support more general constraints.

  [The "graphs" package declares a dependency on "base" version
   "5.3.2". That looks like the only package whose version dependency
   would need to be adjusted to fix this rule.]

  I imagine that `raco pkg update` should by default only update to a
  checksum for a version whose major number matches the current
  installation. Also, it should downgrade a package to solve
  constraints only if the user says that downgrades are ok.

  Right now, most dependency specifications are unversioned. I don't
  think it will work to assume "1.x", unless we add a special case for
  "base" to default to "6.x" and figure out something for "0.x".
  Unless we find something better, we'll end up allowing dependency
  specifications without a compatibility level, which is too bad.

  The dependency information currently provided by
  &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; is not precise enough to resolve dependencies
  --- it merges `deps` and `build-deps` --- but that should be easy
  to fix.

* A stack-like sequence of catalogs could provide a suitable set of
  default versions/checksums of packages (but, as always, that catalog
  can be overridden for a given package by specifying a non-catalog
  source) and serve as an archive of available packages.

* Tools like `raco pkg catalog-archive` could take a version
  constraint, which would typically be specified on "base", and solve
  constraints in the same way as installation.
```</text>
  </message>
  <message>
    <ts>2017-07-24T13:44:43.265675</ts>
    <user>U07SCV14J</user>
    <text>There was a little more discussion after that, but that's close to what we generally ended up agreeing on. I don't think any of those changes would be especially controversial if someone went and implemented them, but that's no small feat.</text>
  </message>
  <message>
    <ts>2017-07-24T13:45:24.288180</ts>
    <user>U3SEVDPJT</user>
    <text>that was very helpful, good to know how the others stand on it.</text>
  </message>
  <message>
    <ts>2017-07-24T14:00:17.783512</ts>
    <user>U3SEVDPJT</user>
    <text>one relevant question here, are the current package tools designed to help end-users or developers? Should the tools attempt to help both audiences?</text>
  </message>
  <message>
    <ts>2017-07-24T14:39:46.088770</ts>
    <user>U3NJS8H7C</user>
    <text>As long as someone follows that kind of plan – one that doesn't involve changing the way that module-name resolution works – then I think anyone could implement the changes. It's mostly a matter of updating the package client in "collects/pkg" (and tests and docs), the package-catalog server's implementation at &lt;https://github.com/racket/pkg-index&gt; , possibly the pkg-build service's implementation at &lt;https://github.com/racket/pkg-build&gt; , and the GUI package manager at &lt;https://github.com/racket/gui-pkg-manager&gt; .

Anything that changes the way module-name resolution works, in contrast, is almost certainly more trouble than you expect, even after I tell you that it's trouble.</text>
  </message>
  <message>
    <ts>2017-07-24T14:53:44.549579</ts>
    <user>U3SEVDPJT</user>
    <text>&lt;@U3NJS8H7C&gt; thank you for the references to the repositories. I believe at this time the module-name resolution should be left alone. Modifying it in anyway would open a too big can of worms. I think the sensible approach at this time is to extend the current system in consecutive ways.</text>
  </message>
  <message>
    <ts>2017-07-24T14:56:37.644694</ts>
    <user>U462H29AR</user>
    <text>&lt;@U07SCV14J&gt; I had to step away, and I'm catching up, and I think this thing you said is interesting for me:

&amp;gt; We have a number of internal packages that break compatibility on a monthly basis, and that's okay, because we publish detailed changelogs and let people upgrade whenever they get the chance.

This is using the package manager in a way that hadn't really occurred to me. Here, "breaking changes" not only isn't bad, it's good -- because it means "people are making progress".

Whereas I've been thinking about the public package manager as a way for people/orgs to provide code for others to use. In which case, breaking changes is something I don't want to do to other people.  If I do it accidentally, I'll try to fix it quickly. And I'd like to depend on packages with a similar attitude.

So that's why I'm feeling, geez, this seems like a lot of work to support breaking changes, and instead why not try to encourage and help people not do that in the first place.  However, you're looking at it also from the point of view of using the package manager as part of in-house configuration management?</text>
  </message>
  <message>
    <ts>2017-07-24T14:58:31.708583</ts>
    <user>U3SEVDPJT</user>
    <text>This gets at the distinction between regular end-users and developer users. The link referred to by &lt;@U07SJGB4H&gt; goes into the distinction in depth and is insightful about that difference.</text>
  </message>
  <message>
    <ts>2017-07-24T14:59:37.744982</ts>
    <user>U462H29AR</user>
    <text>Ah OK ... will catch up more! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T16:05:07.735618</ts>
    <user>U3NP867S6</user>
    <text>@lexi.lambda. @abmclin, @leif, &lt;@U462H29AR&gt;: I'm a bit late to the discussion, but this looks like it may lead to a good Racketeer Office Hours project in Seattle! :)</text>
  </message>
  <message>
    <ts>2017-07-24T16:06:57.790659</ts>
    <user>U08JL5H89</user>
    <text>FWIW, &lt;@U07SCV14J&gt; I don't think any ‘lobbying' to management, so to speak, is required to improve the package manager. Its more about not having the resources…..</text>
  </message>
  <message>
    <ts>2017-07-24T16:07:18.801010</ts>
    <user>U07SCV14J</user>
    <text>That's what I was saying, I think you want to direct that comment at &lt;@U3SEVDPJT&gt;.</text>
  </message>
  <message>
    <ts>2017-07-24T16:07:26.805010</ts>
    <user>U08JL5H89</user>
    <text>Like, if someone where to do it, I don't think anyone would reject the idea, just….its a lot of work.</text>
  </message>
  <message>
    <ts>2017-07-24T16:07:34.809155</ts>
    <user>U08JL5H89</user>
    <text>Ah, okay</text>
  </message>
  <message>
    <ts>2017-07-24T16:07:36.810008</ts>
    <user>U08JL5H89</user>
    <text>Thanks</text>
  </message>
  <message>
    <ts>2017-07-24T16:07:45.814566</ts>
    <user>U08JL5H89</user>
    <text>In that case… &lt;@U3SEVDPJT&gt; ^</text>
  </message>
  <message>
    <ts>2017-07-24T16:08:22.833290</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U462H29AR&gt; It's not really configuration management. It's that we have an internal tool that starts as the most minimal thing that could _possibly_ work, since we want to move quickly and do agile, incremental software design. The thing is, the tool is naturally going to grow in scope as our needs grow and we develop it further, and that means we could either (a) slot all the new features into the existing model, or (b) continuously refactor the architecture to meet new needs.

We need the ability to break changes as our software evolves in order to be able to add new features without things turning into a big ball of mud. That's true whether or not it's an internal tool or not, really. Moving fast sometimes means continuously rethinking the interface to keep it clean even in the face of new scope.</text>
  </message>
  <message>
    <ts>2017-07-24T16:09:08.855345</ts>
    <user>U5KU1HNKY</user>
    <text>yay! I'm gonna meet even more of you in Seattle</text>
  </message>
  <message>
    <ts>2017-07-24T16:09:12.857450</ts>
    <user>U07SCV14J</user>
    <text>I would prefer to use a library that kept a clean, consistent interface and kept migration to a new version *well-documented* over one that infinitely preserved backwards compatibility but ended up with an awful API.</text>
  </message>
  <message>
    <ts>2017-07-24T16:09:48.875255</ts>
    <user>U086VDRBK</user>
    <text>Other features on the wish list:  A daily / weekly email with new packages with links to documentation (and/or info on updated packages)</text>
  </message>
  <message>
    <ts>2017-07-24T16:09:54.878252</ts>
    <user>U5KU1HNKY</user>
    <text>I agree… this is also why I spawn off new projects from old so that they can age/version at their own natural rates</text>
  </message>
  <message>
    <ts>2017-07-24T16:10:27.895154</ts>
    <user>U5KU1HNKY</user>
    <text>&lt;@U086VDRBK&gt; that would be lovely… "This week in Racket” type of thing would be awesome to keep up (for the time being)</text>
  </message>
  <message>
    <ts>2017-07-24T16:12:41.961110</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U07SCV14J&gt; Or one like…cough…ffmpeg…cough….where the API just keeps getting more and more things tacked onto it (sometimes in api breaking ways. :disappointed: ), and now there's 50 billion ways to do the same thing, and only one of them is right. But because all of the tutorial (intentionally singular) was written 10 years ago so it uses an old api…..) sigh. :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-24T16:13:23.981421</ts>
    <user>U07SCV14J</user>
    <text>yeah, dynamic libs tend to suffer from API rot because C has no ability to ever break compatibility.</text>
  </message>
  <message>
    <ts>2017-07-24T16:16:52.082825</ts>
    <user>U086VDRBK</user>
    <text>&lt;@U08JL5H89&gt; luckily C is known to give friendly error messages, when things go wrong :wink:</text>
  </message>
  <message>
    <ts>2017-07-24T16:17:53.112796</ts>
    <user>U3SEVDPJT</user>
    <text>I won't pretend it'd be easy, I understand it's a lot of work. This is something I'd only be able to work on the nights and other periods of free time so I have to be realistic, but I won't mind making an attempt. I think there's enough information to be able to construct a viable roadmap draft at the minimum as suggested by &lt;@U07SJGB4H&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T16:24:46.315798</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U086VDRBK&gt; lol………  Although I do have to say that is actually one area i was pleasantly surprised. Despite the shitty language, FFmpeg's error messages are actually quite nice.</text>
  </message>
  <message>
    <ts>2017-07-24T16:25:04.325029</ts>
    <user>U08JL5H89</user>
    <text>And the code itself was quite nice. The only problem is the documentation, also known as the code. :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-24T17:10:45.682257</ts>
    <user>U08JL5H89</user>
    <text>Is it just me, or are the latest nightlies of DrRacket kind of slow?</text>
  </message>
  <message>
    <ts>2017-07-24T17:13:22.752627</ts>
    <user>U5KU1HNKY</user>
    <text>nightlies?</text>
  </message>
  <message>
    <ts>2017-07-24T17:13:59.769243</ts>
    <user>U3NP867S6</user>
    <text>&lt;http://pre.racket-lang.org/&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T17:14:26.780971</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U5KU1HNKY&gt; ya</text>
  </message>
  <message>
    <ts>2017-07-24T17:14:56.793834</ts>
    <user>U08JL5H89</user>
    <text>Well…technically I'm using ones I've compiled from source, but they're pretty similar.</text>
  </message>
  <message>
    <ts>2017-07-24T17:14:59.795128</ts>
    <user>U5KU1HNKY</user>
    <text>I was (poorly) trying to imply that DrRacket is just slow.</text>
  </message>
  <message>
    <ts>2017-07-24T17:15:19.803668</ts>
    <user>U08JL5H89</user>
    <text>oh, I see…lol.</text>
  </message>
  <message>
    <ts>2017-07-24T17:15:27.807543</ts>
    <user>U08JL5H89</user>
    <text>Well yes it is. But even more slow than usual….</text>
  </message>
  <message>
    <ts>2017-07-24T17:15:36.811183</ts>
    <user>U08JL5H89</user>
    <text>Like, usually I can type without a second of lag…. :confused:</text>
  </message>
  <message>
    <ts>2017-07-24T17:16:31.834841</ts>
    <user>U086VDRBK</user>
    <text>That doesn't sound right?</text>
  </message>
  <message>
    <ts>2017-07-24T17:17:11.852260</ts>
    <user>U08JL5H89</user>
    <text>Okay, so its not just me then.</text>
  </message>
  <message>
    <ts>2017-07-24T17:17:25.858573</ts>
    <user>U08JL5H89</user>
    <text>I'm going to blow everything away then and see if that helps.</text>
  </message>
  <message>
    <ts>2017-07-24T17:26:28.089313</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Are there any examples of using the FFI for C functions that have callbacks?</text>
  </message>
  <message>
    <ts>2017-07-24T17:26:37.093218</ts>
    <user>U08JL5H89</user>
    <text>(And I want to pass in a racket function)</text>
  </message>
  <message>
    <ts>2017-07-24T17:26:46.096974</ts>
    <user>U08JL5H89</user>
    <text>I've never gotten it to work anyway.</text>
  </message>
  <message>
    <ts>2017-07-24T17:30:40.192532</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; There are examples in the draw and GUI libraries; I see `png_create_read_struct` in `racket/draw/unsafe/png` is passed `error-esc` as a callback</text>
  </message>
  <message>
    <ts>2017-07-24T17:30:56.199393</ts>
    <user>U08JL5H89</user>
    <text>okay thanks.</text>
  </message>
  <message>
    <ts>2017-07-24T17:31:53.223169</ts>
    <user>U08JL5H89</user>
    <text>Would this work if the last argument to the callback was a va_list?</text>
  </message>
  <message>
    <ts>2017-07-24T17:32:26.236177</ts>
    <user>U08JL5H89</user>
    <text>I ask because the function I am trying to call is: &lt;http://ffmpeg.org/doxygen/3.2/group__lavu__log.html#ga14034761faf581a8b9ed6ef19b313708&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T17:36:02.324761</ts>
    <user>U07SJGB4H</user>
    <text>is there a way to lookup reverse dependencies in the package catalog? e.g. find all packages that use my packages?</text>
  </message>
  <message>
    <ts>2017-07-24T17:44:33.525928</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; Taking a `va_list` argument is tricky, because the representation depends on the system. If you can ignore the `va_list` argument, then just have your callback take the first two</text>
  </message>
  <message>
    <ts>2017-07-24T17:46:39.574749</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; I see. I thought a `va_list` arg was just a pointer to the actual list structure. (Where the list structure is platform dependent.)</text>
  </message>
  <message>
    <ts>2017-07-24T17:46:49.578468</ts>
    <user>U08JL5H89</user>
    <text>Compared to `...`, which just puts it inlined.</text>
  </message>
  <message>
    <ts>2017-07-24T17:47:18.590037</ts>
    <user>U08JL5H89</user>
    <text>Although I have to admit that my knowledge in this particular area of C is a bit…er…limited. (I can't find many good resources on it anyway.)</text>
  </message>
  <message>
    <ts>2017-07-24T17:52:45.715727</ts>
    <user>U086VDRBK</user>
    <text>&lt;@U08JL5H89&gt; &lt;https://github.com/dyoo/ffi-tutorial/tree/master/ffi/tutorial/examples/struct-with-callbacks&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T17:56:37.804190</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U086VDRBK&gt; Thanks. while a good callback example, it doesn't seem to handle a va_list.</text>
  </message>
  <message>
    <ts>2017-07-24T17:57:29.823638</ts>
    <user>U086VDRBK</user>
    <text>Ok. I look in that repo for examples. A shame he never got to write the tutorial.</text>
  </message>
  <message>
    <ts>2017-07-24T17:58:32.847432</ts>
    <user>U086VDRBK</user>
    <text>A strange thing about the FFI:  The paper on the FFI is easier to grasp than the documentation.</text>
  </message>
  <message>
    <ts>2017-07-24T18:00:05.881163</ts>
    <user>U08JL5H89</user>
    <text>Ha…ya.</text>
  </message>
  <message>
    <ts>2017-07-24T18:00:21.888225</ts>
    <user>U08JL5H89</user>
    <text>IMO, that's because the paper actually has a rational for why they designed it the way they did.</text>
  </message>
  <message>
    <ts>2017-07-24T18:00:34.893244</ts>
    <user>U08JL5H89</user>
    <text>Which makes it a lot easier to predict.</text>
  </message>
  <message>
    <ts>2017-07-24T18:01:05.905151</ts>
    <user>U08JL5H89</user>
    <text>Anyway, I sadly don't see anything about va_list in that repo. Oh well. :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-24T18:02:03.926534</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; okay, here is an alternative that might work. Is there any way to intercept what an FFI call prints to stdout?</text>
  </message>
  <message>
    <ts>2017-07-24T18:02:41.940125</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; no</text>
  </message>
  <message>
    <ts>2017-07-24T18:03:11.950408</ts>
    <user>U08JL5H89</user>
    <text>rats. :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-24T18:03:51.964926</ts>
    <user>U08JL5H89</user>
    <text>So basically I would have to have my whole program run in an environment that captures the stdout….that's unfortunate.</text>
  </message>
  <message>
    <ts>2017-07-24T18:03:55.966092</ts>
    <user>U08JL5H89</user>
    <text>Thanks anyway though.</text>
  </message>
  <message>
    <ts>2017-07-24T19:34:02.529702</ts>
    <user>U462H29AR</user>
    <text>&lt;@U07SJGB4H&gt; I've done that this way: &lt;https://gist.github.com/greghendershott/b20effb9d9c48211e1c11d9486257918&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T09:29:11.409657</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Since different architectures implement va_list differently, but still follow a common C interface, would it then be reasonable to add a primitive to internal racket to convert a va_list to a vector? Something like `va_list_to_vector()` or something like that?</text>
  </message>
  <message>
    <ts>2017-07-25T09:29:22.415527</ts>
    <user>U08JL5H89</user>
    <text>Then we could add that functionality to the FFI library.</text>
  </message>
  <message>
    <ts>2017-07-25T09:29:45.427190</ts>
    <user>U08JL5H89</user>
    <text>(Since at the moment it seems like there is no way to handle a va_list in our ffi)</text>
  </message>
  <message>
    <ts>2017-07-25T09:33:10.535581</ts>
    <user>U3NJS8H7C</user>
    <text>I don't think `va_list_to_vector()` would work well, and probably the C interface would need to be followed more closely with something like `va_arg()`, and it needs to be in the FFI to work right with types. Also, we'd need a new primitive type for `va_list` itself.</text>
  </message>
  <message>
    <ts>2017-07-25T09:36:14.632119</ts>
    <user>U08JL5H89</user>
    <text>Sorry, but I couldn't parse ‘would need to be followed more closely with something like `va_arg()`‘, could you clarify what you mean by that?</text>
  </message>
  <message>
    <ts>2017-07-25T09:37:49.681920</ts>
    <user>U08JL5H89</user>
    <text>Ah, I think I know what you are saying.</text>
  </message>
  <message>
    <ts>2017-07-25T09:38:17.696838</ts>
    <user>U08JL5H89</user>
    <text>Because we wouldn't know what the types are, it would be hard to grab the resulting types of data out of the vector.</text>
  </message>
  <message>
    <ts>2017-07-25T09:39:43.742349</ts>
    <user>U08JL5H89</user>
    <text>Adding a `(_va-list …)` type to our FFI ‘seems' doable.</text>
  </message>
  <message>
    <ts>2017-07-25T09:50:32.093596</ts>
    <user>U3NJS8H7C</user>
    <text>It looks like `va_list` is pointer-sized in practice. So, if you're trying to call `vsnprintf` or something like that to format a log message, probably using `_pointer` will work. Or do you really need access to the individual arguments referenced by the `va_list`?</text>
  </message>
  <message>
    <ts>2017-07-25T09:51:25.123107</ts>
    <user>U08JL5H89</user>
    <text>Nah, in this case using `vsnprintf` should work.</text>
  </message>
  <message>
    <ts>2017-07-25T09:51:48.135635</ts>
    <user>U08JL5H89</user>
    <text>I have a format string, and I need expand it.</text>
  </message>
  <message>
    <ts>2017-07-25T09:51:55.139046</ts>
    <user>U08JL5H89</user>
    <text>But that's about it.</text>
  </message>
  <message>
    <ts>2017-07-25T09:52:02.142674</ts>
    <user>U08JL5H89</user>
    <text>So I'll give that a shot, thanks.</text>
  </message>
  <message>
    <ts>2017-07-25T10:17:14.035156</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Wouldn't we actually want `vasnprintf`?</text>
  </message>
  <message>
    <ts>2017-07-25T10:17:30.045501</ts>
    <user>U08JL5H89</user>
    <text>Since I won't know how much buffer space I'll need?</text>
  </message>
  <message>
    <ts>2017-07-25T10:18:49.094877</ts>
    <user>U3NJS8H7C</user>
    <text>Sounds right</text>
  </message>
  <message>
    <ts>2017-07-25T10:19:52.134133</ts>
    <user>U3NJS8H7C</user>
    <text>(I don't know at the variants. I just know to throw in `s` for "string", `v` for `va_list`, and `n` at an attempt to be safe.)</text>
  </message>
  <message>
    <ts>2017-07-25T10:25:48.353689</ts>
    <user>U08JL5H89</user>
    <text>Yup</text>
  </message>
  <message>
    <ts>2017-07-25T10:25:57.359233</ts>
    <user>U08JL5H89</user>
    <text>I had to read the man page to get it.</text>
  </message>
  <message>
    <ts>2017-07-25T10:26:05.364423</ts>
    <user>U08JL5H89</user>
    <text>But `a` is for allocate.</text>
  </message>
  <message>
    <ts>2017-07-25T10:26:16.370698</ts>
    <user>U08JL5H89</user>
    <text>Which means it will eventually need to be freed.</text>
  </message>
  <message>
    <ts>2017-07-25T10:26:24.376292</ts>
    <user>U08JL5H89</user>
    <text>But that one is easy enough to do.</text>
  </message>
  <message>
    <ts>2017-07-25T10:27:09.404600</ts>
    <user>U08JL5H89</user>
    <text>Ideally I would rather use `vsnprintf`, but there doesn't seem to be a good api for determining if your buffer was big enough.</text>
  </message>
  <message>
    <ts>2017-07-25T10:27:31.419089</ts>
    <user>U08JL5H89</user>
    <text>And, as far as I can tell, for stuff like that, most c programmers seem to take a ‘good enough' approach to this.</text>
  </message>
  <message>
    <ts>2017-07-25T11:23:57.567928</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; If I have a `(_ptr o _string)` in my FFI call, with the Racket GC collect the output pointer, or will I have to free it by hand?</text>
  </message>
  <message>
    <ts>2017-07-25T11:31:55.878364</ts>
    <user>U08JL5H89</user>
    <text>Anyway, modulo that possible memory leaked, your suggestion worked. So thanks. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T11:42:15.285189</ts>
    <user>U3NJS8H7C</user>
    <text>`(_ptr o _string)` allocates GCable memory to receive the `_string` pointer as well as the string content, so you don't have to free either. If the called function was returning a `char*` that needs to be freed, though, then `(_ptr o _string)` is not a good choice, because you never get to see the returned pointer to free it</text>
  </message>
  <message>
    <ts>2017-07-25T11:49:28.564370</ts>
    <user>U08JL5H89</user>
    <text>Ah, fair. It has an argument for a char**, which fills the pointer with a char*.</text>
  </message>
  <message>
    <ts>2017-07-25T11:50:12.593478</ts>
    <user>U08JL5H89</user>
    <text>So you're saying it would be better to just use a `_pointer`, copy it into a _string`, and then free the _pointer then?</text>
  </message>
  <message>
    <ts>2017-07-25T11:50:20.598894</ts>
    <user>U08JL5H89</user>
    <text>(As I understand it anyway)</text>
  </message>
  <message>
    <ts>2017-07-25T11:51:44.654093</ts>
    <user>U3NJS8H7C</user>
    <text>Yes. You can use `(_ptr o _pointer)`, but do the `_pointer` to `_string` cast (which will allocate a string) yourself, and then you can free the `_pointer` value</text>
  </message>
  <message>
    <ts>2017-07-25T11:52:00.664589</ts>
    <user>U08JL5H89</user>
    <text>Cool, thanks.</text>
  </message>
  <message>
    <ts>2017-07-25T11:52:20.677632</ts>
    <user>U08JL5H89</user>
    <text>BTW, I have been meaning to ask, do you have any idea how the Racket7 codebase will effect the FFI?</text>
  </message>
  <message>
    <ts>2017-07-25T11:52:33.685872</ts>
    <user>U08JL5H89</user>
    <text>err…affect*</text>
  </message>
  <message>
    <ts>2017-07-25T11:54:23.757058</ts>
    <user>U3NJS8H7C</user>
    <text>So far, I think it will mostly work. Finalization will be different, but most finalization patterns will work in both.</text>
  </message>
  <message>
    <ts>2017-07-25T11:55:50.812846</ts>
    <user>U08JL5H89</user>
    <text>Okay, that's good. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-25T11:56:09.825016</ts>
    <user>U08JL5H89</user>
    <text>(I've obviously been making heavy use of it. :slightly_smiling_face: )</text>
  </message>
  <message>
    <ts>2017-07-25T13:03:08.204489</ts>
    <user>U07SCV14J</user>
    <text>&lt;@U3NJS8H7C&gt; The racket7 progress is exciting, and your detailed transparency is, as always, much appreciated. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T14:10:42.521073</ts>
    <user>U3SEVDPJT</user>
    <text>ditto what Alexis said. The reason Racket-on-Chez-Scheme doesn't yet work on Windows is simply because Windows specific functions haven't been implemented yet?</text>
  </message>
  <message>
    <ts>2017-07-25T14:26:31.068099</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Is there any good way to specify to the Racket FFI that I would like version 6.69.100 and up?)</text>
  </message>
  <message>
    <ts>2017-07-25T14:26:55.082017</ts>
    <user>U08JL5H89</user>
    <text>Or rather, 6.69.100 and up, up to 7.x, and then its incompatible again.</text>
  </message>
  <message>
    <ts>2017-07-25T14:27:20.096646</ts>
    <user>U08JL5H89</user>
    <text>It seems like passing in a whole list of strings to `ffi-lib` would be massively too long.</text>
  </message>
  <message>
    <ts>2017-07-25T14:28:47.147816</ts>
    <user>U08JL5H89</user>
    <text>I guess I could just do the string processing myself.</text>
  </message>
  <message>
    <ts>2017-07-25T14:43:27.655633</ts>
    <user>U08JL5H89</user>
    <text>hmm…actually, no that won't work. Because I have to give it an absolute path in that case. :confused:</text>
  </message>
  <message>
    <ts>2017-07-25T15:56:22.987679</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; I don't know how to do that generally, whether using the Racket FFI or anything else</text>
  </message>
  <message>
    <ts>2017-07-25T15:57:57.038792</ts>
    <user>U08JL5H89</user>
    <text>Ya, I ended up just opening it up, and checking the version after the fact.</text>
  </message>
  <message>
    <ts>2017-07-25T15:58:17.050270</ts>
    <user>U08JL5H89</user>
    <text>I would imagine dlopen has something it does, but that's more work than I think its worth at the moment.</text>
  </message>
  <message>
    <ts>2017-07-25T15:58:42.064045</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U3SEVDPJT&gt; Racket-on-Chez doesn't yet build on Windows mostly because I haven't sorted out how a build will work there – not using Unix tools – but also because Windows path parsing is not yet implemented</text>
  </message>
  <message>
    <ts>2017-07-25T18:26:36.142182</ts>
    <user>U3QF0EM0E</user>
    <text>has anyone here tried sleeping in Mary Gates Hall at the University of Washington? (&lt;@U3PC27CUQ&gt; do you know anyone to ask?)</text>
  </message>
  <message>
    <ts>2017-07-25T18:39:17.384736</ts>
    <user>U5KU1HNKY</user>
    <text>heh. I think I did once back in the day. probably wasn't SUPPOSED to. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T22:58:32.763256</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Hmm…functions like vasprintf don't seem to be loaded in Racket's windows build.</text>
  </message>
  <message>
    <ts>2017-07-25T23:00:14.781994</ts>
    <user>U08JL5H89</user>
    <text>Ah, that specific one is a gnu extension according to SO. oh well. &lt;https://stackoverflow.com/questions/40159892/using-asprintf-on-windows&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T11:36:03.023353</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; So for what its worth, treeting the va_list like a pointer seems to cause erratic behavior.</text>
  </message>
  <message>
    <ts>2017-07-26T11:36:30.041287</ts>
    <user>U08JL5H89</user>
    <text>I mean, the bug _could_ be somewhere else, and I'm seeing if I can reduce it down.</text>
  </message>
  <message>
    <ts>2017-07-26T11:36:33.043077</ts>
    <user>U08JL5H89</user>
    <text>But…a.</text>
  </message>
  <message>
    <ts>2017-07-26T11:36:34.044012</ts>
    <user>U08JL5H89</user>
    <text>ya*</text>
  </message>
  <message>
    <ts>2017-07-26T11:38:00.097679</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; What platform are you on?</text>
  </message>
  <message>
    <ts>2017-07-26T11:40:16.183400</ts>
    <user>U3NJS8H7C</user>
    <text>Nevermind – I see that `sizeof(va_list)` is 24 bytes on Mac OS, so it must vary more than I thought, and I must have mangled my experiment before</text>
  </message>
  <message>
    <ts>2017-07-26T11:45:35.391452</ts>
    <user>U3NJS8H7C</user>
    <text>Thinking about it more, a portable solution seems hopeless without `va_list` support in libffi, because the specific representation of a `va_list` can affect the way that it's passed in registers or on the stack. The only idea I have is to define `_va_list` in `ffi/unsafe` based on the result of `(system-library-subpath #f)` – so it would work only for platforms where we've specifically tracked down and hard-coded the representation.</text>
  </message>
  <message>
    <ts>2017-07-26T12:23:24.801877</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; ya, that sounds about right.</text>
  </message>
  <message>
    <ts>2017-07-26T12:23:31.805739</ts>
    <user>U08JL5H89</user>
    <text>Also I'm on OS X.</text>
  </message>
  <message>
    <ts>2017-07-26T12:24:30.840985</ts>
    <user>U08JL5H89</user>
    <text>I'll look at the system V ABI specs, if they are at least consistent among different instruction sets we probably do have a chance</text>
  </message>
  <message>
    <ts>2017-07-26T12:37:24.300075</ts>
    <user>U08JL5H89</user>
    <text>Looking at the c99 spec, it requires that va_list be a type.</text>
  </message>
  <message>
    <ts>2017-07-26T12:38:04.322932</ts>
    <user>U08JL5H89</user>
    <text>And if that is the case, it seems like if we make a _va-list type, while we won't be able to do anything with it in Racket code, it could be passed to C code.</text>
  </message>
  <message>
    <ts>2017-07-26T12:38:34.340445</ts>
    <user>U08JL5H89</user>
    <text>(I'm looking at section 7.15 of the latest draft of the c99 spec.)</text>
  </message>
  <message>
    <ts>2017-07-26T12:38:45.346949</ts>
    <user>U08JL5H89</user>
    <text>(As I don't have a copy of the actual release.)</text>
  </message>
  <message>
    <ts>2017-07-26T14:42:17.603691</ts>
    <user>U086VDRBK</user>
    <text>&lt;@U08JL5H89&gt; Supporting va_list seems painful. Just found the section "Variable Length Arguments" in the SWIG manual. It has the subtitle "The horror. The horror."</text>
  </message>
  <message>
    <ts>2017-07-26T14:42:24.607282</ts>
    <user>U086VDRBK</user>
    <text>&lt;http://www.swig.org/Doc1.3/Varargs.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T14:49:45.854793</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U086VDRBK&gt; Not trying support varargs…That would be really hard. :confused:</text>
  </message>
  <message>
    <ts>2017-07-26T14:49:49.856976</ts>
    <user>U08JL5H89</user>
    <text>Just va_list.</text>
  </message>
  <message>
    <ts>2017-07-26T14:49:58.862323</ts>
    <user>U08JL5H89</user>
    <text>Which is doable, as its just another value.</text>
  </message>
  <message>
    <ts>2017-07-26T14:50:28.879899</ts>
    <user>U08JL5H89</user>
    <text>As long as it stays an opaque value to Racket, that is fine.</text>
  </message>
  <message>
    <ts>2017-07-26T14:50:54.894992</ts>
    <user>U08JL5H89</user>
    <text>Trying to mimick va_arg, va_first, etc. or the `...` protocol, that sounds scary.</text>
  </message>
  <message>
    <ts>2017-07-26T14:51:11.905010</ts>
    <user>U08JL5H89</user>
    <text>At least based on what I've ascertained at the moment.</text>
  </message>
  <message>
    <ts>2017-07-26T14:52:16.941841</ts>
    <user>U086VDRBK</user>
    <text>Iam clearly conflating those. Aren't va_list used to deal with variable arguments?</text>
  </message>
  <message>
    <ts>2017-07-26T14:54:38.021906</ts>
    <user>U08JL5H89</user>
    <text>You are correct.</text>
  </message>
  <message>
    <ts>2017-07-26T14:54:50.028750</ts>
    <user>U08JL5H89</user>
    <text>va_list however, can also be passed to another function as a type.</text>
  </message>
  <message>
    <ts>2017-07-26T14:55:06.038438</ts>
    <user>U08JL5H89</user>
    <text>This is used if you, say, want to make a helper function.</text>
  </message>
  <message>
    <ts>2017-07-26T14:56:47.097239</ts>
    <user>U086VDRBK</user>
    <text>Ok. So va_list is also useful in other situations.</text>
  </message>
  <message>
    <ts>2017-07-26T14:57:15.112775</ts>
    <user>U08JL5H89</user>
    <text>```
int myfunc(const char *str, ...) {
    va_list ag;
    va_start(ag);
    helper(ag);
    va_end(ag);
}

int helper(va_list ag) {
    ...
    va_arg(ag);
    ...
}
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:57:21.116719</ts>
    <user>U08JL5H89</user>
    <text>Yup</text>
  </message>
  <message>
    <ts>2017-07-26T14:57:27.120169</ts>
    <user>U08JL5H89</user>
    <text>in this case, I want to write `helper`</text>
  </message>
  <message>
    <ts>2017-07-26T14:57:30.121583</ts>
    <user>U08JL5H89</user>
    <text>In particular…</text>
  </message>
  <message>
    <ts>2017-07-26T14:57:43.129517</ts>
    <user>U08JL5H89</user>
    <text>I want to write `helper` that just passes the `va_list` to another (C) function.</text>
  </message>
  <message>
    <ts>2017-07-26T14:57:49.132988</ts>
    <user>U08JL5H89</user>
    <text>Because I'm hooking up two libraries.</text>
  </message>
  <message>
    <ts>2017-07-26T14:57:53.135319</ts>
    <user>U08JL5H89</user>
    <text>Through Racket….</text>
  </message>
  <message>
    <ts>2017-07-26T14:58:50.167487</ts>
    <user>U08JL5H89</user>
    <text>Of course, this still isn't enough to duplicate va_copy, as that's  macro. To do that, we would need to make scheme_va_copy, or something like that.</text>
  </message>
  <message>
    <ts>2017-07-26T14:58:54.170072</ts>
    <user>U08JL5H89</user>
    <text>Which does nothing but call the macro.</text>
  </message>
  <message>
    <ts>2017-07-26T15:01:25.258431</ts>
    <user>U08JL5H89</user>
    <text>Of course, if we do that, it would make sense to do that for va_arg as well.</text>
  </message>
  <message>
    <ts>2017-07-26T15:01:56.276357</ts>
    <user>U08JL5H89</user>
    <text>We couldn't do `va_start` and `va_end` though, because that would require supporting vaargs, and `...`, which, as you rightly pointed out, is terrifying.</text>
  </message>
  <message>
    <ts>2017-07-26T15:02:12.284906</ts>
    <user>U08JL5H89</user>
    <text>At least, what it looks like anyway. Perhaps I'm wrong.</text>
  </message>
  <message>
    <ts>2017-07-26T15:11:10.576959</ts>
    <user>U086VDRBK</user>
    <text>Thanks for the example.</text>
  </message>
  <message>
    <ts>2017-07-26T15:16:46.754786</ts>
    <user>U08JL5H89</user>
    <text>Any time. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T15:51:51.852433</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; worksp/librktio/… vs librktio/… these two directories seem pretty similar. Is one of them deprecated?</text>
  </message>
  <message>
    <ts>2017-07-26T15:53:48.914235</ts>
    <user>U3NJS8H7C</user>
    <text>There should be a "rktio" directory with the rktio implementation and a "worksp/librktio" directory with MSVC projects</text>
  </message>
  <message>
    <ts>2017-07-26T15:54:05.923155</ts>
    <user>U3NJS8H7C</user>
    <text>I'm not seeing multiple "librktio" directories</text>
  </message>
  <message>
    <ts>2017-07-26T15:57:49.041781</ts>
    <user>U08JL5H89</user>
    <text>err…ya, I mean worksp/rktio. That makes sense that one is for windows. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-26T16:02:58.210911</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; oh wait, no</text>
  </message>
  <message>
    <ts>2017-07-26T16:03:05.214583</ts>
    <user>U08JL5H89</user>
    <text>I do see a worksp/librktio.</text>
  </message>
  <message>
    <ts>2017-07-26T16:03:22.224095</ts>
    <user>U08JL5H89</user>
    <text>racket/racket/src/worksp/librktio</text>
  </message>
  <message>
    <ts>2017-07-26T16:03:51.239970</ts>
    <user>U3NJS8H7C</user>
    <text>Just to be sure: there should only be one "rktio" and one "librktio" directory; the "librktio" directory should be in "worksp", and the "rktio" directory should not be in "worksp"</text>
  </message>
  <message>
    <ts>2017-07-26T16:03:53.241242</ts>
    <user>U08JL5H89</user>
    <text>Although that one does look like a visual studio project.</text>
  </message>
  <message>
    <ts>2017-07-26T16:04:21.256330</ts>
    <user>U08JL5H89</user>
    <text>Ah, okay.</text>
  </message>
  <message>
    <ts>2017-07-26T16:04:30.261141</ts>
    <user>U08JL5H89</user>
    <text>That is correct.</text>
  </message>
  <message>
    <ts>2017-07-26T16:11:45.490081</ts>
    <user>U08JL5H89</user>
    <text>So, since windows has `src/worksp/libffi`, does that mean it doesn't use `src/foreign`?</text>
  </message>
  <message>
    <ts>2017-07-26T16:12:23.509754</ts>
    <user>U08JL5H89</user>
    <text>OH….</text>
  </message>
  <message>
    <ts>2017-07-26T16:12:40.518088</ts>
    <user>U08JL5H89</user>
    <text>src/worksp/libffi probably is in pace of src/foreign/libffi.</text>
  </message>
  <message>
    <ts>2017-07-26T16:19:44.736755</ts>
    <user>U3NJS8H7C</user>
    <text>The `foreign.c` part of `src/foreign` is included directly in `libracket`, while `src/worksp/libffi` is the project for `src/foreign/libffi`</text>
  </message>
  <message>
    <ts>2017-07-26T16:24:44.894282</ts>
    <user>U08JL5H89</user>
    <text>Okay</text>
  </message>
  <message>
    <ts>2017-07-26T16:25:10.907831</ts>
    <user>U08JL5H89</user>
    <text>Also, I realized, adding a primitive for va_list is silly, since per the spec, its just an (undefined) struct type.</text>
  </message>
  <message>
    <ts>2017-07-26T16:26:32.951142</ts>
    <user>U08JL5H89</user>
    <text>So it would make a lot more sense to just add a function to the core that calls `sizeof` (which I suspect already exists), and then define _va-list in racket.</text>
  </message>
  <message>
    <ts>2017-07-26T16:31:07.100463</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; Is even `sizeof(va_list)` useful, since the calling convention can depend on more than the size? For example, `long` and `double` are often passed differently – though I'll grant that `va_list` is unlikely to be represented as a `double`. I still think it's best to use `(system-library-subpath #f)` and hardwire a representation in `ffi/unsafe` for various known results.</text>
  </message>
  <message>
    <ts>2017-07-26T16:34:46.219150</ts>
    <user>U08JL5H89</user>
    <text>Ah, fair.</text>
  </message>
  <message>
    <ts>2017-07-26T16:47:15.611982</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Actually, no. Since `va_list` is NOT a primitive in C (per the spec), it'll be handled just like any other struct will.</text>
  </message>
  <message>
    <ts>2017-07-26T16:47:40.625065</ts>
    <user>U08JL5H89</user>
    <text>(Like, the size and field order of the struct is undefined, but the fact that it is a struct is.)</text>
  </message>
  <message>
    <ts>2017-07-26T16:48:26.649131</ts>
    <user>U08JL5H89</user>
    <text>"The type declared is va_list which is an object type suitable for holding information needed by the macros va_start, va_arg, va_end, and va_copy”</text>
  </message>
  <message>
    <ts>2017-07-26T16:50:02.699712</ts>
    <user>U3NJS8H7C</user>
    <text>"object type" =&amp;gt; "struct"?</text>
  </message>
  <message>
    <ts>2017-07-26T16:50:53.727262</ts>
    <user>U3NJS8H7C</user>
    <text>Even so, I thought the way a struct is passed could depend on its content beyond just its size, but I forget these details</text>
  </message>
  <message>
    <ts>2017-07-26T16:53:34.811066</ts>
    <user>U08JL5H89</user>
    <text>That is how I interpret it. Although I admit I didn't make the spec so I'm not 100% sure.</text>
  </message>
  <message>
    <ts>2017-07-26T16:54:37.844205</ts>
    <user>U3NJS8H7C</user>
    <text>Ok. FWIW, I don't think "object" means "struct" in the C standard</text>
  </message>
  <message>
    <ts>2017-07-26T16:55:17.865641</ts>
    <user>U08JL5H89</user>
    <text>Also ya, it certainly is true that structs are passed differently based on what is in them.</text>
  </message>
  <message>
    <ts>2017-07-26T16:55:23.868773</ts>
    <user>U08JL5H89</user>
    <text>Hmm…okay.</text>
  </message>
  <message>
    <ts>2017-07-26T16:55:39.876664</ts>
    <user>U08JL5H89</user>
    <text>I'll see if I can find an answer to that. Thanks. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T17:18:40.559050</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; "object: region of data storage in the execution environment, the contents of which can represent values”</text>
  </message>
  <message>
    <ts>2017-07-26T17:18:48.562635</ts>
    <user>U08JL5H89</user>
    <text>So I guess it _could_ be a primitive.</text>
  </message>
  <message>
    <ts>2017-07-26T17:19:00.568088</ts>
    <user>U08JL5H89</user>
    <text>Just not a macro.</text>
  </message>
  <message>
    <ts>2017-07-27T18:08:16.168477</ts>
    <user>U3VT0L7C5</user>
    <text>According to &lt;https://www.openhub.net/p/racket&gt; the last commit to Racket happened about a year ago - what happened a year ago that it doesn't include anything since then?</text>
  </message>
  <message>
    <ts>2017-07-27T18:11:15.228630</ts>
    <user>U086VDRBK</user>
    <text>&lt;@U3VT0L7C5&gt;   &lt;https://github.com/racket/racket/commits/master&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T18:11:47.239119</ts>
    <user>U086VDRBK</user>
    <text>Oh! You are asking why OpenHub does update. No idea.</text>
  </message>
  <message>
    <ts>2017-07-27T18:12:36.255370</ts>
    <user>U3VT0L7C5</user>
    <text>yes, that's what I was wondering about</text>
  </message>
  <message>
    <ts>2017-07-27T18:13:31.273478</ts>
    <user>U086VDRBK</user>
    <text>Do other projects show updates?</text>
  </message>
  <message>
    <ts>2017-07-27T18:14:18.288808</ts>
    <user>U3VT0L7C5</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-27T18:16:55.339399</ts>
    <user>U3VT0L7C5</user>
    <text>maybe it doesn't redirect from plt/racket to racket/racket: &lt;https://www.openhub.net/p/racket/enlistments&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T18:34:45.667098</ts>
    <user>U086VDRBK</user>
    <text>yep - that's it - can you change it?</text>
  </message>
  <message>
    <ts>2017-07-27T18:44:43.840029</ts>
    <user>U3VT0L7C5</user>
    <text>I tried but got this: "You can view, but not change this data. Only managers may change this data. "</text>
  </message>
  <message>
    <ts>2017-07-27T18:45:38.856093</ts>
    <user>U086VDRBK</user>
    <text>who are the managers?</text>
  </message>
  <message>
    <ts>2017-07-27T18:46:11.865559</ts>
    <user>U3VT0L7C5</user>
    <text>&lt;https://www.openhub.net/accounts/elibarzilay&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T18:46:30.870838</ts>
    <user>U3VT0L7C5</user>
    <text>Is he on Slack, can't find him?</text>
  </message>
  <message>
    <ts>2017-07-27T18:47:29.887455</ts>
    <user>U086VDRBK</user>
    <text>send him a mail</text>
  </message>
  <message>
    <ts>2017-07-27T18:47:49.892854</ts>
    <user>U086VDRBK</user>
    <text>&lt;http://www.barzilay.org/contact.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T18:48:06.897333</ts>
    <user>U3VT0L7C5</user>
    <text>will do, thanks</text>
  </message>
  <message>
    <ts>2017-07-27T18:56:00.030547</ts>
    <user>U3VT0L7C5</user>
    <text>done</text>
  </message>
  <message>
    <ts>2017-07-28T06:19:10.089072</ts>
    <user>U6F1KCK6Y</user>
    <text>Hi I'd like to improve my Racket programming and abstraction/algorithm design in general. Can anyone suggest a good place to post Racket scripts and discuss how to improve it, other than Code Review on StackExchange? Thanks</text>
  </message>
  <message>
    <ts>2017-07-28T06:26:37.216909</ts>
    <user>U086VDRBK</user>
    <text>&lt;@U6F1KCK6Y&gt; Here would be ok. Use &lt;http://pasterack.org|pasterack.org&gt; then post url here.</text>
  </message>
  <message>
    <ts>2017-07-28T10:27:03.459293</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3VT0L7C5&gt; Alternatively, he probably is on the &lt;#C088CK7J6|irc&gt; channel.</text>
  </message>
  <message>
    <ts>2017-07-28T10:29:28.542648</ts>
    <user>U3VT0L7C5</user>
    <text>thanks &lt;@U08JL5H89&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T01:25:45.458617</ts>
    <user>U5KU1HNKY</user>
    <text>I just had to rebuild a machine and things seem a bit wonky with my packages… is `raco setup --clean` sufficient to sanitize and sanity check everything?</text>
  </message>
  <message>
    <ts>2017-07-29T04:36:41.116513</ts>
    <user>U6F1KCK6Y</user>
    <text>&lt;@U086VDRBK&gt; thanks</text>
  </message>
  <message>
    <ts>2017-07-29T04:43:18.138394</ts>
    <user>U6F1KCK6Y</user>
    <text>&lt;@U086VDRBK&gt; pasted my code into paste &lt;http://rack.org|rack.org&gt;. The url is:  &lt;http://pasterack.org/pastes/72152&gt;. Thanks. Your feedback would be great.</text>
  </message>
  <message>
    <ts>2017-07-29T17:18:28.424238</ts>
    <user>U3QF0EM0E</user>
    <text>hi, here's a few comments:
- `(let (....) (define ....))` can be `(define ....) (define ....)`, saves an indentation
- `(eq? b #f)` is the same as `(not b)`
- I'd use a helper function for the `(number-&amp;gt;string ....)` 
- I'd also put all the defines "within" the define for dialog, so overall structure is:
```
(define dialog
  (let ()
    (define ....)
    ....))
(send dialog show #t)
```</text>
  </message>
  <message>
    <ts>2017-07-31T13:21:18.132226</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; The FFI docs have the following pseudocode for malloc:
```
(let ([p (malloc from-type)])
  (ptr-set! p from-type v)
  (ptr-ref p to-type))
```</text>
  </message>
  <message>
    <ts>2017-07-31T13:21:33.140550</ts>
    <user>U08JL5H89</user>
    <text>Errr….cast, they have the pseudocode for cast.</text>
  </message>
  <message>
    <ts>2017-07-31T13:21:59.154392</ts>
    <user>U08JL5H89</user>
    <text>But in this example, shouldn't the `malloc` be apointer, given tht `ptr-set!` and `ptr-ref` are happening to it?</text>
  </message>
  <message>
    <ts>2017-07-31T13:22:28.170335</ts>
    <user>U08JL5H89</user>
    <text>As shown here:</text>
  </message>
  <message>
    <ts>2017-07-31T13:22:31.172196</ts>
    <user>U08JL5H89</user>
    <text>&lt;http://docs.racket-lang.org/foreign/Miscellaneous_Support.html?q=cast#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cast%29%29&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T13:22:36.175163</ts>
    <user>U08JL5H89</user>
    <text>If so I'd be happy to fix that.</text>
  </message>
  <message>
    <ts>2017-07-31T14:25:38.292385</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; I'm not sure what you mean, and I think that code is right. (It's the actual implementation in the simple case, as reflected by the `convert` helper function.) `malloc` does return a pointer, but the pointer refers to `from-type` content, where `from-type` isn't isn't necessarily a pointer type. Similarly, `pre-set!` and `ptr-ref` want a pointer to a `from-type`/`to-type` to cast between those.</text>
  </message>
  <message>
    <ts>2017-07-31T14:35:42.633342</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Ah, right, okay, that makes sense. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-31T20:34:48.281499</ts>
    <user>U3PQ6GW3U</user>
    <text>Which package provides `raco exe`?</text>
  </message>
  <message>
    <ts>2017-07-31T20:37:37.317430</ts>
    <user>U3PQ6GW3U</user>
    <text>Answering my own question: `compiler-lib`</text>
  </message>
  <message>
    <ts>2017-08-01T05:47:26.919968</ts>
    <user>U0MAQ22G5</user>
    <text>trying to make my Racket macro-writing experience a bit saner. I'm defining a simple module lang and was hoping `(expand-module/step mod)` would let me expand modules that use DSLs, but getting an error, e.g.

test.rkt
```
#lang racket
(require macro-debugger/stepper)
(expand-module/step "./scratch.rkt")
```

scratch.rkt
```
#lang racket
(module test racket
  (let ([x 1] [y 2]) (or (even? x) (even? y))))

```
Produces:
&amp;gt;derivation-parser: error on token #2: &amp;lt;local-value, #&amp;lt;syntax:/Users/ze/Code/racket/racket/share/pkgs/gui-lib/framework/private/sig.rkt:8:20 number-snip-class^&amp;gt;&amp;gt;</text>
  </message>
  <message>
    <ts>2017-08-01T06:07:07.338935</ts>
    <user>U0MAQ22G5</user>
    <text>A more general question is how do I debug my #lang DSLs? Say, I prepare a file in such a language as in 
```
#lang rogue
(some rogue forms defined in ~/rogue/main.rkt)
```

Language is defined using syntax/module-reader and the collection is properly linked with `raco link rogue`, so Rogue script runs fine. How would go about stepping through its expansions steps? I'm trying to figure if I my transformations use bindings  i expect, e.g. the redefined #%app etc. Sadly, the above-mentioned `(expand-module/step mod)` didn't work for me out of the box. How do people debug such things?</text>
  </message>
  <message>
    <ts>2017-08-01T06:21:04.605369</ts>
    <user>U0MAQ22G5</user>
    <text>One more question is about redefining kernel forms like `#%app` and friends in my #lang implementation, something like this

rogue/main.rkt has
```
(provide #%datum
         #%top-interaction
         #%top
         (all-defined-out)
         (rename-out [app #%app]
                               [module-begin #%module-begin]))

(define-syntax (app stx)
      ... my implentation of #%app)

(define-simple-macro (some-rogue-form pattern)
    (f a)) ;; &amp;lt;-- which binding of #%app will be used when this form is expanded inside a file written in #lang rogue? How do I confirm this using Racket tools?

(racket-module reader syntax/module-reader
  rogue)
```</text>
  </message>
  <message>
    <ts>2017-08-01T07:37:49.951423</ts>
    <user>U0MAQ22G5</user>
    <text>omg Macro Debugger tools are awesome!</text>
  </message>
  <message>
    <ts>2017-08-01T07:44:46.068604</ts>
    <user>U0MAQ22G5</user>
    <text>re the above #%app binding question syntax object browser in the stepper shows the binding comes from racket/base and not from my `(rename-out [app #%app])`, which is a bit confusing. I suspect I misunderstand scoping rules here, i.e. I expect #%app to be dynamically scope inside a file that uses my DSL `#lang rogue` when really macros defined in `rogue` end up expanding into forms that use lexically bound #%app, that is inside the module defining `rogue` the language. Could you guys correct my thinking here please?</text>
  </message>
  <message>
    <ts>2017-08-01T07:52:26.204282</ts>
    <user>U3NJS8H7C</user>
    <text>The implicit `#%app` form in `(f a)` takes its context from the open parenthesis. (More precisely, `(f a)` is a syntax list and there's a context attached to the list as a whole, in addition to contexts on the individual `f` and `a` tokens.) Since the `#%app` in the environment of `(f a)` is the one from `racket/base`, that's the one used when `(f a)` is treated as `(#%app f a)`.</text>
  </message>
  <message>
    <ts>2017-08-01T08:03:03.407076</ts>
    <user>U0MAQ22G5</user>
    <text>ah I think I get it. I'm beginning to wonder how we ever managed to redefine kernel forms like #%app and #%module-begin then. I've seen things like this being used

```
(provide (except-out (all-from-out racket)
                     lambda
                     λ
                     define
                     eval
                     require
                     modulo
                     remainder
                     /
                     #%app)
         (rename-out [new-lambda lambda]
                     [new-lambda λ]
                     [new-define define]
                     [divide /]
                     [myapp #%app]
                     ))
```</text>
  </message>
  <message>
    <ts>2017-08-01T09:00:04.680590</ts>
    <user>U3NJS8H7C</user>
    <text>When `new-lambda` is used as `lambda` in some importing module, the expressions written inside that `lambda` will also be from the importing module – and so an open parentheses there will see `myapp` instead of `#%app` from `racket/base`. You may be thinking that the body of a`new-lambda` use is treated as being from the `new-lambda` place, but it's not; the body is treated as being from wherever it is written (i.e., lexical scope).</text>
  </message>
  <message>
    <ts>2017-08-01T09:08:34.920462</ts>
    <user>U0MAQ22G5</user>
    <text>thank you Matthew! that really helps</text>
  </message>
  <message>
    <ts>2017-08-01T09:08:58.931382</ts>
    <user>U0MAQ22G5</user>
    <text>ok, now  i need to think a bit harder about what I'm trying to do here</text>
  </message>
  <message>
    <ts>2017-08-01T09:10:32.976298</ts>
    <user>U0MAQ22G5</user>
    <text>fwiw I'm just amazed at how much introspection macro-debugger/stepper offers. Like I'm no longer blind</text>
  </message>
  <message>
    <ts>2017-08-01T11:28:24.971336</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Just a sanity check, environment variables that are set using `putenv` are also going to be set in FFI calls, correct?</text>
  </message>
  <message>
    <ts>2017-08-01T11:28:45.985567</ts>
    <user>U08JL5H89</user>
    <text>Oh wait, no, it uses current-environment-variables, never mind.</text>
  </message>
  <message>
    <ts>2017-08-01T11:29:33.016962</ts>
    <user>U3NJS8H7C</user>
    <text>If `(current-environment-variables)` returns its original value, then `putenv` affects OS-level environment variables</text>
  </message>
  <message>
    <ts>2017-08-01T11:32:07.119738</ts>
    <user>U08JL5H89</user>
    <text>That makes sense. Thanks.</text>
  </message>
  <message>
    <ts>2017-08-01T11:32:24.130296</ts>
    <user>U08JL5H89</user>
    <text>So basically don't change the parameter and it works. Thanks. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T15:04:47.623507</ts>
    <user>U07SJGB4H</user>
    <text>&lt;@U3VGR2S7Q&gt; &lt;@U3QF0EM0E&gt; do either of you have more comments on &lt;https://github.com/racket/rackunit/pull/59&gt; ?</text>
  </message>
  <message>
    <ts>2017-08-01T17:34:15.245586</ts>
    <user>U08JL5H89</user>
    <text>Does anyone know how to be more specific when requesting an opengl context than just core/compatibility?</text>
  </message>
  <message>
    <ts>2017-08-01T17:34:24.249745</ts>
    <user>U08JL5H89</user>
    <text>Namely, I want core3.3</text>
  </message>
  <message>
    <ts>2017-08-01T17:34:29.251714</ts>
    <user>U08JL5H89</user>
    <text>If I can get it anyway.</text>
  </message>
  <message>
    <ts>2017-08-01T17:35:13.271156</ts>
    <user>U08JL5H89</user>
    <text>&lt;http://docs.racket-lang.org/draw/gl-config_.html?q=gl-config&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T17:42:58.472060</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U0G0JDQGZ&gt; You might now?</text>
  </message>
  <message>
    <ts>2017-08-01T18:02:47.953539</ts>
    <user>U08JL5H89</user>
    <text>hmm…looks like not. At least not yet. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T18:03:06.960761</ts>
    <user>U08JL5H89</user>
    <text>It looks like when you request core, it starts at 4.x and goes down to 3.0</text>
  </message>
  <message>
    <ts>2017-08-01T18:20:33.328125</ts>
    <user>U08JL5H89</user>
    <text>WAIT!!! No. Grr….despite asking for a core context, its still giving me a legacy one. That absolutely should be in the docs.</text>
  </message>
  <message>
    <ts>2017-08-01T18:22:17.362394</ts>
    <user>U08JL5H89</user>
    <text>That, and you should absolutely be able to find out what kind of context you got after the fact.</text>
  </message>
  <message>
    <ts>2017-08-01T18:24:19.402365</ts>
    <user>U08JL5H89</user>
    <text>Hmm…I guess in get-legacy? it says that it is only supported on mac 10.7+ and _some_ linux variants.</text>
  </message>
  <message>
    <ts>2017-08-01T18:24:53.413845</ts>
    <user>U08JL5H89</user>
    <text>But there still doesn't seem to be a way to check which version you ended up getting once you go it.</text>
  </message>
  <message>
    <ts>2017-08-01T18:26:09.438554</ts>
    <user>U3NJS8H7C</user>
    <text>&lt;@U08JL5H89&gt; I'm no GL expert, but I thought there were GL-level functions that will tell you</text>
  </message>
  <message>
    <ts>2017-08-01T18:27:32.465891</ts>
    <user>U08JL5H89</user>
    <text>There are some.</text>
  </message>
  <message>
    <ts>2017-08-01T18:27:42.469065</ts>
    <user>U08JL5H89</user>
    <text>Namely, glGetString</text>
  </message>
  <message>
    <ts>2017-08-01T18:32:15.559765</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Btw, its the line `(force lazy-GLX_ARB_create_context?)` that is causing it to create a compatibility context.</text>
  </message>
  <message>
    <ts>2017-08-01T18:32:40.567766</ts>
    <user>U08JL5H89</user>
    <text>When I comment out that line a compatibility context gets created. (Version 3.3)</text>
  </message>
  <message>
    <ts>2017-08-01T18:40:13.708733</ts>
    <user>U3NJS8H7C</user>
    <text>You get a *non-*compatibility context when it's commented out? Neil wrote that code, and I don't know the right answer in this case, but I'm happy to accept patches from people who do.</text>
  </message>
  <message>
    <ts>2017-08-01T21:04:31.847331</ts>
    <user>U0G0JDQGZ</user>
    <text>leif: it is not common for OpenGL apis to give you the ability to ask for a specific version, because drivers typically don't support multiple options anyways. OpenGL versions never change the meaning of old stuff (i.e. it is forward compatible) and when you write GLSL you have to specify the version always... so what exactly is the problem that yo</text>
  </message>
  <message>
    <ts>2017-08-01T21:04:31.847336</ts>
    <user>U0G0JDQGZ</user>
    <text>u are trying to solve?</text>
  </message>
  <message>
    <ts>2017-08-01T21:35:52.221192</ts>
    <user>U08JL5H89</user>
    <text>I mean, newer versions _do_ remove deprecated stuff. Although the only instance I can think of this happening in a major way was 3.0 to 3.1</text>
  </message>
  <message>
    <ts>2017-08-01T21:36:28.228328</ts>
    <user>U08JL5H89</user>
    <text>I have a GLSL shader, it is not doing anything fancy, just drawing a quad to the screen, and drawing a texture to that quad.</text>
  </message>
  <message>
    <ts>2017-08-01T21:36:32.229139</ts>
    <user>U08JL5H89</user>
    <text>(aka, its a media player)</text>
  </message>
  <message>
    <ts>2017-08-01T21:36:51.232859</ts>
    <user>U08JL5H89</user>
    <text>The shader is written in GLSL 330</text>
  </message>
  <message>
    <ts>2017-08-01T21:37:30.240513</ts>
    <user>U08JL5H89</user>
    <text>On my mac, I get 3.3 when I ask for the core profile.</text>
  </message>
  <message>
    <ts>2017-08-01T21:38:15.249351</ts>
    <user>U08JL5H89</user>
    <text>But on linux, despite asking for core, I got compatibility. Which corresponded to version OpenGL 3.0, so GLSL 130.</text>
  </message>
  <message>
    <ts>2017-08-01T21:38:52.256547</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U0G0JDQGZ&gt; ^</text>
  </message>
  <message>
    <ts>2017-08-01T21:39:41.266097</ts>
    <user>U08JL5H89</user>
    <text>Oh, also, glx (which is what the linux opengl bindings use), does let you request a specific version. Of course you are limited to what your hardware can support. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T21:41:10.283684</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U3NJS8H7C&gt; Kind of. When you request a core profile, Racket's opengl library tries a few tests to see if its compatible. If it is, and you requested a core profile, it gives you a context using the core profile. However, if it can't, it ignores what you requested and silently gives you  a compatibility context.</text>
  </message>
  <message>
    <ts>2017-08-01T21:41:42.289638</ts>
    <user>U08JL5H89</user>
    <text>The only real way to test after the fact (as far as I can tell), which one you got is using the glGetString function and checking your opengl version.</text>
  </message>
  <message>
    <ts>2017-08-01T21:42:34.299879</ts>
    <user>U08JL5H89</user>
    <text>Anyway, I commented out one of the checks that was failing, to see what would happen, and the opengl context worked just fine. Which makes me think we are potentially checking more stuff than we need to.</text>
  </message>
  <message>
    <ts>2017-08-01T21:43:39.312367</ts>
    <user>U08JL5H89</user>
    <text>(Obviously I haven't tested that thoroughly yet.)</text>
  </message>
  <message>
    <ts>2017-08-01T21:43:49.314218</ts>
    <user>U08JL5H89</user>
    <text>Anyway, thanks.</text>
  </message>
  <message>
    <ts>2017-08-01T21:51:11.401077</ts>
    <user>U0G0JDQGZ</user>
    <text>leif: 3.0 to later is basically a totally new API, which what the whole core vs compatibility thing is about</text>
  </message>
  <message>
    <ts>2017-08-01T21:51:55.409641</ts>
    <user>U0G0JDQGZ</user>
    <text>it sounds like either something wrong with Racket checking of the version (which you said) or your driver doesn't really support new stuff, which is common on Linux software implementations</text>
  </message>
  <message>
    <ts>2017-08-01T21:55:02.446835</ts>
    <user>U08JL5H89</user>
    <text>&lt;@U0G0JDQGZ&gt; yup. Or at least thats when they dropped the fixed pipeline in favor of the shaders from opengl 2. But how would I test if it doesn't ‘really' support newer stuff?</text>
  </message>
  <message>
    <ts>2017-08-01T21:55:21.450571</ts>
    <user>U08JL5H89</user>
    <text>Like, I'm able to open up a window, and build and run a GLSL 330 program.</text>
  </message>
  <message>
    <ts>2017-08-02T04:39:35.578509</ts>
    <user>U086VDRBK</user>
    <text>Apropos OpenGL and shaders: Is it possible to get GLSL version 130 version on mac? If not, how do I get a newer version?</text>
  </message>
  <message>
    <ts>2017-08-02T04:39:57.585998</ts>
    <user>U086VDRBK</user>
    <text>(I can't get Ruckus to run mac)</text>
  </message>
  <message>
    <ts>2017-08-02T04:40:26.596823</ts>
    <user>U086VDRBK</user>
    <text>To see which versions of GLSL that were supported I tried different values for the version in: &lt;https://github.com/cbiffle/ruckus/blob/master/viz/preamble.glsl&gt;</text>
  </message>
  <message>
    <ts>2017-08-02T04:41:01.608911</ts>
    <user>U086VDRBK</user>
    <text>Version 120 seems to exist - but the preamble uses more recent features.</text>
  </message>
</slack>

