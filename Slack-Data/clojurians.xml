<?xml version='1.0' encoding='utf-8'?>
<slack>
  <team_domain>clojurians</team_domain>
  <channel_name>clojure</channel_name>
  <start_date>2014-11-05T13:34:16.128212</start_date>
  <end_date>2017-08-01T13:34:16.128212</end_date>
  <message>
    <ts>2017-06-20T18:11:58.606890</ts>
    <user>U0GC1C09L</user>
    <text>just wondering if anyone here uses clojurewerkz/neocons on a semi regular basis?</text>
  </message>
  <message>
    <ts>2017-06-20T18:17:13.680680</ts>
    <user>U0GC1C09L</user>
    <text>in case someone picks this up later, i find myself writing a lot of cypher queries and executing them via tquery, but i'm constantly mapping through results to pluck the :data values and ignore all the other stuff i don't care about (incoming relationships, meta properties, etc.). i'm now resorting to spectre to stay sane. is there a better way?</text>
  </message>
  <message>
    <ts>2017-06-20T18:44:59.044441</ts>
    <user>U3JURM9B6</user>
    <text>in a *.cljc file, I should be able to just do:

(:require [clojure.core.match :refer [match]])

and it all works right?

or do I have to #?(:cljs ... :clj) separate lines ?</text>
  </message>
  <message>
    <ts>2017-06-20T18:45:54.056203</ts>
    <user>U1C03090C</user>
    <text>you probably need to escape the vector (`'[clojure.core.match :refer [match]]`)</text>
  </message>
  <message>
    <ts>2017-06-20T18:46:09.059149</ts>
    <user>U1C03090C</user>
    <text>not sure beyond that</text>
  </message>
  <message>
    <ts>2017-06-20T18:46:15.060443</ts>
    <user>U3JURM9B6</user>
    <text>but it's insided the ns part</text>
  </message>
  <message>
    <ts>2017-06-20T18:46:28.063073</ts>
    <user>U3JURM9B6</user>
    <text>```
(ns ...
  (:require ... ))
```

why do i need quotes inside a ns ?</text>
  </message>
  <message>
    <ts>2017-06-20T18:47:00.069541</ts>
    <user>U1C03090C</user>
    <text>right, you don't. Sorry about that</text>
  </message>
  <message>
    <ts>2017-06-20T18:47:12.072084</ts>
    <user>U3JURM9B6</user>
    <text>effort is apprecaited</text>
  </message>
  <message>
    <ts>2017-06-20T18:47:18.073353</ts>
    <user>U3JURM9B6</user>
    <text>this latest "some stuff is magical clj/cljs is confusing me"</text>
  </message>
  <message>
    <ts>2017-06-20T18:49:39.101734</ts>
    <user>U0J9LVB6G</user>
    <text>&lt;@U3JURM9B6&gt; I think this should work.
```
(ns foo.bar
  (:require
   [clojure.core.match :refer [match] #?@(:cljs [:include-macros true])]))
```</text>
  </message>
  <message>
    <ts>2017-06-20T18:53:23.147357</ts>
    <user>U0J9LVB6G</user>
    <text>&lt;https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure#namespaces&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T18:53:36.149923</ts>
    <user>U0J9LVB6G</user>
    <text>You may get away with not including the include-macros thingy, and just :requiring normally, but it depends on how the namespace you're requiring is written.</text>
  </message>
  <message>
    <ts>2017-06-20T18:53:48.152306</ts>
    <user>U0J9LVB6G</user>
    <text>&lt;http://blog.fikesfarm.com/posts/2016-03-01-clojurescript-macro-sugar.html#implicit_sugar&gt;</text>
  </message>
  <message>
    <ts>2017-06-20T19:19:14.451774</ts>
    <user>U1WMPA45U</user>
    <text>hrm, there really is no way to override hashCode for a defrecord, huh?</text>
  </message>
  <message>
    <ts>2017-06-20T19:20:07.461139</ts>
    <user>U1WMPA45U</user>
    <text>I've got an issue with that, I have a defrecord that contains a derived map from potemkin, but which one of the "keys" of the derived map is null</text>
  </message>
  <message>
    <ts>2017-06-20T19:20:25.464527</ts>
    <user>U1WMPA45U</user>
    <text>which causes hashCode to throw a NullPointerException</text>
  </message>
  <message>
    <ts>2017-06-20T22:23:03.069289</ts>
    <user>U064X3EF3</user>
    <text>a null in a map shouldn't cause an NPE</text>
  </message>
  <message>
    <ts>2017-06-20T22:23:33.073019</ts>
    <user>U064X3EF3</user>
    <text>so I'd say that's a bug in potemkin, but would need to see more to know for sure</text>
  </message>
  <message>
    <ts>2017-06-20T23:15:03.455866</ts>
    <user>U11BV7MTK</user>
    <text>&lt;@U1WMPA45U&gt; what defrecord stuff are you using? i'll look at it</text>
  </message>
  <message>
    <ts>2017-06-20T23:18:55.483478</ts>
    <user>U11BV7MTK</user>
    <text>```
(hashCode [this]
    (reduce
      (fn [acc [k v]]
        (unchecked-add acc (bit-xor (.hashCode k) (.hashCode v))))
      0
      (seq this)))
```</text>
  </message>
  <message>
    <ts>2017-06-20T23:18:58.483867</ts>
    <user>U11BV7MTK</user>
    <text>that looks like it</text>
  </message>
  <message>
    <ts>2017-06-21T00:11:26.846240</ts>
    <user>U11BV7MTK</user>
    <text>compared to &lt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/APersistentMap.java#L104&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T00:11:56.850025</ts>
    <user>U1WMPA45U</user>
    <text>it does seem like it is a bug in potemkin, I wrote up &lt;https://github.com/ztellman/potemkin/issues/52&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T00:14:46.869570</ts>
    <user>U1WMPA45U</user>
    <text>my use case would have been better served using identityHashCode, too, so I just wrapped the object in another holder object</text>
  </message>
  <message>
    <ts>2017-06-21T00:33:33.999271</ts>
    <user>U4ZJ5UHQD</user>
    <text>I'm really struggling how best to test with Clojure, specifically when I start having to mock interactions with a database etc. Looks like mock frameworks aren't super popular in clojure and I'm assuming there's a good reason that I'm missing</text>
  </message>
  <message>
    <ts>2017-06-21T00:33:40.000107</ts>
    <user>U4ZJ5UHQD</user>
    <text>Any tips?</text>
  </message>
  <message>
    <ts>2017-06-21T00:36:40.020978</ts>
    <user>U4ZJ5UHQD</user>
    <text>looks like maybe `with-redefs*` might be what I'm looking for</text>
  </message>
  <message>
    <ts>2017-06-21T00:38:28.033143</ts>
    <user>U1WMPA45U</user>
    <text>I, for one, prefer testing against a "real" database if possible; we test our app against a in-memory datomic DB, and against a H2 database (we use datomic and a SQL database)</text>
  </message>
  <message>
    <ts>2017-06-21T00:46:57.089699</ts>
    <user>U064X3EF3</user>
    <text>&lt;@U4ZJ5UHQD&gt; beware &lt;http://blog.cognitect.com/blog/2016/9/15/works-on-my-machine-understanding-var-bindings-and-roots&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T00:53:11.130659</ts>
    <user>U11BV7MTK</user>
    <text>&lt;@U1WMPA45U&gt; what do you mean on that pull request?</text>
  </message>
  <message>
    <ts>2017-06-21T00:53:32.132987</ts>
    <user>U11BV7MTK</user>
    <text>you're making sure we don't hash false? but isn't that fine?</text>
  </message>
  <message>
    <ts>2017-06-21T00:57:27.159961</ts>
    <user>U1WMPA45U</user>
    <text>making sure you *are* hashing false?</text>
  </message>
  <message>
    <ts>2017-06-21T00:57:33.160568</ts>
    <user>U11BV7MTK</user>
    <text>good point</text>
  </message>
  <message>
    <ts>2017-06-21T00:57:55.163246</ts>
    <user>U11BV7MTK</user>
    <text>is there a reason to use `(if some? v)` vs `(if (instance? Object k)`?</text>
  </message>
  <message>
    <ts>2017-06-21T00:59:04.171042</ts>
    <user>U1WMPA45U</user>
    <text>`some?` might perform better than `instance?`, I guess</text>
  </message>
  <message>
    <ts>2017-06-21T00:59:07.171335</ts>
    <user>U11BV7MTK</user>
    <text>i wouldn't have thought to use some? like that on a single value. that's clever</text>
  </message>
  <message>
    <ts>2017-06-21T00:59:15.172292</ts>
    <user>U11BV7MTK</user>
    <text>no idea</text>
  </message>
  <message>
    <ts>2017-06-21T00:59:17.172549</ts>
    <user>U11BV7MTK</user>
    <text>`instance? (fn instance? [^Class c x] (. c (isInstance x))))`</text>
  </message>
  <message>
    <ts>2017-06-21T00:59:30.174065</ts>
    <user>U11BV7MTK</user>
    <text>yeah looks like it</text>
  </message>
  <message>
    <ts>2017-06-21T00:59:33.174389</ts>
    <user>U11BV7MTK</user>
    <text>good thought</text>
  </message>
  <message>
    <ts>2017-06-21T00:59:56.176910</ts>
    <user>U11BV7MTK</user>
    <text>didn't know some? was just a nil check</text>
  </message>
  <message>
    <ts>2017-06-21T01:00:50.184628</ts>
    <user>U11BV7MTK</user>
    <text>thanks :+1:</text>
  </message>
  <message>
    <ts>2017-06-21T01:01:13.187455</ts>
    <user>U1WMPA45U</user>
    <text>good find, too, I didn't bother digging through potemkin</text>
  </message>
  <message>
    <ts>2017-06-21T01:01:33.189934</ts>
    <user>U11BV7MTK</user>
    <text>i've read the source a little while ago so kinda knew where to root around.</text>
  </message>
  <message>
    <ts>2017-06-21T02:04:37.642482</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U08E3BBST&gt;:
```

(def ocall #?(:cljs oops.core/ocall
              :clj (not-implemented "ocall")))

(def oget #?(:cljs oops.core/oget
             :clj (not-implemented "oget")))

(def oset! #?(:cljs oops.core/oset!
              :clj (not-implemented "oset!")))

(def gcall #?(:cljs oops.core/gcall
              :clj (not-implemented "gcall")))

```
doesn't work since ocall oset oget are macros

I'm trying to push the #_ (:cljs :clj) into lower level libraries. Is this possible?</text>
  </message>
  <message>
    <ts>2017-06-21T03:50:24.804508</ts>
    <user>U2VRAHXEX</user>
    <text>is there a way to list the functions that are currently 'under instrumentation' (clojure.spec)?</text>
  </message>
  <message>
    <ts>2017-06-21T03:50:31.806112</ts>
    <user>U2VRAHXEX</user>
    <text>of a running program that is</text>
  </message>
  <message>
    <ts>2017-06-21T04:31:27.427791</ts>
    <user>U08E3BBST</user>
    <text>&lt;@U3JURM9B6&gt; wrap macros with macros… because turtles</text>
  </message>
  <message>
    <ts>2017-06-21T04:33:26.459979</ts>
    <user>U08E3BBST</user>
    <text>in a macro you can detect if you are in cljs or clj via &amp;amp;env: &lt;https://github.com/binaryage/env-config/blob/1d9a2409dad78324ed7ab2984d2b40b081173936/src/lib/env_config/impl/macros.clj#L3-L4&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T05:33:43.442970</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U08E3BBST&gt;: is there no way to write these as *functions* if we pass all args as strings ?</text>
  </message>
  <message>
    <ts>2017-06-21T05:37:00.495743</ts>
    <user>U08E3BBST</user>
    <text>&lt;@U3JURM9B6&gt; macros are expanded at compile time, functions are called at runtime, once you are in runtime, you cannot "go back" and do compile-time stuff (except for using eval, which is a different story)</text>
  </message>
  <message>
    <ts>2017-06-21T05:37:10.498259</ts>
    <user>U3JURM9B6</user>
    <text>no, I meant implemenatikn of oget</text>
  </message>
  <message>
    <ts>2017-06-21T05:37:17.500265</ts>
    <user>U3JURM9B6</user>
    <text>why does it have to be a macro instead of a function ?</text>
  </message>
  <message>
    <ts>2017-06-21T05:37:18.500429</ts>
    <user>U08E3BBST</user>
    <text>the question is, why do you need those to be functions?</text>
  </message>
  <message>
    <ts>2017-06-21T05:37:30.503571</ts>
    <user>U3JURM9B6</user>
    <text>then I wrap a base layer in cljc</text>
  </message>
  <message>
    <ts>2017-06-21T05:37:37.505547</ts>
    <user>U3JURM9B6</user>
    <text>and get rid of the #?(:cljs ...) everywhere</text>
  </message>
  <message>
    <ts>2017-06-21T05:39:31.535793</ts>
    <user>U08E3BBST</user>
    <text>cljs-oops (e.g. oget) is writing code for you you would otherwise write by hand, that is why is implemented as macros</text>
  </message>
  <message>
    <ts>2017-06-21T05:40:19.548725</ts>
    <user>U08E3BBST</user>
    <text>if it was a function, it would at runtime dynamically perform some code, but not rewrite your existing code</text>
  </message>
  <message>
    <ts>2017-06-21T05:41:35.569019</ts>
    <user>U08E3BBST</user>
    <text>again, why you cannot wrap oops macros with your own macros? where do you see a problem in that approach?</text>
  </message>
  <message>
    <ts>2017-06-21T05:43:12.594879</ts>
    <user>U08E3BBST</user>
    <text>and btw. we are off-topic here, we should be discussing this in &lt;#C03S1L9DN|clojurescript&gt; instead, have to go anyways</text>
  </message>
  <message>
    <ts>2017-06-21T09:23:47.979983</ts>
    <user>U0LJU20SJ</user>
    <text>just in case a developer of clojars is around. The GSoC link in the github README is broken :disappointed:
&lt;https://github.com/clojars/clojure-gsoc-2017&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T09:32:49.186682</ts>
    <user>U050AACJB</user>
    <text>how do people feel about the idea of EDN files that have an `(aliases)` header at the top to enable shorter keywords in the rest of the document:
```
(aliases [[monitor.reporter :as r]])
{:r/foo 1
 :r/bar 2}
```</text>
  </message>
  <message>
    <ts>2017-06-21T09:33:17.197742</ts>
    <user>U050AACJB</user>
    <text>not proposing for this to be part of Clojure, just asking what you think of it as a practice</text>
  </message>
  <message>
    <ts>2017-06-21T09:35:22.245969</ts>
    <user>U06SGCEHJ</user>
    <text>&lt;@U0LJU20SJ&gt; can you file an issue or PR on that repo?</text>
  </message>
  <message>
    <ts>2017-06-21T09:36:21.268961</ts>
    <user>U0LJU20SJ</user>
    <text>I guess so. I just thought it would be faster if any of them was here :smile:</text>
  </message>
  <message>
    <ts>2017-06-21T09:36:50.280327</ts>
    <user>U06SGCEHJ</user>
    <text>I'm here, just focused on other things ATM :)</text>
  </message>
  <message>
    <ts>2017-06-21T09:38:00.307036</ts>
    <user>U0LJU20SJ</user>
    <text>ah ok, well … done</text>
  </message>
  <message>
    <ts>2017-06-21T09:38:13.312179</ts>
    <user>U0LJU20SJ</user>
    <text>the fix is quite simple so no op :wink:</text>
  </message>
  <message>
    <ts>2017-06-21T09:39:36.344392</ts>
    <user>U06SGCEHJ</user>
    <text>&lt;@U0LJU20SJ&gt; thanks!</text>
  </message>
  <message>
    <ts>2017-06-21T09:48:56.566723</ts>
    <user>U0LJU20SJ</user>
    <text>&lt;@U06SGCEHJ&gt; I just created another pr for some other small markdown problems that I found. Hope it helps</text>
  </message>
  <message>
    <ts>2017-06-21T09:51:49.638016</ts>
    <user>U06SGCEHJ</user>
    <text>thanks! I'll let &lt;@U07BWACEA&gt; review those changes, he's the primary on the GSoC stuff</text>
  </message>
  <message>
    <ts>2017-06-21T10:50:23.175742</ts>
    <user>U46LFMYTD</user>
    <text>I am constructing a nested datastructure, similar to a binary tree, recursively using
```
(defn make-tree [{in :in out :out left :left right :right :as tree} indices]
  (cond
    (empty? indices) tree
    :else (assoc
           tree
           :left (make-tree {:in (conj in (first indices)) :out out} (rest indices))
           :right (make-tree {:in in :out (conj out (first indices))} (rest indices)))))
```</text>
  </message>
  <message>
    <ts>2017-06-21T10:51:10.197929</ts>
    <user>U46LFMYTD</user>
    <text>however the recursion will run quite deep and cause stack overflow. Is there a lazy way I can define this tree? I will not actually visit all of the tree</text>
  </message>
  <message>
    <ts>2017-06-21T10:52:20.230554</ts>
    <user>U46LFMYTD</user>
    <text>In short it sets up a deeply nested map, but I want to do this in a lazy way so that the values mapped to by keys are not evaluated until accessed</text>
  </message>
  <message>
    <ts>2017-06-21T11:17:18.930350</ts>
    <user>U0EJ065V2</user>
    <text>You can do tail recursion for the stack overflow but that won't help with the lazy part.</text>
  </message>
  <message>
    <ts>2017-06-21T11:31:33.315059</ts>
    <user>U3L6TFEJF</user>
    <text>michaellindon: There's &lt;https://github.com/Malabarba/lazy-map-clojure&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T11:31:41.319111</ts>
    <user>U3L6TFEJF</user>
    <text>I haven't tried it myself but it seems to do what you want</text>
  </message>
  <message>
    <ts>2017-06-21T11:32:02.328972</ts>
    <user>U3L6TFEJF</user>
    <text>otherwise, you'll have to implement something like that yourself with `delay` and `force`</text>
  </message>
  <message>
    <ts>2017-06-21T11:35:41.427512</ts>
    <user>U46LFMYTD</user>
    <text>Hi &lt;@U3L6TFEJF&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T11:36:03.437561</ts>
    <user>U46LFMYTD</user>
    <text>I have come up with this, i think it is inelegant</text>
  </message>
  <message>
    <ts>2017-06-21T11:36:12.441302</ts>
    <user>U46LFMYTD</user>
    <text>```
(defn make-lazy-tree [{in :in out :out left :left right :right :as tree} indices]
  (cond
    (empty? indices) tree
    :else (assoc
           tree
           :left (fn [] (make-lazy-tree {:in (conj in (first indices)) :out out} (rest indices)))
           :right (fn [] (make-lazy-tree {:in in :out (conj out (first indices))} (rest indices))))))
```</text>
  </message>
  <message>
    <ts>2017-06-21T11:37:04.465121</ts>
    <user>U46LFMYTD</user>
    <text>so instead of returning the next subtree it returns a function to the next subtree, which can be called like this</text>
  </message>
  <message>
    <ts>2017-06-21T11:37:18.471095</ts>
    <user>U46LFMYTD</user>
    <text>```
(defn my-left [t] ((:left t)))
(defn my-right [t] ((:right t)))

(-&amp;gt; foo
    my-right
    my-right
    my-left)

```</text>
  </message>
  <message>
    <ts>2017-06-21T11:38:14.495699</ts>
    <user>U46LFMYTD</user>
    <text>giving:
```
=&amp;gt; {:in #{2},
       :out #{0 1},
       :left #function[bab.core/make-lazy-tree/fn--20560],
       :right #function[bab.core/make-lazy-tree/fn--20562]}
```</text>
  </message>
  <message>
    <ts>2017-06-21T11:43:39.640925</ts>
    <user>U46LFMYTD</user>
    <text>I guess delay is kind of doing the same thing?</text>
  </message>
  <message>
    <ts>2017-06-21T11:52:53.885274</ts>
    <user>U46LFMYTD</user>
    <text>just tried it, delay works nicely too</text>
  </message>
  <message>
    <ts>2017-06-21T12:10:24.345939</ts>
    <user>U051SS2EU</user>
    <text>you can't tail call that code though</text>
  </message>
  <message>
    <ts>2017-06-21T12:10:35.350477</ts>
    <user>U051SS2EU</user>
    <text>not without a radical design shift to move stack data into the heap</text>
  </message>
  <message>
    <ts>2017-06-21T12:20:48.597582</ts>
    <user>U46LFMYTD</user>
    <text>agreed. As per &lt;@U3L6TFEJF&gt; s suggestion i wrapped the calls with delay</text>
  </message>
  <message>
    <ts>2017-06-21T12:20:53.599230</ts>
    <user>U46LFMYTD</user>
    <text>```
(defn make-delay-tree [{in :in out :out left :left right :right :as tree} indices]
  (cond
    (empty? indices) tree
    :else (assoc
           tree
           :left (delay (make-delay-tree {:in (conj in (first indices)) :out out} (rest indices)))
           :right (delay (make-delay-tree {:in in :out (conj out (first indices))} (rest indices))))))
```</text>
  </message>
  <message>
    <ts>2017-06-21T12:21:09.605757</ts>
    <user>U46LFMYTD</user>
    <text>writing 
```
(defn my-left [t] @(:left t))
(defn my-right [t] @(:right t))
```</text>
  </message>
  <message>
    <ts>2017-06-21T12:21:25.612620</ts>
    <user>U46LFMYTD</user>
    <text>I can traverse the tree to the leaf nodes that I want, without creating the others</text>
  </message>
  <message>
    <ts>2017-06-21T12:21:38.618022</ts>
    <user>U46LFMYTD</user>
    <text>I like this, but I'm wondering if anyone else can see any pitfalls</text>
  </message>
  <message>
    <ts>2017-06-21T12:21:52.623279</ts>
    <user>U051SS2EU</user>
    <text>delay is under-utilized imho</text>
  </message>
  <message>
    <ts>2017-06-21T12:22:15.632017</ts>
    <user>U051SS2EU</user>
    <text>a fun fact - force is an alternative for deref on delays, and is identity on non-delay values</text>
  </message>
  <message>
    <ts>2017-06-21T12:23:01.650441</ts>
    <user>U1ALMRBLL</user>
    <text>will still blow the stack, no?</text>
  </message>
  <message>
    <ts>2017-06-21T12:23:16.656382</ts>
    <user>U051SS2EU</user>
    <text>only if you eagerly call it recursively</text>
  </message>
  <message>
    <ts>2017-06-21T12:23:33.663183</ts>
    <user>U051SS2EU</user>
    <text>but it is easy to make a non-stack-consuming recursion that goes into deeper delays as far as you like</text>
  </message>
  <message>
    <ts>2017-06-21T12:23:52.670728</ts>
    <user>U1ALMRBLL</user>
    <text>like with a continuation</text>
  </message>
  <message>
    <ts>2017-06-21T12:24:05.675736</ts>
    <user>U051SS2EU</user>
    <text>right, a delay is a zero arg continuation, effectively</text>
  </message>
  <message>
    <ts>2017-06-21T12:24:21.682045</ts>
    <user>U051SS2EU</user>
    <text>thunk? maybe that's the word</text>
  </message>
  <message>
    <ts>2017-06-21T12:24:24.683318</ts>
    <user>U1ALMRBLL</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-06-21T12:24:52.694631</ts>
    <user>U051SS2EU</user>
    <text>anyway, that overloaded behavior of force makes it convenient to write code that may or may not hit a delayed value</text>
  </message>
  <message>
    <ts>2017-06-21T12:25:05.699792</ts>
    <user>U46LFMYTD</user>
    <text>you've lost me now :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-21T12:25:29.709666</ts>
    <user>U051SS2EU</user>
    <text>thunks / continuations are how lazy seqs are implemented</text>
  </message>
  <message>
    <ts>2017-06-21T12:25:35.711853</ts>
    <user>U051SS2EU</user>
    <text>and delays do the same thing</text>
  </message>
  <message>
    <ts>2017-06-21T12:25:47.716920</ts>
    <user>U051SS2EU</user>
    <text>it's a function that stands in for a value we might access later</text>
  </message>
  <message>
    <ts>2017-06-21T12:25:59.721273</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U46LFMYTD&gt; &lt;https://en.wikipedia.org/wiki/Continuation-passing_style&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T12:27:02.746148</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1ALMRBLL&gt; that article mentions a continuation being a one arg function, which is why I was particular about argument count - these being zero arg</text>
  </message>
  <message>
    <ts>2017-06-21T12:28:11.773369</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://en.wikipedia.org/wiki/Thunk&gt; whereas thunks are zero arg</text>
  </message>
  <message>
    <ts>2017-06-21T12:28:16.775439</ts>
    <user>U46LFMYTD</user>
    <text>so actually my first attempt was to change
```
:left (make-lazy-tree {:in (conj in (first indices)) :out out} (rest indices))
```
to
```
:left (fn [] (make-lazy-tree {:in (conj in (first indices)) :out out} (rest indices)))
```
and then I could traverse the tree by calling the function returned by :left. Is this what is meant by continuation?</text>
  </message>
  <message>
    <ts>2017-06-21T12:28:42.785443</ts>
    <user>U051SS2EU</user>
    <text>that's what's meant by thunk</text>
  </message>
  <message>
    <ts>2017-06-21T12:29:10.796121</ts>
    <user>U46LFMYTD</user>
    <text>ah ok, cool, im happy to be learning this</text>
  </message>
  <message>
    <ts>2017-06-21T12:29:44.809832</ts>
    <user>U1ALMRBLL</user>
    <text>yeah, it's cool stuff, and more common in the FP world</text>
  </message>
  <message>
    <ts>2017-06-21T12:30:47.835899</ts>
    <user>U46LFMYTD</user>
    <text>thanks for your help</text>
  </message>
  <message>
    <ts>2017-06-21T12:33:40.904638</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U051SS2EU&gt; what would be the pros/cons of `delay` vs a `fn` in this case?</text>
  </message>
  <message>
    <ts>2017-06-21T12:34:35.925580</ts>
    <user>U051SS2EU</user>
    <text>a delay is a way of making a function that gets called only once when forced, whereas a function could get called more than once and would not cache the prior result (unless you memoized…)</text>
  </message>
  <message>
    <ts>2017-06-21T12:35:10.939360</ts>
    <user>U051SS2EU</user>
    <text>delays are a more specific feature for this purpose so they eliminate some gotchas and boilerplate that come up in usage</text>
  </message>
  <message>
    <ts>2017-06-21T12:36:13.962998</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1ALMRBLL&gt; it has a function inside &lt;https://github.com/noisesmith/clojure/blob/master/src/jvm/clojure/lang/Delay.java&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T12:36:26.968589</ts>
    <user>U051SS2EU</user>
    <text>apologies for linking to my fork but that file is unmodified</text>
  </message>
  <message>
    <ts>2017-06-21T12:40:50.069536</ts>
    <user>U051SS2EU</user>
    <text>another usage of delay I'm fond of is replacing nested lets inside conditionals with a let containing delays with conditionals that force certain delays as apropriate in a cond block</text>
  </message>
  <message>
    <ts>2017-06-21T12:41:25.083007</ts>
    <user>U051SS2EU</user>
    <text>additionally, the delays can force another let bound delay inside their body, which simplifies tricky side effect tracking</text>
  </message>
  <message>
    <ts>2017-06-21T12:44:04.143612</ts>
    <user>U060FKQPN</user>
    <text>noisesmith: ew :P</text>
  </message>
  <message>
    <ts>2017-06-21T12:44:36.155722</ts>
    <user>U060FKQPN</user>
    <text>that sounds very.. imperative</text>
  </message>
  <message>
    <ts>2017-06-21T12:45:00.164329</ts>
    <user>U051SS2EU</user>
    <text>it's something I only need for very imperative tasks</text>
  </message>
  <message>
    <ts>2017-06-21T12:45:40.180010</ts>
    <user>U051SS2EU</user>
    <text>where I'm maybe getting a resource, maybe retrying, maybe cleaning up and bailing, etc. and it doesn't fit a with-open or try/catch/finally well</text>
  </message>
  <message>
    <ts>2017-06-21T12:46:19.195432</ts>
    <user>U051SS2EU</user>
    <text>eg. trying to use zookeeper in clojure where every operation potentially requires me to re-try or fail</text>
  </message>
  <message>
    <ts>2017-06-21T12:46:57.209329</ts>
    <user>U051SS2EU</user>
    <text>(not coincidentally I am moving away from using zookeeper so I can avoid having to write code like this)</text>
  </message>
  <message>
    <ts>2017-06-21T13:15:18.878538</ts>
    <user>U5WAJK60M</user>
    <text>Hey guys, building the first production clj/cljs app for my company. I'm looking for a best practice tip for using Stuart Sierra's component with a (postgres) database connection.

```
(ns my-app.components.db
  (:require [com.stuartsierra.component :as c]
            [clojure.java.jdbc :as jdbc]))

(defrecord Db [spec connection]
  c/Lifecycle
  (start [this]
    (let [conn (or connection (jdbc/get-connection spec))]
      (assoc this :connection conn)))
  (stop [this]
    (if connection (.close connection))
    (assoc this :connection nil)))
```

It happened once in development that after a postgres io error, the connection would close and would render the app db-less. How do you guys handle this / what's a typical db component past the simple examples found online?</text>
  </message>
  <message>
    <ts>2017-06-21T13:16:00.894633</ts>
    <user>U0NCTKEV8</user>
    <text>use a connection pool library instead using the database connection directly</text>
  </message>
  <message>
    <ts>2017-06-21T13:16:10.898287</ts>
    <user>U0NCTKEV8</user>
    <text>c3p0 is a popular choice</text>
  </message>
  <message>
    <ts>2017-06-21T13:16:22.903259</ts>
    <user>U5WAJK60M</user>
    <text>was thinking about that. Thanks!</text>
  </message>
  <message>
    <ts>2017-06-21T13:42:00.507250</ts>
    <user>U0HM5MJ5V</user>
    <text>should clean up any defunct connections for you, with more and less aggressive options</text>
  </message>
  <message>
    <ts>2017-06-21T13:45:19.584043</ts>
    <user>U0YJJPFRA</user>
    <text>Hello all, how can I use something like this:
```'([:command "upper"] [:command "reverse"] [:command "remove-vogal"]) ;; this is the commands that I have to apply to collection
I thougth doing defmulti like: 
(defmulti command (fn [[_ command] _] command))
(defmethod command "upper" [command string] (upper string)) ...
["string nubmer 1" "string nubmer 2" "string nubmer 3"] ;; is the collection
```
and I want to have the results in the end. I coudn´t figure out how to do this with threading macro, Is there possible?</text>
  </message>
  <message>
    <ts>2017-06-21T13:51:47.737410</ts>
    <user>U054UD60U</user>
    <text>The defmulti and defmethod look ok. And threading is possible in general. Maybe you can past an example invokation?</text>
  </message>
  <message>
    <ts>2017-06-21T13:53:55.788380</ts>
    <user>U0YJJPFRA</user>
    <text>well, that´s the problem how to apply the rules to collection and get the result : `["1 RBMN GNRTS" ... ]`</text>
  </message>
  <message>
    <ts>2017-06-21T13:56:53.859922</ts>
    <user>U0YJJPFRA</user>
    <text>`(reduce #(conj %1 (command %2 collection) [] '([:command "upper"] [:command "reverse"] [:command "remove-vogal"]))`?</text>
  </message>
  <message>
    <ts>2017-06-21T13:57:52.883572</ts>
    <user>U0YJJPFRA</user>
    <text>I think this doesn´t pass the result to another, correct?</text>
  </message>
  <message>
    <ts>2017-06-21T13:58:55.909843</ts>
    <user>U3MLRD13K</user>
    <text>&lt;@U0YJJPFRA&gt; It sounds like you want a `reduce` over the seq of commands. seq of strings is the initial value; each pass maps command over the seq of strings</text>
  </message>
  <message>
    <ts>2017-06-21T14:02:36.005894</ts>
    <user>U0YJJPFRA</user>
    <text>In this case I´m runing each command to a collection</text>
  </message>
  <message>
    <ts>2017-06-21T14:03:05.017951</ts>
    <user>U0YJJPFRA</user>
    <text>my needs is run all command to each element</text>
  </message>
  <message>
    <ts>2017-06-21T14:06:47.106715</ts>
    <user>U0YJJPFRA</user>
    <text>how can I use dynamic transform for each element? something like `(-&amp;gt; element (commands ?))`</text>
  </message>
  <message>
    <ts>2017-06-21T14:08:27.146309</ts>
    <user>U3MLRD13K</user>
    <text>That is what a `reduce` would do, if I understand you correctly</text>
  </message>
  <message>
    <ts>2017-06-21T14:09:28.170345</ts>
    <user>U3MLRD13K</user>
    <text>```
(reduce 
  #(map
      (command %1)
      %2)
   [seq-of-commands]
   [seq-of-string])
```</text>
  </message>
  <message>
    <ts>2017-06-21T14:10:24.191318</ts>
    <user>U3MLRD13K</user>
    <text>Only I think I got the order of the args passed to the reducer wrong</text>
  </message>
  <message>
    <ts>2017-06-21T14:14:38.291450</ts>
    <user>U3MLRD13K</user>
    <text>Also I am not sure the dispatch syntax is correct, but that's the basic idea</text>
  </message>
  <message>
    <ts>2017-06-21T14:19:52.416528</ts>
    <user>U3MLRD13K</user>
    <text>Whoa that's actually what you wrote above and I guess I wasn't paying close enough attention.</text>
  </message>
  <message>
    <ts>2017-06-21T14:20:04.421307</ts>
    <user>U3MLRD13K</user>
    <text>&lt;@U0YJJPFRA&gt; What didn't work about the snippet you sent earlier?</text>
  </message>
  <message>
    <ts>2017-06-21T14:21:29.455813</ts>
    <user>U0YJJPFRA</user>
    <text>&lt;@U3MLRD13K&gt; I think you trick is correct, I´ll give a try, thank you</text>
  </message>
  <message>
    <ts>2017-06-21T16:25:21.281984</ts>
    <user>U28TJ0DDZ</user>
    <text>hey guys, I'm looking forward to design an extensible library. but I'm not sure which is the best approach to it, do you know any reading matterial about this ?</text>
  </message>
  <message>
    <ts>2017-06-21T16:31:04.410084</ts>
    <user>U1CTH1TUY</user>
    <text>What's the library's purpose?</text>
  </message>
  <message>
    <ts>2017-06-21T16:31:44.424868</ts>
    <user>U28TJ0DDZ</user>
    <text>a web framework</text>
  </message>
  <message>
    <ts>2017-06-21T16:32:32.442987</ts>
    <user>U2APCNHCN</user>
    <text>*hides behind corner* Frameworks are evil.</text>
  </message>
  <message>
    <ts>2017-06-21T16:33:44.470044</ts>
    <user>U28TJ0DDZ</user>
    <text>&lt;@U2APCNHCN&gt; what do you mean ?</text>
  </message>
  <message>
    <ts>2017-06-21T16:41:23.635637</ts>
    <user>U236LQYB0</user>
    <text>&lt;@U28TJ0DDZ&gt; if you haven't already, you should give lispcast's recent article series on clojure webframeworks a read: &lt;http://www.lispcast.com/why-web-frameworks&gt; , &lt;http://www.lispcast.com/arguments-against-frameworks&gt; , &amp;amp; &lt;http://www.lispcast.com/clojure-web-framework&gt;</text>
  </message>
  <message>
    <ts>2017-06-21T16:42:23.657049</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U28TJ0DDZ&gt; best library possible is a bunch of little functions that compose correctly (e.g. a domain-specific algebra)</text>
  </message>
  <message>
    <ts>2017-06-21T16:43:54.689532</ts>
    <user>U28TJ0DDZ</user>
    <text>&lt;@U236LQYB0&gt; thanks, I'll watch them</text>
  </message>
  <message>
    <ts>2017-06-21T16:44:31.702583</ts>
    <user>U28TJ0DDZ</user>
    <text>&lt;@U1LCB75M2&gt; thanks</text>
  </message>
  <message>
    <ts>2017-06-21T16:46:37.747754</ts>
    <user>U1LCB75M2</user>
    <text>maybe one practical example is something like XPath vs. Lenses for traversing data structures</text>
  </message>
  <message>
    <ts>2017-06-21T16:47:21.763500</ts>
    <user>U1LCB75M2</user>
    <text>if you design w/ XPath in mind, the API will look one way, w/ Lenses probably another</text>
  </message>
  <message>
    <ts>2017-06-21T16:47:25.765025</ts>
    <user>U1LCB75M2</user>
    <text>and will compose differently</text>
  </message>
  <message>
    <ts>2017-06-21T16:47:33.768054</ts>
    <user>U1LCB75M2</user>
    <text>(or not at all)</text>
  </message>
  <message>
    <ts>2017-06-21T18:32:12.589944</ts>
    <user>U28TJ0DDZ</user>
    <text>&lt;@U236LQYB0&gt; are you the author ?</text>
  </message>
  <message>
    <ts>2017-06-21T18:33:02.600630</ts>
    <user>U236LQYB0</user>
    <text>I am not</text>
  </message>
  <message>
    <ts>2017-06-21T18:36:24.644129</ts>
    <user>U28TJ0DDZ</user>
    <text>it's a good material, but i'm not agree with some of those ideas</text>
  </message>
  <message>
    <ts>2017-06-21T18:46:47.769632</ts>
    <user>U064X3EF3</user>
    <text>If one thing is clear, it's that we have both too many and not enough frameworks</text>
  </message>
  <message>
    <ts>2017-06-21T18:47:48.781586</ts>
    <user>U28TJ0DDZ</user>
    <text>&lt;@U064X3EF3&gt; yeah that's true, At the end of the day frameworks are just tools, there are lots of good and bad tools around</text>
  </message>
  <message>
    <ts>2017-06-21T18:48:56.794958</ts>
    <user>U28TJ0DDZ</user>
    <text>I don't think that not using a framework makes you an expert. It might makes you a fool because your trying to go to a war with a water pistol</text>
  </message>
  <message>
    <ts>2017-06-21T19:28:16.240889</ts>
    <user>U0HM5MJ5V</user>
    <text>my experience with frameworks is that you trade potentially getting boxed in by constraints later for a quicker start on a project</text>
  </message>
  <message>
    <ts>2017-06-21T19:29:01.248801</ts>
    <user>U0LGCREMU</user>
    <text>define "framework".  to me, something that works, until it doesn't.  massive pain ensues.</text>
  </message>
  <message>
    <ts>2017-06-21T19:29:01.248887</ts>
    <user>U0HM5MJ5V</user>
    <text>good trade if the project doesn't grow and change i guess</text>
  </message>
  <message>
    <ts>2017-06-21T19:29:24.252878</ts>
    <user>U0HM5MJ5V</user>
    <text>yeah seems like there's a list of qualifications to me</text>
  </message>
  <message>
    <ts>2017-06-21T19:29:58.258942</ts>
    <user>U0HM5MJ5V</user>
    <text>big one is the framework code implements your -main and controls initialization and lifecycle stuff</text>
  </message>
  <message>
    <ts>2017-06-21T19:30:08.261081</ts>
    <user>U0HM5MJ5V</user>
    <text>(imho)</text>
  </message>
  <message>
    <ts>2017-06-21T19:31:20.273945</ts>
    <user>U0HM5MJ5V</user>
    <text>maybe baked in libraries for handling each task (data mapping, routing, caching, rendering, etc) that're hard to change out would be another</text>
  </message>
  <message>
    <ts>2017-06-21T19:33:19.294899</ts>
    <user>U0LGCREMU</user>
    <text>fwiw, when i hear "framework", i think monolithic, non-compositional blob-o-stuff.</text>
  </message>
  <message>
    <ts>2017-06-21T19:34:29.307200</ts>
    <user>U0HM5MJ5V</user>
    <text>yeah. more up front pain to compose/integrate a bunch of single purpose libraries but tends to pay off</text>
  </message>
  <message>
    <ts>2017-06-21T19:36:16.326068</ts>
    <user>U0LGCREMU</user>
    <text>composing libs (components) - way better, in general. problem tends to be docs.</text>
  </message>
  <message>
    <ts>2017-06-21T19:37:57.343303</ts>
    <user>U0LGCREMU</user>
    <text>you can't be expected to doc every possible use of your lib.</text>
  </message>
  <message>
    <ts>2017-06-21T20:33:55.877111</ts>
    <user>U0JMKBZL0</user>
    <text>I've run into a strange compiler error that only seems to manifest when I pull in a secondary library via checkouts. I've verified the problem is not code as it works on another machine. Tried reinstalling java and Leiningen to no avail. Any idea what this could be?</text>
  </message>
  <message>
    <ts>2017-06-21T20:35:36.890919</ts>
    <user>U0JMKBZL0</user>
    <text>```
user=&amp;gt; (require '[foo.bar])
CompilerException java.lang.ExceptionInInitializerError, compiling:(foo.bar.clj:1:1)```</text>
  </message>
  <message>
    <ts>2017-06-21T20:36:13.896101</ts>
    <user>U0JMKBZL0</user>
    <text>If I remove the symlink in checkouts, everything seems to work fine.</text>
  </message>
  <message>
    <ts>2017-06-21T22:07:38.634032</ts>
    <user>U064X3EF3</user>
    <text>frameworks are things that call you, rather than things you call</text>
  </message>
  <message>
    <ts>2017-06-21T22:07:47.635267</ts>
    <user>U064X3EF3</user>
    <text>(which are more likely components)</text>
  </message>
  <message>
    <ts>2017-06-21T22:08:12.638548</ts>
    <user>U064X3EF3</user>
    <text>&lt;@U0LGCREMU&gt; ^^</text>
  </message>
  <message>
    <ts>2017-06-21T22:09:16.646991</ts>
    <user>U0LGCREMU</user>
    <text>hmm, seems a reasonable defn</text>
  </message>
  <message>
    <ts>2017-06-21T22:09:46.650963</ts>
    <user>U064X3EF3</user>
    <text>not something I made up and probably not 100% satisfying, but I think it's about right</text>
  </message>
  <message>
    <ts>2017-06-22T00:01:41.442667</ts>
    <user>U0NBGRGD6</user>
    <text>&lt;https://github.com/technomancy/leiningen/blob/master/doc/DEPLOY.md&gt;
I'm trying to deploy to private repo according to this tut, but every time I use lein deploy, It will ask for username and password. 
I mentioned it's said there's a bug for gpg, it that mean the username and password in credentials.clj.gpg will not work, orI have to do something?</text>
  </message>
  <message>
    <ts>2017-06-22T03:23:05.064379</ts>
    <user>U0S3YK6HK</user>
    <text>Hey all, I am running into what I think is a bug with how clojure's java interop works</text>
  </message>
  <message>
    <ts>2017-06-22T03:23:50.073618</ts>
    <user>U0S3YK6HK</user>
    <text>I am trying to wrap &lt;https://github.com/lokra/seaweedfs-client&gt; for use in clojure</text>
  </message>
  <message>
    <ts>2017-06-22T03:24:05.076612</ts>
    <user>U0S3YK6HK</user>
    <text>but when I try to port the example upstart code</text>
  </message>
  <message>
    <ts>2017-06-22T03:24:13.078264</ts>
    <user>U0S3YK6HK</user>
    <text>```
FileSource fileSource = new FileSource();
// SeaweedFS master server host
fileSource.setHost("localhost");
// SeaweedFS master server port
fileSource.setPort(9333);
// Startup manager and listens for the change
fileSource.startup();

FileTemplate template = new FileTemplate(fileSource.getConnection());
template.saveFileByStream("filename.doc", someFile);
```</text>
  </message>
  <message>
    <ts>2017-06-22T03:24:36.082984</ts>
    <user>U0S3YK6HK</user>
    <text>to clojure</text>
  </message>
  <message>
    <ts>2017-06-22T03:25:03.088694</ts>
    <user>U0S3YK6HK</user>
    <text>```
(defn connect!
  [host port]
  (let [client (FileSource.)]
    (.setHost client host)
    (.setPort client port)
    (.startup client)
    (reset! client-atom client)
    (let [value (.getConnection @client-atom)]
      (reset! file-template-atom (FileTemplate. value)))))
```</text>
  </message>
  <message>
    <ts>2017-06-22T03:26:14.104012</ts>
    <user>U0S3YK6HK</user>
    <text>I get an error similar to 
`IllegalAccessError tried to access class org.lokra.seaweedfs.core.Connection from class &amp;lt;class info&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-06-22T03:26:58.113509</ts>
    <user>U0S3YK6HK</user>
    <text>I have found &lt;https://groups.google.com/forum/#!topic/clojure/zr2N0dbidAI&gt; and &lt;https://dev.clojure.org/jira/browse/CLJ-1243&gt; that seem to point to this being a problem</text>
  </message>
  <message>
    <ts>2017-06-22T03:27:17.117610</ts>
    <user>U0S3YK6HK</user>
    <text>Any suggestions or workarounds I can try?</text>
  </message>
  <message>
    <ts>2017-06-22T04:24:49.920473</ts>
    <user>U0S3YK6HK</user>
    <text>Plot thinkens, I can use the code without problems on my Mac but on Windows it breaks</text>
  </message>
  <message>
    <ts>2017-06-22T04:24:53.921413</ts>
    <user>U0S3YK6HK</user>
    <text>:thinking_face:</text>
  </message>
  <message>
    <ts>2017-06-22T06:09:00.572576</ts>
    <user>U061HGP8C</user>
    <text>&lt;@U0S3YK6HK&gt; What's the Java version on both? `lein version` should print it</text>
  </message>
  <message>
    <ts>2017-06-22T06:09:33.580396</ts>
    <user>U061HGP8C</user>
    <text>Also possibly compare the outputs of `lein deps :tree`</text>
  </message>
  <message>
    <ts>2017-06-22T08:18:09.282914</ts>
    <user>U064X3EF3</user>
    <text>I don't see any signs that CLJ-1243 has anything to do with it</text>
  </message>
  <message>
    <ts>2017-06-22T08:26:09.404182</ts>
    <user>U0JL9D0E9</user>
    <text>hey guys! I want to read a stream with unknown number of lines (e.g. a file) and fire an async get request per each line (lets say using an http-kit async get with `(go (&amp;gt;! c response))` as a callback). then, read the responses one by one into another file. is there an elegant way of closing the channel making sure I am not missing any async puts into the channel? I can do so with putting my own guard msg at the end but it feels awkward.</text>
  </message>
  <message>
    <ts>2017-06-22T08:36:35.570041</ts>
    <user>U061HGP8C</user>
    <text>I'm not sure I understand what you're trying to do exactly; any reason why the producer can't just close the channel when the stream runs out?</text>
  </message>
  <message>
    <ts>2017-06-22T09:25:05.493581</ts>
    <user>U0JL9D0E9</user>
    <text>&lt;@U061HGP8C&gt; the producer might close the channel before the last response is put there</text>
  </message>
  <message>
    <ts>2017-06-22T09:40:58.855429</ts>
    <user>U061HGP8C</user>
    <text>How so? The producer being (in my mind) the single sequential process that reads from the stream and puts on the channel, it should be able to not close the channel before it's finished reading the stream</text>
  </message>
  <message>
    <ts>2017-06-22T09:41:33.869100</ts>
    <user>U061HGP8C</user>
    <text>maybe you're missing a channel</text>
  </message>
  <message>
    <ts>2017-06-22T09:42:16.885633</ts>
    <user>U061HGP8C</user>
    <text>read file -&amp;gt; channel -&amp;gt; http calls -&amp;gt; channel -&amp;gt; write file ?</text>
  </message>
  <message>
    <ts>2017-06-22T09:44:11.930729</ts>
    <user>U061HGP8C</user>
    <text>if that's the general shape and you want to ensure some parallelism in the "calls" step, maybe look at what the `pipeline` functions have to offer in core.async?</text>
  </message>
  <message>
    <ts>2017-06-22T09:44:23.935517</ts>
    <user>U061HGP8C</user>
    <text>I would suppose they already handle closing the channel in the right order</text>
  </message>
  <message>
    <ts>2017-06-22T11:14:02.307082</ts>
    <user>U5YA41N3G</user>
    <text>Can anyone either give me some thoughts or tell me the best place to ask about some architecture issue I'm trying to sort out? 

Long story short, I have a Clojure + Clojurescript web app that needs to extend itself as a desktop app and as a user-owned server (with web admin api) that can have user created functions (think add-ons, plug-ins, arbitrary user code). I'm trying to find the best way to implement these two new pieces that highlights ease of installation, extensibility, minimal system requirements, and shared codebase as much as possible. The desktop app itself is surely going to end up being electron-based. As far as the code, there's a "simulation" engine that I don't want to rewrite in multiple languages unless from scratch to be shared, and is currently in .cljs files.

My ideas thus far are - 
Option 1: Write the user-run server in Clojurescript + Node.js  (running on node.js as the server) with user-defined JavaScript functions that get called from Clojurescript/JavaScript, and expose the Clojurescript API via externs
Option 2: Write the user-run server in Clojure and run a v8 instance where I eval anything written by users in pure JavaScript, returning and sending json to communicate (at the cost of some speed and cruft).

Any other ideas or thoughts? Or anywhere someone can point me?  Thanks.</text>
  </message>
  <message>
    <ts>2017-06-22T11:43:33.104968</ts>
    <user>U056QFNM5</user>
    <text>&lt;@U5YA41N3G&gt; - Don't have time to think deeply about this now, but your question strikes me as one that could be asked at the Clojure or Clojurescript subreddit. That way it's less likely to be buried by other conversations while people think about it.</text>
  </message>
  <message>
    <ts>2017-06-22T12:37:39.467574</ts>
    <user>U5QCSK76C</user>
    <text>Any news on when clojure.spec become part of core?</text>
  </message>
  <message>
    <ts>2017-06-22T12:38:09.478820</ts>
    <user>U09LZR36F</user>
    <text>It won't. It's been split into its own library.</text>
  </message>
  <message>
    <ts>2017-06-22T12:46:08.664608</ts>
    <user>U051SS2EU</user>
    <text>wasn't it going to be merged in later, on a "when it's done" kind of schedule (so after 1.9) ?</text>
  </message>
  <message>
    <ts>2017-06-22T12:46:47.679413</ts>
    <user>U054BUGT4</user>
    <text>There's a good discussion about this on the latest defn podcast (&lt;https://defn.audio&gt;) - with Stuart Halloway - it's not on the website yet but it's episode 23 - it's in the RSS</text>
  </message>
  <message>
    <ts>2017-06-22T12:51:28.786455</ts>
    <user>U380J7PAQ</user>
    <text>Hi, I'm trying to figure out how to do something that's embarrassingly simple, but im just having no luck lol.  Basically, I need something that does the following
```(check #{1 2} [1 2 3]) =&amp;gt; true
(check #{1 2 4} [1 2 3]) =&amp;gt; false
```

for check i've been through variations of some, every? not-any?, etc.  But still can't quite get what I'm looking for .  I just need to flag the fact that there's something in the first collection that's not in the second</text>
  </message>
  <message>
    <ts>2017-06-22T12:53:27.832739</ts>
    <user>U5XMV6DQT</user>
    <text>convert 2nd arg to set?</text>
  </message>
  <message>
    <ts>2017-06-22T12:53:48.840931</ts>
    <user>U11BV7MTK</user>
    <text>are you looking for set equality or set subset?</text>
  </message>
  <message>
    <ts>2017-06-22T12:54:45.863026</ts>
    <user>U380J7PAQ</user>
    <text>not equality, just that "a has something that b doesn't" ,it's ok if b has somethign that a doesnt</text>
  </message>
  <message>
    <ts>2017-06-22T12:55:04.870835</ts>
    <user>U380J7PAQ</user>
    <text>yeah I guess set/difference would work too</text>
  </message>
  <message>
    <ts>2017-06-22T12:55:17.875675</ts>
    <user>U380J7PAQ</user>
    <text>the problem is that 'set b' may be large</text>
  </message>
  <message>
    <ts>2017-06-22T12:55:21.877213</ts>
    <user>U11BV7MTK</user>
    <text>subset sounds like it?</text>
  </message>
  <message>
    <ts>2017-06-22T12:55:32.881192</ts>
    <user>U11BV7MTK</user>
    <text>oh, you need one to be a proper subset of the other</text>
  </message>
  <message>
    <ts>2017-06-22T12:55:51.888508</ts>
    <user>U380J7PAQ</user>
    <text>so was wondering about the cost of converting from a list/vector to a set to do the comparison</text>
  </message>
  <message>
    <ts>2017-06-22T12:56:06.894462</ts>
    <user>U380J7PAQ</user>
    <text>but i think I'll just go with that for now</text>
  </message>
  <message>
    <ts>2017-06-22T12:57:20.923381</ts>
    <user>U5XMV6DQT</user>
    <text>set uses transients, so don't think it would be a big overhead</text>
  </message>
  <message>
    <ts>2017-06-22T12:57:40.931590</ts>
    <user>U380J7PAQ</user>
    <text>ok wasnt sure how effcient it was in that scenario</text>
  </message>
  <message>
    <ts>2017-06-22T12:57:53.936709</ts>
    <user>U5XMV6DQT</user>
    <text>```
(defn set
  "Returns a set of the distinct elements of coll."
  {:added "1.0"
   :static true}
  [coll]
  (if (set? coll)
    (with-meta coll nil)
    (if (instance? clojure.lang.IReduceInit coll)
      (persistent! (.reduce ^clojure.lang.IReduceInit coll conj! (transient #{})))
      (persistent! (reduce1 conj! (transient #{}) coll)))))
```</text>
  </message>
  <message>
    <ts>2017-06-22T12:57:58.938610</ts>
    <user>U380J7PAQ</user>
    <text>ok will give that a shot if it behaves then i'm good</text>
  </message>
  <message>
    <ts>2017-06-22T12:58:04.940953</ts>
    <user>U380J7PAQ</user>
    <text>cool</text>
  </message>
  <message>
    <ts>2017-06-22T12:58:14.944759</ts>
    <user>U5XMV6DQT</user>
    <text>I just jumped to definition in my emacs/cider (M-.) :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-22T12:59:46.981902</ts>
    <user>U11BV7MTK</user>
    <text>so i guess it would be `(and (subset my-set (set coll)) (not-empty? (remove my-set coll))`</text>
  </message>
  <message>
    <ts>2017-06-22T13:02:03.039458</ts>
    <user>U064X3EF3</user>
    <text>the true answer is: we have not yet decided</text>
  </message>
  <message>
    <ts>2017-06-22T13:03:53.083505</ts>
    <user>U064X3EF3</user>
    <text>it is effectively part of core now as Clojure depends on spec.alpha. thus users of Clojure get both. Whether and when the two units of code are co-located will depend on how things unfold (but should not actually matter to users)</text>
  </message>
  <message>
    <ts>2017-06-22T13:25:52.592185</ts>
    <user>U061HGP8C</user>
    <text>`(not-empty? (set/difference (set a) (set b)))` ?</text>
  </message>
  <message>
    <ts>2017-06-22T13:27:14.623800</ts>
    <user>U11BV7MTK</user>
    <text>that wouldn't ensure that a is a subset of b though</text>
  </message>
  <message>
    <ts>2017-06-22T13:28:43.659207</ts>
    <user>U051SS2EU</user>
    <text>if the difference is empty, a is a subset of b</text>
  </message>
  <message>
    <ts>2017-06-22T13:28:49.661447</ts>
    <user>U051SS2EU</user>
    <text>guaranteed</text>
  </message>
  <message>
    <ts>2017-06-22T13:28:50.661728</ts>
    <user>U236LQYB0</user>
    <text>if you're just trying to ensure a subset, can't you just use `set/subset?` &lt;https://www.conj.io/store/v1/org.clojure/clojure/1.8.0/clj/clojure.set/subset%3F&gt; ?</text>
  </message>
  <message>
    <ts>2017-06-22T13:40:05.925900</ts>
    <user>U11BV7MTK</user>
    <text>But disjoint sets have a non empty difference which was certainly not according to his original requirements</text>
  </message>
  <message>
    <ts>2017-06-22T13:59:54.398816</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U11BV7MTK&gt; he said "I just need to flag the fact that there's something in the first collection that's not in the second" -- disjoint sets certainly seem to fulfill that requirement, as there is definitely "something in the first collection that's not in the second"</text>
  </message>
  <message>
    <ts>2017-06-22T14:03:24.489494</ts>
    <user>U5XDR5QKS</user>
    <text>what is the "best" way to store a c3p0 pool to be accessed by multiple namespaces?</text>
  </message>
  <message>
    <ts>2017-06-22T14:07:38.591920</ts>
    <user>U236LQYB0</user>
    <text>mdrago1026: You can use something like &lt;https://github.com/tolitius/mount&gt; or &lt;https://github.com/stuartsierra/component&gt; to manage complex required system dependencies.

Or for something simple like a c3p0 pool, which keeps track of it's own errors for the most part, I tend to just use something like `(defonce conn-pool (delay (create-c3p0-connection))` and everywhere else you want to refer to it you can `require` the config namespace and reference the pool with `@conn-pool`</text>
  </message>
  <message>
    <ts>2017-06-22T14:09:31.635636</ts>
    <user>U5XDR5QKS</user>
    <text>awesome. thanks a ton. I will take a look at these</text>
  </message>
  <message>
    <ts>2017-06-22T14:13:32.729144</ts>
    <user>U236LQYB0</user>
    <text>&lt;@U5XDR5QKS&gt; on a very random, unsolicited side note, I prefer &lt;http://brettwooldridge.github.io/HikariCP/&gt; over c3p0. Nothing inherently wrong with c3p0, and I've used it in production quite a lot, but hikariCP fits better with what I'm used to in Clojure (in terms of "it just kind of does the correct thing")</text>
  </message>
  <message>
    <ts>2017-06-22T14:15:44.779988</ts>
    <user>U5XDR5QKS</user>
    <text>very interesting. let me read up on this. I've heard of Hikari and simply always default to c3p0 since that's what i always have used</text>
  </message>
  <message>
    <ts>2017-06-22T14:16:15.792105</ts>
    <user>U236LQYB0</user>
    <text>way more than the speed of things (which is not insubstantial), this is why I prefer hikaricp: &lt;https://github.com/brettwooldridge/HikariCP/wiki/Pool-Analysis#c3p0&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T14:18:48.851052</ts>
    <user>U5XDR5QKS</user>
    <text>wow this is neat</text>
  </message>
  <message>
    <ts>2017-06-22T14:18:54.853046</ts>
    <user>U5XDR5QKS</user>
    <text>I'm going to try this out</text>
  </message>
  <message>
    <ts>2017-06-22T15:14:27.149234</ts>
    <user>U0YGD4GTG</user>
    <text>I am looking for some help for code coverage tools for clojure, has anyone used cloverage before?</text>
  </message>
  <message>
    <ts>2017-06-22T15:33:11.545755</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U0YGD4GTG&gt; worked fine last time I used, gave a nice report for lisp (based on forms covered)</text>
  </message>
  <message>
    <ts>2017-06-22T15:35:34.596096</ts>
    <user>U1LCB75M2</user>
    <text>straightforward -&amp;gt; &lt;https://blog.jeaye.com/2016/12/29/clojure-test-coverage/&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T15:43:41.765921</ts>
    <user>U4986ECDQ</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-22T15:44:34.785294</ts>
    <user>U0YGD4GTG</user>
    <text>thanks &lt;@U1LCB75M2&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T15:45:17.801317</ts>
    <user>U0YGD4GTG</user>
    <text>just figured out why I am not able to get it..so my tests goes through all well when I do lein test, but are failing when I use cloverage</text>
  </message>
  <message>
    <ts>2017-06-22T15:45:27.805088</ts>
    <user>U0YGD4GTG</user>
    <text>apparently they have this issue open &lt;https://github.com/cloverage/cloverage/issues/164&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T15:48:52.878358</ts>
    <user>U061HGP8C</user>
    <text>Another piece of unsolicited advice: you should not think of namespaces as accessing anything; namespaces are passive collections of functions. And if a function needs access to a connection pool, it should receive it as an argument, regardless of what namespace it's in.</text>
  </message>
  <message>
    <ts>2017-06-22T15:49:37.894004</ts>
    <user>U591R8WBZ</user>
    <text>&lt;@U5XDR5QKS&gt; Use `defstate` from &lt;https://github.com/tolitius/mount&gt;, or look into &lt;https://github.com/stuartsierra/component&gt;.
BTW, do you *need* to stick with c3p0? I enjoyed &lt;https://github.com/tomekw/hikari-cp&gt; quite a bit.</text>
  </message>
  <message>
    <ts>2017-06-22T15:51:27.933839</ts>
    <user>U591R8WBZ</user>
    <text>Oh, sorry for replying out-of-thread. :flushed:</text>
  </message>
  <message>
    <ts>2017-06-22T16:26:07.677420</ts>
    <user>U236LQYB0</user>
    <text>hansen-pansen: :smile: you and me? We're on the same page, apparently…just different threads :smile:</text>
  </message>
  <message>
    <ts>2017-06-22T16:28:09.720974</ts>
    <user>U5XDR5QKS</user>
    <text>&lt;@U591R8WBZ&gt; No problem. I don't need c3p0 (used it before for work, so I just default to it). &lt;@U236LQYB0&gt; also told me to look at hikari and it looks awesome. So thank you both</text>
  </message>
  <message>
    <ts>2017-06-22T16:28:33.729556</ts>
    <user>U5XDR5QKS</user>
    <text>and mount and component both look great too</text>
  </message>
  <message>
    <ts>2017-06-22T16:29:23.747222</ts>
    <user>U5XDR5QKS</user>
    <text>makes sense. I always got confused when it came to "sharing a connection" because everything else is functional and stateless, then comes the connection</text>
  </message>
  <message>
    <ts>2017-06-22T16:34:37.861270</ts>
    <user>U591R8WBZ</user>
    <text>I felt quite ashamed that I sent the same advice hours later :grinning:</text>
  </message>
  <message>
    <ts>2017-06-22T16:39:44.967736</ts>
    <user>U591R8WBZ</user>
    <text>Is there a library that offers a worker-queue type of concurrency, i.e. enqueue work for a fixed-sized thread pool? I looked into `claypoole`, but it works on sequences.</text>
  </message>
  <message>
    <ts>2017-06-22T16:43:43.051200</ts>
    <user>U236LQYB0</user>
    <text>hansen-pansen: if you're familiar with java, you can do it the same ways you would in java with clojure.

If I'm not too worried about thread priorities and contention, then I'll just use core.async with a fixed number of "workers" (i.e. go-loops) that are pulling from a shared channel, and then write jobs to that channel</text>
  </message>
  <message>
    <ts>2017-06-22T16:45:18.084099</ts>
    <user>U591R8WBZ</user>
    <text>I already rolled a n00b-version with core.async, but it felt … too low-level. I looked into the amazing `manifold`, which offers backpressure and all the nice stream operators, but it lacks the pooling part.
Just wondering whether somebody else stumbled over the same problem.</text>
  </message>
  <message>
    <ts>2017-06-22T16:46:38.111778</ts>
    <user>U591R8WBZ</user>
    <text>Ohh, and I have close to zero Java background, but if that is an option, I will take a look. I guess you mean something from `java.util.concurrent`?</text>
  </message>
  <message>
    <ts>2017-06-22T16:48:27.148697</ts>
    <user>U051SS2EU</user>
    <text>agreed you can just use an ExecutorService</text>
  </message>
  <message>
    <ts>2017-06-22T16:48:43.154151</ts>
    <user>U236LQYB0</user>
    <text>depends on your requirements. the main problem with core.async for worker pools can be that it uses the same thread pool for *all* core.async related channels. So if this is supposed to be a background operation, and you also use core.async in something like handling production web requests, then your background jobs might be interfering with your web requests.

If that's your case, you'll probably want to use ExecutorService</text>
  </message>
  <message>
    <ts>2017-06-22T16:48:54.157743</ts>
    <user>U051SS2EU</user>
    <text>but if you use core.async pipeline-blocking properly you can do it at a high level with clojure too</text>
  </message>
  <message>
    <ts>2017-06-22T16:50:03.181763</ts>
    <user>U051SS2EU</user>
    <text>where the queue is the buffer on the chan, and the thread count is the parallelism arg</text>
  </message>
  <message>
    <ts>2017-06-22T16:54:39.279026</ts>
    <user>U087U9YG3</user>
    <text>So this function reflects</text>
  </message>
  <message>
    <ts>2017-06-22T16:54:51.282864</ts>
    <user>U087U9YG3</user>
    <text>```(defn test-reflect [^javax.servlet.http.HttpServletResponse resp]
  (proxy [java.io.FilterOutputStream] [(.getOutputStream resp)]
    (close []
      (proxy-super close)
      (println "hello"))))
```</text>
  </message>
  <message>
    <ts>2017-06-22T16:55:01.286643</ts>
    <user>U087U9YG3</user>
    <text>specifically the call to proxy-super reflects</text>
  </message>
  <message>
    <ts>2017-06-22T16:55:13.290718</ts>
    <user>U087U9YG3</user>
    <text>and I'm wondering why</text>
  </message>
  <message>
    <ts>2017-06-22T16:55:24.294752</ts>
    <user>U087U9YG3</user>
    <text>it seems like it should be possible to resolve .close()</text>
  </message>
  <message>
    <ts>2017-06-22T16:56:13.312287</ts>
    <user>U591R8WBZ</user>
    <text>`pipeline-blocking` is what I used with my n00b version.
And yes, I try to use concurrency mostly for background web requests.</text>
  </message>
  <message>
    <ts>2017-06-22T17:08:51.571552</ts>
    <user>U591R8WBZ</user>
    <text>Thanks to your ideas on this topic, I propably should just put more brains on the `core.async/pipeline-blocking` idea and think of some error-passing messaging or channel.</text>
  </message>
  <message>
    <ts>2017-06-22T17:10:20.599040</ts>
    <user>U591R8WBZ</user>
    <text>&lt;https://stackoverflow.com/a/41448848/2068691&gt; brings me to some ideas.
Thank you very much for your ideas and inspiration!</text>
  </message>
  <message>
    <ts>2017-06-22T17:11:35.622762</ts>
    <user>U051SS2EU</user>
    <text>:thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-22T17:15:52.701818</ts>
    <user>U0NCTKEV8</user>
    <text>proxy doesn't type hint `this`</text>
  </message>
  <message>
    <ts>2017-06-22T17:17:07.724351</ts>
    <user>U591R8WBZ</user>
    <text>Thank you very much, guys! Your help is very much appreciated. This community is so cool!</text>
  </message>
  <message>
    <ts>2017-06-22T17:22:11.815697</ts>
    <user>U4986ECDQ</user>
    <text>&lt;@U087U9YG3&gt; I was about to make a PR with a fix for that.</text>
  </message>
  <message>
    <ts>2017-06-22T17:22:25.819981</ts>
    <user>U4986ECDQ</user>
    <text>Assuming you're in ring; looks like it to me.</text>
  </message>
  <message>
    <ts>2017-06-22T17:22:34.822829</ts>
    <user>U087U9YG3</user>
    <text>beat you to it =)</text>
  </message>
  <message>
    <ts>2017-06-22T17:23:03.831564</ts>
    <user>U4986ECDQ</user>
    <text>Did you get the rest? :smile:</text>
  </message>
  <message>
    <ts>2017-06-22T17:23:20.837006</ts>
    <user>U087U9YG3</user>
    <text>ring-servlet no longer reflects, didn't check the other subprojects</text>
  </message>
  <message>
    <ts>2017-06-22T17:23:38.842380</ts>
    <user>U087U9YG3</user>
    <text>&lt;https://github.com/ring-clojure/ring/pull/295/files&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T17:23:45.844223</ts>
    <user>U4986ECDQ</user>
    <text>&lt;https://gist.github.com/jeaye/3b650b3b584056d6440aaf161832247e&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T17:23:52.846315</ts>
    <user>U4986ECDQ</user>
    <text>That's what I had locally.</text>
  </message>
  <message>
    <ts>2017-06-22T17:24:14.852675</ts>
    <user>U087U9YG3</user>
    <text>hmm, lein check runs cleanly for me with just what I have</text>
  </message>
  <message>
    <ts>2017-06-22T17:24:34.859058</ts>
    <user>U4986ECDQ</user>
    <text>Did for me, too, but I see the reflection in my project using ring.</text>
  </message>
  <message>
    <ts>2017-06-22T17:24:42.861193</ts>
    <user>U087U9YG3</user>
    <text>ah, yeah</text>
  </message>
  <message>
    <ts>2017-06-22T17:24:59.866380</ts>
    <user>U4986ECDQ</user>
    <text>So I chose not to trust `lein check`, since I can see in the source how it would be reflecting. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-22T17:25:34.876450</ts>
    <user>U087U9YG3</user>
    <text>huh</text>
  </message>
  <message>
    <ts>2017-06-22T17:25:57.883374</ts>
    <user>U4986ECDQ</user>
    <text>Interested in applying the other changes, as shown in my gist, to your PR?</text>
  </message>
  <message>
    <ts>2017-06-22T17:26:08.886510</ts>
    <user>U087U9YG3</user>
    <text>I'll look into it =)</text>
  </message>
  <message>
    <ts>2017-06-22T17:26:28.892567</ts>
    <user>U4986ECDQ</user>
    <text>Cheers.</text>
  </message>
  <message>
    <ts>2017-06-22T17:26:29.892791</ts>
    <user>U087U9YG3</user>
    <text>oh, you're in the jetty adapter, I see</text>
  </message>
  <message>
    <ts>2017-06-22T17:26:58.901160</ts>
    <user>U087U9YG3</user>
    <text>ah, yeah, lein check reports problems</text>
  </message>
  <message>
    <ts>2017-06-22T17:27:34.912276</ts>
    <user>U4986ECDQ</user>
    <text>Ah, fair enough. Sanity is restored.</text>
  </message>
  <message>
    <ts>2017-06-22T17:34:55.040545</ts>
    <user>U4986ECDQ</user>
    <text>My approach to fixing the `proxy-super` is different, but the effect is the same.</text>
  </message>
  <message>
    <ts>2017-06-22T18:09:07.573371</ts>
    <user>U087U9YG3</user>
    <text>&lt;@U4986ECDQ&gt; I also added a return type hint so my code wouldn't reflect</text>
  </message>
  <message>
    <ts>2017-06-22T18:09:07.573510</ts>
    <user>U087U9YG3</user>
    <text>&lt;https://github.com/ring-clojure/ring/pull/294&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T18:10:17.589516</ts>
    <user>U4986ECDQ</user>
    <text>Yep, saw that before I started on the reflection work.</text>
  </message>
  <message>
    <ts>2017-06-22T18:12:03.614320</ts>
    <user>U4986ECDQ</user>
    <text>That PR looks good; thanks for beating me to it and updating it for ring-jetty-adapter. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-22T18:12:20.617891</ts>
    <user>U087U9YG3</user>
    <text>=)</text>
  </message>
  <message>
    <ts>2017-06-22T18:51:12.104519</ts>
    <user>U5XDR5QKS</user>
    <text>can you use environ when making a war file and deploying via tomcat? for example when i run ` lein with-profile dev ring uberwar... ` does that do anything?</text>
  </message>
  <message>
    <ts>2017-06-22T18:54:18.139833</ts>
    <user>U050MP39D</user>
    <text>very occasionally, 'clojure.core doesn't appear in the list returned by `(loaded-libs)`. that would be a bug right?</text>
  </message>
  <message>
    <ts>2017-06-22T18:58:08.183680</ts>
    <user>U0NCTKEV8</user>
    <text>hard to say</text>
  </message>
  <message>
    <ts>2017-06-22T19:00:06.206114</ts>
    <user>U0NCTKEV8</user>
    <text>loaded-libs only contains namespaces loaded via require or use, if I recall</text>
  </message>
  <message>
    <ts>2017-06-22T19:06:44.282978</ts>
    <user>U050MP39D</user>
    <text>mmmm that's not really what the docstring implies</text>
  </message>
  <message>
    <ts>2017-06-22T19:16:42.388838</ts>
    <user>U06DQC6MA</user>
    <text>So I am using an exception tracker that has mediocre clojure support (Sentry), but I'm working to improve it. Exception "rollup" (grouping of exceptions based on their similarity) relies on the hash of "in-app" stack frames (frames that begin with com.myapp for instance) being equal to a previously seen exception's stack frames. I believe rollup is not working across runs of my application due to anonymous function names differing. So, for instance: `com.myapp$fn__12345` is the name right now, but on the next run it may be `com.myapp$fn__99999`. Are there other patterns in clojure stack traces beyond `foo.bar$fn__12345` that I should let the maintainers know about which are specific to clojure, so exception rollup works as intended?</text>
  </message>
  <message>
    <ts>2017-06-22T19:19:32.417936</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U06DQC6MA&gt; check &lt;https://github.com/hcarvalhoalves/raven-clj&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T19:20:24.426902</ts>
    <user>U1LCB75M2</user>
    <text>the way its sending the tracebacks seems to make Sentry happy (it manages to group by Exception type nicely)</text>
  </message>
  <message>
    <ts>2017-06-22T19:21:50.441577</ts>
    <user>U06DQC6MA</user>
    <text>&lt;@U1LCB75M2&gt; I'm kind of meh on manually reading source files from disk with no cache and parsing the exception object by hand. This is something that can be accomplished on the server side.</text>
  </message>
  <message>
    <ts>2017-06-22T19:22:32.448719</ts>
    <user>U06DQC6MA</user>
    <text>As of a week ago or so, the `getsentry` folks picked up coda hale's wrapper around `raven-java`.</text>
  </message>
  <message>
    <ts>2017-06-22T19:24:13.465425</ts>
    <user>U06DQC6MA</user>
    <text>One other thing to add in case you're interested: I skipped the need to have `in-app` by simply setting the package names of my app as a param on the `DSN`</text>
  </message>
  <message>
    <ts>2017-06-22T19:25:45.481112</ts>
    <user>U06DQC6MA</user>
    <text>Finally, I spoke with the sentry maintainers and they said it would be no problem to just fix the hashing of the problematic frames.</text>
  </message>
  <message>
    <ts>2017-06-22T19:30:06.524740</ts>
    <user>U06DQC6MA</user>
    <text>&lt;@U1LCB75M2&gt; err maybe one more thing: I tried variations on what you're using, and I still managed to have mixed results. I fixed that same `nth` `IndexOutOfBoundsException` for `:context_line` for instance.

Here's the "official" sentry-clj lib now -- PRs as I understand it, are welcome: &lt;https://github.com/getsentry/sentry-clj&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T19:38:08.603582</ts>
    <user>U1LCB75M2</user>
    <text>IMO the killer feature is having source code context around the error</text>
  </message>
  <message>
    <ts>2017-06-22T19:45:06.672036</ts>
    <user>U1LCB75M2</user>
    <text>without that Sentry is just an expensive log aggregator</text>
  </message>
  <message>
    <ts>2017-06-22T20:02:59.849387</ts>
    <user>U087U9YG3</user>
    <text>Would it be possible to arrange things so that `(when (instance? Foo x) (.fooMethod x))` wouldn't reflect?</text>
  </message>
  <message>
    <ts>2017-06-22T20:03:39.855855</ts>
    <user>U087U9YG3</user>
    <text>ie special-case compilation of (if (instance? …) …) so that the then branch was automatically hinted?</text>
  </message>
  <message>
    <ts>2017-06-22T20:03:53.858154</ts>
    <user>U087U9YG3</user>
    <text>…I guess this belongs in &lt;#C06E3HYPR|clojure-dev&gt;</text>
  </message>
  <message>
    <ts>2017-06-22T21:15:18.453801</ts>
    <user>U06DQC6MA</user>
    <text>&lt;@U1LCB75M2&gt; I was talking to the sentry folks and it sounds like the source code context will be something that's pulled from github in the near future. All of the data required to do it is there, just hasn't been plumbed into the product. I think it's better than a log aggregator, but I'm using an on-premises install which affords some extra flexibility you don't really get in the SaaS product.</text>
  </message>
  <message>
    <ts>2017-06-22T22:44:56.137825</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U06DQC6MA&gt; interesting to see that the sentry folks picked up maintaining a clojure client. I'll have to give theirs a spin to see how it compares to the fork of raven-clj (which currently works very well for me).</text>
  </message>
  <message>
    <ts>2017-06-23T04:42:43.140213</ts>
    <user>U067BPAB1</user>
    <text>G'day everyone, I have a macro puzzle question - how can I access an atom from within a macro? I have the following:

```
(def tatom (atom nil))

(defmacro tmacro
  []
  `(let [t# (deref tatom)]
     (if t#
       (prn "tatom is nil")
       (prn "tatom has value"))))

(tmacro)
"tatom is nil"
=&amp;gt; nil

(reset! tatom 1)
=&amp;gt; 1
(tmacro)
"tatom is nil"
=&amp;gt; nil
```

Anyone got any ideas as to why the atom is not being correctly deref'd here?</text>
  </message>
  <message>
    <ts>2017-06-23T04:44:39.167617</ts>
    <user>U067BPAB1</user>
    <text>The gist of the question is - I want to access mutable storage from within a macro, how do I do that?</text>
  </message>
  <message>
    <ts>2017-06-23T04:45:44.183149</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U067BPAB1&gt; the branches on your if are the wrong way around</text>
  </message>
  <message>
    <ts>2017-06-23T04:45:50.184592</ts>
    <user>U060FKQPN</user>
    <text>also there's no need for that to be a macro</text>
  </message>
  <message>
    <ts>2017-06-23T04:46:30.193840</ts>
    <user>U067BPAB1</user>
    <text>This is just a contrived example, not real production code which is what this question is really about - and I want that one to be a macro for various reasons.</text>
  </message>
  <message>
    <ts>2017-06-23T04:46:58.200300</ts>
    <user>U067BPAB1</user>
    <text>Thanks for pointing out the ordering, I knew it had to be my morning idiocy. :facepalm:</text>
  </message>
  <message>
    <ts>2017-06-23T06:25:03.573434</ts>
    <user>U5UP845LY</user>
    <text>in which ns is the tatom ? the same as defmacro, or the same as its usage?</text>
  </message>
  <message>
    <ts>2017-06-23T07:35:48.382548</ts>
    <user>U04VDQDDY</user>
    <text>&lt;@U067BPAB1&gt; I can't repro. The first call to `(tmacro)` causes it to print `"tatom has value"` and after the `reset!` it causes it to print `"tatom is nil"`</text>
  </message>
  <message>
    <ts>2017-06-23T07:39:48.425844</ts>
    <user>U067BPAB1</user>
    <text>Thanks guys, but as I mention above, this was just a morning brainfart on my part, with the branches reversed. This was just a contrived example that I quickly put together to verify that I can deref atoms (from the same ns, but it doesn't really matter if they're fully ns-qualified) and screwed up in the process.</text>
  </message>
  <message>
    <ts>2017-06-23T07:41:41.447285</ts>
    <user>U04VDQDDY</user>
    <text>&lt;@U067BPAB1&gt; Right, understood that the branches are reversed. I still can't repro what you pasted above.</text>
  </message>
  <message>
    <ts>2017-06-23T07:43:38.469098</ts>
    <user>U067BPAB1</user>
    <text>The other half of the morning brainfart was the behaviour of things. The behaviour above cannot really be reproduced, it's just my bad copy paste.

This has stirred quite a conversation here. I wonder if I should just remove the question but the sharper minds will at least get a good laugh out of it if I leave it hanging here.</text>
  </message>
  <message>
    <ts>2017-06-23T07:44:28.478694</ts>
    <user>U067BPAB1</user>
    <text>_Sometimes, rubber-ducking makes one look like an idiot if he uses the whole community for it._</text>
  </message>
  <message>
    <ts>2017-06-23T07:44:59.484422</ts>
    <user>U04VDQDDY</user>
    <text>OK cool. I thought you might have a bad REPL environment or something exhibiting a low-level bug.</text>
  </message>
  <message>
    <ts>2017-06-23T07:45:16.487782</ts>
    <user>U067BPAB1</user>
    <text>I had a few things mixed up together as I was re-defing things.</text>
  </message>
  <message>
    <ts>2017-06-23T07:45:36.491948</ts>
    <user>U067BPAB1</user>
    <text>Then add to that me being half asleep and this is the result. Still thanks for all the help!</text>
  </message>
  <message>
    <ts>2017-06-23T08:36:23.141619</ts>
    <user>U15MJHWRX</user>
    <text>for a hobby project, i'd like to implement some kind of extension system. the "modules" (or whatever they'll be called) should be able to extend the system in various predefined ways depending on their type (think "themes", "content elements", …). my question relates to being able to add them "dynamically" somehow, if that's the right word, without me having to recompile the app (but maybe the individual module?)</text>
  </message>
  <message>
    <ts>2017-06-23T08:36:33.144041</ts>
    <user>U15MJHWRX</user>
    <text>i'd be thankful for any pointers</text>
  </message>
  <message>
    <ts>2017-06-23T08:37:15.154482</ts>
    <user>U09LZR36F</user>
    <text>&lt;@U15MJHWRX&gt; `load-file` should do the trick :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T08:37:16.154653</ts>
    <user>U15MJHWRX</user>
    <text>i'm aware of the added complexities; is this maybe a bad idea in general for reasons i'm unaware of?</text>
  </message>
  <message>
    <ts>2017-06-23T08:37:42.161100</ts>
    <user>U15MJHWRX</user>
    <text>uh neat! thanks. with clojure it's always those functions you find after months … :wink:</text>
  </message>
  <message>
    <ts>2017-06-23T08:37:46.162052</ts>
    <user>U09LZR36F</user>
    <text>I think Lisp is well suited to this, it was designed to receive code over sockets &amp;amp; such. In fact Clojure has made decisions to ensure that this is the case.</text>
  </message>
  <message>
    <ts>2017-06-23T08:38:27.171575</ts>
    <user>U15MJHWRX</user>
    <text>my thoughts exactly, but coming from OOP it seems so… daring</text>
  </message>
  <message>
    <ts>2017-06-23T08:38:30.172239</ts>
    <user>U15MJHWRX</user>
    <text>:'D</text>
  </message>
  <message>
    <ts>2017-06-23T08:46:22.287684</ts>
    <user>U09LZR36F</user>
    <text>Well, this isn't OO vs functional. Smalltalk could do this too.</text>
  </message>
  <message>
    <ts>2017-06-23T08:46:31.290023</ts>
    <user>U09LZR36F</user>
    <text>More about live programming I guess :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T08:54:00.405837</ts>
    <user>U15MJHWRX</user>
    <text>i wasn't referring to the technical aspects, more the mindset. in my experience this idea would be considered "hacky stuff"</text>
  </message>
  <message>
    <ts>2017-06-23T09:36:18.183459</ts>
    <user>U5YLENQ21</user>
    <text>Hey all, compujure-api throws an exception "No such var: compojure.response/send" when I try to import it in my namespace. I'm using [org.clojure/clojure "1.9.0-alpha17"]. Anyone exprienced this issue?</text>
  </message>
  <message>
    <ts>2017-06-23T09:38:20.223848</ts>
    <user>U5XMV6DQT</user>
    <text>what compojure version are you using?</text>
  </message>
  <message>
    <ts>2017-06-23T09:41:03.279254</ts>
    <user>U5YLENQ21</user>
    <text>It is a transitive dependency over compojure-api currently. By the way the error message is like this: 2. Unhandled clojure.lang.Compiler$CompilerException
   Error compiling compojure/api/async.clj at (24:1)

1. Caused by java.lang.RuntimeException
   No such var: compojure.response/Sendable</text>
  </message>
  <message>
    <ts>2017-06-23T09:42:20.306038</ts>
    <user>U5YLENQ21</user>
    <text>That means the version of the compojure 1.6</text>
  </message>
  <message>
    <ts>2017-06-23T09:46:40.396743</ts>
    <user>U061HGP8C</user>
    <text>what compojure version does `lein deps :tree` report?</text>
  </message>
  <message>
    <ts>2017-06-23T09:50:49.485151</ts>
    <user>U5YLENQ21</user>
    <text>Ok another dependency overrides it I will try with an explicit dep</text>
  </message>
  <message>
    <ts>2017-06-23T09:54:05.555246</ts>
    <user>U5YLENQ21</user>
    <text>Ok it did work thanks!</text>
  </message>
  <message>
    <ts>2017-06-23T10:05:41.818301</ts>
    <user>U061HGP8C</user>
    <text>Be slightly careful when adding an overriding dep like that as the final result depends on the order of the dependencies vector; it's safer to add explicit `:exclude`s in addition to pinning the version.</text>
  </message>
  <message>
    <ts>2017-06-23T10:31:10.405076</ts>
    <user>U4TQP3FDE</user>
    <text>if I have an initial value `100`, and I want to apply successive arbitrary functions to it which will result in a final value, what's a good way to do so? I'm looking for something that would allow me to do this: `(some-fn 100 [:inc :dec :set-50 …])`</text>
  </message>
  <message>
    <ts>2017-06-23T10:31:34.414710</ts>
    <user>U4TQP3FDE</user>
    <text>or something in the spirit of that at least :wink:</text>
  </message>
  <message>
    <ts>2017-06-23T10:32:41.441656</ts>
    <user>U11BV7MTK</user>
    <text>could be a really elegant reduce in there</text>
  </message>
  <message>
    <ts>2017-06-23T10:33:17.455474</ts>
    <user>U11BV7MTK</user>
    <text>`(reduce (fn [val fn] (fn val) 100 [functions go here])`</text>
  </message>
  <message>
    <ts>2017-06-23T10:36:17.525869</ts>
    <user>U4SKJCP3K</user>
    <text>Why in Clojure we are encouraged to use `recur` instead of making self-calls? I imagine is for performance reasons but couldn't find much information about it.</text>
  </message>
  <message>
    <ts>2017-06-23T10:36:53.539849</ts>
    <user>U4TQP3FDE</user>
    <text>`(reduce (fn [val fn] (fn val) 100 [dec dec dec])` gives an error: `Wrong number of args (1) passed to: core/reduce`</text>
  </message>
  <message>
    <ts>2017-06-23T10:37:10.546122</ts>
    <user>U11BV7MTK</user>
    <text>your parents are off</text>
  </message>
  <message>
    <ts>2017-06-23T10:37:15.548193</ts>
    <user>U11BV7MTK</user>
    <text>ah because mine were</text>
  </message>
  <message>
    <ts>2017-06-23T10:37:33.555057</ts>
    <user>U11BV7MTK</user>
    <text>`(reduce (fn [val fn] (fn val)) 100 [functions ...])`</text>
  </message>
  <message>
    <ts>2017-06-23T10:37:58.564572</ts>
    <user>U066DVDM5</user>
    <text>&amp;gt; your parents are off</text>
  </message>
  <message>
    <ts>2017-06-23T10:38:04.567005</ts>
    <user>U066DVDM5</user>
    <text>:joy:</text>
  </message>
  <message>
    <ts>2017-06-23T10:38:09.568692</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U4SKJCP3K&gt; &lt;https://clojure.org/about/functional_programming#_recursive_looping&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T10:38:13.570298</ts>
    <user>U11BV7MTK</user>
    <text>haha</text>
  </message>
  <message>
    <ts>2017-06-23T10:38:26.575136</ts>
    <user>U4TQP3FDE</user>
    <text>that works beautifully, thank you</text>
  </message>
  <message>
    <ts>2017-06-23T10:38:27.575655</ts>
    <user>U066DVDM5</user>
    <text>that's some deep stuff</text>
  </message>
  <message>
    <ts>2017-06-23T10:38:40.580428</ts>
    <user>U1LCB75M2</user>
    <text>&amp;gt; Since Clojure uses the Java calling conventions, it cannot, and does not, make the same tail call optimization guarantees. Instead, it provides the recur special operator, which does constant-space recursive looping</text>
  </message>
  <message>
    <ts>2017-06-23T10:38:41.580965</ts>
    <user>U11BV7MTK</user>
    <text>didn't mean to get so personal :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T10:39:00.588138</ts>
    <user>U4TQP3FDE</user>
    <text>oh, they are, trust me :wink:</text>
  </message>
  <message>
    <ts>2017-06-23T10:40:02.612441</ts>
    <user>U4SKJCP3K</user>
    <text>hcarvalhoaves: Awesome, that makes sense. Thank you Henrique.</text>
  </message>
  <message>
    <ts>2017-06-23T10:40:29.622642</ts>
    <user>U11BV7MTK</user>
    <text>`((apply comp [dec dec dec]) 100)`</text>
  </message>
  <message>
    <ts>2017-06-23T10:40:38.626091</ts>
    <user>U11BV7MTK</user>
    <text>you could also just apply compose</text>
  </message>
  <message>
    <ts>2017-06-23T10:40:54.632105</ts>
    <user>U11BV7MTK</user>
    <text>which is very much the mathematical definition of what you want to do. really conveys the intention</text>
  </message>
  <message>
    <ts>2017-06-23T10:41:03.635658</ts>
    <user>U11BV7MTK</user>
    <text>"compose these functions and apply them"</text>
  </message>
  <message>
    <ts>2017-06-23T10:48:27.811572</ts>
    <user>U4TQP3FDE</user>
    <text>ah, I like that solution</text>
  </message>
  <message>
    <ts>2017-06-23T12:37:54.357972</ts>
    <user>U051SS2EU</user>
    <text>dpsutton: a goofy version of this `((apply comp (repeat 3 dec)) 100)`</text>
  </message>
  <message>
    <ts>2017-06-23T12:38:24.368339</ts>
    <user>U11BV7MTK</user>
    <text>he wanted for arbitrary functions. the three `dec`s are just placeholders</text>
  </message>
  <message>
    <ts>2017-06-23T12:38:44.375240</ts>
    <user>U051SS2EU</user>
    <text>right, I called it goofy for a reason</text>
  </message>
  <message>
    <ts>2017-06-23T12:45:49.520793</ts>
    <user>U5MVBAJUU</user>
    <text>I'm curious how you all configure your web services? There seem to be a large number of libraries out there to do this. Is there one that is generally considered "the Clojure way"?</text>
  </message>
  <message>
    <ts>2017-06-23T13:11:07.049075</ts>
    <user>U050SC7SV</user>
    <text>juxt/aero is nice. Or just env vars (with or without environ)</text>
  </message>
  <message>
    <ts>2017-06-23T13:52:54.930141</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! Is anyone familiar with Datomic here?</text>
  </message>
  <message>
    <ts>2017-06-23T13:53:25.941017</ts>
    <user>U050ECB92</user>
    <text>there is dedicated &lt;#C03RZMDSH|datomic&gt; room &lt;@U5ZAJ15P0&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T13:53:45.948257</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U050ECB92&gt; oh sorry, I hadn't noticed. Thanks</text>
  </message>
  <message>
    <ts>2017-06-23T13:53:57.952814</ts>
    <user>U050ECB92</user>
    <text>np.  lots of helpful cognitect people seem to hang there</text>
  </message>
  <message>
    <ts>2017-06-23T14:17:14.455652</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U5MVBAJUU&gt; I usually see people pull config out of the environment ("12 factor"), a properties file, or (more rarely) an edn config. There is a commonly used library called `environ` that does this, but you could just use `System/getProperties` or `System/getenv` without needing a dependency. I feed certain values like an HTTP_PORT to my web server. I use immutant.web, which uses Undertow under the hood, but a lot of people use http-kit or Jetty. My web server knows how to serve a Ring handler (which is a spec for http handlers in the vein of Python's WSGI or Ruby's Rack), and I use a library for mapping http routes to handlers called compojure-api.</text>
  </message>
  <message>
    <ts>2017-06-23T14:19:56.512705</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U5MVBAJUU&gt; I usually suggest people take a look at Luminus (&lt;http://www.luminusweb.net/&gt;) which is a curated collection of libraries and docs until they form their own opinions on library choices.</text>
  </message>
  <message>
    <ts>2017-06-23T14:27:44.678502</ts>
    <user>U0AT6MBUL</user>
    <text>&lt;@U5MVBAJUU&gt; I don't know if there is a "Clojure way" but try cprop &lt;https://github.com/tolitius/cprop&gt;  or juxt/aero &lt;https://github.com/juxt/aero&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T15:07:27.510335</ts>
    <user>U5MVBAJUU</user>
    <text>Thanks dorab and bja!</text>
  </message>
  <message>
    <ts>2017-06-23T16:05:16.565325</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! I am having a little issue setting up Datomic Starter. I posted this message in &lt;#C03RZMDSH|datomic&gt; but I suspect it might be a more general clojure/jvm question. Here is the error I am getting: &lt;https://gist.github.com/hmaurer/b9d303055c7a9b7c4e4827b5b79e2acc&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T16:11:32.675754</ts>
    <user>U5MVBAJUU</user>
    <text>&lt;@U5ZAJ15P0&gt; I can't help you, but would you mind updating us with the solution when you find it?</text>
  </message>
  <message>
    <ts>2017-06-23T16:11:53.681799</ts>
    <user>U5MVBAJUU</user>
    <text>Also, I like to open these kinds of questions on StackOverflow and then answer them when I find a solution. Helps everyone!</text>
  </message>
  <message>
    <ts>2017-06-23T16:12:21.690594</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U5MVBAJUU&gt; sure thing, although I suspect it's an issue due to my own ignorance and not a problem with Datomic's tutorial</text>
  </message>
  <message>
    <ts>2017-06-23T16:12:37.695488</ts>
    <user>U5MVBAJUU</user>
    <text>Well, I'm also ignorant, so your answer will help me. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-23T16:13:05.703584</ts>
    <user>U5ZAJ15P0</user>
    <text>:smile:</text>
  </message>
  <message>
    <ts>2017-06-23T16:24:06.896748</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U5MVBAJUU&gt; it's odd, the jar doesn't seem to contain any "peer server"</text>
  </message>
  <message>
    <ts>2017-06-23T16:25:23.919221</ts>
    <user>U5MVBAJUU</user>
    <text>That *is* odd. It sounds like maybe you have an invalid installation or something.</text>
  </message>
  <message>
    <ts>2017-06-23T16:25:41.924230</ts>
    <user>U5MVBAJUU</user>
    <text>What version of Datomic did you download?</text>
  </message>
  <message>
    <ts>2017-06-23T16:27:15.951951</ts>
    <user>U5ZAJ15P0</user>
    <text>The latest one, but I also tried `0.9.5561` (the one mentioned in the "Getting Started" guide, and I downloaded an earlier version just to check they didn't rename the peer server</text>
  </message>
  <message>
    <ts>2017-06-23T16:29:56.998719</ts>
    <user>U5MVBAJUU</user>
    <text>Hm. I haven't messed with Datomic at all, but I'm planning on doing it soon. So... yeah... definitely let us know what you find, if you ever resolve it.</text>
  </message>
  <message>
    <ts>2017-06-23T16:31:42.030814</ts>
    <user>U5MVBAJUU</user>
    <text>What do Clojurists use to send emails? A bit of searching turned up this: &lt;https://clojars.org/org.clojars.sethtrain/postal&gt; Which looks nice and Clojurey, but it only has 250ish downloads...</text>
  </message>
  <message>
    <ts>2017-06-23T16:34:27.077715</ts>
    <user>U5MVBAJUU</user>
    <text>Ah... to answer my own question: &lt;https://clojars.org/com.draines/postal&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T16:34:45.082899</ts>
    <user>U5MVBAJUU</user>
    <text>That seems pretty popular... I wonder, is there a way to sort clojar search results by popularity?</text>
  </message>
  <message>
    <ts>2017-06-23T16:42:58.223568</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U5MVBAJUU&gt; I didn't realise there was  difference between "datomic free" and "datomic starter"</text>
  </message>
  <message>
    <ts>2017-06-23T16:42:59.223934</ts>
    <user>U5ZAJ15P0</user>
    <text>c.f. &lt;https://groups.google.com/forum/#!topic/datomic/P69c3q__5gw&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T16:43:06.225973</ts>
    <user>U5ZAJ15P0</user>
    <text>datomic free does not include the peer server</text>
  </message>
  <message>
    <ts>2017-06-23T16:45:52.273920</ts>
    <user>U5MVBAJUU</user>
    <text>Ah! I see. What's the point of "datomic free", I wonder?</text>
  </message>
  <message>
    <ts>2017-06-23T16:45:59.275924</ts>
    <user>U5MVBAJUU</user>
    <text>Thanks for posting the solution!</text>
  </message>
  <message>
    <ts>2017-06-23T16:46:57.292630</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U5MVBAJUU&gt; I have expanded on the topic in &lt;#C03RZMDSH|datomic&gt;</text>
  </message>
  <message>
    <ts>2017-06-23T16:47:05.294675</ts>
    <user>U5ZAJ15P0</user>
    <text>quoting this google group:</text>
  </message>
  <message>
    <ts>2017-06-23T16:47:06.295071</ts>
    <user>U5ZAJ15P0</user>
    <text>&amp;gt; The primary use case for Free is not new users, but rather people who need a license that includes redistribution rights.</text>
  </message>
  <message>
    <ts>2017-06-23T17:11:04.690229</ts>
    <user>U0F27GHT7</user>
    <text>I think `(-&amp;gt; 100 inc dec set-50 ...)` is the most idiomatic way to do this.</text>
  </message>
  <message>
    <ts>2017-06-23T17:14:15.736510</ts>
    <user>U1CTH1TUY</user>
    <text>`(fn [value fn-list] ((apply comp (reverse fn-list)) value))`</text>
  </message>
  <message>
    <ts>2017-06-23T17:14:54.745889</ts>
    <user>U11BV7MTK</user>
    <text>^ that's the one we settled on. i always forget the order of comp so i left off the reverse earlier</text>
  </message>
  <message>
    <ts>2017-06-23T18:37:36.754867</ts>
    <user>U2J7JRTDX</user>
    <text>dpsutton: Order is same as in math: 

```
((comp h g f)x)    ; =&amp;gt; h(g(f(x)))
```</text>
  </message>
  <message>
    <ts>2017-06-23T19:02:47.990164</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0F27GHT7&gt; the problem with `-&amp;gt;` is it isn't a function composition, it's a syntax. You can't pass it a list of functions.</text>
  </message>
  <message>
    <ts>2017-06-23T19:15:57.097810</ts>
    <user>U0F27GHT7</user>
    <text>Valid. I hadn't inferred that the list part was important. My bad!</text>
  </message>
  <message>
    <ts>2017-06-23T21:09:05.754395</ts>
    <user>U0BKWMG5B</user>
    <text>Does anyone happen to know of any decent OAuth2 client libraries? There's a lot around, but all the ones I've found are weirdly designed :confused:</text>
  </message>
  <message>
    <ts>2017-06-24T00:00:18.326916</ts>
    <user>U0S3YK6HK</user>
    <text>weavejester: The best I could find was clj-oauth</text>
  </message>
  <message>
    <ts>2017-06-24T00:25:44.405286</ts>
    <user>U3JURM9B6</user>
    <text>in clojure/match, can I do

[x &amp;amp; ys] // x matches first elem of vector, ys matches rest

or do I have to do

([x &amp;amp; ys] :seq) ?</text>
  </message>
  <message>
    <ts>2017-06-24T11:44:48.392503</ts>
    <user>U5JPZFFR6</user>
    <text>Hey friends</text>
  </message>
  <message>
    <ts>2017-06-24T11:45:08.393774</ts>
    <user>U5JPZFFR6</user>
    <text>Anyone have a good way to split a vector (of CLI args in my case) into pairs?</text>
  </message>
  <message>
    <ts>2017-06-24T11:45:55.396987</ts>
    <user>U5JPZFFR6</user>
    <text>I have e.g. `-m 4 -y 2016` and want to end up with `[["-m" 4] ["-y" 2016]]` or maybe a map</text>
  </message>
  <message>
    <ts>2017-06-24T11:46:43.400463</ts>
    <user>U5Z4ECHCM</user>
    <text>I believe you may be looking for `zip`</text>
  </message>
  <message>
    <ts>2017-06-24T11:48:55.409117</ts>
    <user>U5Z4ECHCM</user>
    <text>Alternatively, `(partition 2 ["-m" "4" "-y" "2016"]) =&amp;gt; (("-m" "4") ("-y" "2016"))`</text>
  </message>
  <message>
    <ts>2017-06-24T11:49:22.410927</ts>
    <user>U5JPZFFR6</user>
    <text>hm tbh I don't get what zippers do from reading the docs lol</text>
  </message>
  <message>
    <ts>2017-06-24T11:49:30.411437</ts>
    <user>U5JPZFFR6</user>
    <text>*feels dumb*</text>
  </message>
  <message>
    <ts>2017-06-24T11:49:52.412923</ts>
    <user>U5Z4ECHCM</user>
    <text>I've not used zip in Clojure at this point, but in my experience zip functions pair 2 values together</text>
  </message>
  <message>
    <ts>2017-06-24T11:50:32.415951</ts>
    <user>U5JPZFFR6</user>
    <text>ah like zipmap?</text>
  </message>
  <message>
    <ts>2017-06-24T11:50:45.416867</ts>
    <user>U5Z4ECHCM</user>
    <text>But I think it's more often something like `'(1 2 3) '(4 5 6) =&amp;gt; (1 4) (2 5) (3 6)`</text>
  </message>
  <message>
    <ts>2017-06-24T11:51:02.417974</ts>
    <user>U5JPZFFR6</user>
    <text>oh yea I remember that one. I think that's the reverse operation. let me try the partition.</text>
  </message>
  <message>
    <ts>2017-06-24T11:51:56.421533</ts>
    <user>U5JPZFFR6</user>
    <text>your partition example does exactly what I want</text>
  </message>
  <message>
    <ts>2017-06-24T11:51:58.421591</ts>
    <user>U5JPZFFR6</user>
    <text>thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-24T11:52:33.423779</ts>
    <user>U051SS2EU</user>
    <text>clojure has "zippers" which are an abstraction for navigating complex nested structures, and zipmap which creates a hash-map out of a collection of keys and a collection of values</text>
  </message>
  <message>
    <ts>2017-06-24T11:54:12.430114</ts>
    <user>U0HG4EHMH</user>
    <text>zippers are for driving a turtle around a nested structure, optionally editing it along the way. so for example xml-zip gives you a zipper that can walk through the data structure returned by clojure.xml/parse.  you can go next-next-next, or at any node you can ask what are all the parent/ancestor nodes, etc.</text>
  </message>
  <message>
    <ts>2017-06-24T11:54:46.432428</ts>
    <user>U5JPZFFR6</user>
    <text>I see. That sounds way more complex than my program :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-24T11:54:51.432739</ts>
    <user>U5JPZFFR6</user>
    <text>One day :wink:</text>
  </message>
  <message>
    <ts>2017-06-24T11:55:52.437075</ts>
    <user>U0HG4EHMH</user>
    <text>ok. don't forget clojure.tools.cli.</text>
  </message>
  <message>
    <ts>2017-06-24T11:57:35.444150</ts>
    <user>U5JPZFFR6</user>
    <text>Thanks, I'll check it out. This is more to teach myself a few things anyway, and it seems like partitioning a vector sounds like a useful thing to know.</text>
  </message>
  <message>
    <ts>2017-06-24T12:20:06.539768</ts>
    <user>U0J9LVB6G</user>
    <text>The `zip` function found in other langs isn't in clojure. You just use `map`.</text>
  </message>
  <message>
    <ts>2017-06-24T13:30:09.817078</ts>
    <user>U064X3EF3</user>
    <text>Use zipmap</text>
  </message>
  <message>
    <ts>2017-06-24T13:32:30.826200</ts>
    <user>U5Z3EPTPW</user>
    <text>Is this a good place for a total noob to learn or should i check elsewhere?</text>
  </message>
  <message>
    <ts>2017-06-24T13:44:49.871299</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5Z3EPTPW&gt; there's a &lt;#C053AK3F9|beginners&gt; channel</text>
  </message>
  <message>
    <ts>2017-06-24T15:21:12.216806</ts>
    <user>U5WAJK60M</user>
    <text>Hey guys, trying to setup a connection pool with c3p0. It seems to have trouble connecting to the production database using ssl (heroku, needs sslmode=require). I've tried
```
(.setJdbcUrl my-datasource (format "jdbc:%s:%s?sslmode=require" (:subprotocol dbspec) (:subname dbspec)))
```
and
```
(.setProperties my-datasource
                (doto (java.util.Properties.)
                  [...]
                  (.setProperty "sslmode" "require")))
```

C3p0 doesn't seem to pick this up, I keep getting `SQLException: Connections could not be acquired from the underlying database!`. Getting a connection for the db-url string with the sslmode query-params does indeed work. Has anyone else experienced this?</text>
  </message>
  <message>
    <ts>2017-06-24T15:25:25.230812</ts>
    <user>U5WAJK60M</user>
    <text>where `my-datasource` an instance is of `om.mchange.v2.c3p0.ComboPooledDataSource`</text>
  </message>
  <message>
    <ts>2017-06-24T15:34:48.262667</ts>
    <user>U5WAJK60M</user>
    <text>Update: just tried with apache's `DBCP2`, and that seems to pick the sslmode just fine. Is there an issue with c3p0 I'm not aware of?</text>
  </message>
  <message>
    <ts>2017-06-24T15:54:26.327012</ts>
    <user>U0524F6MV</user>
    <text>You might also try HikariCP for pooling, it's rock solid. &lt;https://github.com/brettwooldridge/HikariCP&gt;</text>
  </message>
  <message>
    <ts>2017-06-24T16:14:31.394268</ts>
    <user>U5WAJK60M</user>
    <text>Thanks &lt;@U0524F6MV&gt;. Already looked at it, looks great indeed :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-25T07:44:07.604446</ts>
    <user>U28TJ0DDZ</user>
    <text>does any one knows how should i use fast-resource or even resource to server some static files on pedestal  ? how should the route be like ?</text>
  </message>
  <message>
    <ts>2017-06-25T09:46:01.930439</ts>
    <user>U06MTLC5R</user>
    <text>Hey fellow Clojurians, I'm looking for a lein plugin that can deploy binaries directly to github releases (similar to &lt;https://github.com/aktau/github-release&gt;) any ideas?</text>
  </message>
  <message>
    <ts>2017-06-25T09:47:48.935771</ts>
    <user>U06MTLC5R</user>
    <text>Done see any at &lt;https://github.com/technomancy/leiningen/wiki/Plugins&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T09:47:53.936023</ts>
    <user>U06MTLC5R</user>
    <text>Dont*</text>
  </message>
  <message>
    <ts>2017-06-25T11:56:50.347014</ts>
    <user>U051SS2EU</user>
    <text>seems like something you could do with `lein shell` if it doesn't need to be cross platform &lt;https://github.com/hyPiRion/lein-shell&gt;</text>
  </message>
  <message>
    <ts>2017-06-25T18:08:19.650461</ts>
    <user>U0C3SLTHP</user>
    <text>guys, I'm struggling to make my own flat tail call, can you guys give me some enlightenment ? 

```
(defn flat
  [[h &amp;amp; t :as list]]
  (cond
    (empty? list) nil
    (sequential? h) (concat (flat h) (flat t))
    :else (cons h (flat t))))
```</text>
  </message>
  <message>
    <ts>2017-06-25T18:10:32.657464</ts>
    <user>U051SS2EU</user>
    <text>are you aware that clojure never optimizes tail calls?</text>
  </message>
  <message>
    <ts>2017-06-25T18:13:15.666078</ts>
    <user>U051SS2EU</user>
    <text>generally with list processing, you don't want to use recur (which acts like an optimized tail self call) but instead make a lazy-seq, which works with your current code if you wrap the else `(lazy-seq (cons h (flat t)))`</text>
  </message>
  <message>
    <ts>2017-06-25T18:23:39.698436</ts>
    <user>U0C3SLTHP</user>
    <text>&amp;gt; are you aware that clojure never optimizes tail calls?
yeah, but the loop-recur ( looks like uses go-to ) can help me with that, isn't ?</text>
  </message>
  <message>
    <ts>2017-06-25T18:24:47.701686</ts>
    <user>U051SS2EU</user>
    <text>you could use recur, but that tends to be clumsy for sequences</text>
  </message>
  <message>
    <ts>2017-06-25T18:24:56.702065</ts>
    <user>U0C3SLTHP</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-06-25T18:25:03.702430</ts>
    <user>U051SS2EU</user>
    <text>especially with a function that has a tree call structure</text>
  </message>
  <message>
    <ts>2017-06-25T18:27:23.709882</ts>
    <user>U0C3SLTHP</user>
    <text>what you mean by tree call structure ?</text>
  </message>
  <message>
    <ts>2017-06-25T18:40:09.750922</ts>
    <user>U051SS2EU</user>
    <text>every call leads to 0 or more self-calls</text>
  </message>
  <message>
    <ts>2017-06-25T18:40:31.752116</ts>
    <user>U051SS2EU</user>
    <text>as opposed to 0 or 1, which is linear, 0 or more means you end up with a tree of calls</text>
  </message>
  <message>
    <ts>2017-06-25T18:41:22.754746</ts>
    <user>U051SS2EU</user>
    <text>and a linear series of calls is neccesary for tail call  -you can't have two tail calls</text>
  </message>
  <message>
    <ts>2017-06-25T18:42:07.757114</ts>
    <user>U051SS2EU</user>
    <text>you can force it by adding a state accumulator which makes the code more complex and moves data out of the stack and into the heap</text>
  </message>
  <message>
    <ts>2017-06-25T18:42:53.759486</ts>
    <user>U0C3SLTHP</user>
    <text>I see</text>
  </message>
  <message>
    <ts>2017-06-25T18:42:55.759585</ts>
    <user>U0C3SLTHP</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-06-25T18:43:29.761273</ts>
    <user>U0C3SLTHP</user>
    <text>correct me if I'm wrong, but all tail call function they have some kind of accumulator, isn't ?</text>
  </message>
  <message>
    <ts>2017-06-25T18:44:18.763796</ts>
    <user>U051SS2EU</user>
    <text>not always - but it's very common</text>
  </message>
  <message>
    <ts>2017-06-25T18:44:57.765487</ts>
    <user>U051SS2EU</user>
    <text>actually I think a tail call function with no accumulator would be pretty weird</text>
  </message>
  <message>
    <ts>2017-06-25T18:45:16.766590</ts>
    <user>U0C3SLTHP</user>
    <text>i can't see</text>
  </message>
  <message>
    <ts>2017-06-25T18:45:21.766851</ts>
    <user>U051SS2EU</user>
    <text>but I could see it for eg. something that repeatedly accesses a resource and eventually returns a result</text>
  </message>
  <message>
    <ts>2017-06-25T18:45:22.766896</ts>
    <user>U0C3SLTHP</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-06-25T18:47:36.773864</ts>
    <user>U0C3SLTHP</user>
    <text>clojure is not lazy by default, like haskell right, how the lazy works on clojure , `(lazy-seq (cons h (flat t)))`</text>
  </message>
  <message>
    <ts>2017-06-25T18:47:53.774631</ts>
    <user>U051SS2EU</user>
    <text>right - but many functions are lazy</text>
  </message>
  <message>
    <ts>2017-06-25T18:47:54.774687</ts>
    <user>U5Z4ECHCM</user>
    <text>Lazy is only there when you don't want it to be &amp;gt;.&amp;gt;</text>
  </message>
  <message>
    <ts>2017-06-25T18:47:55.774744</ts>
    <user>U051SS2EU</user>
    <text>including concat</text>
  </message>
  <message>
    <ts>2017-06-25T18:48:07.775312</ts>
    <user>U5Z4ECHCM</user>
    <text>&amp;gt; trying to print something
&amp;gt; LAZY SEQ HELLO</text>
  </message>
  <message>
    <ts>2017-06-25T18:48:43.777040</ts>
    <user>U051SS2EU</user>
    <text>that's only if you call str - just printing won't do that</text>
  </message>
  <message>
    <ts>2017-06-25T18:49:28.779172</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (str (map inc (range 10)))
"clojure.lang.LazySeq@c5d38b66"
+user=&amp;gt; (println (map inc (range 10)))
(1 2 3 4 5 6 7 8 9 10)
nil
```</text>
  </message>
  <message>
    <ts>2017-06-25T18:51:36.785811</ts>
    <user>U051SS2EU</user>
    <text>and if you need to build up a string, `pr-str` will help ```user=&amp;gt; (str "fixed: " (pr-str (map inc (range 10))))
"fixed: (1 2 3 4 5 6 7 8 9 10)"
```</text>
  </message>
  <message>
    <ts>2017-06-25T18:51:56.786882</ts>
    <user>U5Z4ECHCM</user>
    <text>Well how-about-that</text>
  </message>
  <message>
    <ts>2017-06-25T18:52:08.787488</ts>
    <user>U5Z4ECHCM</user>
    <text>learn something every day</text>
  </message>
  <message>
    <ts>2017-06-26T03:53:45.879593</ts>
    <user>U5YHX0TQV</user>
    <text>yada seem to have implemented something themselves &lt;https://github.com/juxt/yada/blob/master/ext/oauth2/src/yada/oauth.clj&gt;. Maybe its time we see a new repository appearing under your github account :wink:</text>
  </message>
  <message>
    <ts>2017-06-26T04:27:33.319506</ts>
    <user>U2PGHFU5U</user>
    <text>Does anyone know how to store state in one instance of a simulation in `clj-gatling`?

/edit Answer from the docs:

&lt;http://i.imgur.com/SISAxzT.png&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T04:33:49.407103</ts>
    <user>U2PGHFU5U</user>
    <text>Hmm looks like the `context` is passed along in every step. Hopefully I can just assoc.</text>
  </message>
  <message>
    <ts>2017-06-26T04:53:30.676430</ts>
    <user>U2PGHFU5U</user>
    <text>That's not it. `assoc`ing to that context is not persistent</text>
  </message>
  <message>
    <ts>2017-06-26T04:59:48.763961</ts>
    <user>U2PGHFU5U</user>
    <text>over steps</text>
  </message>
  <message>
    <ts>2017-06-26T05:00:12.771206</ts>
    <user>U2PGHFU5U</user>
    <text>One solution is to keep a separate database, but it is not very clean</text>
  </message>
  <message>
    <ts>2017-06-26T05:20:33.062386</ts>
    <user>U2PGHFU5U</user>
    <text>Aaah you can send the context forward</text>
  </message>
  <message>
    <ts>2017-06-26T05:20:41.064104</ts>
    <user>U2PGHFU5U</user>
    <text>Return `[result context]`</text>
  </message>
  <message>
    <ts>2017-06-26T05:31:28.217242</ts>
    <user>U2PGHFU5U</user>
    <text>Next question: in `clj-gatling` my response times are way longer than they actually are. It seems like it is not only counting the time my request takes, but also the time it takes to run on my computer. Is there a way to fix this?</text>
  </message>
  <message>
    <ts>2017-06-26T06:37:00.075309</ts>
    <user>U2PGHFU5U</user>
    <text>When I time the request

```
(defn login-request [ctx]
  (go
    (time (let [{:keys [status] :as res} @(http/get "&lt;https://www.google.com&gt;"
                                                    {:headers {"Accept" "text/html"}})]
            [(= status 200) (assoc ctx :state "state")]))))
```

It prints "Elapsed time: 200ms".

But the end result in the Gatling reports states it lasts longer than 1200ms.</text>
  </message>
  <message>
    <ts>2017-06-26T06:55:17.287582</ts>
    <user>U5YHX0TQV</user>
    <text>why is it wrapped in a go block? Is clj-gatling designed around this</text>
  </message>
  <message>
    <ts>2017-06-26T06:55:38.291747</ts>
    <user>U5YHX0TQV</user>
    <text>cause you're doing a blocking call with @?</text>
  </message>
  <message>
    <ts>2017-06-26T07:55:16.971576</ts>
    <user>U2PGHFU5U</user>
    <text>Well spotted</text>
  </message>
  <message>
    <ts>2017-06-26T07:56:13.983266</ts>
    <user>U2PGHFU5U</user>
    <text>If I don't wrap it in a go-block the same problem occurs</text>
  </message>
  <message>
    <ts>2017-06-26T08:09:58.163422</ts>
    <user>U2PGHFU5U</user>
    <text>I think if I use ```(defn- http-get [url _]
  (let [response (chan)
        check-status (fn [{:keys [status]}]
                       (go (&amp;gt;! response (= 200 status))))]
    (http/get (str base-url url) {} check-status)
response))``` like in the example things will work.</text>
  </message>
  <message>
    <ts>2017-06-26T08:15:37.237682</ts>
    <user>U2PGHFU5U</user>
    <text>&lt;https://github.com/mhjort/clj-gatling-example/blob/master/src/clj_gatling_example/simulations.clj&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T10:04:49.271350</ts>
    <user>U2PGHFU5U</user>
    <text>Okay not using a go block works!</text>
  </message>
  <message>
    <ts>2017-06-26T10:05:16.282087</ts>
    <user>U2PGHFU5U</user>
    <text>This works:
```
(defn login-request [ctx]
  (let [check-result (fn [{:keys [status]}] (= status 200))]
    (http/get "&lt;https://www.google.nl&gt;"
              {:headers {"Accept" "text/html"}}
              check-result)))
```

No problem :slightly_smiling_face:

Up to 4000 users</text>
  </message>
  <message>
    <ts>2017-06-26T10:32:18.943465</ts>
    <user>U170T0Y3H</user>
    <text>How can I refer to a var inside ns1 when the macro defined in ns1 is called from ns2?
```
(ns ns1)

(defn a-fn* [] "hello")

(defmacro a-marco []
  `(defn a-fn [] (a-fn*)))

(ns ns2)

(ns1/a-marco) ;=&amp;gt; Can't refer to qualified var that doesn't exist
```</text>
  </message>
  <message>
    <ts>2017-06-26T10:36:43.054933</ts>
    <user>U060FKQPN</user>
    <text>that's going to work</text>
  </message>
  <message>
    <ts>2017-06-26T10:36:57.060744</ts>
    <user>U060FKQPN</user>
    <text>I don't believe you see that error message on a fresh repl, you must have some stale state</text>
  </message>
  <message>
    <ts>2017-06-26T10:37:25.072629</ts>
    <user>U060FKQPN</user>
    <text>also that macro is slightly wrong, should be ```
(defmacro a-macro [] `(defn ~'a-fn [] (a-fn*)))```</text>
  </message>
  <message>
    <ts>2017-06-26T10:37:35.076826</ts>
    <user>U060FKQPN</user>
    <text>needless to say macros like that are discouraged in clojure</text>
  </message>
  <message>
    <ts>2017-06-26T10:41:41.177801</ts>
    <user>U0JFCEH9P</user>
    <text>I'm playing with an event sourcing/CQRS style system in Clojure. It involves some number of load-balanced app servers. My idea is to have local in-memory caches, and then "catch up" by applying pending events before any read operations.</text>
  </message>
  <message>
    <ts>2017-06-26T10:42:03.187093</ts>
    <user>U0JFCEH9P</user>
    <text>I'm trying to avoid having any extra pieces like a message queue</text>
  </message>
  <message>
    <ts>2017-06-26T10:42:26.196580</ts>
    <user>U0JFCEH9P</user>
    <text>does that seem sane?</text>
  </message>
  <message>
    <ts>2017-06-26T10:43:55.233575</ts>
    <user>U170T0Y3H</user>
    <text>&lt;@U060FKQPN&gt; It worked, with the unquote-quote. But now I'm pretty discouraged.</text>
  </message>
  <message>
    <ts>2017-06-26T10:44:56.259010</ts>
    <user>U060FKQPN</user>
    <text>generally, macros that inject global names into a namespace are not idiomatic in clojure</text>
  </message>
  <message>
    <ts>2017-06-26T10:45:47.281022</ts>
    <user>U060FKQPN</user>
    <text>a slightly better version would be e.g. ``` (defmacro a-macro [name] `(defn ~name [] (a-fn*)))``` but still, this doesn't look like a very useful macro</text>
  </message>
  <message>
    <ts>2017-06-26T10:46:17.293664</ts>
    <user>U5UP845LY</user>
    <text>they have their uses, probably finding out what is the goal is a step to take before judging something as not idiomatic</text>
  </message>
  <message>
    <ts>2017-06-26T10:46:18.294149</ts>
    <user>U060FKQPN</user>
    <text>why would you intern a var in a namespace that just delegates to a var in another? just refer that one directly</text>
  </message>
  <message>
    <ts>2017-06-26T10:47:40.328759</ts>
    <user>U060FKQPN</user>
    <text>coming off as judgmental was not my intention, if that's how it came across</text>
  </message>
  <message>
    <ts>2017-06-26T10:47:52.333925</ts>
    <user>U5XMV6DQT</user>
    <text>```
#'ns1/a-marco
```</text>
  </message>
  <message>
    <ts>2017-06-26T10:48:48.358112</ts>
    <user>U170T0Y3H</user>
    <text>delegating is part of if, passing some variables, but not all is the other half (something like partial, but on macro level)</text>
  </message>
  <message>
    <ts>2017-06-26T10:51:07.418617</ts>
    <user>U170T0Y3H</user>
    <text>I couldn't use `partial` because what's passed might be an atom that needs to be derefed later.</text>
  </message>
  <message>
    <ts>2017-06-26T10:52:36.455802</ts>
    <user>U170T0Y3H</user>
    <text>Needless to say my example was stripped down to the bare minimum to illustrate the problem I was having. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T12:10:47.457461</ts>
    <user>U09LZR36F</user>
    <text>Wondering what people do for translations in their application? The key based stuff puts me off (&lt;https://translation.io/blog/gettext-is-better-than-rails-i18n&gt;), and I'd like to use industry-accepted systems (PO, XLIFF, MessageFormat). Doing this for cljs &amp;amp; clj.</text>
  </message>
  <message>
    <ts>2017-06-26T12:41:14.155794</ts>
    <user>U0NBGRGD6</user>
    <text>How can I extend a type, like `java.util.HashMap` to support `conj`. Which is the protocol for that?</text>
  </message>
  <message>
    <ts>2017-06-26T12:42:57.193644</ts>
    <user>U060FKQPN</user>
    <text>you can't in clojure</text>
  </message>
  <message>
    <ts>2017-06-26T12:43:15.200372</ts>
    <user>U060FKQPN</user>
    <text>clojure implements its basic operations in terms of interfaces not protocols</text>
  </message>
  <message>
    <ts>2017-06-26T12:45:16.245515</ts>
    <user>U11BV7MTK</user>
    <text>here's how it was done in the priority-map &lt;https://github.com/clojure/data.priority-map/blob/master/src/main/clojure/clojure/data/priority_map.clj#L255&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T12:46:38.276180</ts>
    <user>U060FKQPN</user>
    <text>right, you can do that if you're in control of new types but it's simply not possible to retrofit on existing types like `java.util.HashMap`</text>
  </message>
  <message>
    <ts>2017-06-26T12:47:25.294177</ts>
    <user>U060FKQPN</user>
    <text>(and even it it could be possible, `conj` is defined as an operation on persistent colls, so on mutable ones it would be breaking its contract)</text>
  </message>
  <message>
    <ts>2017-06-26T12:49:32.342841</ts>
    <user>U0NBGRGD6</user>
    <text>okay, so If I want to wrap something, for example `Array[ResultSet]` to vector of map. I can't just extend-type, I should iterate it.</text>
  </message>
  <message>
    <ts>2017-06-26T12:49:44.347725</ts>
    <user>U0NBGRGD6</user>
    <text>thanks for help!</text>
  </message>
  <message>
    <ts>2017-06-26T13:23:10.098995</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0NBGRGD6&gt; you could define a multimethod which is identity for vector of hashmap, but uses `into` to populate clojure datatypes if it gets arrays and java.util.HashMap</text>
  </message>
  <message>
    <ts>2017-06-26T14:03:39.028593</ts>
    <user>U5NAUMCAD</user>
    <text>Hi all, I am trying to load a keystore file in clojure:</text>
  </message>
  <message>
    <ts>2017-06-26T14:03:48.031994</ts>
    <user>U5NAUMCAD</user>
    <text>(let [a (try (java.io.FileInputStream. keyObjectFile)
                  (catch Exception e (println (str "1caught exception: " (.getMessage e)))))]
          (println a)
          (try (.load keystore a)
            (catch Exception e (println (str "2caught exception: " (.getMessage e))))))</text>
  </message>
  <message>
    <ts>2017-06-26T14:04:04.038240</ts>
    <user>U5NAUMCAD</user>
    <text>but I am getting: java.io.FileInputStream cannot be cast to java.security.KeyStore$LoadStoreParameter</text>
  </message>
  <message>
    <ts>2017-06-26T14:04:17.043186</ts>
    <user>U0509NKGK</user>
    <text>&lt;@U5NAUMCAD&gt; 

```
(defn load-key-store [keystore-filename keystore-password]
  (with-open [is (&lt;http://clojure.java.io/input-stream|clojure.java.io/input-stream&gt; keystore-filename)]
    (doto (java.security.KeyStore/getInstance "JKS")
      (.load is (.toCharArray keystore-password)))))
```</text>
  </message>
  <message>
    <ts>2017-06-26T14:04:40.051918</ts>
    <user>U0509NKGK</user>
    <text>works great :+1:</text>
  </message>
  <message>
    <ts>2017-06-26T14:05:01.060110</ts>
    <user>U5NAUMCAD</user>
    <text>mm i do not have the keystore-password</text>
  </message>
  <message>
    <ts>2017-06-26T14:05:09.063062</ts>
    <user>U5NAUMCAD</user>
    <text>i need only the file</text>
  </message>
  <message>
    <ts>2017-06-26T14:05:56.082003</ts>
    <user>U0509NKGK</user>
    <text>check the javadoc of `java.security.KeyStore/getInstance` maybe there's a method that doesn't need a password?</text>
  </message>
  <message>
    <ts>2017-06-26T14:07:09.109603</ts>
    <user>U5NAUMCAD</user>
    <text>actually, the load does not need a password</text>
  </message>
  <message>
    <ts>2017-06-26T14:07:18.113138</ts>
    <user>U0JFCEH9P</user>
    <text>the password can be null i.e. nil</text>
  </message>
  <message>
    <ts>2017-06-26T14:13:21.248210</ts>
    <user>U5NAUMCAD</user>
    <text>can I set something like:</text>
  </message>
  <message>
    <ts>2017-06-26T14:13:29.251309</ts>
    <user>U5NAUMCAD</user>
    <text>```(defn load-key-store [keystore-filename]
  (with-open [is (&lt;http://clojure.java.io/input-stream|clojure.java.io/input-stream&gt; keystore-filename)]
    (doto (java.security.KeyStore/getInstance "JKS")
      (.load nil))))```</text>
  </message>
  <message>
    <ts>2017-06-26T14:13:32.252511</ts>
    <user>U5NAUMCAD</user>
    <text>????</text>
  </message>
  <message>
    <ts>2017-06-26T14:13:36.253801</ts>
    <user>U0JFCEH9P</user>
    <text>sure</text>
  </message>
  <message>
    <ts>2017-06-26T14:14:02.263183</ts>
    <user>U0JFCEH9P</user>
    <text>or you could use the `defn` from above and just call `(load-key-store filename nil)`</text>
  </message>
  <message>
    <ts>2017-06-26T14:14:24.271032</ts>
    <user>U0JFCEH9P</user>
    <text>then you won't have to change it when you *do* have a password on the keystore</text>
  </message>
  <message>
    <ts>2017-06-26T14:14:55.282488</ts>
    <user>U5NAUMCAD</user>
    <text>ok perfect I am gonna try and let you know what happens!!!</text>
  </message>
  <message>
    <ts>2017-06-26T14:45:34.977682</ts>
    <user>U5NAUMCAD</user>
    <text>mmm now I have a problem when I put in the jetty configuration the Keystore object it send me this error in the browser</text>
  </message>
  <message>
    <ts>2017-06-26T14:45:46.982239</ts>
    <user>U5NAUMCAD</user>
    <text>SSL_ERROR_NO_CYPHER_OVERLAP</text>
  </message>
  <message>
    <ts>2017-06-26T14:46:05.989191</ts>
    <user>U5NAUMCAD</user>
    <text>in jetty I put</text>
  </message>
  <message>
    <ts>2017-06-26T14:46:19.994411</ts>
    <user>U5NAUMCAD</user>
    <text>``` :keystore (load-key-store "filename") ```</text>
  </message>
  <message>
    <ts>2017-06-26T14:47:25.018635</ts>
    <user>U5NAUMCAD</user>
    <text>and send me that message; but if I put the path it works,.</text>
  </message>
  <message>
    <ts>2017-06-26T14:47:43.025443</ts>
    <user>U5NAUMCAD</user>
    <text>``` :keystore "path to file" ```</text>
  </message>
  <message>
    <ts>2017-06-26T14:48:24.040493</ts>
    <user>U5NAUMCAD</user>
    <text>any idea why this is happening?</text>
  </message>
  <message>
    <ts>2017-06-26T14:48:33.043915</ts>
    <user>U5NAUMCAD</user>
    <text>:cold_sweat:</text>
  </message>
  <message>
    <ts>2017-06-26T14:53:02.144206</ts>
    <user>U0NCTKEV8</user>
    <text>it means the ssl server and your browser are unable to agree on a cipher suite</text>
  </message>
  <message>
    <ts>2017-06-26T14:53:19.150571</ts>
    <user>U0NCTKEV8</user>
    <text>which is likely due to using an out dated version of either</text>
  </message>
  <message>
    <ts>2017-06-26T15:27:27.891609</ts>
    <user>U0JFCEH9P</user>
    <text>BTW I would strong recommend *against* doing SSL termination in Jetty</text>
  </message>
  <message>
    <ts>2017-06-26T15:27:50.899653</ts>
    <user>U0JFCEH9P</user>
    <text>it's much better to do it with a reverse-proxying load balancer</text>
  </message>
  <message>
    <ts>2017-06-26T15:28:20.909893</ts>
    <user>U0JFCEH9P</user>
    <text>e.g. NGINX or an ELB in AWS</text>
  </message>
  <message>
    <ts>2017-06-26T15:37:45.103938</ts>
    <user>U0JFCEH9P</user>
    <text>you can do SSL termination in Jetty just fine but it just doesn't seem worth the effort when other tools do it better</text>
  </message>
  <message>
    <ts>2017-06-26T15:38:11.112164</ts>
    <user>U0JFCEH9P</user>
    <text>if you really really really need one host to serve up HTTPS from a single Java process, then sure</text>
  </message>
  <message>
    <ts>2017-06-26T15:38:24.116869</ts>
    <user>U0JFCEH9P</user>
    <text>otherwise you're probably already deploying your app behind something that can do SSL termination</text>
  </message>
  <message>
    <ts>2017-06-26T15:38:38.121674</ts>
    <user>U0JFCEH9P</user>
    <text>or you should be</text>
  </message>
  <message>
    <ts>2017-06-26T15:38:52.126196</ts>
    <user>U0JFCEH9P</user>
    <text>sorry, &lt;#C03RZGPG3|off-topic&gt; and uninvited advice</text>
  </message>
  <message>
    <ts>2017-06-26T15:39:49.145126</ts>
    <user>U0JFCEH9P</user>
    <text>but if you're developing a web app in Clojure, trying to set up SSL in Jetty is probably pretty orthogonal to the real problems you're trying to solve</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:18.337770</ts>
    <user>U5NAUMCAD</user>
    <text>yeap!!! actually jetty is working well for what I need!!!</text>
  </message>
  <message>
    <ts>2017-06-26T15:49:50.348506</ts>
    <user>U5NAUMCAD</user>
    <text>maybe there are other complex things which are not supported or they are better with other server!</text>
  </message>
  <message>
    <ts>2017-06-26T15:50:52.369775</ts>
    <user>U0JFCEH9P</user>
    <text>it's more about *not* doing it</text>
  </message>
  <message>
    <ts>2017-06-26T15:50:56.371281</ts>
    <user>U0JFCEH9P</user>
    <text>when you don't have to</text>
  </message>
  <message>
    <ts>2017-06-26T16:14:16.864418</ts>
    <user>U5Z4ECHCM</user>
    <text>So what resources exist for learning deployment? My app is Clojurescript with a Clojure REST api, I have a dedicated "server dude" but I don't know that he'll know what to do with me. I'm assuming for Clojurescript I'd just NGINX-up the html and js file that makes the app go round, and for clojure I guess I could just run my Compojure rest api, but that leaves the question of how tf do I load balance that and etc.

I have a ton of questions about this, so if anyone has a clojure/script deployment bible, smack me with it</text>
  </message>
  <message>
    <ts>2017-06-26T16:17:21.928879</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U5Z4ECHCM&gt; I think the answer is "the same way you'd do any JS / JVM combination web app" really — load balancing etc, and most of the deployment considerations, aren't Clojure-specific. I know that doesn't help but…</text>
  </message>
  <message>
    <ts>2017-06-26T16:19:03.963067</ts>
    <user>U0JFCEH9P</user>
    <text>&lt;@U5Z4ECHCM&gt; your Compojure rest API should be able to serve the HTML and compiled cljs</text>
  </message>
  <message>
    <ts>2017-06-26T16:19:12.966140</ts>
    <user>U04V70XH6</user>
    <text>I can tell you what we do at World Singles: we host the HTML and JS on S3 and serve that up through Amazon (using their CDN, DNS, etc) and the Clojure code gets wrapped up as uber JAR files and deployed to a bunch of servers and spun up with `java -jar` via scripts/services, and proxied via Apache, and F5 load balancers etc.</text>
  </message>
  <message>
    <ts>2017-06-26T16:20:00.982691</ts>
    <user>U04V70XH6</user>
    <text>We have a separate deployment chain for front and back end components — since they are actively developed on different schedules, by different teams.</text>
  </message>
  <message>
    <ts>2017-06-26T16:20:48.999786</ts>
    <user>U0JFCEH9P</user>
    <text>ah, my client/server (i.e. cljs/clj) code is all in one uberjar</text>
  </message>
  <message>
    <ts>2017-06-26T16:30:37.206014</ts>
    <user>U5Z4ECHCM</user>
    <text>&lt;@U0JFCEH9P&gt; some of us don't have the same kinda foresight lmao</text>
  </message>
  <message>
    <ts>2017-06-26T16:30:54.212210</ts>
    <user>U5Z4ECHCM</user>
    <text>Developing one project, oh - let's make a rest api, oh, now they're both gigantic</text>
  </message>
  <message>
    <ts>2017-06-26T16:31:01.214519</ts>
    <user>U5Z4ECHCM</user>
    <text>and here we are</text>
  </message>
  <message>
    <ts>2017-06-26T16:39:31.392284</ts>
    <user>U0JFCEH9P</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T16:39:41.396055</ts>
    <user>U0JFCEH9P</user>
    <text>every project starts out fresh and beautiful, and then reality hits</text>
  </message>
  <message>
    <ts>2017-06-26T16:40:21.409865</ts>
    <user>U0JFCEH9P</user>
    <text>At least it's not a Clojure uberjar that starts up Jetty with an embedded JRuby on Rails *and* Spring web app loaded from precompiled WAR files.</text>
  </message>
  <message>
    <ts>2017-06-26T16:40:48.418959</ts>
    <user>U0JFCEH9P</user>
    <text>where the Rails app calls the legacy Spring app to provide a REST API :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T16:41:27.432355</ts>
    <user>U0JFCEH9P</user>
    <text>and the Clojure code is creating DAO objects to be loaded by the Spring app via dependency injection</text>
  </message>
  <message>
    <ts>2017-06-26T16:41:30.433293</ts>
    <user>U0JFCEH9P</user>
    <text>all in one process!</text>
  </message>
  <message>
    <ts>2017-06-26T16:42:33.454745</ts>
    <user>U04V4HWQ4</user>
    <text>That sounds terrifyingly specific.</text>
  </message>
  <message>
    <ts>2017-06-26T16:42:49.460073</ts>
    <user>U0JFCEH9P</user>
    <text>I mean, just a hunch, but I think a project like that would be pretty crazy.</text>
  </message>
  <message>
    <ts>2017-06-26T16:46:57.544522</ts>
    <user>U0JFCEH9P</user>
    <text>it would be even *worse* if the Spring app only communicated via SOAP</text>
  </message>
  <message>
    <ts>2017-06-26T16:47:49.562686</ts>
    <user>U0DHHFEDP</user>
    <text>now i'm super curious to know explicitly if you've had to work on such a thing and how it came to be</text>
  </message>
  <message>
    <ts>2017-06-26T16:49:19.593778</ts>
    <user>U0JFCEH9P</user>
    <text>you should be :upside_down_parrot:</text>
  </message>
  <message>
    <ts>2017-06-26T16:49:46.603294</ts>
    <user>U0JFCEH9P</user>
    <text>I can make up more totally hypothetical aspects too</text>
  </message>
  <message>
    <ts>2017-06-26T16:50:15.613172</ts>
    <user>U0JFCEH9P</user>
    <text>like if you couldn't instantiate classes like (Foo.) but instead had to look them up by name every time, and the bulk of the code was interop requiring lots of this sort of thing</text>
  </message>
  <message>
    <ts>2017-06-26T16:50:31.618713</ts>
    <user>U0JFCEH9P</user>
    <text>or static method invocations</text>
  </message>
  <message>
    <ts>2017-06-26T16:50:38.620946</ts>
    <user>U0JFCEH9P</user>
    <text>without being able to do (Foo/bar)</text>
  </message>
  <message>
    <ts>2017-06-26T16:50:42.622473</ts>
    <user>U0JFCEH9P</user>
    <text>that would be silly</text>
  </message>
  <message>
    <ts>2017-06-26T16:54:44.706506</ts>
    <user>U0JFCEH9P</user>
    <text>in such a case, it would also be helpful to know how to get a Java enum value without being able to reference classes directly</text>
  </message>
  <message>
    <ts>2017-06-26T16:55:31.722891</ts>
    <user>U0JFCEH9P</user>
    <text>`(.invoke (.getMethod (get-class system class-name) "valueOf" (into-array Class [String])) nil (into-array String [value]))`</text>
  </message>
  <message>
    <ts>2017-06-26T16:55:55.731606</ts>
    <user>U0JFCEH9P</user>
    <text>for reference, just in case I or anybody else ever need that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-26T16:56:15.738634</ts>
    <user>U051SS2EU</user>
    <text>wow…</text>
  </message>
  <message>
    <ts>2017-06-26T16:56:43.748589</ts>
    <user>U0JFCEH9P</user>
    <text>classloader problems suck</text>
  </message>
  <message>
    <ts>2017-06-26T17:28:59.357645</ts>
    <user>U37NPE2H0</user>
    <text>is there any kind of string function that works with named parameters in a map?  like python's string formatting (3+)?</text>
  </message>
  <message>
    <ts>2017-06-26T17:29:46.371363</ts>
    <user>U37NPE2H0</user>
    <text>`(format "hello {:foo}" {:foo "world"})`</text>
  </message>
  <message>
    <ts>2017-06-26T17:29:52.373337</ts>
    <user>U37NPE2H0</user>
    <text>or something</text>
  </message>
  <message>
    <ts>2017-06-26T17:30:39.387927</ts>
    <user>U051SS2EU</user>
    <text>that's close to how selmer does templates &lt;https://github.com/yogthos/Selmer&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T17:30:49.390703</ts>
    <user>U0J9LVB6G</user>
    <text>Selmer is kind of like that &lt;https://github.com/yogthos/Selmer&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T17:30:58.393591</ts>
    <user>U0J9LVB6G</user>
    <text>Jinx</text>
  </message>
  <message>
    <ts>2017-06-26T17:31:11.397433</ts>
    <user>U37NPE2H0</user>
    <text>hahahaha, nice</text>
  </message>
  <message>
    <ts>2017-06-26T17:31:12.397600</ts>
    <user>U051SS2EU</user>
    <text>maybe we should call it `juxt`</text>
  </message>
  <message>
    <ts>2017-06-26T17:31:59.411566</ts>
    <user>U37NPE2H0</user>
    <text>lol, nobody is gonna be cool with me pulling in a whole template rendering library for the string parser</text>
  </message>
  <message>
    <ts>2017-06-26T17:34:58.461893</ts>
    <user>U051SS2EU</user>
    <text>I wonder if something similar could be hiding deep in `clojure.pprint/cl-format`</text>
  </message>
  <message>
    <ts>2017-06-26T17:35:21.468575</ts>
    <user>U37NPE2H0</user>
    <text>I should probably just use format and not be a lazy person.  I dont have a special use case, I just margianlly prefer the syntax</text>
  </message>
  <message>
    <ts>2017-06-26T17:35:36.473035</ts>
    <user>U0J9LVB6G</user>
    <text>There's a _lot_ of stuff hidden in cl-format</text>
  </message>
  <message>
    <ts>2017-06-26T17:35:43.475049</ts>
    <user>U051SS2EU</user>
    <text>insane stuff</text>
  </message>
  <message>
    <ts>2017-06-26T17:44:34.621538</ts>
    <user>U0LGCREMU</user>
    <text>tjtolton: `(format "hello %s" (:foo m))`?  what am i missing?</text>
  </message>
  <message>
    <ts>2017-06-26T18:00:26.872799</ts>
    <user>U0HM5MJ5V</user>
    <text>we just released the library we wrote for AWS Step Functions, in case anyone's interested: &lt;https://github.com/uwcpdx/stepwise&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T18:01:23.887840</ts>
    <user>U0HM5MJ5V</user>
    <text>readme is incomplete but being worked on</text>
  </message>
  <message>
    <ts>2017-06-26T18:14:24.071263</ts>
    <user>U0K0TFQLW</user>
    <text>tjtolton, it's pretty easy to write that if you (or a dependency) is already including instaparse or cljr-antlr (check `lein deps :tree`). See this for a minimal example: &lt;https://github.com/philipsdoctor/DST&gt;</text>
  </message>
  <message>
    <ts>2017-06-26T18:19:46.142241</ts>
    <user>U37NPE2H0</user>
    <text>bja: neat!  good suggestion.  I'll take a look tomorrow morning</text>
  </message>
  <message>
    <ts>2017-06-26T21:35:12.061399</ts>
    <user>U3FKR3KDF</user>
    <text>Is there a nice way to get specific elements, by index, from a vector, returning a new vector?</text>
  </message>
  <message>
    <ts>2017-06-26T21:36:47.073742</ts>
    <user>U0JFCEH9P</user>
    <text>`(mapv #(get v %) indices)`</text>
  </message>
  <message>
    <ts>2017-06-26T21:36:54.074770</ts>
    <user>U3FKR3KDF</user>
    <text>Thanks</text>
  </message>
  <message>
    <ts>2017-06-26T21:53:49.204089</ts>
    <user>U051TMSBY</user>
    <text>or even just `(mapv v indices)`</text>
  </message>
  <message>
    <ts>2017-06-26T21:55:10.214581</ts>
    <user>U0JFCEH9P</user>
    <text>that won't return a vector</text>
  </message>
  <message>
    <ts>2017-06-26T21:55:32.217442</ts>
    <user>U0JFCEH9P</user>
    <text>oh sorry</text>
  </message>
  <message>
    <ts>2017-06-26T21:55:36.217905</ts>
    <user>U0JFCEH9P</user>
    <text>I misread that as "map"</text>
  </message>
  <message>
    <ts>2017-06-26T21:55:48.219301</ts>
    <user>U0JFCEH9P</user>
    <text>good catch!</text>
  </message>
  <message>
    <ts>2017-06-26T21:56:00.220850</ts>
    <user>U0JFCEH9P</user>
    <text>vectors are functions of their indices</text>
  </message>
  <message>
    <ts>2017-06-26T21:56:03.221183</ts>
    <user>U0JFCEH9P</user>
    <text>I forgot about that</text>
  </message>
  <message>
    <ts>2017-06-26T22:49:02.609595</ts>
    <user>U1ALMRBLL</user>
    <text>yes, just have to be careful with index out of bounds with the `(mapv v indices)` version. Can filter out `nil`s from the `get`-based version and not have to worry about exceptions. Unless you want an exception with a bad index, in which case the vector-as-a-function solution works perfectly</text>
  </message>
  <message>
    <ts>2017-06-27T05:07:09.115665</ts>
    <user>U3VC9DLG2</user>
    <text>Do we have some nice tools for remotely debugging JVMs? I have a Clojure app thats leaking memory</text>
  </message>
  <message>
    <ts>2017-06-27T05:15:48.247677</ts>
    <user>U0524B4UW</user>
    <text>&lt;@U3VC9DLG2&gt; i've used yourkit with great success. there is also visualvm which is a lot freer, but i haven't used it</text>
  </message>
  <message>
    <ts>2017-06-27T05:19:03.297266</ts>
    <user>U3VC9DLG2</user>
    <text>&lt;@U0524B4UW&gt; , I'll check 'em out, thanks</text>
  </message>
  <message>
    <ts>2017-06-27T05:53:00.811852</ts>
    <user>U5T0PKRQC</user>
    <text>A quick question: Clojure supports closure where the closure has access to data defined in the parent function.</text>
  </message>
  <message>
    <ts>2017-06-27T05:53:19.816843</ts>
    <user>U5T0PKRQC</user>
    <text>On the other hand, you can re-assign a new value to an existing variable. And this variable might be visible to the closure.</text>
  </message>
  <message>
    <ts>2017-06-27T05:53:38.821311</ts>
    <user>U5T0PKRQC</user>
    <text>Doesn't this cause data race?</text>
  </message>
  <message>
    <ts>2017-06-27T05:53:45.823131</ts>
    <user>U5T0PKRQC</user>
    <text>Isn't this some kind of mutable shared state?</text>
  </message>
  <message>
    <ts>2017-06-27T06:00:45.933560</ts>
    <user>U5XMV6DQT</user>
    <text>if your data are atoms, why not?</text>
  </message>
  <message>
    <ts>2017-06-27T06:11:42.095239</ts>
    <user>U5T0PKRQC</user>
    <text>Suppose that they are atoms.</text>
  </message>
  <message>
    <ts>2017-06-27T06:12:09.100999</ts>
    <user>U5T0PKRQC</user>
    <text>I see. In this case it won't be data race.</text>
  </message>
  <message>
    <ts>2017-06-27T06:12:22.104150</ts>
    <user>U5T0PKRQC</user>
    <text>But it will still be a shared mutable state (but in a safe way)</text>
  </message>
  <message>
    <ts>2017-06-27T06:12:26.104998</ts>
    <user>U5T0PKRQC</user>
    <text>Is that correct?</text>
  </message>
  <message>
    <ts>2017-06-27T06:14:49.137662</ts>
    <user>U5XMV6DQT</user>
    <text>well, more or less — yes</text>
  </message>
  <message>
    <ts>2017-06-27T06:21:35.228367</ts>
    <user>U5XMV6DQT</user>
    <text>You just have to remember what atoms really are</text>
  </message>
  <message>
    <ts>2017-06-27T06:24:27.267057</ts>
    <user>U5XMV6DQT</user>
    <text>and no, there won't be data race (at least there shouldn't be :)</text>
  </message>
  <message>
    <ts>2017-06-27T06:25:40.283392</ts>
    <user>U5ZAJ15P0</user>
    <text>Hey! Could anyone recommend me a great Clojure book for someone who is new to the language but mostly familiar with functional programming? I have already read Clojure for the Brave and the True</text>
  </message>
  <message>
    <ts>2017-06-27T06:29:40.336369</ts>
    <user>U0MFQNXFZ</user>
    <text>I purchased Living Clojure and thought it was great. I've also heard good things about The Joy of Clojure, but as a more advanced follow-on book</text>
  </message>
  <message>
    <ts>2017-06-27T06:38:17.448191</ts>
    <user>U5ZAJ15P0</user>
    <text>Thank you!</text>
  </message>
  <message>
    <ts>2017-06-27T06:46:11.547485</ts>
    <user>U067BPAB1</user>
    <text>The Joy of Clojure is advanced, and I'm not sure if you need that much info upfront. I maintain that Programming Clojure by The Pragmatic Bookshelf is by far the best resource available, and written in a style that is true to the language. There is a new 3rd edition coming up, see &lt;https://pragprog.com/book/shcloj3/programming-clojure-third-edition&gt;.</text>
  </message>
  <message>
    <ts>2017-06-27T06:55:18.660905</ts>
    <user>U0DPX8ZQB</user>
    <text>`Clojure Applied` is also one to look at</text>
  </message>
  <message>
    <ts>2017-06-27T07:02:45.759722</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U067BPAB1&gt; thank you! How advanced are we talking about here with regard to the Joy of Clojure?</text>
  </message>
  <message>
    <ts>2017-06-27T07:03:18.766583</ts>
    <user>U067BPAB1</user>
    <text>You should have written something in the language already to really benefit from the book.</text>
  </message>
  <message>
    <ts>2017-06-27T07:04:16.779174</ts>
    <user>U067BPAB1</user>
    <text>I wouldn't rush into it, personally - I'm into my second year doing Clojure commercially after years of FP in Erlang and hobby toying around with Clojure/Scala, and I've yet to seriously touch the book. I find that actually writing code is more useful than reading about it - which, admittedly, is much easier to do when you're paid to do it!</text>
  </message>
  <message>
    <ts>2017-06-27T07:05:29.794348</ts>
    <user>U067BPAB1</user>
    <text>This is also the reason why I like Programming Clojure so much - the book doesn't faff around and  goes straight to the point, all the while (indirectly) teaching you all the good habits required for writing nice, clean, composable Clojure code.</text>
  </message>
  <message>
    <ts>2017-06-27T07:06:30.807410</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U067BPAB1&gt; I'll definitely get myself a copy then! Have you read the ebook? Or is there a way to get a paperback?</text>
  </message>
  <message>
    <ts>2017-06-27T07:07:36.821274</ts>
    <user>U067BPAB1</user>
    <text>I have both the paper and the electronic version of the second edition, which covers version 1.3. Personally I would get the beta ebook for the 3rd edition and just read that, all PragProg books are super easy to read on screen and very well hyperlinked, plus it's nice to have a bit of color as well.</text>
  </message>
  <message>
    <ts>2017-06-27T07:09:52.848904</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U067BPAB1&gt; Ok, thanks a lot for the advice</text>
  </message>
  <message>
    <ts>2017-06-27T07:11:32.869547</ts>
    <user>U067BPAB1</user>
    <text>Np. I also recommend &lt;http://4clojure.com|4clojure.com&gt; if you haven't come across that already, it's a good way to learn an idiomatic way of solving isolated problems using the standard library.

And above all, try to get a job with it. That'll boost your understanding much quicker than any book ever can.</text>
  </message>
  <message>
    <ts>2017-06-27T07:12:00.875362</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U067BPAB1&gt; I am actually pushing to use clojure on a new project at my current job</text>
  </message>
  <message>
    <ts>2017-06-27T07:12:03.875963</ts>
    <user>U5ZAJ15P0</user>
    <text>thus my interest</text>
  </message>
  <message>
    <ts>2017-06-27T07:12:40.883569</ts>
    <user>U5ZAJ15P0</user>
    <text>I didn't know 4clojure; thanks!</text>
  </message>
  <message>
    <ts>2017-06-27T07:13:01.887776</ts>
    <user>U5ZAJ15P0</user>
    <text>Out of curiosity, what has your experience been going from Erlang to Clojure &lt;@U067BPAB1&gt; ?</text>
  </message>
  <message>
    <ts>2017-06-27T07:13:18.891238</ts>
    <user>U5ZAJ15P0</user>
    <text>It's one of those languages (Erlang) that is on my "to learn" list but never quite got around to doing it</text>
  </message>
  <message>
    <ts>2017-06-27T07:13:47.897506</ts>
    <user>U5ZAJ15P0</user>
    <text>And did you have a good time with Erlang?</text>
  </message>
  <message>
    <ts>2017-06-27T07:17:34.944063</ts>
    <user>U067BPAB1</user>
    <text>Clojure is a much better language. Erlang is more interesting from a concurrency perspective than an FP one, since the FP there is completely incidental (it was deemed necessary to implement the platform) rather than intentional. Both teach you something new, so if you feel like learning something else after Clojure I can recommend it. I enjoyed my time with Erlang but after 4+ years of it I think I've exhausted the platform, and I personally don't think it's the right fit in 90% of modern distributed/concurrent system development as a lot of the big selling points (failure handling, concurrency etc.) have been implemented outside of the VM these days and I just think that's the right way to do it instead of having to think about these explicitly within a service.</text>
  </message>
  <message>
    <ts>2017-06-27T07:28:33.079402</ts>
    <user>U06QSF3BK</user>
    <text>hmm, seems that eastwood doesn't like defrecord forms produced by [org.clojure/clojure "1.9.0-alpha17"]</text>
  </message>
  <message>
    <ts>2017-06-27T07:31:15.114967</ts>
    <user>U060FKQPN</user>
    <text>what's the issue?</text>
  </message>
  <message>
    <ts>2017-06-27T07:47:29.323714</ts>
    <user>U5WDMBTUJ</user>
    <text>Hello! Can anyone help me understand the use-case of defrecord? Everytime I write a code, it is usually enough with just a function, but I'm afraid I'm missing the good parts of it!</text>
  </message>
  <message>
    <ts>2017-06-27T07:48:16.333211</ts>
    <user>U2PGHFU5U</user>
    <text>Joy of Clojure is fun, and from a practical point of view I loved Learning ClojureScript, but that's about ClojureScript</text>
  </message>
  <message>
    <ts>2017-06-27T07:48:29.336101</ts>
    <user>U06QSF3BK</user>
    <text>```== Eastwood 0.2.4 Clojure 1.9.0-alpha17 JVM 1.8.0_131
Directories scanned for source files:
  src test
== Linting lol.core ==
Entering directory `/private/tmp/lol'
src/lol/core.clj:3:1: suspicious-expression: condp called with 3 args.  (condp pred test-expr expr) always returns expr.  Perhaps there are misplaced parentheses?``` where source is ```0% cat src/lol/core.clj
(ns lol.core)

(defrecord Lol [])```</text>
  </message>
  <message>
    <ts>2017-06-27T07:49:12.345091</ts>
    <user>U06CM8C3V</user>
    <text>&lt;@U5ZAJ15P0&gt; I'm planning to learn Erlang too. Well, ok, I'll probably learn Elixir instead, but that's derived from Erlang.</text>
  </message>
  <message>
    <ts>2017-06-27T07:49:15.345784</ts>
    <user>U2PGHFU5U</user>
    <text>When running around 1000 simultaneous clj-http/get requests with `:async? true` I get this error:

```Exception in thread "async-dispatch-6" Exception in thread "async-dispatch-5" java.lang.OutOfMemoryError: unable to create new native thread```

Is there a way to circumvent this?</text>
  </message>
  <message>
    <ts>2017-06-27T08:03:44.546772</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U06CM8C3V&gt; yes Elixir looks interesting!</text>
  </message>
  <message>
    <ts>2017-06-27T08:05:29.572236</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U04V70XH6&gt; : is it public if your team uses GAE or AWS ?</text>
  </message>
  <message>
    <ts>2017-06-27T08:16:05.727205</ts>
    <user>U06QSF3BK</user>
    <text>hrm, having hard time trying to teach eastwood to ignore defrecord</text>
  </message>
  <message>
    <ts>2017-06-27T08:16:22.731787</ts>
    <user>U06QSF3BK</user>
    <text>```(disable-warning
 {:linter :suspicious-expression
  :for-macro 'clojure.core/defrecord
  :reason "Clojure 1.9 defrecord output causes false warning"})``` doesn't seem to work</text>
  </message>
  <message>
    <ts>2017-06-27T08:17:56.755898</ts>
    <user>U0GN0S72R</user>
    <text>what's the proper spelling for a new version of `foo-bar`? `foo-bar2` or `foo-bar-2`?</text>
  </message>
  <message>
    <ts>2017-06-27T08:23:08.834079</ts>
    <user>U06QSF3BK</user>
    <text>hmm, not actually clojure 1.9 problem &lt;https://github.com/jonase/eastwood/blob/eb58d6fb2628e1d178d4b8d2c46d4788b2a20094/cases/testcases/suspicious.clj#L8-L11&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T08:23:54.846005</ts>
    <user>U06QSF3BK</user>
    <text>so the actual use for a defrecord without fields was a `com.stuartsierra.component`</text>
  </message>
  <message>
    <ts>2017-06-27T08:30:41.952608</ts>
    <user>U37NPE2H0</user>
    <text>gfredericks: seems like it would be the former in most cases</text>
  </message>
  <message>
    <ts>2017-06-27T08:31:55.972976</ts>
    <user>U37NPE2H0</user>
    <text>`foo-bar-2`, I think, more strongly implies it was intended to be a distinct symbol with a similar naming scheme, while `foo-bar2` is more clearly a mutation of the original `foo-bar`</text>
  </message>
  <message>
    <ts>2017-06-27T08:33:52.004555</ts>
    <user>U0CKDHF4L</user>
    <text>is there a spec for the s/describe of a spec ?</text>
  </message>
  <message>
    <ts>2017-06-27T08:37:05.056551</ts>
    <user>U0GN0S72R</user>
    <text>and what about `foo*`? `foo*2` or `foo2*`?</text>
  </message>
  <message>
    <ts>2017-06-27T08:47:57.240159</ts>
    <user>U37NPE2H0</user>
    <text>again, my preference would be appending the mutation to the original symbol unmodified.  so `foo*2`

this strategy will help you out if you ever need to grep your service for any instances of that function, in any versions that exist</text>
  </message>
  <message>
    <ts>2017-06-27T08:48:24.248126</ts>
    <user>U0JFCEH9P</user>
    <text>`foo-bar'`</text>
  </message>
  <message>
    <ts>2017-06-27T08:48:33.250770</ts>
    <user>U0JFCEH9P</user>
    <text>that's how I've usually done it</text>
  </message>
  <message>
    <ts>2017-06-27T08:48:36.251926</ts>
    <user>U0JFCEH9P</user>
    <text>read as "foo-bar prime"</text>
  </message>
  <message>
    <ts>2017-06-27T08:48:45.254376</ts>
    <user>U0JFCEH9P</user>
    <text>and `foo-bar"` etc.</text>
  </message>
  <message>
    <ts>2017-06-27T08:49:12.262481</ts>
    <user>U37NPE2H0</user>
    <text>for instance, if you did ctrl + f `foo-bar*` you would get instances of `foo-bar*` and `foo-bar*2`</text>
  </message>
  <message>
    <ts>2017-06-27T08:49:22.265700</ts>
    <user>U051SS2EU</user>
    <text>mahdix: atoms won't race if you use them correctly: that is, if you use `swap!` to update their value, and don't have side effects or `deref` other mutable containers in the function you pass to `swap!`.</text>
  </message>
  <message>
    <ts>2017-06-27T08:49:29.267776</ts>
    <user>U37NPE2H0</user>
    <text>if you altered the symbol in some other way, that trick wouldnt work</text>
  </message>
  <message>
    <ts>2017-06-27T08:50:30.286075</ts>
    <user>U37NPE2H0</user>
    <text>obviously &lt;@U0JFCEH9P&gt; is using the same strategy, just with prime ticks instead of numbers</text>
  </message>
  <message>
    <ts>2017-06-27T08:52:16.317850</ts>
    <user>U051SS2EU</user>
    <text>erwinrooijakkers: the correct way to deal with this is to use a queue or channel to line up requests, and then use a fixed number of threads to do the work on that queue or channel. The claypoole library makes it easy to create a pool that works this way and call it the same way you would use futures of pmap normally.</text>
  </message>
  <message>
    <ts>2017-06-27T08:53:08.333776</ts>
    <user>U0GN0S72R</user>
    <text>&lt;@U0JFCEH9P&gt; this is specifically re: the new guidelines from rich etc. regarding avoiding breaking changes, which explicitly recommended integers</text>
  </message>
  <message>
    <ts>2017-06-27T08:53:26.339101</ts>
    <user>U051SS2EU</user>
    <text>of course you can also increase your max memory usage parameter, but there's still always a limit beyond what your hardware can support, and then you need to control thread creation / usage</text>
  </message>
  <message>
    <ts>2017-06-27T08:53:40.343192</ts>
    <user>U0JFCEH9P</user>
    <text>I haven't seen that</text>
  </message>
  <message>
    <ts>2017-06-27T08:54:15.353747</ts>
    <user>U0GN0S72R</user>
    <text>&lt;@U0JFCEH9P&gt; &lt;https://www.youtube.com/watch?v=oyLBGkS5ICk&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T08:55:58.385929</ts>
    <user>U0JFCEH9P</user>
    <text>cool, thanks!</text>
  </message>
  <message>
    <ts>2017-06-27T08:56:26.395299</ts>
    <user>U0JFCEH9P</user>
    <text>I'd love to use spec, but I'm not brave enough to jump onto an alpha version of Clojure itself</text>
  </message>
  <message>
    <ts>2017-06-27T08:56:37.398471</ts>
    <user>U0GN0S72R</user>
    <text>I guess the slides in that talk probably indicate an opinion about `foo2` vs `foo-2`</text>
  </message>
  <message>
    <ts>2017-06-27T08:57:53.421967</ts>
    <user>U0GN0S72R</user>
    <text>ah ha! the slides have `foo-2`</text>
  </message>
  <message>
    <ts>2017-06-27T08:57:58.423665</ts>
    <user>U0GN0S72R</user>
    <text>which was my preference anyhow</text>
  </message>
  <message>
    <ts>2017-06-27T08:59:00.443390</ts>
    <user>U0GN0S72R</user>
    <text>stu halloway was in town last week and made a big deal about "alpha" merely meaning "subject to change" and not "low quality" or any of the other associations</text>
  </message>
  <message>
    <ts>2017-06-27T08:59:44.457376</ts>
    <user>U0CKDHF4L</user>
    <text>yeh I've been using Spec for a couple of projects &amp;amp; its great!</text>
  </message>
  <message>
    <ts>2017-06-27T08:59:51.459608</ts>
    <user>U051SS2EU</user>
    <text>yeah, clojure alphas tend to be quite good (as long as you are willing to rewrite code that uses the new features)</text>
  </message>
  <message>
    <ts>2017-06-27T09:15:09.770744</ts>
    <user>U051H1KL1</user>
    <text>`real-foo` :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-27T09:21:50.912842</ts>
    <user>U0GN0S72R</user>
    <text>&lt;@U051H1KL1&gt; and `real-real-foo` for the next one? </text>
  </message>
  <message>
    <ts>2017-06-27T09:26:02.004438</ts>
    <user>U051H1KL1</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-27T09:26:10.007199</ts>
    <user>U051H1KL1</user>
    <text>only then can you go `real-real-foo-2`</text>
  </message>
  <message>
    <ts>2017-06-27T09:26:22.011836</ts>
    <user>U051H1KL1</user>
    <text>after that its `real-foo-final` and that's all the `foo` you need</text>
  </message>
  <message>
    <ts>2017-06-27T09:30:53.115573</ts>
    <user>U0GN0S72R</user>
    <text>Okay phew</text>
  </message>
  <message>
    <ts>2017-06-27T09:40:51.344101</ts>
    <user>U06B8J0AJ</user>
    <text>Is it good practice to use `(get a-collection :a-key)` over `(:a-key a-collection)`?</text>
  </message>
  <message>
    <ts>2017-06-27T09:41:36.361164</ts>
    <user>U051SS2EU</user>
    <text>I use get only if the keyword is in a bound name and not a literal</text>
  </message>
  <message>
    <ts>2017-06-27T09:41:45.364784</ts>
    <user>U051SS2EU</user>
    <text>when it's a literal, it's always clear what the keyword is doing</text>
  </message>
  <message>
    <ts>2017-06-27T09:42:40.386652</ts>
    <user>U06B8J0AJ</user>
    <text>Whereas if it's in a bound name, it's ambiguous whether it's a function, keyword or what-have-you. Gotcha.</text>
  </message>
  <message>
    <ts>2017-06-27T09:47:02.490276</ts>
    <user>U0CKDHF4L</user>
    <text>eh I use keywords, vectors and maps as functions - because they're all functions</text>
  </message>
  <message>
    <ts>2017-06-27T09:47:14.494909</ts>
    <user>U06B8J0AJ</user>
    <text>Fair enough</text>
  </message>
  <message>
    <ts>2017-06-27T09:47:56.512162</ts>
    <user>U0CKDHF4L</user>
    <text>so what if it might seem ambiguous - if it works and you've tested it then it's clear by the fact that they're first in the list that they're supposed to be a fn</text>
  </message>
  <message>
    <ts>2017-06-27T09:48:41.530233</ts>
    <user>U064X3EF3</user>
    <text>&lt;@U0CKDHF4L&gt; you should only vectors/maps as functions when they are guaranteed to be non-null (because otherwise you'll get an npe)</text>
  </message>
  <message>
    <ts>2017-06-27T09:48:47.532767</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0CKDHF4L&gt; my concern is readability and refactorability, I like to use constructs that reduce ambiguity when they are available and they don't impede other development goals</text>
  </message>
  <message>
    <ts>2017-06-27T09:49:43.555055</ts>
    <user>U0CKDHF4L</user>
    <text>&lt;@U064X3EF3&gt; naturally, but then anything could be nil and cause a NPE - that's part of testing &amp;amp; maybe Specing</text>
  </message>
  <message>
    <ts>2017-06-27T09:50:01.562597</ts>
    <user>U064X3EF3</user>
    <text>no, using a keyword as function (or get) will not have that behavior</text>
  </message>
  <message>
    <ts>2017-06-27T09:50:15.568069</ts>
    <user>U051SS2EU</user>
    <text>but using get directly is free, and solves the issue</text>
  </message>
  <message>
    <ts>2017-06-27T09:50:15.568170</ts>
    <user>U0CKDHF4L</user>
    <text>I don't think it affects readability at all, actually it's more clear sometimes</text>
  </message>
  <message>
    <ts>2017-06-27T09:50:26.572699</ts>
    <user>U051SS2EU</user>
    <text>I strongly disagree</text>
  </message>
  <message>
    <ts>2017-06-27T09:50:36.576919</ts>
    <user>U0JFCEH9P</user>
    <text>I only ever use keywords like `(:foo bar)` when it's exactly like that: a keyword literal and a very simple form</text>
  </message>
  <message>
    <ts>2017-06-27T09:50:59.586014</ts>
    <user>U0JFCEH9P</user>
    <text>if I want to get a default value I use `get` like `(get bar :foo :default)`</text>
  </message>
  <message>
    <ts>2017-06-27T09:51:12.591322</ts>
    <user>U0JFCEH9P</user>
    <text>never `(:foo bar :default)`</text>
  </message>
  <message>
    <ts>2017-06-27T09:52:35.625920</ts>
    <user>U06B8J0AJ</user>
    <text>It'd certainly be easier to see what `(get a-collection unknown-thing)` is doing as opposed to `(unknown-thing a-collection)`</text>
  </message>
  <message>
    <ts>2017-06-27T09:53:25.645896</ts>
    <user>U0JFCEH9P</user>
    <text>:point_up:</text>
  </message>
  <message>
    <ts>2017-06-27T09:53:52.656992</ts>
    <user>U0CKDHF4L</user>
    <text>why is your unknown-thing unknown ?</text>
  </message>
  <message>
    <ts>2017-06-27T09:54:06.662793</ts>
    <user>U0CKDHF4L</user>
    <text>just ensure it's a keyword</text>
  </message>
  <message>
    <ts>2017-06-27T09:54:08.663609</ts>
    <user>U0JFCEH9P</user>
    <text>because we aren't using Haskell</text>
  </message>
  <message>
    <ts>2017-06-27T09:54:30.672467</ts>
    <user>U0CKDHF4L</user>
    <text>no we're using a better language, with a REPL and Spec</text>
  </message>
  <message>
    <ts>2017-06-27T09:54:36.674892</ts>
    <user>U0JFCEH9P</user>
    <text>:stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-27T09:55:07.687547</ts>
    <user>U0JFCEH9P</user>
    <text>Clojure lets you inspect the state of things *after* you run your code</text>
  </message>
  <message>
    <ts>2017-06-27T09:55:12.689862</ts>
    <user>U0JFCEH9P</user>
    <text>which is nice</text>
  </message>
  <message>
    <ts>2017-06-27T09:56:31.723267</ts>
    <user>U0CKDHF4L</user>
    <text>running a compiler (which is a program) to infer what your program _would_ do if run, is no more powerful than simply running your program</text>
  </message>
  <message>
    <ts>2017-06-27T10:17:03.260100</ts>
    <user>U37NPE2H0</user>
    <text>huh, well.  how about that.  my preference differs.</text>
  </message>
  <message>
    <ts>2017-06-27T10:18:09.289136</ts>
    <user>U37NPE2H0</user>
    <text>`real_foo_final_fixed_fixed_for_real_this_time`</text>
  </message>
  <message>
    <ts>2017-06-27T10:23:11.421977</ts>
    <user>U0LJU20SJ</user>
    <text>&lt;@U064X3EF3&gt; out of curiosity: is there a general convention for the naming of `clojure` repos in github? I see lots of `data`. `math` but also some more exotic names, just got me thinking :smile:</text>
  </message>
  <message>
    <ts>2017-06-27T10:31:00.634977</ts>
    <user>U5NAUMCAD</user>
    <text>Hi I have a problem with ssl in jetty, I implemented https with an issued certificate by a recognized institution however, I am receiving in firefox this message: SSL_ERROR_NO_CYPHER_OVERLAP</text>
  </message>
  <message>
    <ts>2017-06-27T10:32:11.667497</ts>
    <user>U5NAUMCAD</user>
    <text>in chrome it works well; but in firefox it does not work, it shows a yellow message</text>
  </message>
  <message>
    <ts>2017-06-27T10:34:02.716895</ts>
    <user>U5NAUMCAD</user>
    <text>any idea about how to fix that in Clojure?</text>
  </message>
  <message>
    <ts>2017-06-27T10:38:52.845418</ts>
    <user>U0JFCEH9P</user>
    <text>&lt;@U5NAUMCAD&gt; Jetty and Chrome do not have any ciphers in common</text>
  </message>
  <message>
    <ts>2017-06-27T10:39:08.852483</ts>
    <user>U0JFCEH9P</user>
    <text>&lt;https://confluence.atlassian.com/fisheye/configuring-ssl-cipher-suites-for-jetty-414188522.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T10:40:01.875927</ts>
    <user>U06BE1L6T</user>
    <text>&lt;@U5NAUMCAD&gt; also look here: &lt;https://stackoverflow.com/questions/41626616/cant-connect-to-jetty-9-server-via-ssl-with-firefox-50&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T10:40:45.895946</ts>
    <user>U0JFCEH9P</user>
    <text>but it's worth repeating: asking "how do I fix the SSL cipher suite in Jetty" is like asking "what's the best shoe to hammer a nail?"</text>
  </message>
  <message>
    <ts>2017-06-27T10:40:59.901894</ts>
    <user>U0JFCEH9P</user>
    <text>Put something that's better at SSL in front of your app.</text>
  </message>
  <message>
    <ts>2017-06-27T10:41:09.906424</ts>
    <user>U0JFCEH9P</user>
    <text>Don't do SSL in your embedded Jetty.</text>
  </message>
  <message>
    <ts>2017-06-27T10:42:23.939589</ts>
    <user>U5NAUMCAD</user>
    <text>I understand that there are better ways to do that &lt;@U0JFCEH9P&gt;; but in this application i cannot change or implement other things</text>
  </message>
  <message>
    <ts>2017-06-27T10:42:29.942427</ts>
    <user>U5NAUMCAD</user>
    <text>I have to adjust to jetty</text>
  </message>
  <message>
    <ts>2017-06-27T10:44:10.987854</ts>
    <user>U5NAUMCAD</user>
    <text>:disappointed:</text>
  </message>
  <message>
    <ts>2017-06-27T10:56:56.339065</ts>
    <user>U064X3EF3</user>
    <text>carocad: there are just a handful of top level "categories" used for contrib libraries - algo, core, data, java, math, test, tools. And then there are other things as well (web sites like clojure-site and clojurescript-site), clojurescript, clojure clr and clr ports</text>
  </message>
  <message>
    <ts>2017-06-27T11:13:47.814503</ts>
    <user>U5Z4ECHCM</user>
    <text>This may sound like a strange question</text>
  </message>
  <message>
    <ts>2017-06-27T11:14:02.821369</ts>
    <user>U5Z4ECHCM</user>
    <text>But would it be possible in any way to observe Clojure as it runs</text>
  </message>
  <message>
    <ts>2017-06-27T11:14:14.826678</ts>
    <user>U5Z4ECHCM</user>
    <text>so that one could track all evaluated code</text>
  </message>
  <message>
    <ts>2017-06-27T11:14:19.828790</ts>
    <user>U5Z4ECHCM</user>
    <text>and implement a way to say</text>
  </message>
  <message>
    <ts>2017-06-27T11:14:25.831431</ts>
    <user>U5Z4ECHCM</user>
    <text>EVERYTHING UP TO THIS BIT WORKS</text>
  </message>
  <message>
    <ts>2017-06-27T11:14:39.837968</ts>
    <user>U5Z4ECHCM</user>
    <text>b/c that would fix like half of what makes clojure so broken, the dumb error messages</text>
  </message>
  <message>
    <ts>2017-06-27T11:16:11.878477</ts>
    <user>U0JFCEH9P</user>
    <text>yes, you want a debugger</text>
  </message>
  <message>
    <ts>2017-06-27T11:16:14.879929</ts>
    <user>U0JFCEH9P</user>
    <text>with breakpoints</text>
  </message>
  <message>
    <ts>2017-06-27T11:17:04.902534</ts>
    <user>U0JFCEH9P</user>
    <text>I'd recommend IntelliJ IDEA with Cursive</text>
  </message>
  <message>
    <ts>2017-06-27T11:29:41.247343</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U3JURM9B6&gt; we use a mixture of traditional data center and AWS at the moment. </text>
  </message>
  <message>
    <ts>2017-06-27T11:32:31.327240</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0JFCEH9P&gt; we're on alpha 17 in production. High traffic. Large codebase. Heavy use of spec. </text>
  </message>
  <message>
    <ts>2017-06-27T11:32:40.331462</ts>
    <user>U0C8489U6</user>
    <text>&lt;@U5Z4ECHCM&gt; for your use case I would go for `clojure.tools.trace` which allows you to print out everything that is going on in a namespace or for a var </text>
  </message>
  <message>
    <ts>2017-06-27T11:33:25.351629</ts>
    <user>U0C8489U6</user>
    <text>&lt;https://github.com/clojure/tools.trace/blob/master/README.md#example-usage&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T11:34:00.367389</ts>
    <user>U5Z4ECHCM</user>
    <text>&lt;@U0JFCEH9P&gt; I don't need a debugger, I'm plenty comfy in Emacs, I'm just wondering how dead-simple it'd be possible to make troubleshooting</text>
  </message>
  <message>
    <ts>2017-06-27T11:34:18.375319</ts>
    <user>U0JFCEH9P</user>
    <text>but you described a debugger with breakpoints</text>
  </message>
  <message>
    <ts>2017-06-27T11:34:18.375636</ts>
    <user>U0JFCEH9P</user>
    <text>so</text>
  </message>
  <message>
    <ts>2017-06-27T11:34:26.378994</ts>
    <user>U5Z4ECHCM</user>
    <text>I suppose it's similar</text>
  </message>
  <message>
    <ts>2017-06-27T11:34:33.382144</ts>
    <user>U5Z4ECHCM</user>
    <text>but it's less about defining breakpoints</text>
  </message>
  <message>
    <ts>2017-06-27T11:34:42.385776</ts>
    <user>U5Z4ECHCM</user>
    <text>and more about deducing where the issue is exactly programmaticallyy</text>
  </message>
  <message>
    <ts>2017-06-27T11:34:58.393061</ts>
    <user>U0JFCEH9P</user>
    <text>stack traces get you most of the way there</text>
  </message>
  <message>
    <ts>2017-06-27T11:35:08.397360</ts>
    <user>U0JFCEH9P</user>
    <text>the trick is defining the starting point of tracing executing</text>
  </message>
  <message>
    <ts>2017-06-27T11:35:39.411355</ts>
    <user>U5Z4ECHCM</user>
    <text>It'd probably be something you defined in the code, which may be cumbersome</text>
  </message>
  <message>
    <ts>2017-06-27T11:35:49.415496</ts>
    <user>U5Z4ECHCM</user>
    <text>(trace this-ns)</text>
  </message>
  <message>
    <ts>2017-06-27T11:36:23.431071</ts>
    <user>U0JFCEH9P</user>
    <text>well as &lt;@U0C8489U6&gt; suggested you can trace the fns in a namespace</text>
  </message>
  <message>
    <ts>2017-06-27T11:36:41.438933</ts>
    <user>U0JFCEH9P</user>
    <text>`(trace-ns some.problematic.namespace)`</text>
  </message>
  <message>
    <ts>2017-06-27T11:36:43.440137</ts>
    <user>U5Z4ECHCM</user>
    <text>I'm gonna write the best damn debugger that ever did darn dun existed</text>
  </message>
  <message>
    <ts>2017-06-27T11:37:05.449523</ts>
    <user>U0JFCEH9P</user>
    <text>but you have to specify each namespace and/or function that you want to show up in the trace</text>
  </message>
  <message>
    <ts>2017-06-27T11:37:45.467135</ts>
    <user>U0C8489U6</user>
    <text>Cider has trace built-in if I remember correctly so you might not even need to evaluate that at the repl</text>
  </message>
  <message>
    <ts>2017-06-27T11:38:58.499891</ts>
    <user>U04V1HS2L</user>
    <text>&lt;@U5Z4ECHCM&gt; did you try &lt;https://github.com/razum2um/clj-debugger&gt; ?</text>
  </message>
  <message>
    <ts>2017-06-27T11:39:11.505843</ts>
    <user>U5Z4ECHCM</user>
    <text>I haven't tried anything, it was just an idea I had</text>
  </message>
  <message>
    <ts>2017-06-27T11:39:25.512391</ts>
    <user>U5Z4ECHCM</user>
    <text>But this actually looks like almost exacttly what I wanted</text>
  </message>
  <message>
    <ts>2017-06-27T11:39:30.514226</ts>
    <user>U5Z4ECHCM</user>
    <text>so maybe I'm late to the party</text>
  </message>
  <message>
    <ts>2017-06-27T11:40:51.551003</ts>
    <user>U0JFCEH9P</user>
    <text>Oh? That's reassuring! Thanks.</text>
  </message>
  <message>
    <ts>2017-06-27T11:40:56.553309</ts>
    <user>U0JFCEH9P</user>
    <text>I might give it a try after all.</text>
  </message>
  <message>
    <ts>2017-06-27T11:41:26.566898</ts>
    <user>U2RBC2R45</user>
    <text>I would appreciate if someone can guide me on reading data from AVRO file in clojure?</text>
  </message>
  <message>
    <ts>2017-06-27T11:42:14.588013</ts>
    <user>U0JFCEH9P</user>
    <text>&lt;https://avro.apache.org/docs/1.2.0/api/java/index.html&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T11:42:21.591422</ts>
    <user>U0JFCEH9P</user>
    <text>Just use the Java libs</text>
  </message>
  <message>
    <ts>2017-06-27T11:42:24.593133</ts>
    <user>U5Z4ECHCM</user>
    <text>Well, never used hadoop, but slurp it in and go from there?</text>
  </message>
  <message>
    <ts>2017-06-27T11:44:17.643567</ts>
    <user>U5XMV6DQT</user>
    <text>&lt;@U2RBC2R45&gt; there are also several clojars &lt;https://clojars.org/search?q=avro&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T11:46:21.698800</ts>
    <user>U2RBC2R45</user>
    <text>&lt;@U5XMV6DQT&gt; &lt;@U0JFCEH9P&gt;  thanks</text>
  </message>
  <message>
    <ts>2017-06-27T11:58:46.037271</ts>
    <user>U04V70XH6</user>
    <text>FWIW, we've been using Clojure Alphas in production since 2011 (1.3 Alpha 7 or :sunglasses:. I think we've had one "bad" build in all that time (degraded performance). We happened to skip 1.5.0 in production (the only memory leak I can recall) because our release schedule fell in such a way that we went from a solid prerelease of 1.5 directly to 1.5.1.</text>
  </message>
  <message>
    <ts>2017-06-27T12:23:51.676865</ts>
    <user>U053QM94L</user>
    <text>re: debugging / finding the source of issues, i find an approach like stu's here to be the easiest &amp;amp; most widely applicable: &lt;http://blog.cognitect.com/blog/2017/6/5/repl-debugging-no-stacktrace-required&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T13:08:37.752352</ts>
    <user>U051SS2EU</user>
    <text>Also - an underrated approach is to experiment in the repl, but reify those experiments into unit tests. I wrote a library that makes it easier to take data you have in your repl and inject it into tests &lt;https://github.com/noisesmith/poirot&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T13:09:14.767081</ts>
    <user>U051SS2EU</user>
    <text>experimenting in the repl helps today, and is great if you are never going to edit or refactor your code, tests are great to have if you think your codebase might ever change</text>
  </message>
  <message>
    <ts>2017-06-27T13:14:38.892357</ts>
    <user>U053S2W0V</user>
    <text>any jdbc experts know why `(j/execute! pg ["SET LOCAL app.session_id = 'x'"])` works but `(j/execute! pg ["SET LOCAL app.session_id = ?" "x"])` yields a BatchUpdateException "was aborted" with syntax error at the column with the `?`?</text>
  </message>
  <message>
    <ts>2017-06-27T13:15:00.900878</ts>
    <user>U053S2W0V</user>
    <text>the exception message shows the interpolated query, which seems to have the right 'x' in it</text>
  </message>
  <message>
    <ts>2017-06-27T13:15:39.916641</ts>
    <user>U5XMV6DQT</user>
    <text>&lt;@U051SS2EU&gt; looks promising! how about publishing it on clojars?</text>
  </message>
  <message>
    <ts>2017-06-27T13:15:56.923416</ts>
    <user>U051SS2EU</user>
    <text>I thought I had</text>
  </message>
  <message>
    <ts>2017-06-27T13:16:07.927613</ts>
    <user>U051SS2EU</user>
    <text>I probably need to add the info to the readme</text>
  </message>
  <message>
    <ts>2017-06-27T13:16:36.939353</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://clojars.org/org.noisesmith/poirot&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T13:17:26.959235</ts>
    <user>U5XMV6DQT</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-06-27T13:17:43.966112</ts>
    <user>U051SS2EU</user>
    <text>it's still pretty young, but good enough to be useful, in my experience at least</text>
  </message>
  <message>
    <ts>2017-06-27T13:18:34.986207</ts>
    <user>U5XMV6DQT</user>
    <text>BTW, TIL about Reader Conditionals! thanks again!</text>
  </message>
  <message>
    <ts>2017-06-27T13:21:17.051254</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5XMV6DQT&gt; I don't think I've pushed the cljs support to clojars yet, but you can get it via `lein install` - I haven't used the feature enough to make it feel publishable (I work on clj code a lot more)</text>
  </message>
  <message>
    <ts>2017-06-27T14:05:52.159483</ts>
    <user>U0HM5MJ5V</user>
    <text>afaik clojure 1.9 doesn't muck with many internals in a risky way, too. mostly adding features</text>
  </message>
  <message>
    <ts>2017-06-27T14:08:18.218218</ts>
    <user>U612TKWEB</user>
    <text>Hey I am new to Clojure and I was wondering if you guys could share some of your favorite resources for learning Clojure. I have already checked out Clojure For The Brave And True but I am learning Clojure for the purpose of eventually building React apps with clojurescript and reagent. Thanks!</text>
  </message>
  <message>
    <ts>2017-06-27T14:12:33.322455</ts>
    <user>U0HM5MJ5V</user>
    <text>i'm late to the using maps and vectors as functions discussion, but i don't think anyone mentioned polymorphism. e.g. can be handy to have the option of passing a map or a function depending</text>
  </message>
  <message>
    <ts>2017-06-27T14:15:18.389091</ts>
    <user>U051SS2EU</user>
    <text>sure - but the context was implying that it was always being used for lookup</text>
  </message>
  <message>
    <ts>2017-06-27T14:15:36.396500</ts>
    <user>U051SS2EU</user>
    <text>and I'd definitely pass in :foo instead of #(get % :foo)</text>
  </message>
  <message>
    <ts>2017-06-27T14:17:04.432522</ts>
    <user>U0HM5MJ5V</user>
    <text>hmm, yeah maybe not as useful when expecting a map and passing a fn vs expecting a fn and passing a map(?)</text>
  </message>
  <message>
    <ts>2017-06-27T14:24:34.618526</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U612TKWEB&gt; check out my earlier message: &lt;https://clojurians.slack.com/archives/C03S1KBA2/p1498559140283392&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T14:43:55.093809</ts>
    <user>U11BV7MTK</user>
    <text>i highly recommend this book by alex miller &lt;https://pragprog.com/book/shcloj3/programming-clojure-third-edition&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T14:47:44.184876</ts>
    <user>U11BV7MTK</user>
    <text>interesting code and examples, good narrative, and pretty comprehensive. It's made for new people. It also isn't scared of java so you'll have a good introduction to the host language if you're unfamiliar</text>
  </message>
  <message>
    <ts>2017-06-27T15:14:56.820709</ts>
    <user>U0LGCREMU</user>
    <text>FOO-DAMMIT!</text>
  </message>
  <message>
    <ts>2017-06-27T15:58:42.782462</ts>
    <user>U053S2W0V</user>
    <text>heh, wow, just remembered that `::keys` is new in clojure 1.9 - feels like i've been using that forever :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-27T16:10:01.038453</ts>
    <user>U0HM5MJ5V</user>
    <text>&lt;@U053S2W0V&gt; i hit that with `seqable?` the other day =)</text>
  </message>
  <message>
    <ts>2017-06-27T16:33:04.551221</ts>
    <user>U3GJHS5DY</user>
    <text>&lt;@U051SS2EU&gt; this looks interesting. weve been having trouble with data in defs getting too large for tests (yay memory issues), wonder if this could help</text>
  </message>
  <message>
    <ts>2017-06-27T16:34:59.593547</ts>
    <user>U3GJHS5DY</user>
    <text>(referencing poirot)</text>
  </message>
  <message>
    <ts>2017-06-27T16:37:10.641988</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3GJHS5DY&gt; it might help - especially if you load the data locally in the test so that it gets cleaned up when that test exits...</text>
  </message>
  <message>
    <ts>2017-06-27T16:38:00.660418</ts>
    <user>U3GJHS5DY</user>
    <text>ya that would be the idea.</text>
  </message>
  <message>
    <ts>2017-06-27T17:22:17.601567</ts>
    <user>U2J7JRTDX</user>
    <text>I've always found `tools`, `util`, etc. to be problematic namespaces--everything gets shoved in there. E.g. why does `java.util.Date` belong with `java.util.LinkedList`?</text>
  </message>
  <message>
    <ts>2017-06-27T17:31:06.767938</ts>
    <user>U0B4ZBBKM</user>
    <text>Is there a difference between `(for [x l] ...)` and `(map (fn [x] ...) l)`?</text>
  </message>
  <message>
    <ts>2017-06-27T17:31:40.778275</ts>
    <user>U051SS2EU</user>
    <text>not if the binding vector looks like that, no</text>
  </message>
  <message>
    <ts>2017-06-27T17:31:45.779709</ts>
    <user>U0B4ZBBKM</user>
    <text>I.e. between `for` and `map` with one coll.</text>
  </message>
  <message>
    <ts>2017-06-27T17:32:06.786202</ts>
    <user>U051SS2EU</user>
    <text>but for has some other tricks you can do with the binding vector, even with one coll</text>
  </message>
  <message>
    <ts>2017-06-27T17:32:29.793599</ts>
    <user>U0B4ZBBKM</user>
    <text>Ok, but apart from that these expressions do the same thing</text>
  </message>
  <message>
    <ts>2017-06-27T17:32:44.797981</ts>
    <user>U051SS2EU</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-27T17:33:53.819178</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (take 10 (for [x (range) y (range) :while (&amp;gt; x y)] [x y]))
([1 0] [2 0] [2 1] [3 0] [3 1] [3 2] [4 0] [4 1] [4 2] [4 3])
```</text>
  </message>
  <message>
    <ts>2017-06-27T17:35:41.851107</ts>
    <user>U0B4ZBBKM</user>
    <text>Ah, a misplaced `)` is responsible for the confusion. Thanks for the backup!</text>
  </message>
  <message>
    <ts>2017-06-27T18:05:06.352072</ts>
    <user>U064X3EF3</user>
    <text>what's the question?</text>
  </message>
  <message>
    <ts>2017-06-27T18:05:46.363093</ts>
    <user>U064X3EF3</user>
    <text>a profiler dump isn't too helpful w/o the code</text>
  </message>
  <message>
    <ts>2017-06-27T18:12:08.457166</ts>
    <user>U064X3EF3</user>
    <text>I've been using Java since before LinkedList existed. back then, the JDK was a lot smaller and no one anticipated how Java would grow. at the time, it seemed fine!</text>
  </message>
  <message>
    <ts>2017-06-27T20:12:08.869178</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0ARSC79A&gt;'s question was posted at 4:08am Pacific: "Hi, I'm optimizing my clojure app. Here are results from jvisualmvm. Could you tell me, when clojure.lang.util.hash is invoking? Maybe it should be cached?" /cc &lt;@U064X3EF3&gt;</text>
  </message>
  <message>
    <ts>2017-06-27T20:13:49.884311</ts>
    <user>U064X3EF3</user>
    <text>Hash is called when using a hashed data structure (either hash map or hash set). In some cases it is cached, depends on what is being hashed.</text>
  </message>
  <message>
    <ts>2017-06-27T20:19:18.932697</ts>
    <user>U064X3EF3</user>
    <text>Both keys and vals are hashed, so consider what types end up in keys and vals of hash maps</text>
  </message>
  <message>
    <ts>2017-06-27T20:21:59.956699</ts>
    <user>U04V70XH6</user>
    <text>(thanks Alex — hopefully they'll see that tomorrow when they come back online!)</text>
  </message>
  <message>
    <ts>2017-06-28T01:33:38.237228</ts>
    <user>U1LJAM1U7</user>
    <text>Hi,
How to understand `*` notation from &lt;https://clojure.org/reference/java_interop&gt;, specifically `(. Classname-symbol (method-symbol args))* or (. Classname-symbol method-symbol args)*`
vs:
```
user=&amp;gt; (. clojure.lang.RT contains #{1} 1)
true
user=&amp;gt; (. clojure.lang.RT (contains #{1} 1))
true
```</text>
  </message>
  <message>
    <ts>2017-06-28T01:34:33.243580</ts>
    <user>U1LJAM1U7</user>
    <text>I am not sure about placement of `*` , it would seam that `(. Classname-symbol (method-symbol args*)) or (. Classname-symbol method-symbol args*)` is more natural ...</text>
  </message>
  <message>
    <ts>2017-06-28T01:35:43.251643</ts>
    <user>U06BE1L6T</user>
    <text>charlieroth: ClojureScript Unraveled is also good, especially for getting started with ClojureScript if you are an experienced programmer: &lt;https://funcool.github.io/clojurescript-unraveled/&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T02:14:58.550323</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U1LJAM1U7&gt; Looks like typos -- The section above has the `*` in the correct place.</text>
  </message>
  <message>
    <ts>2017-06-28T03:50:33.586490</ts>
    <user>U1YTUBH53</user>
    <text>timeline rumors about 1.9 anyone? :sweat_smile: can't wait :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T08:08:32.269794</ts>
    <user>U2J4FRT2T</user>
    <text>Feel like a Debian release </text>
  </message>
  <message>
    <ts>2017-06-28T10:10:05.720047</ts>
    <user>U3JURM9B6</user>
    <text>given the keys are 0-n, is transient-vector significantly fastedr than transient-hash-map ?</text>
  </message>
  <message>
    <ts>2017-06-28T10:21:59.031078</ts>
    <user>U1LJAM1U7</user>
    <text>seancorfield: ty for confirmation. Should I send a pull request?</text>
  </message>
  <message>
    <ts>2017-06-28T10:29:56.245818</ts>
    <user>U1YTUBH53</user>
    <text>lol</text>
  </message>
  <message>
    <ts>2017-06-28T10:40:52.539377</ts>
    <user>U1ALMRBLL</user>
    <text>I think this would qualify as a "small change" so see the relevant section here: &lt;https://clojure.org/community/contributing_site&gt; &lt;@U1LJAM1U7&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T10:43:03.597956</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U3JURM9B6&gt; significantly faster at what, specifically?</text>
  </message>
  <message>
    <ts>2017-06-28T10:48:32.745800</ts>
    <user>U051SS2EU</user>
    <text>one would assume conj!, since that's what transients are for</text>
  </message>
  <message>
    <ts>2017-06-28T10:48:47.752378</ts>
    <user>U051SS2EU</user>
    <text>seems like an easy thing to test with criterium</text>
  </message>
  <message>
    <ts>2017-06-28T10:54:35.912848</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (crit/bench (let [v (transient [])] (reduce conj! v (range 1000))))
Evaluation count : 3435960 in 60 samples of 57266 calls.
             Execution time mean : 17.803731 µs
    Execution time std-deviation : 319.760540 ns
   Execution time lower quantile : 17.305732 µs ( 2.5%)
   Execution time upper quantile : 18.382921 µs (97.5%)
                   Overhead used : 1.572942 ns

Found 1 outliers in 60 samples (1.6667 %)
        low-severe       1 (1.6667 %)
 Variance from outliers : 7.7727 % Variance is slightly inflated by outliers
nil
+user=&amp;gt; (crit/bench (let [m (transient {})] (reduce #(conj! % [%2 %2]) m (range 1000))))
Evaluation count : 292260 in 60 samples of 4871 calls.
             Execution time mean : 204.650986 µs
    Execution time std-deviation : 11.916923 µs
   Execution time lower quantile : 197.407687 µs ( 2.5%)
   Execution time upper quantile : 223.127690 µs (97.5%)
                   Overhead used : 1.572942 ns

Found 3 outliers in 60 samples (5.0000 %)
        low-severe       1 (1.6667 %)
        low-mild         2 (3.3333 %)
 Variance from outliers : 43.4448 % Variance is moderately inflated by outliers
nil
```</text>
  </message>
  <message>
    <ts>2017-06-28T10:55:08.928053</ts>
    <user>U051SS2EU</user>
    <text>so the map with number keys version is ~ 10x slower</text>
  </message>
  <message>
    <ts>2017-06-28T10:56:43.973126</ts>
    <user>U050SC7SV</user>
    <text>for a size 1000 &amp;lt;thing&amp;gt;</text>
  </message>
  <message>
    <ts>2017-06-28T10:56:54.977800</ts>
    <user>U051SS2EU</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-06-28T10:57:09.984846</ts>
    <user>U051SS2EU</user>
    <text>perhaps a smaller input would better represent real use cases</text>
  </message>
  <message>
    <ts>2017-06-28T10:57:17.988627</ts>
    <user>U050SC7SV</user>
    <text>my guess is that for vectors it will be O(1) no matter the size</text>
  </message>
  <message>
    <ts>2017-06-28T10:58:02.009713</ts>
    <user>U050SC7SV</user>
    <text>well it's a bit of a generalisation, but you get what I mean</text>
  </message>
  <message>
    <ts>2017-06-28T10:58:12.014323</ts>
    <user>U1ALMRBLL</user>
    <text>"real use cases" depends on the use case. that's why when someone asks "which is faster, x or y?" it's important to understand the use case</text>
  </message>
  <message>
    <ts>2017-06-28T10:59:35.053773</ts>
    <user>U050SC7SV</user>
    <text>indeed</text>
  </message>
  <message>
    <ts>2017-06-28T11:00:27.080445</ts>
    <user>U1ALMRBLL</user>
    <text>also &lt;@U051SS2EU&gt; , you are creating a persistent vector in your `conj!` for maps, and it's faster for your test scenario to use `assoc!` instead
```(c/bench (let [m (transient {})] (reduce #(conj! % [%2 %2]) m (range 1000))))
Evaluation count : 385800 in 60 samples of 6430 calls.
             Execution time mean : 157.793112 µs
    Execution time std-deviation : 3.521488 µs
   Execution time lower quantile : 154.508093 µs ( 2.5%)
   Execution time upper quantile : 165.003217 µs (97.5%)
                   Overhead used : 1.312303 ns

Found 3 outliers in 60 samples (5.0000 %)
	low-severe	 2 (3.3333 %)
	low-mild	 1 (1.6667 %)
 Variance from outliers : 10.9550 % Variance is moderately inflated by outliers
=&amp;gt; nil
(c/bench (let [m (transient {})] (reduce #(assoc! % %2 %2) m (range 1000))))
Evaluation count : 515160 in 60 samples of 8586 calls.
             Execution time mean : 118.954362 µs
    Execution time std-deviation : 4.101911 µs
   Execution time lower quantile : 115.324719 µs ( 2.5%)
   Execution time upper quantile : 130.422397 µs (97.5%)
                   Overhead used : 1.312303 ns

Found 4 outliers in 60 samples (6.6667 %)
	low-severe	 4 (6.6667 %)
 Variance from outliers : 20.6386 % Variance is moderately inflated by outliers
=&amp;gt; nil```</text>
  </message>
  <message>
    <ts>2017-06-28T11:01:21.106957</ts>
    <user>U051SS2EU</user>
    <text>I'm redoing the test creating the input outside the benchmark for that reason</text>
  </message>
  <message>
    <ts>2017-06-28T11:05:45.230554</ts>
    <user>U051SS2EU</user>
    <text>every result, regardless of pre-making vectors, or size of input, is showing vectors significantly faster than number keyed maps though</text>
  </message>
  <message>
    <ts>2017-06-28T11:13:10.429888</ts>
    <user>U051SS2EU</user>
    <text>and the ratios are consistent across input sizes, number keyed hash-maps take 8x as long, for both 20 element and 1000 element inputs</text>
  </message>
  <message>
    <ts>2017-06-28T11:13:33.440544</ts>
    <user>U051SS2EU</user>
    <text>(8x as long using assoc! of coure, 10x using conj!)</text>
  </message>
  <message>
    <ts>2017-06-28T11:27:51.830670</ts>
    <user>U1LJAM1U7</user>
    <text>TY. The edited source reads `*(_._ instance-expr (method-symbol args*))*` - so the `*` is there ... just not shown or we need to quote it :slightly_smiling_face:  `**` will help</text>
  </message>
  <message>
    <ts>2017-06-28T12:15:22.101703</ts>
    <user>U05207L4M</user>
    <text>I have a test assertion like this:
```
(not (nil? pin-config))
```
Where pin-config is a non-empty map.
But the test is failing with: 
```
expected: (not (nil? pin-config))
 actual: (not (not true))
```</text>
  </message>
  <message>
    <ts>2017-06-28T12:16:19.124610</ts>
    <user>U05207L4M</user>
    <text>It looks like `(not (nil? pin-config))` is transformed to `(not (not true)` but then this is not evaluated to `(not false)` and then to `true`</text>
  </message>
  <message>
    <ts>2017-06-28T12:16:31.128666</ts>
    <user>U05207L4M</user>
    <text>Any suggestions on what I might be doing wrong?</text>
  </message>
  <message>
    <ts>2017-06-28T12:25:30.349439</ts>
    <user>U05207L4M</user>
    <text>nvm</text>
  </message>
  <message>
    <ts>2017-06-28T12:28:59.435181</ts>
    <user>U051TMSBY</user>
    <text>roberto: unrelated, but `(not (nil? x))` == `(some? x)`</text>
  </message>
  <message>
    <ts>2017-06-28T12:29:49.455396</ts>
    <user>U05207L4M</user>
    <text>ah, thanks, I switched to `(complement nil?)`</text>
  </message>
  <message>
    <ts>2017-06-28T12:30:53.481957</ts>
    <user>U05207L4M</user>
    <text>switching to `some?` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-28T12:44:26.803742</ts>
    <user>U5XMV6DQT</user>
    <text>Is thery any kind of "memoization" library that supports an external in-memory storage backend?</text>
  </message>
  <message>
    <ts>2017-06-28T12:44:57.815728</ts>
    <user>U0JFCEH9P</user>
    <text>&lt;https://github.com/clojure/core.memoize&gt; is very flexible</text>
  </message>
  <message>
    <ts>2017-06-28T12:45:06.819374</ts>
    <user>U0JFCEH9P</user>
    <text>what does "external in-memory storage" mean? like Redis?</text>
  </message>
  <message>
    <ts>2017-06-28T12:45:45.835117</ts>
    <user>U5XMV6DQT</user>
    <text>Yes, Redis is fine.</text>
  </message>
  <message>
    <ts>2017-06-28T12:46:19.848253</ts>
    <user>U0JFCEH9P</user>
    <text>then &lt;https://github.com/strongh/crache&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T12:46:27.851070</ts>
    <user>U5XMV6DQT</user>
    <text>Thanks! Exactly what I look for!</text>
  </message>
  <message>
    <ts>2017-06-28T12:48:25.897397</ts>
    <user>U071MQNLR</user>
    <text>Anybody knows how to make figwheel load all builds or at least a specific one, when calling (start-figwheel) ?</text>
  </message>
  <message>
    <ts>2017-06-28T12:55:10.057042</ts>
    <user>U0JFCEH9P</user>
    <text>sort of a general design question, but I'm trying to figure out how fine-grained certain events in my system should be</text>
  </message>
  <message>
    <ts>2017-06-28T12:55:20.061398</ts>
    <user>U0JFCEH9P</user>
    <text>we have records that move through various states</text>
  </message>
  <message>
    <ts>2017-06-28T12:55:34.066673</ts>
    <user>U0JFCEH9P</user>
    <text>and I'm trying to decide if I should have events for each possible transition, which would be a lot</text>
  </message>
  <message>
    <ts>2017-06-28T12:55:53.074416</ts>
    <user>U0JFCEH9P</user>
    <text>or just one event that records the new status as a parameter</text>
  </message>
  <message>
    <ts>2017-06-28T12:56:37.092535</ts>
    <user>U0JFCEH9P</user>
    <text>so `(defrecord ProjectApprovedEvent [project-id])` vs `(defrecord ProjectStatusChangedEvent [project-id new-status])`</text>
  </message>
  <message>
    <ts>2017-06-28T13:01:08.205020</ts>
    <user>U0JFCEH9P</user>
    <text>or maybe the difference between `(defn approve! [project-id] ...) (defn reject! ...)` vs. `(defn update-status [project-id new-status] ...)`</text>
  </message>
  <message>
    <ts>2017-06-28T13:35:43.033926</ts>
    <user>U1A6BTMPA</user>
    <text>I have a Ring application that works perfectly fine running on jetty when compiled with `lein ring uberwar` and runs locally with `lein ring server-headless` but when I compile with `lein ring uberjar` and use nginx-clojure 0.4.5 locally, it complains that it can't find `medley` in the classpath.</text>
  </message>
  <message>
    <ts>2017-06-28T13:36:40.056764</ts>
    <user>U1A6BTMPA</user>
    <text>Googling the medley classpath error led to a comment that said that it was likely the result of using an old clojure version but I'm running 1.8 (nginx-clojure runs on 1.5.1 but I don't think that should matter)</text>
  </message>
  <message>
    <ts>2017-06-28T13:36:45.058729</ts>
    <user>U1A6BTMPA</user>
    <text>Can anyone help?</text>
  </message>
  <message>
    <ts>2017-06-28T13:37:13.069053</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U1A6BTMPA&gt; have you tried `lein clean` (this can clean up stale classes and resolve weird problems from time to time)</text>
  </message>
  <message>
    <ts>2017-06-28T13:37:30.075911</ts>
    <user>U0K0TFQLW</user>
    <text>`lein clean &amp;amp;&amp;amp; lein ring uberjar`</text>
  </message>
  <message>
    <ts>2017-06-28T13:39:11.115334</ts>
    <user>U1A6BTMPA</user>
    <text>I have and I get the same error</text>
  </message>
  <message>
    <ts>2017-06-28T13:40:12.139222</ts>
    <user>U1A6BTMPA</user>
    <text>&lt;@U0K0TFQLW&gt; I can use the same jar in EC2 with same version of nginx-clojure and it will run :confused:</text>
  </message>
  <message>
    <ts>2017-06-28T13:40:40.150318</ts>
    <user>U1A6BTMPA</user>
    <text>There must be something different between my environment locally and the remote one but I can't figure out what it would be</text>
  </message>
  <message>
    <ts>2017-06-28T13:41:58.181416</ts>
    <user>U0K0TFQLW</user>
    <text>I'm not familiar with nginx-clojure, does it setup a classpath for you (and possibly include a different version of clojure)? In the past, I've witnessed systems like that (Storm and Hadoop come to mind) that cause weird dependency issues</text>
  </message>
  <message>
    <ts>2017-06-28T13:43:31.218225</ts>
    <user>U0K0TFQLW</user>
    <text>oh, yeah it does</text>
  </message>
  <message>
    <ts>2017-06-28T13:43:58.228893</ts>
    <user>U0K0TFQLW</user>
    <text>can you try to add a :provided profile to your project.clj and put your clojure dependency on that</text>
  </message>
  <message>
    <ts>2017-06-28T13:44:20.237724</ts>
    <user>U1A6BTMPA</user>
    <text>I'll try that now</text>
  </message>
  <message>
    <ts>2017-06-28T13:45:34.267684</ts>
    <user>U0K0TFQLW</user>
    <text>the example for nginx-clojure seems to indicate that v1.5.1+ is okay (and uses 1.7.0 specifically)</text>
  </message>
  <message>
    <ts>2017-06-28T13:47:29.314607</ts>
    <user>U1A6BTMPA</user>
    <text>&lt;@U0K0TFQLW&gt; I got the same issue after adding my clojure dependency to :provided :confused:</text>
  </message>
  <message>
    <ts>2017-06-28T13:56:25.533327</ts>
    <user>U090G4C05</user>
    <text>is the &lt;#C0FM7N1SM|quil&gt; channel dead?</text>
  </message>
  <message>
    <ts>2017-06-28T14:47:22.774297</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U090G4C05&gt; I'd say that it's just _quiet_…</text>
  </message>
  <message>
    <ts>2017-06-28T14:47:37.780307</ts>
    <user>U28TJ0DDZ</user>
    <text>how can I get the list of protocols which a type implements ?</text>
  </message>
  <message>
    <ts>2017-06-28T15:01:02.104992</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U28TJ0DDZ&gt; 
`ancestors` will include protocols implemented, along with superclasses
```
(defprotocol Foo
  (bar [this]))
=&amp;gt; Foo
(deftype Baz [a b c]
  Foo
  (bar [this] nil))
=&amp;gt; user.Baz
(ancestors (class (-&amp;gt;Baz 3 4 5)))
=&amp;gt; #{user.Foo clojure.lang.IType java.lang.Object}
```</text>
  </message>
  <message>
    <ts>2017-06-28T15:04:47.194204</ts>
    <user>U28TJ0DDZ</user>
    <text>&lt;@U1ALMRBLL&gt; nice, is there any way to get the methods for each interface or protocol ?</text>
  </message>
  <message>
    <ts>2017-06-28T15:11:08.337246</ts>
    <user>U0GRKUGLQ</user>
    <text>is there a version of `run!` to use with transducers? I mean, some fn `run2!` that you use like `(transduce xf run2! init coll)`</text>
  </message>
  <message>
    <ts>2017-06-28T15:12:36.370094</ts>
    <user>U1ALMRBLL</user>
    <text>```(into [] (.getDeclaredMethods SomeClassHere))``` &lt;@U28TJ0DDZ&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T15:13:30.390529</ts>
    <user>U1ALMRBLL</user>
    <text>you can `.getName` on those for just the name, you can also call them since you have reflected and have the `Method` objects</text>
  </message>
  <message>
    <ts>2017-06-28T15:13:59.401158</ts>
    <user>U28TJ0DDZ</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-06-28T15:20:03.537204</ts>
    <user>U051SA920</user>
    <text>&lt;@U0GRKUGLQ&gt;  `(run! #(prn %) (eduction identity [0 1 2]))`</text>
  </message>
  <message>
    <ts>2017-06-28T15:21:45.574796</ts>
    <user>U051SS2EU</user>
    <text>if you look at the source of `run!`, I think `(transduce xf #(f %2) nil coll)` is the most parsimonious thing ```user=&amp;gt; (source run!)
(defn run!
  "Runs the supplied procedure (via reduce), for purposes of side
  effects, on successive items in the collection. Returns nil"
  {:added "1.7"}
  [proc coll]
  (reduce #(proc %2) nil coll)
  nil)
```</text>
  </message>
  <message>
    <ts>2017-06-28T15:30:18.763449</ts>
    <user>U0GRKUGLQ</user>
    <text>yeah... I thought so too &lt;@U051SS2EU&gt; . and that's what I'm doing &lt;@U051SA920&gt; . I just wanted to know if there was some other fn to use directly, but thanks</text>
  </message>
  <message>
    <ts>2017-06-28T16:25:01.975455</ts>
    <user>U067BPAB1</user>
    <text>I've been doing a bit of reading about functors recently and it just occurred to me that transducers might be exactly that. Only touched the tip of the iceberg so are they really the same thing or is there a counterexample of a transducer that cannot be classified as a functor?</text>
  </message>
  <message>
    <ts>2017-06-28T16:27:45.035785</ts>
    <user>U051SS2EU</user>
    <text>`(map f)` can't be mapped over, so it isn't a functor</text>
  </message>
  <message>
    <ts>2017-06-28T16:28:58.062371</ts>
    <user>U051SS2EU</user>
    <text>in fact I can't think of any transducer that you can map over...</text>
  </message>
  <message>
    <ts>2017-06-28T16:29:35.076278</ts>
    <user>U050ECB92</user>
    <text>transducers exist outside of collections</text>
  </message>
  <message>
    <ts>2017-06-28T16:30:21.093980</ts>
    <user>U067BPAB1</user>
    <text>functors are really type classes so they're not tied to concrete types from the get go either</text>
  </message>
  <message>
    <ts>2017-06-28T16:31:09.112343</ts>
    <user>U051SS2EU</user>
    <text>right, but functors are things you can map over, and though you can map over a function, I don't know how I would apply that to a transducing function</text>
  </message>
  <message>
    <ts>2017-06-28T16:31:14.114285</ts>
    <user>U051SS2EU</user>
    <text>perhaps that's my ignorance though?</text>
  </message>
  <message>
    <ts>2017-06-28T16:31:29.120020</ts>
    <user>U067BPAB1</user>
    <text>(Or at least in their Haskell implementation they are. After years of Erlang and Clojure I feel a little bit like Alice in Wonderland reading about all that stuff.)</text>
  </message>
  <message>
    <ts>2017-06-28T16:34:18.183110</ts>
    <user>U051SS2EU</user>
    <text>doing some reading to refresh my knowledge of this stuff, supposedly mapping over a function is composing it, and transducers are functions that when called on another function return a function that will compose their transducing actions when applied in a transducing context</text>
  </message>
  <message>
    <ts>2017-06-28T16:34:34.189339</ts>
    <user>U051SS2EU</user>
    <text>but I don't know how to translate "transducing context" here</text>
  </message>
  <message>
    <ts>2017-06-28T16:34:43.192642</ts>
    <user>U067BPAB1</user>
    <text>^ yeah, that's the angle I was coming from</text>
  </message>
  <message>
    <ts>2017-06-28T16:36:00.221046</ts>
    <user>U051SS2EU</user>
    <text>because looking at typical haskell examples `(+) 3` doesn't get applied to `(*) 2` to return a new function, it gets composed to make something you can apply</text>
  </message>
  <message>
    <ts>2017-06-28T16:36:05.222790</ts>
    <user>U051SS2EU</user>
    <text>which isn't what transducers do...</text>
  </message>
  <message>
    <ts>2017-06-28T16:36:34.233217</ts>
    <user>U051SS2EU</user>
    <text>in fact they are inside out of that right? you apply them to get something that composes the two</text>
  </message>
  <message>
    <ts>2017-06-28T16:37:02.243084</ts>
    <user>U051SS2EU</user>
    <text>I feel like I'm over my head with all of this though honestly</text>
  </message>
  <message>
    <ts>2017-06-28T16:37:19.249008</ts>
    <user>U067BPAB1</user>
    <text>_thinking this through_</text>
  </message>
  <message>
    <ts>2017-06-28T16:39:29.294956</ts>
    <user>U11BV7MTK</user>
    <text>apparently functors must preserve the identity mapping. ie identity in Category C maps to identity of Category D. If a transducer returns a non-empty list when given an empty list then it could not be a functor. (the categories being the collection of lists of the underlying set). This is my thinking.</text>
  </message>
  <message>
    <ts>2017-06-28T16:42:58.371352</ts>
    <user>U051SS2EU</user>
    <text>so does this mean transducing mapcat, filter, remove, etc. are not functors but transducing map is?</text>
  </message>
  <message>
    <ts>2017-06-28T16:44:47.410004</ts>
    <user>U11BV7MTK</user>
    <text>asking the wrong person. got undergrad and graduate background in math but no idea about this. but start see if it makes sense by definition. ie, are the domain and codomain categories to begin with? If not the term has no meaning. To be categories we need the "arrows" on them and make sure they compose. blah blah. All I was looking for was a single counter example where a transducer would not behave according to the definition of a functor.</text>
  </message>
  <message>
    <ts>2017-06-28T16:45:22.422862</ts>
    <user>U051SS2EU</user>
    <text>:thumbsup:</text>
  </message>
  <message>
    <ts>2017-06-28T16:54:15.616437</ts>
    <user>U06BE1L6T</user>
    <text>caio: you can also use something like this: &lt;https://github.com/curiousprogrammer-net/clojure-repl/blob/master/src/clojure_repl/java.clj#L40&gt;</text>
  </message>
  <message>
    <ts>2017-06-28T16:58:37.711655</ts>
    <user>U1LCB75M2</user>
    <text>there's also state (&lt;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/Transducers/00.36.36.jpg&gt;) which suggests to me transducers are it's own thing (hence why a new name)</text>
  </message>
  <message>
    <ts>2017-06-28T16:59:01.720355</ts>
    <user>U1LCB75M2</user>
    <text>((or maybe multiple things under the same umbrela name))</text>
  </message>
  <message>
    <ts>2017-06-28T16:59:02.720790</ts>
    <user>U051SS2EU</user>
    <text>oh, right - functors can't be stateful like that</text>
  </message>
  <message>
    <ts>2017-06-28T17:08:42.927671</ts>
    <user>U0W0JDY4C</user>
    <text>with `defmethod` is there an idiomatic way to handle "dispatch on anything in this set" instead of a singular dispatch value?</text>
  </message>
  <message>
    <ts>2017-06-28T17:09:05.935468</ts>
    <user>U0W0JDY4C</user>
    <text>```
(defmulti foo :my-type)
(demethod foo #{:a :b :c} [_] …)
```
instead of having to do 
```
(demethod foo :a [_] …)
(demethod foo :b [_] …)
etc
```</text>
  </message>
  <message>
    <ts>2017-06-28T17:09:39.946801</ts>
    <user>U051SS2EU</user>
    <text>you could check for that set in your dispatch function and have that return ::foo</text>
  </message>
  <message>
    <ts>2017-06-28T17:09:59.953136</ts>
    <user>U051SS2EU</user>
    <text>remember your dispatch function doesn't have to just return the thing</text>
  </message>
  <message>
    <ts>2017-06-28T17:10:15.958401</ts>
    <user>U0W0JDY4C</user>
    <text>ah i see, then wire in a defmethod like :a-set and :b-set</text>
  </message>
  <message>
    <ts>2017-06-28T17:10:56.972419</ts>
    <user>U051SS2EU</user>
    <text>`(defmulti foo #(if (contains #{...} (:my-type %)) ::foo (:my-type %)))`</text>
  </message>
  <message>
    <ts>2017-06-28T17:11:05.975505</ts>
    <user>U051SS2EU</user>
    <text>then `(defmethod foo ::foo ...)`</text>
  </message>
  <message>
    <ts>2017-06-28T17:11:32.984703</ts>
    <user>U051SS2EU</user>
    <text>I think that is the simplest choice (with a better dispatch function of course, that's just the basic concept)</text>
  </message>
  <message>
    <ts>2017-06-28T17:11:42.987815</ts>
    <user>U0W0JDY4C</user>
    <text>great, that's much nicer than what I was planning to do</text>
  </message>
  <message>
    <ts>2017-06-28T17:11:53.991754</ts>
    <user>U0W0JDY4C</user>
    <text>any particular reason you use ::foo .. are defmulti's global or something?</text>
  </message>
  <message>
    <ts>2017-06-28T17:12:26.002703</ts>
    <user>U051SS2EU</user>
    <text>because who knows what value you would find, and namespaced things are safer? you can use any placeholder you like of course</text>
  </message>
  <message>
    <ts>2017-06-28T17:13:21.021147</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; part of my instinct to use ::foo there is to indicate "this keyword is something my namespace cares about and maybe not generally relevant in other contexts"</text>
  </message>
  <message>
    <ts>2017-06-28T17:13:42.027939</ts>
    <user>U0W0JDY4C</user>
    <text>i should probably be doing more of that. thanks again for the help</text>
  </message>
  <message>
    <ts>2017-06-28T17:38:07.483752</ts>
    <user>U2J7JRTDX</user>
    <text>Yeah, just hoping :clj: won't follow down the same bad (class)path</text>
  </message>
  <message>
    <ts>2017-06-28T19:05:38.734202</ts>
    <user>U066TMAKS</user>
    <text>I use emacs and my cofounder uses Cursive. Is there a way to reconcile the formatting styles between the two so our code is consistent?</text>
  </message>
  <message>
    <ts>2017-06-28T19:06:22.742922</ts>
    <user>U051SS2EU</user>
    <text>my team uses the cljfmt plugin</text>
  </message>
  <message>
    <ts>2017-06-28T19:06:24.743233</ts>
    <user>U1LCB75M2</user>
    <text>linter?</text>
  </message>
  <message>
    <ts>2017-06-28T19:06:44.746914</ts>
    <user>U1LCB75M2</user>
    <text>best thing would be a linter as a post-commit hook</text>
  </message>
  <message>
    <ts>2017-06-28T19:07:07.751291</ts>
    <user>U051KLSJF</user>
    <text>&lt;@U066TMAKS&gt; Cursive is fairly customisable for formatting settings. You can probably match most things that Emacs does</text>
  </message>
  <message>
    <ts>2017-06-28T19:07:56.760311</ts>
    <user>U0567Q30W</user>
    <text>&lt;@U066TMAKS&gt; If you have specific issues, let me know over in &lt;#C0744GXCJ|cursive&gt; and I'll help you.</text>
  </message>
  <message>
    <ts>2017-06-28T19:09:26.777193</ts>
    <user>U051SS2EU</user>
    <text>with cljfmt I can even account for people that never remember to auto-format</text>
  </message>
  <message>
    <ts>2017-06-28T19:10:44.792171</ts>
    <user>U051SS2EU</user>
    <text>before we started using it, we had repeated problems where person x would indent code totally wrong, and person y had parinfer turned on and moved all the parens around based on the indentation  - there were two human failures that kept happening but just making sure cljfmt got applied to the repo was easier than fixing the bad code practices</text>
  </message>
  <message>
    <ts>2017-06-28T19:11:40.803162</ts>
    <user>U066TMAKS</user>
    <text>I think it's actually Emacs whose behavior seems to have more special cases. wondering if there's a premade setting for either Cursive or Emacs? (surely I'm not the first one to try to reconcile the two)</text>
  </message>
  <message>
    <ts>2017-06-28T19:12:05.807713</ts>
    <user>U11BV7MTK</user>
    <text>from what i understand emacs will be more rigid and stubborn than cursive</text>
  </message>
  <message>
    <ts>2017-06-28T19:12:07.807993</ts>
    <user>U051SS2EU</user>
    <text>that's why cljfmt is so great, it doesn't care what your editor is</text>
  </message>
  <message>
    <ts>2017-06-28T19:12:10.808628</ts>
    <user>U11BV7MTK</user>
    <text>^</text>
  </message>
  <message>
    <ts>2017-06-28T19:12:30.812316</ts>
    <user>U11BV7MTK</user>
    <text>and by rigid i mean less adaptable</text>
  </message>
  <message>
    <ts>2017-06-28T19:12:31.812510</ts>
    <user>U0567Q30W</user>
    <text>&lt;@U051SS2EU&gt; You still really need your editor to agree with it though, or you will suffer pain.</text>
  </message>
  <message>
    <ts>2017-06-28T19:12:39.813913</ts>
    <user>U066TMAKS</user>
    <text>^ &lt;@U0567Q30W&gt; agree. and x2 with your partner's code. the worst is when Emacs indentation breaks parinfer on Cursive- that actually changes the program's behavior</text>
  </message>
  <message>
    <ts>2017-06-28T19:12:54.816827</ts>
    <user>U11BV7MTK</user>
    <text>i'll bet your easier path is making cursive behave like emacs</text>
  </message>
  <message>
    <ts>2017-06-28T19:13:10.819669</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0567Q30W&gt; just running it before I check my code in catches little stuff, and my editor is smart enough to catch changed files</text>
  </message>
  <message>
    <ts>2017-06-28T19:14:57.839436</ts>
    <user>U051SS2EU</user>
    <text>always running it before commit, and always running it after a pull or merge is a pretty smooth workflow, even when some people forget to run their editor's indentor at all</text>
  </message>
  <message>
    <ts>2017-06-28T19:16:19.855262</ts>
    <user>U051SS2EU</user>
    <text>to be clear I'm not just running cljfmt, I'm using the optional `fix` arg that edits all the files in place</text>
  </message>
  <message>
    <ts>2017-06-28T19:17:24.867154</ts>
    <user>U066TMAKS</user>
    <text>&lt;@U051SS2EU&gt; cljfmt seems like a good first step, thanks for the suggestion. &lt;@U0567Q30W&gt; gonna give cursive formatting settings a shot</text>
  </message>
  <message>
    <ts>2017-06-28T19:20:50.905440</ts>
    <user>U0567Q30W</user>
    <text>&lt;@U066TMAKS&gt; I think the main one that's required to make Cursive line up with Emacs' initial settings is _Settings-&amp;gt;Editor-&amp;gt;Code Style-&amp;gt;Clojure-&amp;gt;General-&amp;gt;One space list indent_</text>
  </message>
  <message>
    <ts>2017-06-28T21:14:41.971821</ts>
    <user>U0K0TFQLW</user>
    <text>which channel is best for posting links to talks?</text>
  </message>
  <message>
    <ts>2017-06-28T21:15:05.975204</ts>
    <user>U0K0TFQLW</user>
    <text>err, found &lt;#C13E20NF5|videos&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T03:01:02.599249</ts>
    <user>U5TBHUM8B</user>
    <text>Maybe my google-fu is failing me, but is there a simple way to unzip a file on disk to a a directory using Clojure? Everything I've found is about unzipping a single file, but I have a zip that has several. I want to unzip it and then read a specific one into memory.</text>
  </message>
  <message>
    <ts>2017-06-29T03:01:56.609596</ts>
    <user>U5TBHUM8B</user>
    <text>Trying to build an ETL tool that downloads a zip file, unzips it, reads a specific file into memory, and then does some stuff to it.</text>
  </message>
  <message>
    <ts>2017-06-29T03:03:33.628194</ts>
    <user>U5TBHUM8B</user>
    <text>Ideally I could use .getNextEntry or something similar and read to memory when it matches a regex</text>
  </message>
  <message>
    <ts>2017-06-29T03:32:43.976433</ts>
    <user>U4VDXB2TU</user>
    <text>&lt;@U5TBHUM8B&gt; if you just need the information there is no need to unzip to files - you could read it file directly from the zip into memory</text>
  </message>
  <message>
    <ts>2017-06-29T03:33:23.984882</ts>
    <user>U5TBHUM8B</user>
    <text>Oh that would be ideal! How would I do that with a specific file that's in the zip file? (One of multiple that are zipped in the archive)</text>
  </message>
  <message>
    <ts>2017-06-29T03:39:47.066309</ts>
    <user>U4VDXB2TU</user>
    <text>I'm live translating this from some groovy code I wrote a while back (we'll see if I get lynched here), but you can iterate through the entries within a zip file and then call the ZipEntry `(.getInputStream zip-file zip-entry)` and then I believe you should be able to use slurp to get the contents of the input stream</text>
  </message>
  <message>
    <ts>2017-06-29T03:40:40.078202</ts>
    <user>U4VDXB2TU</user>
    <text>to find the right entry within the zip you can filter on zipEntry.name</text>
  </message>
  <message>
    <ts>2017-06-29T03:45:39.143814</ts>
    <user>U4VDXB2TU</user>
    <text>cigrainger: give me a few - will fire up a repl and see if I can cook up some example code. I'm not senior with clojure but I have spent a lot of time with file manipulations and zip files : )</text>
  </message>
  <message>
    <ts>2017-06-29T03:46:48.159140</ts>
    <user>U5TBHUM8B</user>
    <text>Awesome! Thanks. I'll play around with your suggestion re: ZipEntry as well. That was the general direction I was going but I couldn't find much and I'm not great with clojure yet either.</text>
  </message>
  <message>
    <ts>2017-06-29T03:50:59.215416</ts>
    <user>U5YHX0TQV</user>
    <text>&lt;@U4VDXB2TU&gt; Have a look at &lt;https://stackoverflow.com/questions/5419125/reading-a-zip-file-using-java-api-from-clojure#5419767&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T03:51:35.223625</ts>
    <user>U28947274</user>
    <text>Hey folks,
I have the following snippet:
```
(let [coll [1 2 3]] 
    (map #(println :test %) coll) 
    (map #(println :test2 %) coll))
```

This results in:
:test2 1
:test2 2
:test2 3
(nil nil nil)

And not my expectation:
:test 1
:test 2
:test 3
:test2 1
:test2 2
:test2 3
(nil nil nil)

Can anyone explain this behavior?</text>
  </message>
  <message>
    <ts>2017-06-29T03:52:52.240441</ts>
    <user>U5YHX0TQV</user>
    <text>&lt;@U28947274&gt;  Yes, don't use map to execute side-effecting functions like println since map basically returns a lazy seq</text>
  </message>
  <message>
    <ts>2017-06-29T03:54:09.258433</ts>
    <user>U5YHX0TQV</user>
    <text>you can wrap your map's in a (doall ... ) call, but it would be more idiomatic to use doseq for this case</text>
  </message>
  <message>
    <ts>2017-06-29T03:54:12.259076</ts>
    <user>U4VDXB2TU</user>
    <text>```
(ns zip-files.core
  (:import (java.util.zip ZipFile)))

(defn get-entry-data [zip-file-path entry-name]
  (let [zip-file (ZipFile. (&lt;http://clojure.java.io/file|clojure.java.io/file&gt; zip-file-path))
        entries (enumeration-seq (.entries zip-file))
        matching    (filter #(= entry-name (.getName %)) entries)]
    (if (not-empty matching)
      (slurp (.getInputStream zip-file (first matching)))
      (println "no entry" entry-name "found!"))))

```</text>
  </message>
  <message>
    <ts>2017-06-29T03:54:38.265031</ts>
    <user>U4VDXB2TU</user>
    <text>```
(get-entry-data "test.zip" "test.txt")
=&amp;gt; "Hello World!\n\n"
```</text>
  </message>
  <message>
    <ts>2017-06-29T03:55:23.275472</ts>
    <user>U28947274</user>
    <text>Great, thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T03:55:30.277176</ts>
    <user>U4VDXB2TU</user>
    <text>where test.txt was one of many files within test.zip and the contents of test.txt were "Hello World!\n\n"</text>
  </message>
  <message>
    <ts>2017-06-29T03:56:32.291874</ts>
    <user>U4VDXB2TU</user>
    <text>returns a string in this case or nil if no entry was found</text>
  </message>
  <message>
    <ts>2017-06-29T04:01:44.369721</ts>
    <user>U4VDXB2TU</user>
    <text>&lt;@U5YHX0TQV&gt; thanks for the so link - looks more or less like what I came up with</text>
  </message>
  <message>
    <ts>2017-06-29T04:02:55.387097</ts>
    <user>U5TBHUM8B</user>
    <text>Awesome! Thank you!</text>
  </message>
  <message>
    <ts>2017-06-29T04:05:17.421024</ts>
    <user>U5YHX0TQV</user>
    <text>And be careful with slurp'ing in data, you'll have all in memory</text>
  </message>
  <message>
    <ts>2017-06-29T04:23:39.689159</ts>
    <user>U38J3881W</user>
    <text>Hey! I was wondering if repeated subvecs would ever allow the excluded data to be garbage collected if there was no way to access it any more? Or would I need to use `(vec (rest x))` if I wanted to _actually_ drop the first item in a vector?</text>
  </message>
  <message>
    <ts>2017-06-29T04:25:58.724129</ts>
    <user>U38J3881W</user>
    <text>I would use a persistent queue but I want in place updates too, performance of `(vec (rest x))` being O(n) is a non-issue for me too, looking for the "idiomatic" solution more than anything :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T04:39:51.939799</ts>
    <user>U06HTKDMF</user>
    <text>damn didn't realize `for` re-evals the inner range expression</text>
  </message>
  <message>
    <ts>2017-06-29T04:39:53.940285</ts>
    <user>U06HTKDMF</user>
    <text>```boot.user=&amp;gt; (for [x (do (println "x") [1 2]) y (do (println "y") [1 2])] [x y])
x
y
y
([1 1] [1 2] [2 1] [2 2])```</text>
  </message>
  <message>
    <ts>2017-06-29T04:40:49.954891</ts>
    <user>U060FKQPN</user>
    <text>it's by design</text>
  </message>
  <message>
    <ts>2017-06-29T04:41:13.960825</ts>
    <user>U060FKQPN</user>
    <text>how would `(for [x [[1 2] [3 4]] y x] y)` work otherwise</text>
  </message>
  <message>
    <ts>2017-06-29T04:41:18.962303</ts>
    <user>U06HTKDMF</user>
    <text>i was p confused for a bit because i was using `(q/random ...)` (from quil) inside the inner one xD</text>
  </message>
  <message>
    <ts>2017-06-29T04:41:37.967210</ts>
    <user>U06HTKDMF</user>
    <text>yea makes sense :open_mouth:</text>
  </message>
  <message>
    <ts>2017-06-29T05:24:01.651522</ts>
    <user>U5XMV6DQT</user>
    <text>&lt;@U28947274&gt; or you can make something like that
```
(let [coll [1 2 3]
      res (concat (map #(vector :test %) coll)
                  (map #(vector :test2 %) coll))]
              (doseq [x res]
                (apply println x)))
```</text>
  </message>
  <message>
    <ts>2017-06-29T05:25:27.674026</ts>
    <user>U5XMV6DQT</user>
    <text>I prefer not to mix side-effects with pure stuff</text>
  </message>
  <message>
    <ts>2017-06-29T08:28:31.250411</ts>
    <user>U5N8R3NF4</user>
    <text>Someone Please suggest real-time-messaging clojure library. I might also need Screen Sharing and video chat.</text>
  </message>
  <message>
    <ts>2017-06-29T08:48:12.580002</ts>
    <user>U051SS2EU</user>
    <text>jgeraert: `doseq` works great for this, but there's also `run!` which like this usage of map takes a function and a collection as args, but is run for side effects eagerly.</text>
  </message>
  <message>
    <ts>2017-06-29T08:48:43.589314</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U28947274&gt; meant to tag you above</text>
  </message>
  <message>
    <ts>2017-06-29T08:50:01.612740</ts>
    <user>U28947274</user>
    <text>&lt;@U051SS2EU&gt; Ah I see, thanks for the tip :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T10:07:32.354973</ts>
    <user>U06HHF230</user>
    <text>Is this expected on clojure 1.9-alpha17?

```
(keyword :foo) ;; :foo
(keyword "anamespace" :foo) ;; ClassCastException
```</text>
  </message>
  <message>
    <ts>2017-06-29T10:08:55.391113</ts>
    <user>U060FKQPN</user>
    <text>yes, the 2 arity of keyword only accepts strings</text>
  </message>
  <message>
    <ts>2017-06-29T10:10:46.438276</ts>
    <user>U06HHF230</user>
    <text>I understand that supporting coercions can be problematic but it is a little counter intuitive given the arity 1 behaviour</text>
  </message>
  <message>
    <ts>2017-06-29T11:15:46.206273</ts>
    <user>U61KCTX8S</user>
    <text>can anybody tell me how to use pprint? I mean in a file, not the REPL. What is the magic :require :use  line i need to use?</text>
  </message>
  <message>
    <ts>2017-06-29T11:16:12.217648</ts>
    <user>U61KCTX8S</user>
    <text>i google this shit with no examples</text>
  </message>
  <message>
    <ts>2017-06-29T11:18:03.268552</ts>
    <user>U050SC7SV</user>
    <text>`(with-out-str (clojure.pprint/pprint x))`</text>
  </message>
  <message>
    <ts>2017-06-29T11:18:29.280726</ts>
    <user>U050SC7SV</user>
    <text>then you can `spit` it in the file</text>
  </message>
  <message>
    <ts>2017-06-29T11:19:26.306581</ts>
    <user>U61KCTX8S</user>
    <text>I build an uberjar</text>
  </message>
  <message>
    <ts>2017-06-29T11:19:39.312567</ts>
    <user>U61KCTX8S</user>
    <text>does compilation fails because it does not trecognize pprint</text>
  </message>
  <message>
    <ts>2017-06-29T11:19:49.317072</ts>
    <user>U61KCTX8S</user>
    <text>it is not properly imported</text>
  </message>
  <message>
    <ts>2017-06-29T11:19:54.318871</ts>
    <user>U61KCTX8S</user>
    <text>or called</text>
  </message>
  <message>
    <ts>2017-06-29T11:20:20.330927</ts>
    <user>U61KCTX8S</user>
    <text>java.lang.RuntimeException: No such var: clojure.core/clojure.pprint</text>
  </message>
  <message>
    <ts>2017-06-29T11:21:34.365424</ts>
    <user>U050SC7SV</user>
    <text>you need to require clojure.pprint first</text>
  </message>
  <message>
    <ts>2017-06-29T11:21:44.370130</ts>
    <user>U61KCTX8S</user>
    <text>i know that i have to rewuire it</text>
  </message>
  <message>
    <ts>2017-06-29T11:21:50.372580</ts>
    <user>U61KCTX8S</user>
    <text>i am asking how to do it</text>
  </message>
  <message>
    <ts>2017-06-29T11:22:19.386137</ts>
    <user>U61KCTX8S</user>
    <text>[clojure.pprint :as pprint]
does not work</text>
  </message>
  <message>
    <ts>2017-06-29T11:22:51.400479</ts>
    <user>U61KCTX8S</user>
    <text>in the (:require   clause</text>
  </message>
  <message>
    <ts>2017-06-29T11:23:49.427071</ts>
    <user>U050SC7SV</user>
    <text>the error says you're trying to call clojure.pprint, if you aliased it you need to call (pprint/pprint x), or (clojure.pprint/pprint x)</text>
  </message>
  <message>
    <ts>2017-06-29T11:24:21.442226</ts>
    <user>U61KCTX8S</user>
    <text>what i need is one WORKING example, which unfotrtunately i was not able to find :D:D</text>
  </message>
  <message>
    <ts>2017-06-29T11:24:46.453912</ts>
    <user>U61KCTX8S</user>
    <text>one working example, i can copy paste, tht's all i need</text>
  </message>
  <message>
    <ts>2017-06-29T11:25:27.472486</ts>
    <user>U61KCTX8S</user>
    <text>so basically two line i need</text>
  </message>
  <message>
    <ts>2017-06-29T11:25:35.476101</ts>
    <user>U61KCTX8S</user>
    <text>1) how to import prettyprint</text>
  </message>
  <message>
    <ts>2017-06-29T11:25:41.478778</ts>
    <user>U61KCTX8S</user>
    <text>2) how to call it</text>
  </message>
  <message>
    <ts>2017-06-29T11:27:02.515855</ts>
    <user>U61KCTX8S</user>
    <text>currently i have</text>
  </message>
  <message>
    <ts>2017-06-29T11:27:24.525794</ts>
    <user>U61KCTX8S</user>
    <text>[clojure.pprint :as pprint]
 (pprint/pprint  ...</text>
  </message>
  <message>
    <ts>2017-06-29T11:27:32.529430</ts>
    <user>U61KCTX8S</user>
    <text>rhat does not work</text>
  </message>
  <message>
    <ts>2017-06-29T11:27:53.539381</ts>
    <user>U0K0TFQLW</user>
    <text>(ns foo (:require [clojure.pprint :as pprint]))(pprint/pprint {:this :is :so :pretty})</text>
  </message>
  <message>
    <ts>2017-06-29T11:27:54.539625</ts>
    <user>U61KCTX8S</user>
    <text>Exception in thread "main" java.lang.RuntimeException: No such var: clojure.core/clojure.pprint,</text>
  </message>
  <message>
    <ts>2017-06-29T11:29:00.569476</ts>
    <user>U61KCTX8S</user>
    <text>kurwa,</text>
  </message>
  <message>
    <ts>2017-06-29T11:29:07.572381</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U0K0TFQLW&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T11:29:16.576422</ts>
    <user>U61KCTX8S</user>
    <text>i got exactly what you suggested</text>
  </message>
  <message>
    <ts>2017-06-29T11:29:26.581405</ts>
    <user>U61KCTX8S</user>
    <text>what else could got fucked up?</text>
  </message>
  <message>
    <ts>2017-06-29T11:29:33.584444</ts>
    <user>U61KCTX8S</user>
    <text>my projectfile?</text>
  </message>
  <message>
    <ts>2017-06-29T11:29:46.589981</ts>
    <user>U0K0TFQLW</user>
    <text>have you tried that in a bare repl?</text>
  </message>
  <message>
    <ts>2017-06-29T11:31:26.636185</ts>
    <user>U61KCTX8S</user>
    <text>wait, i got it</text>
  </message>
  <message>
    <ts>2017-06-29T11:32:41.670399</ts>
    <user>U61KCTX8S</user>
    <text>[clojure.pprint :as pprint] was in the ns clause, but outside the (:require clause</text>
  </message>
  <message>
    <ts>2017-06-29T11:32:51.674785</ts>
    <user>U61KCTX8S</user>
    <text>thanks for the quick help guys :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T11:33:53.703029</ts>
    <user>U0K0TFQLW</user>
    <text>spec in 1.9 is really nice for that sort of thing</text>
  </message>
  <message>
    <ts>2017-06-29T11:36:12.764589</ts>
    <user>U0K0TFQLW</user>
    <text>if you're just playing with the language, I recommend trying out the 1.9.0-alpha17</text>
  </message>
  <message>
    <ts>2017-06-29T11:37:15.792666</ts>
    <user>U61KCTX8S</user>
    <text>well, ia m not just playing around with the language, i want to make money with it :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T11:37:31.800573</ts>
    <user>U61KCTX8S</user>
    <text>so i wont try anything with "alpha" in it</text>
  </message>
  <message>
    <ts>2017-06-29T11:38:11.818508</ts>
    <user>U0K0TFQLW</user>
    <text>I run my startup on so many "alpha"s and pre-alpha spur-of-the-moment forks that I've lost count.</text>
  </message>
  <message>
    <ts>2017-06-29T11:39:29.852629</ts>
    <user>U61KCTX8S</user>
    <text>and those alphas run somewhere on production?</text>
  </message>
  <message>
    <ts>2017-06-29T11:39:32.853788</ts>
    <user>U0K0TFQLW</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-06-29T11:39:50.861523</ts>
    <user>U3JURM9B6</user>
    <text>```
(defkeyframes blinkBlackGreyKF
  [:0.00001% {:fill "#ddd"}]
  [:50% {:fill "#000"}]
  [:100% {:fill "#ddd"}])
```

works, but if I change the 0.00001 to 0.0 or 0 , it fails -- somehow the css refuses to display the % if it's 0</text>
  </message>
  <message>
    <ts>2017-06-29T11:39:52.862188</ts>
    <user>U61KCTX8S</user>
    <text>well, tha is inspiering :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T11:40:38.882581</ts>
    <user>U0K0TFQLW</user>
    <text>I usually prefer to have bugfixes and features over some mythical stability</text>
  </message>
  <message>
    <ts>2017-06-29T11:42:09.922557</ts>
    <user>U0K0TFQLW</user>
    <text>`lein ancient`, which is a plugin for one of the common clojure build tools, leiningen, actually makes it really easy to speculatively upgrade packages and run the entire test suite, only keeping the upgrades if your tests pass</text>
  </message>
  <message>
    <ts>2017-06-29T11:42:14.924382</ts>
    <user>U61KCTX8S</user>
    <text>hmmm... maybe the aplphas are so stable becuase of clojure's nature, i think it's harder to make bugs in clojure</text>
  </message>
  <message>
    <ts>2017-06-29T11:42:16.925938</ts>
    <user>U0K0TFQLW</user>
    <text>of course, that requires that you actually bother to write tests</text>
  </message>
  <message>
    <ts>2017-06-29T11:42:33.933169</ts>
    <user>U61KCTX8S</user>
    <text>do you bother?</text>
  </message>
  <message>
    <ts>2017-06-29T11:42:43.937575</ts>
    <user>U0K0TFQLW</user>
    <text>when they make sense</text>
  </message>
  <message>
    <ts>2017-06-29T11:44:49.992588</ts>
    <user>U0K0TFQLW</user>
    <text>whether to write tests and what kind of tests to write depends on how much time I have, what I'm writing, and what the lifespan of the code is expected to be</text>
  </message>
  <message>
    <ts>2017-06-29T11:45:06.000309</ts>
    <user>U0K0TFQLW</user>
    <text>things like a compiler for a dsl ends up with a lot of tests</text>
  </message>
  <message>
    <ts>2017-06-29T11:45:27.009964</ts>
    <user>U61KCTX8S</user>
    <text>I see</text>
  </message>
  <message>
    <ts>2017-06-29T11:46:11.029889</ts>
    <user>U0K0TFQLW</user>
    <text>sometimes I'm wrong about how much time I have or what the lifespan of the code is going to be, and tests get added on a later iteration</text>
  </message>
  <message>
    <ts>2017-06-29T11:47:01.052288</ts>
    <user>U0K0TFQLW</user>
    <text>i.e. I expect something to be a one-off prototype and it ends up in production. it'll grow tests sooner rather than later so I can be confident about happy paths when I need to make changes.</text>
  </message>
  <message>
    <ts>2017-06-29T11:48:19.087680</ts>
    <user>U61KCTX8S</user>
    <text>today i had the following problem: after one day braek of coding nothing worked,something was fucked up, i needed 3 hours to get it back to life</text>
  </message>
  <message>
    <ts>2017-06-29T11:48:51.102525</ts>
    <user>U0K0TFQLW</user>
    <text>that seems like a git-diff kinda problem</text>
  </message>
  <message>
    <ts>2017-06-29T11:49:17.114001</ts>
    <user>U61KCTX8S</user>
    <text>last time i wordked for corporate i solved this problem in that everyday one hour before going home i started to clean up and do notes about everything that was doing problems</text>
  </message>
  <message>
    <ts>2017-06-29T11:49:51.129522</ts>
    <user>U61KCTX8S</user>
    <text>and put a piece of paper describing these problems on my keyboard</text>
  </message>
  <message>
    <ts>2017-06-29T11:50:06.136315</ts>
    <user>U61KCTX8S</user>
    <text>i think it'[s rather a psychological problem than a git one :smile:</text>
  </message>
  <message>
    <ts>2017-06-29T11:50:47.154796</ts>
    <user>U0K0TFQLW</user>
    <text>I find that only really happens to me if I'm not constantly evaling my code and tests during development. i.e. if I spend 3 hours just writing code without evaling for some reason. that code will take much longer to get working than if I had just been evaling the code and my tests while going.</text>
  </message>
  <message>
    <ts>2017-06-29T11:52:03.188554</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U61KCTX8S&gt; but if you had working code one day and two days later your code doesn't work, isn't the solution just to stash, revert to the working code, make sure it still works like you expect, then diff your stash and that working code?</text>
  </message>
  <message>
    <ts>2017-06-29T11:52:09.190979</ts>
    <user>U61KCTX8S</user>
    <text>i think you undrerstand my problems, i am curretly figuring out the perfect workflow for me</text>
  </message>
  <message>
    <ts>2017-06-29T11:52:12.192197</ts>
    <user>U0K0TFQLW</user>
    <text>that's what I meant by a git-diff problem</text>
  </message>
  <message>
    <ts>2017-06-29T11:55:50.290445</ts>
    <user>U0K0TFQLW</user>
    <text>sometimes I end up writing pseudo-code that is only somewhat working lisp when trying to get ideas out of my head. that's the kind of code that takes forever to get actually working. I often put it into its own namespace that isn't required anywhere (a persistent `*scratch*` of sorts) and then reference it in another coding session when I actually write tests and eval it as I'm going. I've found that if I try to get the code working, as opposed to using stream of consciousness code as "notes", I spend a ton of time just making it work. As a consequence, I try to be disciplined about making sure I eval everything as I go, to avoid the kind of scenarios where I write unusable code for several hours and then spend the rest of the day trying to make it usable.</text>
  </message>
  <message>
    <ts>2017-06-29T11:59:47.397837</ts>
    <user>U61KCTX8S</user>
    <text>how do you do the architecture?</text>
  </message>
  <message>
    <ts>2017-06-29T12:00:02.404926</ts>
    <user>U61KCTX8S</user>
    <text>also like a *scratch* ?</text>
  </message>
  <message>
    <ts>2017-06-29T12:00:11.410433</ts>
    <user>U61KCTX8S</user>
    <text>that gets proper?</text>
  </message>
  <message>
    <ts>2017-06-29T12:00:18.414029</ts>
    <user>U61KCTX8S</user>
    <text>or do you take a piece of paper?</text>
  </message>
  <message>
    <ts>2017-06-29T12:00:54.431444</ts>
    <user>U61KCTX8S</user>
    <text>it's really an interesting experience to write in clojure for me</text>
  </message>
  <message>
    <ts>2017-06-29T12:01:04.435956</ts>
    <user>U61KCTX8S</user>
    <text>recently i was coding the whole night</text>
  </message>
  <message>
    <ts>2017-06-29T12:01:17.442012</ts>
    <user>U61KCTX8S</user>
    <text>and in my opinion i did 1-2 weeks of work</text>
  </message>
  <message>
    <ts>2017-06-29T12:01:26.446227</ts>
    <user>U61KCTX8S</user>
    <text>in comparison with other languages</text>
  </message>
  <message>
    <ts>2017-06-29T12:01:41.452906</ts>
    <user>U61KCTX8S</user>
    <text>so i need to think totally different</text>
  </message>
  <message>
    <ts>2017-06-29T12:01:53.458586</ts>
    <user>U61KCTX8S</user>
    <text>i mean i have to organize my work different</text>
  </message>
  <message>
    <ts>2017-06-29T13:02:07.909763</ts>
    <user>U06HHF230</user>
    <text>depends what you mean by architecture &lt;@U61KCTX8S&gt; and what you're doing.  There are lots of orthogonal concerns; code layout (namespace hierarchy / load orders), runtime data flow, use of polymorphism, state, building for composition, structuring data etc…</text>
  </message>
  <message>
    <ts>2017-06-29T14:49:16.461276</ts>
    <user>U050ECB92</user>
    <text>Anyone ever generated a "compact ECDSA" signature (bitcoin style) from Java?</text>
  </message>
  <message>
    <ts>2017-06-29T14:50:07.480965</ts>
    <user>U050ECB92</user>
    <text>this is a #{64 65} byte signature -- as opposed to DER encoding which is #{70 71 72} byte sig</text>
  </message>
  <message>
    <ts>2017-06-29T14:51:04.503555</ts>
    <user>U050ECB92</user>
    <text>I've been using the bitcoinj library but can't figure out the incantation</text>
  </message>
  <message>
    <ts>2017-06-29T15:12:04.989695</ts>
    <user>U5LPUJ7AP</user>
    <text>&lt;@U0567Q30W&gt; Any way to temporarily disable paredit to make parens balanced again after pasting unbalanced parens or deleting code leaving it unbalanced?</text>
  </message>
  <message>
    <ts>2017-06-29T15:15:50.071324</ts>
    <user>U3GJHS5DY</user>
    <text>bottom right is a menu that lets you change your structural editing pattern</text>
  </message>
  <message>
    <ts>2017-06-29T15:16:17.081183</ts>
    <user>U3GJHS5DY</user>
    <text>turn to Off -&amp;gt; fix -&amp;gt; turn back to paredit</text>
  </message>
  <message>
    <ts>2017-06-29T15:16:25.083790</ts>
    <user>U3GJHS5DY</user>
    <text>also there is a &lt;#C0744GXCJ|cursive&gt; fyi</text>
  </message>
  <message>
    <ts>2017-06-29T15:16:59.096677</ts>
    <user>U3GJHS5DY</user>
    <text>there might be a quicker way though ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-06-29T15:18:30.129838</ts>
    <user>U5LPUJ7AP</user>
    <text>I know about the menu, but I was thinking about, CTRL + "(" or something (tried that)</text>
  </message>
  <message>
    <ts>2017-06-29T15:18:35.131571</ts>
    <user>U5LPUJ7AP</user>
    <text>Thanks for the channel</text>
  </message>
  <message>
    <ts>2017-06-29T15:18:38.132627</ts>
    <user>U3GJHS5DY</user>
    <text>ah ya no idea</text>
  </message>
  <message>
    <ts>2017-06-29T15:20:30.173028</ts>
    <user>U3GJHS5DY</user>
    <text>Toggle Structural Editing Style in keymaps &lt;@U5LPUJ7AP&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T15:21:07.185815</ts>
    <user>U5LPUJ7AP</user>
    <text>Let's give it a try!</text>
  </message>
  <message>
    <ts>2017-06-29T15:22:16.211359</ts>
    <user>U5LPUJ7AP</user>
    <text>That's wonderful :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T15:28:09.339141</ts>
    <user>U0W0JDY4C</user>
    <text>i often find myself with too many options to get something "polymorphic" done in clojure.. was wondering if someone could speak to this:

say I need to switch on a data's type. there's the standard map approach {:type :some-custom-type}. then you can wrap that `:type` with a more formal `multimethod` and `defmethod :type/foo :type/bar, etc.`. you can also create a record to further formalize the map, and thus get access to things like `(instance?  _)`. you can also define a protocol for the various types and gain access to things like `(satisfies? _)`. now with spec.alpha you can go another step and do things like `(if (s/conforms? _) ...)`. 

surely there's a good blog post or two out there illuminating such matters… but every time I reach for polymorphism i find myself almost paralyzed with options, not really sure which is best in each case.</text>
  </message>
  <message>
    <ts>2017-06-29T15:30:25.389103</ts>
    <user>U5LPUJ7AP</user>
    <text>you'll love this &lt;https://leanpub.com/clojurepolymorphism/&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T15:30:36.392917</ts>
    <user>U5LPUJ7AP</user>
    <text>i was asking myself the same question when i stumbled upon that</text>
  </message>
  <message>
    <ts>2017-06-29T15:31:49.420359</ts>
    <user>U0W0JDY4C</user>
    <text>oh neat-o .. ill definitely take a look</text>
  </message>
  <message>
    <ts>2017-06-29T15:32:22.432486</ts>
    <user>U5LPUJ7AP</user>
    <text>even the sample is very helpful</text>
  </message>
  <message>
    <ts>2017-06-29T15:53:40.892430</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U0W0JDY4C&gt; I guess it boils down to the definition of "polymorphism". In Clojure you're not tied to any particular approach because you can dispatch on arbitrary fns, so you can have the equivalent of dispatching based on OO hierarchy (Java classes), nominal typing (your own taxonomy), structural typing (spec, etc) ...</text>
  </message>
  <message>
    <ts>2017-06-29T15:56:12.947551</ts>
    <user>U1LCB75M2</user>
    <text>While in other languages (most I guess?), polymorphism bundles type system + dispatch/pattern matching together</text>
  </message>
  <message>
    <ts>2017-06-29T18:46:10.995582</ts>
    <user>U61KCTX8S</user>
    <text>I'd like to run a couple of functions in my main function</text>
  </message>
  <message>
    <ts>2017-06-29T18:46:16.996756</ts>
    <user>U61KCTX8S</user>
    <text>in sequence</text>
  </message>
  <message>
    <ts>2017-06-29T18:46:19.997356</ts>
    <user>U61KCTX8S</user>
    <text>like</text>
  </message>
  <message>
    <ts>2017-06-29T18:46:22.998076</ts>
    <user>U61KCTX8S</user>
    <text>-main (</text>
  </message>
  <message>
    <ts>2017-06-29T18:46:27.998981</ts>
    <user>U61KCTX8S</user>
    <text>(func1)</text>
  </message>
  <message>
    <ts>2017-06-29T18:46:31.000003</ts>
    <user>U61KCTX8S</user>
    <text>(func2)</text>
  </message>
  <message>
    <ts>2017-06-29T18:46:32.000189</ts>
    <user>U61KCTX8S</user>
    <text>)</text>
  </message>
  <message>
    <ts>2017-06-29T18:46:43.002348</ts>
    <user>U61KCTX8S</user>
    <text>how do i do this?</text>
  </message>
  <message>
    <ts>2017-06-29T18:48:05.018851</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U61KCTX8S&gt; this slack has a message limit that, when hit, removes the messages. I'm not sure whether multiple short messages like yours are counted as one, or as many, but consider combining them into a single, formatted message (a nice bonus is, they are more readable). just fyi</text>
  </message>
  <message>
    <ts>2017-06-29T18:48:40.025569</ts>
    <user>U1ALMRBLL</user>
    <text>to answer your question — what does "I'd like to run a couple of functions" mean exactly? What you've posted certainly does just that. But what is the point?</text>
  </message>
  <message>
    <ts>2017-06-29T18:50:14.044094</ts>
    <user>U1ALMRBLL</user>
    <text>```
(defn -main []
  (func1)
  (func2))
```
The result of the above will be whatever `(func2)` evaluates to. Of course, if `(func1)` produces side-effects (I/O, etc), these side-effects will occur.</text>
  </message>
  <message>
    <ts>2017-06-29T18:58:37.144285</ts>
    <user>U1CTH1TUY</user>
    <text>*unless `(func1)` produces a lazy sequence which would never be realized.</text>
  </message>
  <message>
    <ts>2017-06-29T19:02:55.196638</ts>
    <user>U61KCTX8S</user>
    <text>you are right, it didnt compile because of some other mistake</text>
  </message>
  <message>
    <ts>2017-06-29T19:02:56.196933</ts>
    <user>U61KCTX8S</user>
    <text>but</text>
  </message>
  <message>
    <ts>2017-06-29T19:03:01.197886</ts>
    <user>U61KCTX8S</user>
    <text>(defn -main
  "This should be pretty simple."
  []
  (
   (println "hallo")
   (println "hallo2")
  ))</text>
  </message>
  <message>
    <ts>2017-06-29T19:03:10.199652</ts>
    <user>U61KCTX8S</user>
    <text>prints both hellos</text>
  </message>
  <message>
    <ts>2017-06-29T19:03:22.202029</ts>
    <user>U61KCTX8S</user>
    <text>but gives after it a null pointer exceptoin</text>
  </message>
  <message>
    <ts>2017-06-29T19:04:14.211998</ts>
    <user>U1ALMRBLL</user>
    <text>yes, try this, and see the difference:
```(defn mainnn
  "This should be pretty simple."
  []
  (println "hallo")
  (println "hallo2"))```</text>
  </message>
  <message>
    <ts>2017-06-29T19:05:12.223044</ts>
    <user>U1ALMRBLL</user>
    <text>You have an extra paren before the first `println`. This evaluates the result of the first `(println "hallo")`, which is `nil`, as a function, and this is what creates the NPE.</text>
  </message>
  <message>
    <ts>2017-06-29T19:05:22.225048</ts>
    <user>U61KCTX8S</user>
    <text>i see</text>
  </message>
  <message>
    <ts>2017-06-29T19:08:11.256381</ts>
    <user>U61KCTX8S</user>
    <text>thanks, i nearly solved my problem</text>
  </message>
  <message>
    <ts>2017-06-29T19:08:43.262386</ts>
    <user>U61KCTX8S</user>
    <text>i'll come later back to it after I enjoy some nightlife in Wrocław</text>
  </message>
  <message>
    <ts>2017-06-29T19:08:46.262804</ts>
    <user>U61KCTX8S</user>
    <text>Cheers :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-29T19:49:50.685103</ts>
    <user>U1C4WJMT5</user>
    <text>Hello, I have a small question about spec. How does one specify a constant value in a regex spec? Like a vector that always must start with a keyword. I can do something like this `(spec/cat :type #{:message} :contents string?)` (as part of a multi spec), but is there a way to say the first thing in the sequence must be `:message`?</text>
  </message>
  <message>
    <ts>2017-06-29T20:30:20.044530</ts>
    <user>U066TMAKS</user>
    <text>is there an idiomatic way to create a keyword in the current namespace, or is `(keyword (str *ns*) s)` pretty much it?</text>
  </message>
  <message>
    <ts>2017-06-29T20:30:35.046777</ts>
    <user>U0NCTKEV8</user>
    <text>don't do that</text>
  </message>
  <message>
    <ts>2017-06-29T20:31:19.052743</ts>
    <user>U0NCTKEV8</user>
    <text>the behavior of `*ns*` is almost certainly not what you expect it to be</text>
  </message>
  <message>
    <ts>2017-06-29T20:31:28.053905</ts>
    <user>U066TMAKS</user>
    <text>you might have better luck asking in &lt;#C1B1BB2Q3|clojure-spec&gt;</text>
  </message>
  <message>
    <ts>2017-06-29T20:31:38.055297</ts>
    <user>U0NCTKEV8</user>
    <text>there is no such thing as the "current namespace" at runtime</text>
  </message>
  <message>
    <ts>2017-06-29T20:32:42.064090</ts>
    <user>U066TMAKS</user>
    <text>what about at compile time? is there a shortcut for a keyword in the namespace I'm writing the code in? something like `::`. I could do `(keyword "app.models.user" s)` but that seems verbose and potentially brittle to refactoring</text>
  </message>
  <message>
    <ts>2017-06-29T20:34:43.080049</ts>
    <user>U051SS2EU</user>
    <text>if you want it to be the namspace calling your function/macro then `*ns*` works - but that won't give you the ns your definition came from</text>
  </message>
  <message>
    <ts>2017-06-29T20:39:55.120411</ts>
    <user>U0NCTKEV8</user>
    <text>I am not sure how to read that, but it doesn't seem to be correct</text>
  </message>
  <message>
    <ts>2017-06-29T20:40:16.123248</ts>
    <user>U0NCTKEV8</user>
    <text>`*ns*` is set by the compiler when *compiling* code, when running code its value is arbitrary</text>
  </message>
  <message>
    <ts>2017-06-29T20:41:13.130577</ts>
    <user>U051SS2EU</user>
    <text>sorry, right - it will be the arbitrary value of `*ns*` at runtime for a function, but for a macro it will be the ns being defined</text>
  </message>
  <message>
    <ts>2017-06-29T20:41:20.131489</ts>
    <user>U0NCTKEV8</user>
    <text>some execution environments preserver the value of `*ns*` between compilations (the repl), but common environments do not</text>
  </message>
  <message>
    <ts>2017-06-29T20:41:44.134460</ts>
    <user>U0NCTKEV8</user>
    <text>macro expansion happens at compile time, so macros can observe a meaningful value of `*ns*`</text>
  </message>
  <message>
    <ts>2017-06-29T20:43:59.151739</ts>
    <user>U0NCTKEV8</user>
    <text>when a function is being compiled, the compiler uses `*ns*` to figure out which vars it uses, but those vars are then embedded in the generated bytecode, and when the bytecode is run, it never looks at the value of `*ns*` again</text>
  </message>
  <message>
    <ts>2017-06-29T20:59:49.274112</ts>
    <user>U04V70XH6</user>
    <text>What we do at World Singles is to have `(def ^:private my-ns *ns*)` near the top of each namespace where we need the "current namespace" and then use `my-ns` instead of `*ns*`.</text>
  </message>
  <message>
    <ts>2017-06-29T21:00:23.280432</ts>
    <user>U04V70XH6</user>
    <text>That way it's bound to the file's namespace at load/compile time and doesn't change during program execution.</text>
  </message>
  <message>
    <ts>2017-06-29T22:17:30.865249</ts>
    <user>U1WMPA45U</user>
    <text>why does `(get-in {:a (vector {:b :c})} [:a 0 :b])` work, but `(get-in {:a (list {:b :c})} [:a 0 :b])` doesn't?</text>
  </message>
  <message>
    <ts>2017-06-29T22:18:10.869937</ts>
    <user>U1WMPA45U</user>
    <text>ah, I guess the answer is "lists aren't associative, but vectors are"</text>
  </message>
  <message>
    <ts>2017-06-29T22:18:37.873055</ts>
    <user>U1WMPA45U</user>
    <text>not that that's all that satisfactory, but it makes sense</text>
  </message>
  <message>
    <ts>2017-06-29T23:50:42.485815</ts>
    <user>U06DQC6MA</user>
    <text>&lt;@U1WMPA45U&gt; it's good to have that choice, no?</text>
  </message>
  <message>
    <ts>2017-06-30T01:26:06.093004</ts>
    <user>U621RMVAN</user>
    <text>hi everyone</text>
  </message>
  <message>
    <ts>2017-06-30T01:26:14.093788</ts>
    <user>U621RMVAN</user>
    <text>is this a good place to ask newbie questions?</text>
  </message>
  <message>
    <ts>2017-06-30T01:26:40.096666</ts>
    <user>U051SS2EU</user>
    <text>there's &lt;#C053AK3F9|beginners&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T01:27:05.099446</ts>
    <user>U621RMVAN</user>
    <text>cool, thank you</text>
  </message>
  <message>
    <ts>2017-06-30T01:30:08.120973</ts>
    <user>U61KCTX8S</user>
    <text>I asked beginner questions here :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T01:30:14.121857</ts>
    <user>U61KCTX8S</user>
    <text>and nobody complained!</text>
  </message>
  <message>
    <ts>2017-06-30T01:47:11.239334</ts>
    <user>U04V70XH6</user>
    <text>Depends on the audience and the time of day. But we _try_ to encourage focus to ask beginner Qs in &lt;#C053AK3F9|beginners&gt; so folks can opt-in/-out.</text>
  </message>
  <message>
    <ts>2017-06-30T01:50:33.262966</ts>
    <user>U06DQC6MA</user>
    <text>What I remember of clojure IRC was that you were free to ask beginner questions. I know because I asked many of them. I'm not sure the distinction. I'm still a beginner.</text>
  </message>
  <message>
    <ts>2017-06-30T01:53:11.281365</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U06DQC6MA&gt; We're all beginners on different topics :slightly_smiling_face: The main difference from IRC (apart from the wonderful Slack UI/UX) is the plethora of channels here... (and this is getting meta so &lt;#C03RZGPG3|off-topic&gt; if we really want to go down that path).</text>
  </message>
  <message>
    <ts>2017-06-30T03:29:10.165494</ts>
    <user>U1Q12R4F2</user>
    <text>Hello everyone, I have an app which generates documents (for example blog posts). Each document has an ID and consists of Text, Tables, Lists etc. and is completely defined in EDN. I want to store these documents but due to not consistent, changing keys it is not easy to store this in a RDBMS-Table. So at the moment I have a table in my h2db which has two colums "ID" and "data", where data is a cblob and stores the edn serialized as a string..
Is there a better "clojury"-way to store edn documents?</text>
  </message>
  <message>
    <ts>2017-06-30T06:01:19.331682</ts>
    <user>U0J30HBRS</user>
    <text>&lt;@U1Q12R4F2&gt; Maybe serialize it using something like &lt;https://github.com/ptaoussanis/nippy/blob/master/README.md&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T06:20:53.596044</ts>
    <user>U5H74UNSF</user>
    <text>&lt;@U1Q12R4F2&gt; there's also &lt;https://github.com/cognitect/transit-format&gt; which is what we're using which is a good fit if you want to use it in a browser because it can be used on top of json</text>
  </message>
  <message>
    <ts>2017-06-30T06:22:39.618065</ts>
    <user>U0J30HBRS</user>
    <text>&lt;@U5H74UNSF&gt; &lt;@U1Q12R4F2&gt; However, transit isn't for storing data (yet)
&amp;gt; NOTE: Transit is a work in progress and may evolve based on feedback. As a result, while Transit is a great option for transferring data between applications, it should not yet be used for storing data durably over time. This recommendation will change when the specification is complete.</text>
  </message>
  <message>
    <ts>2017-06-30T06:25:42.655941</ts>
    <user>U5H74UNSF</user>
    <text>&lt;@U0J30HBRS&gt; right… we just ignored that. it does seem fairly stable at this point there's not much activity in the repo anymore. Was wondering if that recommendation was going to change…</text>
  </message>
  <message>
    <ts>2017-06-30T06:37:57.808320</ts>
    <user>U1Q12R4F2</user>
    <text>&lt;@U0J30HBRS&gt; I was thinking about using nippy, because of their built-in compression functionality.  
But my main concern is not the serializing part, but using the clob or blob for storing the data. Accessing the document doesn't feel native (sql query, reading clob, deserialize data). I hoped there was an mongodb-equivalent for clojure/edn :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-06-30T06:45:02.893604</ts>
    <user>U61HA86AG</user>
    <text>what about datomic?</text>
  </message>
  <message>
    <ts>2017-06-30T06:49:17.945273</ts>
    <user>U1Q12R4F2</user>
    <text>Its a low budget project, Im looking primarily for open/free software</text>
  </message>
  <message>
    <ts>2017-06-30T06:50:25.958736</ts>
    <user>U5XMV6DQT</user>
    <text>datascript</text>
  </message>
  <message>
    <ts>2017-06-30T06:53:54.001390</ts>
    <user>U61HA86AG</user>
    <text>datomic starter is free</text>
  </message>
  <message>
    <ts>2017-06-30T06:57:02.040302</ts>
    <user>U1Q12R4F2</user>
    <text>&lt;@U61HA86AG&gt;: but after 1 year there will be no updates and my project relys on an old unmaintained version, if I understand the description correctly?</text>
  </message>
  <message>
    <ts>2017-06-30T06:58:37.060133</ts>
    <user>U050SC7SV</user>
    <text>Yup</text>
  </message>
  <message>
    <ts>2017-06-30T06:59:39.072749</ts>
    <user>U050SC7SV</user>
    <text>No go for serious work imho</text>
  </message>
  <message>
    <ts>2017-06-30T07:00:06.078970</ts>
    <user>U61HA86AG</user>
    <text>ah didnt know that, havent used it myself yet :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-06-30T07:53:39.720352</ts>
    <user>U5YHX0TQV</user>
    <text>maybe it's time for an edn datatype in postgresql :wink:</text>
  </message>
  <message>
    <ts>2017-06-30T07:53:52.722894</ts>
    <user>U5YHX0TQV</user>
    <text>like jsonb</text>
  </message>
  <message>
    <ts>2017-06-30T09:35:00.379840</ts>
    <user>U1LJAM1U7</user>
    <text>&lt;@U1ALMRBLL&gt; &lt;@U04V70XH6&gt; due to non technical reasons, my PR &lt;https://github.com/clojure/clojure-site/pull/194&gt; did not make it. If anybody could adopt it, it would be great :morning:</text>
  </message>
  <message>
    <ts>2017-06-30T09:36:04.402412</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U1Q12R4F2&gt; storing fressian in a BLOB or edn in a CLOB is fine as long as you don't need atomic updates or native queries, otherwise I strongly advise against it (you may then want to use JSON support in a sql db, or a document store). There is no such thing as a 'clojury' way of designing a database imho - this should be language independent :)</text>
  </message>
  <message>
    <ts>2017-06-30T09:52:47.762294</ts>
    <user>U2J4FRT2T</user>
    <text>I still think that will be awesome do something like `:find ?edn :where [?e :graph/data ?edn] [(contains? ?edn :foo) true]`</text>
  </message>
  <message>
    <ts>2017-06-30T09:56:04.837563</ts>
    <user>U06GS6P1N</user>
    <text>There is no way to make this efficient in Datomic currently</text>
  </message>
  <message>
    <ts>2017-06-30T09:57:34.872203</ts>
    <user>U09FL65DK</user>
    <text>starting nREPL for the first time on this machine says "could not transfer ... unable to find valid certification path to requested target". We have a custom certificate at work that sits at top of everything. What should I do to get nREPL (is it using maven behind?) to use it when downloading artifacts? E.g. in `pip` I need to add in `~/.pip/pip.conf` a line saying `cert = /etc/ssl/certs/ca-certificates.crt`</text>
  </message>
  <message>
    <ts>2017-06-30T10:04:09.030822</ts>
    <user>U051SS2EU</user>
    <text>by nrepl do you mean leiningen?</text>
  </message>
  <message>
    <ts>2017-06-30T10:04:40.043423</ts>
    <user>U051SS2EU</user>
    <text>lein does not use maven, but it speaks to the same repos, you probably need to make sure your java certificates are properly set up</text>
  </message>
  <message>
    <ts>2017-06-30T10:06:05.075868</ts>
    <user>U1Q12R4F2</user>
    <text>val_waeselynck: updates are rarely and only done from one person (the document author). Native queries aren't needed. The documents are self-contained, so there are no dependencies to other tables. 
But inside the document there are dependencies, thats why I was unsure if I should break the document hash-map into normalized database tables or just store the whole document in  a clob just like it is stored at runtime.
I think I'll stick with the clob solution.</text>
  </message>
  <message>
    <ts>2017-06-30T10:08:50.138232</ts>
    <user>U09FL65DK</user>
    <text>&lt;@U051SS2EU&gt; I installed leiningen and ran `cider-jack-in` in a `.clj` file in emacs</text>
  </message>
  <message>
    <ts>2017-06-30T10:09:36.156369</ts>
    <user>U051SS2EU</user>
    <text>right, but nrepl doesn't download things, leiningen does</text>
  </message>
  <message>
    <ts>2017-06-30T10:10:06.167615</ts>
    <user>U09FL65DK</user>
    <text>I get that, but I don't know where to stick in the certificate</text>
  </message>
  <message>
    <ts>2017-06-30T10:10:13.170209</ts>
    <user>U051SS2EU</user>
    <text>anyway, depending on your OS there's various ways to make sure your java certs are OK</text>
  </message>
  <message>
    <ts>2017-06-30T10:11:00.187921</ts>
    <user>U09FL65DK</user>
    <text>well if you have a link or something, hit me :slightly_smiling_face: ubuntu</text>
  </message>
  <message>
    <ts>2017-06-30T10:11:54.208925</ts>
    <user>U09FL65DK</user>
    <text>we use maven here but it's all proxied through a locally set up mirror</text>
  </message>
  <message>
    <ts>2017-06-30T10:12:44.228591</ts>
    <user>U051SS2EU</user>
    <text>oh, that's the one I know `/var/lib/dpkg/info/ca-certificates-java.postinst configure`</text>
  </message>
  <message>
    <ts>2017-06-30T10:14:06.259570</ts>
    <user>U051SS2EU</user>
    <text>or perhaps this &lt;https://stackoverflow.com/a/33440168&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T10:14:57.279937</ts>
    <user>U09FL65DK</user>
    <text>that did write a lot of "Replacing ..." lines and a "done." in the end which didn't solve the problem</text>
  </message>
  <message>
    <ts>2017-06-30T10:15:54.302531</ts>
    <user>U051SS2EU</user>
    <text>what about the SO version?</text>
  </message>
  <message>
    <ts>2017-06-30T10:16:22.313470</ts>
    <user>U09FL65DK</user>
    <text>still a nope</text>
  </message>
  <message>
    <ts>2017-06-30T10:17:47.346491</ts>
    <user>U051SS2EU</user>
    <text>weird - is the cert installed in such a way that ubuntu ca-certificates would know about it / use it?</text>
  </message>
  <message>
    <ts>2017-06-30T10:18:06.354225</ts>
    <user>U051SS2EU</user>
    <text>because that should have fixed it if it is</text>
  </message>
  <message>
    <ts>2017-06-30T10:18:35.365638</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T10:19:20.383064</ts>
    <user>U09FL65DK</user>
    <text>yes it's correct, other package managers work fine with it</text>
  </message>
  <message>
    <ts>2017-06-30T10:19:28.386047</ts>
    <user>U09FL65DK</user>
    <text>(once I set the ca-file)</text>
  </message>
  <message>
    <ts>2017-06-30T10:19:41.391209</ts>
    <user>U051SS2EU</user>
    <text>no I'm saying add the ca-file to ubuntu itself</text>
  </message>
  <message>
    <ts>2017-06-30T10:19:52.395624</ts>
    <user>U051SS2EU</user>
    <text>then set up java's certs from ubuntu</text>
  </message>
  <message>
    <ts>2017-06-30T10:20:08.401907</ts>
    <user>U051SS2EU</user>
    <text>though, if you want to do it the tedious way you could also manually add that cert to java...</text>
  </message>
  <message>
    <ts>2017-06-30T10:20:32.411337</ts>
    <user>U09FL65DK</user>
    <text>the askubuntu link you sent is how we set up the certs in ubuntu</text>
  </message>
  <message>
    <ts>2017-06-30T10:20:49.418037</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://stackoverflow.com/a/28324237&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T10:21:02.423498</ts>
    <user>U051SS2EU</user>
    <text>then I have no idea what's wrong here</text>
  </message>
  <message>
    <ts>2017-06-30T10:23:02.471194</ts>
    <user>U09FL65DK</user>
    <text>the best option would be to add the mirrors we use for maven into my leiningen profile. I'm just not sure how to write it down. I'd need a ~/.m2/settings.xml to leiningen profile converter</text>
  </message>
  <message>
    <ts>2017-06-30T10:23:18.477304</ts>
    <user>U051SS2EU</user>
    <text>this isn't maven, lein doesn't use maven</text>
  </message>
  <message>
    <ts>2017-06-30T10:23:31.482379</ts>
    <user>U051SS2EU</user>
    <text>it can access maven repos... but doesn't use maven itself</text>
  </message>
  <message>
    <ts>2017-06-30T10:23:47.488663</ts>
    <user>U051SS2EU</user>
    <text>sorry, misread</text>
  </message>
  <message>
    <ts>2017-06-30T10:24:10.497551</ts>
    <user>U051SS2EU</user>
    <text>this should be system level config properly propagated to java, it shouldn't even be leiningen's concern</text>
  </message>
  <message>
    <ts>2017-06-30T10:25:11.521910</ts>
    <user>U09FL65DK</user>
    <text>it's hard to tell where the problem lies, it could even be that the network here is deliberately blocking direct access to the repos since they want us to use the supplied mirrors</text>
  </message>
  <message>
    <ts>2017-06-30T10:31:32.679104</ts>
    <user>U051SS2EU</user>
    <text>one thing to rule out would be that ca-certificates.postinst or the purge / reinstall of ca-certs didn't undo your custom cert addition</text>
  </message>
  <message>
    <ts>2017-06-30T10:32:30.703069</ts>
    <user>U051SS2EU</user>
    <text>there might be a less heavy handed way to add the cert and also make sure it updates java without doing a purge / install cycle...</text>
  </message>
  <message>
    <ts>2017-06-30T10:38:16.841464</ts>
    <user>U09FL65DK</user>
    <text>I managed to add our mirror to `profiles.clj` but it only mirrors the maven repo, so I get the same error when I get to dependencies that are on clojars :disappointed:</text>
  </message>
  <message>
    <ts>2017-06-30T10:51:56.175930</ts>
    <user>U09FL65DK</user>
    <text>&lt;@U051SS2EU&gt; I found the culprit - the certificates are OK, for some reason a bad java is being used. Now I just need to find out who picked that version and why</text>
  </message>
  <message>
    <ts>2017-06-30T10:55:32.265119</ts>
    <user>U051SS2EU</user>
    <text>in terms of the wrong java being installed, or the wrong one picked out of those installed?</text>
  </message>
  <message>
    <ts>2017-06-30T10:56:17.283257</ts>
    <user>U051SS2EU</user>
    <text>if the latter, that can be fixed with update-alternatives</text>
  </message>
  <message>
    <ts>2017-06-30T11:02:00.432208</ts>
    <user>U09FL65DK</user>
    <text>the wrong one picked, because I installed `lein` via `nix` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T11:04:30.495364</ts>
    <user>U051SS2EU</user>
    <text>that's not what decides it is it? I mean lein just looks for the first java on path</text>
  </message>
  <message>
    <ts>2017-06-30T11:04:36.497828</ts>
    <user>U051SS2EU</user>
    <text>unless nix changes that...</text>
  </message>
  <message>
    <ts>2017-06-30T11:07:47.579287</ts>
    <user>U09FL65DK</user>
    <text>I'm pretty sure `nix` changes it since they are all about being reproducible and immutable etc. Also `command -v java` from emacs returns `/usr/bin/java` which points to ubuntu java, not the nix one</text>
  </message>
  <message>
    <ts>2017-06-30T11:08:02.585486</ts>
    <user>U09FL65DK</user>
    <text>all in all I just got  it to wok :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-06-30T11:15:04.758868</ts>
    <user>U051SS2EU</user>
    <text>using lein via a package manager seems fishy to me, sort of like using the jvm inside a container - I know there are valid reasons, but lein already manages its version better than most package managers will and the jvm already isolates differences between environments...</text>
  </message>
  <message>
    <ts>2017-06-30T11:22:49.948895</ts>
    <user>U1S4F3M4M</user>
    <text>Hi, all! Does anyone have some good recommendations on resources covering/showing proper use of records and protocols? I've been using Clojure happily for three years without them, mostly on a hobby basis, and feel that I understand them pretty well, but when I start using them or thinking about how to do it, I feel like I'm going all OOP. Hopefully the question makes sense.</text>
  </message>
  <message>
    <ts>2017-06-30T11:30:43.143835</ts>
    <user>U064WBEPL</user>
    <text>&lt;@U1S4F3M4M&gt; I cover this a bit in my presentations about Component &lt;https://stuartsierra.com/presentations&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T11:32:51.196848</ts>
    <user>U1S4F3M4M</user>
    <text>&lt;@U064WBEPL&gt; Thanks, I'll have a look.</text>
  </message>
  <message>
    <ts>2017-06-30T11:42:36.431298</ts>
    <user>U1S4F3M4M</user>
    <text>A follow up question: In my current project where I believe records/protocols is the good fit, I start out with CSV records with lots of fields. Many are not always present. Is it ok to create a record with just a few fields as required (eg. "logtime" and "id") and the rest as optional, event though many other fields are highly useful and used in calculation?</text>
  </message>
  <message>
    <ts>2017-06-30T11:43:19.448410</ts>
    <user>U051SS2EU</user>
    <text>that's a pretty normal way to use records - adding fields that aren't defined on them</text>
  </message>
  <message>
    <ts>2017-06-30T11:43:53.461744</ts>
    <user>U051SS2EU</user>
    <text>but if you know what they will all be, you could just have them all nil by default...</text>
  </message>
  <message>
    <ts>2017-06-30T11:46:22.522091</ts>
    <user>U1S4F3M4M</user>
    <text>&lt;@U051SS2EU&gt; Thanks. What's the benefit of having them be nil? Would that make the generated -&amp;gt;MyRecord requiring a lot of paramters, and possibly not making it a MyRecord if you use map-&amp;gt;MyRecord if you provide a map missing some keys?</text>
  </message>
  <message>
    <ts>2017-06-30T11:46:26.524002</ts>
    <user>U064WBEPL</user>
    <text>&lt;@U1S4F3M4M&gt; Records are usually indicated when you also have Protocols (or interfaces) and you plan to have multiple different types of records implementing the same functions for polymorphic behavior.</text>
  </message>
  <message>
    <ts>2017-06-30T11:47:27.547863</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1S4F3M4M&gt; map-&amp;gt;MyRecord always makes a MyRecord, even for an empty map</text>
  </message>
  <message>
    <ts>2017-06-30T11:47:52.557327</ts>
    <user>U051SS2EU</user>
    <text>and yes, with more than ~4 fields I would always use map-&amp;gt;MyRecord rather than a positional constructor</text>
  </message>
  <message>
    <ts>2017-06-30T11:49:40.599716</ts>
    <user>U1S4F3M4M</user>
    <text>&lt;@U051SS2EU&gt; Thanks, the former was new to me. I guess I need to experiment and see how it goes.</text>
  </message>
  <message>
    <ts>2017-06-30T11:51:29.643449</ts>
    <user>U1S4F3M4M</user>
    <text>&lt;@U064WBEPL&gt; I guess my "fear" is to make everything a "method" instead of a function. &amp;lt;- My best description of where I feel it turns strange when using a functional language.</text>
  </message>
  <message>
    <ts>2017-06-30T11:55:29.736997</ts>
    <user>U064WBEPL</user>
    <text>&lt;@U1S4F3M4M&gt; You only need "methods" in Clojure if you need polymorphism: different behavior for different types, where the caller doesn't know which type it is.</text>
  </message>
  <message>
    <ts>2017-06-30T12:05:25.975755</ts>
    <user>U1S4F3M4M</user>
    <text>&lt;@U064WBEPL&gt; I believe that is the use case I have in my current project, hence the desire to finally dive into records and protocols. I'm using re-frame for the GUI, and tend to aim for generic code. In this case I'm presenting information where the GUI code displays :display, creates tooltip from :tooltip, sets react key from :react-key and so on. What these keys contains differs based on type. I like the way generic code makes it clearer what the code is trying to accomplish, without mixing in a lot of "how". Now the plan is to turn these keys (:display, :toolstip, :react-key, …) into method on a protocol like "Displayable". Anyway, thanks so much for the imput. Now I need to focus on dinner preparations.</text>
  </message>
  <message>
    <ts>2017-06-30T12:24:25.382512</ts>
    <user>U0W0JDY4C</user>
    <text>what's the idiomatic way to guarantee some unknown value is inside a sequence, where that value could or could not already be in a sequence?</text>
  </message>
  <message>
    <ts>2017-06-30T12:25:14.399304</ts>
    <user>U0W0JDY4C</user>
    <text>```
(into [] val) ;; fails if val isnt already in a seq
(conj [] val) ;; always works but might nest, i.e. [[val...]]
```</text>
  </message>
  <message>
    <ts>2017-06-30T12:25:23.402652</ts>
    <user>U0W0JDY4C</user>
    <text>(oh and not be nested, if already in a seq)*</text>
  </message>
  <message>
    <ts>2017-06-30T12:25:38.408079</ts>
    <user>U0W0JDY4C</user>
    <text>is it simply `(flatten (conj`?</text>
  </message>
  <message>
    <ts>2017-06-30T12:25:44.410128</ts>
    <user>U051SS2EU</user>
    <text>(if (sequential? val) val [val])</text>
  </message>
  <message>
    <ts>2017-06-30T12:25:50.411945</ts>
    <user>U051SS2EU</user>
    <text>flatten is terrible</text>
  </message>
  <message>
    <ts>2017-06-30T12:27:03.437881</ts>
    <user>U064X3EF3</user>
    <text>generally the best answer though is to arrange your data so this doesn't occur in the first place</text>
  </message>
  <message>
    <ts>2017-06-30T12:27:15.442031</ts>
    <user>U051SS2EU</user>
    <text>the best thing is to not write code that sometimes returns a collection and sometimes a single item (but I realize you aren't always the one who implemented the source of the data)</text>
  </message>
  <message>
    <ts>2017-06-30T12:27:43.451999</ts>
    <user>U064X3EF3</user>
    <text>things that are either &amp;lt;foo&amp;gt; or &amp;lt;collection of foo&amp;gt; tend to be always broken and/or special cased</text>
  </message>
  <message>
    <ts>2017-06-30T12:27:51.455077</ts>
    <user>U0W0JDY4C</user>
    <text>^ agree with alexmiller, except in this case it's relating to an `(assoc` vs an `(assoc-in`.. as in someone might hand me a value to put at `[:foo :bar]` or just `:bar`</text>
  </message>
  <message>
    <ts>2017-06-30T12:28:02.458902</ts>
    <user>U051SS2EU</user>
    <text>and they create contagious complexity in consuming code...</text>
  </message>
  <message>
    <ts>2017-06-30T12:28:24.466972</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; there's a reason assoc and assoc-in are two different functions though</text>
  </message>
  <message>
    <ts>2017-06-30T12:29:37.492477</ts>
    <user>U0W0JDY4C</user>
    <text>if you're familiar with http patch semantics, i'm trying to implement something following the `{:op "replace" :path "/foo/bar" :value "bob"}`. the issue is with `:path`, which could be some arbitrarily nested path into a resource</text>
  </message>
  <message>
    <ts>2017-06-30T12:30:12.505327</ts>
    <user>U0W0JDY4C</user>
    <text>so i figure assoc-in with a "guaranteed to at least be a sequence" is a good solution</text>
  </message>
  <message>
    <ts>2017-06-30T12:30:22.508819</ts>
    <user>U051SS2EU</user>
    <text>always turn path into a collection, even if it's a one item coll</text>
  </message>
  <message>
    <ts>2017-06-30T12:30:43.516435</ts>
    <user>U0W0JDY4C</user>
    <text>hmm .. that sounds smarter</text>
  </message>
  <message>
    <ts>2017-06-30T12:31:11.526319</ts>
    <user>U1ALMRBLL</user>
    <text>and it's (computationally) cheap, versus the complexity that results otherwise</text>
  </message>
  <message>
    <ts>2017-06-30T12:31:48.539572</ts>
    <user>U0W0JDY4C</user>
    <text>thanks guys, great help</text>
  </message>
  <message>
    <ts>2017-06-30T12:43:57.791050</ts>
    <user>U0564EGNY</user>
    <text>does anyone know of alternatives to slingshot for easily creating custom exceptions, or is it pretty much "de facto" if you don't want to compile a bunch of custom exception types?</text>
  </message>
  <message>
    <ts>2017-06-30T12:48:48.892497</ts>
    <user>U050SC7SV</user>
    <text>ex-info and ex-data is all you need</text>
  </message>
  <message>
    <ts>2017-06-30T12:57:26.172681</ts>
    <user>U0HM5MJ5V</user>
    <text>&lt;@U0W0JDY4C&gt; i think of e.g. transforming a scalar to a single element collection as desugaring that happens in the first layer of code that processes some input</text>
  </message>
  <message>
    <ts>2017-06-30T13:03:03.358769</ts>
    <user>U2J4FRT2T</user>
    <text>not efficient.. just possible :stuck_out_tongue_winking_eye:</text>
  </message>
  <message>
    <ts>2017-06-30T13:06:47.478762</ts>
    <user>U056QFNM5</user>
    <text>&lt;@U0564EGNY&gt; - I've used `hara.event` before and enjoyed it. It's a little more than custom exceptions, though. It changes how control flow works with exceptions to be more like how Common Lisp does exceptions.</text>
  </message>
  <message>
    <ts>2017-06-30T14:26:03.966417</ts>
    <user>U5NAUMCAD</user>
    <text>Hi all, Is there any way to create a hashmap interactively. I mean, I have the keys and values in separate lists and I need to associate as a hashmap</text>
  </message>
  <message>
    <ts>2017-06-30T14:26:23.976421</ts>
    <user>U5NAUMCAD</user>
    <text>for instance I have a list keys with 1 2 3</text>
  </message>
  <message>
    <ts>2017-06-30T14:26:42.986227</ts>
    <user>U5NAUMCAD</user>
    <text>and values list "one" "two" "three"</text>
  </message>
  <message>
    <ts>2017-06-30T14:27:11.000898</ts>
    <user>U5NAUMCAD</user>
    <text>and need to create {:1 "one" :2 "two" :3 "three"}</text>
  </message>
  <message>
    <ts>2017-06-30T14:27:27.009037</ts>
    <user>U1CTH1TUY</user>
    <text>&lt;@U5NAUMCAD&gt; &lt;https://clojuredocs.org/clojure.core/zipmap&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T14:36:52.300900</ts>
    <user>U5NAUMCAD</user>
    <text>my problem is that I do not have an actual list</text>
  </message>
  <message>
    <ts>2017-06-30T14:37:12.311214</ts>
    <user>U5NAUMCAD</user>
    <text>I use a method to get each element of the list</text>
  </message>
  <message>
    <ts>2017-06-30T14:37:26.317961</ts>
    <user>U5NAUMCAD</user>
    <text>for instance I use doseq to get each value</text>
  </message>
  <message>
    <ts>2017-06-30T14:37:46.328624</ts>
    <user>U5NAUMCAD</user>
    <text>how can I create a vector with the elements of the Doseq?</text>
  </message>
  <message>
    <ts>2017-06-30T14:38:15.343054</ts>
    <user>U0NCTKEV8</user>
    <text>don't use doseq</text>
  </message>
  <message>
    <ts>2017-06-30T14:38:18.344631</ts>
    <user>U0NCTKEV8</user>
    <text>use reduce</text>
  </message>
  <message>
    <ts>2017-06-30T14:38:54.362748</ts>
    <user>U0NCTKEV8</user>
    <text>(reduce (fn [m k] (assoc m k (* 2 k)))  {} (range 10))</text>
  </message>
  <message>
    <ts>2017-06-30T14:41:16.433781</ts>
    <user>U1CTH1TUY</user>
    <text>Want to share code? Could you just wrap your method into a lazy-seq? a list where each item is the result of a function is still a list.</text>
  </message>
  <message>
    <ts>2017-06-30T15:06:27.190916</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5NAUMCAD&gt; aside from the other excellent answers, if your inputs are [:a :b :c] and [1 2 3] this is exactly what zipmap is for</text>
  </message>
  <message>
    <ts>2017-06-30T15:07:28.220087</ts>
    <user>U051SS2EU</user>
    <text>also, please don't use `:1` - the clojure reader accepts this keyword, but it's not actually valid, it's perfectly acceptable to use a number as a key in a hash-map if that's what you need</text>
  </message>
  <message>
    <ts>2017-06-30T15:14:18.408383</ts>
    <user>U1CTH1TUY</user>
    <text>Why isn't `:1` valid?</text>
  </message>
  <message>
    <ts>2017-06-30T15:15:11.432621</ts>
    <user>U051SS2EU</user>
    <text>the reader accepts it but the clojure docs rule it out</text>
  </message>
  <message>
    <ts>2017-06-30T15:15:19.436715</ts>
    <user>U051SS2EU</user>
    <text>which means that in the future the reader might stop accepting it</text>
  </message>
  <message>
    <ts>2017-06-30T15:15:53.452506</ts>
    <user>U051SS2EU</user>
    <text>I admit that's unlikely, but when we have the choice, I think it's better to not use things that clojure claims it shouldn't accept</text>
  </message>
  <message>
    <ts>2017-06-30T15:16:54.480301</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1CTH1TUY&gt; for example cljs read-string doesn't allow it</text>
  </message>
  <message>
    <ts>2017-06-30T15:17:07.486088</ts>
    <user>U051SS2EU</user>
    <text>and that's not a cljs bug, since clojure's docs already say it's not valid</text>
  </message>
  <message>
    <ts>2017-06-30T15:17:43.502106</ts>
    <user>U051SS2EU</user>
    <text>there's lots of things that accidentally work in clojure, but we shouldn't assume are intended</text>
  </message>
  <message>
    <ts>2017-06-30T15:23:11.649124</ts>
    <user>U051SS2EU</user>
    <text>```+cljs.user=&amp;gt; (cljs.reader/read-string ":1")
TypeError: Cannot read property '0' of null
+cljs.user=&amp;gt; (cljs.reader/read-string ":a")
:a
```</text>
  </message>
  <message>
    <ts>2017-06-30T15:23:19.652968</ts>
    <user>U098UL4QP</user>
    <text>i'm currently diagnosing some garbage collection issues and am wondering if maybe i should be using the oracle jvm instead of openjdk</text>
  </message>
  <message>
    <ts>2017-06-30T15:23:34.659333</ts>
    <user>U098UL4QP</user>
    <text>i cant find any evidence that it matters but i cant say for sure</text>
  </message>
  <message>
    <ts>2017-06-30T15:23:41.662532</ts>
    <user>U050ECB92</user>
    <text>it won't make a difference</text>
  </message>
  <message>
    <ts>2017-06-30T15:23:43.663252</ts>
    <user>U098UL4QP</user>
    <text>does anyone have any opinions on thi?</text>
  </message>
  <message>
    <ts>2017-06-30T15:23:51.667091</ts>
    <user>U050ECB92</user>
    <text>you suspect a leak in your code?</text>
  </message>
  <message>
    <ts>2017-06-30T15:24:27.682938</ts>
    <user>U098UL4QP</user>
    <text>no, im looking into very long stop the world pauses ~20 secs</text>
  </message>
  <message>
    <ts>2017-06-30T15:24:46.691838</ts>
    <user>U098UL4QP</user>
    <text>i guess im wondering if the implementation of garbage collectors makes a difference</text>
  </message>
  <message>
    <ts>2017-06-30T15:25:56.723112</ts>
    <user>U098UL4QP</user>
    <text>ok i just wanted to hear someone say it wont make a difference because that's my instinct too</text>
  </message>
  <message>
    <ts>2017-06-30T15:27:13.756787</ts>
    <user>U098UL4QP</user>
    <text>while we're on the topic, just so i'm clear, the implementation of g1 garbage collector in openjdk is different than the implementation in oracle jvm right?</text>
  </message>
  <message>
    <ts>2017-06-30T15:43:23.181079</ts>
    <user>U050ECB92</user>
    <text>it is not different &lt;@U098UL4QP&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T15:43:26.182490</ts>
    <user>U050ECB92</user>
    <text>G1 is G1</text>
  </message>
  <message>
    <ts>2017-06-30T15:43:46.190660</ts>
    <user>U098UL4QP</user>
    <text>ok thank you for clarifying that</text>
  </message>
  <message>
    <ts>2017-06-30T15:44:35.211790</ts>
    <user>U050ECB92</user>
    <text>have you looked at heap profilers?</text>
  </message>
  <message>
    <ts>2017-06-30T15:46:04.250483</ts>
    <user>U050ECB92</user>
    <text>the choice of GCs makes a difference with pause times, and your allocations are going to be workload dependent...</text>
  </message>
  <message>
    <ts>2017-06-30T15:46:42.266456</ts>
    <user>U050ECB92</user>
    <text>i've found usually that there's an offending spot in my code, but it can be tricky to track sometime</text>
  </message>
  <message>
    <ts>2017-06-30T15:47:53.297346</ts>
    <user>U050ECB92</user>
    <text>A quick temporary fix for long pause times is to a) make your max heap size _smaller_ and b) remove any JVM command line flags that somebody pasted into your deployment  (probably directly from stack overflow)</text>
  </message>
  <message>
    <ts>2017-06-30T15:48:42.318728</ts>
    <user>U051SS2EU</user>
    <text>I was almost going to mention that making the heap smaller thing, but then I realized it sounded really weird and I didn't have a cite... thanks for confirming that though</text>
  </message>
  <message>
    <ts>2017-06-30T15:49:26.338469</ts>
    <user>U051SS2EU</user>
    <text>also, I recently learned the term "jvm smoke break" for this kind of problem, which I find amusing</text>
  </message>
  <message>
    <ts>2017-06-30T15:56:43.528734</ts>
    <user>U050ECB92</user>
    <text>lol</text>
  </message>
  <message>
    <ts>2017-06-30T15:57:44.554813</ts>
    <user>U050ECB92</user>
    <text>the advice is totally counterintuitive.  mem leak =&amp;gt; long GC =&amp;gt; increase heap size =&amp;gt; larger leak =&amp;gt; longer pause time</text>
  </message>
  <message>
    <ts>2017-06-30T17:42:48.966092</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! Is Clojure 1.9 stable enough to start a project on it now which will be pushed to production in a couple of months?</text>
  </message>
  <message>
    <ts>2017-06-30T17:42:58.969078</ts>
    <user>U098UL4QP</user>
    <text>&lt;@U050ECB92&gt; which heap profilers do you recommend?</text>
  </message>
  <message>
    <ts>2017-06-30T18:14:48.506126</ts>
    <user>U08E3BBST</user>
    <text>&lt;@U5ZAJ15P0&gt; looks pretty stable to me: &lt;https://github.com/clojure/clojure/graphs/contributors?from=2017-01-01&amp;amp;to=2017-07-01&amp;amp;type=c&gt;</text>
  </message>
  <message>
    <ts>2017-06-30T18:33:57.782635</ts>
    <user>U5ZAJ15P0</user>
    <text>Is it ok to have side-effects in clojure specs? e.g. a database call. The application I am thinking of is checking that an email hasn't already been used on a "signup" API payload</text>
  </message>
  <message>
    <ts>2017-06-30T18:39:49.861167</ts>
    <user>U0NCTKEV8</user>
    <text>seems gross</text>
  </message>
  <message>
    <ts>2017-06-30T18:39:53.862022</ts>
    <user>U2MPUENUC</user>
    <text>&lt;@U5ZAJ15P0&gt; only if idempotent</text>
  </message>
  <message>
    <ts>2017-06-30T18:40:09.865632</ts>
    <user>U0NCTKEV8</user>
    <text>and implies effectively global scoping of the database connection, which is also gross</text>
  </message>
  <message>
    <ts>2017-06-30T21:56:34.446658</ts>
    <user>U064X3EF3</user>
    <text>It's ok to validate things outside of spec too </text>
  </message>
  <message>
    <ts>2017-06-30T22:31:21.612560</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U5ZAJ15P0&gt; Clojure 1.9 is stable enough for production use as far as I'm concerned — my company has Clojure 1.9 Alpha 17 in heavy production usage right now.</text>
  </message>
  <message>
    <ts>2017-07-01T01:05:07.142068</ts>
    <user>U1164QHNY</user>
    <text>does anyone have recommendations on a good job scheduling library for Clojure? checked out Quartzite earlier, but had some difficulty getting it to play nicely with my loading of env vars from mount</text>
  </message>
  <message>
    <ts>2017-07-01T04:51:35.927715</ts>
    <user>U06BE1L6T</user>
    <text>Should I follow kibit's recommendations?
```
Consider using:
  (vec costs)
instead of:
  (into [] costs)
```
Is there any real difference between `vec` and `into []`? 
`vec` is a bit shorter and maybe more explicit but I've also seen `into []` being used a lot.
I've found following question on SO: &lt;https://stackoverflow.com/questions/12044181/into-or-vec-converting-sequence-back-to-vector-in-clojure&gt; but I don't think  the different behavior for small arrays mentioned in answer is true</text>
  </message>
  <message>
    <ts>2017-07-01T04:52:28.930695</ts>
    <user>U06BE1L6T</user>
    <text>I did following experiment:
```
(def my-a (int-array [1 2 3]))

(def my-v (vec my-a))
my-v
;=&amp;gt; [1 2 3]

(aset my-a 1 10))
(java.util.Arrays/toString my-a)
;=&amp;gt; "[1, 10, 3]"

;=&amp;gt; my-v
[1 2 3]
```</text>
  </message>
  <message>
    <ts>2017-07-01T04:59:50.956406</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U06BE1L6T&gt; it can't alias an int-array</text>
  </message>
  <message>
    <ts>2017-07-01T04:59:55.956725</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (def a (into-array [1 2 3]))
#'user/a
+user=&amp;gt; (def v (vec a))
#'user/v
+user=&amp;gt; a
#object["[Ljava.lang.Long;" 0x5c089b2f "[Ljava.lang.Long;@5c089b2f"]
+user=&amp;gt; (seq a)
(1 2 3)
+user=&amp;gt; v
[1 2 3]
+user=&amp;gt; (aset a 1 42)
42
+user=&amp;gt; v
[1 42 3]
```</text>
  </message>
  <message>
    <ts>2017-07-01T05:00:39.960718</ts>
    <user>U051SS2EU</user>
    <text>as you see, it can alias a Long array</text>
  </message>
  <message>
    <ts>2017-07-01T05:19:11.032457</ts>
    <user>U06BE1L6T</user>
    <text>I see, any thoughts on my original question? :wink:</text>
  </message>
  <message>
    <ts>2017-07-01T05:21:49.041921</ts>
    <user>U051SS2EU</user>
    <text>if the collection might in some cases already be a vector, or it's an array that won't be aliased, use vec</text>
  </message>
  <message>
    <ts>2017-07-01T05:22:21.043668</ts>
    <user>U051SS2EU</user>
    <text>if you already have a vector and need to add to it, or if you need to do some transformation like mapping or filtering as you add things, use into</text>
  </message>
  <message>
    <ts>2017-07-01T05:22:47.045128</ts>
    <user>U051SS2EU</user>
    <text>if none of those conditions apply, it doesn't matter which you use</text>
  </message>
  <message>
    <ts>2017-07-01T05:23:32.047540</ts>
    <user>U051SS2EU</user>
    <text>when I mention transforms here, I'm talking about using the transducing arg to into btw</text>
  </message>
  <message>
    <ts>2017-07-01T05:25:03.052888</ts>
    <user>U06BE1L6T</user>
    <text>Wonderful, thank you very much for this piece of advice.</text>
  </message>
  <message>
    <ts>2017-07-01T12:43:56.984555</ts>
    <user>U624VJ533</user>
    <text>Hello,I am new here and to Clojure too,Is it okay if I post some code here to resolve an issue?</text>
  </message>
  <message>
    <ts>2017-07-01T12:45:03.989967</ts>
    <user>U1ALMRBLL</user>
    <text>yes &lt;@U624VJ533&gt;, you can ask it here -- there is also a &lt;#C053AK3F9|beginners&gt; channel that you may find helpful if your issue is not resolved here</text>
  </message>
  <message>
    <ts>2017-07-01T12:46:10.995392</ts>
    <user>U624VJ533</user>
    <text>Hi &lt;@U1ALMRBLL&gt;, thank you for the response</text>
  </message>
  <message>
    <ts>2017-07-01T12:46:36.997409</ts>
    <user>U624VJ533</user>
    <text>I have been exploring core.async</text>
  </message>
  <message>
    <ts>2017-07-01T12:48:10.004842</ts>
    <user>U624VJ533</user>
    <text>and tried to implement &lt;https://www.youtube.com/watch?v=f6kdp27TYZs&amp;amp;t=1600&gt;</text>
  </message>
  <message>
    <ts>2017-07-01T12:48:31.006762</ts>
    <user>U624VJ533</user>
    <text>the gophers daisy chain whispering</text>
  </message>
  <message>
    <ts>2017-07-01T12:48:44.007837</ts>
    <user>U624VJ533</user>
    <text>and am stuck someplace</text>
  </message>
  <message>
    <ts>2017-07-01T12:48:50.008311</ts>
    <user>U624VJ533</user>
    <text>help would be appreciated</text>
  </message>
  <message>
    <ts>2017-07-01T12:49:46.013130</ts>
    <user>U1ALMRBLL</user>
    <text>i would recommend you ask in &lt;#C05423W6H|core-async&gt; -- providing some details as to how specifically you are stuck</text>
  </message>
  <message>
    <ts>2017-07-01T12:49:58.014220</ts>
    <user>U624VJ533</user>
    <text>okay sure</text>
  </message>
  <message>
    <ts>2017-07-01T12:50:01.014571</ts>
    <user>U624VJ533</user>
    <text>thank you</text>
  </message>
  <message>
    <ts>2017-07-01T13:20:13.171399</ts>
    <user>U061RAB7C</user>
    <text>How to make class self as type hint  for field of `deftype`?
```
(deftype Foo [^some.ns.Foo parent])
```</text>
  </message>
  <message>
    <ts>2017-07-01T18:28:00.543180</ts>
    <user>U08UTJ5PB</user>
    <text>Has anyone see this error when trying to start your repl: `Exception in thread "main" java.net.SocketException: Protocol family unavailable, compiling:`?</text>
  </message>
  <message>
    <ts>2017-07-01T18:44:25.599671</ts>
    <user>U051SS2EU</user>
    <text>is this something that happens in every project, or only when loading a specific project's code?</text>
  </message>
  <message>
    <ts>2017-07-01T18:45:09.602464</ts>
    <user>U051SS2EU</user>
    <text>sometimes I find that if I don't use lein's `init-ns` or `main` features, and just call require from user, the error is more informative</text>
  </message>
  <message>
    <ts>2017-07-01T18:45:51.605224</ts>
    <user>U051SS2EU</user>
    <text>for example ```$ lein run -m clojure.main
user=&amp;gt; (require 'my.ns)```</text>
  </message>
  <message>
    <ts>2017-07-01T18:46:09.606372</ts>
    <user>U051SS2EU</user>
    <text>then I get a better idea of what code is blowing up</text>
  </message>
  <message>
    <ts>2017-07-01T19:43:56.804557</ts>
    <user>U06BUCH6D</user>
    <text>Does anyone know how to create a parameterized type instance (java interop)? E.g. new MyPType&amp;lt;Integer&amp;gt;</text>
  </message>
  <message>
    <ts>2017-07-01T19:48:48.820637</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U06BUCH6D&gt; that doesn't actually exist</text>
  </message>
  <message>
    <ts>2017-07-01T19:49:10.821830</ts>
    <user>U06BUCH6D</user>
    <text>OK…because param types are only compile time, correct?</text>
  </message>
  <message>
    <ts>2017-07-01T19:49:12.821962</ts>
    <user>U051SS2EU</user>
    <text>it's a thing the java compiler pretends is there, but isn't actually a thing in the relevant bytecode</text>
  </message>
  <message>
    <ts>2017-07-01T19:49:33.822960</ts>
    <user>U06BUCH6D</user>
    <text>&lt;@U051SS2EU&gt; mith ok thx!</text>
  </message>
  <message>
    <ts>2017-07-01T19:50:01.824313</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U06BUCH6D&gt; right, type erasure (with the exception that you can use reflection to find the generic type - but that's not actually as relevant as one might think)</text>
  </message>
  <message>
    <ts>2017-07-01T19:50:25.825674</ts>
    <user>U051SS2EU</user>
    <text>the important thing is the code just works without it</text>
  </message>
  <message>
    <ts>2017-07-01T19:50:56.827204</ts>
    <user>U06BUCH6D</user>
    <text>True..I should have known :slightly_smiling_face: thx</text>
  </message>
  <message>
    <ts>2017-07-02T01:16:26.805845</ts>
    <user>U5YHX0TQV</user>
    <text>&lt;@U08UTJ5PB&gt; Sounds like an ipv6 issue. What OS are you running on, try adding -Djava.net.preferIPv4Stack=true to your JAVA_OPTS</text>
  </message>
  <message>
    <ts>2017-07-02T04:49:07.429617</ts>
    <user>U0B4ZBBKM</user>
    <text>Is there an obvious way to write the following without repeating `x`? `(if (some-pred? x) y x)`</text>
  </message>
  <message>
    <ts>2017-07-02T04:50:19.433220</ts>
    <user>U0B4ZBBKM</user>
    <text>Meaning if `x` is ok, just use it, otherwise use the alternative `y`</text>
  </message>
  <message>
    <ts>2017-07-02T04:54:02.444811</ts>
    <user>U4N27TADS</user>
    <text>Hi, guys when i am tring to deploy library to clojurejars i get "gpg: signing failed: Inappropriate ioctl for device
". 
I generated key, published it and i added it's id to ~/.lein/profiles.clj

What can be a root of problem?</text>
  </message>
  <message>
    <ts>2017-07-02T05:12:52.507235</ts>
    <user>U4N27TADS</user>
    <text>The solution is to add this line to .bash_profile `export GPG_TTY=$(tty)`</text>
  </message>
  <message>
    <ts>2017-07-02T05:17:53.523393</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U0B4ZBBKM&gt; maybe look at cond-&amp;gt; ?</text>
  </message>
  <message>
    <ts>2017-07-02T05:27:36.552688</ts>
    <user>U0B4ZBBKM</user>
    <text>&lt;@U06GS6P1N&gt; You'd have to repeat `x` just the same</text>
  </message>
  <message>
    <ts>2017-07-02T07:42:12.989784</ts>
    <user>U06C1JGHX</user>
    <text>hey all. I'm use data.zip.xml/xml-&amp;gt; to parse some XML</text>
  </message>
  <message>
    <ts>2017-07-02T07:50:56.020006</ts>
    <user>U06C1JGHX</user>
    <text>deep breath… ok:</text>
  </message>
  <message>
    <ts>2017-07-02T07:51:23.021637</ts>
    <user>U06C1JGHX</user>
    <text>I'm trying to navigate a blob of XML and parse out a map of information</text>
  </message>
  <message>
    <ts>2017-07-02T07:52:33.025518</ts>
    <user>U06C1JGHX</user>
    <text>this gives me a list of the names of all the interesting nodes in my XML:
```
(xml-&amp;gt; zipped :parameters :parameter (attr :name))
```</text>
  </message>
  <message>
    <ts>2017-07-02T07:54:13.031235</ts>
    <user>U06C1JGHX</user>
    <text>this works for me since I know how many `:parameter` nodes I have and I know they all have `:name`</text>
  </message>
  <message>
    <ts>2017-07-02T07:54:51.033375</ts>
    <user>U06C1JGHX</user>
    <text>these work similarily: ```
(xml-&amp;gt; zipped :parameters :parameter :description text)
(xml-&amp;gt; zipped :parameters :parameter :default text)
(xml-&amp;gt; zipped :parameters :parameter :options :option text)
```</text>
  </message>
  <message>
    <ts>2017-07-02T07:57:05.041216</ts>
    <user>U06C1JGHX</user>
    <text>I get a list of descriptions, default values or options…

however!  not all my paramater nodes have a :`description`, `:default` or `:options` sub tag.

So the lists don't have the same ordering as the `:name attr` we pulled out earlier…</text>
  </message>
  <message>
    <ts>2017-07-02T07:57:59.044459</ts>
    <user>U06C1JGHX</user>
    <text>Is there a simple way to pull out these values for each parameter? with say `nil` returned if it's not present?</text>
  </message>
  <message>
    <ts>2017-07-02T10:52:20.749192</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U06C1JGHX&gt; Perhaps something like:
```
(for [p (xml-&amp;gt; (z/xml-zip xml) :parameters :parameter), :let [z (z/xml-zip p)]]
  {:description (xml-&amp;gt; z :description text)
   :default     (xml-&amp;gt; z :default text)
   :options     (xml-&amp;gt; z :options :option text)})
```</text>
  </message>
  <message>
    <ts>2017-07-02T10:53:43.755126</ts>
    <user>U0BKWMG5B</user>
    <text>Or alternatively:
```
(defn parse-parameter [z]
  [{:description (xml-&amp;gt; z :description text)
    :default     (xml-&amp;gt; z :default text)
    :options     (xml-&amp;gt; z :options :option text)}])

(xml-&amp;gt; zipped :parameters :parameter parse-parameter)
```</text>
  </message>
  <message>
    <ts>2017-07-02T13:31:59.498957</ts>
    <user>U08UTJ5PB</user>
    <text>&lt;@U5YHX0TQV&gt; It's actually a docker container I use for my dev environment. I have set that environment variable to no avail. Have you had this issue?</text>
  </message>
  <message>
    <ts>2017-07-02T13:54:11.608703</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U08UTJ5PB&gt; is it something that happens to leiningen regardless of the project code? is it a specific network operation in the code that is getting that error?</text>
  </message>
  <message>
    <ts>2017-07-02T14:17:27.717567</ts>
    <user>U08UTJ5PB</user>
    <text>&lt;@U051SS2EU&gt; It seems to only happen when running on my docker-container. The repl is being started with this function:

```(defn start-repl-server []
  (loop [port (get-repl-server-port)]
    (if-let [server  (try (nrepl-server/start-server :port port
                                                     :handler cider-nrepl/cider-nrepl-handler)
                          (catch java.net.BindException _ nil))]
      (reset! repl-server server)
        (recur (inc port)))))```</text>
  </message>
  <message>
    <ts>2017-07-02T14:17:51.719351</ts>
    <user>U08UTJ5PB</user>
    <text>If I start it using `lein repl` it starts fine just fine (please excuse the indentation, slack appears to have messed it up)</text>
  </message>
  <message>
    <ts>2017-07-02T14:23:18.744495</ts>
    <user>U051SS2EU</user>
    <text>what I'm asking is that if it's only with your project in the container that lein gets the error, or if other projects give a similar error</text>
  </message>
  <message>
    <ts>2017-07-02T14:23:39.746215</ts>
    <user>U051SS2EU</user>
    <text>there's two likely failure points here, one internal to leiningen, the other specific to your project...</text>
  </message>
  <message>
    <ts>2017-07-02T14:25:08.753073</ts>
    <user>U051SS2EU</user>
    <text>another thing you could test is whether an uberjar of your project, run without leiningen gets this error</text>
  </message>
  <message>
    <ts>2017-07-02T14:25:31.755051</ts>
    <user>U08UTJ5PB</user>
    <text>&lt;@U051SS2EU&gt; it is the only project I've experienced with this error. But I don't usually do things this way. (with starting the repl in that way)</text>
  </message>
  <message>
    <ts>2017-07-02T14:25:36.755445</ts>
    <user>U08UTJ5PB</user>
    <text>That's a good idea</text>
  </message>
  <message>
    <ts>2017-07-02T14:25:38.755567</ts>
    <user>U08UTJ5PB</user>
    <text>I'll try that now</text>
  </message>
  <message>
    <ts>2017-07-02T14:30:04.776208</ts>
    <user>U051SS2EU</user>
    <text>do you need to whitelist the ports your process in the container can use?</text>
  </message>
  <message>
    <ts>2017-07-02T14:33:12.790919</ts>
    <user>U08UTJ5PB</user>
    <text>&lt;@U051SS2EU&gt; I do, and I have whitelisted those ports</text>
  </message>
  <message>
    <ts>2017-07-02T14:33:17.791273</ts>
    <user>U08UTJ5PB</user>
    <text>The uberjar didn't work either</text>
  </message>
  <message>
    <ts>2017-07-02T14:33:49.793706</ts>
    <user>U08UTJ5PB</user>
    <text>As that repl function is still unable to run to whatever ip restrictions</text>
  </message>
  <message>
    <ts>2017-07-02T14:35:24.800618</ts>
    <user>U051SS2EU</user>
    <text>how does `(get-repl-server-port)` pick a port?</text>
  </message>
  <message>
    <ts>2017-07-02T14:36:17.804582</ts>
    <user>U051SS2EU</user>
    <text>it might be worth trying to just listen to the port it should be listening on using `nc`</text>
  </message>
  <message>
    <ts>2017-07-02T14:38:07.812526</ts>
    <user>U051SS2EU</user>
    <text>eg `nc -l 8888` should listen on port 8888 and wait for one connection and print whatever gets sent to it</text>
  </message>
  <message>
    <ts>2017-07-02T14:38:23.813675</ts>
    <user>U08UTJ5PB</user>
    <text>That's another good idea</text>
  </message>
  <message>
    <ts>2017-07-02T14:38:56.816044</ts>
    <user>U08UTJ5PB</user>
    <text>It picks it from an environment variable:
```(defn- get-repl-server-port []
  (let [repl-port-string (get env :repl-server-port "7888")
        maybeNumber (clojure.edn/read-string repl-port-string)]
    (if (number? maybeNumber)
      maybeNumber
      (do
        (log/warn "Unable to parse port number for REPL_SERVER_PORT")
        nil))))```</text>
  </message>
  <message>
    <ts>2017-07-02T14:41:37.828560</ts>
    <user>U08UTJ5PB</user>
    <text>Let's move this to a thread, if you don't mind? &lt;@U051SS2EU&gt;</text>
  </message>
  <message>
    <ts>2017-07-02T14:42:03.830524</ts>
    <user>U08UTJ5PB</user>
    <text>I'm unable to start the server while listening to that port. The address is already in use</text>
  </message>
  <message>
    <ts>2017-07-02T14:43:13.835985</ts>
    <user>U051SS2EU</user>
    <text>what I meant was to test if you could open the port with nc - that rules out another point of failure</text>
  </message>
  <message>
    <ts>2017-07-02T14:43:47.838699</ts>
    <user>U08UTJ5PB</user>
    <text>Oh yes, the port is definitely open. The api serves traffic. The nrepl server just won't start</text>
  </message>
  <message>
    <ts>2017-07-02T14:44:45.843203</ts>
    <user>U051SS2EU</user>
    <text>I'm talking about the nrepl port not the api port, but OK</text>
  </message>
  <message>
    <ts>2017-07-02T14:44:55.843978</ts>
    <user>U08UTJ5PB</user>
    <text>Ah, let's make sure of that</text>
  </message>
  <message>
    <ts>2017-07-02T14:45:30.846723</ts>
    <user>U08UTJ5PB</user>
    <text>Yep, the nrepl port is definitely available as well</text>
  </message>
  <message>
    <ts>2017-07-02T14:46:05.849299</ts>
    <user>U051SS2EU</user>
    <text>OK - that verifies it's an nrepl problem then?</text>
  </message>
  <message>
    <ts>2017-07-02T14:48:14.859746</ts>
    <user>U08UTJ5PB</user>
    <text>That's my guess</text>
  </message>
  <message>
    <ts>2017-07-02T14:48:36.861661</ts>
    <user>U08UTJ5PB</user>
    <text>But nrepl works fine when I start the server using `lein repl`</text>
  </message>
  <message>
    <ts>2017-07-02T14:48:41.862002</ts>
    <user>U051SS2EU</user>
    <text>is it trying to bind to localhost?</text>
  </message>
  <message>
    <ts>2017-07-02T14:48:44.862246</ts>
    <user>U08UTJ5PB</user>
    <text>It is</text>
  </message>
  <message>
    <ts>2017-07-02T14:48:53.862965</ts>
    <user>U051SS2EU</user>
    <text>you could double check eg. that localhost is resolved in the vm</text>
  </message>
  <message>
    <ts>2017-07-02T14:49:03.863807</ts>
    <user>U051SS2EU</user>
    <text>sometimes you need to add that mapping by hand</text>
  </message>
  <message>
    <ts>2017-07-02T14:49:17.865007</ts>
    <user>U051SS2EU</user>
    <text>and localhost not being found would be consistent with that error</text>
  </message>
  <message>
    <ts>2017-07-02T14:51:33.876524</ts>
    <user>U08UTJ5PB</user>
    <text>So that might actually be it, when I start the nrepl server using `lein repl`, I also add `lein repl :headless :host 0.0.0.0 :port 4343`</text>
  </message>
  <message>
    <ts>2017-07-02T14:52:31.881060</ts>
    <user>U051SS2EU</user>
    <text>you could try adding :host to the args map to start-server</text>
  </message>
  <message>
    <ts>2017-07-02T14:52:56.883072</ts>
    <user>U08UTJ5PB</user>
    <text>That's a good idea</text>
  </message>
  <message>
    <ts>2017-07-02T14:52:58.883231</ts>
    <user>U08UTJ5PB</user>
    <text>I'll try it now</text>
  </message>
  <message>
    <ts>2017-07-02T14:54:50.892265</ts>
    <user>U08UTJ5PB</user>
    <text>Different error, not sure if it's failing sooner: `Exception in thread "main" java.lang.NumberFormatException: Invalid number: 0.0.0.0`</text>
  </message>
  <message>
    <ts>2017-07-02T14:54:54.892616</ts>
    <user>U08UTJ5PB</user>
    <text>The host is looking for a number?</text>
  </message>
  <message>
    <ts>2017-07-02T14:55:31.895557</ts>
    <user>U051SS2EU</user>
    <text>wait, are you providing `0.0.0.0` or "0.0.0.0" because clojure will give that error for the first one</text>
  </message>
  <message>
    <ts>2017-07-02T14:55:45.896621</ts>
    <user>U051SS2EU</user>
    <text>0.0.0.0 is an invalid literal in clojure, is what that means</text>
  </message>
  <message>
    <ts>2017-07-02T14:56:23.899585</ts>
    <user>U08UTJ5PB</user>
    <text>I found this: &lt;https://github.com/clojure/tools.nrepl/blob/9eed58bed6aa01cfeb3c328adc5a12d487a5d305/CHANGELOG.md&gt;</text>
  </message>
  <message>
    <ts>2017-07-02T14:56:28.899980</ts>
    <user>U08UTJ5PB</user>
    <text>If you look st 0.2.8</text>
  </message>
  <message>
    <ts>2017-07-02T14:56:51.901749</ts>
    <user>U051SS2EU</user>
    <text>right - just make sure :host is a String</text>
  </message>
  <message>
    <ts>2017-07-02T14:57:12.903299</ts>
    <user>U051SS2EU</user>
    <text>I bet that will work</text>
  </message>
  <message>
    <ts>2017-07-02T14:57:48.905956</ts>
    <user>U08UTJ5PB</user>
    <text>That did it</text>
  </message>
  <message>
    <ts>2017-07-02T14:57:51.906193</ts>
    <user>U08UTJ5PB</user>
    <text>:heart:</text>
  </message>
  <message>
    <ts>2017-07-02T14:57:58.906662</ts>
    <user>U051SS2EU</user>
    <text>sweet!</text>
  </message>
  <message>
    <ts>2017-07-02T14:58:05.907196</ts>
    <user>U08UTJ5PB</user>
    <text>Thanks for that &lt;@U051SS2EU&gt;</text>
  </message>
  <message>
    <ts>2017-07-02T14:58:11.907689</ts>
    <user>U051SS2EU</user>
    <text>np - glad I could help</text>
  </message>
  <message>
    <ts>2017-07-02T15:00:10.917626</ts>
    <user>U051SS2EU</user>
    <text>btw it might be better for security to adjust /etc/hosts so that localhost is defined, rather than providing 0.0.0.0 as your host - I'm not an expert on these things though</text>
  </message>
  <message>
    <ts>2017-07-02T15:01:10.922812</ts>
    <user>U051SS2EU</user>
    <text>IIRC 127.0.0.1 can be used instead of 0.0.0.0 and is safer (but if you intend to connect from outside the vm... maybe you need the 0.0.0.0 binding)</text>
  </message>
  <message>
    <ts>2017-07-02T15:02:12.927871</ts>
    <user>U08UTJ5PB</user>
    <text>You're right. If this were to be deployed with an nrepl server started it would certainly be a security concern</text>
  </message>
  <message>
    <ts>2017-07-02T15:02:52.931467</ts>
    <user>U051SS2EU</user>
    <text>anyway, at least you know the precise parameters now and can make an informed decision</text>
  </message>
  <message>
    <ts>2017-07-02T15:03:05.932581</ts>
    <user>U08UTJ5PB</user>
    <text>Indeed, I very much appreciate the help</text>
  </message>
  <message>
    <ts>2017-07-02T15:03:45.935749</ts>
    <user>U051SS2EU</user>
    <text>I seem to recall a recommendation to bind on 127.0.0.1 inside the vm, and use an ssh tunnel to access it from the host</text>
  </message>
  <message>
    <ts>2017-07-02T15:03:52.936241</ts>
    <user>U051SS2EU</user>
    <text>but maybe that's silly.</text>
  </message>
  <message>
    <ts>2017-07-02T15:05:44.944732</ts>
    <user>U08UTJ5PB</user>
    <text>I'll test to see if 127.0.0.1 works as well</text>
  </message>
  <message>
    <ts>2017-07-02T16:35:07.347319</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U050SC7SV&gt; hello! I'm trying out &lt;https://github.com/mpenet/spandex&gt;, and I'm getting this error when `take!`-ing from a `scroll-chan`:
```#error {
 :cause Response Exception
 :data #qbits.spandex.Response{:body {:error {:root_cause [{:type illegal_argument_exception, :reason Failed to parse request body}], :type illegal_argument_exception, :reason Failed to parse request body, :caused_by {:type json_parse_exception, :reason Unrecognized token 'DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAEKFlFLeXR6MDh2UTRxLVdkLVhEbXZSMFEAAAAAAAABCxZRS3l0ejA4dlE0cS1XZC1YRG12UjBRAAAAAAAAAQ0WUUt5dHowOHZRNHEtV2QtWERtdlIwUQAAAAAAAAEMFlFLeXR6MDh2UTRxLVdkLVhEbXZSMFEAAAAAAAABDhZRS3l0ejA4dlE0cS1XZC1YRG12UjBR': was expecting ('true', 'false' or 'null')```</text>
  </message>
  <message>
    <ts>2017-07-02T16:35:23.348478</ts>
    <user>U3L6TFEJF</user>
    <text>any idea what might be going on here?</text>
  </message>
  <message>
    <ts>2017-07-02T16:43:11.382350</ts>
    <user>U050SC7SV</user>
    <text>If you give me the detail of the request I can have a look. Worse case tomorrow. We can do that in priv msg btw</text>
  </message>
  <message>
    <ts>2017-07-02T16:50:06.412118</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U050SC7SV&gt; done :+1:</text>
  </message>
  <message>
    <ts>2017-07-02T21:38:14.885271</ts>
    <user>U2UKX5DQR</user>
    <text>I am trying to test a `java.sql.SQLException` handler which unwraps the exceptions like below. However I'm not sure how I would throw this exception in a test.
```
       (-&amp;gt; e
           (.getNextException)
           (.getMessage)
           (.startsWith "ERROR: duplicate key value"))
```
current mock (`.getNextException` returns nil on this):
```
(throw (SQLException. "ERROR: duplicate key value"))
```</text>
  </message>
  <message>
    <ts>2017-07-02T21:40:38.904674</ts>
    <user>U04V70XH6</user>
    <text>(answered in &lt;#C1Q164V29|sql&gt; — use `setNextException()` &lt;http://docs.oracle.com/javase/8/docs/api/java/sql/SQLException.html#setNextException-java.sql.SQLException-&gt; )</text>
  </message>
  <message>
    <ts>2017-07-03T01:44:45.948412</ts>
    <user>U34K4458X</user>
    <text>Hey, clojurians. I'm using `yesql` in my project to query postgres database. Some tables has boolean columns ending with question mark. How to properly use queries like this with yesql:
```
select name, email from user_accounts where "activated?" = true;
```
Seems `yesql` thinks that question mark is param placeholder and fires error.</text>
  </message>
  <message>
    <ts>2017-07-03T02:27:36.408427</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U34K4458X&gt; Could you try that same query directly with `java.jdbc` just to eliminate whether the problem is `yesql` or something else?</text>
  </message>
  <message>
    <ts>2017-07-03T02:28:02.413645</ts>
    <user>U04V70XH6</user>
    <text>I've never seen a database with `?` in column names... I didn't even think it was legal.</text>
  </message>
  <message>
    <ts>2017-07-03T02:28:39.421580</ts>
    <user>U34K4458X</user>
    <text>Me neither, but have to use it :slightly_smiling_face: Tried JDBC - works fine.</text>
  </message>
  <message>
    <ts>2017-07-03T02:29:36.433110</ts>
    <user>U34K4458X</user>
    <text>In postgres it is not legal, but can be escaped with column name with quotes</text>
  </message>
  <message>
    <ts>2017-07-03T02:29:36.433139</ts>
    <user>U04V70XH6</user>
    <text>OK, well, that confirms a bug in `yesql` so you should create a GitHub issue.</text>
  </message>
  <message>
    <ts>2017-07-03T02:30:53.449972</ts>
    <user>U34K4458X</user>
    <text>Seems that yesql is not actively maintained. Started evaluating hugsql instead.</text>
  </message>
  <message>
    <ts>2017-07-03T02:30:58.450952</ts>
    <user>U34K4458X</user>
    <text>Thanks anyway</text>
  </message>
  <message>
    <ts>2017-07-03T02:32:24.469073</ts>
    <user>U04V70XH6</user>
    <text>Ah, right, I heard that folks are switching to HugSQL. BTW, there's a &lt;#C1Q164V29|sql&gt; channel that's probably best for Qs like this.</text>
  </message>
  <message>
    <ts>2017-07-03T02:33:15.479910</ts>
    <user>U04V70XH6</user>
    <text>We use HoneySQL for complex queries and raw `java.jdbc` for most stuff.</text>
  </message>
  <message>
    <ts>2017-07-03T03:18:56.153203</ts>
    <user>U4PRDUVCY</user>
    <text>Singapore Clojure Meetup tomorrow night, welcome to join. &lt;https://www.meetup.com/Singapore-Clojure-Meetup/events/240601551/&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T03:24:05.240862</ts>
    <user>U5YHX0TQV</user>
    <text>petr: I'm not sure about docker, i only recall that that specific exception was related to ipv6 on a non-clojure project.</text>
  </message>
  <message>
    <ts>2017-07-03T03:41:31.559543</ts>
    <user>U11SJ6Q0K</user>
    <text>armed: you may be interested in my fork &lt;https://github.com/tatut/jeesql&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T03:53:14.783392</ts>
    <user>U34K4458X</user>
    <text>&lt;@U11SJ6Q0K&gt; wow, thanks. I'll definitely look at your lib.</text>
  </message>
  <message>
    <ts>2017-07-03T04:06:36.059993</ts>
    <user>U06F82LES</user>
    <text>&lt;@U4PRDUVCY&gt; event invitations are always appreciated. But it would probably be better to limit them to one channel (&lt;#C03RZRRMP|events&gt; seens best)</text>
  </message>
  <message>
    <ts>2017-07-03T04:11:29.166490</ts>
    <user>U11SJ6Q0K</user>
    <text>If you are feeling particularly adventurous, you can try &lt;https://github.com/tatut/specql&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T04:13:07.200871</ts>
    <user>U4PRDUVCY</user>
    <text>:ok_hand::smiley: &lt;@U06F82LES&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T07:23:02.221709</ts>
    <user>U052XLL3A</user>
    <text>Anyone dabbled with Java 1.8's Nashorn (js runtime)? I'm a bit puzzled as to how it evaluates JS object literals:
```
(-&amp;gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName "nashorn")
    (.eval "new Object({foo: 42})"))
=&amp;gt; {"foo" 42}
```
versus 
```
(-&amp;gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName "nashorn")
    (.eval "{foo: 42}"))
=&amp;gt; 42
```</text>
  </message>
  <message>
    <ts>2017-07-03T07:25:04.258675</ts>
    <user>U052XLL3A</user>
    <text>Oh, this works (wrapping the exp with parens):
```
(-&amp;gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName "nashorn")
    (.eval "({foo: 42})"))
=&amp;gt; {"foo" 42}
```</text>
  </message>
  <message>
    <ts>2017-07-03T08:47:58.875585</ts>
    <user>U052TDWT7</user>
    <text>Hello everyone, is there any book/online resource about functional architectural patterns? Something like Patterns of Enterprise Application Architecture by Martin Fowler but from a functional point of view...</text>
  </message>
  <message>
    <ts>2017-07-03T09:07:09.341231</ts>
    <user>U297WCSHK</user>
    <text>Rich Hickey's Talks can be considered as source of some patterns I think</text>
  </message>
  <message>
    <ts>2017-07-03T09:14:31.523254</ts>
    <user>U5YHX0TQV</user>
    <text>&lt;@U052TDWT7&gt;  &lt;http://mishadoff.com/blog/clojure-design-patterns/&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T09:16:48.580056</ts>
    <user>U052TDWT7</user>
    <text>Thanks &lt;@U297WCSHK&gt;, &lt;@U5YHX0TQV&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T09:19:47.653610</ts>
    <user>U1YTUBH53</user>
    <text>any spectacular clojure alternative to &lt;https://github.com/Raynes/conch&gt;?</text>
  </message>
  <message>
    <ts>2017-07-03T09:20:41.675959</ts>
    <user>U1YTUBH53</user>
    <text>clojure's built-in `sh` is limited (no support for processing stdout/stderr as streams)</text>
  </message>
  <message>
    <ts>2017-07-03T11:05:13.551260</ts>
    <user>U1C72J3J4</user>
    <text>Hi clojurians! I'm trying to pattern-match a hashmap, but this is what I get:
```(m/match [{:arst false}]
  [{:qwfp #"stuff.*"}] 1
  [{:arst false}] 2)
ClassCastException clojure.lang.Keyword cannot be cast to java.lang.CharSequence  clojure.core/re-matcher (core.clj:4775)```
What's going on here?</text>
  </message>
  <message>
    <ts>2017-07-03T11:28:49.183668</ts>
    <user>U07S8JGF7</user>
    <text>&lt;@U1C72J3J4&gt; I pasted exactly what you have into the repl and got `2`.</text>
  </message>
  <message>
    <ts>2017-07-03T11:29:12.193828</ts>
    <user>U1CD720KB</user>
    <text>&lt;@U1C72J3J4&gt; Looks like that error message indicates a problem with the regex</text>
  </message>
  <message>
    <ts>2017-07-03T11:29:18.196421</ts>
    <user>U07S8JGF7</user>
    <text>Just to double check, what version of core.match are you using?</text>
  </message>
  <message>
    <ts>2017-07-03T11:40:29.486956</ts>
    <user>U1C72J3J4</user>
    <text>&lt;@U07S8JGF7&gt; `[org.clojure/core.match "0.3.0-alpha4"]`, with `(:require  [clojure.core.match :as m][clojure.core.match.regex])` in my ns</text>
  </message>
  <message>
    <ts>2017-07-03T11:41:26.510950</ts>
    <user>U1C72J3J4</user>
    <text>&lt;@U1CD720KB&gt; `(re-matches #"stuff.*" "stuff123")` works, so no regex issues as well</text>
  </message>
  <message>
    <ts>2017-07-03T11:42:24.535984</ts>
    <user>U1C72J3J4</user>
    <text>clojure version: `org.clojure/clojure "1.9.0-alpha15`</text>
  </message>
  <message>
    <ts>2017-07-03T11:50:29.742295</ts>
    <user>U07S8JGF7</user>
    <text>I'm not sure what the design of this is, but it looks like it might be a boog.</text>
  </message>
  <message>
    <ts>2017-07-03T11:50:44.748683</ts>
    <user>U07S8JGF7</user>
    <text>macroexpanding the above yields:
```
(try
 (clojure.core/cond
  (clojure.core/instance? clojure.lang.ILookup x)
  (try
   (clojure.core/let
    [x_qwfp__6982
     (if
      (clojure.core/instance? clojure.lang.ILookup x)
      (clojure.core/get x :qwfp :clojure.core.match/not-found)
      (clojure.core.match/val-at* x :qwfp :clojure.core.match/not-found))]
    (clojure.core/cond
     (clojure.core/re-matches #"stuff.*" x_qwfp__6982)
     1
     :else
     (throw clojure.core.match/backtrack)))
   (catch
    Exception
    e__6002__auto__
    (if
     (clojure.core/identical? e__6002__auto__ clojure.core.match/backtrack)
     (do
      (try
       (clojure.core/let
        [x_arst__6983
         (if
          (clojure.core/instance? clojure.lang.ILookup x)
          (clojure.core/get x :arst :clojure.core.match/not-found)
          (clojure.core.match/val-at* x :arst :clojure.core.match/not-found))]
        (clojure.core/cond
         (clojure.core/= x_arst__6983 false)
         2
         :else
         (throw clojure.core.match/backtrack)))
       (catch
        Exception
        e__6002__auto__
        (if
         (clojure.core/identical? e__6002__auto__ clojure.core.match/backtrack)
         (do (throw clojure.core.match/backtrack))
         (throw e__6002__auto__)))))
     (throw e__6002__auto__))))
  :else
  (throw clojure.core.match/backtrack))
 (catch
  Exception
  e__6002__auto__
  (if
   (clojure.core/identical? e__6002__auto__ clojure.core.match/backtrack)
   (do
    (throw
     (java.lang.IllegalArgumentException.
      (clojure.core/str "No matching clause: " x))))
   (throw e__6002__auto__))))
```</text>
  </message>
  <message>
    <ts>2017-07-03T11:50:57.754046</ts>
    <user>U07S8JGF7</user>
    <text>woof that was a lot, sorry ya'll</text>
  </message>
  <message>
    <ts>2017-07-03T11:51:56.779266</ts>
    <user>U07S8JGF7</user>
    <text>Anyways it looks like it's probably calling `re-matches` with `:clojure.core.match/not-found`.</text>
  </message>
  <message>
    <ts>2017-07-03T11:52:28.793625</ts>
    <user>U07S8JGF7</user>
    <text>There should probably be a guard there in `to-source ::m/regex`.</text>
  </message>
  <message>
    <ts>2017-07-03T11:54:21.842842</ts>
    <user>U07S8JGF7</user>
    <text>&lt;https://dev.clojure.org/jira/browse/MATCH-123&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T11:55:10.863497</ts>
    <user>U1C72J3J4</user>
    <text>&lt;@U07S8JGF7&gt; thank you, following the report...</text>
  </message>
  <message>
    <ts>2017-07-03T11:55:49.880190</ts>
    <user>U07S8JGF7</user>
    <text>&lt;@U1C72J3J4&gt; Be sure to upvote it if you want attention paid.</text>
  </message>
  <message>
    <ts>2017-07-03T12:45:33.029866</ts>
    <user>U297WCSHK</user>
    <text>is there a formatter for clojure code that I can adapt progressively without converting the whole codebase at one? I tried parinfer for Atom, but it is too intrusive for me</text>
  </message>
  <message>
    <ts>2017-07-03T12:46:29.048995</ts>
    <user>U5XMV6DQT</user>
    <text>emacs</text>
  </message>
  <message>
    <ts>2017-07-03T12:46:55.057895</ts>
    <user>U051SS2EU</user>
    <text>`cljfmt` is a good plugin and unlike editor based options every collaborator can easily have the same rules</text>
  </message>
  <message>
    <ts>2017-07-03T12:47:10.063262</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://github.com/weavejester/cljfmt&gt;</text>
  </message>
  <message>
    <ts>2017-07-03T13:41:08.140180</ts>
    <user>U0B4ZBBKM</user>
    <text>Is there an obvious way to write the following without repeating `x`? `(if (some-pred? x) y x)`
Meaning if `x` is ok, just use it, otherwise use the alternative `y`</text>
  </message>
  <message>
    <ts>2017-07-03T13:49:45.305783</ts>
    <user>U5XMV6DQT</user>
    <text>it could be written like ```(or (somefn x) y)```, but inside somefn there definitely would be repetitions of x or % argument</text>
  </message>
  <message>
    <ts>2017-07-03T13:50:03.311713</ts>
    <user>U1CTH1TUY</user>
    <text>you have three values you care about, `x,` `y`, and `(some-pred? x)`, so you will need those three elements. if x is truthy, you could write the pred to return x or false and use `(or (some-pred? x) y)`, though that means custom predicates.</text>
  </message>
  <message>
    <ts>2017-07-03T13:50:41.324192</ts>
    <user>U1CTH1TUY</user>
    <text>Doesn't work if you need pred to succeed on x being false / nil though</text>
  </message>
  <message>
    <ts>2017-07-03T13:50:59.329968</ts>
    <user>U5XMV6DQT</user>
    <text>```complement```</text>
  </message>
  <message>
    <ts>2017-07-03T13:53:13.371148</ts>
    <user>U11SJ6Q0K</user>
    <text>I think `(if (foo? x) y x)` is readable and repeating one name, once as a parameter to the predicate, isn't bad</text>
  </message>
  <message>
    <ts>2017-07-03T13:53:43.380356</ts>
    <user>U056QFNM5</user>
    <text>&lt;@U0B4ZBBKM&gt; You can do that with a macro if you so desire. Something like this:

```
(defmacro pass-or-alternative [pred-expr value-expr alternative-expr]
  `(let [value# ~value-expr]
     (if (~pred-expr value#)
       value#
       ~alternative-expr)))
```</text>
  </message>
  <message>
    <ts>2017-07-03T13:54:33.395959</ts>
    <user>U1CTH1TUY</user>
    <text>you don't need a macro, just `(fn [pred x y] (if (pred x) x y)`, then you'd just use it like `(my-fn pred x y)`</text>
  </message>
  <message>
    <ts>2017-07-03T13:55:11.408178</ts>
    <user>U0DJC1V3R</user>
    <text>you do need a macro, you don't always want to evaluate `y`</text>
  </message>
  <message>
    <ts>2017-07-03T13:55:12.408361</ts>
    <user>U051SS2EU</user>
    <text>if y has side effects the macro version is better</text>
  </message>
  <message>
    <ts>2017-07-03T13:57:19.449778</ts>
    <user>U08TWB99B</user>
    <text>although the original question did not mention any lazy evaluation requirements</text>
  </message>
  <message>
    <ts>2017-07-03T13:58:19.469255</ts>
    <user>U051SS2EU</user>
    <text>it wanted a replacement for if</text>
  </message>
  <message>
    <ts>2017-07-03T14:01:35.534535</ts>
    <user>U08TWB99B</user>
    <text>i read it more as "how can I avoid re-typing 'x'" rather than "how can I replace a call to 'if' while keeping the characteristics of 'if'"</text>
  </message>
  <message>
    <ts>2017-07-03T14:08:03.656593</ts>
    <user>U0B4ZBBKM</user>
    <text>Thanks for your suggestions!</text>
  </message>
  <message>
    <ts>2017-07-03T14:57:31.545154</ts>
    <user>U050R7ECY</user>
    <text>is there a way to macroexpand a private macro?</text>
  </message>
  <message>
    <ts>2017-07-03T14:57:45.549413</ts>
    <user>U050R7ECY</user>
    <text>`(macroexpand (private-macro foo))`</text>
  </message>
  <message>
    <ts>2017-07-03T14:58:14.558328</ts>
    <user>U050R7ECY</user>
    <text>trying that gives "var #'private-macro is not public"</text>
  </message>
  <message>
    <ts>2017-07-03T15:01:30.617922</ts>
    <user>U056QFNM5</user>
    <text>I think you need to quote the to-be-expanded form.</text>
  </message>
  <message>
    <ts>2017-07-03T15:01:40.620924</ts>
    <user>U056QFNM5</user>
    <text>`(macroexpand '(private-macro foo))`</text>
  </message>
  <message>
    <ts>2017-07-03T15:03:37.655484</ts>
    <user>U050R7ECY</user>
    <text>that was slack formatting fail on my part</text>
  </message>
  <message>
    <ts>2017-07-03T15:03:55.660660</ts>
    <user>U050R7ECY</user>
    <text>I know the standard way to use macroexpand, but it fails w/ private macros</text>
  </message>
  <message>
    <ts>2017-07-03T15:04:46.674687</ts>
    <user>U056QFNM5</user>
    <text>Interesting. :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-03T15:05:28.686219</ts>
    <user>U056QFNM5</user>
    <text>Have you tried `ns-resolve`ing the private macro? Not sure whether that would work, but maybe.</text>
  </message>
  <message>
    <ts>2017-07-03T15:29:42.082048</ts>
    <user>U050R7ECY</user>
    <text>ah, looks like `tools.analyzer` will do it</text>
  </message>
  <message>
    <ts>2017-07-03T15:29:56.085864</ts>
    <user>U050R7ECY</user>
    <text>but AFAICT, it's not possible in the built-in implementation</text>
  </message>
  <message>
    <ts>2017-07-03T15:34:37.163451</ts>
    <user>U056QFNM5</user>
    <text>Wasn't aware of that limitation. Interesting.</text>
  </message>
  <message>
    <ts>2017-07-03T15:41:47.276934</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U056QFNM5&gt; the problem with resolve or ns-resolve is that the clojure compiler uses metadata on vars to decide if something is a macro, so using the var means it gets treated as a function - but! the fascinating thing is that this is a valid way to expand a macro, as long as you provide placeholders for &amp;amp;form and &amp;amp;env (nil here because I'm lazy and it doesn't change the output) ```=&amp;gt; ((resolve 'when) nil nil true :OK)
(if true (do :OK))```</text>
  </message>
  <message>
    <ts>2017-07-03T15:44:00.310368</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U050R7ECY&gt; so yeah, see above, just give workable &amp;amp;env and &amp;amp;form, and call the var instead of macroexpand the macro call and it works</text>
  </message>
  <message>
    <ts>2017-07-03T15:44:45.322024</ts>
    <user>U050R7ECY</user>
    <text>interesting</text>
  </message>
  <message>
    <ts>2017-07-03T15:44:47.322471</ts>
    <user>U050R7ECY</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-03T15:45:21.331402</ts>
    <user>U051SS2EU</user>
    <text>of course with macros that don't access &amp;amp;env or &amp;amp;form (which is most…) two nils suffice</text>
  </message>
  <message>
    <ts>2017-07-03T16:36:38.114112</ts>
    <user>U056QFNM5</user>
    <text>Very cool! Thanks for the info &lt;@U051SS2EU&gt;. :simple_smile:</text>
  </message>
  <message>
    <ts>2017-07-03T20:37:16.511250</ts>
    <user>U4TGNN19D</user>
    <text>hi all -- I'm using tools.cli and it's not clear how to pass multiple arguments to an option -- eg if I want an option to become a vector of numbers</text>
  </message>
  <message>
    <ts>2017-07-03T20:46:56.587146</ts>
    <user>U4TGNN19D</user>
    <text>nevermind -- ended up taking it as a string and doing this - `:parse-fn (fn [input ](into [] (map #(Integer/parseInt (str %)) input)))]`</text>
  </message>
  <message>
    <ts>2017-07-03T23:03:43.834810</ts>
    <user>U2TCUSM2R</user>
    <text>This is rather odd, but has anyone experienced an issue where dereferencing agents of collections truncates some of the elements?</text>
  </message>
  <message>
    <ts>2017-07-03T23:22:51.994689</ts>
    <user>U051SS2EU</user>
    <text>remember that send and send-off can return before their action finishes - or even before it starts sometimes</text>
  </message>
  <message>
    <ts>2017-07-03T23:29:52.051018</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (let [a (agent []) f #(send a conj nil) g (fn [] (count @a))] (dotimes [_ 10000] (f)) (repeatedly 10 g))
(6622 6687 6716 6735 6757 6776 6794 6825 6851 6880)
```</text>
  </message>
  <message>
    <ts>2017-07-03T23:39:11.127987</ts>
    <user>U2TCUSM2R</user>
    <text>&lt;@U051SS2EU&gt; that's got to be it. I think I just got confused because I'm creating and returning the agent from inside a macro. That's where I see the trouble. If I create a `def` for the return value and then `deref` that it waits just long enough for the last results</text>
  </message>
  <message>
    <ts>2017-07-03T23:39:30.130570</ts>
    <user>U051SS2EU</user>
    <text>there's the function `await`</text>
  </message>
  <message>
    <ts>2017-07-03T23:46:11.186861</ts>
    <user>U2TCUSM2R</user>
    <text>Thanks, Justin! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-03T23:59:09.293634</ts>
    <user>U2TCUSM2R</user>
    <text>Oh...actually I didn't realize `await` depends on the `:done` key. I'm using an `int-map` so no keywords...</text>
  </message>
  <message>
    <ts>2017-07-03T23:59:54.299888</ts>
    <user>U051SS2EU</user>
    <text>what?</text>
  </message>
  <message>
    <ts>2017-07-04T00:01:22.314171</ts>
    <user>U051SS2EU</user>
    <text>there's no magic :done key, await just lines up a lock that won't unlock until every pending action is done, then waits on it ```(defn await
  "Blocks the current thread (indefinitely!) until all actions
  dispatched thus far, from this thread or agent, to the agent(s) have
  occurred.  Will block on failed agents.  Will never return if
  a failed agent is restarted with :clear-actions true."
  {:added "1.0"
   :static true}
  [&amp;amp; agents]
  (io! "await in transaction"
    (when *agent*
      (throw (new Exception "Can't await in agent action")))
    (let [latch (new java.util.concurrent.CountDownLatch (count agents))
          count-down (fn [agent] (. latch (countDown)) agent)]
      (doseq [agent agents]
        (send agent count-down))
      (. latch (await)))))
```</text>
  </message>
  <message>
    <ts>2017-07-04T00:02:35.325345</ts>
    <user>U2TCUSM2R</user>
    <text>Oh, ok. I was confused by Clojure Docs: &lt;https://clojuredocs.org/clojure.core/await&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T00:02:44.326773</ts>
    <user>U2TCUSM2R</user>
    <text>I'll have to see why it's not still working</text>
  </message>
  <message>
    <ts>2017-07-04T00:03:49.335865</ts>
    <user>U051SS2EU</user>
    <text>one possibility is that something is calling send after you call await?</text>
  </message>
  <message>
    <ts>2017-07-04T00:10:00.389625</ts>
    <user>U2TCUSM2R</user>
    <text>I would assume</text>
  </message>
  <message>
    <ts>2017-07-04T00:11:36.403562</ts>
    <user>U2TCUSM2R</user>
    <text>Here's the macro:</text>
  </message>
  <message>
    <ts>2017-07-04T00:12:16.409267</ts>
    <user>U2TCUSM2R</user>
    <text>I think `await` isn't doing anything since it can't know whether `pdiff` has finished</text>
  </message>
  <message>
    <ts>2017-07-04T00:13:01.415530</ts>
    <user>U051SS2EU</user>
    <text>it does do something - it waits on all actions that have been submitted before it is called - but you need something different if you want to wait on things pdiff might initiate after the point await is called</text>
  </message>
  <message>
    <ts>2017-07-04T00:13:17.418390</ts>
    <user>U051SS2EU</user>
    <text>also calling def on the output of gensym is super weird -why not a let block?</text>
  </message>
  <message>
    <ts>2017-07-04T00:14:02.424526</ts>
    <user>U2TCUSM2R</user>
    <text>I'm confused as to what you mean in your second statement</text>
  </message>
  <message>
    <ts>2017-07-04T00:14:34.429419</ts>
    <user>U051SS2EU</user>
    <text>def always creates namespace level bindings, using def with a gensym is weird because how would you even know which thing to look for later?</text>
  </message>
  <message>
    <ts>2017-07-04T00:14:53.432056</ts>
    <user>U051SS2EU</user>
    <text>let is for locals, so I would expect let instead in a scenario like this</text>
  </message>
  <message>
    <ts>2017-07-04T00:15:53.440900</ts>
    <user>U2TCUSM2R</user>
    <text>Oh, the gensym isn't quasiquoted</text>
  </message>
  <message>
    <ts>2017-07-04T00:16:11.443543</ts>
    <user>U051SS2EU</user>
    <text>that has nothing to do with it</text>
  </message>
  <message>
    <ts>2017-07-04T00:16:18.444524</ts>
    <user>U051SS2EU</user>
    <text>def creates a new var in your namespace</text>
  </message>
  <message>
    <ts>2017-07-04T00:16:40.447745</ts>
    <user>U051SS2EU</user>
    <text>oh - I see, you create the gensym def once</text>
  </message>
  <message>
    <ts>2017-07-04T00:17:04.451142</ts>
    <user>U051SS2EU</user>
    <text>that guarantees that pdiff-once is a race condition if it's used in two threads though</text>
  </message>
  <message>
    <ts>2017-07-04T00:17:14.452587</ts>
    <user>U0BKWMG5B</user>
    <text>What's the purpose of the macro?</text>
  </message>
  <message>
    <ts>2017-07-04T00:17:20.453499</ts>
    <user>U051SS2EU</user>
    <text>that's another good question</text>
  </message>
  <message>
    <ts>2017-07-04T00:18:04.459595</ts>
    <user>U2TCUSM2R</user>
    <text>The purpose of the macro is to automate three calls in one: creating the agent, calling pdiff, and returning the contents of the agent</text>
  </message>
  <message>
    <ts>2017-07-04T00:19:36.472609</ts>
    <user>U051SS2EU</user>
    <text>if two threads use that macro, the second one will replace the data used by the first</text>
  </message>
  <message>
    <ts>2017-07-04T00:19:46.473989</ts>
    <user>U051SS2EU</user>
    <text>it's extremely unsafe</text>
  </message>
  <message>
    <ts>2017-07-04T00:19:55.475282</ts>
    <user>U0BKWMG5B</user>
    <text>Okay, but why not:
```
(defn pdiff-once [poly order]
  (let [tape (agent (i/int-map))]
    (pdiff poly tape order)
    (await tape)
    @tape))
```</text>
  </message>
  <message>
    <ts>2017-07-04T00:20:00.475939</ts>
    <user>U0CGFT70T</user>
    <text>why this: 
```router=&amp;gt; (if-let [{params :params} {}] (str "params:" params ".") "NOT-defined")
"params:."```</text>
  </message>
  <message>
    <ts>2017-07-04T00:20:43.482376</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U0CGFT70T&gt; because {} is not falsey.</text>
  </message>
  <message>
    <ts>2017-07-04T00:21:01.484961</ts>
    <user>U2TCUSM2R</user>
    <text>weavejester: let me try that. I'm not sure it'll work, but I'm relatively new to agents.</text>
  </message>
  <message>
    <ts>2017-07-04T00:21:10.486249</ts>
    <user>U0BKWMG5B</user>
    <text>`(if-let [params (:params {})] ...)`</text>
  </message>
  <message>
    <ts>2017-07-04T00:21:26.488500</ts>
    <user>U0CGFT70T</user>
    <text>&lt;@U0BKWMG5B&gt; : thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T00:21:53.492263</ts>
    <user>U0BKWMG5B</user>
    <text>With if-let, the expression on the right needs to be `nil` or `false` to fail</text>
  </message>
  <message>
    <ts>2017-07-04T00:21:56.492620</ts>
    <user>U0CGFT70T</user>
    <text>trying to hit else if params not defined</text>
  </message>
  <message>
    <ts>2017-07-04T00:22:38.499008</ts>
    <user>U0CGFT70T</user>
    <text>&lt;@U0BKWMG5B&gt; ok...</text>
  </message>
  <message>
    <ts>2017-07-04T00:22:47.500188</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U2TCUSM2R&gt; You could also use a promise.</text>
  </message>
  <message>
    <ts>2017-07-04T00:23:09.503421</ts>
    <user>U0BKWMG5B</user>
    <text>It depends what `pdiff` looks like, but a promise is more usual.</text>
  </message>
  <message>
    <ts>2017-07-04T00:23:18.504797</ts>
    <user>U051SS2EU</user>
    <text>I assumed an agent was being used because there were multiple alterations</text>
  </message>
  <message>
    <ts>2017-07-04T00:23:37.507489</ts>
    <user>U051SS2EU</user>
    <text>but doing that in a new thread makes using an agent problematic...</text>
  </message>
  <message>
    <ts>2017-07-04T00:23:47.508941</ts>
    <user>U2TCUSM2R</user>
    <text>It works</text>
  </message>
  <message>
    <ts>2017-07-04T00:23:57.510268</ts>
    <user>U0BKWMG5B</user>
    <text>The name `pdiff-once` also suggests a memoize, but it depends what you're trying to do.</text>
  </message>
  <message>
    <ts>2017-07-04T00:23:58.510359</ts>
    <user>U2TCUSM2R</user>
    <text>But `await` is not working</text>
  </message>
  <message>
    <ts>2017-07-04T00:24:24.514086</ts>
    <user>U0BKWMG5B</user>
    <text>Could you give us an idea of what `pdiff` is doing, &lt;@U2TCUSM2R&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-04T00:24:32.515170</ts>
    <user>U2TCUSM2R</user>
    <text>`send` calls inside pdiff have not finished by the time `pdiff-once` returns</text>
  </message>
  <message>
    <ts>2017-07-04T00:24:57.518501</ts>
    <user>U2TCUSM2R</user>
    <text>it's just associng values with `send`</text>
  </message>
  <message>
    <ts>2017-07-04T00:25:02.519337</ts>
    <user>U051SS2EU</user>
    <text>if await returns, that means those calls weren't even made before await was</text>
  </message>
  <message>
    <ts>2017-07-04T00:25:25.522560</ts>
    <user>U0BKWMG5B</user>
    <text>`pdiff` is parallel diff I assume.</text>
  </message>
  <message>
    <ts>2017-07-04T00:25:27.522923</ts>
    <user>U051SS2EU</user>
    <text>you need some other way to know pdiff is done</text>
  </message>
  <message>
    <ts>2017-07-04T00:25:48.525799</ts>
    <user>U2TCUSM2R</user>
    <text>This is exactly what I said previously...</text>
  </message>
  <message>
    <ts>2017-07-04T00:26:30.531697</ts>
    <user>U051SS2EU</user>
    <text>you said "await isn't working" which I might have misinterpreted</text>
  </message>
  <message>
    <ts>2017-07-04T00:26:55.535352</ts>
    <user>U2TCUSM2R</user>
    <text>I said, "I think `await` isn't doing anything since it can't know whether `pdiff` has finished"</text>
  </message>
  <message>
    <ts>2017-07-04T00:26:58.535723</ts>
    <user>U0BKWMG5B</user>
    <text>Would it be possible to post the definition of `pdiff` as well?</text>
  </message>
  <message>
    <ts>2017-07-04T00:27:15.538385</ts>
    <user>U2TCUSM2R</user>
    <text>It's not going to make a difference</text>
  </message>
  <message>
    <ts>2017-07-04T00:27:59.544830</ts>
    <user>U051SS2EU</user>
    <text>it could, if there was a way to ensure you don't return from pdiff until it makes all it's send calls for example</text>
  </message>
  <message>
    <ts>2017-07-04T00:29:11.555071</ts>
    <user>U0BKWMG5B</user>
    <text>I'm not clear on what `pdiff` is doing, or why you're using an agent. I assume it's doing something in parallel.</text>
  </message>
  <message>
    <ts>2017-07-04T03:29:54.685798</ts>
    <user>U5YHX0TQV</user>
    <text>&lt;@U2TCUSM2R&gt; do you get your functionality working without all the parallel stuff? Just plain idiomatic single-threaded clojure</text>
  </message>
  <message>
    <ts>2017-07-04T04:48:32.369353</ts>
    <user>U2PGHFU5U</user>
    <text>Does anyone know how to obtain the `Set-Cookie` header from `http-kit`, when you pass the `Cookie` header in the call as well? E.g.,

```
(defn visit-url [{:keys [cookies url] :as context}]
  (let [result-chan  (chan)
        check-result (fn [{:keys [status] :as response}]
                       ;; TODO: get new cookies here....:/ not visible in response
                       (log/error "RESPONSE" response) ; =&amp;gt; no `Set-Cookie`
                       (go (&amp;gt;! result-chan (= status 200))))]
    (http/get url
              {:headers          {"Accept" "text/html"
                                  "Cookie" cookies} ; cookies is string of earlier obtained cookies
               :follow-redirects false}
               check-result)
    result-chan))
```</text>
  </message>
  <message>
    <ts>2017-07-04T09:01:18.469400</ts>
    <user>U0K1UT6PQ</user>
    <text>question: how to find a dependency a leiningen plugin pulls in at runtime?  I've run `lein deps :tree` on the most obvious dependencies, and I don't see where a particular version of ring is coming from.  I've sprinkled `:exclusions` all round.  Yet I find the dependency in `target/stale/leiningen.core.classpath.extract-native-dependencies` ...</text>
  </message>
  <message>
    <ts>2017-07-04T09:01:39.477158</ts>
    <user>U0K1UT6PQ</user>
    <text>(context: trying to upgrade gorilla repl to 1.9, but  it barfs on an old version or ring)</text>
  </message>
  <message>
    <ts>2017-07-04T09:02:15.490154</ts>
    <user>U0K1UT6PQ</user>
    <text>happens when I do `lein gorilla :port 9000`, yet neither gorilla-repl nor lein-gorilla seem to need it</text>
  </message>
  <message>
    <ts>2017-07-04T09:06:10.575524</ts>
    <user>U06F82LES</user>
    <text>have you tried deleting `target`?</text>
  </message>
  <message>
    <ts>2017-07-04T09:07:10.597369</ts>
    <user>U0K1UT6PQ</user>
    <text>I've deleted all the content yes</text>
  </message>
  <message>
    <ts>2017-07-04T09:07:56.614149</ts>
    <user>U06F82LES</user>
    <text>`lein deps :tree` should work, unless gorilla-repl does something funky</text>
  </message>
  <message>
    <ts>2017-07-04T09:08:22.623737</ts>
    <user>U06F82LES</user>
    <text>you can issue a global exclusion for ring</text>
  </message>
  <message>
    <ts>2017-07-04T09:08:42.630722</ts>
    <user>U06F82LES</user>
    <text>&lt;https://github.com/technomancy/leiningen/blob/master/sample.project.clj#L86&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T09:11:08.682371</ts>
    <user>U0K1UT6PQ</user>
    <text>hm.  the problem being that lein-gorilla does need ring, just not that old one ...</text>
  </message>
  <message>
    <ts>2017-07-04T09:12:18.707375</ts>
    <user>U06F82LES</user>
    <text>that's ok, you can specify the latest version</text>
  </message>
  <message>
    <ts>2017-07-04T09:12:36.713938</ts>
    <user>U06F82LES</user>
    <text>exclusion just means "ignore whatever transitive dependencies there are relating to this"</text>
  </message>
  <message>
    <ts>2017-07-04T09:13:00.722629</ts>
    <user>U0K1UT6PQ</user>
    <text>thank you, will try that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T09:13:04.724161</ts>
    <user>U051SS2EU</user>
    <text>to look at plugin deps there's a separate plugin tree command `lein deps :plugin-tree`</text>
  </message>
  <message>
    <ts>2017-07-04T09:13:22.730553</ts>
    <user>U06F82LES</user>
    <text>&lt;@U051SS2EU&gt; did not know that</text>
  </message>
  <message>
    <ts>2017-07-04T09:13:43.738277</ts>
    <user>U0K1UT6PQ</user>
    <text>&lt;@U051SS2EU&gt; nice one, that should help</text>
  </message>
  <message>
    <ts>2017-07-04T09:14:03.745502</ts>
    <user>U0K1UT6PQ</user>
    <text>thank you!</text>
  </message>
  <message>
    <ts>2017-07-04T09:14:23.753020</ts>
    <user>U5XMV6DQT</user>
    <text>```lein ancient``` can help with outdated deps (it's a separate plugin though)</text>
  </message>
  <message>
    <ts>2017-07-04T09:15:17.773195</ts>
    <user>U0K1UT6PQ</user>
    <text>well, it looks like it's something funky alright</text>
  </message>
  <message>
    <ts>2017-07-04T09:15:45.783453</ts>
    <user>U0K1UT6PQ</user>
    <text>(as in it still doesn't show up)</text>
  </message>
  <message>
    <ts>2017-07-04T09:17:09.814437</ts>
    <user>U050M5F75</user>
    <text>question-- does anyone have a homoiconic datetime solution/approach that they use in their projs?</text>
  </message>
  <message>
    <ts>2017-07-04T09:20:09.882320</ts>
    <user>U050SC7SV</user>
    <text>I like my dates served as longs, nothing else (I rarely have to care about TZ)</text>
  </message>
  <message>
    <ts>2017-07-04T09:20:42.894843</ts>
    <user>U06F82LES</user>
    <text>I use only java.util.Date and js/Date</text>
  </message>
  <message>
    <ts>2017-07-04T09:20:58.900630</ts>
    <user>U050M5F75</user>
    <text>just everything UTC -&amp;gt; epoch &lt;@U050SC7SV&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-04T09:21:00.901513</ts>
    <user>U06F82LES</user>
    <text>with the occasional goog.time and clj-time for formatting</text>
  </message>
  <message>
    <ts>2017-07-04T09:21:19.908339</ts>
    <user>U4TE22XR8</user>
    <text>&lt;@U050M5F75&gt; I use this: &lt;https://github.com/dm3/clojure.java-time&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T09:21:21.909026</ts>
    <user>U050SC7SV</user>
    <text>date as number works well as long as you don't need to be super precise with "date math"</text>
  </message>
  <message>
    <ts>2017-07-04T09:21:28.911785</ts>
    <user>U050SC7SV</user>
    <text>&lt;@U050M5F75&gt; yes</text>
  </message>
  <message>
    <ts>2017-07-04T09:21:59.923301</ts>
    <user>U050SC7SV</user>
    <text>otherwise java 8 api seems decent</text>
  </message>
  <message>
    <ts>2017-07-04T09:22:39.938675</ts>
    <user>U050M5F75</user>
    <text>not a fan of `#object[java.time.LocalDate ...]`</text>
  </message>
  <message>
    <ts>2017-07-04T09:23:14.951743</ts>
    <user>U050M5F75</user>
    <text>seems strange those don't get read</text>
  </message>
  <message>
    <ts>2017-07-04T09:23:33.958796</ts>
    <user>U051SS2EU</user>
    <text>that would require clojure to require java 8 right?</text>
  </message>
  <message>
    <ts>2017-07-04T09:23:41.961820</ts>
    <user>U051SS2EU</user>
    <text>I guess it could do that conditionally?</text>
  </message>
  <message>
    <ts>2017-07-04T09:23:55.967413</ts>
    <user>U050M5F75</user>
    <text>would be interesting to have those dump into a constructor/factory format like `(java.time.LocalDate. &amp;amp; args)`</text>
  </message>
  <message>
    <ts>2017-07-04T09:24:57.990225</ts>
    <user>U051SS2EU</user>
    <text>the more likely option would be what clojure does today with java.util.Date - using a literal representation that the reader accepts</text>
  </message>
  <message>
    <ts>2017-07-04T09:25:15.996526</ts>
    <user>U050M5F75</user>
    <text>oh rllllly</text>
  </message>
  <message>
    <ts>2017-07-04T09:25:28.001784</ts>
    <user>U050M5F75</user>
    <text>i did not know that</text>
  </message>
  <message>
    <ts>2017-07-04T09:26:26.023019</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (java.util.Date.)
#inst "2017-07-04T13:25:33.376-00:00"
+user=&amp;gt; #inst "1492-01-10T12:11:44.000-00:00"
#inst "1492-01-10T12:11:44.000-00:00"
```</text>
  </message>
  <message>
    <ts>2017-07-04T09:27:10.039528</ts>
    <user>U051SS2EU</user>
    <text>Date is a less than great API, but clojure makes it readable</text>
  </message>
  <message>
    <ts>2017-07-04T09:28:06.059845</ts>
    <user>U050M5F75</user>
    <text>does this `#inst` mean &lt;https://clojure.github.io/clojure/clojure.instant-api.html&gt;?</text>
  </message>
  <message>
    <ts>2017-07-04T09:28:23.066540</ts>
    <user>U051SS2EU</user>
    <text>no, it's how Date objects are printed, its the instant reader</text>
  </message>
  <message>
    <ts>2017-07-04T09:30:32.115103</ts>
    <user>U0K1UT6PQ</user>
    <text>I confirm the fishiness, was pulling a dependency in the code :facepalm:</text>
  </message>
  <message>
    <ts>2017-07-04T09:30:40.117757</ts>
    <user>U0K1UT6PQ</user>
    <text>so that was fun</text>
  </message>
  <message>
    <ts>2017-07-04T09:31:34.138573</ts>
    <user>U050M5F75</user>
    <text>this is cool. didnt know about `#inst` and `#uuid` and stuff</text>
  </message>
  <message>
    <ts>2017-07-04T09:31:37.139839</ts>
    <user>U050M5F75</user>
    <text>thx</text>
  </message>
  <message>
    <ts>2017-07-04T10:30:41.486584</ts>
    <user>U3QUAHZJ6</user>
    <text>hello everyone, i have 4 heavy database queries that are running sequentially

```
      (benefit-db/transition-benefits-to-ongoing db/db-spec)
      (benefit-db/transition-benefits-to-consumed db/db-spec)
      (benefit-db/transition-benefits-to-ended db/db-spec)
```


is there an easy way to run this guys in parallel and do something else when they *all* finish?</text>
  </message>
  <message>
    <ts>2017-07-04T11:10:15.371456</ts>
    <user>U2PGHFU5U</user>
    <text>plins: `(let [results (map deref  [(future trans1) (future trans2)  (future trans3)] do-something-else))`</text>
  </message>
  <message>
    <ts>2017-07-04T11:23:25.640533</ts>
    <user>U06C1JGHX</user>
    <text>hey all… for a number of strange reasons I want to create an instance of a class whose name I only have as a string. How would I instantiate one?</text>
  </message>
  <message>
    <ts>2017-07-04T11:25:10.676036</ts>
    <user>U050SC7SV</user>
    <text>either via a macro or reflection possibly</text>
  </message>
  <message>
    <ts>2017-07-04T11:26:05.694575</ts>
    <user>U06C1JGHX</user>
    <text>cheers &lt;@U050SC7SV&gt;. I just found `Class/forName` which does what I'm after</text>
  </message>
  <message>
    <ts>2017-07-04T11:26:16.698268</ts>
    <user>U050SC7SV</user>
    <text>(.newInstance (Class/forName "foo.bar.baz"))</text>
  </message>
  <message>
    <ts>2017-07-04T11:26:21.700028</ts>
    <user>U050SC7SV</user>
    <text>yes :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-04T11:29:21.759915</ts>
    <user>U0524B4UW</user>
    <text>tho `(.newInstance (Class/forName "foo.bar.baz"))` only seems to have a 0-args sig</text>
  </message>
  <message>
    <ts>2017-07-04T11:31:19.799710</ts>
    <user>U0524B4UW</user>
    <text>ah, you have to use `.getDeclaredConstructor` on the `Class` object to get the constructor method and then call that</text>
  </message>
  <message>
    <ts>2017-07-04T13:04:45.262211</ts>
    <user>U06BV1HCH</user>
    <text>Do multiple threads just reading from (derefing) an atom that has a constant value block or cause any kind of contention?</text>
  </message>
  <message>
    <ts>2017-07-04T13:05:17.268968</ts>
    <user>U0NCTKEV8</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-07-04T13:05:39.273603</ts>
    <user>U06BV1HCH</user>
    <text>Awesome -- so should be the same as just reading a var?</text>
  </message>
  <message>
    <ts>2017-07-04T13:06:13.280879</ts>
    <user>U06BV1HCH</user>
    <text>in terms of multithread contention</text>
  </message>
  <message>
    <ts>2017-07-04T13:08:57.315913</ts>
    <user>U0NCTKEV8</user>
    <text>that is kind of complicated, they are different things. my intuition would be that vars would be ever so slightly faster before the jit has kicked in, and an atom would be ever so slightly faster after</text>
  </message>
  <message>
    <ts>2017-07-04T13:09:38.324664</ts>
    <user>U0NCTKEV8</user>
    <text>but they are different things, not drop in replacements for each other</text>
  </message>
  <message>
    <ts>2017-07-04T13:18:10.430803</ts>
    <user>U06BV1HCH</user>
    <text>understood. the story is that we have a system with config data in atoms, which are constant after configuration, and our multicore scaling is bad. the question came up of whether billions of accesses to  constant-valued atoms might be causing contention. the alternative we're considering isn't actually to use a var (actually, we'd get rid of the vars that currently hold the atoms), but just to pass all of the config data as an argument throughout the system. it'll be a relatively big job to try this, so i'm trying to figure out if the underlying theory is even true, that reading (derefing) the atom in a var can cause contention among threads.</text>
  </message>
  <message>
    <ts>2017-07-04T13:22:25.482756</ts>
    <user>U051SS2EU</user>
    <text>atoms contain an AtomicReference &lt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Atom.java#L20&gt; and use the get method to access their value &lt;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicReference.html#get()&gt;</text>
  </message>
  <message>
    <ts>2017-07-04T13:23:41.497945</ts>
    <user>U051SS2EU</user>
    <text>get on an AtomicReference is the same overhead as reading a volatile, which sources claim is cheap</text>
  </message>
  <message>
    <ts>2017-07-04T13:23:49.499736</ts>
    <user>U051SS2EU</user>
    <text>this should also be easy to microbenchmark though</text>
  </message>
  <message>
    <ts>2017-07-04T13:25:23.518574</ts>
    <user>U0NCTKEV8</user>
    <text>you should actually hook something like visualvm and look at the hot methods</text>
  </message>
  <message>
    <ts>2017-07-04T13:25:29.519801</ts>
    <user>U0NCTKEV8</user>
    <text>don't just guess</text>
  </message>
  <message>
    <ts>2017-07-04T13:26:41.534156</ts>
    <user>U0NCTKEV8</user>
    <text>if your configs are in global atoms, then you are dereferencing both the var containing the atom and the atom</text>
  </message>
  <message>
    <ts>2017-07-04T13:28:43.558608</ts>
    <user>U051SS2EU</user>
    <text>that's a good point, based on profiling I've done I'd expect the var lookup to be more expensive than the atom deref</text>
  </message>
  <message>
    <ts>2017-07-04T13:29:21.566147</ts>
    <user>U0NCTKEV8</user>
    <text>I mean for the config thing</text>
  </message>
  <message>
    <ts>2017-07-04T13:31:02.587623</ts>
    <user>U0NCTKEV8</user>
    <text>for vars vs. atoms, without the jit, my guess is the atoms still have to traverse a few extra pointers for access, but with the jit I expect it is a regular reference that just uses atomic instructions</text>
  </message>
  <message>
    <ts>2017-07-04T13:32:22.603154</ts>
    <user>U0NCTKEV8</user>
    <text>(I don't know, I haven't profiled it or looked at the code the jit produces)</text>
  </message>
  <message>
    <ts>2017-07-04T13:32:58.610126</ts>
    <user>U0NCTKEV8</user>
    <text>but I would expect just about anything else to dominate those differences</text>
  </message>
  <message>
    <ts>2017-07-04T13:48:46.796076</ts>
    <user>U0D33A4JF</user>
    <text>there should also be some improvement with direct linking on</text>
  </message>
  <message>
    <ts>2017-07-04T13:49:00.798763</ts>
    <user>U0NCTKEV8</user>
    <text>direct linking is only for functions</text>
  </message>
  <message>
    <ts>2017-07-04T13:51:12.824115</ts>
    <user>U051SS2EU</user>
    <text>fwiw the differences are pretty small once the JIT has kicked in ```+user=&amp;gt; (let [a (atom 42)] (reduce (fn [_ ft] @ft) (repeatedly 10000 #(future @a))))
42
+user=&amp;gt; (let [a (atom 42)] (crit/bench (reduce (fn [_ ft] @ft) (repeatedly 10000 #(future @a)))))
Evaluation count : 900 in 60 samples of 15 calls.
             Execution time mean : 91.621587 ms
    Execution time std-deviation : 11.931053 ms
   Execution time lower quantile : 57.841222 ms ( 2.5%)
   Execution time upper quantile : 106.129733 ms (97.5%)
                   Overhead used : 1.534327 ns

Found 4 outliers in 60 samples (6.6667 %)
        low-severe       4 (6.6667 %)
 Variance from outliers : 80.6424 % Variance is severely inflated by outliers
nil
+user=&amp;gt; (def a (atom 42))
#'user/a
:user=&amp;gt; (crit/bench (reduce (fn [_ ft] @ft) (repeatedly 10000 #(future @a))))
Evaluation count : 600 in 60 samples of 10 calls.
             Execution time mean : 97.601813 ms
    Execution time std-deviation : 11.193445 ms
   Execution time lower quantile : 73.574920 ms ( 2.5%)
   Execution time upper quantile : 116.281827 ms (97.5%)
                   Overhead used : 1.534327 ns

Found 1 outliers in 60 samples (1.6667 %)
        low-severe       1 (1.6667 %)
 Variance from outliers : 75.5029 % Variance is severely inflated by outliers
nil
+user=&amp;gt; (crit/bench (reduce (fn [_ ft] @ft) (repeatedly 10000 #(future *clojure-version*))))
Evaluation count : 780 in 60 samples of 13 calls.
             Execution time mean : 99.271467 ms
    Execution time std-deviation : 8.236914 ms
   Execution time lower quantile : 78.021114 ms ( 2.5%)
   Execution time upper quantile : 111.492377 ms (97.5%)
                   Overhead used : 1.534327 ns

Found 4 outliers in 60 samples (6.6667 %)
        low-severe       1 (1.6667 %)
        low-mild         3 (5.0000 %)
 Variance from outliers : 61.8161 % Variance is severely inflated by outliers
nil
```</text>
  </message>
  <message>
    <ts>2017-07-04T13:51:51.831737</ts>
    <user>U051SS2EU</user>
    <text>that's comparing - direct access to atom and deref, access of atom in var and deref, and access to a value in a var</text>
  </message>
  <message>
    <ts>2017-07-04T13:52:28.839285</ts>
    <user>U051SS2EU</user>
    <text>the futures are because there was concern about contention</text>
  </message>
  <message>
    <ts>2017-07-04T13:54:06.858127</ts>
    <user>U0NCTKEV8</user>
    <text>obviously what you should do is preprocess your config in to a primitive array, and generate macros for accessing each config value that expand in to agets of the right array slot</text>
  </message>
  <message>
    <ts>2017-07-04T14:34:07.307375</ts>
    <user>U06BV1HCH</user>
    <text>all very interesting! point well taken about checking data before optimizing, and we have a lot of work to do on that front</text>
  </message>
  <message>
    <ts>2017-07-04T14:34:10.307898</ts>
    <user>U06BV1HCH</user>
    <text>it seems from the discussion here this use of atoms in vars probably isn't producing contention, right?</text>
  </message>
  <message>
    <ts>2017-07-04T14:36:06.329433</ts>
    <user>U051SS2EU</user>
    <text>right- no evidence of contention there at all</text>
  </message>
  <message>
    <ts>2017-07-04T14:36:15.330983</ts>
    <user>U06BV1HCH</user>
    <text>fwiw the alternative we're considering would be function args, rather than vars, with the config passed everywhere</text>
  </message>
  <message>
    <ts>2017-07-04T14:36:27.333153</ts>
    <user>U06BV1HCH</user>
    <text>awesome, thx!!</text>
  </message>
  <message>
    <ts>2017-07-04T14:38:13.352455</ts>
    <user>U051SS2EU</user>
    <text>I realize I didn't benchmark just having a data literal - checking that now to see if there's any difference worth noticing</text>
  </message>
  <message>
    <ts>2017-07-04T14:38:31.355921</ts>
    <user>U051SS2EU</user>
    <text>but really profiling your own code and looking for the actual perf bottlenecks is the way to go</text>
  </message>
  <message>
    <ts>2017-07-04T14:39:25.365653</ts>
    <user>U051SS2EU</user>
    <text>yeah - replacing @a with a literal 42 (but still reducing over futures etc.) ends up taking ~the same~ (actually slightly longer, but within the measurement epsilon so not meaningful)</text>
  </message>
  <message>
    <ts>2017-07-04T14:45:33.431724</ts>
    <user>U06BV1HCH</user>
    <text>great to know -- thanks!</text>
  </message>
  <message>
    <ts>2017-07-04T16:25:31.464665</ts>
    <user>U5ZAJ15P0</user>
    <text>Hello! I am using Pedestal + Lacinia Pedestal to develop a GraphQL server, but I am not quite sure how to set up hot-reloading. Could anyone point me in the right direction?</text>
  </message>
  <message>
    <ts>2017-07-04T16:25:45.466761</ts>
    <user>U5ZAJ15P0</user>
    <text>I would like to hot-reload the GraphQL schema and the resolvers</text>
  </message>
  <message>
    <ts>2017-07-05T05:39:49.097310</ts>
    <user>U0514TE0F</user>
    <text>Hi, could you point me some http/2/streaming clojure client?</text>
  </message>
  <message>
    <ts>2017-07-05T05:42:24.154893</ts>
    <user>U640YAFPW</user>
    <text>We are trying to add clojure.spec and metosin/spec-tools to our codebase, and it looks like clojure 1.9 is a prerequisite. We tried upgrading to `1.9-alpha17`, but currently facing a bunch of problems related to the upgrade. Our app currently does not start, with errors similar to the followingZ
```Caused by: clojure.lang.ExceptionInfo: Call to clojure.core/defn- did not conform to spec:
In: [0] val: clj-tuple/conj-tuple fails spec: :clojure.core.specs.alpha/defn-args at: [:args :name] predicate: simple-symbol?```

A number of these are in libs and stuff. We've been upgrading a few of them, or fixing the error, which typically causes a new error to appear. Is there anyway to switch off clojure.spec validating the entire codebase + libs? Possibly get it to stick to a few namespaces only? Is this happening because we are trying to upgrade to an alpha?</text>
  </message>
  <message>
    <ts>2017-07-05T05:47:40.272637</ts>
    <user>U060FKQPN</user>
    <text>there's no way to turn off spec checks on macroexpansion</text>
  </message>
  <message>
    <ts>2017-07-05T05:48:34.292634</ts>
    <user>U060FKQPN</user>
    <text>your only option is to upgrade to versions of the libraries that include the fixes you need</text>
  </message>
  <message>
    <ts>2017-07-05T06:26:12.089083</ts>
    <user>U050DD55V</user>
    <text>hi  - is there a way to get all resources on the classpath - whether they be inside of jars of on the filesystem?</text>
  </message>
  <message>
    <ts>2017-07-05T06:39:24.341911</ts>
    <user>U0FR9C8RZ</user>
    <text>&lt;@U050DD55V&gt; I'm sure there must be but I don't know what it is. eg. iirc Spring does a bunch of classpath scanning</text>
  </message>
  <message>
    <ts>2017-07-05T06:55:34.641753</ts>
    <user>U06BE1L6T</user>
    <text>jonpither: something like this (in java): &lt;https://stackoverflow.com/questions/3923129/get-a-list-of-resources-from-classpath-directory&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T07:23:53.154908</ts>
    <user>U640YAFPW</user>
    <text>&lt;@U060FKQPN&gt; thanks</text>
  </message>
  <message>
    <ts>2017-07-05T08:14:49.120644</ts>
    <user>U1WAUKQ3E</user>
    <text>Hi! I wrote an article about PostgreSQL to Datomic migration. Hope you'll find it useful.
&lt;http://grishaev.me/en/pg-to-datomic&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T08:17:20.172853</ts>
    <user>U5ZAJ15P0</user>
    <text>igrishaev: thank you for writing this up; very useful!</text>
  </message>
  <message>
    <ts>2017-07-05T08:17:34.177798</ts>
    <user>U5ZAJ15P0</user>
    <text>there is a &lt;#C03RZMDSH|datomic&gt; channel, you might want to post it there too</text>
  </message>
  <message>
    <ts>2017-07-05T08:18:55.206675</ts>
    <user>U1WAUKQ3E</user>
    <text>thank you, makes sense</text>
  </message>
  <message>
    <ts>2017-07-05T08:20:44.245985</ts>
    <user>U0CKDHF4L</user>
    <text>does the describe of a spec always have a similar structure to the data it specifies ? Can you give a counterexample ?</text>
  </message>
  <message>
    <ts>2017-07-05T08:22:51.292835</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0CKDHF4L&gt; I am not overly familiar with clojure specs, but map specs are represented as vectors I think</text>
  </message>
  <message>
    <ts>2017-07-05T08:22:57.295014</ts>
    <user>U5ZAJ15P0</user>
    <text>well, as a map with a `:req` vector</text>
  </message>
  <message>
    <ts>2017-07-05T08:24:24.326669</ts>
    <user>U0CKDHF4L</user>
    <text>yes, ```(keys :req etc)``` -- but that has basically the same nesting structure</text>
  </message>
  <message>
    <ts>2017-07-05T08:25:00.339893</ts>
    <user>U0CKDHF4L</user>
    <text>I'm trying to think of a case where you describe a nested structure of collections by a flat spec</text>
  </message>
  <message>
    <ts>2017-07-05T10:25:59.073746</ts>
    <user>U0GC1C09L</user>
    <text>does clojure have a representation of infinity that can work with mathematical operators? something like `(&amp;lt;= 1 2 Infinity)` ?</text>
  </message>
  <message>
    <ts>2017-07-05T10:29:26.204880</ts>
    <user>U0CKDHF4L</user>
    <text>```Double/POSITIVE_INFINITY```</text>
  </message>
  <message>
    <ts>2017-07-05T10:30:32.248184</ts>
    <user>U0CKDHF4L</user>
    <text>or ```Number.POSITIVE_INFINITY``` in CLJS</text>
  </message>
  <message>
    <ts>2017-07-05T10:31:04.269242</ts>
    <user>U0GC1C09L</user>
    <text>!! thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T10:31:54.300863</ts>
    <user>U1NGX4Z6F</user>
    <text>hey guys</text>
  </message>
  <message>
    <ts>2017-07-05T10:32:09.310156</ts>
    <user>U1NGX4Z6F</user>
    <text>what's you're preferred method of checking for nils before assignation ?</text>
  </message>
  <message>
    <ts>2017-07-05T10:32:27.321542</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U0GC1C09L&gt; see also &lt;https://dev.clojure.org/jira/browse/CLJ-1074&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T10:33:01.342018</ts>
    <user>U1NGX4Z6F</user>
    <text>i just realized I am repeating `(:username respone)` when I `(if-not (nil? (:username response) (:username response) fallback-value))`</text>
  </message>
  <message>
    <ts>2017-07-05T10:33:21.354555</ts>
    <user>U1NGX4Z6F</user>
    <text>isn't there a syntactic sugar around this ?</text>
  </message>
  <message>
    <ts>2017-07-05T10:33:37.364896</ts>
    <user>U0CKDHF4L</user>
    <text>```(or maybe-nil-thing default-value)```</text>
  </message>
  <message>
    <ts>2017-07-05T10:34:11.385639</ts>
    <user>U060FKQPN</user>
    <text>assuming you also want to exclude `false`</text>
  </message>
  <message>
    <ts>2017-07-05T10:34:25.394734</ts>
    <user>U0CKDHF4L</user>
    <text>(assuming that)</text>
  </message>
  <message>
    <ts>2017-07-05T10:34:44.406483</ts>
    <user>U1NGX4Z6F</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-05T10:34:54.412628</ts>
    <user>U1NGX4Z6F</user>
    <text>(-&amp;gt; good sounds)</text>
  </message>
  <message>
    <ts>2017-07-05T10:35:20.429544</ts>
    <user>U287C9JRE</user>
    <text>&lt;@U1NGX4Z6F&gt; I end up writing functions like `(?apply pred f val &amp;amp; args)` for these purposes. If the predicate fails, then pass the value along</text>
  </message>
  <message>
    <ts>2017-07-05T10:35:22.430869</ts>
    <user>U0CKDHF4L</user>
    <text>but ```(if (nil? maybe-nil-thing) default-value maybe-nil-thing)```</text>
  </message>
  <message>
    <ts>2017-07-05T10:35:46.445874</ts>
    <user>U0CKDHF4L</user>
    <text>is clear</text>
  </message>
  <message>
    <ts>2017-07-05T10:35:49.447546</ts>
    <user>U060FKQPN</user>
    <text>if you specifically want to exclude nil and not false, there's `if-some`</text>
  </message>
  <message>
    <ts>2017-07-05T10:36:15.463675</ts>
    <user>U060FKQPN</user>
    <text>`(if-some [u (:username foo)] u default)`</text>
  </message>
  <message>
    <ts>2017-07-05T10:36:28.472008</ts>
    <user>U1NGX4Z6F</user>
    <text>there-s also (some-&amp;gt;</text>
  </message>
  <message>
    <ts>2017-07-05T10:36:29.472582</ts>
    <user>U0CKDHF4L</user>
    <text>if-let</text>
  </message>
  <message>
    <ts>2017-07-05T10:36:41.480031</ts>
    <user>U1NGX4Z6F</user>
    <text>which short circuits when nil</text>
  </message>
  <message>
    <ts>2017-07-05T10:46:09.838724</ts>
    <user>U643TBNP4</user>
    <text>&lt;@U1NGX4Z6F&gt; I usually use some? when checking for nil. &lt;https://clojuredocs.org/clojure.core/some_q&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T10:47:43.898893</ts>
    <user>U1NGX4Z6F</user>
    <text>I think points for brevity go to `(or value fall-back)`</text>
  </message>
  <message>
    <ts>2017-07-05T10:48:03.911766</ts>
    <user>U1NGX4Z6F</user>
    <text>but yeah, some? is nice</text>
  </message>
  <message>
    <ts>2017-07-05T10:48:21.922955</ts>
    <user>U643TBNP4</user>
    <text>There is always when-some and if-some as well if you need to bind the value or branch accordingly when nil</text>
  </message>
  <message>
    <ts>2017-07-05T11:11:39.831872</ts>
    <user>U07S8JGF7</user>
    <text>&lt;@U1NGX4Z6F&gt; For your particular case, `(:username response fallback-value)` will work as you want.</text>
  </message>
  <message>
    <ts>2017-07-05T11:11:58.843511</ts>
    <user>U060FKQPN</user>
    <text>not if username is set but nil</text>
  </message>
  <message>
    <ts>2017-07-05T11:12:08.849401</ts>
    <user>U07S8JGF7</user>
    <text>ah, yes</text>
  </message>
  <message>
    <ts>2017-07-05T11:12:32.864563</ts>
    <user>U1NGX4Z6F</user>
    <text>true ! good catch</text>
  </message>
  <message>
    <ts>2017-07-05T11:22:35.248147</ts>
    <user>U1ACUMJKX</user>
    <text>this might be a dumb question but how do i get org.clojure/algo.graph on lein?</text>
  </message>
  <message>
    <ts>2017-07-05T11:22:41.252536</ts>
    <user>U1ACUMJKX</user>
    <text>i have `[org.clojure/algo.graph "0.1.0"]`</text>
  </message>
  <message>
    <ts>2017-07-05T11:23:44.292929</ts>
    <user>U1ACUMJKX</user>
    <text>the repl complains that it doesn't exist in clojars or maven</text>
  </message>
  <message>
    <ts>2017-07-05T11:34:38.711988</ts>
    <user>U1ACUMJKX</user>
    <text>i believe the github page &lt;https://github.com/clojure/algo.graph&gt; is out of date so i looked inside clojure contrib and it seems the namespace is actually `clojure.contrib.graph` here &lt;https://github.com/richhickey/clojure-contrib&gt; though the project name is 'algo.graph' from here &lt;https://github.com/clojure/algo.graph/blob/master/project.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T11:35:07.729980</ts>
    <user>U1ACUMJKX</user>
    <text>but unfortunately that isn't working for me either</text>
  </message>
  <message>
    <ts>2017-07-05T12:20:04.370942</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U1ACUMJKX&gt; The `clojure.contrib` stuff was for Clojure 1.2. It was discontinued when Clojure 1.3 came out.</text>
  </message>
  <message>
    <ts>2017-07-05T12:20:44.393471</ts>
    <user>U04V70XH6</user>
    <text>`clojure.algo.graph` is as recent as it gets in the "modern contrib" libs. Let me check Maven Central for a version.</text>
  </message>
  <message>
    <ts>2017-07-05T12:21:49.429326</ts>
    <user>U04V70XH6</user>
    <text>Confirmed -- no releases have been made to Maven Central. I'll bring it up in the dev channel...</text>
  </message>
  <message>
    <ts>2017-07-05T12:43:42.153373</ts>
    <user>U06CM8C3V</user>
    <text>&lt;@U1ACUMJKX&gt; I haven't done enough graphs work to be sure this is related, but I remembered seeing a recent announcement about &lt;https://github.com/Engelberg/ubergraph&gt;, perhaps that might have some of what you're looking for in algo.graph?</text>
  </message>
  <message>
    <ts>2017-07-05T12:44:04.165009</ts>
    <user>U1ACUMJKX</user>
    <text>i considered loom and ubergraph, but i really don't need to pull in all of that</text>
  </message>
  <message>
    <ts>2017-07-05T12:44:27.177800</ts>
    <user>U1ACUMJKX</user>
    <text>i really just need a topological sort, preferably one that partitions appropriately into sets</text>
  </message>
  <message>
    <ts>2017-07-05T12:45:10.201042</ts>
    <user>U06CM8C3V</user>
    <text>Fair enough.</text>
  </message>
  <message>
    <ts>2017-07-05T12:45:59.227682</ts>
    <user>U1ACUMJKX</user>
    <text>right now i'm just ripping out algo's source</text>
  </message>
  <message>
    <ts>2017-07-05T12:46:13.235654</ts>
    <user>U1ACUMJKX</user>
    <text>if sean comes back with any info on it being added to maven</text>
  </message>
  <message>
    <ts>2017-07-05T12:46:15.236216</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://gist.github.com/hiredman/075b45eaeb01e4b526ce6f8854685487#file-ur-component-clj-L1-L13&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T12:46:17.237831</ts>
    <user>U1ACUMJKX</user>
    <text>i'll depend on that instead</text>
  </message>
  <message>
    <ts>2017-07-05T12:46:40.250370</ts>
    <user>U09LZR36F</user>
    <text>&lt;@U1ACUMJKX&gt; toposort? &lt;https://github.com/stuartsierra/dependency&gt; :tada:</text>
  </message>
  <message>
    <ts>2017-07-05T12:47:32.278748</ts>
    <user>U1ACUMJKX</user>
    <text>thanks for the link i haven't' seen this before</text>
  </message>
  <message>
    <ts>2017-07-05T12:48:56.324722</ts>
    <user>U1ACUMJKX</user>
    <text>thats not exactly what i wanted but its nice to keep in mind in case i need transitive dependencies</text>
  </message>
  <message>
    <ts>2017-07-05T12:58:58.657634</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! I have two "beginner" questions on `clojure.spec`:
(1) would it make sense to use `clojure.spec` to validate input API payloads?
~~(2) in that case, how would you work around the restriction that `clojure.spec`'s map validation works by using namespaced keywords for key&amp;amp;spec names?~~</text>
  </message>
  <message>
    <ts>2017-07-05T13:02:08.763938</ts>
    <user>U5ZAJ15P0</user>
    <text>just found an answer to (2); only (1) remains :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T13:35:22.830773</ts>
    <user>U04V70XH6</user>
    <text>bcbradley: Just make sure you respect the EPL license and copyright!</text>
  </message>
  <message>
    <ts>2017-07-05T13:42:22.056411</ts>
    <user>U1ACUMJKX</user>
    <text>if i got the gist of it, the EPL basically says i have to EPL my library if i have any EPL protected code in my library, right?</text>
  </message>
  <message>
    <ts>2017-07-05T13:52:39.390040</ts>
    <user>U04V70XH6</user>
    <text>IANAL (I Am Not A Lawyer) so I'd have to go research it. At a bare minimum, with all OSS, you must retain the copyright notice (along with any additional copyright you add).</text>
  </message>
  <message>
    <ts>2017-07-05T13:53:21.412679</ts>
    <user>U04V70XH6</user>
    <text>Several OSS licenses are incompatible with other licenses so, yes, you are often "forced" to release your modified version of the code under the same license.</text>
  </message>
  <message>
    <ts>2017-07-05T13:53:45.426342</ts>
    <user>U04V70XH6</user>
    <text>Unless you are doing this totally for an internal project and not planning to release it outside your company in any form.</text>
  </message>
  <message>
    <ts>2017-07-05T13:54:54.464312</ts>
    <user>U04V70XH6</user>
    <text>(I had several, depressingly long meetings with the Legal Team when I worked at Adobe about OSS license compliance and compatibility... and the upshot of one of those meetings was that we had to ask one OSS project to re-license their code under a more friendly license for us to be able to continue to use it!)</text>
  </message>
  <message>
    <ts>2017-07-05T14:02:12.713827</ts>
    <user>U0524B4UW</user>
    <text>another toposort &lt;@U1ACUMJKX&gt; - can't remember where it was originally homed - &lt;https://github.com/employeerepublic/deferst/blob/master/src/deferst/kahn.cljc&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T14:28:20.558903</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi. I am getting the follow error when trying to run `lein repl` with Clojure 1.9.0-alpha17. Could anyone please tell me what's going on? &lt;https://gist.github.com/hmaurer/47dfa107025f51ec71966170c537a578&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T14:30:09.618475</ts>
    <user>U5ZAJ15P0</user>
    <text>&amp;gt; Caused by: java.lang.IllegalStateException: Attempting to call unbound fn: #'clojure.future/ident?</text>
  </message>
  <message>
    <ts>2017-07-05T14:31:07.650690</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U06A9614K&gt; maybe?</text>
  </message>
  <message>
    <ts>2017-07-05T14:31:46.672713</ts>
    <user>U051SS2EU</user>
    <text>oh - here's a fun one &lt;@U1ACUMJKX&gt; - stuartsierra/component comes with a toposort (used for figuring out which order to start components in)</text>
  </message>
  <message>
    <ts>2017-07-05T14:32:05.683557</ts>
    <user>U051SS2EU</user>
    <text>oh wait someone mentioned that already</text>
  </message>
  <message>
    <ts>2017-07-05T14:37:43.865258</ts>
    <user>U5ZAJ15P0</user>
    <text>I fixed the issue by reverting to Clojure 1.8.0 and adding `[clojure-future-spec "1.9.0-alpha17"]` in my dependencies, which is what `lacinia` specified as a dependency (a library I rely upon). However I would still like to know exactly what the issue was if possible :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T14:39:13.911408</ts>
    <user>U051SS2EU</user>
    <text>at a certain point spec was taken out of the clojure 1.9 alphas so that it could be updated independently of the clojure code</text>
  </message>
  <message>
    <ts>2017-07-05T14:39:39.925460</ts>
    <user>U051SS2EU</user>
    <text>code that was made for a different 1.9 alpha version prior to the split, won't have that dep</text>
  </message>
  <message>
    <ts>2017-07-05T14:40:17.944048</ts>
    <user>U051SS2EU</user>
    <text>so if you are using the newer alpha17 or later, you need to provide that dep</text>
  </message>
  <message>
    <ts>2017-07-05T14:40:36.954333</ts>
    <user>U5ZAJ15P0</user>
    <text>Oh I see. How are deps resolved by Lein by the way? If a library I rely upon has for dependency a different version of a library that I also use?</text>
  </message>
  <message>
    <ts>2017-07-05T14:40:55.964983</ts>
    <user>U051SS2EU</user>
    <text>you can see the actual versions used via `lein deps :tree`</text>
  </message>
  <message>
    <ts>2017-07-05T14:40:58.966238</ts>
    <user>U5ZAJ15P0</user>
    <text>Will it just pick the most recent version? Or both?</text>
  </message>
  <message>
    <ts>2017-07-05T14:41:02.968087</ts>
    <user>U051SS2EU</user>
    <text>eariler in the list beats later in the list</text>
  </message>
  <message>
    <ts>2017-07-05T14:41:39.987786</ts>
    <user>U5ZAJ15P0</user>
    <text>oh, so it flattens all dependencies and sub-dependencies in a list, and the first one wins?</text>
  </message>
  <message>
    <ts>2017-07-05T14:41:58.997870</ts>
    <user>U051SS2EU</user>
    <text>also you can use `:exclusions` to say "don't use this dep to get this other dep" and avoid versions it asks for</text>
  </message>
  <message>
    <ts>2017-07-05T14:42:14.005960</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; it's more complicated than that - it's an ordered tree</text>
  </message>
  <message>
    <ts>2017-07-05T14:42:18.008717</ts>
    <user>U5ZAJ15P0</user>
    <text>`lein deps :tree` is awesome, thank you :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T14:42:20.009506</ts>
    <user>U051SS2EU</user>
    <text>but it does use the first one it finds</text>
  </message>
  <message>
    <ts>2017-07-05T14:42:46.023693</ts>
    <user>U5ZAJ15P0</user>
    <text>how does the ordered tree behaviour differs from what I was saying, if you don't mind elaborating?</text>
  </message>
  <message>
    <ts>2017-07-05T14:43:27.045911</ts>
    <user>U051SS2EU</user>
    <text>because it's not flattened anywhere afaik - it traverses the tree and adds items to a set of deps if you don't have a version already</text>
  </message>
  <message>
    <ts>2017-07-05T14:43:44.055023</ts>
    <user>U5ZAJ15P0</user>
    <text>oh right, ok, but the behaviour is similar</text>
  </message>
  <message>
    <ts>2017-07-05T14:43:48.057043</ts>
    <user>U051SS2EU</user>
    <text>I guess conceptually that difference doesn't matter - it's as if you flattened and took the first you found</text>
  </message>
  <message>
    <ts>2017-07-05T14:44:20.074403</ts>
    <user>U5ZAJ15P0</user>
    <text>Will lein report if dependencies conflict? e.g. if I try to use a version of a dependency that introduced breaking changes, and a library I later require uses an old version of that dependency?</text>
  </message>
  <message>
    <ts>2017-07-05T14:45:09.101988</ts>
    <user>U051SS2EU</user>
    <text>no, lein will not complain, but `lein deps :tree` will report the conflict and tell you which it picked</text>
  </message>
  <message>
    <ts>2017-07-05T14:45:47.122876</ts>
    <user>U5ZAJ15P0</user>
    <text>great, thank you :slightly_smiling_face: that clarifies some things</text>
  </message>
  <message>
    <ts>2017-07-05T14:45:50.124697</ts>
    <user>U051SS2EU</user>
    <text>you can use `lein pedantic` (a plugin) to make it bail out with an error &lt;https://github.com/xeqi/lein-pedantic&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T14:46:18.140661</ts>
    <user>U051SS2EU</user>
    <text>oh wait that's depricated and lein has the pedantic feature… never mind!</text>
  </message>
  <message>
    <ts>2017-07-05T14:48:23.208895</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; see also `lein help deps`</text>
  </message>
  <message>
    <ts>2017-07-05T14:59:27.573559</ts>
    <user>U3JURM9B6</user>
    <text>Is there a way to create a 'struct' that IS CONSTRUCTABLE ... but is NOT UPDATEABLE.

{} does not wok since it's updateable via assoc

Is there some way via deftype / defrecord to create something where (1) I have a constructor and (2) it can't be updated via assoc (or if it is updated, it becomes a plain map and is no longer a type / record)</text>
  </message>
  <message>
    <ts>2017-07-05T15:03:55.723522</ts>
    <user>U051SS2EU</user>
    <text>sounds like you want deftype - you can't assoc or conj etc. a deftype (unless you extend to those protocols of course)</text>
  </message>
  <message>
    <ts>2017-07-05T15:05:04.760623</ts>
    <user>U11BV7MTK</user>
    <text>```
user&amp;gt; (deftype Trial [a b])
user.Trial
user&amp;gt; (def t (Trial. 1 2))
#'user/t
user&amp;gt; t
#object[user.Trial 0x5e0c24f4 "user.Trial@5e0c24f4"]
user&amp;gt; (assoc t :a 2)
ClassCastException user.Trial cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
user&amp;gt; 
```</text>
  </message>
  <message>
    <ts>2017-07-05T15:05:42.781178</ts>
    <user>U11BV7MTK</user>
    <text>from the deftype page in the clojure docs: `deftype provides no functionality not specified by the user, other than a constructor`</text>
  </message>
  <message>
    <ts>2017-07-05T15:05:50.784997</ts>
    <user>U050ECB92</user>
    <text>qqq: `{}` is _not_ updateable</text>
  </message>
  <message>
    <ts>2017-07-05T15:06:09.795124</ts>
    <user>U050ECB92</user>
    <text>persistent data structure</text>
  </message>
  <message>
    <ts>2017-07-05T15:06:21.801562</ts>
    <user>U3JURM9B6</user>
    <text>sorry, by 'update', I meant create new obj with same 'type' as old obj</text>
  </message>
  <message>
    <ts>2017-07-05T15:06:31.806401</ts>
    <user>U3JURM9B6</user>
    <text>I'm concerned with 'invaild objects'</text>
  </message>
  <message>
    <ts>2017-07-05T15:06:39.810822</ts>
    <user>U3JURM9B6</user>
    <text>that claim to satissy certain constraints, but in reality do not</text>
  </message>
  <message>
    <ts>2017-07-05T15:06:42.812363</ts>
    <user>U3JURM9B6</user>
    <text>due to assoc</text>
  </message>
  <message>
    <ts>2017-07-05T15:07:08.825794</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U11BV7MTK&gt;: defrecord doesn't does not work, as assoc 'prserves the record type' ; with deftype, how do I read the 'a' and 'b' ?</text>
  </message>
  <message>
    <ts>2017-07-05T15:07:31.837238</ts>
    <user>U11BV7MTK</user>
    <text>```
user&amp;gt; (.a t)
1
```</text>
  </message>
  <message>
    <ts>2017-07-05T15:08:04.854213</ts>
    <user>U050ECB92</user>
    <text>&amp;gt; The XY problem is asking about your attempted solution rather than your actual problem</text>
  </message>
  <message>
    <ts>2017-07-05T15:08:17.861248</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U11BV7MTK&gt;: this was not part of the original request ...

but is there a way to have this also work with cljs + optimizations advanced</text>
  </message>
  <message>
    <ts>2017-07-05T15:08:31.868337</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U050ECB92&gt; : I agree that my question was poorly formulated.</text>
  </message>
  <message>
    <ts>2017-07-05T15:08:43.874858</ts>
    <user>U050ECB92</user>
    <text>invalid data is a gating problem -- you validate at the edge of a subsystem, then you operate with the data</text>
  </message>
  <message>
    <ts>2017-07-05T15:08:51.878894</ts>
    <user>U11BV7MTK</user>
    <text>what was not part of the original request?</text>
  </message>
  <message>
    <ts>2017-07-05T15:08:59.883161</ts>
    <user>U11BV7MTK</user>
    <text>you asked how do you read the fields of the deftype</text>
  </message>
  <message>
    <ts>2017-07-05T15:09:06.886525</ts>
    <user>U3JURM9B6</user>
    <text>I wnat field acccess to also work via cljs optimiazationsa dvanced</text>
  </message>
  <message>
    <ts>2017-07-05T15:09:14.890755</ts>
    <user>U3JURM9B6</user>
    <text>(.a t) I suspect, will not work as cljs optimizatinos renames the .a</text>
  </message>
  <message>
    <ts>2017-07-05T15:09:53.910571</ts>
    <user>U050ECB92</user>
    <text>IMHO this is not a data structure problem / impl detail but a program design problem</text>
  </message>
  <message>
    <ts>2017-07-05T15:09:59.913848</ts>
    <user>U051SS2EU</user>
    <text>it would rename your accesses too if it did that - that's kind of why advanced compilation ever works…</text>
  </message>
  <message>
    <ts>2017-07-05T15:10:53.941555</ts>
    <user>U051SS2EU</user>
    <text>or would it? now I'm unsure</text>
  </message>
  <message>
    <ts>2017-07-05T15:11:17.953018</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U051SS2EU&gt; : optimizationsa-dvanced has me so scared I jus use (aget ... "field-name") everywhere</text>
  </message>
  <message>
    <ts>2017-07-05T15:11:22.955767</ts>
    <user>U050ECB92</user>
    <text>also if you suspect that something is generating invalid data, that is something clojure.spec + instrument is really good at catching</text>
  </message>
  <message>
    <ts>2017-07-05T15:11:29.958939</ts>
    <user>U11BV7MTK</user>
    <text>but if you're scared of bad data getting into your data i think you're working on the wrong side</text>
  </message>
  <message>
    <ts>2017-07-05T15:11:41.965083</ts>
    <user>U3JURM9B6</user>
    <text>here's the thing; I'm dynamically checking some type constraints</text>
  </message>
  <message>
    <ts>2017-07-05T15:11:50.969587</ts>
    <user>U3JURM9B6</user>
    <text>but if I ask that question, ppl tell me to use spec or core.typed :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T15:11:59.973924</ts>
    <user>U11BV7MTK</user>
    <text>so what happens if the types don't align?</text>
  </message>
  <message>
    <ts>2017-07-05T15:12:04.976426</ts>
    <user>U11BV7MTK</user>
    <text>and who would introduce the bad data</text>
  </message>
  <message>
    <ts>2017-07-05T15:12:04.976577</ts>
    <user>U3JURM9B6</user>
    <text>throw an assertion</text>
  </message>
  <message>
    <ts>2017-07-05T15:12:16.982478</ts>
    <user>U3JURM9B6</user>
    <text>bad data introduced to my programming bugs</text>
  </message>
  <message>
    <ts>2017-07-05T15:12:20.984671</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3JURM9B6&gt; ```(ins)dev:cljs.user=&amp;gt; (deftype Foo [a b])
cljs.user/Foo
(ins)dev:cljs.user=&amp;gt; (aget (Foo. 1 2) "b")
2```</text>
  </message>
  <message>
    <ts>2017-07-05T15:12:35.991928</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U051SS2EU&gt; : nice; thanks!</text>
  </message>
  <message>
    <ts>2017-07-05T15:13:10.009792</ts>
    <user>U11BV7MTK</user>
    <text>well that looks dangerous</text>
  </message>
  <message>
    <ts>2017-07-05T15:13:46.027553</ts>
    <user>U11BV7MTK</user>
    <text>that looks like "b" may not track what the fields get renamed to in aggressive compilation</text>
  </message>
  <message>
    <ts>2017-07-05T15:14:05.036933</ts>
    <user>U050ECB92</user>
    <text>i still don't understand why you can't filter bad data at the edge</text>
  </message>
  <message>
    <ts>2017-07-05T15:14:38.052638</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U050ECB92&gt;: the problem is not bad user input</text>
  </message>
  <message>
    <ts>2017-07-05T15:14:40.053641</ts>
    <user>U051SS2EU</user>
    <text>just spitballing: system that isn't designed with the right edges in place?</text>
  </message>
  <message>
    <ts>2017-07-05T15:14:51.058674</ts>
    <user>U3JURM9B6</user>
    <text>the problem is that I, the programmer, introduce bugs</text>
  </message>
  <message>
    <ts>2017-07-05T15:15:05.065772</ts>
    <user>U3JURM9B6</user>
    <text>these are bugs that a static type checker would catch at compile time</text>
  </message>
  <message>
    <ts>2017-07-05T15:15:13.069753</ts>
    <user>U3JURM9B6</user>
    <text>but in clojure, the next best thing I can do is to catch them at runtime</text>
  </message>
  <message>
    <ts>2017-07-05T15:15:23.074652</ts>
    <user>U3JURM9B6</user>
    <text>the input data is fine; it's internal functions that manip the data that violate type constraints</text>
  </message>
  <message>
    <ts>2017-07-05T15:15:39.082845</ts>
    <user>U1ACUMJKX</user>
    <text>which of these two implementations would you prefer and why?
```(defn inversion [nodes edges]
  (transduce
    (mapcat (fn [[k v]] (map #(vector % k) v)))
    (completing (fn [acc [k v]] (update acc k conj v)))
    (zipmap nodes (repeat #{}))
    edges))```
```(defn inversion [nodes edges]
  (reduce-kv
    (fn [acc k v] (reduce (fn [acc i] (update acc i conj k)) acc v))
    (zipmap nodes (repeat #{}))
    edges))```
expected shape of `nodes` is like `[:framebuffer-0 :framebuffer-1 :framebuffer-2 :texture-0 :texture-1 :texture-2 :texture-3 :program-0 :program-1]`
expected shape of `edges` is like
```
{:framebuffer-0 #{:texture-0 :texture-1 :program-0 :framebuffer-1}
 :framebuffer-1 #{:framebuffer-2 :texture-2 :texture-3 :program-1}
 :framebuffer-2 #{:texture-0 :program-1}}```
correct output for those specific inputs:
```
{:framebuffer-0 #{}
 :framebuffer-1 #{:framebuffer-0}
 :framebuffer-2 #{:framebuffer-1}
 :texture-0 #{:framebuffer-2 :framebuffer-0}
 :texture-1 #{:framebuffer-0}
 :texture-2 #{:framebuffer-1}
 :texture-3 #{:framebuffer-1}
 :program-0 #{:framebuffer-0}
 :program-1 #{:framebuffer-1 :framebuffer-2}}```</text>
  </message>
  <message>
    <ts>2017-07-05T15:16:42.113106</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3JURM9B6&gt; I'd think accidentally calling an accessor and constructor would be a lot less likely than accidentally calling assoc on the wrong object</text>
  </message>
  <message>
    <ts>2017-07-05T15:25:54.381191</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U051SS2EU&gt; : I can make the constructor private, then have a function (which calls the constructor) do checks beforehand</text>
  </message>
  <message>
    <ts>2017-07-05T15:36:34.698935</ts>
    <user>U04VDQDDY</user>
    <text>&lt;@U3JURM9B6&gt; For accessing object properties (as opposed to array elements), consider `goog.object/get` instead of `aget`.</text>
  </message>
  <message>
    <ts>2017-07-05T15:38:02.740708</ts>
    <user>U050ECB92</user>
    <text>&lt;@U3JURM9B6&gt; creating custom types that have their own field accessors completely negates the value of generic data access from the clojure std library</text>
  </message>
  <message>
    <ts>2017-07-05T15:38:56.766691</ts>
    <user>U050ECB92</user>
    <text>your code will essentially be a non-reusable DSL</text>
  </message>
  <message>
    <ts>2017-07-05T15:39:20.777407</ts>
    <user>U050ECB92</user>
    <text>I firmly believe you are going down the wrong path, and that the advice you're getting about specific implementation is misguided</text>
  </message>
  <message>
    <ts>2017-07-05T15:41:32.841984</ts>
    <user>U050ECB92</user>
    <text>you should test against invalid / incorrect data (even from your own code).  Have you considered writing generative tests for your datastructures?  (either from test.check or from spec)</text>
  </message>
  <message>
    <ts>2017-07-05T15:42:38.873997</ts>
    <user>U050ECB92</user>
    <text>test against bad data while allowing bad data to exist</text>
  </message>
  <message>
    <ts>2017-07-05T15:48:29.047915</ts>
    <user>U050ECB92</user>
    <text>Lots of things that are common in other languages (e.g. privileged data) are the exact wrong approach in Clojure.</text>
  </message>
  <message>
    <ts>2017-07-05T16:01:27.447627</ts>
    <user>U050ECB92</user>
    <text>when I say 'generic data access' here is an example of what I mean:</text>
  </message>
  <message>
    <ts>2017-07-05T16:02:38.483558</ts>
    <user>U050ECB92</user>
    <text>```
(get-in order [:line-items 2 :product :picture :url])
```
If you make a custom type, you'll need to do:</text>
  </message>
  <message>
    <ts>2017-07-05T16:03:20.505081</ts>
    <user>U050ECB92</user>
    <text>```
(-&amp;gt; order
  (get-in [:line-items 2 :product])
  (.-picture)
  (get :url))
```</text>
  </message>
  <message>
    <ts>2017-07-05T16:03:41.516251</ts>
    <user>U050ECB92</user>
    <text>You will infect the codebase with specificity</text>
  </message>
  <message>
    <ts>2017-07-05T16:04:16.533293</ts>
    <user>U050ECB92</user>
    <text>and negate a whole lot of the benefits of "the clojure way"</text>
  </message>
  <message>
    <ts>2017-07-05T16:20:19.014942</ts>
    <user>U1WMPA45U</user>
    <text>is it possible to tell if you're already in a `clojure.core.async/go` block inside a `defmacro`?</text>
  </message>
  <message>
    <ts>2017-07-05T16:21:27.048769</ts>
    <user>U11BV7MTK</user>
    <text>you could call `&amp;lt;!`</text>
  </message>
  <message>
    <ts>2017-07-05T16:21:33.051906</ts>
    <user>U11BV7MTK</user>
    <text>the code of that is literally throw an error</text>
  </message>
  <message>
    <ts>2017-07-05T16:22:10.069935</ts>
    <user>U11BV7MTK</user>
    <text>the go macro totally rewrites everything in it. so if that throws an error then you are not in a go block. otherwise have it take from a channel that has a single value ready to give</text>
  </message>
  <message>
    <ts>2017-07-05T16:22:21.075360</ts>
    <user>U11BV7MTK</user>
    <text>super hacky</text>
  </message>
  <message>
    <ts>2017-07-05T16:27:29.231253</ts>
    <user>U1WMPA45U</user>
    <text>our devs went a bit bonkers with nested `go`s</text>
  </message>
  <message>
    <ts>2017-07-05T16:28:12.252861</ts>
    <user>U0NCTKEV8</user>
    <text>the go macro actually macro expands everything before it does its thing, and the way it macro expands has some differences from the way the compiler does it</text>
  </message>
  <message>
    <ts>2017-07-05T16:28:58.276114</ts>
    <user>U0NCTKEV8</user>
    <text>so you could try observing differences in the &amp;amp;env map</text>
  </message>
  <message>
    <ts>2017-07-05T16:31:12.343838</ts>
    <user>U0NCTKEV8</user>
    <text>really, if you are in that place, I would just write everything to assume it is being run from a go block in the async threadpool</text>
  </message>
  <message>
    <ts>2017-07-05T16:31:19.347580</ts>
    <user>U051SS2EU</user>
    <text>it seems like an `assert-go` macro would be good, or even `assert-not-go`, but code that changes behavior in/out of go seems like it's asking for maintenance issues and subtle bugs</text>
  </message>
  <message>
    <ts>2017-07-05T16:31:44.360525</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U1WMPA45U&gt; what problem are you trying to solve?</text>
  </message>
  <message>
    <ts>2017-07-05T16:32:31.383573</ts>
    <user>U1WMPA45U</user>
    <text>it's stuff like "inject tracking of metrics in async calls"</text>
  </message>
  <message>
    <ts>2017-07-05T16:32:54.395351</ts>
    <user>U1WMPA45U</user>
    <text>in retrospect, it probably should have just been a fn instead</text>
  </message>
  <message>
    <ts>2017-07-05T16:33:47.421955</ts>
    <user>U1WMPA45U</user>
    <text>And a few mistakes/misunderstandings (like "wrap in a go call to run this in a different thread")</text>
  </message>
  <message>
    <ts>2017-07-05T16:34:13.435223</ts>
    <user>U0NCTKEV8</user>
    <text>:disappointed:</text>
  </message>
  <message>
    <ts>2017-07-05T16:35:41.479709</ts>
    <user>U1WMPA45U</user>
    <text>it only became clear after updating core.async to a newer version, since we started getting method too large errors</text>
  </message>
  <message>
    <ts>2017-07-05T16:39:07.580917</ts>
    <user>U07TDTQNL</user>
    <text>So unless you're mixing core.match with core.async you shouldn't hit those problems often.</text>
  </message>
  <message>
    <ts>2017-07-05T16:39:40.597002</ts>
    <user>U07TDTQNL</user>
    <text>I mean 65k instructions is fairly large for a method, you might just be able to pull a few functions out the body of the go and reduce the method size a bit.</text>
  </message>
  <message>
    <ts>2017-07-05T16:40:59.635919</ts>
    <user>U11BV7MTK</user>
    <text>i'm not able to get that hacky way to work. tried inlining the function, not sure</text>
  </message>
  <message>
    <ts>2017-07-05T16:41:14.643168</ts>
    <user>U11BV7MTK</user>
    <text>it might need to be a macro for the async compiler to do its thing?</text>
  </message>
  <message>
    <ts>2017-07-05T16:41:28.650466</ts>
    <user>U1ACUMJKX</user>
    <text>does anyone know if anyone has tried making futures as efficient as goroutines?</text>
  </message>
  <message>
    <ts>2017-07-05T16:41:46.659299</ts>
    <user>U1ACUMJKX</user>
    <text>as far as i know futures spin up another thread, but I don't think they are pooled</text>
  </message>
  <message>
    <ts>2017-07-05T16:42:05.668133</ts>
    <user>U1ACUMJKX</user>
    <text>maybe someone has their own implementation of futures?</text>
  </message>
  <message>
    <ts>2017-07-05T16:43:24.707130</ts>
    <user>U1ACUMJKX</user>
    <text>i'm only asking because I really dislike core async's approach to concurrency (not that it is worse than most of the alternatives)</text>
  </message>
  <message>
    <ts>2017-07-05T16:43:33.711038</ts>
    <user>U1WMPA45U</user>
    <text>after thinking about it, it seems like the urge to "hack how this macro works to handle go" would better be served by "rewrite some stuff as fns, and split things up a little"</text>
  </message>
  <message>
    <ts>2017-07-05T16:45:42.773980</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1ACUMJKX&gt; futures are pooled, the fundamental thing is that threads are OS level and OS level context switching can't be as fast as in-process context switches</text>
  </message>
  <message>
    <ts>2017-07-05T16:46:08.786849</ts>
    <user>U1ACUMJKX</user>
    <text>ah well i'm misinformed about the whole kitnkaboodle then</text>
  </message>
  <message>
    <ts>2017-07-05T16:46:36.800488</ts>
    <user>U1ACUMJKX</user>
    <text>do you think it would be possible to implement futures using in process context switching rather than os level switching?</text>
  </message>
  <message>
    <ts>2017-07-05T16:47:29.826062</ts>
    <user>U051SS2EU</user>
    <text>then you require either 1) an interrupt and pre-emptive context switch or 2) cooperative multitasking</text>
  </message>
  <message>
    <ts>2017-07-05T16:47:57.840201</ts>
    <user>U051SS2EU</user>
    <text>1 will perform a lot worse - probably as bad as OS task switches, and introduce massive complexity</text>
  </message>
  <message>
    <ts>2017-07-05T16:48:03.843051</ts>
    <user>U051SS2EU</user>
    <text>2 is core.async :smile:</text>
  </message>
  <message>
    <ts>2017-07-05T16:48:06.844380</ts>
    <user>U07TDTQNL</user>
    <text>Yeah, and futures aren't slow at all, they're just memory heavy</text>
  </message>
  <message>
    <ts>2017-07-05T16:48:21.852005</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U1ACUMJKX&gt; have you looked at `agent`s?</text>
  </message>
  <message>
    <ts>2017-07-05T16:48:50.866127</ts>
    <user>U1ACUMJKX</user>
    <text>i though agents were pooled, and thats the reason i figured futures weren't</text>
  </message>
  <message>
    <ts>2017-07-05T16:48:58.870181</ts>
    <user>U1ACUMJKX</user>
    <text>probably shouldn't assume though xd</text>
  </message>
  <message>
    <ts>2017-07-05T16:49:06.874089</ts>
    <user>U07TDTQNL</user>
    <text>futures will re-use threads though</text>
  </message>
  <message>
    <ts>2017-07-05T16:49:31.886921</ts>
    <user>U1ACUMJKX</user>
    <text>well thats reassuring</text>
  </message>
  <message>
    <ts>2017-07-05T16:50:01.901967</ts>
    <user>U051SS2EU</user>
    <text>futures use the agent send-off pool &lt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Agent.java#L53&gt; &lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L6838&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T16:50:36.919588</ts>
    <user>U1ACUMJKX</user>
    <text>i didn't know that, thanks for that</text>
  </message>
  <message>
    <ts>2017-07-05T16:51:10.936066</ts>
    <user>U07TDTQNL</user>
    <text>They use a Java `Executors.newCachedThreadPool`, which means that once created the threads stick around awhile incase they need to be re-used. In my experience "awhile" is something around a minute.</text>
  </message>
  <message>
    <ts>2017-07-05T16:51:20.940521</ts>
    <user>U07TDTQNL</user>
    <text>but that's undefined</text>
  </message>
  <message>
    <ts>2017-07-05T16:51:26.943902</ts>
    <user>U1ACUMJKX</user>
    <text>i don't want to start ranting, but the reason i dislike core async so much is because it is pretty much just imperative programming</text>
  </message>
  <message>
    <ts>2017-07-05T16:51:42.951616</ts>
    <user>U1ACUMJKX</user>
    <text>i'm not suggesting hardware threads plus semaphore hell is better</text>
  </message>
  <message>
    <ts>2017-07-05T16:51:55.957993</ts>
    <user>U07TDTQNL</user>
    <text>Nope, I agree with you :slightly_smiling_face: and I ranted on that subject at some length at Clojure/West</text>
  </message>
  <message>
    <ts>2017-07-05T16:52:27.974056</ts>
    <user>U1ACUMJKX</user>
    <text>i feel like futures + promises are the cleanest concurrency mechanism anyone has come up with so far</text>
  </message>
  <message>
    <ts>2017-07-05T16:52:31.976049</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U07TDTQNL&gt; btw thanks for that talk, I often find myself linking the youtube for people who are clearly confused about how to use core.async properly</text>
  </message>
  <message>
    <ts>2017-07-05T16:52:34.977631</ts>
    <user>U1ACUMJKX</user>
    <text>its clean, simple-- and doesn't surprise you</text>
  </message>
  <message>
    <ts>2017-07-05T16:52:50.985258</ts>
    <user>U07TDTQNL</user>
    <text>But the answer is almost always: move the async, non-deterministic, bits to the edge of your system</text>
  </message>
  <message>
    <ts>2017-07-05T16:52:51.985853</ts>
    <user>U11BV7MTK</user>
    <text>from the most recent clojure/west?</text>
  </message>
  <message>
    <ts>2017-07-05T16:53:02.991266</ts>
    <user>U050ECB92</user>
    <text>rich hickey elaborated on the problems of promises in a strange loop talk</text>
  </message>
  <message>
    <ts>2017-07-05T16:53:22.001094</ts>
    <user>U1ACUMJKX</user>
    <text>ooh can you link me that?</text>
  </message>
  <message>
    <ts>2017-07-05T16:53:25.002277</ts>
    <user>U07TDTQNL</user>
    <text>dpsutton: &lt;https://www.youtube.com/watch?v=096pIlA3GDo&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T16:53:29.004235</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1ACUMJKX&gt; I've still seen suprises eg. someone writes code that creates futures inside doseq - eventually they get a collection big enough that the VM goes nuts</text>
  </message>
  <message>
    <ts>2017-07-05T16:53:33.006182</ts>
    <user>U11BV7MTK</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-07-05T16:53:42.010563</ts>
    <user>U050ECB92</user>
    <text>&lt;@U1ACUMJKX&gt;  &lt;https://www.infoq.com/presentations/clojure-core-async&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T16:53:47.012665</ts>
    <user>U1ACUMJKX</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-05T16:54:06.021931</ts>
    <user>U051SS2EU</user>
    <text>if they were doing channel ops inside a doseq, the reason for the failure would be more clear and the mitigation strategy would be more straightforward</text>
  </message>
  <message>
    <ts>2017-07-05T16:54:36.036306</ts>
    <user>U1ACUMJKX</user>
    <text>i can pretty much sum up my stance on the matter with one simple comparison</text>
  </message>
  <message>
    <ts>2017-07-05T16:55:08.051501</ts>
    <user>U1ACUMJKX</user>
    <text>core async and the go-lang tradition of concurrency involves imperative programming on stateful (chans are queues) entities</text>
  </message>
  <message>
    <ts>2017-07-05T16:55:17.056072</ts>
    <user>U1ACUMJKX</user>
    <text>promises are simply unrealized values</text>
  </message>
  <message>
    <ts>2017-07-05T16:55:29.061573</ts>
    <user>U1ACUMJKX</user>
    <text>clojure is a language of values, so i would prefer to use promises</text>
  </message>
  <message>
    <ts>2017-07-05T16:55:41.067632</ts>
    <user>U1ACUMJKX</user>
    <text>and futures allow you to realize something concurrently</text>
  </message>
  <message>
    <ts>2017-07-05T16:55:56.074831</ts>
    <user>U1ACUMJKX</user>
    <text>seems like a clean separation of responsibilities to me</text>
  </message>
  <message>
    <ts>2017-07-05T16:57:26.119632</ts>
    <user>U07TDTQNL</user>
    <text>Nothing stoping you from doing this:
(&amp;lt;!! (thread ...))</text>
  </message>
  <message>
    <ts>2017-07-05T16:57:57.134663</ts>
    <user>U06A9614K</user>
    <text>sorry missed this, did you try a `lein clean`? could be some stale `.class` files lying around</text>
  </message>
  <message>
    <ts>2017-07-05T16:58:35.153675</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1ACUMJKX&gt; having worked on a large system which was using futures inside idiomatic fp constructs as a pervasive pattern, give me statefull queues of some kind any day - at least queues give you a straightforward mechanism for flow control and backpressure</text>
  </message>
  <message>
    <ts>2017-07-05T16:59:07.169502</ts>
    <user>U051SS2EU</user>
    <text>you might prefer agents with their implicit queue to core.async of course - but you'll eventually need a queue of some type if you need concurrency</text>
  </message>
  <message>
    <ts>2017-07-05T17:00:07.199664</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U1ACUMJKX&gt; promises encourage a request/response style of code. This is fairly limited. As &lt;@U051SS2EU&gt; mentioned, CSP focuses on data flow, pipelines and queues. It's a "steps of processing" model vs a "call and wait for a response".</text>
  </message>
  <message>
    <ts>2017-07-05T17:00:21.207421</ts>
    <user>U07TDTQNL</user>
    <text>At least it should be, people use core.async as a request/response system, but it doesn't work out very well.</text>
  </message>
  <message>
    <ts>2017-07-05T17:01:43.248933</ts>
    <user>U1ACUMJKX</user>
    <text>i feel as though steps of processing could be implemented clearly with just chains of promises</text>
  </message>
  <message>
    <ts>2017-07-05T17:01:44.249138</ts>
    <user>U07S8JGF7</user>
    <text>&amp;gt; people use core.async as a request/response system, but it doesn't work out very well</text>
  </message>
  <message>
    <ts>2017-07-05T17:02:21.267256</ts>
    <user>U1ACUMJKX</user>
    <text>i do think backpressure is an issue though</text>
  </message>
  <message>
    <ts>2017-07-05T17:02:29.271346</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U07S8JGF7&gt; we've all done it :slightly_smiling_face: no condemnation from me.</text>
  </message>
  <message>
    <ts>2017-07-05T17:03:53.311385</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U06A9614K&gt; Someone helped me out (see later messages in &lt;#C03S1KBA2|clojure&gt;). Basically it was a dependency issue</text>
  </message>
  <message>
    <ts>2017-07-05T17:05:02.343715</ts>
    <user>U46LFMYTD</user>
    <text>is there a neat way to remove an element from a vector at index i</text>
  </message>
  <message>
    <ts>2017-07-05T17:05:58.370039</ts>
    <user>U051SS2EU</user>
    <text>you could use a finger-tree instead of a vector, they are designed for such things &lt;https://github.com/clojure/data.finger-tree&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T17:07:23.407862</ts>
    <user>U46LFMYTD</user>
    <text>thanks for the suggestion, ill take a look :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T17:07:54.421704</ts>
    <user>U0524B4UW</user>
    <text>&lt;@U1ACUMJKX&gt; chains of promises, composed with a promise-monad like 
&lt;https://github.com/funcool/cats/blob/master/src/cats/labs/manifold.clj&gt; 
or 
&lt;https://github.com/funcool/cats/blob/master/src/cats/labs/promise.cljc&gt;
works brilliantly for us</text>
  </message>
  <message>
    <ts>2017-07-05T17:08:40.442376</ts>
    <user>U1ACUMJKX</user>
    <text>&lt;@U0524B4UW&gt; wow i'll have to put that in a tab and read through it</text>
  </message>
  <message>
    <ts>2017-07-05T17:09:07.454827</ts>
    <user>U5ZAJ15P0</user>
    <text>mccraigmccraig: &lt;http://s2.quickmeme.com/img/44/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45.jpg&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T17:09:25.462713</ts>
    <user>U0524B4UW</user>
    <text>some sample code chaining promises this way - &lt;https://github.com/employeerepublic/er-cassandra/blob/master/src/er_cassandra/model/alia/unique_key.clj#L61&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T17:11:29.517819</ts>
    <user>U11BV7MTK</user>
    <text>michaellindon: `(apply concat ((juxt (partial take 3) (partial drop (inc 3))) [1 2 3 4 5 6]))`</text>
  </message>
  <message>
    <ts>2017-07-05T17:12:42.549771</ts>
    <user>U090G4C05</user>
    <text>is `core.match` ok? it's been on `0.3.0-alpha4` for the last 3 years</text>
  </message>
  <message>
    <ts>2017-07-05T17:18:59.713743</ts>
    <user>U04V70XH6</user>
    <text>It's pretty stable and hasn't needed much maintenance I suspect.</text>
  </message>
  <message>
    <ts>2017-07-05T17:19:55.737264</ts>
    <user>U11BV7MTK</user>
    <text>spoke with dnolen at conj last year. the way the decision tree is made is fine in java but removes some optimizations in cljs since it uses exceptions for backtracking.</text>
  </message>
  <message>
    <ts>2017-07-05T17:20:19.747974</ts>
    <user>U11BV7MTK</user>
    <text>if i remember correctly, this was what he wanteded to implement a non-alpha release</text>
  </message>
  <message>
    <ts>2017-07-05T17:20:27.751414</ts>
    <user>U04V70XH6</user>
    <text>Versions aren't much of an indicator in Clojure-land, and a contrib library that has gone without updates for a while doesn't indicate it's been abandoned either. Which, yeah, can make it hard to tell the difference between very-stable-ware and abandon-ware :neutral_face:</text>
  </message>
  <message>
    <ts>2017-07-05T17:20:35.754536</ts>
    <user>U090G4C05</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-05T17:20:38.756073</ts>
    <user>U090G4C05</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-05T17:20:53.762446</ts>
    <user>U090G4C05</user>
    <text>if the official status is Don't Worry About It, then all the better</text>
  </message>
  <message>
    <ts>2017-07-05T17:21:05.767677</ts>
    <user>U090G4C05</user>
    <text>i just really like it and was worried something bad had happened</text>
  </message>
  <message>
    <ts>2017-07-05T17:21:23.775355</ts>
    <user>U04V70XH6</user>
    <text>Someone just pointed out that `algo.graph` never actually got a release on Maven (and it hasn't had an update in four years).</text>
  </message>
  <message>
    <ts>2017-07-05T17:22:24.800948</ts>
    <user>U090G4C05</user>
    <text>that's bad, right?</text>
  </message>
  <message>
    <ts>2017-07-05T17:30:20.001651</ts>
    <user>U489U338R</user>
    <text>trying to use clojure 1.9 from emacs with cider, but when I run cider I get</text>
  </message>
  <message>
    <ts>2017-07-05T17:31:56.041091</ts>
    <user>U11BV7MTK</user>
    <text>can you run a lein repl in this project without emacs?</text>
  </message>
  <message>
    <ts>2017-07-05T17:33:36.082294</ts>
    <user>U051SS2EU</user>
    <text>this is a known issue with clojure 1.9 and old core.async</text>
  </message>
  <message>
    <ts>2017-07-05T17:33:45.085695</ts>
    <user>U051SS2EU</user>
    <text>upgrade to a newer core.async and it goes away</text>
  </message>
  <message>
    <ts>2017-07-05T17:34:11.096109</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U489U338R&gt; ^ forgot to tag</text>
  </message>
  <message>
    <ts>2017-07-05T17:47:28.406953</ts>
    <user>U173SEFUN</user>
    <text>&lt;@U46LFMYTD&gt; with specter:
```
(setval (nthpath 2) NONE [1 2 3 4 5])
;; =&amp;gt; [1 2 4 5]
```</text>
  </message>
  <message>
    <ts>2017-07-05T17:47:53.416052</ts>
    <user>U173SEFUN</user>
    <text>also works with lists</text>
  </message>
  <message>
    <ts>2017-07-05T17:48:23.427271</ts>
    <user>U489U338R</user>
    <text>&lt;@U051SS2EU&gt; Hm... now to find out which dependency has the wrong core.async version...</text>
  </message>
  <message>
    <ts>2017-07-05T17:49:29.452562</ts>
    <user>U051SS2EU</user>
    <text>you can specify your own core.async version and the deps will have to use it</text>
  </message>
  <message>
    <ts>2017-07-05T17:49:39.456277</ts>
    <user>U051SS2EU</user>
    <text>or use `lein deps :tree` to see where it comes in</text>
  </message>
  <message>
    <ts>2017-07-05T17:50:03.465637</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U173SEFUN&gt; Isn't that O(n) on the size of the new collection though? Why not just `(into [] (filter-nth ...) input)`</text>
  </message>
  <message>
    <ts>2017-07-05T17:50:09.467814</ts>
    <user>U051SS2EU</user>
    <text>(that is, if your deps is earlier in the deps list it overrides)</text>
  </message>
  <message>
    <ts>2017-07-05T17:51:52.505760</ts>
    <user>U173SEFUN</user>
    <text>&lt;@U07TDTQNL&gt; yea the underlying impl is O(n), but your snippet looks like O(n) as well</text>
  </message>
  <message>
    <ts>2017-07-05T17:52:17.515141</ts>
    <user>U07TDTQNL</user>
    <text>oh it is</text>
  </message>
  <message>
    <ts>2017-07-05T17:52:47.525821</ts>
    <user>U07TDTQNL</user>
    <text>but the whole idea behind conj and the like is that they are not O(n) on the size of the new collection</text>
  </message>
  <message>
    <ts>2017-07-05T17:53:11.534971</ts>
    <user>U07TDTQNL</user>
    <text>so I would flag both of our approaches in a code review for being a possible bottleneck</text>
  </message>
  <message>
    <ts>2017-07-05T17:53:30.542016</ts>
    <user>U173SEFUN</user>
    <text>I don't think you can do better than O(n) for that task on a vector</text>
  </message>
  <message>
    <ts>2017-07-05T17:54:00.552495</ts>
    <user>U07TDTQNL</user>
    <text>that's why we suggested finger trees</text>
  </message>
  <message>
    <ts>2017-07-05T17:54:40.567557</ts>
    <user>U173SEFUN</user>
    <text>performance and just being able to do the task elegantly are two separate things</text>
  </message>
  <message>
    <ts>2017-07-05T17:55:03.575861</ts>
    <user>U173SEFUN</user>
    <text>sometimes you need to remove an element from the middle of a vector and it's not a bottleneck</text>
  </message>
  <message>
    <ts>2017-07-05T17:55:24.583502</ts>
    <user>U173SEFUN</user>
    <text>unreasonable to require every operation to be O(1)</text>
  </message>
  <message>
    <ts>2017-07-05T17:55:36.587965</ts>
    <user>U07TDTQNL</user>
    <text>even then I'd be tempted to use take + drop to do the same thing</text>
  </message>
  <message>
    <ts>2017-07-05T17:55:43.590699</ts>
    <user>U11BV7MTK</user>
    <text>`(apply concat ((juxt (partial take 3) (partial drop (inc 3))) [1 2 3 4 5 6]))`</text>
  </message>
  <message>
    <ts>2017-07-05T17:55:48.592404</ts>
    <user>U07TDTQNL</user>
    <text>or split-at or whatever it's called</text>
  </message>
  <message>
    <ts>2017-07-05T17:56:10.600931</ts>
    <user>U060FKQPN</user>
    <text>core.rrb-vector could be used aswell to keep performance sub linear</text>
  </message>
  <message>
    <ts>2017-07-05T17:56:12.601461</ts>
    <user>U173SEFUN</user>
    <text>`nthpath` can encapsulate the optimal method</text>
  </message>
  <message>
    <ts>2017-07-05T17:56:18.603843</ts>
    <user>U173SEFUN</user>
    <text>whatever it is</text>
  </message>
  <message>
    <ts>2017-07-05T17:56:25.606516</ts>
    <user>U060FKQPN</user>
    <text>has log subvec &amp;amp; log vector cat</text>
  </message>
  <message>
    <ts>2017-07-05T17:56:54.616994</ts>
    <user>U173SEFUN</user>
    <text>I haven't investigated the optimal implementation for this particular task, but whatever it is it can be encapsulated behind the abstraction</text>
  </message>
  <message>
    <ts>2017-07-05T17:57:16.625351</ts>
    <user>U173SEFUN</user>
    <text>specter is optimal for most of its functionality</text>
  </message>
  <message>
    <ts>2017-07-05T17:57:27.629826</ts>
    <user>U489U338R</user>
    <text>&lt;@U051SS2EU&gt; Thanks, that worked! What a relief! Nothing more annoying than debugging the dev environment when in a hurry :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T17:57:30.631108</ts>
    <user>U07TDTQNL</user>
    <text>on that we'll agree to disagree</text>
  </message>
  <message>
    <ts>2017-07-05T17:57:44.636169</ts>
    <user>U173SEFUN</user>
    <text>what are we disagreeing on?</text>
  </message>
  <message>
    <ts>2017-07-05T17:58:08.645013</ts>
    <user>U060FKQPN</user>
    <text>I think nathan was talking about performance &amp;amp; tim about api?</text>
  </message>
  <message>
    <ts>2017-07-05T17:58:37.655816</ts>
    <user>U07TDTQNL</user>
    <text>yeah, I mean the problem is that specter in this case abstracts so much away that I really don't know what it's going to do</text>
  </message>
  <message>
    <ts>2017-07-05T17:59:12.668521</ts>
    <user>U173SEFUN</user>
    <text>you don't know what it will do semantically or performance-wise?</text>
  </message>
  <message>
    <ts>2017-07-05T17:59:58.686457</ts>
    <user>U07TDTQNL</user>
    <text>performance wise, there's a underlying assumption in specter that it will do "the right thing" while maintaining the data type. Many times I don't care about the datatype, instead I care about performance.</text>
  </message>
  <message>
    <ts>2017-07-05T18:00:29.699511</ts>
    <user>U07TDTQNL</user>
    <text>so our definitions of "optimal" differ</text>
  </message>
  <message>
    <ts>2017-07-05T18:01:17.717874</ts>
    <user>U173SEFUN</user>
    <text>the original questioner asked about removing an element from a vector, which sounds like he cared about maintaining the datatype</text>
  </message>
  <message>
    <ts>2017-07-05T18:02:04.734927</ts>
    <user>U07TDTQNL</user>
    <text>perhaps, but sadly I've run into too much code already that falls apart because someone did (nth ...) on a seq.</text>
  </message>
  <message>
    <ts>2017-07-05T18:03:33.767322</ts>
    <user>U173SEFUN</user>
    <text>I really don't understand what you're asserting there</text>
  </message>
  <message>
    <ts>2017-07-05T18:03:43.770800</ts>
    <user>U07TDTQNL</user>
    <text>And what does "the same type" mean in the face of PersistentArrayMap? (I'm actually wondering on this one)</text>
  </message>
  <message>
    <ts>2017-07-05T18:04:50.793994</ts>
    <user>U173SEFUN</user>
    <text>`MAP-VALS` or `ALL` on a `PersistentArrayMap` output another `PersistentArrayMap`</text>
  </message>
  <message>
    <ts>2017-07-05T18:05:05.799114</ts>
    <user>U173SEFUN</user>
    <text>even one that's already above the threshold</text>
  </message>
  <message>
    <ts>2017-07-05T18:05:15.802518</ts>
    <user>U173SEFUN</user>
    <text>which is surprisingly possible</text>
  </message>
  <message>
    <ts>2017-07-05T18:05:50.814523</ts>
    <user>U07TDTQNL</user>
    <text>and if I do something that grows it?</text>
  </message>
  <message>
    <ts>2017-07-05T18:06:02.818115</ts>
    <user>U173SEFUN</user>
    <text>you can't grow it with those operations</text>
  </message>
  <message>
    <ts>2017-07-05T18:06:24.825505</ts>
    <user>U07TDTQNL</user>
    <text>whatabout ops that you can grow with</text>
  </message>
  <message>
    <ts>2017-07-05T18:06:49.833980</ts>
    <user>U173SEFUN</user>
    <text>they'll convert to PersistentHashMap</text>
  </message>
  <message>
    <ts>2017-07-05T18:07:51.854808</ts>
    <user>U173SEFUN</user>
    <text>maintaining the literal type isn't the goal of specter, rather to maintain a type with the same expected semantics</text>
  </message>
  <message>
    <ts>2017-07-05T18:08:23.865264</ts>
    <user>U173SEFUN</user>
    <text>PersistentHashMap and PersistentArrayMap are implementation details</text>
  </message>
  <message>
    <ts>2017-07-05T18:09:04.879088</ts>
    <user>U173SEFUN</user>
    <text>that specter maintains PersistentArrayMap on `ALL` and `MAP-VALS` is because that's the most performance optimal way to do the transformation</text>
  </message>
  <message>
    <ts>2017-07-05T18:10:15.902308</ts>
    <user>U11BV7MTK</user>
    <text>I've used an array map to maintain ordering for writing out columnar data, a persistenhashmap would make my site more dynamic than i like.</text>
  </message>
  <message>
    <ts>2017-07-05T18:10:44.912102</ts>
    <user>U173SEFUN</user>
    <text>yea there are isolated cases like that where it matters but not for 99% of use cases</text>
  </message>
  <message>
    <ts>2017-07-05T18:10:48.913340</ts>
    <user>U11BV7MTK</user>
    <text>for sure</text>
  </message>
  <message>
    <ts>2017-07-05T18:11:10.920471</ts>
    <user>U11BV7MTK</user>
    <text>i hate some of the subtleties of the clojure datatypes</text>
  </message>
  <message>
    <ts>2017-07-05T18:11:33.927890</ts>
    <user>U11BV7MTK</user>
    <text>like conj being beginning of a vector and end of a seq</text>
  </message>
  <message>
    <ts>2017-07-05T18:11:42.930837</ts>
    <user>U11BV7MTK</user>
    <text>or backwards sorry</text>
  </message>
  <message>
    <ts>2017-07-05T18:12:36.948601</ts>
    <user>U07TDTQNL</user>
    <text>I also hate some of the side effects of these datatypes, and that's why I've backed off a bit from specter, hiding all these complexities behind a abstraction is nice, but it leaks in performance. How fast is "remove nth"? Well it depends...</text>
  </message>
  <message>
    <ts>2017-07-05T18:12:48.952941</ts>
    <user>U07TDTQNL</user>
    <text>Same is true of recursive concat, conj, etc.</text>
  </message>
  <message>
    <ts>2017-07-05T18:13:05.958370</ts>
    <user>U11BV7MTK</user>
    <text>what do you mean "side effects of these datatypes"?</text>
  </message>
  <message>
    <ts>2017-07-05T18:13:12.960780</ts>
    <user>U07TDTQNL</user>
    <text>bad wording, sorry</text>
  </message>
  <message>
    <ts>2017-07-05T18:13:29.966029</ts>
    <user>U07TDTQNL</user>
    <text>"subtleties of these datatypes"</text>
  </message>
  <message>
    <ts>2017-07-05T18:13:32.967312</ts>
    <user>U11BV7MTK</user>
    <text>figured. but wanted to know what you meant</text>
  </message>
  <message>
    <ts>2017-07-05T18:13:38.969170</ts>
    <user>U11BV7MTK</user>
    <text>ah yeah</text>
  </message>
  <message>
    <ts>2017-07-05T18:14:43.988910</ts>
    <user>U173SEFUN</user>
    <text>actually for most uses of specter it's extremely difficult to outperform it</text>
  </message>
  <message>
    <ts>2017-07-05T18:14:47.989999</ts>
    <user>U07TDTQNL</user>
    <text>So yeah, back to the original problem, I think we should educate users of Clojure to say: "What you are trying to do isn't supported natively by the datatype, you can fake it in these ways, but it's going to have performance problems with larger collections".</text>
  </message>
  <message>
    <ts>2017-07-05T18:15:02.994698</ts>
    <user>U173SEFUN</user>
    <text>for most programmers I would say it's impossible because it requires too much internal knowledge of clojure</text>
  </message>
  <message>
    <ts>2017-07-05T18:15:06.995859</ts>
    <user>U173SEFUN</user>
    <text>&lt;https://github.com/nathanmarz/specter/blob/master/src/clj/com/rpl/specter/navs.cljc#L253&gt;</text>
  </message>
  <message>
    <ts>2017-07-05T18:15:55.011554</ts>
    <user>U173SEFUN</user>
    <text>that's 60% faster than next best method for transforming every value of a small map</text>
  </message>
  <message>
    <ts>2017-07-05T18:16:39.025437</ts>
    <user>U173SEFUN</user>
    <text>as for "remove nth", specter is probably not currently optimal but that's only because the work hasn't been put into it</text>
  </message>
  <message>
    <ts>2017-07-05T18:16:54.029622</ts>
    <user>U173SEFUN</user>
    <text>the abstraction can be optimal</text>
  </message>
  <message>
    <ts>2017-07-05T18:18:03.051179</ts>
    <user>U07TDTQNL</user>
    <text>optimal given the input data type...that's the catch</text>
  </message>
  <message>
    <ts>2017-07-05T18:18:27.058915</ts>
    <user>U173SEFUN</user>
    <text>how is that a catch?</text>
  </message>
  <message>
    <ts>2017-07-05T18:18:34.061183</ts>
    <user>U173SEFUN</user>
    <text>it can run different code for different data types</text>
  </message>
  <message>
    <ts>2017-07-05T18:20:31.097948</ts>
    <user>U07TDTQNL</user>
    <text>remove-nth will always be O(n) on a vector. No way to improve that. However, by educating users as to how the underlying collections work, maybe the'll reach for a different more optimal datatype.</text>
  </message>
  <message>
    <ts>2017-07-05T18:22:03.126784</ts>
    <user>U173SEFUN</user>
    <text>I 100% agree it's the programmer's responsibility to understand the data types they're using and the impacts of that, but that's completely orthogonal to specter</text>
  </message>
  <message>
    <ts>2017-07-05T18:23:50.159800</ts>
    <user>U173SEFUN</user>
    <text>specter lets you manipulate your data way more elegantly, especially compound or recursive data, and in many cases with far better performance</text>
  </message>
  <message>
    <ts>2017-07-05T18:24:11.166375</ts>
    <user>U173SEFUN</user>
    <text>I completely reject characterizing it like some magic library with performance "leaks"</text>
  </message>
  <message>
    <ts>2017-07-05T18:25:35.191792</ts>
    <user>U3JURM9B6</user>
    <text>I don't think &lt;@U07TDTQNL&gt; was blaming specter for the "leaks" -- but rather, unless you already have a mental model of how the nested datatype looks, you can have a single piece of Specter code that is (1) very fast for certai nstructures and (2) very slow for other structures, because some stuff are O(log n) or O(n) depending on the underlying datastructure</text>
  </message>
  <message>
    <ts>2017-07-05T18:27:07.219007</ts>
    <user>U173SEFUN</user>
    <text>whatever the underlying types are, specter will do the operation in the fastest way</text>
  </message>
  <message>
    <ts>2017-07-05T18:27:38.228675</ts>
    <user>U173SEFUN</user>
    <text>it's the responsibility of the programmer to choose the most appropriate types for their app</text>
  </message>
  <message>
    <ts>2017-07-05T18:28:10.238393</ts>
    <user>U173SEFUN</user>
    <text>criticizing specter for a programmer choosing inappropriate types doesn't make sense</text>
  </message>
  <message>
    <ts>2017-07-05T18:30:44.284436</ts>
    <user>U3JURM9B6</user>
    <text>1. I've studied specter a bit, even tried to implement a mini one myself.
2. I don't think I could do a better job myself.

3. I think "leaky" here just means -- as a programmer, you have to keep track of the underlying data structures, i.e. it's "leaky" in that you can't ignore the underlying details; not "leaky" as in space/time leakage.</text>
  </message>
  <message>
    <ts>2017-07-05T18:31:05.290781</ts>
    <user>U3JURM9B6</user>
    <text>I think this is the standard definition of "leaky abstraction."</text>
  </message>
  <message>
    <ts>2017-07-05T18:31:19.294691</ts>
    <user>U173SEFUN</user>
    <text>I wouldn't call that leaky</text>
  </message>
  <message>
    <ts>2017-07-05T18:31:52.304260</ts>
    <user>U173SEFUN</user>
    <text>"leaky" more appropriately refers to details that you have to worry about that should be encapsulated</text>
  </message>
  <message>
    <ts>2017-07-05T18:33:24.330818</ts>
    <user>U3JURM9B6</user>
    <text>Quoting wikipedia:

In software development, a leaky abstraction is an abstraction that exposes details and limitations of its underlying implementation to its users that should ideally be hidden away.

But here, Spectre queries (or any other queries for that matter) are 'leaky' in that different data structures have different runtimes for different ops, and the programmer has to keep them in mind, so this isn't really abstracted away from the programmer.

[I don't know a way to do this better.]

[I think this 'leakiness' problem can not be solved -- i.e. any attempt to build a DSL that allows easy manip of heterogeneous datastructures will have to deal with this[]</text>
  </message>
  <message>
    <ts>2017-07-05T18:34:17.346585</ts>
    <user>U3JURM9B6</user>
    <text>Just to be clear, I don't know of a way to improve Specter -- I think it's hit local optima -- and this 'leakiness' is a fundeamtanl problem due to different data structures having different runtimes.</text>
  </message>
  <message>
    <ts>2017-07-05T18:34:27.349599</ts>
    <user>U173SEFUN</user>
    <text>data structures are never a detail that should be hidden away</text>
  </message>
  <message>
    <ts>2017-07-05T18:35:15.363162</ts>
    <user>U173SEFUN</user>
    <text>we're just quibbling over terminology, I think we agree on the underlying principle</text>
  </message>
  <message>
    <ts>2017-07-05T18:36:02.376927</ts>
    <user>U3JURM9B6</user>
    <text>To someone who expects specter code to be "what, not how" it is leaky because they have to consider underlying datastructures.

To somehow who expects to always keep data structuresin mind, it's not leaky.

:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T18:36:28.384609</ts>
    <user>U3JURM9B6</user>
    <text>Let's argue over something else,</text>
  </message>
  <message>
    <ts>2017-07-05T18:36:43.388833</ts>
    <user>U3JURM9B6</user>
    <text>like ... where can i get a good set of exercises for learning how to write a nanopass compiler :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T18:37:00.393654</ts>
    <user>U3JURM9B6</user>
    <text>I'm watching the 2013 clojure conj &lt;https://www.youtube.com/watch?v=Os7FE3J-U5Q&gt; talk ... and I really want to try this out.</text>
  </message>
  <message>
    <ts>2017-07-05T18:39:45.440177</ts>
    <user>U173SEFUN</user>
    <text>we can agree on that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-05T18:41:17.465586</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U3JURM9B6&gt; records for the AST, postwalk for the passes, run till fixpoint, about all there is too it</text>
  </message>
  <message>
    <ts>2017-07-05T18:41:37.471014</ts>
    <user>U07TDTQNL</user>
    <text>or hashmaps even for the ast, whatever you prefer</text>
  </message>
  <message>
    <ts>2017-07-05T18:43:15.497850</ts>
    <user>U051SS2EU</user>
    <text>or you could get creative and event source a queue of characters and fold over it to generate a projection representing your compiled code</text>
  </message>
  <message>
    <ts>2017-07-05T18:43:20.499063</ts>
    <user>U051SS2EU</user>
    <text>just kidding, don't do that</text>
  </message>
  <message>
    <ts>2017-07-05T18:43:34.502931</ts>
    <user>U0NCTKEV8</user>
    <text>depending on your source and target you can do it without an ast</text>
  </message>
  <message>
    <ts>2017-07-05T18:44:05.511724</ts>
    <user>U0NCTKEV8</user>
    <text>if you say your target is a superset of your source, it is macroexpansion</text>
  </message>
  <message>
    <ts>2017-07-05T18:44:12.513523</ts>
    <user>U0NCTKEV8</user>
    <text>(or pretty close)</text>
  </message>
  <message>
    <ts>2017-07-05T18:44:34.519740</ts>
    <user>U07TDTQNL</user>
    <text>true, but working with order dependant types is unpleasant</text>
  </message>
  <message>
    <ts>2017-07-05T18:45:07.528686</ts>
    <user>U07TDTQNL</user>
    <text>may be better with spec, but {:keys [fn-name body]}) is easier than `[_ fn-name _ body]`</text>
  </message>
  <message>
    <ts>2017-07-05T18:45:41.538347</ts>
    <user>U0NCTKEV8</user>
    <text>sure</text>
  </message>
  <message>
    <ts>2017-07-05T18:46:27.550805</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://github.com/hiredman/qwerty&gt; "macroexpands" a lisp in to something like go in parens, then the emitter strips the parens so you can feed it to the go compiler</text>
  </message>
  <message>
    <ts>2017-07-05T18:46:45.555621</ts>
    <user>U07TDTQNL</user>
    <text>cool!</text>
  </message>
  <message>
    <ts>2017-07-05T18:47:31.568442</ts>
    <user>U0NCTKEV8</user>
    <text>I dunno if it rates an exclamation point, it was fun to fiddle with it for a while, then I gave up on it</text>
  </message>
  <message>
    <ts>2017-07-05T18:47:36.569779</ts>
    <user>U3JURM9B6</user>
    <text>hmm, and if I write the passes as transducers, can I easily get a monolithic compiler out o fthis?</text>
  </message>
  <message>
    <ts>2017-07-05T18:48:04.577556</ts>
    <user>U07TDTQNL</user>
    <text>you can, but you'll quickly find that some passes need to be run more than once, or need to be run before/after other passes</text>
  </message>
  <message>
    <ts>2017-07-05T18:48:30.585030</ts>
    <user>U07TDTQNL</user>
    <text>tools.analyzer is a nano-pass compiler imo.</text>
  </message>
  <message>
    <ts>2017-07-05T18:48:33.585621</ts>
    <user>U060FKQPN</user>
    <text>and in different traversal orders</text>
  </message>
  <message>
    <ts>2017-07-05T18:48:51.590696</ts>
    <user>U07TDTQNL</user>
    <text>yeah that too.</text>
  </message>
  <message>
    <ts>2017-07-05T18:49:39.604165</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U060FKQPN&gt; does tools.analyzer.jvm still walk the AST backwards for locals clearing? Maybe I'm mis-remembering, but I thought that was cool the first time I saw it.</text>
  </message>
  <message>
    <ts>2017-07-05T18:50:00.609879</ts>
    <user>U060FKQPN</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-05T18:50:21.615730</ts>
    <user>U060FKQPN</user>
    <text>makes the algorithm much simpler than walking forward &amp;amp; collecting usage points</text>
  </message>
  <message>
    <ts>2017-07-05T18:50:45.622841</ts>
    <user>U060FKQPN</user>
    <text>I did it that way just because I couldn't understand the forward algorithm implemented in Compiler.java TBH :)</text>
  </message>
  <message>
    <ts>2017-07-05T19:30:25.242282</ts>
    <user>U5JEJN1CP</user>
    <text>I'm struggling to wrap my head around clj-oauth.  All the examples use twitter, but I can't seem to get it to work with Google.  Google and twitter's terminology doesn't seem to be the same, and it's confusing the heck out of me.  Are there any examples using  google's api I can look at?</text>
  </message>
  <message>
    <ts>2017-07-05T19:41:14.393296</ts>
    <user>U4X9H6JUA</user>
    <text>I'm having trouble with core.async pub/sub. It seems like there must be something I'm not understanding. I can see that my system sometimes is publishing a lot of events really close together. Say 20 within 2 seconds. There are times that all but one of my subscribe loops (event listeners) aren't doing anything during this burst of activity. Then a while later (a couple of min sometimes) during another burst of publish activity the subscribe loops come to life and grab some data and push on to the subscriber channels.</text>
  </message>
  <message>
    <ts>2017-07-05T19:41:44.400485</ts>
    <user>U4X9H6JUA</user>
    <text>I started out by not using any buffering on the channels. I'm not really clear when additional buffering makes sense or not</text>
  </message>
  <message>
    <ts>2017-07-05T19:42:03.404722</ts>
    <user>U4X9H6JUA</user>
    <text>It really seems like some of my published events are being lost</text>
  </message>
  <message>
    <ts>2017-07-05T19:43:52.430126</ts>
    <user>U0NCTKEV8</user>
    <text>the first thing to do is check that your topic-fn is returning values from the set of things you are subscribing to</text>
  </message>
  <message>
    <ts>2017-07-05T19:43:53.430310</ts>
    <user>U4X9H6JUA</user>
    <text>when just using (chan) for pub should my source threads block if the subscribers are idle?</text>
  </message>
  <message>
    <ts>2017-07-05T19:44:15.435383</ts>
    <user>U4X9H6JUA</user>
    <text>yea, I have lots of debug messages that all looks pretty good</text>
  </message>
  <message>
    <ts>2017-07-05T19:44:25.437697</ts>
    <user>U0NCTKEV8</user>
    <text>how sure are you?</text>
  </message>
  <message>
    <ts>2017-07-05T19:44:35.440293</ts>
    <user>U4X9H6JUA</user>
    <text>well I currently only have one topic</text>
  </message>
  <message>
    <ts>2017-07-05T19:44:40.441418</ts>
    <user>U0NCTKEV8</user>
    <text>like, are we talking strings you know are byte for byte the same?</text>
  </message>
  <message>
    <ts>2017-07-05T19:45:05.447438</ts>
    <user>U4X9H6JUA</user>
    <text>my topic is just a keyword</text>
  </message>
  <message>
    <ts>2017-07-05T19:46:34.467820</ts>
    <user>U0NCTKEV8</user>
    <text>the next thing to log would be the identity (pr-str prints out the identity hash if I recall) of each thing involved</text>
  </message>
  <message>
    <ts>2017-07-05T19:47:17.477134</ts>
    <user>U0NCTKEV8</user>
    <text>to make sure you are creating the pub/sub on the same channel you are publishing to, and you are subscribing to the same pub/sub you are publishing to</text>
  </message>
  <message>
    <ts>2017-07-05T19:48:20.490996</ts>
    <user>U0NCTKEV8</user>
    <text>if the channel you are publishing to isn't being consumed for some reason, your publishes with block if there is no buffer, and will block once the buffer is full</text>
  </message>
  <message>
    <ts>2017-07-05T19:48:47.497467</ts>
    <user>U0NCTKEV8</user>
    <text>if I recall, a pubsub will consume everything and just ignore messages it has no subscribers for</text>
  </message>
  <message>
    <ts>2017-07-05T19:48:58.500167</ts>
    <user>U4X9H6JUA</user>
    <text>right, that's the thing, it appears that my publishers never block</text>
  </message>
  <message>
    <ts>2017-07-05T19:49:34.508442</ts>
    <user>U0NCTKEV8</user>
    <text>so I would double check your topic-fn, make sure it returns what you think it does on the inputs to the channel</text>
  </message>
  <message>
    <ts>2017-07-05T19:49:51.512636</ts>
    <user>U4X9H6JUA</user>
    <text>when no buffer is supplied to the channel, does that mean it will block after the first put, until the first take?</text>
  </message>
  <message>
    <ts>2017-07-05T19:50:28.521141</ts>
    <user>U0NCTKEV8</user>
    <text>e.g. if your topic-fn is a keyword, and your messages are maps, calling a keyword on a map that doesn't contain it would just return nil</text>
  </message>
  <message>
    <ts>2017-07-05T19:51:02.528780</ts>
    <user>U4X9H6JUA</user>
    <text>yes, that is how my events are structured just as maps</text>
  </message>
  <message>
    <ts>2017-07-05T19:51:36.536594</ts>
    <user>U0NCTKEV8</user>
    <text>so invoke your topic-fn on one of the maps to see what it returns</text>
  </message>
  <message>
    <ts>2017-07-05T19:52:28.548409</ts>
    <user>U4X9H6JUA</user>
    <text>that's the thing it all works fine when I do it by hand, things get weird once there is lots of simulatneous activity</text>
  </message>
  <message>
    <ts>2017-07-05T19:52:56.554664</ts>
    <user>U4X9H6JUA</user>
    <text>based on my logging I can see all the topics that are published and those that are received by the listenr loops</text>
  </message>
  <message>
    <ts>2017-07-05T19:52:57.554909</ts>
    <user>U0NCTKEV8</user>
    <text>how do you know your publishers don't block?</text>
  </message>
  <message>
    <ts>2017-07-05T19:54:48.580297</ts>
    <user>U4X9H6JUA</user>
    <text>I say that just based on my theads that push out lots of messges saying that they're publishing.... hmm wait you might be on to something</text>
  </message>
  <message>
    <ts>2017-07-05T19:55:10.585370</ts>
    <user>U4X9H6JUA</user>
    <text>my log message happens right before I push not after, I might be misinterpreting whats going on</text>
  </message>
  <message>
    <ts>2017-07-05T19:55:24.588662</ts>
    <user>U4X9H6JUA</user>
    <text>push=publish</text>
  </message>
  <message>
    <ts>2017-07-05T19:57:41.620998</ts>
    <user>U4X9H6JUA</user>
    <text>ok, made some changes to logging and restarting everyting,</text>
  </message>
  <message>
    <ts>2017-07-05T19:58:18.629256</ts>
    <user>U4X9H6JUA</user>
    <text>so could you help clarify about when is it appropriate to specify a buffer in these sceanrios?</text>
  </message>
  <message>
    <ts>2017-07-05T19:58:23.630631</ts>
    <user>U051SS2EU</user>
    <text>If things lock up under lots of activity, and you aren't buffering, and lots is &amp;lt; thousands, I'd double check for blocking ops in your go blocks.</text>
  </message>
  <message>
    <ts>2017-07-05T19:59:04.639999</ts>
    <user>U4X9H6JUA</user>
    <text>yea I'm not into thousands of events, generally should be less than 50/sec</text>
  </message>
  <message>
    <ts>2017-07-05T20:00:25.660704</ts>
    <user>U0NCTKEV8</user>
    <text>buffering is going to mask any problems with feedback you have</text>
  </message>
  <message>
    <ts>2017-07-05T20:02:26.690351</ts>
    <user>U4X9H6JUA</user>
    <text>ok, just got a big burst, it looks like I'm not blocking when I publish, the pre/postpublish log messages are all within the same millisecond</text>
  </message>
  <message>
    <ts>2017-07-05T20:02:32.691718</ts>
    <user>U0NCTKEV8</user>
    <text>it sounds like you are interfacing regular thread using code and core.async, and my bet is you are either using put! to publish or (async/go (&amp;gt;! ...)), when you should be using &amp;gt;!!</text>
  </message>
  <message>
    <ts>2017-07-05T20:03:22.703307</ts>
    <user>U051SS2EU</user>
    <text>Also, go blocks can die without visible feedback or error messages, you could just get backed up as consumers silently fail.</text>
  </message>
  <message>
    <ts>2017-07-05T20:03:23.703677</ts>
    <user>U4X9H6JUA</user>
    <text>yes, I'm using async/go &amp;gt;!</text>
  </message>
  <message>
    <ts>2017-07-05T20:03:44.708545</ts>
    <user>U0NCTKEV8</user>
    <text>the question is how you using it</text>
  </message>
  <message>
    <ts>2017-07-05T20:03:48.709480</ts>
    <user>U4X9H6JUA</user>
    <text>its funny but every example of pubsub I came across did it this way</text>
  </message>
  <message>
    <ts>2017-07-05T20:04:24.717473</ts>
    <user>U0NCTKEV8</user>
    <text>if you create a go block from a normal thread, you should wait for its result using &amp;lt;!!</text>
  </message>
  <message>
    <ts>2017-07-05T20:05:09.727576</ts>
    <user>U0NCTKEV8</user>
    <text>I mean,  I am kind of guessing here  and what are likely to be issues</text>
  </message>
  <message>
    <ts>2017-07-05T20:05:42.735429</ts>
    <user>U0NCTKEV8</user>
    <text>I still think it is some kind of issue with your topic-fn, but you have assured me it isn't</text>
  </message>
  <message>
    <ts>2017-07-05T20:07:07.755203</ts>
    <user>U3JURM9B6</user>
    <text>is identical? guaranteed to be an O(1) time pointer comparison</text>
  </message>
  <message>
    <ts>2017-07-05T20:07:28.760259</ts>
    <user>U0NCTKEV8</user>
    <text>if the publishers aren't actually blocking, all the symptoms point to a disconnect between pub and sub, the likely reason is the result of topic-fn isn't what you think</text>
  </message>
  <message>
    <ts>2017-07-05T20:08:25.773060</ts>
    <user>U0NCTKEV8</user>
    <text>so I might do something like replace the topic fn with `(constantly 1)` make a channel subbed to 1, and verify it is getting all the traffic</text>
  </message>
  <message>
    <ts>2017-07-05T20:08:59.780616</ts>
    <user>U4X9H6JUA</user>
    <text>&lt;@U0NCTKEV8&gt; ok, but I think based on what &lt;@U051SS2EU&gt; was saying is that my usage of go (&amp;gt;! ...)  could be the prob</text>
  </message>
  <message>
    <ts>2017-07-05T20:09:51.791639</ts>
    <user>U4X9H6JUA</user>
    <text>literally all of my topics are the same {:transformer-event :ev1 or :ev2 or ev3}</text>
  </message>
  <message>
    <ts>2017-07-05T20:10:23.798914</ts>
    <user>U0NCTKEV8</user>
    <text>definitely, like I said, "if publishers aren't actually blocking" if they are blocking and you just can't tell, or they are just dying, then that would be your problem</text>
  </message>
  <message>
    <ts>2017-07-05T20:11:10.808995</ts>
    <user>U4X9H6JUA</user>
    <text>cool, I'm gonna change my publish to use &amp;gt;!! and see how that affects the situation</text>
  </message>
  <message>
    <ts>2017-07-05T20:12:48.830482</ts>
    <user>U0NCTKEV8</user>
    <text>`&amp;gt;!!` is really blocking, not for use in go blocks, only for use on real threads</text>
  </message>
  <message>
    <ts>2017-07-05T20:13:12.835583</ts>
    <user>U4X9H6JUA</user>
    <text>yea I took out the go block</text>
  </message>
  <message>
    <ts>2017-07-05T20:13:38.841491</ts>
    <user>U4X9H6JUA</user>
    <text>doesn't seem to be making any different behavior</text>
  </message>
  <message>
    <ts>2017-07-05T20:14:01.846519</ts>
    <user>U0NCTKEV8</user>
    <text>your producer threads are still not blocked?</text>
  </message>
  <message>
    <ts>2017-07-05T20:15:08.861158</ts>
    <user>U4X9H6JUA</user>
    <text>I have a log message before the publish and another after, and they are always within a millisecond</text>
  </message>
  <message>
    <ts>2017-07-05T20:15:18.863615</ts>
    <user>U4X9H6JUA</user>
    <text>doesn't look blocked to me</text>
  </message>
  <message>
    <ts>2017-07-05T20:16:10.875540</ts>
    <user>U0NCTKEV8</user>
    <text>are you sure those aren't spurious log messages coming from threads left running from a previous attempt?</text>
  </message>
  <message>
    <ts>2017-07-05T20:18:13.902869</ts>
    <user>U4X9H6JUA</user>
    <text>valid question, I'll restart the whole shebang</text>
  </message>
  <message>
    <ts>2017-07-05T20:19:10.915167</ts>
    <user>U4X9H6JUA</user>
    <text>this is really puzzling to me.</text>
  </message>
  <message>
    <ts>2017-07-05T20:19:32.920092</ts>
    <user>U4X9H6JUA</user>
    <text>given that I'm not buffering what are the scenarious that would cause events to be dropped?</text>
  </message>
  <message>
    <ts>2017-07-05T20:21:21.943528</ts>
    <user>U0NCTKEV8</user>
    <text>well, you could think events are being published when they are not, because your producers are just blocking. the topic-fn could be returning something you are not subscribed to so messages get dropped, or your subscribers do get the messages and just don't do anything</text>
  </message>
  <message>
    <ts>2017-07-05T20:22:40.959941</ts>
    <user>U4X9H6JUA</user>
    <text>givent that I only have 1 publication on one channel there should be no pub log messages that are publishing into nothing</text>
  </message>
  <message>
    <ts>2017-07-05T20:22:53.962592</ts>
    <user>U4X9H6JUA</user>
    <text>there are however of course several sub channels and loops</text>
  </message>
  <message>
    <ts>2017-07-05T20:23:17.967525</ts>
    <user>U0NCTKEV8</user>
    <text>are you sure you are subscribing to the same pubsub you are publishing to?</text>
  </message>
  <message>
    <ts>2017-07-05T20:23:20.968290</ts>
    <user>U4X9H6JUA</user>
    <text>ok, now i'm finally seeing some blocking</text>
  </message>
  <message>
    <ts>2017-07-05T20:23:51.974550</ts>
    <user>U4X9H6JUA</user>
    <text>I see several pre publish logs, with no coresponding post publis logs</text>
  </message>
  <message>
    <ts>2017-07-05T20:24:15.979522</ts>
    <user>U0NCTKEV8</user>
    <text>right, that blocking is back pressure being communicated back from the downstream async bits, which are stuck where or going really slow</text>
  </message>
  <message>
    <ts>2017-07-05T20:24:37.983930</ts>
    <user>U0NCTKEV8</user>
    <text>are the down stream bits re-publishing to the same pubsub?</text>
  </message>
  <message>
    <ts>2017-07-05T20:26:45.009623</ts>
    <user>U4X9H6JUA</user>
    <text>no thats part of this whole business I've never been too clear on. I have no logic for re-publishing</text>
  </message>
  <message>
    <ts>2017-07-05T20:27:49.022796</ts>
    <user>U4X9H6JUA</user>
    <text>by downstream bits are you referring to the sub handlers?</text>
  </message>
  <message>
    <ts>2017-07-05T20:28:06.026232</ts>
    <user>U0NCTKEV8</user>
    <text>yes, things downstream of the pubsub</text>
  </message>
  <message>
    <ts>2017-07-05T20:28:46.034648</ts>
    <user>U4X9H6JUA</user>
    <text>oh, well my sub handler loops publish on to the sub channels, is that what you mean?</text>
  </message>
  <message>
    <ts>2017-07-05T20:29:00.037364</ts>
    <user>U4X9H6JUA</user>
    <text>the sub channels are obviously differnt than the pub channel</text>
  </message>
  <message>
    <ts>2017-07-05T20:29:14.040105</ts>
    <user>U0NCTKEV8</user>
    <text>that could be the source of deadlock</text>
  </message>
  <message>
    <ts>2017-07-05T20:29:47.046948</ts>
    <user>U0NCTKEV8</user>
    <text>whenever you have a feedback loop (a process that feeds output back in to its input) it is really easy to deadlock</text>
  </message>
  <message>
    <ts>2017-07-05T20:30:27.055479</ts>
    <user>U0NCTKEV8</user>
    <text>since the sub channels don't have a buffer, publishing to them blocks until someone else consumes from them</text>
  </message>
  <message>
    <ts>2017-07-05T20:31:17.065790</ts>
    <user>U0NCTKEV8</user>
    <text>depending on what you are doing, adding a buffer might fix it, or might not, because a buffer is fixed in size, and if you feedback more than the size of the buffer, you are deadlocked again</text>
  </message>
  <message>
    <ts>2017-07-05T20:32:53.084765</ts>
    <user>U4X9H6JUA</user>
    <text>ok let me get this straight, my listener loops take off of the sub channel</text>
  </message>
  <message>
    <ts>2017-07-05T20:33:16.089440</ts>
    <user>U4X9H6JUA</user>
    <text>the clojure publisher logic puts on to the sub channel based on the topic-fn</text>
  </message>
  <message>
    <ts>2017-07-05T20:33:51.096296</ts>
    <user>U4X9H6JUA</user>
    <text>all of my sub loopse run forever taking from the sub channels and then calling a handler</text>
  </message>
  <message>
    <ts>2017-07-05T20:34:45.107071</ts>
    <user>U4X9H6JUA</user>
    <text>I think you're saying if my sub loops get stuck then that could be causing the deadlock, like handler never returning I guess</text>
  </message>
  <message>
    <ts>2017-07-05T20:35:21.114054</ts>
    <user>U0NCTKEV8</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-05T20:35:35.116789</ts>
    <user>U0NCTKEV8</user>
    <text>if you are calling a function that never returns that is another problem</text>
  </message>
  <message>
    <ts>2017-07-05T20:35:45.118821</ts>
    <user>U0NCTKEV8</user>
    <text>you cannot do that kind of thing from a go block</text>
  </message>
  <message>
    <ts>2017-07-05T20:35:48.119377</ts>
    <user>U4X9H6JUA</user>
    <text>that would all make sense if the whole thing locked up and never recovered, but that doesn't happen</text>
  </message>
  <message>
    <ts>2017-07-05T20:35:57.121062</ts>
    <user>U0NCTKEV8</user>
    <text>it will block the threadpool go blocks use</text>
  </message>
  <message>
    <ts>2017-07-05T20:36:00.121615</ts>
    <user>U4X9H6JUA</user>
    <text>no I don't thnk I'm calling a function that runs forever</text>
  </message>
  <message>
    <ts>2017-07-05T20:36:06.122779</ts>
    <user>U4X9H6JUA</user>
    <text>I'm not seeing anything like that</text>
  </message>
  <message>
    <ts>2017-07-05T20:36:30.127505</ts>
    <user>U4X9H6JUA</user>
    <text>if my handlers got stuck the whole system should eventually lock up, and that never happens</text>
  </message>
  <message>
    <ts>2017-07-05T20:36:59.133474</ts>
    <user>U0NCTKEV8</user>
    <text>or if they run slow,  or if they do blocking stuff on the async threadpool</text>
  </message>
  <message>
    <ts>2017-07-05T20:38:14.148157</ts>
    <user>U4X9H6JUA</user>
    <text>the handlers can be slow compared to the publishers, when there is lots of activity, they all run in their own go blocks</text>
  </message>
  <message>
    <ts>2017-07-05T20:38:34.152130</ts>
    <user>U0NCTKEV8</user>
    <text>you are ddosing the async threadpool</text>
  </message>
  <message>
    <ts>2017-07-05T20:39:14.159588</ts>
    <user>U4X9H6JUA</user>
    <text>too much activity for the go blocks that the handlers are in?</text>
  </message>
  <message>
    <ts>2017-07-05T20:39:24.161753</ts>
    <user>U0NCTKEV8</user>
    <text>I dunno about too much</text>
  </message>
  <message>
    <ts>2017-07-05T20:39:54.167815</ts>
    <user>U0NCTKEV8</user>
    <text>it sounds like everything is behaving as designed, feedback is slowing your publishers to a rate that matches the consuming</text>
  </message>
  <message>
    <ts>2017-07-05T20:40:15.172125</ts>
    <user>U4X9H6JUA</user>
    <text>well except for the lost events</text>
  </message>
  <message>
    <ts>2017-07-05T20:40:23.173699</ts>
    <user>U4X9H6JUA</user>
    <text>that I still don't understand</text>
  </message>
  <message>
    <ts>2017-07-05T20:40:29.174722</ts>
    <user>U0NCTKEV8</user>
    <text>in this case, the processes reading from the sub channels aren't able to get time on the threadpool to run</text>
  </message>
  <message>
    <ts>2017-07-05T20:40:56.179905</ts>
    <user>U0NCTKEV8</user>
    <text>are you sure they are lost? or are they just waiting to run in a completely backed up system</text>
  </message>
  <message>
    <ts>2017-07-05T20:42:13.194604</ts>
    <user>U4X9H6JUA</user>
    <text>you see the thing is, my publishers are bursty, there are short periods of busy activity and long periods of relative calm,</text>
  </message>
  <message>
    <ts>2017-07-05T20:42:49.201441</ts>
    <user>U4X9H6JUA</user>
    <text>given that the system never locks up, all events should eventually be handled in the calm period, but that isn't what is happening.</text>
  </message>
  <message>
    <ts>2017-07-05T20:43:29.209034</ts>
    <user>U4X9H6JUA</user>
    <text>aggh, I'm gonna have head home soon, thanks for being a sounding board on this pub/sub stuff</text>
  </message>
  <message>
    <ts>2017-07-05T20:44:12.217488</ts>
    <user>U0NCTKEV8</user>
    <text>you might want to look at one of the pipeline variants, it may simplify things a lot</text>
  </message>
  <message>
    <ts>2017-07-05T20:45:19.230939</ts>
    <user>U4X9H6JUA</user>
    <text>I didn't even know about pipelines, something new to learn tomorrow I guess</text>
  </message>
  <message>
    <ts>2017-07-05T20:45:58.238505</ts>
    <user>U4X9H6JUA</user>
    <text>cool, thanks, have a good evening (or what ever timezone appropriate part of day is appropriate)</text>
  </message>
  <message>
    <ts>2017-07-05T23:30:46.082610</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U3JURM9B6&gt; if you didn't already look at the source a few hours ago, yes, `identical?` is just:
```static public boolean identical(Object k1, Object k2){
	return k1 == k2;
}```</text>
  </message>
  <message>
    <ts>2017-07-06T03:07:54.444285</ts>
    <user>U0E0XL064</user>
    <text>Trying to flatten a nested map to a 'referenced nested map':
```
{:a1 {:b1 "val1" :c1 2}
 :a2 {:b1 "val2" :c2 {:d1 3}}}
``` 
to
```
[{&amp;lt;0&amp;gt; {:a1 &amp;lt;1&amp;gt; :a2 &amp;lt;2&amp;gt;}
  &amp;lt;1&amp;gt; {:b1 "val1" :c1 2}
  &amp;lt;2&amp;gt; {:b1 "val2" :c2 &amp;lt;3&amp;gt;}
  &amp;lt;3&amp;gt; {:d1 3}]
```
`&amp;lt;n&amp;gt;` being some value, doesn't really matter a lot - just a number would certainly do.</text>
  </message>
  <message>
    <ts>2017-07-06T04:24:05.943737</ts>
    <user>U2MPUENUC</user>
    <text>&lt;@U5JEJN1CP&gt; did you get an answer ? is this useful &lt;https://github.com/r0man/oauth-clj/blob/master/src/oauth/google.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T04:38:03.265972</ts>
    <user>U287C9JRE</user>
    <text>I am somewhat bewildered by core-async terminology. `pipeline` is for computation (non-blocking all the way), `pipeline-async` is for "async" operations which seems to be operations which may park the statemachine and `pipeline-blocking` is used for straight up blocking ops.

I am mostly confused about  ´pipeline-async`.

Am I right in assuming:
  * (#A1) some operations, say `(a/&amp;lt;! (a/timeout 3000))` - would park for approximately 3 seconds - so operations like it (take from a channel) are OK inside of `pipeline-async`.
  * (#A2) the reason the `af` fn in `pipeline-async` receives a channel onto which the result should be delivered is because I can then easily wrap a typical callback-style async operation by letting the callback put a message onto this result channel ?</text>
  </message>
  <message>
    <ts>2017-07-06T04:48:07.498141</ts>
    <user>U2MPUENUC</user>
    <text>&lt;@U5JEJN1CP&gt; this might be better .. I think you need OAuth2 for google and this repo has a google example &lt;https://github.com/craygo/clj-oauth2/blob/master/src/clj_oauth2/google.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T08:01:23.511913</ts>
    <user>U287C9JRE</user>
    <text>No one has some thoughts / can confirm/deny my assumptions mentioned above ?</text>
  </message>
  <message>
    <ts>2017-07-06T08:44:03.460868</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U287C9JRE&gt; the purpose of the chan passed to af is to allow N results (0 or more) onto to from each call too af</text>
  </message>
  <message>
    <ts>2017-07-06T08:45:06.487919</ts>
    <user>U051SS2EU</user>
    <text>Otherwise it would have to build and return a collection.</text>
  </message>
  <message>
    <ts>2017-07-06T12:54:52.399196</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U1ALMRBLL&gt;: (re identical? being pointer equality check) -- nope, haven't read source yet; thanks for checking for me :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T14:02:09.745017</ts>
    <user>U4SKJCP3K</user>
    <text>Is there a `exports.default` equivalent (from Node.js) for Clojure? Use case, I have a file called `config` that loads an EDN file, parse it and store it to a variable called `config`. Whenever importing it I have to `config/config` which looks... Weird.</text>
  </message>
  <message>
    <ts>2017-07-06T14:04:55.843060</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U4SKJCP3K&gt; what about refer? `(require 'my-app.config :refer [config])`</text>
  </message>
  <message>
    <ts>2017-07-06T14:05:52.876954</ts>
    <user>U4SKJCP3K</user>
    <text>&lt;@U5ZAJ15P0&gt; Thanks, that could work. However, I am also exposing two other variables on this file that I later want to reference too. As far as I understand, with your solution, I would only be able to refer to the `config` variable and nothing else.</text>
  </message>
  <message>
    <ts>2017-07-06T14:06:24.895767</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U4SKJCP3K&gt; you can add any number of variables/function in the vector after :refer</text>
  </message>
  <message>
    <ts>2017-07-06T14:06:43.907007</ts>
    <user>U4SKJCP3K</user>
    <text>&lt;@U5ZAJ15P0&gt; Oh I see, let me try that.</text>
  </message>
  <message>
    <ts>2017-07-06T14:07:37.938041</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U4SKJCP3K&gt; actually I got the syntax a bit wrong. It's
`(require '[my-app.config :refer [config]])`</text>
  </message>
  <message>
    <ts>2017-07-06T14:12:41.111141</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U4SKJCP3K&gt; another thing to consider is that since good clojure style is to use the namespace prefix, you can use a name that isn't redundant with the prefix</text>
  </message>
  <message>
    <ts>2017-07-06T14:13:46.148681</ts>
    <user>U051SS2EU</user>
    <text>for example if the ns were environment so it was `environment/config` and the other things in the ns were environment related but not the config data itself, or if the var were settings, so it's `config/settings` and the rest of the ns is about things that are about config but not the specific settings</text>
  </message>
  <message>
    <ts>2017-07-06T14:13:48.149655</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; is using :refer bad clojure style? I am new to clojure so I don't really know</text>
  </message>
  <message>
    <ts>2017-07-06T14:14:31.173842</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; it's OK in moderation - but there's a reason nobody writes ns forms with `:use` any more</text>
  </message>
  <message>
    <ts>2017-07-06T14:14:59.189246</ts>
    <user>U4SKJCP3K</user>
    <text>Thanks both &lt;@U5ZAJ15P0&gt; and &lt;@U051SS2EU&gt;.</text>
  </message>
  <message>
    <ts>2017-07-06T14:15:17.199973</ts>
    <user>U4SKJCP3K</user>
    <text>Since it only exposes 3 public vars for now, I'm going with `:refer`</text>
  </message>
  <message>
    <ts>2017-07-06T14:15:39.212505</ts>
    <user>U051SS2EU</user>
    <text>that's the most I'd want in a client ns period</text>
  </message>
  <message>
    <ts>2017-07-06T14:15:48.217800</ts>
    <user>U051SS2EU</user>
    <text>not just from one ns - from all combined</text>
  </message>
  <message>
    <ts>2017-07-06T14:15:57.222607</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; :use is an order of magnitude worse though, right? it just refers everything</text>
  </message>
  <message>
    <ts>2017-07-06T14:16:09.229381</ts>
    <user>U051SS2EU</user>
    <text>right, but it's a matter of degree not kind</text>
  </message>
  <message>
    <ts>2017-07-06T14:16:15.233355</ts>
    <user>U5ZAJ15P0</user>
    <text>yep, true</text>
  </message>
  <message>
    <ts>2017-07-06T14:23:27.480204</ts>
    <user>U4SKJCP3K</user>
    <text>&lt;@U051SS2EU&gt; What if I have a library that exposes a bunch of stuff but I just need a few of them. Still the best practice is to go with namespaces instead of using `:refer` and `:only`?</text>
  </message>
  <message>
    <ts>2017-07-06T14:24:07.502419</ts>
    <user>U051SS2EU</user>
    <text>use :as</text>
  </message>
  <message>
    <ts>2017-07-06T14:24:31.516891</ts>
    <user>U051SS2EU</user>
    <text>unless you are using the function extremely frequently</text>
  </message>
  <message>
    <ts>2017-07-06T14:24:33.517957</ts>
    <user>U4SKJCP3K</user>
    <text>But `:as` would still load everything from that file into memory no?</text>
  </message>
  <message>
    <ts>2017-07-06T14:24:41.521936</ts>
    <user>U051SS2EU</user>
    <text>that has nothing to do with it</text>
  </message>
  <message>
    <ts>2017-07-06T14:24:51.527545</ts>
    <user>U051SS2EU</user>
    <text>all :as does is create an alias in your ns</text>
  </message>
  <message>
    <ts>2017-07-06T14:24:59.531772</ts>
    <user>U050MP39D</user>
    <text>the whole file is compiled and loaded into permgen regardless of how you refer to it</text>
  </message>
  <message>
    <ts>2017-07-06T14:25:11.538743</ts>
    <user>U051SS2EU</user>
    <text>not using :refer is not about memory usage, it's about poluting a namespace with bindings that are irrelevant</text>
  </message>
  <message>
    <ts>2017-07-06T14:25:11.538861</ts>
    <user>U4SKJCP3K</user>
    <text>Gotcha, that's nice to know. Thanks.</text>
  </message>
  <message>
    <ts>2017-07-06T14:25:15.541202</ts>
    <user>U051SS2EU</user>
    <text>it's about code readaiblity</text>
  </message>
  <message>
    <ts>2017-07-06T14:25:47.559144</ts>
    <user>U4SKJCP3K</user>
    <text>So I don't really see a use case for anything other than `:as` (perhaps only `:use` because can be handy on the REPL)</text>
  </message>
  <message>
    <ts>2017-07-06T14:26:02.568054</ts>
    <user>U051SS2EU</user>
    <text>yup - that's almost always the right way to do it</text>
  </message>
  <message>
    <ts>2017-07-06T14:26:13.574209</ts>
    <user>U050MP39D</user>
    <text>yeah tht's the general consensus that's emerged</text>
  </message>
  <message>
    <ts>2017-07-06T14:26:15.575254</ts>
    <user>U051SS2EU</user>
    <text>but there are exceptions eg. if every function in your ns is using &amp;gt;! from core.async</text>
  </message>
  <message>
    <ts>2017-07-06T14:26:19.577131</ts>
    <user>U051SS2EU</user>
    <text>that makes sense to refer</text>
  </message>
  <message>
    <ts>2017-07-06T14:26:26.581777</ts>
    <user>U11BV7MTK</user>
    <text>notable exceptions `deftest` and `is`</text>
  </message>
  <message>
    <ts>2017-07-06T14:26:55.598813</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U11BV7MTK&gt; yeah, to me that's the same exception  - every form in my test ns uses deftest once and is multiple times</text>
  </message>
  <message>
    <ts>2017-07-06T14:27:08.606419</ts>
    <user>U051SS2EU</user>
    <text>so it's ubiquitous enough to drop the prefix</text>
  </message>
  <message>
    <ts>2017-07-06T14:27:32.620270</ts>
    <user>U11BV7MTK</user>
    <text>for sure. i'm a big fan of the namespaced functions. common lisp gets difficult to read because of that. also emacs-lisp...</text>
  </message>
  <message>
    <ts>2017-07-06T14:29:53.700762</ts>
    <user>U051SS2EU</user>
    <text>it's another flavor of the same problem overuse of inheritance causes - "where the hell is this name defined?"</text>
  </message>
  <message>
    <ts>2017-07-06T14:30:21.717409</ts>
    <user>U051SS2EU</user>
    <text>but inheritance tends to get into a worse state because it's so common to rebind the same names</text>
  </message>
  <message>
    <ts>2017-07-06T14:38:34.000627</ts>
    <user>U61HA86AG</user>
    <text>&lt;https://stuartsierra.com/2016/clojure-how-to-ns.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T14:38:49.009320</ts>
    <user>U61HA86AG</user>
    <text>i quite like these principles</text>
  </message>
  <message>
    <ts>2017-07-06T14:55:04.551253</ts>
    <user>U0HM5MJ5V</user>
    <text>i actually alias clojure.test, mostly to get completion and automatic require in cursive</text>
  </message>
  <message>
    <ts>2017-07-06T15:03:34.843067</ts>
    <user>U050MP39D</user>
    <text>yeah cursive actually makes :use/:refer even less appealing</text>
  </message>
  <message>
    <ts>2017-07-06T15:10:32.068002</ts>
    <user>U11BV7MTK</user>
    <text>oh can it not suggest things that aren't in the current namespace if they don't have an alias?</text>
  </message>
  <message>
    <ts>2017-07-06T15:49:12.257784</ts>
    <user>U2J4FRT2T</user>
    <text>I'm writting a macro that transform a keyword into a symbol
This symbol will be used on a `(def ~symbol ...)`
There is a "default" way to normalize `:foo.bar/quoo` to a valid symbol?</text>
  </message>
  <message>
    <ts>2017-07-06T15:53:55.406477</ts>
    <user>U1WMPA45U</user>
    <text>`(symbol (namespace kw) (name kw))`?</text>
  </message>
  <message>
    <ts>2017-07-06T16:00:25.612313</ts>
    <user>U051SS2EU</user>
    <text>def can't take namespaced symbols though</text>
  </message>
  <message>
    <ts>2017-07-06T16:04:27.739996</ts>
    <user>U1WMPA45U</user>
    <text>yeah, probably just munge the ns &amp;amp; name into a string, separated by some other string, if the namespace is important</text>
  </message>
  <message>
    <ts>2017-07-06T16:13:22.012763</ts>
    <user>U2J4FRT2T</user>
    <text>&lt;@U1WMPA45U&gt; I need a local symbol. Some like `foo_bar__quoo`</text>
  </message>
  <message>
    <ts>2017-07-06T16:13:40.022372</ts>
    <user>U051SS2EU</user>
    <text>if it needs to be "local" why is it going in a def?</text>
  </message>
  <message>
    <ts>2017-07-06T16:14:44.055387</ts>
    <user>U051SS2EU</user>
    <text>perhaps I misunderstand what you mean by local here, but by the standard clojure definition, def doesn't and can't be used to create locals</text>
  </message>
  <message>
    <ts>2017-07-06T16:16:14.102204</ts>
    <user>U2J4FRT2T</user>
    <text>`(my-cool-macro :about.this/keyword [some cool dsl])` ~macro-magic~&amp;gt; `(def about_this_keyword :result-of-my-macro)`</text>
  </message>
  <message>
    <ts>2017-07-06T16:17:38.145491</ts>
    <user>U051SS2EU</user>
    <text>That addresses the question, that doesn't do anything with locals as clojure defines them. But given that in order for the macro to work :about.this/keyword needs to be a literal, why not just provide the symbol directly?</text>
  </message>
  <message>
    <ts>2017-07-06T16:17:53.152993</ts>
    <user>U050MP39D</user>
    <text>&lt;@U11BV7MTK&gt; no it suggests them fine, it just feels more useful when it narrows it down to a specific alias</text>
  </message>
  <message>
    <ts>2017-07-06T16:18:08.160581</ts>
    <user>U11BV7MTK</user>
    <text>ah yeah. easier to browse</text>
  </message>
  <message>
    <ts>2017-07-06T16:18:22.168462</ts>
    <user>U11BV7MTK</user>
    <text>CIDER has a browse namespace feature which is really nice</text>
  </message>
  <message>
    <ts>2017-07-06T16:19:27.203247</ts>
    <user>U2J4FRT2T</user>
    <text>noisesmith: because I'm talking about a a keyword. I will generate a rule for clara.
Dynamic symbols will cause difficulties on debug</text>
  </message>
  <message>
    <ts>2017-07-06T16:20:13.226672</ts>
    <user>U051SS2EU</user>
    <text>what I am saying is that the macro won't work unless the keyword is a literal in the form</text>
  </message>
  <message>
    <ts>2017-07-06T16:20:29.234919</ts>
    <user>U051SS2EU</user>
    <text>a symbol as a literal in a macro that becomes a binding does not cause any debug difficulties</text>
  </message>
  <message>
    <ts>2017-07-06T16:21:29.266137</ts>
    <user>U051SS2EU</user>
    <text>do you mean the keyword literal is the same as a keyword that gets used elsewhere?</text>
  </message>
  <message>
    <ts>2017-07-06T16:28:54.498141</ts>
    <user>U0JLGECPK</user>
    <text>hello, i'm trying to take a sqlvec like ```["SELECT * FROM ? WHERE (? = ? AND ? = ?)"
 "Aliens"
 "WritesPoetry"
 "True"
 "TheirPoetryIsGood"
 "False"]``` and convert it into a sql string

usually, i would be content with this as clojure.java.jdbc accepts this. but in my current situation i am communicating with AWS Athena which accepts a string representing a sql query.</text>
  </message>
  <message>
    <ts>2017-07-06T16:30:12.539355</ts>
    <user>U050MP39D</user>
    <text>replace ? with '%s' and [...] with (format ...)?</text>
  </message>
  <message>
    <ts>2017-07-06T16:32:27.611861</ts>
    <user>U0JLGECPK</user>
    <text>that would certainly do the trick</text>
  </message>
  <message>
    <ts>2017-07-06T16:33:01.629502</ts>
    <user>U0JLGECPK</user>
    <text>but sufficient to prevent against malicious input?</text>
  </message>
  <message>
    <ts>2017-07-06T16:33:38.648279</ts>
    <user>U050MP39D</user>
    <text>definitely not :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T16:34:34.677322</ts>
    <user>U0JLGECPK</user>
    <text>therein lies the rub</text>
  </message>
  <message>
    <ts>2017-07-06T16:36:36.739788</ts>
    <user>U050MP39D</user>
    <text>if athena doesn't have prepared statements then you'll need a function that escapes sql in a manner that's safe for athena</text>
  </message>
  <message>
    <ts>2017-07-06T16:36:39.741349</ts>
    <user>U0NCTKEV8</user>
    <text>the ? after FROM isn't actually valid jdbc if I recall either</text>
  </message>
  <message>
    <ts>2017-07-06T16:37:09.756280</ts>
    <user>U0NCTKEV8</user>
    <text>jdbc, or all the jdbc drivers I have used, don't let you parameterize the table name</text>
  </message>
  <message>
    <ts>2017-07-06T16:38:37.800962</ts>
    <user>U0NCTKEV8</user>
    <text>apparently the .toString method on a prepared statement for some jdbc drivers will give you the sql string</text>
  </message>
  <message>
    <ts>2017-07-06T16:40:22.854734</ts>
    <user>U0NCTKEV8</user>
    <text>athena also has a jdbc driver, so you could just use that</text>
  </message>
  <message>
    <ts>2017-07-06T16:40:57.871804</ts>
    <user>U0JLGECPK</user>
    <text>as it turns out athena does have a jdbc driver</text>
  </message>
  <message>
    <ts>2017-07-06T16:40:59.872754</ts>
    <user>U0JLGECPK</user>
    <text>happy days</text>
  </message>
  <message>
    <ts>2017-07-06T16:41:10.878562</ts>
    <user>U0JLGECPK</user>
    <text>&lt;https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T16:44:46.988209</ts>
    <user>U0JLGECPK</user>
    <text>thanks all, much appreciated</text>
  </message>
  <message>
    <ts>2017-07-06T16:46:44.048524</ts>
    <user>U0QKTTY4D</user>
    <text>what clojure libraries exist for desktop ui's? is there anything like re-frame for clojurefx? not really interested in electron</text>
  </message>
  <message>
    <ts>2017-07-06T16:49:30.131915</ts>
    <user>U0QKTTY4D</user>
    <text>i found a lot of things that are out of date.... looking for something that's been maintained</text>
  </message>
  <message>
    <ts>2017-07-06T16:50:26.160274</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U0QKTTY4D&gt; I maintain fn-fx, but to push it much further we need users. Not a whole lot of people trying to do JavaFX with Clojure</text>
  </message>
  <message>
    <ts>2017-07-06T16:50:41.168081</ts>
    <user>U07TDTQNL</user>
    <text>&lt;https://github.com/halgari/fn-fx&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T16:51:14.184551</ts>
    <user>U07TDTQNL</user>
    <text>That being said it's React for JavaFX and works fairly well for "normal" apps, the rough edges are around things like animation.</text>
  </message>
  <message>
    <ts>2017-07-06T16:52:10.213078</ts>
    <user>U5LPUJ7AP</user>
    <text>hi, just a quick question, how do you do comment blocks? do you just put a string inside (comment)?</text>
  </message>
  <message>
    <ts>2017-07-06T16:52:38.227553</ts>
    <user>U0QKTTY4D</user>
    <text>&lt;@U07TDTQNL&gt; i see... well, i'm a student trying to build a portfolio, so this seems like an interesting area that clojure could improve on... do you know if javafx is popular in the java world?</text>
  </message>
  <message>
    <ts>2017-07-06T16:52:40.228309</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U5LPUJ7AP&gt; #_(this block is commented)</text>
  </message>
  <message>
    <ts>2017-07-06T16:54:21.281534</ts>
    <user>U5LPUJ7AP</user>
    <text>ok, i see, thanks!</text>
  </message>
  <message>
    <ts>2017-07-06T16:54:25.283530</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U0QKTTY4D&gt; there aren't a lot of Java desktop apps, but JavaFX is a really nice platform. It's fast, GPU accelerated, and the API is *very* uniform. Infact the vast majority of fn-fx is auto-generated code created by the library introspecting on the JavaFX API.</text>
  </message>
  <message>
    <ts>2017-07-06T16:58:14.401070</ts>
    <user>U0QKTTY4D</user>
    <text>&lt;@U07TDTQNL&gt; sounds interesting, i'll check it out! thanks</text>
  </message>
  <message>
    <ts>2017-07-06T17:13:08.845020</ts>
    <user>U11BV7MTK</user>
    <text>&lt;@U5LPUJ7AP&gt; "comment block" is a little ambiguous. do you just want a block of comment text (like a multiline comment) or do you want to comment one or more sexp's?</text>
  </message>
  <message>
    <ts>2017-07-06T17:14:03.869705</ts>
    <user>U050MP39D</user>
    <text>&lt;@U4VDXB2TU&gt; without going too far into it, your `filter` example is lazy and your transducer example isn't, and you're only taking the first result. so the comparisons are going to be a bit meaningless</text>
  </message>
  <message>
    <ts>2017-07-06T17:14:12.873765</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U4VDXB2TU&gt; are you sure of your measurements? The above benchmark code looks very questionable</text>
  </message>
  <message>
    <ts>2017-07-06T17:15:09.899749</ts>
    <user>U050MP39D</user>
    <text>also without showing what `year-dirs-only-xf` is defined as we can only really guess as to what's happening</text>
  </message>
  <message>
    <ts>2017-07-06T17:16:17.930242</ts>
    <user>U5LPUJ7AP</user>
    <text>&lt;@U11BV7MTK&gt; yes, most of my project is commented like that but it's a little bit of a pain</text>
  </message>
  <message>
    <ts>2017-07-06T17:16:27.934503</ts>
    <user>U11BV7MTK</user>
    <text>not sure which editor you're in, but most should have some way to format a long single comment</text>
  </message>
  <message>
    <ts>2017-07-06T17:16:33.936859</ts>
    <user>U5LPUJ7AP</user>
    <text>Cursive</text>
  </message>
  <message>
    <ts>2017-07-06T17:16:37.938462</ts>
    <user>U11BV7MTK</user>
    <text>what is the pain point in using the language's comment syntax?</text>
  </message>
  <message>
    <ts>2017-07-06T17:17:03.950193</ts>
    <user>U5LPUJ7AP</user>
    <text>it does not bother me to use it, it bothers me to write ;; all the time when i am writing it</text>
  </message>
  <message>
    <ts>2017-07-06T17:17:47.968940</ts>
    <user>U11BV7MTK</user>
    <text>i'll bet cursive will do it for you</text>
  </message>
  <message>
    <ts>2017-07-06T17:17:59.974198</ts>
    <user>U11BV7MTK</user>
    <text>but if that's what you prefer go for it</text>
  </message>
  <message>
    <ts>2017-07-06T17:18:19.982802</ts>
    <user>U5LPUJ7AP</user>
    <text>i'll try to activate something in cursive for that, because right now it does not</text>
  </message>
  <message>
    <ts>2017-07-06T17:18:27.986394</ts>
    <user>U050MP39D</user>
    <text>&lt;@U4VDXB2TU&gt;: ok then yes it looks like it's pretty much because your latter example is lazy and your format example is not</text>
  </message>
  <message>
    <ts>2017-07-06T17:18:41.992614</ts>
    <user>U4VDXB2TU</user>
    <text>&lt;@U050MP39D&gt; was trying to not spam the channel with too much code. Any easy way to keep the composability of transducers but stay lazy and fast?</text>
  </message>
  <message>
    <ts>2017-07-06T17:18:55.998706</ts>
    <user>U11BV7MTK</user>
    <text>don't enter newlines? i'll bet the autoformatter takes care of it for you</text>
  </message>
  <message>
    <ts>2017-07-06T17:19:42.019797</ts>
    <user>U050MP39D</user>
    <text>if the situation/algorithm benefits from laziness my first instinct is to say "don't use transducers there"</text>
  </message>
  <message>
    <ts>2017-07-06T17:20:50.050852</ts>
    <user>U5LPUJ7AP</user>
    <text>doesn't look like it &lt;@U11BV7MTK&gt; , there's an option to auto-wrap at the 80-columns limit but i don't want that for code, i will ask in the cursive channel</text>
  </message>
  <message>
    <ts>2017-07-06T17:20:52.051614</ts>
    <user>U4VDXB2TU</user>
    <text>&lt;@U050MP39D&gt; is non-laziness inherent for transducers or is it just the way I use them?</text>
  </message>
  <message>
    <ts>2017-07-06T17:21:46.076007</ts>
    <user>U050MP39D</user>
    <text>I believe so, one of the reasons that they're faster (in situations where laziness isn't a benefit) is because they don't have the overhead of keeping track of unrealised computations</text>
  </message>
  <message>
    <ts>2017-07-06T17:22:31.095661</ts>
    <user>U051SS2EU</user>
    <text>it's a lot simpler to enumerate the things that are lazy (there's very few), and sequence is the only built in lazy thing using transducers and I forget the details but saw it explained that sequence was sub-optimal in important was compared to other lazy functions</text>
  </message>
  <message>
    <ts>2017-07-06T17:23:40.125406</ts>
    <user>U051SS2EU</user>
    <text>a transducing function just transforms a single result, so would hardly benefit from laziness, a transducing context can be lazy or not (and sequence is the only lazy built in transducing context)</text>
  </message>
  <message>
    <ts>2017-07-06T17:24:43.152650</ts>
    <user>U4VDXB2TU</user>
    <text>&lt;@U050MP39D&gt; &lt;@U051SS2EU&gt; thanks, I will go back and meditate some more on transducers and laziness…</text>
  </message>
  <message>
    <ts>2017-07-06T17:36:44.461817</ts>
    <user>U066TMAKS</user>
    <text>is there a way to access the value of the default ring memory store atom from the repl?</text>
  </message>
  <message>
    <ts>2017-07-06T17:51:49.827545</ts>
    <user>U46LFMYTD</user>
    <text>```
(* 3 (/ 1 3))
=&amp;gt; 1N
```
I am confused why I would get a BigInt here</text>
  </message>
  <message>
    <ts>2017-07-06T17:52:44.848289</ts>
    <user>U46LFMYTD</user>
    <text>is there a design choice which made the return value a BigInt and not an Int?</text>
  </message>
  <message>
    <ts>2017-07-06T17:56:21.932252</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U46LFMYTD&gt; ```user=&amp;gt; (type (/ 1 3))
clojure.lang.Ratio```</text>
  </message>
  <message>
    <ts>2017-07-06T17:56:46.942378</ts>
    <user>U1LCB75M2</user>
    <text>and `Ratio`  is defined in terms of `BigInt` &lt;https://github.com/clojure/clojure/blob/f572a60262852af68cdb561784a517143a5847cf/src/jvm/clojure/lang/Ratio.java#L23&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T17:58:05.972746</ts>
    <user>U46LFMYTD</user>
    <text>ah ok, thank you</text>
  </message>
  <message>
    <ts>2017-07-06T18:18:15.401761</ts>
    <user>U2FBZ33M3</user>
    <text>&lt;@U5LPUJ7AP&gt; ```#_(this s-exp will be entirely ignored)``` ?</text>
  </message>
  <message>
    <ts>2017-07-06T18:19:03.417305</ts>
    <user>U5LPUJ7AP</user>
    <text>&lt;@U2FBZ33M3&gt; yes, someone told me about that macro, thanks anyway</text>
  </message>
  <message>
    <ts>2017-07-06T18:20:43.449833</ts>
    <user>U2FBZ33M3</user>
    <text>Didn't realise where my scrollbar was at the time, too early :wink:</text>
  </message>
  <message>
    <ts>2017-07-06T19:14:47.410139</ts>
    <user>U1YTUBH53</user>
    <text>Any book (or blog) recommendation, specifically for clojure concurrency?
I've spent some time today wrangling atoms, agents, `add-watch` and promises, for managing a work queue. It has been a nice drill. I'm undecided what's the best queue management technique and might suspect clojure.async or even some Java implementation might be more performant/safe.</text>
  </message>
  <message>
    <ts>2017-07-06T19:14:58.413801</ts>
    <user>U1YTUBH53</user>
    <text>Maybe someone's written a book I'm not seeing about that?</text>
  </message>
  <message>
    <ts>2017-07-06T19:15:02.414960</ts>
    <user>U1YTUBH53</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-06T19:21:04.514337</ts>
    <user>U5JEJN1CP</user>
    <text>&lt;@U2MPUENUC&gt; Thanks.  That second did the trick.</text>
  </message>
  <message>
    <ts>2017-07-06T19:35:10.722938</ts>
    <user>U0EL66M19</user>
    <text>one of these two expressions looks wrong to me:
```user&amp;gt;  (* 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001M 1.0)
2.0
user&amp;gt;  (* 2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001M 1.0M)
2.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010M
```</text>
  </message>
  <message>
    <ts>2017-07-06T19:37:37.758687</ts>
    <user>U0EL66M19</user>
    <text>are bigdecimals special in being coerced to a less precise type in `*` ?</text>
  </message>
  <message>
    <ts>2017-07-06T19:44:23.854741</ts>
    <user>U0NCTKEV8</user>
    <text>```
user=&amp;gt; (.doubleValue (BigDecimal. "2.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"))
2.0
user=&amp;gt; 
```</text>
  </message>
  <message>
    <ts>2017-07-06T19:45:44.873778</ts>
    <user>U0NCTKEV8</user>
    <text>basically, fixed precision floating point numbers are dirty and their dirtiness will contaminate any math they are used in</text>
  </message>
  <message>
    <ts>2017-07-06T19:46:45.888013</ts>
    <user>U0NCTKEV8</user>
    <text>1.0 in that expression is a fixed precision float (a jvm double), and that is what causes weirdness</text>
  </message>
  <message>
    <ts>2017-07-06T19:49:38.930057</ts>
    <user>U0NCTKEV8</user>
    <text>clojure, encoded as a big honking class file, has rules about how you convert types to do math operations, and doubles as a type dominate pretty much everything, meaning if you have doubles in your expression, internally numbers that are not doubles are going to be turned in to doubles when doing math</text>
  </message>
  <message>
    <ts>2017-07-06T19:59:13.065131</ts>
    <user>U0EL66M19</user>
    <text>so long as it's done on purpose i guess</text>
  </message>
  <message>
    <ts>2017-07-06T21:51:25.444023</ts>
    <user>U5JEJN1CP</user>
    <text>Is there a known issue between com.datomic/clj-client, figwheel, and clojure-1.9.0 ?  I cannot get them to compile together. Trying to start a repl gives a spec error:
```
Exception in thread "main" java.lang.ExceptionInInitializerError
	at clojure.main.&amp;lt;clinit&amp;gt;(main.java:20)
Caused by: clojure.lang.ExceptionInfo: Call to clojure.core/refer-clojure did not conform to spec:
In: [2 1] val: :as fails at: [:args :exclude :op :quoted-spec :spec] predicate: #{:exclude}
In: [2 1] val: :as fails at: [:args :only :op :quoted-spec :spec] predicate: #{:only}
In: [2 1] val: :as fails at: [:args :rename :op :quoted-spec :spec] predicate: #{:rename}
In: [2] val: (quote :as) fails at: [:args :exclude :op :spec] predicate: #{:exclude}
In: [2] val: (quote :as) fails at: [:args :only :op :spec] predicate: #{:only}
In: [2] val: (quote :as) fails at: [:args :rename :op :spec] predicate: #{:rename}
:clojure.spec.alpha/spec  #object[clojure.spec.alpha$regex_spec_impl$reify__1200 0x43f50bfe "clojure.spec.alpha$regex_spec_impl$reify__1200@43f50bfe"]
:clojure.spec.alpha/value  ((quote :exclude) (quote [reduce transduce into merge map take partition partition-by bounded-count]) (quote :as) (quote core))
:clojure.spec.alpha/args  ((quote :exclude) (quote [reduce transduce into merge map take partition partition-by bounded-count]) (quote :as) (quote core))
 {:clojure.spec.alpha/problems ({:path [:args :exclude :op :spec], :pred #{:exclude}, :val (quote :as), :via [], :in [2]} {:path [:args :exclude :op :quoted-spec :spec], :pred #{:exclude}, :val :as, :via [], :in [2 1]} {:path [:args :only :op :spec], :pred #{:only}, :val (quote :as), :via [], :in [2]} {:path [:args :only :op :quoted-spec :spec], :pred #{:only}, :val :as, :via [], :in [2 1]} {:path [:args :rename :op :spec], :pred #{:rename}, :val (quote :as), :via [], :in [2]} {:path [:args :rename :op :quoted-spec :spec], :pred #{:rename}, :val :as, :via [], :in [2 1]}), :clojure.spec.alpha/spec #object[clojure.spec.alpha$regex_spec_impl$reify__1200 0x43f50bfe "clojure.spec.alpha$regex_spec_impl$reify__1200@43f50bfe"], :clojure.spec.alpha/value ((quote :exclude) (quote [reduce transduce into merge map take partition partition-by bounded-count]) (quote :as) (quote core)), :clojure.spec.alpha/args ((quote :exclude) (quote [reduce transduce into merge map take partition partition-by bounded-count]) (quote :as) (quote core))}, compiling:(clojure/core/async.clj:9:1)
```
The stack trace lists a few references to figwheel_sidecar, otherwise it's all clojure.lang and clojure.core.

If I switch to clojure 1.8.0 or remove com.datomic/clj-client, then everything compiles fine.  But that combination of clj-client and clojure 1.9.0 keeps throwing this error.  Any ideas what might be causing it?</text>
  </message>
  <message>
    <ts>2017-07-06T22:15:08.717671</ts>
    <user>U051SS2EU</user>
    <text>1.9 enforces things that are silently accepted by older versions</text>
  </message>
  <message>
    <ts>2017-07-06T22:15:15.718988</ts>
    <user>U051SS2EU</user>
    <text>are you using the newest figwheel?</text>
  </message>
  <message>
    <ts>2017-07-06T22:21:27.785898</ts>
    <user>U5JEJN1CP</user>
    <text>I think so, 0.5.11</text>
  </message>
  <message>
    <ts>2017-07-06T22:21:40.788255</ts>
    <user>U5JEJN1CP</user>
    <text>It's listed as the newest on clojars</text>
  </message>
  <message>
    <ts>2017-07-06T22:22:41.798743</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5JEJN1CP&gt; &lt;https://github.com/bhauman/lein-figwheel/issues/540&gt;</text>
  </message>
  <message>
    <ts>2017-07-06T22:22:52.800594</ts>
    <user>U051SS2EU</user>
    <text>there's a snapshot figwheel that eliminates the issue</text>
  </message>
  <message>
    <ts>2017-07-06T22:25:22.827818</ts>
    <user>U5JEJN1CP</user>
    <text>Nope.  Still get the error.  It does seem to be the same error though.</text>
  </message>
  <message>
    <ts>2017-07-06T22:25:35.830131</ts>
    <user>U5JEJN1CP</user>
    <text>It really seems weird that adding datomic/clj-client introduces the error (and removing it resolves it), but the stack trace mentions figwheel.</text>
  </message>
  <message>
    <ts>2017-07-06T22:30:20.880013</ts>
    <user>U5JEJN1CP</user>
    <text>It does work with clojure-1.9.0-alpha15 though, but not alpha16 or 17</text>
  </message>
  <message>
    <ts>2017-07-06T22:32:03.899533</ts>
    <user>U5JEJN1CP</user>
    <text>I suppose for the moment that's my workaround, to use alpha15 instead.</text>
  </message>
  <message>
    <ts>2017-07-06T22:34:53.930786</ts>
    <user>U5JEJN1CP</user>
    <text>Bah, I spoke too soon.  datomic/clj wasn't included.  Still doesn't work with the client library at all.  I guess I'll have to give up trying out spec altogether for now.</text>
  </message>
  <message>
    <ts>2017-07-06T22:36:53.952459</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U5JEJN1CP&gt; according to that issue " you can upgrade figwheel to 0.5.10-SNAPSHOT or greater. "</text>
  </message>
  <message>
    <ts>2017-07-06T22:37:20.957271</ts>
    <user>U5JEJN1CP</user>
    <text>Yeah, I was using 0.5.11.  Tried the snapshot too.  They both don't work.</text>
  </message>
  <message>
    <ts>2017-07-06T22:37:34.959914</ts>
    <user>U5JEJN1CP</user>
    <text>They work if I'm not trying to use datomic</text>
  </message>
  <message>
    <ts>2017-07-06T22:37:39.960762</ts>
    <user>U04V70XH6</user>
    <text>And if datomic/clj-client is causing the problem, add an exclusion on org.clojure/core.async on that dependency</text>
  </message>
  <message>
    <ts>2017-07-06T22:42:53.015497</ts>
    <user>U5JEJN1CP</user>
    <text>Adding the exclusion seems to work.</text>
  </message>
  <message>
    <ts>2017-07-06T22:45:35.044266</ts>
    <user>U04V70XH6</user>
    <text>I'm surprised there isn't a more recent datomic/clj-client with an up-to-date core.async dependency that works cleanly on Clojure 1.9 Alpha 17.</text>
  </message>
  <message>
    <ts>2017-07-06T22:45:51.046936</ts>
    <user>U04V70XH6</user>
    <text>FWIW, we have Clojure 1.9 Alpha 17 in production -- spec is awesome!</text>
  </message>
  <message>
    <ts>2017-07-06T22:46:20.051741</ts>
    <user>U5JEJN1CP</user>
    <text>Yeah, it looks really neat.  I'm looking forward to trying it.  Thanks for the help.</text>
  </message>
  <message>
    <ts>2017-07-07T05:05:47.115985</ts>
    <user>U06B8J0AJ</user>
    <text>There must be a nicer way to write this `(-&amp;gt; csv-rows (nth 7) (#(drop 10 %)))`</text>
  </message>
  <message>
    <ts>2017-07-07T05:09:39.199800</ts>
    <user>U06B8J0AJ</user>
    <text>Is `(as-&amp;gt; csv-rows tmp (nth tmp 7) (drop 10 tmp))` optimal? Or is there a better way?</text>
  </message>
  <message>
    <ts>2017-07-07T05:11:16.235343</ts>
    <user>U5XMV6DQT</user>
    <text>```(-&amp;gt; csv-rows (nth 7) (nthnext 10))```, if I got it right</text>
  </message>
  <message>
    <ts>2017-07-07T05:13:01.272995</ts>
    <user>U067BPAB1</user>
    <text>What exactly are you trying to do there, &lt;@U06B8J0AJ&gt;?</text>
  </message>
  <message>
    <ts>2017-07-07T05:13:49.290420</ts>
    <user>U06B8J0AJ</user>
    <text>&lt;@U067BPAB1&gt; Take the 7th row in a two-dimensional vector, drop the 10 first items in that row.</text>
  </message>
  <message>
    <ts>2017-07-07T05:13:51.291116</ts>
    <user>U5XMV6DQT</user>
    <text>nthnext version is shorter :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-07T05:19:34.416716</ts>
    <user>U06B8J0AJ</user>
    <text>&lt;@U5XMV6DQT&gt; A superior editor, I know. I'll sit down and learn it when I become a real developer.</text>
  </message>
  <message>
    <ts>2017-07-07T05:19:54.424047</ts>
    <user>U067BPAB1</user>
    <text>&lt;@U06B8J0AJ&gt; Just use Cursive. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-07T05:21:13.454175</ts>
    <user>U5XMV6DQT</user>
    <text>„And thus the peace was broken once more."</text>
  </message>
  <message>
    <ts>2017-07-07T05:23:04.495169</ts>
    <user>U06B8J0AJ</user>
    <text>Cursive and Emacs are roughly at the same level of approachability for me. I'll pick a proper editor to learn when The Guild of Real Developers write my name into their books.</text>
  </message>
  <message>
    <ts>2017-07-07T05:24:30.526209</ts>
    <user>U06B8J0AJ</user>
    <text>I briefly used Atom and Proto repl. Went back to Sublime when I couldn't figure out a way to automatically clean up indentations/spaces in a document in Atom.</text>
  </message>
  <message>
    <ts>2017-07-07T05:25:01.538078</ts>
    <user>U06B8J0AJ</user>
    <text>I.e., ctrl+i from LispIndent.</text>
  </message>
  <message>
    <ts>2017-07-07T05:25:04.539110</ts>
    <user>U5XMV6DQT</user>
    <text>Cursive is nice, the only thing is I don't like to use multiple editors, and since Clojure isn't the only language I use, Emacs is my editor of choice :slightly_smiling_face:
Also, Emacs is written in lisp, so it's pretty simple to hack it yourself.</text>
  </message>
  <message>
    <ts>2017-07-07T05:44:11.960607</ts>
    <user>U067BPAB1</user>
    <text>That's the thing, because Cursive is just a plugin for IntelliJ IDEA you install that plus whatever other plugins you need and you have a single environment for everything.</text>
  </message>
  <message>
    <ts>2017-07-07T05:44:52.975277</ts>
    <user>U067BPAB1</user>
    <text>After years of Vimming this plus IdeaVim just works for me, and I don't have to learn a whole new operating system to write text files. :wink:</text>
  </message>
  <message>
    <ts>2017-07-07T05:46:58.020851</ts>
    <user>U067BPAB1</user>
    <text>Of course, tongue half in cheek. Everyone use what they are comfortable with, but unless someone is strongly entrenched in the Emacs ecosystem I think he/she would be better off just using Cursive. Plus it earns &lt;@U0567Q30W&gt; some dough for the great effort he put in when said person then proceeds to write Clojure commercially and decides to stick with Cursive (and hence will need a commercial license)!</text>
  </message>
  <message>
    <ts>2017-07-07T06:34:57.992210</ts>
    <user>U0567Q30W</user>
    <text>Thanks &lt;@U067BPAB1&gt;! I appreciate it.</text>
  </message>
  <message>
    <ts>2017-07-07T08:11:28.731830</ts>
    <user>U1DLD0WNR</user>
    <text>Is anyone still using Light Table? I'm unsure of it's current status. I've tried emacs a few times but didn't put as much effort into it than when I learned vim a few years ago. Light Table + vim mode works well for me...</text>
  </message>
  <message>
    <ts>2017-07-07T08:29:38.106860</ts>
    <user>U09LZR36F</user>
    <text>&lt;@U1DLD0WNR&gt; afaik, LightTable is abandoned. But that might be incorrect.</text>
  </message>
  <message>
    <ts>2017-07-07T08:29:59.114412</ts>
    <user>U09LZR36F</user>
    <text>Vim &amp;amp; Clojure work well together. Whole community of us in &lt;#C0DF8R51A|vim-fireplace&gt;, I've written some blogs which I'm happy to share if you're interested.</text>
  </message>
  <message>
    <ts>2017-07-07T08:31:07.140038</ts>
    <user>U2MPUENUC</user>
    <text>&lt;https://github.com/LightTable/LightTable/commit/5db6b70f8a4fec3e4806d9d062d95d15fc7a4b36&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T08:31:47.154819</ts>
    <user>U2MPUENUC</user>
    <text>mluisbrown committed with sbauer322 on 29 May 2016</text>
  </message>
  <message>
    <ts>2017-07-07T08:32:15.165102</ts>
    <user>U5XMV6DQT</user>
    <text>&amp;gt; Light Table + vim mode works well for me...
JFYI spacemacs uses evil-mode (vim emulation layer) by default</text>
  </message>
  <message>
    <ts>2017-07-07T08:32:31.170860</ts>
    <user>U5XMV6DQT</user>
    <text>it also has a preconfigured layer for clojure</text>
  </message>
  <message>
    <ts>2017-07-07T08:33:19.187725</ts>
    <user>U5ZAJ15P0</user>
    <text>I just started using proto-repl for atom and it's *amazing* so far</text>
  </message>
  <message>
    <ts>2017-07-07T08:34:01.202598</ts>
    <user>U2MPUENUC</user>
    <text>actually there are newer commits to LightTable</text>
  </message>
  <message>
    <ts>2017-07-07T08:34:48.218880</ts>
    <user>U1DLD0WNR</user>
    <text>At first I though I'd just "learn emacs" and then move to spacemacs, but the more I procrastinate the more I think I'll just go straight into spacemacs soon.</text>
  </message>
  <message>
    <ts>2017-07-07T08:36:08.247488</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U1DLD0WNR&gt; have you tried atom + proto-repl?</text>
  </message>
  <message>
    <ts>2017-07-07T08:36:34.256536</ts>
    <user>U1DLD0WNR</user>
    <text>I've used Cursive for a while, but I don't know why it just doesn't work for me. Also the instalRepl thingy is a killer feature for me.</text>
  </message>
  <message>
    <ts>2017-07-07T08:37:00.266236</ts>
    <user>U1DLD0WNR</user>
    <text>I must admit I haven't try atom + proto-repl, days only have 24 hrs :joy:</text>
  </message>
  <message>
    <ts>2017-07-07T08:39:40.327498</ts>
    <user>U2MPUENUC</user>
    <text>but moving from 0.8.1 is taking a while but .. &lt;http://lighttable.com/blog/&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T08:40:50.353175</ts>
    <user>U1DLD0WNR</user>
    <text>I've read that, that's why I said I was "unsure".</text>
  </message>
  <message>
    <ts>2017-07-07T10:58:58.720705</ts>
    <user>U4PUTN69G</user>
    <text>Does Atom+proto repl have an interactive debugger like cider?  </text>
  </message>
  <message>
    <ts>2017-07-07T11:00:28.779100</ts>
    <user>U4X9H6JUA</user>
    <text>I'm curious about private functions and data in Clojure. As my application has grown, there are now some fairly large (to me at least) maps that hold app state. So I have functions to handle a lot of the manipulation of that state. It seems rather unnatural for me to these large state objects in the global space so I've made them private. However every time I make something private in Clojure I feel like  I'm kinda going against the grain.</text>
  </message>
  <message>
    <ts>2017-07-07T11:01:29.818253</ts>
    <user>U4X9H6JUA</user>
    <text>any thoughts on app design and when to it makes sense to shed some of the old OOP style organization and when to keep some of those features in Clojure?</text>
  </message>
  <message>
    <ts>2017-07-07T11:06:06.993781</ts>
    <user>U0BB79MMJ</user>
    <text>&lt;@U4X9H6JUA&gt; I personally find that having private functions and data is not something that is worth doing, see &lt;http://steve-yegge.blogspot.de/2010/07/wikileaks-to-leak-5000-open-source-java.html&gt; for a (probably mildly satirical :wink: ) overview</text>
  </message>
  <message>
    <ts>2017-07-07T11:07:49.055924</ts>
    <user>U0BB79MMJ</user>
    <text>If it's large maps that you're struggling with, it's usually more helpful to split their handling in a clean way, e.g. with something like cursors in particular or having your functions only operate on well defined subtrees in general</text>
  </message>
  <message>
    <ts>2017-07-07T11:11:51.201012</ts>
    <user>U4X9H6JUA</user>
    <text>well that's only part of the problem. I'm actually more interested in design philiosophy when it comes to ensuring that data is consistently maintained. Spec will help a lot with this however its isn't production ready so I'm not using it. If someone updates app state and fubars an inner struct by removing a necessary key word, or accidentlally replaces a map with a vector, this is all possible when the app-state is available to anyone. THose kinds of concerns have always guided my design choices and its kinda hard to shake those concerns, know what I mena?</text>
  </message>
  <message>
    <ts>2017-07-07T11:12:32.226293</ts>
    <user>U4X9H6JUA</user>
    <text>mena = mean</text>
  </message>
  <message>
    <ts>2017-07-07T11:13:21.255019</ts>
    <user>U0BB79MMJ</user>
    <text>Sure, and I do agree that it's a problem, but making functions private doesn't prevent them from breaking something in your state :wink:</text>
  </message>
  <message>
    <ts>2017-07-07T11:13:37.264799</ts>
    <user>U0BB79MMJ</user>
    <text>You prevent that by limited scope and good tests</text>
  </message>
  <message>
    <ts>2017-07-07T11:23:33.630878</ts>
    <user>U5JUDH2UE</user>
    <text>I'm using clojure.tools.namespace.repl to reload my code and reset my system, however it seems to be caching old code. If I change a testing println, it continues to print the old string.
Even in Cursive's debugger, I'll be ontop of the line to print one thing, and it will print the old thing.
Any ideas?</text>
  </message>
  <message>
    <ts>2017-07-07T11:31:40.930914</ts>
    <user>U09LZR36F</user>
    <text>&lt;@U5JUDH2UE&gt; What is your setup? Do you use `defonce`, component, anything like that? Or is this just with plain ol' functions?

Are you using boot or leiningen?</text>
  </message>
  <message>
    <ts>2017-07-07T11:32:34.965168</ts>
    <user>U5JUDH2UE</user>
    <text>Nope, no `defonce`s or anything.
Actually just tried &lt;https://github.com/weavejester/reloaded.repl&gt; and the same thing happens.</text>
  </message>
  <message>
    <ts>2017-07-07T11:33:20.993185</ts>
    <user>U5JUDH2UE</user>
    <text>&lt;@U09LZR36F&gt; Just adding a println into one of my system constructors, and it seems to hold onto the old function.</text>
  </message>
  <message>
    <ts>2017-07-07T11:36:20.101459</ts>
    <user>U09LZR36F</user>
    <text>Just ftr, records hold onto the old behaviour for `stop`, but the subsequent start should work.</text>
  </message>
  <message>
    <ts>2017-07-07T11:37:28.141931</ts>
    <user>U5JUDH2UE</user>
    <text>Hmm, good to know.
I think I've gotten it to work.
Instead of passing a function into `reloaded.repl/set-init!`, I passed an anonymous function, and that causes it to update.</text>
  </message>
  <message>
    <ts>2017-07-07T11:37:41.150102</ts>
    <user>U5JUDH2UE</user>
    <text>Kinda strange, but oh well.</text>
  </message>
  <message>
    <ts>2017-07-07T11:37:41.150113</ts>
    <user>U09LZR36F</user>
    <text>that's odd :thinking_face:</text>
  </message>
  <message>
    <ts>2017-07-07T11:37:53.157418</ts>
    <user>U09LZR36F</user>
    <text>Oh, maybe it isn't.</text>
  </message>
  <message>
    <ts>2017-07-07T11:38:09.166389</ts>
    <user>U09LZR36F</user>
    <text>How did you require the function you were passing to reloaded.repl/set-init?</text>
  </message>
  <message>
    <ts>2017-07-07T11:38:18.172625</ts>
    <user>U5JUDH2UE</user>
    <text>The function was originally in a (ns user) with a (disable-reload!) maybe/</text>
  </message>
  <message>
    <ts>2017-07-07T11:38:29.178824</ts>
    <user>U5JUDH2UE</user>
    <text>It was in the same namespace.</text>
  </message>
  <message>
    <ts>2017-07-07T11:40:57.267580</ts>
    <user>U5JUDH2UE</user>
    <text>Yeah, seems to work for the deeper more confusing methods now too.
That was confusing.</text>
  </message>
  <message>
    <ts>2017-07-07T11:42:54.336489</ts>
    <user>U09LZR36F</user>
    <text>I'm wondering if you had a missing `(:require)`, that would cause the refresh to not fully work I think</text>
  </message>
  <message>
    <ts>2017-07-07T11:43:27.356241</ts>
    <user>U5JUDH2UE</user>
    <text>No, I don't think so. I'd tried with an alias to my system namespace and fully qualified.</text>
  </message>
  <message>
    <ts>2017-07-07T11:44:03.376486</ts>
    <user>U5JUDH2UE</user>
    <text>Oh well, I'm not too worried about it now. I'm sure I was doing something that's mentioned in the readme.</text>
  </message>
  <message>
    <ts>2017-07-07T11:44:07.379192</ts>
    <user>U09LZR36F</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-07T11:44:12.381369</ts>
    <user>U5JUDH2UE</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-07T12:34:28.067862</ts>
    <user>U0524B4UW</user>
    <text>&lt;@U4X9H6JUA&gt; we've got large state maps client-side in our re-frame app - we've been using prismatic schema to ensure that state is updated consistently during development, though since schema doesn't do efficient delta checks we don't do it in production</text>
  </message>
  <message>
    <ts>2017-07-07T12:41:51.293312</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U4X9H6JUA&gt; quite a few people use spec in production. Most of what's "not finished" in spec is around feature requests, not so much in api changes or bugs.</text>
  </message>
  <message>
    <ts>2017-07-07T12:42:03.299637</ts>
    <user>U4X9H6JUA</user>
    <text>&lt;@U0524B4UW&gt; yea, I'm aware of prismatic schema also. I was kinda more interested in having a discussion about why building apps this way (everything open vs certain things being walled off and only accessible via well defined interfaces).</text>
  </message>
  <message>
    <ts>2017-07-07T12:42:54.325964</ts>
    <user>U4X9H6JUA</user>
    <text>I thought spec was only part of clojure 1.9, no?</text>
  </message>
  <message>
    <ts>2017-07-07T12:43:13.335558</ts>
    <user>U07TDTQNL</user>
    <text>One of the reasons IMO is code bloat, writing all those interfaces will result in simple changes to the data model requiring devs to add new "add-person", "add-contact", etc. interfaces.</text>
  </message>
  <message>
    <ts>2017-07-07T12:43:31.345395</ts>
    <user>U07TDTQNL</user>
    <text>Sure but there's a fair amount of people using 1.9 in production as well :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-07T12:44:07.363316</ts>
    <user>U07TDTQNL</user>
    <text>Clojure is very good about adding new features that don't interfere with previous code. So it's very rare that upgrading to a new "alpha" of clojure will break existing code.</text>
  </message>
  <message>
    <ts>2017-07-07T12:44:16.368021</ts>
    <user>U4X9H6JUA</user>
    <text>maybe I'm just too old school ( or just old! ) I've never used alpha/beta versions of languages in prod</text>
  </message>
  <message>
    <ts>2017-07-07T12:45:05.392913</ts>
    <user>U4X9H6JUA</user>
    <text>so far none of the arguments for having everythng global are convincing to me</text>
  </message>
  <message>
    <ts>2017-07-07T12:45:14.397620</ts>
    <user>U07TDTQNL</user>
    <text>The other problem you'll hit is that Clojure doesn't put any real meaning to the words alpha and beta. Core.async, core.match, etc. have all been in alpha for quite some time, and yet they're used in production a lot and relatively bug-free.</text>
  </message>
  <message>
    <ts>2017-07-07T12:45:15.397701</ts>
    <user>U11BV7MTK</user>
    <text>i don't think that's unreasonable at all</text>
  </message>
  <message>
    <ts>2017-07-07T12:45:58.420199</ts>
    <user>U07TDTQNL</user>
    <text>But about global state, we should talk about it in this way, with a global atom for your app state you have one place to look for the state of your app. You can "go back in time" simply by replacing the state with a previous state (global undo)</text>
  </message>
  <message>
    <ts>2017-07-07T12:46:28.435758</ts>
    <user>U4X9H6JUA</user>
    <text>I guess I am a little more open to libs like core.async</text>
  </message>
  <message>
    <ts>2017-07-07T12:46:30.436454</ts>
    <user>U07TDTQNL</user>
    <text>Debugging is simply a matter of grabbing the state and then using Clojure's normal functions to poke around.</text>
  </message>
  <message>
    <ts>2017-07-07T12:47:36.471689</ts>
    <user>U0524B4UW</user>
    <text>a global *persistent* state, solid consistency checking and a principled model for managing updates beats fragments of state in lots of places, variable consistency management and ad-hoc updates every time for me</text>
  </message>
  <message>
    <ts>2017-07-07T12:48:10.489437</ts>
    <user>U07TDTQNL</user>
    <text>Yeah, it all depends on what sort of state we're discussing</text>
  </message>
  <message>
    <ts>2017-07-07T12:48:56.513643</ts>
    <user>U051SS2EU</user>
    <text>also - global app state as the output of a reduce over an immutable stream of events is a model with a bunch of really nice properties, and is easy to pull of with clojure, with help of tech like datomic and/or kafka</text>
  </message>
  <message>
    <ts>2017-07-07T12:49:31.531375</ts>
    <user>U051SS2EU</user>
    <text>for example: "bug just happened, dump the last N events into transit data so I can replay them in a unit test reproducing the bug"</text>
  </message>
  <message>
    <ts>2017-07-07T12:49:46.539121</ts>
    <user>U051SS2EU</user>
    <text>that saves days of debugging in a microservices type app</text>
  </message>
  <message>
    <ts>2017-07-07T12:51:54.604655</ts>
    <user>U051SS2EU</user>
    <text>or even… "bug happened last week, dump the N events preceding the bug" etc. - so much nicer than reading log files for 3 servers in parallel</text>
  </message>
  <message>
    <ts>2017-07-07T12:52:27.621013</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; do you have good articles/examples of this other than datomic?</text>
  </message>
  <message>
    <ts>2017-07-07T12:54:13.675120</ts>
    <user>U056QFNM5</user>
    <text>hmaurer: This one talks about some of the same ideas:
&lt;https://circleci.com/blog/why-we-use-om-and-why-were-excited-for-om-next/&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T12:54:15.676432</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; I have an open source lib that's still young, working on moving more of my production proprietary app's logic into the open source lib… but it really can just be done as a reduce that calls resset! on an atom, where the input sequence is a lazy infinite sequence of kafka messages (or even rabbitmq or whatever if you want to do your own persisting)</text>
  </message>
  <message>
    <ts>2017-07-07T12:54:31.684588</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U056QFNM5&gt; thank you!</text>
  </message>
  <message>
    <ts>2017-07-07T12:54:45.692241</ts>
    <user>U051SS2EU</user>
    <text>the thing is that the approach is natural enough for clojure that you hardly need a framework</text>
  </message>
  <message>
    <ts>2017-07-07T12:55:20.710910</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; what is the open source lib?</text>
  </message>
  <message>
    <ts>2017-07-07T12:56:09.736532</ts>
    <user>U051SS2EU</user>
    <text>it's very young, but it's ludic (named because the initial metaphor was a game of chess by mail) &lt;https://github.com/noisesmith/ludic&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T12:56:28.746876</ts>
    <user>U5ZAJ15P0</user>
    <text>awesome, thank :slightly_smiling_face: I'll take a look</text>
  </message>
  <message>
    <ts>2017-07-07T12:56:40.753086</ts>
    <user>U051SS2EU</user>
    <text>also useful for dumping and replaying data even outside such a context &lt;https://github.com/noisesmith/poirot&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T12:57:04.765433</ts>
    <user>U5ZAJ15P0</user>
    <text>it seems to me that a lot of the headaches with event sourcing come when you try to have a distributed, async system</text>
  </message>
  <message>
    <ts>2017-07-07T12:57:32.780215</ts>
    <user>U5ZAJ15P0</user>
    <text>but in a single process, as you said, it fits nicely with clojure's model</text>
  </message>
  <message>
    <ts>2017-07-07T12:58:11.800911</ts>
    <user>U051SS2EU</user>
    <text>if you do it right (with deterministic processing) you can replicate state - the trick is that every "decision" needs to be reified as an event sent to the rest of the system</text>
  </message>
  <message>
    <ts>2017-07-07T12:58:30.811654</ts>
    <user>U051SS2EU</user>
    <text>this is the part that ludic is going to flesh out more in the future (still closed source stuff now sadly)</text>
  </message>
  <message>
    <ts>2017-07-07T12:59:11.833411</ts>
    <user>U5ZAJ15P0</user>
    <text>do you use event sourcing in production on any project? (excluding Datomic)?</text>
  </message>
  <message>
    <ts>2017-07-07T12:59:34.846427</ts>
    <user>U051SS2EU</user>
    <text>yes - like I mentioned, this closed source app, which is my day job and a production app</text>
  </message>
  <message>
    <ts>2017-07-07T12:59:51.855708</ts>
    <user>U5ZAJ15P0</user>
    <text>oh, sorry, missed it. Do you use Kafka with that app?</text>
  </message>
  <message>
    <ts>2017-07-07T12:59:52.855975</ts>
    <user>U051SS2EU</user>
    <text>and I mean really every db from postgres to cassandra to mongo is using event sourcing internally</text>
  </message>
  <message>
    <ts>2017-07-07T13:00:10.866713</ts>
    <user>U5ZAJ15P0</user>
    <text>right, yes. By "using event sourcing" I mean as a first-class citizen</text>
  </message>
  <message>
    <ts>2017-07-07T13:00:16.870407</ts>
    <user>U5ZAJ15P0</user>
    <text>not an implementation detail</text>
  </message>
  <message>
    <ts>2017-07-07T13:00:18.871473</ts>
    <user>U051SS2EU</user>
    <text>yes, I use kafka, since it simplifies the persist / replay part (and guarantees ordering which is a huge benefit)</text>
  </message>
  <message>
    <ts>2017-07-07T13:00:19.872118</ts>
    <user>U5ZAJ15P0</user>
    <text>if that makes any sense</text>
  </message>
  <message>
    <ts>2017-07-07T13:00:54.892500</ts>
    <user>U5ZAJ15P0</user>
    <text>Do you use Kafka as your primary datastore (e.g. with infinite retention period)? Or do you store your data elsewhere and only have a retention period of X weeks on kafka?</text>
  </message>
  <message>
    <ts>2017-07-07T13:00:55.893066</ts>
    <user>U051SS2EU</user>
    <text>right, just pointing out for the postgres etc. devs event sourcing is a first class part of their architecture :smile:</text>
  </message>
  <message>
    <ts>2017-07-07T13:01:24.908732</ts>
    <user>U051SS2EU</user>
    <text>for client data we use postgres and mongo - kafka is for system state / messaging</text>
  </message>
  <message>
    <ts>2017-07-07T13:01:50.923054</ts>
    <user>U051SS2EU</user>
    <text>if every server needs to agree about the state of FOO - FOO is managed by events on kafka</text>
  </message>
  <message>
    <ts>2017-07-07T13:02:51.954058</ts>
    <user>U051SS2EU</user>
    <text>I'm also working on a scheme to migrate events off the kafka log into s3, and off of s3 back into the app (via an adaptor compatible with our kafka input…) - but that's in design stage still</text>
  </message>
  <message>
    <ts>2017-07-07T13:03:08.963331</ts>
    <user>U5ZAJ15P0</user>
    <text>so you do use kafka as a datastore? or just as a transient message broker?</text>
  </message>
  <message>
    <ts>2017-07-07T13:03:55.988174</ts>
    <user>U051SS2EU</user>
    <text>message (I don't like the implication of "broker" - for example with a proper broker you can't do rewind/replay and these are trivial with kafka)</text>
  </message>
  <message>
    <ts>2017-07-07T13:04:29.005715</ts>
    <user>U051SS2EU</user>
    <text>where some messages are explicitly stored because they are relevant to some bug or question etc.</text>
  </message>
  <message>
    <ts>2017-07-07T13:40:44.131633</ts>
    <user>U46LFMYTD</user>
    <text>I have a multimethods question. Suppose I am dispatching on the class of two arguments so my dispatch-fn looks like `(fn [x y] [(class x) (class y)])` I can create a method matching against [class-a class-b]. Suppose for a given class-c occuring in the second position I don't care what was in the first position. I want to match on something like [_ class-c]. Is this possible? Otherwise I need to write a number of methods, one for each [class-a class-c] [class-b class-c]  I'm not actually working with classes.</text>
  </message>
  <message>
    <ts>2017-07-07T13:43:21.212835</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U46LFMYTD&gt; why not ```
(fn [x y]
  (let [y-class (class y)]
     (if (contains? magic-classes y-class)
      [:magic y-class]
      [:mundane (class x) y-class]))```</text>
  </message>
  <message>
    <ts>2017-07-07T13:46:43.318332</ts>
    <user>U46LFMYTD</user>
    <text>I think this could work, thanks</text>
  </message>
  <message>
    <ts>2017-07-07T15:01:20.676860</ts>
    <user>U06BQJTHQ</user>
    <text>Hello, is there some library to do http requests using kerberos auth in clojure? We have a couple of servers setup with kerberos SSO (i.e. I do kinit on my notebook and then browser connects without further manual authentication) and I need to execute http requests to these servers from my clojure code. I have found some java examples, but they seem very, very painful 8(</text>
  </message>
  <message>
    <ts>2017-07-07T15:41:55.814262</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U06BQJTHQ&gt; if the Java examples work, I would start w/ it, and just wrap the mess / state management behind a clj fn (instead of rewriting). do you have links for the examples?</text>
  </message>
  <message>
    <ts>2017-07-07T15:43:40.860597</ts>
    <user>U06BQJTHQ</user>
    <text>&lt;@U1LCB75M2&gt; Well, that's my plan (b). I was hoping there's already some nice clojure library to do that…</text>
  </message>
  <message>
    <ts>2017-07-07T15:45:14.901922</ts>
    <user>U1LCB75M2</user>
    <text>these kinds of libraries (just wrappers around Java) seem to be rare. I suspect it's because either it would be 1) too thin 2) it's easy enough to roll your own</text>
  </message>
  <message>
    <ts>2017-07-07T15:46:54.947515</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U06BQJTHQ&gt; here are some examples of Java interop that can be useful -&amp;gt; &lt;https://github.com/life0fun/clojure-idiom/blob/master/java-proxy.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-07T15:47:43.969898</ts>
    <user>U1LCB75M2</user>
    <text>`proxy` in particular is :heart: ... it's easier to program Java in Clojure than in Java IMO</text>
  </message>
  <message>
    <ts>2017-07-07T15:48:41.996102</ts>
    <user>U06BQJTHQ</user>
    <text>Thanks, will check that out.</text>
  </message>
  <message>
    <ts>2017-07-07T16:42:49.451711</ts>
    <user>U63RTB1KR</user>
    <text>The original example on &lt;http://clojuredocs.org|clojuredocs.org&gt; works well, but it is using a map as an input parameter. &lt;https://clojuredocs.org/clojure.core/defmulti&gt; Is it possible to dispatch according to a simple string input value's value?</text>
  </message>
  <message>
    <ts>2017-07-07T16:44:09.485683</ts>
    <user>U11BV7MTK</user>
    <text>ugh sorry. hate when it puts it in the channel *and* the thread</text>
  </message>
  <message>
    <ts>2017-07-07T16:45:20.516817</ts>
    <user>U056QFNM5</user>
    <text>Me too. Happens when commenting on a snippet/image/video, since I think those are considered comments instead of threaded messages. :confused:</text>
  </message>
  <message>
    <ts>2017-07-07T16:46:29.547319</ts>
    <user>U63RTB1KR</user>
    <text>Thx. I'll try to restart</text>
  </message>
  <message>
    <ts>2017-07-07T16:48:37.602649</ts>
    <user>U63RTB1KR</user>
    <text>It works well after the REPL restart. Thank you!</text>
  </message>
  <message>
    <ts>2017-07-07T16:49:19.620775</ts>
    <user>U11BV7MTK</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-07-07T18:20:20.500573</ts>
    <user>U06HHF230</user>
    <text>michaellindon: I'd suggest using the dispatch function you have and just changing the dispatch value to 

`[Object ClassC]`

Remember dispatch values use `isa?` and work across each argument in a vector form.  multimethod hierarchies are underused IMHO.</text>
  </message>
  <message>
    <ts>2017-07-07T20:06:02.784658</ts>
    <user>U0HM5MJ5V</user>
    <text>&lt;@U06BQJTHQ&gt; if you end up having to get lots of data in and out of java beans you might try this: &lt;https://github.com/uwcpdx/bean-dip/&gt;</text>
  </message>
  <message>
    <ts>2017-07-08T05:29:08.148709</ts>
    <user>U0BB79MMJ</user>
    <text>Hi! Can someone give me a hint on how to add error handling to my logic programs? I already asked in &lt;#C0566T2QY|core-logic&gt;, but it's all tumbleweeds and cricket noises there... 
I'd like to receive a little more information than `()` when my program fails to produce a result :slightly_smiling_face:
I was thinking about a fall through case that unifies an error parameter to something meaningful, but I am not sure if that is a good idea or even how to do it well</text>
  </message>
  <message>
    <ts>2017-07-08T11:16:19.577584</ts>
    <user>U65P37N83</user>
    <text>is anyone eager to help me? pretty new to clojure so the question is pretty basic :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T11:17:06.581896</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U65P37N83&gt; I am new to clojure too but that might be even better as I am familiar with some of the beginner's struggles. Shoot :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-08T12:57:10.114159</ts>
    <user>U0E0XL064</user>
    <text>Transit seems to be the way to go for transmitting clj datastructures. 
... but it seems to be work in progress:

&amp;gt; NOTE: Transit is a work in progress and may evolve based on feedback. As a result, while Transit is a great option for transferring data between applications, it should not yet be used for storing data durably over time. This recommendation will change when the specification is complete.

... and it's been over a year since there was a commit</text>
  </message>
  <message>
    <ts>2017-07-08T12:57:58.118622</ts>
    <user>U0E0XL064</user>
    <text>So I wonder: is it stable? Is it still maintained? Is it still wip? ...?</text>
  </message>
  <message>
    <ts>2017-07-08T13:13:18.207542</ts>
    <user>U0J9LVB6G</user>
    <text>What I understand from that warning is that the details of how it encodes edn as json or messagepack is subject to change, so if you save something to disk today, there's no guarantee that you can read it back with a future version of transit. If you want to transmit data, you're good.</text>
  </message>
  <message>
    <ts>2017-07-08T13:15:18.217996</ts>
    <user>U0J9LVB6G</user>
    <text>I wouldn't worry about a lack of commits, that probably just means it's stabilized.</text>
  </message>
  <message>
    <ts>2017-07-08T13:25:31.271903</ts>
    <user>U0E0XL064</user>
    <text>allright, thx.</text>
  </message>
  <message>
    <ts>2017-07-08T14:28:43.603086</ts>
    <user>U0E0XL064</user>
    <text>another transit question: in order to be able to read json data, it seems one has to stringify it first. Here's a function receiving a `POST` request and handling the request (using express/node.js)
```
                                        (-&amp;gt;&amp;gt; req
                                          .-body
                                          (.stringify js/JSON)
                                          (t/read (t/reader :json))
                                          str)
```
It feels a bit weird to have to stringify first, but that's how it's supposed to work? (Or am I missing something?)</text>
  </message>
  <message>
    <ts>2017-07-08T14:59:31.756662</ts>
    <user>U050MP39D</user>
    <text>that seems wrong</text>
  </message>
  <message>
    <ts>2017-07-08T14:59:58.758780</ts>
    <user>U050MP39D</user>
    <text>you're going json-&amp;gt;data-&amp;gt;json-&amp;gt;data there</text>
  </message>
  <message>
    <ts>2017-07-08T15:46:33.983380</ts>
    <user>U0E0XL064</user>
    <text>right... my feeling as well, but how to make it work properly? 
```
                                        (-&amp;gt;&amp;gt; req
                                          .-body
                                          (t/read (t/reader :json)))
```
doesn't work - oh, that last `str` can be omitted, that's just to print it in a readable way.</text>
  </message>
  <message>
    <ts>2017-07-08T15:47:37.988271</ts>
    <user>U0E0XL064</user>
    <text>`transit` does seem to take a json-string, not a json-object, if I'm right.</text>
  </message>
  <message>
    <ts>2017-07-08T16:04:50.073213</ts>
    <user>U08FM7RL1</user>
    <text>So, here's a question I had over in &lt;#C053AK3F9|beginners&gt; about namespace-qualified keywords, if anyone has any thoughts.  Thanks.  &lt;https://clojurians.slack.com/archives/C053AK3F9/p1499543674615216&gt;</text>
  </message>
  <message>
    <ts>2017-07-08T16:05:06.074508</ts>
    <user>U08FM7RL1</user>
    <text>Just wondering where they are "tragically underused" and where/why I should be using them.</text>
  </message>
  <message>
    <ts>2017-07-08T17:00:14.315079</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U050MP39D&gt; found it: express parses json if you add `(.use app (.json body-parser))`. I changed that line to: `(.use app (.text body-parser #js {:type "*/*"}))`. 
(I'll have to refine it a little... having type `*/*` doesn't seem a good idea, but at least, it works now.)</text>
  </message>
  <message>
    <ts>2017-07-08T17:42:58.491044</ts>
    <user>U0GC1C09L</user>
    <text>has anyone had success serving '206 partial content' responses with their favourite clojure http server? i'm trying to serve streamable videos (where 206 responses are required), however &lt;https://github.com/remvee/ring-partial-content/blob/master/src/ring/middleware/partial_content.clj&gt; doesn't seem to respond with an 'Accept-Ranges: bytes' header.</text>
  </message>
  <message>
    <ts>2017-07-08T19:49:47.954143</ts>
    <user>U07QKGF9P</user>
    <text>Is there a decent Clojure HTTP client that mimics browser cookie behavior? Aleph doesn't support cookie stores, it does… something with cookies but there's no docs so it's not clear what — clj-http cookie handling is totally broken if the cookies get set on a redirect request</text>
  </message>
  <message>
    <ts>2017-07-08T19:50:14.955852</ts>
    <user>U07QKGF9P</user>
    <text>I would like to not have to have a headless browser and instrument it with selenium, but that's lookling like an increasingly viable option</text>
  </message>
  <message>
    <ts>2017-07-08T20:38:29.120346</ts>
    <user>U0NCTKEV8</user>
    <text>have you looked at htmlunit? it might be slightly easier to stomach than going full selenium</text>
  </message>
  <message>
    <ts>2017-07-08T20:39:37.124376</ts>
    <user>U0NCTKEV8</user>
    <text>I don't know, but clj-http unit has an option to automatically follow redirects or not, and I wonder if turning it off and handling redirects manually might unbreak the cookie stuff</text>
  </message>
  <message>
    <ts>2017-07-08T21:35:23.316046</ts>
    <user>U07QKGF9P</user>
    <text>I haven't, but that's a good suggestion. clj-http with disabled redirects doesn't fix the problem, unfortunately.</text>
  </message>
  <message>
    <ts>2017-07-08T22:10:21.432393</ts>
    <user>U07QKGF9P</user>
    <text>I wonder what even happens when you have repeat header values — the response headers look like they're just str/str maps</text>
  </message>
  <message>
    <ts>2017-07-08T22:18:12.457141</ts>
    <user>U0NCTKEV8</user>
    <text>the header map in clj-http is actually a special map type for dealing with header name case insensitivity</text>
  </message>
  <message>
    <ts>2017-07-09T00:49:42.913216</ts>
    <user>U0E1BND6Y</user>
    <text>I'm trying to write a  csv file, but the data is truncated when I look at the output file. If I print out the vector that I pass into write-csv I see all of the results, but only part of them make it to the file.</text>
  </message>
  <message>
    <ts>2017-07-09T00:51:16.917694</ts>
    <user>U0E1BND6Y</user>
    <text>I've also tried doubling the data `(into data data)` and that prints the rest of the result as well as some additional lines when it starts gets to the beginning of the original dataset again.</text>
  </message>
  <message>
    <ts>2017-07-09T00:56:38.932473</ts>
    <user>U0E1BND6Y</user>
    <text>Ha! I should write in here more often, it gave me an idea to use `(with-open [writer (io/writer output-file-name)]
        (csv/write-csv writer data))` and it worked!</text>
  </message>
  <message>
    <ts>2017-07-09T06:14:14.863448</ts>
    <user>U5YHNV0EA</user>
    <text>i'm specifying an enviornment var in my project.clj in the :profiles :dev :env map. but when I try to run lein with-profile dev repl, that env variable is not there when using environ.core to load it. is there a piece to this process I'm missing?</text>
  </message>
  <message>
    <ts>2017-07-09T09:46:33.627613</ts>
    <user>U07QKGF9P</user>
    <text>&lt;@U0NCTKEV8&gt; Sorry; yeah — I meant "I'm not sure how this would deal with a header value set twice", which explains why I only see parts of the set cookies :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-09T11:31:10.091002</ts>
    <user>U0QKTTY4D</user>
    <text>i've seen many recommendations to use clojure.spec.alpha, but doesn't that require clojure 1.9? is the alpha stable enough for production or something?</text>
  </message>
  <message>
    <ts>2017-07-09T12:34:31.388828</ts>
    <user>U09LZR36F</user>
    <text>I'm trying to create a java object &amp;amp; getting no matching ctor. Is it possible to show the available ctors somehow?</text>
  </message>
  <message>
    <ts>2017-07-09T12:37:33.403455</ts>
    <user>U060FKQPN</user>
    <text>use `clojure.reflect`</text>
  </message>
  <message>
    <ts>2017-07-09T12:40:42.418569</ts>
    <user>U09LZR36F</user>
    <text>&lt;@U060FKQPN&gt; I'm trying, but not really sure what I'm looking for in there?</text>
  </message>
  <message>
    <ts>2017-07-09T12:41:59.424276</ts>
    <user>U060FKQPN</user>
    <text>e.g. (sorry for the awkard code, wrote it on the repl) ```user=&amp;gt; (-&amp;gt; (cr/type-reflect String) :members (-&amp;gt;&amp;gt; (filter (comp #{'java.lang.String} :name)) (filter (comp #(contains? % :public) :flags)) (map :parameter-types)))
([byte&amp;lt;&amp;gt;] [java.lang.StringBuilder] [int&amp;lt;&amp;gt; int int] [byte&amp;lt;&amp;gt; int int java.nio.charset.Charset] [byte&amp;lt;&amp;gt; java.lang.String] [] [byte&amp;lt;&amp;gt; int] [java.lang.StringBuffer] [byte&amp;lt;&amp;gt; int int java.lang.String] [char&amp;lt;&amp;gt; int int] [char&amp;lt;&amp;gt;] [byte&amp;lt;&amp;gt; int int int] [java.lang.String] [byte&amp;lt;&amp;gt; java.nio.charset.Charset] [byte&amp;lt;&amp;gt; int int])```</text>
  </message>
  <message>
    <ts>2017-07-09T12:42:04.424684</ts>
    <user>U060FKQPN</user>
    <text>to get the public ctors</text>
  </message>
  <message>
    <ts>2017-07-09T12:43:05.429524</ts>
    <user>U060FKQPN</user>
    <text>unless I'm not understanding what you're asking</text>
  </message>
  <message>
    <ts>2017-07-09T12:47:11.449145</ts>
    <user>U09LZR36F</user>
    <text>Hmm, it's non-public. That's... odd right?</text>
  </message>
  <message>
    <ts>2017-07-09T12:48:56.457435</ts>
    <user>U050MP39D</user>
    <text>&lt;@U09LZR36F&gt; in java land that's usually a sign that you're supposed to use a factory method, builder class, or some other way of getting instances of the object</text>
  </message>
  <message>
    <ts>2017-07-09T12:50:59.467801</ts>
    <user>U09LZR36F</user>
    <text>I see :thinking_face: &lt;https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java&gt; so I need to walk the git repo history instead. That sucks.</text>
  </message>
  <message>
    <ts>2017-07-09T12:54:18.483873</ts>
    <user>U050MP39D</user>
    <text>```
 // You can also get the commit for an (abbreviated) SHA
                walk.reset();
                ObjectId id = repository.resolve("38d51408bd");
```</text>
  </message>
  <message>
    <ts>2017-07-09T12:54:22.484212</ts>
    <user>U050MP39D</user>
    <text>^ that doesn't help?</text>
  </message>
  <message>
    <ts>2017-07-09T13:05:15.539925</ts>
    <user>U09LZR36F</user>
    <text>That made me reconsider, I can get the sha from objectid, but it was in a higher class... *sigh*. I hate java.</text>
  </message>
  <message>
    <ts>2017-07-09T13:05:43.542033</ts>
    <user>U09LZR36F</user>
    <text>Oh, nvm, repository.resolve doesn't return a RevCommit, ^^</text>
  </message>
  <message>
    <ts>2017-07-09T13:06:00.543259</ts>
    <user>U09LZR36F</user>
    <text>It's okay, the walker is simpler than expected</text>
  </message>
  <message>
    <ts>2017-07-09T13:09:32.559923</ts>
    <user>U050MP39D</user>
    <text>yeah... this is a pretty good example of "god dammit there's a whole magical DSL around traversing the commits in a repo" rather than the repository just being represented by regular data structures</text>
  </message>
  <message>
    <ts>2017-07-09T13:11:12.567995</ts>
    <user>U050MP39D</user>
    <text>iirc a git repo is DAG of immutable nodes, so would be perfectly representable as a persistent data structure</text>
  </message>
  <message>
    <ts>2017-07-09T15:57:37.367387</ts>
    <user>U0QKTTY4D</user>
    <text>is there a way to have multiple handlers in bidi? i want to use `-&amp;gt;ResourcesMaybe` with a fallback route... something like `[["/" (-&amp;gt;ResourcesMaybe ...)] ["/" index-handler]]`</text>
  </message>
  <message>
    <ts>2017-07-09T18:56:44.197880</ts>
    <user>U0NCTKEV8</user>
    <text>the comment on &lt;https://github.com/juxt/bidi/blob/master/src/bidi/ring.cljc#L110&gt; seems to indicate it would work that way</text>
  </message>
  <message>
    <ts>2017-07-09T18:58:34.206450</ts>
    <user>U0NCTKEV8</user>
    <text>it may depend on you using bidi in a particular way to work</text>
  </message>
  <message>
    <ts>2017-07-09T19:02:25.226982</ts>
    <user>U0NCTKEV8</user>
    <text>the problem is ResourcesMaybe is a handler, not a route, you could make a custom  implementation of whatever bidi calls its routing protocol (I forget, maybe Pattern), that succeeds or fails based on the existence of a resource</text>
  </message>
  <message>
    <ts>2017-07-09T19:26:12.349827</ts>
    <user>U0QKTTY4D</user>
    <text>yeah, i tried making something that wraps handlers, detects if it's a vector, and if so, tries each of the handlers with some</text>
  </message>
  <message>
    <ts>2017-07-09T19:26:32.351555</ts>
    <user>U0QKTTY4D</user>
    <text>i don't see anything in the code to support multiple handlers with fallbacks though</text>
  </message>
  <message>
    <ts>2017-07-09T20:28:07.713200</ts>
    <user>U0NCTKEV8</user>
    <text>thats not what I meant</text>
  </message>
  <message>
    <ts>2017-07-09T20:29:10.720394</ts>
    <user>U0NCTKEV8</user>
    <text>a bidi route is sort of two parts, the routes(the left hand side) which are like a pattern that the url is checked against, and then the handlers (the right hand side) which are returned if the route matches</text>
  </message>
  <message>
    <ts>2017-07-09T20:30:00.726111</ts>
    <user>U0NCTKEV8</user>
    <text>ResourcesMaybe is a handler, so by the time it is running, routing is "done". Routing ran, determined that ResourcesMaybe is the handler to use</text>
  </message>
  <message>
    <ts>2017-07-09T20:30:47.731639</ts>
    <user>U0NCTKEV8</user>
    <text>what you want to do is move the resource existence checking from the right hand side (the handlers) to the left hand side (the routes), so existence of the resource is checked for while routing, not after routing</text>
  </message>
  <message>
    <ts>2017-07-09T20:39:25.788562</ts>
    <user>U0NCTKEV8</user>
    <text>but all that being said, the way I usually solve this problem is by not having it, I put all static resources under a prefix that no other routes start with, so if ResourcesMaybe fails then there isn't anything else to route to</text>
  </message>
  <message>
    <ts>2017-07-09T22:35:02.750802</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0QKTTY4D&gt; Took me a while, experimenting and searching on Bing, but I think this will help you &lt;http://grokbase.com/p/gg/clojure/151d2ffehq/equivalent-of-compojure-resources-in-juxt-bidi&gt;</text>
  </message>
  <message>
    <ts>2017-07-09T23:35:49.274449</ts>
    <user>U0QKTTY4D</user>
    <text>&lt;@U04V70XH6&gt; seems like exactly what i need, thanks!</text>
  </message>
  <message>
    <ts>2017-07-10T04:19:32.792892</ts>
    <user>U60259LCB</user>
    <text>Not sure if I should ask here, i'm using Intellij with cursive, but it seems to be unable to resolve some of my code (like `(db/add-message)`. I have been watching a video by &lt;@U050CBXUZ&gt; and it seems he has the same problem in the screen cast. So I'm assuming it is normal?</text>
  </message>
  <message>
    <ts>2017-07-10T05:57:32.032430</ts>
    <user>U0567Q30W</user>
    <text>&lt;@U60259LCB&gt; There's a &lt;#C0744GXCJ|cursive&gt; channel, probably best to ask over there.</text>
  </message>
  <message>
    <ts>2017-07-10T05:58:21.051079</ts>
    <user>U60259LCB</user>
    <text>&lt;@U0567Q30W&gt; will do, thanks</text>
  </message>
  <message>
    <ts>2017-07-10T08:37:50.174117</ts>
    <user>U0CKDHF4L</user>
    <text>is there a spec for spec ?</text>
  </message>
  <message>
    <ts>2017-07-10T08:38:52.199159</ts>
    <user>U050SC7SV</user>
    <text>&lt;@U0CKDHF4L&gt; there's a jira for spec for spec</text>
  </message>
  <message>
    <ts>2017-07-10T10:35:51.032480</ts>
    <user>U4WQHR2DC</user>
    <text>Hey I'm pretty new to clojure and the whole java ecosystem and I'm having some issues using this slack clojar. It's been telling me that it can't locate `clj_slack__init.class` or `clj_slack.clj` on the classpath. I declared the dep in my project.clj file and I checked that it was installed with `lein deps :tree`… so at this point I'm lost</text>
  </message>
  <message>
    <ts>2017-07-10T10:39:43.182915</ts>
    <user>U5XMV6DQT</user>
    <text>who's been telling you and who can't locate? :slightly_smiling_face:
Also: &lt;#C053AK3F9|beginners&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T10:40:06.197721</ts>
    <user>U4WQHR2DC</user>
    <text>:0 I didn't even know that existed. thanks</text>
  </message>
  <message>
    <ts>2017-07-10T10:40:19.206553</ts>
    <user>U4WQHR2DC</user>
    <text>and `lein run` and… java I think</text>
  </message>
  <message>
    <ts>2017-07-10T10:41:17.244595</ts>
    <user>U4WQHR2DC</user>
    <text>```
(ns thing.core
  (:gen-class))

(require 'clj-slack)
```</text>
  </message>
  <message>
    <ts>2017-07-10T10:42:27.290205</ts>
    <user>U5XMV6DQT</user>
    <text>require should be :require inside ns declaration</text>
  </message>
  <message>
    <ts>2017-07-10T10:43:56.348403</ts>
    <user>U4WQHR2DC</user>
    <text>same issue</text>
  </message>
  <message>
    <ts>2017-07-10T10:48:07.511877</ts>
    <user>U050MP39D</user>
    <text>&lt;@U4WQHR2DC&gt; the clj-slack library does not seem to have a namespace `clj-slack`, so you can't require it</text>
  </message>
  <message>
    <ts>2017-07-10T10:48:16.518116</ts>
    <user>U050MP39D</user>
    <text>I see `clj-slack.users` etc</text>
  </message>
  <message>
    <ts>2017-07-10T10:48:34.530421</ts>
    <user>U06F82LES</user>
    <text>should it be clj-slack.core ? &lt;https://github.com/julienXX/clj-slack/blob/master/src/clj_slack/core.clj#L1&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T11:16:43.654941</ts>
    <user>U65NWMNN5</user>
    <text>I would like to create a registration form with ```ClojureScript``` using ```React-Native``` (and ```Reagent``` thereafter). And I would like to include the different components with MaterialDesign, and I do not know how to do it. Do you have any suggestions? I have already found on the Internet, but I did not have much.                  I just want to create a simple registration form, using `ClojureScript` `MaterialDesign` `ReactNative`.</text>
  </message>
  <message>
    <ts>2017-07-10T11:17:28.684256</ts>
    <user>U65NWMNN5</user>
    <text>Thanks in advance for your feedback.</text>
  </message>
  <message>
    <ts>2017-07-10T11:26:16.036166</ts>
    <user>U65NWMNN5</user>
    <text>Name

```Your Name```

Email

```Your Email```

Password

```Enter your password```

`Send`    `Cancel`</text>
  </message>
  <message>
    <ts>2017-07-10T14:31:53.715321</ts>
    <user>U3QUAHZJ6</user>
    <text>hello everyone, im trying to figure out uncessary dependencies on my project (im using lein)

searching the webs ive found `lein deps :tree` but its output is quite large and im not sure where exactly to look</text>
  </message>
  <message>
    <ts>2017-07-10T14:32:04.721808</ts>
    <user>U3QUAHZJ6</user>
    <text>does anyone has any suggestion?</text>
  </message>
  <message>
    <ts>2017-07-10T14:34:15.798304</ts>
    <user>U050MP39D</user>
    <text>so I have a project, which has :aot :all in the :uberjar profile (in this scenario compiling at runtime was significant, trust me, I measured) but I'd prefer not to have that accidentally interfere with dev if a dev creates an uberjar on their machine. is there any way to either have leiningen delete the .class files after the uberjar is created, or exclude target/classes from the classpath?</text>
  </message>
  <message>
    <ts>2017-07-10T14:45:00.169996</ts>
    <user>U087U9YG3</user>
    <text>I'm a little bit confused — ^bytes is supposed to be a valid type hint and I'm supposed to be able to type hint the return value of a function by hinting the function name, right?</text>
  </message>
  <message>
    <ts>2017-07-10T14:45:40.193489</ts>
    <user>U087U9YG3</user>
    <text>but if I do</text>
  </message>
  <message>
    <ts>2017-07-10T14:45:56.203019</ts>
    <user>U087U9YG3</user>
    <text>```(defn ^bytes foo-bytes []
  (.getBytes "foo"))

(defn foo-string []
  (String. (foo-bytes)))```</text>
  </message>
  <message>
    <ts>2017-07-10T14:46:01.205726</ts>
    <user>U050MP39D</user>
    <text>&lt;@U087U9YG3&gt; I didn't know ^bytes was a valid type hint. I've been using ^"[B"</text>
  </message>
  <message>
    <ts>2017-07-10T14:46:05.208119</ts>
    <user>U087U9YG3</user>
    <text>I get an error</text>
  </message>
  <message>
    <ts>2017-07-10T14:46:17.215529</ts>
    <user>U087U9YG3</user>
    <text>I can use it on arguments and it works fine</text>
  </message>
  <message>
    <ts>2017-07-10T14:46:44.231254</ts>
    <user>U087U9YG3</user>
    <text>```(defn string-from-bytes [^bytes b]
  (String. b))```</text>
  </message>
  <message>
    <ts>2017-07-10T14:46:47.233083</ts>
    <user>U087U9YG3</user>
    <text>gives me no problem</text>
  </message>
  <message>
    <ts>2017-07-10T14:46:59.240312</ts>
    <user>U087U9YG3</user>
    <text>it seems odd that I can use it to hint arguments but not return type</text>
  </message>
  <message>
    <ts>2017-07-10T14:47:29.257769</ts>
    <user>U087U9YG3</user>
    <text>&lt;@U050MP39D&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T14:47:45.267196</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U087U9YG3&gt; don't type hint the var name</text>
  </message>
  <message>
    <ts>2017-07-10T14:47:46.267615</ts>
    <user>U087U9YG3</user>
    <text>maybe create an alias that creates an uberjar outside the target folder, then runs lein clean?</text>
  </message>
  <message>
    <ts>2017-07-10T14:47:50.270465</ts>
    <user>U060FKQPN</user>
    <text>type hint the argvec</text>
  </message>
  <message>
    <ts>2017-07-10T14:48:42.300432</ts>
    <user>U087U9YG3</user>
    <text>&lt;@U060FKQPN&gt; cool, thanks, that works</text>
  </message>
  <message>
    <ts>2017-07-10T14:48:47.302928</ts>
    <user>U087U9YG3</user>
    <text>how come type-hinting the name sometimes works?</text>
  </message>
  <message>
    <ts>2017-07-10T14:49:00.310467</ts>
    <user>U060FKQPN</user>
    <text>type hints on the var name don't work in case of primitive/"special" type hints</text>
  </message>
  <message>
    <ts>2017-07-10T14:49:03.312346</ts>
    <user>U060FKQPN</user>
    <text>because they get resolved</text>
  </message>
  <message>
    <ts>2017-07-10T14:49:15.319234</ts>
    <user>U060FKQPN</user>
    <text>so you're type hinting using the `bytes` function rather than the bytes type</text>
  </message>
  <message>
    <ts>2017-07-10T14:49:28.326645</ts>
    <user>U087U9YG3</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-10T14:50:45.371470</ts>
    <user>U060FKQPN</user>
    <text>there's a number of other pitfails when you type hint no the var name</text>
  </message>
  <message>
    <ts>2017-07-10T14:50:57.379061</ts>
    <user>U060FKQPN</user>
    <text>everything that you acn express by type hinting on the var name you can express by type hinting on the argvec, and more</text>
  </message>
  <message>
    <ts>2017-07-10T14:51:07.384936</ts>
    <user>U060FKQPN</user>
    <text>so I always suggest to only type hint on the argvec</text>
  </message>
  <message>
    <ts>2017-07-10T14:51:23.394677</ts>
    <user>U060FKQPN</user>
    <text>and avoid having to know about the edge cases</text>
  </message>
  <message>
    <ts>2017-07-10T14:51:29.398042</ts>
    <user>U087U9YG3</user>
    <text>…would it make sense to print a deprecation warning when type hinting the var-name for a release or two, and then disallow it?</text>
  </message>
  <message>
    <ts>2017-07-10T14:51:37.402781</ts>
    <user>U064X3EF3</user>
    <text>var meta is resolved, meta on args and argvec is not and the "special" hints can be used in those locations</text>
  </message>
  <message>
    <ts>2017-07-10T14:52:05.418811</ts>
    <user>U064X3EF3</user>
    <text>we have no plans to stop allowing meta on vars</text>
  </message>
  <message>
    <ts>2017-07-10T14:52:10.421624</ts>
    <user>U050MP39D</user>
    <text>ah, so type hinting the return with ^"[B" would work?</text>
  </message>
  <message>
    <ts>2017-07-10T14:52:10.422029</ts>
    <user>U064X3EF3</user>
    <text>as it would break existing code</text>
  </message>
  <message>
    <ts>2017-07-10T14:52:18.426831</ts>
    <user>U060FKQPN</user>
    <text>correct &lt;@U050MP39D&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T14:52:36.437420</ts>
    <user>U060FKQPN</user>
    <text>but again, there are other issues when you're typehinting on the var name</text>
  </message>
  <message>
    <ts>2017-07-10T14:52:50.446426</ts>
    <user>U060FKQPN</user>
    <text>like, type hinting primitive hints won't cause the funcntion return type to be optimized</text>
  </message>
  <message>
    <ts>2017-07-10T14:52:56.450293</ts>
    <user>U060FKQPN</user>
    <text>if you type hint the argvec it will</text>
  </message>
  <message>
    <ts>2017-07-10T14:53:14.461073</ts>
    <user>U087U9YG3</user>
    <text>huh, ok, I'll try to remember to do that =)</text>
  </message>
  <message>
    <ts>2017-07-10T14:53:36.473995</ts>
    <user>U060FKQPN</user>
    <text>I think eastwood might complain about bad type hints</text>
  </message>
  <message>
    <ts>2017-07-10T14:54:00.487764</ts>
    <user>U087U9YG3</user>
    <text>huh, ok, I'll check if it complains about hinting the var name, if it doesn't it probably should</text>
  </message>
  <message>
    <ts>2017-07-10T14:54:30.506083</ts>
    <user>U060FKQPN</user>
    <text>it might complain about bad type hints, not about all hints on var names</text>
  </message>
  <message>
    <ts>2017-07-10T14:54:45.515069</ts>
    <user>U060FKQPN</user>
    <text>can't remember</text>
  </message>
  <message>
    <ts>2017-07-10T14:54:49.517616</ts>
    <user>U060FKQPN</user>
    <text>it's been a while</text>
  </message>
  <message>
    <ts>2017-07-10T14:56:18.570776</ts>
    <user>U087U9YG3</user>
    <text>&lt;@U050MP39D&gt; did you see my aliasing suggestion? would that work for you?</text>
  </message>
  <message>
    <ts>2017-07-10T14:56:39.583855</ts>
    <user>U060FKQPN</user>
    <text>&lt;https://dev.clojure.org/jira/browse/CLJ-790&gt; upvote this maybe</text>
  </message>
  <message>
    <ts>2017-07-10T14:56:50.590223</ts>
    <user>U0J9LVB6G</user>
    <text>&lt;@U3QUAHZJ6&gt; You should check out &lt;https://github.com/walmartlabs/vizdeps&gt; It draws a graph of the info found in lein deps :tree.</text>
  </message>
  <message>
    <ts>2017-07-10T14:57:22.609790</ts>
    <user>U060FKQPN</user>
    <text>and &lt;https://dev.clojure.org/jira/browse/CLJ-1863&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T14:58:01.632577</ts>
    <user>U050MP39D</user>
    <text>&lt;@U087U9YG3&gt; it would work, but looking for a solution that won't require me to change anything other than the leiningen project.clj. getting an alias rolled out to all devs, all deploy boxes etc is a chore</text>
  </message>
  <message>
    <ts>2017-07-10T14:58:35.653041</ts>
    <user>U087U9YG3</user>
    <text>oh, you can have aliases in project.clj</text>
  </message>
  <message>
    <ts>2017-07-10T14:58:40.656076</ts>
    <user>U050MP39D</user>
    <text>&lt;@U3QUAHZJ6&gt; as sad as it is, I'm not actually sure all the information required to know whether a dependency is used or not exists statically</text>
  </message>
  <message>
    <ts>2017-07-10T15:03:45.838341</ts>
    <user>U050MP39D</user>
    <text>I think I actually just need to understand :target-path and :compile-path a bit better and I can make this work</text>
  </message>
  <message>
    <ts>2017-07-10T15:04:15.854874</ts>
    <user>U0W0JDY4C</user>
    <text>this isnt really a clojure specific question, but I'm curious to hear how to handle it idiomatically (if one exists) in clj. how does one evolve data (domain entities in an application) over time with minimal changes and minimal complexity? &lt;https://groups.google.com/forum/#!topic/clojure/hA0so8Fp8lg&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T15:05:18.890373</ts>
    <user>U050MP39D</user>
    <text>namespaced keys and addition over destruction :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-10T15:05:45.904881</ts>
    <user>U051SS2EU</user>
    <text>also - generally keep your data as flat as possible</text>
  </message>
  <message>
    <ts>2017-07-10T15:05:50.907698</ts>
    <user>U050MP39D</user>
    <text>^ oh yeah and that</text>
  </message>
  <message>
    <ts>2017-07-10T15:06:09.917920</ts>
    <user>U0W0JDY4C</user>
    <text>just keep accreting the changes, leaving the old keys there?</text>
  </message>
  <message>
    <ts>2017-07-10T15:06:38.934506</ts>
    <user>U050MP39D</user>
    <text>finicky nested over "organized" data models are magnets for repeated restructures into a new "better, more organized" structure</text>
  </message>
  <message>
    <ts>2017-07-10T15:06:52.941893</ts>
    <user>U051SS2EU</user>
    <text>you can deprecate keys - move them from required to allowed but not mandatory</text>
  </message>
  <message>
    <ts>2017-07-10T15:07:58.978092</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U051SS2EU&gt; any arbitrary nested object can be seen flat w/ namespaced keys, so things go hand in hand</text>
  </message>
  <message>
    <ts>2017-07-10T15:08:13.986361</ts>
    <user>U0W0JDY4C</user>
    <text>more specifically, say I have some client entity
```
{:thing ""
:schedule {:start "" :end ""}
```
are you saying instead to 
```
{:thing ""
:schedule/start ""
:schedule/end ""}
```</text>
  </message>
  <message>
    <ts>2017-07-10T15:08:46.003959</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1LCB75M2&gt; right - it's not an absolute but a tendency - and I would discourage using namespaces as if they were a series of nested keys…</text>
  </message>
  <message>
    <ts>2017-07-10T15:08:48.004742</ts>
    <user>U0W0JDY4C</user>
    <text>then maybe evolving end to "completed" would equal
`{:thing "" :schedule/start "" :schedule/end "" :schedule/completed}`?</text>
  </message>
  <message>
    <ts>2017-07-10T15:09:17.020769</ts>
    <user>U050MP39D</user>
    <text>&lt;@U1LCB75M2&gt; what about (s/def ::tree-node (s/keys :req [::left ::right]))</text>
  </message>
  <message>
    <ts>2017-07-10T15:09:37.031468</ts>
    <user>U0W0JDY4C</user>
    <text>or perhaps more appropriately `{:thing "" :schedule_start "" :schedule_end "" :schedule_completed}`</text>
  </message>
  <message>
    <ts>2017-07-10T15:09:55.040850</ts>
    <user>U0W0JDY4C</user>
    <text>to avoid namespaces being a series of nested keys</text>
  </message>
  <message>
    <ts>2017-07-10T15:11:09.080732</ts>
    <user>U0W0JDY4C</user>
    <text>but at some point code that renders a view by looking at an entity's `(get-in x [:schedule :start])`, or in a better organized entity `(:schedule_start x)` would have to be changed either way, no?</text>
  </message>
  <message>
    <ts>2017-07-10T15:11:53.104378</ts>
    <user>U1LCB75M2</user>
    <text>`(:schedule/start x)`</text>
  </message>
  <message>
    <ts>2017-07-10T15:22:00.431443</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U050MP39D&gt; by "nested" I'm thinking document-oriented representation. this tree-node definition is more like a memory model (you're describing the shape of a tree vs. a tree that represents anything in particular - e.g. company org chart)</text>
  </message>
  <message>
    <ts>2017-07-10T15:22:34.449765</ts>
    <user>U0J9LVB6G</user>
    <text>&lt;@U051SS2EU&gt; Can you elaborate on what you mean by "using namespaces as if they were a series of nested keys"</text>
  </message>
  <message>
    <ts>2017-07-10T15:27:58.623807</ts>
    <user>U5NAUMCAD</user>
    <text>Hi all, I am trying to get the value of a key from a hashmap in clojure but I am getting always nil.</text>
  </message>
  <message>
    <ts>2017-07-10T15:28:18.634416</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0J9LVB6G&gt; replacing `{:foo {:bar {:baz 0}}}` with `{:foo.bar/baz 0}` where there is no foo.bar ns in your app</text>
  </message>
  <message>
    <ts>2017-07-10T15:28:49.651643</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5NAUMCAD&gt; can you show how you put the value in and how you get it out?</text>
  </message>
  <message>
    <ts>2017-07-10T15:29:06.660638</ts>
    <user>U5NAUMCAD</user>
    <text>for instance I have something like [{:one "something"}]</text>
  </message>
  <message>
    <ts>2017-07-10T15:29:34.675932</ts>
    <user>U5NAUMCAD</user>
    <text>I do (:one nameVariable)</text>
  </message>
  <message>
    <ts>2017-07-10T15:29:56.687385</ts>
    <user>U051SS2EU</user>
    <text>well, that's not a hash-map, it's a vector with a hash-map at index 0</text>
  </message>
  <message>
    <ts>2017-07-10T15:30:16.698824</ts>
    <user>U051SS2EU</user>
    <text>in that example `(get-in v [0 :one])` would work</text>
  </message>
  <message>
    <ts>2017-07-10T15:32:26.770016</ts>
    <user>U5NAUMCAD</user>
    <text>:scream:</text>
  </message>
  <message>
    <ts>2017-07-10T15:32:40.777781</ts>
    <user>U5NAUMCAD</user>
    <text>sorry I did not realize that!!!</text>
  </message>
  <message>
    <ts>2017-07-10T15:32:47.781673</ts>
    <user>U5NAUMCAD</user>
    <text>I am new to clojure!!</text>
  </message>
  <message>
    <ts>2017-07-10T15:33:45.812917</ts>
    <user>U051SS2EU</user>
    <text>it's OK - maybe you don't need the vector part?</text>
  </message>
  <message>
    <ts>2017-07-10T15:37:04.918159</ts>
    <user>U5NAUMCAD</user>
    <text>actually is the response from a REST service</text>
  </message>
  <message>
    <ts>2017-07-10T15:37:12.922290</ts>
    <user>U5NAUMCAD</user>
    <text>so I do not have any option!!!</text>
  </message>
  <message>
    <ts>2017-07-10T15:54:38.484895</ts>
    <user>U66120E7K</user>
    <text>you could map or reduce over the collection you receive. (map key coll)</text>
  </message>
  <message>
    <ts>2017-07-10T15:57:51.591182</ts>
    <user>U11BV7MTK</user>
    <text>Loom (the graph library) has an Edge protocol which has `src` and `dest`. But when you call `add-edges` on a graph it expects the edges in the form [n1 n2]. What's the point of that protocol is i can't easily extend it how I like and instead have to implement nth?</text>
  </message>
  <message>
    <ts>2017-07-10T16:02:49.759934</ts>
    <user>U11BV7MTK</user>
    <text>```
:add-edges*
   (fn [g edges]
     (reduce
      (fn [g [n1 n2]]
        (-&amp;gt; g
            (update-in [:nodeset] conj n1 n2)
            (update-in [:adj n1] (fnil conj #{}) n2)
            (update-in [:adj n2] (fnil conj #{}) n1)))
      g edges))
```</text>
  </message>
  <message>
    <ts>2017-07-10T16:03:13.773642</ts>
    <user>U11BV7MTK</user>
    <text>```
(defprotocol Edge
  (src [edge] "Returns the source node of the edge")
  (dest [edge] "Returns the dest node of the edge"))

; Default implementation for vectors
(extend-type #?(:clj clojure.lang.IPersistentVector
                :cljs cljs.core.PersistentVector)
  Edge
  (src [edge] (get edge 0))
  (dest [edge] (get edge 1)))

```</text>
  </message>
  <message>
    <ts>2017-07-10T16:03:39.787959</ts>
    <user>U11BV7MTK</user>
    <text>these seem incompatible. Add edge and destructure [n1 n2] so why bother with defining edge on peristent vector as 0 and 1 elements?</text>
  </message>
  <message>
    <ts>2017-07-10T16:27:41.567722</ts>
    <user>U66G3SGP5</user>
    <text>I guess so</text>
  </message>
  <message>
    <ts>2017-07-10T16:28:09.582494</ts>
    <user>U66G3SGP5</user>
    <text>The library author coded against his implementation of edges</text>
  </message>
  <message>
    <ts>2017-07-10T16:28:36.597180</ts>
    <user>U66G3SGP5</user>
    <text>Which makes the whole thing busted</text>
  </message>
  <message>
    <ts>2017-07-10T16:28:50.604404</ts>
    <user>U66G3SGP5</user>
    <text>I am sure you can create a pull request to fix this</text>
  </message>
  <message>
    <ts>2017-07-10T16:33:39.761090</ts>
    <user>U11BV7MTK</user>
    <text>just making sure I wasn't overlooking anything</text>
  </message>
  <message>
    <ts>2017-07-10T16:38:20.911790</ts>
    <user>U4TQP3FDE</user>
    <text>anyone using clojure w/ grpc? I've found a few examples on github, but nothing official looking. trying to find some good boilerplate.</text>
  </message>
  <message>
    <ts>2017-07-10T17:36:06.649838</ts>
    <user>U3L6TFEJF</user>
    <text>anyone watch Stuarts talk on REPL-driven development? &lt;https://vimeo.com/223309989&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T17:36:32.661345</ts>
    <user>U3L6TFEJF</user>
    <text>at 16:55 he talks about "REPL at a point of interest", anyone know a library that does that?</text>
  </message>
  <message>
    <ts>2017-07-10T17:38:05.701383</ts>
    <user>U3L6TFEJF</user>
    <text>I'm looking at &lt;https://github.com/razum2um/clj-debugger&gt;, but when I tried that I got weird error involving `java.lang.UnsupportedOperationException: Can't type hint a primitive local`…</text>
  </message>
  <message>
    <ts>2017-07-10T17:39:42.742973</ts>
    <user>U66G3SGP5</user>
    <text>I guess his code is busted</text>
  </message>
  <message>
    <ts>2017-07-10T17:40:20.759350</ts>
    <user>U66G3SGP5</user>
    <text>can you publish whole code and stacktrace</text>
  </message>
  <message>
    <ts>2017-07-10T17:55:29.139746</ts>
    <user>U0NCTKEV8</user>
    <text>the issue is likely &lt;https://github.com/razum2um/clj-debugger/blob/master/src/debugger/core.clj#L12-L16&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T18:23:05.763877</ts>
    <user>U3L6TFEJF</user>
    <text>here's the full stack trace:</text>
  </message>
  <message>
    <ts>2017-07-10T18:23:36.774441</ts>
    <user>U3L6TFEJF</user>
    <text>but yeah hiredman, you're probably right</text>
  </message>
  <message>
    <ts>2017-07-10T18:25:45.818491</ts>
    <user>U0NCTKEV8</user>
    <text>&amp;amp;env will contain symbols with metadata like {:tag 'long} (where long is a primitive type hint) and the compiler will barf with that error message if you use a symbol like that as the name in a binding</text>
  </message>
  <message>
    <ts>2017-07-10T18:25:55.821865</ts>
    <user>U46LFMYTD</user>
    <text>i agree, i think this is what i was looking for, thank you</text>
  </message>
  <message>
    <ts>2017-07-10T18:26:43.838520</ts>
    <user>U0NCTKEV8</user>
    <text>the compiler wants `(let [x (long ...)] ....)` not `(let [^long x ...] ...)`</text>
  </message>
  <message>
    <ts>2017-07-10T18:27:07.846622</ts>
    <user>U0NCTKEV8</user>
    <text>it bites everyone writing a big macro eventually</text>
  </message>
  <message>
    <ts>2017-07-10T18:27:17.849966</ts>
    <user>U46LFMYTD</user>
    <text>If I want to create a logo for a clojure library that I have been developing. is there any sort of legal issue if I use the same colourscheme as the clojure logo? That is, I use the 2 green and 2 blue colours to colour my logo?</text>
  </message>
  <message>
    <ts>2017-07-10T18:27:24.852502</ts>
    <user>U064X3EF3</user>
    <text>go for it</text>
  </message>
  <message>
    <ts>2017-07-10T18:28:30.873979</ts>
    <user>U46LFMYTD</user>
    <text>ok cool, thanks</text>
  </message>
  <message>
    <ts>2017-07-10T18:29:00.883309</ts>
    <user>U3GJHS5DY</user>
    <text>just dont make it a blue c with two green strokes through it and come near kansas city</text>
  </message>
  <message>
    <ts>2017-07-10T18:29:31.893668</ts>
    <user>U46LFMYTD</user>
    <text>lol, ok</text>
  </message>
  <message>
    <ts>2017-07-10T18:29:54.900741</ts>
    <user>U3GJHS5DY</user>
    <text>michaellindon: &lt;https://www.cerner.com/-/media/Cerner-Media-folder/Home-Page/logo-2x.ashx?la=en&amp;amp;hash=BC8406D09620541FFB525E9C27687C750297C604&gt; sorry for context</text>
  </message>
  <message>
    <ts>2017-07-10T18:30:33.913920</ts>
    <user>U46LFMYTD</user>
    <text>what does t do?</text>
  </message>
  <message>
    <ts>2017-07-10T18:30:49.918982</ts>
    <user>U46LFMYTD</user>
    <text>&lt;https://raw.githubusercontent.com/michaellindon/sss4clj/master/logo/sss4clj.png&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T18:31:04.923573</ts>
    <user>U3GJHS5DY</user>
    <text>that looks nice</text>
  </message>
  <message>
    <ts>2017-07-10T18:31:20.928734</ts>
    <user>U46LFMYTD</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-10T18:31:44.936603</ts>
    <user>U3GJHS5DY</user>
    <text>`what does t do?` sorry what?</text>
  </message>
  <message>
    <ts>2017-07-10T18:33:21.967468</ts>
    <user>U46LFMYTD</user>
    <text>hehe sorry, i thought Cerner was the name of a clojure library</text>
  </message>
  <message>
    <ts>2017-07-10T18:33:32.970996</ts>
    <user>U46LFMYTD</user>
    <text>what dose it do?*</text>
  </message>
  <message>
    <ts>2017-07-10T18:33:40.973668</ts>
    <user>U46LFMYTD</user>
    <text>i just chekced the website</text>
  </message>
  <message>
    <ts>2017-07-10T18:33:44.974779</ts>
    <user>U46LFMYTD</user>
    <text>do you work for them?</text>
  </message>
  <message>
    <ts>2017-07-10T18:43:24.153324</ts>
    <user>U3GJHS5DY</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-07-10T18:43:32.155674</ts>
    <user>U3GJHS5DY</user>
    <text>sorry ya its a med tech company</text>
  </message>
  <message>
    <ts>2017-07-10T19:51:59.293758</ts>
    <user>U4SKJCP3K</user>
    <text>Is there a best practice to read/write ZIP files in Clojure? I have found the fs library today and the Java way but unsure what's the recommendation.</text>
  </message>
  <message>
    <ts>2017-07-10T19:52:52.307197</ts>
    <user>U0NCTKEV8</user>
    <text>I've only ever used the java.util.zip package</text>
  </message>
  <message>
    <ts>2017-07-10T19:53:01.309590</ts>
    <user>U0NCTKEV8</user>
    <text>works fine</text>
  </message>
  <message>
    <ts>2017-07-10T20:51:14.118618</ts>
    <user>U5JEJN1CP</user>
    <text>Is there some kind of shortcut for programmatically associating a symbol with it's same-name key?  Sort of the inverse of `{:keys [a b c d]}`, instead of having to type `{:a a :b b :c c :d d}` to create a map.</text>
  </message>
  <message>
    <ts>2017-07-10T20:52:11.130519</ts>
    <user>U051SS2EU</user>
    <text>there's a macro in flatland/useful that does that &lt;https://github.com/amalloy/useful/blob/develop/src/flatland/useful/map.clj#L9&gt;</text>
  </message>
  <message>
    <ts>2017-07-10T20:52:48.138360</ts>
    <user>U051SS2EU</user>
    <text>and it's totally legit to just copy/paste one function from that lib if you don't need the rest IMHO</text>
  </message>
  <message>
    <ts>2017-07-10T21:19:02.474125</ts>
    <user>U5JEJN1CP</user>
    <text>Thanks, just what I was looking for</text>
  </message>
  <message>
    <ts>2017-07-10T21:21:34.505467</ts>
    <user>U644Z8N9H</user>
    <text>&lt;@U5JEJN1CP&gt; or zipmap?</text>
  </message>
  <message>
    <ts>2017-07-10T21:24:11.537730</ts>
    <user>U5JEJN1CP</user>
    <text>No, zipmap still requires you to write you your keys.  I was looking for something equivalent to JS's `{a, b, c, d}` notation which produces the equivalent of `{:a a :b b :c c :d d}`  The keyed macro in flatland does exactly that.</text>
  </message>
  <message>
    <ts>2017-07-10T21:26:06.561545</ts>
    <user>U5JEJN1CP</user>
    <text>With the macro `(keyed [a b  c d])` becomes `{:a a :b b :c c :d d}`</text>
  </message>
  <message>
    <ts>2017-07-10T21:26:24.565442</ts>
    <user>U644Z8N9H</user>
    <text>I see</text>
  </message>
  <message>
    <ts>2017-07-11T01:11:18.037542</ts>
    <user>U04V1HS2L</user>
    <text>&lt;@U3L6TFEJF&gt; &lt;@U0NCTKEV8&gt; I'm the author, but frankly speaking, haven't used it for long :slightly_smiling_face: can we solve this?</text>
  </message>
  <message>
    <ts>2017-07-11T01:22:12.148197</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U04V1HS2L&gt; looks like you'd need exclusions in there to avoid certain `sym` values (any primitive Java type symbols)</text>
  </message>
  <message>
    <ts>2017-07-11T01:25:12.179202</ts>
    <user>U65F82796</user>
    <text>I am new to clojure-api. I develop small app using clojure-api. I have done DB connection, Logs capturing mechanism in my APP. I need help in exception handling mechanism. Is there any library to catch exception all types of exception and to send exception to developer mail?</text>
  </message>
  <message>
    <ts>2017-07-11T01:41:21.348042</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U65F82796&gt; A Google/Bing search reveals lots of Clojure wrappers for SMTP mail but, to be honest, I'd just use javax.mail directly. It's not hard.</text>
  </message>
  <message>
    <ts>2017-07-11T01:45:08.387855</ts>
    <user>U65F82796</user>
    <text>&lt;@U04V70XH6&gt; Okay. Thanks for quick reply.</text>
  </message>
  <message>
    <ts>2017-07-11T01:47:21.412475</ts>
    <user>U04V70XH6</user>
    <text>Sending email to developers every time you get an exception is... less than best practice... You could cause a denial of service attack on your own email provider if you app goes wrong. I definitely would not recommend that approach.</text>
  </message>
  <message>
    <ts>2017-07-11T02:27:17.904424</ts>
    <user>U0524B4UW</user>
    <text>&lt;@U65F82796&gt; we use &lt;http://sentry.io|sentry.io&gt; for such exception capturing purposes... and there are many similar services out there</text>
  </message>
  <message>
    <ts>2017-07-11T02:45:34.164331</ts>
    <user>U65F82796</user>
    <text>&lt;@U0524B4UW&gt;, &lt;@U04V70XH6&gt; Okay. Thanks for valuable suggestions.</text>
  </message>
  <message>
    <ts>2017-07-11T03:29:33.919068</ts>
    <user>U60259LCB</user>
    <text>How would I wrap this in a swap! ? 
```(map #(make-boolean! %) @items)```</text>
  </message>
  <message>
    <ts>2017-07-11T03:51:36.351838</ts>
    <user>U2VNB2S1Z</user>
    <text>`(swap! items #(map make-boolean! %))`</text>
  </message>
  <message>
    <ts>2017-07-11T03:51:40.353541</ts>
    <user>U2VNB2S1Z</user>
    <text>that's one way to do it</text>
  </message>
  <message>
    <ts>2017-07-11T05:42:18.944379</ts>
    <user>U0ALP2929</user>
    <text>Is there a way to tell `lein repl`  to not go check the dependencies? (if I have no internet or the artefact server is down?)</text>
  </message>
  <message>
    <ts>2017-07-11T05:45:28.018835</ts>
    <user>U64FCR0E5</user>
    <text>`-o` for offlinemode</text>
  </message>
  <message>
    <ts>2017-07-11T05:53:26.202251</ts>
    <user>U0ALP2929</user>
    <text>`export LEIN_OFFLINE=true &amp;amp;&amp;amp; lein repl` seems to work.
Tried `lein -o repl` and `lein repl -o` but they still seem to go look for dependencies</text>
  </message>
  <message>
    <ts>2017-07-11T06:01:29.391282</ts>
    <user>U06F82LES</user>
    <text>&lt;@U0ALP2929&gt;, do you have SNAPSHOT dependencies in your project.clj?</text>
  </message>
  <message>
    <ts>2017-07-11T06:13:22.653031</ts>
    <user>U0ALP2929</user>
    <text>Had one, thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T06:22:11.836710</ts>
    <user>U06F82LES</user>
    <text>&lt;@U0ALP2929&gt;, you can pin SNAPSHOT deps: &lt;https://www.martinklepsch.org/posts/maven-snapshots.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T06:22:32.843895</ts>
    <user>U0ALP2929</user>
    <text>Yes, just did that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T06:24:06.875150</ts>
    <user>U06F82LES</user>
    <text>:dart:</text>
  </message>
  <message>
    <ts>2017-07-11T06:32:19.039645</ts>
    <user>U06F82LES</user>
    <text>&lt;@U51QL32TT&gt; looks great as a series of forms typed into the repl. For me the next step would be to copy it to a file and refactor into functions. Idiomatic clojure meant for .clj files (i.e. not typed ad hoc into a repl) eschews dynamic `def`s</text>
  </message>
  <message>
    <ts>2017-07-11T06:33:59.071938</ts>
    <user>U06F82LES</user>
    <text>in this case, it could look like this: ```
(let [cc (read-line), startswith (first cc), credit-card (case ...)] (println "credit card:" credit-card))```</text>
  </message>
  <message>
    <ts>2017-07-11T06:34:24.080104</ts>
    <user>U06F82LES</user>
    <text>(of course you shouldn't type it all in a single line, I was too lazy to use an editor)</text>
  </message>
  <message>
    <ts>2017-07-11T06:36:10.114505</ts>
    <user>U51QL32TT</user>
    <text>&lt;@U06F82LES&gt;  thanks for that. I'm stuck on a my chromebook using an online  repl So I think I'll have to try it on an editor later. I appreciate the insight</text>
  </message>
  <message>
    <ts>2017-07-11T06:36:36.123259</ts>
    <user>U06F82LES</user>
    <text>ah nice, which online repl do you use?</text>
  </message>
  <message>
    <ts>2017-07-11T06:37:21.137727</ts>
    <user>U51QL32TT</user>
    <text>&lt;http://repl.it|repl.it&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T06:39:30.178244</ts>
    <user>U51QL32TT</user>
    <text>It has its limitations but is sufficient enough to play a bit with clojure</text>
  </message>
  <message>
    <ts>2017-07-11T06:40:30.197099</ts>
    <user>U06F82LES</user>
    <text>nice!</text>
  </message>
  <message>
    <ts>2017-07-11T06:41:06.208587</ts>
    <user>U06F82LES</user>
    <text>it's quite fast</text>
  </message>
  <message>
    <ts>2017-07-11T06:42:30.235232</ts>
    <user>U51QL32TT</user>
    <text>It's the best I've found</text>
  </message>
  <message>
    <ts>2017-07-11T06:44:31.273030</ts>
    <user>U51QL32TT</user>
    <text>It's been a bit rough learning clojure. Probably because it's new enough that there aren't as many resources available compared to other languages</text>
  </message>
  <message>
    <ts>2017-07-11T06:46:03.302035</ts>
    <user>U51QL32TT</user>
    <text>a lot of what I find seems to be targeted at more advanced users</text>
  </message>
  <message>
    <ts>2017-07-11T06:51:00.394909</ts>
    <user>U51QL32TT</user>
    <text>anyway, thanks again. I'll have to pop in some more</text>
  </message>
  <message>
    <ts>2017-07-11T07:14:20.841303</ts>
    <user>U60259LCB</user>
    <text>&lt;@U51QL32TT&gt; did you look at &lt;http://www.braveclojure.com/&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-11T07:14:54.851179</ts>
    <user>U60259LCB</user>
    <text>&lt;https://www.reddit.com/r/Clojure/&gt; also has a nice list of resources</text>
  </message>
  <message>
    <ts>2017-07-11T07:46:17.443450</ts>
    <user>U60259LCB</user>
    <text>Tnx, that did the trick</text>
  </message>
  <message>
    <ts>2017-07-11T08:57:56.109881</ts>
    <user>U0W0JDY4C</user>
    <text>if I want to implement an n-node tree structure in clj, where each node can be one of a few different "types", and wanted to use spec to describe the data. what's a good option for polymorphism on the standard tree functions?

1) define a node that can be one of `(s/def ::node #{:node/a :node/b :node/c ...etc})` , and each node has a corresponding spec and `defrecord`. these records all implement some sort of `INode` protocol for insertion, lookup, etc.
2) define a node that's a simple map with a `:type` property. standard tree functions will all be multimethods dispatching on the type of a node. define a more generic spec that uses a lot of `(s/multi-spec)`.
3) … ?</text>
  </message>
  <message>
    <ts>2017-07-11T08:58:36.128236</ts>
    <user>U0W0JDY4C</user>
    <text>the problem i'm trying to model is a hierarchy-tree with directories, files, drives, etc.</text>
  </message>
  <message>
    <ts>2017-07-11T10:47:42.049650</ts>
    <user>U5QCSK76C</user>
    <text>What's a good lightweight way of managing configurations in a clojure project? Like environment type stuff? Urls, user/passwords, etc?</text>
  </message>
  <message>
    <ts>2017-07-11T10:58:29.496626</ts>
    <user>U46LFMYTD</user>
    <text>" Expresso makes great use of clojure's abstraction mechanism like protocols and multimethods and uses a datadriven approach where possible." what does "datadriven" mean in this context? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T11:00:12.569743</ts>
    <user>U0524B4UW</user>
    <text>&lt;@U5QCSK76C&gt; &lt;https://github.com/juxt/aero&gt; is pretty good</text>
  </message>
  <message>
    <ts>2017-07-11T11:10:06.983971</ts>
    <user>U050SC7SV</user>
    <text>+1 for aero</text>
  </message>
  <message>
    <ts>2017-07-11T11:10:38.005733</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;https://github.com/tolitius/cprop&gt; is another option</text>
  </message>
  <message>
    <ts>2017-07-11T11:19:15.357445</ts>
    <user>U06HHF230</user>
    <text>n/p</text>
  </message>
  <message>
    <ts>2017-07-11T11:28:53.760667</ts>
    <user>U5QCSK76C</user>
    <text>Thanks guys! I'll check them out</text>
  </message>
  <message>
    <ts>2017-07-11T11:41:15.273273</ts>
    <user>U61HA86AG</user>
    <text>to me, data-driven means that the most fundamental abstraction in your code is just clojure's data structures, rather than functions, or macros, or protocols, etc

your program is controlled and organised in terms of data, with `map`, `assoc` and so forth being your tools of choice

&lt;http://www.lispcast.com/data-functions-macros-why&gt;
&lt;http://blog.cognitect.com/blog/2016/6/28/the-new-normal-data-leverage&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T11:43:16.355180</ts>
    <user>U61HA86AG</user>
    <text>you could say that datascript and datomic are data-driven databases, compared to something like MariaDB</text>
  </message>
  <message>
    <ts>2017-07-11T12:34:31.321884</ts>
    <user>U61HA86AG</user>
    <text>there's also this interview with Rich - &lt;https://gist.github.com/rduplain/c474a80d173e6ae78980b91bc92f43d1&gt; (ctrl-f for "information")</text>
  </message>
  <message>
    <ts>2017-07-11T13:12:23.675015</ts>
    <user>U1LCB75M2</user>
    <text>lwhorton: 2) map and multimethod dispatch on some key.   any code can consume nested maps and mutate it conforming to the spec. I would avoid the 1) OO trap</text>
  </message>
  <message>
    <ts>2017-07-11T13:14:31.748519</ts>
    <user>U0W0JDY4C</user>
    <text>what's the issue with using records and protocols in #1?</text>
  </message>
  <message>
    <ts>2017-07-11T14:37:06.719472</ts>
    <user>U1LCB75M2</user>
    <text>unnecessary bundling data + behaviour.</text>
  </message>
  <message>
    <ts>2017-07-11T15:10:11.898877</ts>
    <user>U0CGFT70T</user>
    <text>Anything more idomatic?</text>
  </message>
  <message>
    <ts>2017-07-11T15:14:08.030309</ts>
    <user>U050MP39D</user>
    <text>aside from "I hope this isn't a real system" the clojure looks good</text>
  </message>
  <message>
    <ts>2017-07-11T15:18:12.162999</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U0CGFT70T&gt; it is clear and you will find different opinions on this as it's largely a question of style and idioms.
personally, I would either pass in the valid users:
```
(defn valid-user? [users username password] ...```

or, close over them and return a function:
```
(defn valid-user-fn [users]
  (fn [username password]

```</text>
  </message>
  <message>
    <ts>2017-07-11T15:18:36.176265</ts>
    <user>U1ALMRBLL</user>
    <text>this way you avoid the global `def` and it becomes more easily testable</text>
  </message>
  <message>
    <ts>2017-07-11T15:19:37.209346</ts>
    <user>U1ALMRBLL</user>
    <text>stylistically, I don't like the threading macro as you're not really transforming a piece of data, threading it, as it's often used. I'd prefer `some`:
```
(defn valid-user-fn [users]
  (fn [username password]
    (some (fn [{u ::user/name p ::user/password}]
            (and (= u username)
                 (= p password)))
          users)))
```</text>
  </message>
  <message>
    <ts>2017-07-11T15:20:08.226255</ts>
    <user>U1KE7MFDY</user>
    <text>```
(defn valid-users
  [username password]
  (-&amp;gt;&amp;gt; users
       (map (juxt :user/name :user/password))
       (some #(= [username password] %))))
```</text>
  </message>
  <message>
    <ts>2017-07-11T15:21:14.263237</ts>
    <user>U1ALMRBLL</user>
    <text>Now you can make your function:
```
(let [valid-user? (valid-user-fn master-users-list)]
  ;; now use valid-user? as you wish...
  (if (valid-user? "bob" "abc123")
    ...```
and if you want to use a different set of username/passwords, you're not tied to any particular one. just make the new `valid-user?` function by calling `valid-user-fn` with your list</text>
  </message>
  <message>
    <ts>2017-07-11T15:25:32.406636</ts>
    <user>U0CGFT70T</user>
    <text>&lt;@U1KE7MFDY&gt; &lt;@U1ALMRBLL&gt; thanks this is what I was looking for...  both great suggestions.  &lt;@U050MP39D&gt; lol, right not a real system...lol... just creating an om-next tutorial, so just for edification purposes! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T15:42:24.968241</ts>
    <user>U0W0JDY4C</user>
    <text>hmm. i always seem to have a hard time pinning down when to use a protocl</text>
  </message>
  <message>
    <ts>2017-07-11T16:19:37.217488</ts>
    <user>U1LCB75M2</user>
    <text>generally, it's useful when 1) you're interop-ing w/ java (so you can use `extend-protocol` and do type-based dispatch) 2) you create a protocol + record to manage state lifecycle</text>
  </message>
  <message>
    <ts>2017-07-11T16:21:42.287236</ts>
    <user>U1LCB75M2</user>
    <text>otherwise, if you're just manipulating data (not state), simple data structures + the ad-hoc dispatch available w/ multimethods works nice and is more flexible/open</text>
  </message>
  <message>
    <ts>2017-07-11T16:26:41.456181</ts>
    <user>U1LCB75M2</user>
    <text>in other words... type-based (in Clojure case, actual Java types) dispatch = nominal typing, ad-hoc dispatch = more like structural typing</text>
  </message>
  <message>
    <ts>2017-07-11T16:31:22.615242</ts>
    <user>U0W0JDY4C</user>
    <text>much to ponder. thanks for letting me take your time, btw</text>
  </message>
  <message>
    <ts>2017-07-11T16:32:40.659335</ts>
    <user>U1LCB75M2</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-07-11T17:49:50.968561</ts>
    <user>U4SKJCP3K</user>
    <text>How can I get the total bytes of an input stream in Clojure?</text>
  </message>
  <message>
    <ts>2017-07-11T17:58:32.179987</ts>
    <user>U0CAUAKCG</user>
    <text>Is this a bug?
```
(defn callable
  [fun]
  (proxy [clojure.lang.IFn] []
    (invoke [&amp;amp; args] (apply fun args))))

((callable +) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18) =&amp;gt; 171

((callable +) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)
1. Unhandled java.lang.UnsupportedOperationException
   invoke
```</text>
  </message>
  <message>
    <ts>2017-07-11T17:58:49.186740</ts>
    <user>U050MP39D</user>
    <text>of an input stream? that's kind of impossible by definition</text>
  </message>
  <message>
    <ts>2017-07-11T17:59:06.193693</ts>
    <user>U050MP39D</user>
    <text>&lt;https://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T17:59:21.199716</ts>
    <user>U0CAUAKCG</user>
    <text>&lt;@U4SKJCP3K&gt; count a byte-array</text>
  </message>
  <message>
    <ts>2017-07-11T17:59:50.211122</ts>
    <user>U0CAUAKCG</user>
    <text>U4SKJCP3K change your name</text>
  </message>
  <message>
    <ts>2017-07-11T18:00:40.233072</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U4SKJCP3K&gt; I guess this works (if you have memory) `(-&amp;gt; stream slurp .getBytes alength)`</text>
  </message>
  <message>
    <ts>2017-07-11T18:00:54.238603</ts>
    <user>U1LCB75M2</user>
    <text>otherwise use `&lt;http://clojure.java.io/reader|clojure.java.io/reader&gt;`</text>
  </message>
  <message>
    <ts>2017-07-11T18:01:07.243778</ts>
    <user>U0CAUAKCG</user>
    <text>aaah sorry, I got a slack bug, your guy's name was for a moment some hash haha</text>
  </message>
  <message>
    <ts>2017-07-11T18:02:15.271220</ts>
    <user>U4SKJCP3K</user>
    <text>&lt;@U050MP39D&gt; Yeah, that does sound weird. What I am doing now is:

1. Make an HTTP request and get back a JSON file
2. Convert that to a ZIP file (gives me back an input stream)
3. Need to know the size of this payload</text>
  </message>
  <message>
    <ts>2017-07-11T18:02:34.279225</ts>
    <user>U4SKJCP3K</user>
    <text>hcarvalhoaves: Nice, I will try this. Thanks :+1:</text>
  </message>
  <message>
    <ts>2017-07-11T18:02:39.280938</ts>
    <user>U11BV7MTK</user>
    <text>&lt;@U0CAUAKCG&gt; i think you're running into the limitation that you can only have 20 arguments to a function</text>
  </message>
  <message>
    <ts>2017-07-11T18:03:10.293340</ts>
    <user>U4SKJCP3K</user>
    <text>hlolli: Interesting, I will give it a shot. Thank you.</text>
  </message>
  <message>
    <ts>2017-07-11T18:03:41.305951</ts>
    <user>U11BV7MTK</user>
    <text>and i 've heard someone talk about "trivial" functions through the repl are not invoked in the same way as normal functions</text>
  </message>
  <message>
    <ts>2017-07-11T18:04:03.314469</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U4SKJCP3K&gt; are you're trying to determine the file size to send on the response?</text>
  </message>
  <message>
    <ts>2017-07-11T18:04:15.319372</ts>
    <user>U0CAUAKCG</user>
    <text>any hacks to bypass it? It's a bug in `overtone`, changeing the implementation where this is defined would be pain</text>
  </message>
  <message>
    <ts>2017-07-11T18:04:36.327643</ts>
    <user>U4SKJCP3K</user>
    <text>&lt;@U1LCB75M2&gt; Precisely. I'm trying to do all these steps without performing IO.</text>
  </message>
  <message>
    <ts>2017-07-11T18:04:57.335884</ts>
    <user>U11BV7MTK</user>
    <text>i'm way out of my depth on that one. I think &lt;@U0NCTKEV8&gt; or &lt;@U051SS2EU&gt; would know way more than me</text>
  </message>
  <message>
    <ts>2017-07-11T18:05:05.338930</ts>
    <user>U1LCB75M2</user>
    <text>&lt;@U4SKJCP3K&gt; you would have to hold all response in memory, use a buffered reader + this instead -&amp;gt; &lt;http://greenbytes.de/tech/webdav/rfc2616.html#rfc.section.3.6.1&gt;</text>
  </message>
  <message>
    <ts>2017-07-11T18:06:08.362702</ts>
    <user>U4SKJCP3K</user>
    <text>hcarvalhoaves: Oh God, this looks crazy :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-11T18:06:19.367103</ts>
    <user>U0NCTKEV8</user>
    <text>yeah, proxy doesn't rest args like that</text>
  </message>
  <message>
    <ts>2017-07-11T18:06:27.370214</ts>
    <user>U0NCTKEV8</user>
    <text>doesn't support</text>
  </message>
  <message>
    <ts>2017-07-11T18:06:53.379873</ts>
    <user>U0CAUAKCG</user>
    <text>*facepalm*</text>
  </message>
  <message>
    <ts>2017-07-11T18:06:56.380961</ts>
    <user>U1LCB75M2</user>
    <text>otherwise you have to make sure you don't OOM :wink:</text>
  </message>
  <message>
    <ts>2017-07-11T18:08:05.406267</ts>
    <user>U0NCTKEV8</user>
    <text>I surprised the first thing works at all</text>
  </message>
  <message>
    <ts>2017-07-11T18:08:07.407267</ts>
    <user>U4SKJCP3K</user>
    <text>I am sending this payload to S3 and one of the requirements is to pass in the content length alongside the payload</text>
  </message>
  <message>
    <ts>2017-07-11T18:08:55.424317</ts>
    <user>U4SKJCP3K</user>
    <text>I guess temp files are the simple solution to this here</text>
  </message>
  <message>
    <ts>2017-07-11T18:10:24.456362</ts>
    <user>U0NCTKEV8</user>
    <text>maybe proxy does sort of support that, I am not sure, depends on how you read the docstring, but I have never read it has supporting that</text>
  </message>
  <message>
    <ts>2017-07-11T18:11:42.484715</ts>
    <user>U0CAUAKCG</user>
    <text>&lt;https://github.com/overtone/overtone/blob/master/src/overtone/helpers/lib.clj#L146&gt;
here when the range is changed I bump into the same error as I posted above.</text>
  </message>
  <message>
    <ts>2017-07-11T18:12:34.503129</ts>
    <user>U0CAUAKCG</user>
    <text>the proxy is defined on line 100.</text>
  </message>
  <message>
    <ts>2017-07-11T18:13:00.512051</ts>
    <user>U0NCTKEV8</user>
    <text>I  was going to say, that is defrecord which is a different beast entirely from proxy</text>
  </message>
  <message>
    <ts>2017-07-11T18:13:44.527024</ts>
    <user>U0CAUAKCG</user>
    <text>I think this hack could have been done better when this was written way back.</text>
  </message>
  <message>
    <ts>2017-07-11T18:14:14.537453</ts>
    <user>U0CAUAKCG</user>
    <text>a macro that takes all arguments and puts them into a map or vector.</text>
  </message>
  <message>
    <ts>2017-07-11T18:14:59.553225</ts>
    <user>U0NCTKEV8</user>
    <text>it is also likely really old code, given that it uses proxy instead of reify there</text>
  </message>
  <message>
    <ts>2017-07-11T18:15:59.574688</ts>
    <user>U0CAUAKCG</user>
    <text>Yes, reify a protocol would maybe be a better solutin?</text>
  </message>
  <message>
    <ts>2017-07-11T18:16:42.589659</ts>
    <user>U0NCTKEV8</user>
    <text>no, I mean, those are all interfaces it is proxying so reify is likely a better choice</text>
  </message>
  <message>
    <ts>2017-07-11T18:16:59.595387</ts>
    <user>U0CAUAKCG</user>
    <text>ah</text>
  </message>
  <message>
    <ts>2017-07-11T18:17:11.599430</ts>
    <user>U11BV7MTK</user>
    <text>`(~invoke_fn this# ~@args)`. does this have to many arguments with `(range 21)`?</text>
  </message>
  <message>
    <ts>2017-07-11T18:17:17.601639</ts>
    <user>U0NCTKEV8</user>
    <text>I am not familiar with the codebase, but from scratch I might prefer to pass around a map with a key that maps to a function</text>
  </message>
  <message>
    <ts>2017-07-11T18:17:58.615458</ts>
    <user>U0NCTKEV8</user>
    <text>the issue is, the last arity of invoke needs to call applyTo, or something like that, you should check out AFn.java</text>
  </message>
  <message>
    <ts>2017-07-11T18:18:09.619183</ts>
    <user>U0CAUAKCG</user>
    <text>the limit is 10 arguments because in overtone they come in pairs.</text>
  </message>
  <message>
    <ts>2017-07-11T18:18:49.632619</ts>
    <user>U0CAUAKCG</user>
    <text>this limit has been there for long time, nobody has taken the time to fix this</text>
  </message>
  <message>
    <ts>2017-07-11T18:19:16.641995</ts>
    <user>U0NCTKEV8</user>
    <text>if it is going to use proxy, it shouldn't proxy IFn, it should proxy AFn</text>
  </message>
  <message>
    <ts>2017-07-11T18:19:48.652945</ts>
    <user>U0NCTKEV8</user>
    <text>there are invoke arities from 0 to 21, the 21st arity takes 20 args + an array as the 21st</text>
  </message>
  <message>
    <ts>2017-07-11T18:23:11.724134</ts>
    <user>U0CAUAKCG</user>
    <text>I see what you mean, but I can't see how that would be implemented. It's macroexpanding to a argument pyramid of invoke.</text>
  </message>
  <message>
    <ts>2017-07-11T18:23:56.739180</ts>
    <user>U0CAUAKCG</user>
    <text>Or just somehow collect all the arguments as one parameter.</text>
  </message>
  <message>
    <ts>2017-07-11T18:26:37.794061</ts>
    <user>U0CAUAKCG</user>
    <text>ah ok, read better, last arity invokeing applyTo, I see</text>
  </message>
  <message>
    <ts>2017-07-11T18:26:39.794785</ts>
    <user>U0NCTKEV8</user>
    <text>you can't do it with proxy</text>
  </message>
  <message>
    <ts>2017-07-11T18:26:45.796749</ts>
    <user>U0NCTKEV8</user>
    <text>or anything really</text>
  </message>
  <message>
    <ts>2017-07-11T18:28:24.829973</ts>
    <user>U0CAUAKCG</user>
    <text>this macro `defrecord-ifn` has always some function or macro wrapped around it, there an &amp;amp;rest sequence could be used.</text>
  </message>
  <message>
    <ts>2017-07-11T18:28:53.839359</ts>
    <user>U0CAUAKCG</user>
    <text>no, sorry, forget what I wrote, it's the defrecord that gets called in the end</text>
  </message>
  <message>
    <ts>2017-07-11T18:28:59.841142</ts>
    <user>U0CAUAKCG</user>
    <text>macros, brainfuck</text>
  </message>
  <message>
    <ts>2017-07-11T22:29:33.322324</ts>
    <user>U0W0JDY4C</user>
    <text>does anyone have experience with clojure.walk/postwalk? it says it walks on each form but sometimes there's strange vectors showing up where there should be maps.. not really sure how to write what I'm trying to write</text>
  </message>
  <message>
    <ts>2017-07-11T22:31:54.351387</ts>
    <user>U0W0JDY4C</user>
    <text>looking for a generic way to walk a structure and convert something like
```
{:a 1 :b {:c {:d 2}}}
into 
{:a 1 :b {:c {:d 2 :id :c} :id :b}}
```</text>
  </message>
  <message>
    <ts>2017-07-11T22:34:24.381510</ts>
    <user>U0W0JDY4C</user>
    <text>but to do this seems like postwalk needs some sort of "look back"</text>
  </message>
  <message>
    <ts>2017-07-11T22:43:00.481259</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; hash-maps are made of two element vectors (entries) - you can see it if you call seq on one</text>
  </message>
  <message>
    <ts>2017-07-11T22:45:06.505772</ts>
    <user>U051SS2EU</user>
    <text>you can do that transform above by checking for hash-maps inside each hash-map, and updating them to include their id key before returning it</text>
  </message>
  <message>
    <ts>2017-07-11T22:45:46.513903</ts>
    <user>U051SS2EU</user>
    <text>so your conditional would check if the arg was a map, then if it is check for maps in vals of the map, and update those vals</text>
  </message>
  <message>
    <ts>2017-07-11T22:47:38.535760</ts>
    <user>U46LFMYTD</user>
    <text>Hey &lt;@U61HA86AG&gt; , thanks for the links</text>
  </message>
  <message>
    <ts>2017-07-11T22:49:06.552554</ts>
    <user>U46LFMYTD</user>
    <text>Sorry for the late reply, I took some time to read the articles. I think I get the gist of what is meant by data-driven. I never learned Object Oriented design patterns anyway, so its hard for me to contrast what I'm doing in clojure against say, java.</text>
  </message>
  <message>
    <ts>2017-07-11T22:49:39.558812</ts>
    <user>U46LFMYTD</user>
    <text>I am curious about the following, isn't creation of a record and association protocols a more object oritented, less data-driven approach?</text>
  </message>
  <message>
    <ts>2017-07-11T22:50:13.565373</ts>
    <user>U46LFMYTD</user>
    <text>For example, a data-driven approach to me would just be an associated map. Maybe it has a type keyword. I can write a function which looks up :type in the map and does something with the corresponding value</text>
  </message>
  <message>
    <ts>2017-07-11T22:50:36.570038</ts>
    <user>U46LFMYTD</user>
    <text>whereas creating a new record seems similar to creating a new object, and writing protocols seems to me to be like creating methods</text>
  </message>
  <message>
    <ts>2017-07-11T22:51:15.577492</ts>
    <user>U46LFMYTD</user>
    <text>i find it hard to reconcile my use of records and protocols with a data-driven approach</text>
  </message>
  <message>
    <ts>2017-07-11T22:51:20.578491</ts>
    <user>U46LFMYTD</user>
    <text>can you explain?</text>
  </message>
  <message>
    <ts>2017-07-11T22:56:56.642912</ts>
    <user>U4SCF2V1D</user>
    <text>I have a stupid question.  I want to make a project with a different project as a foundation - is there a simple way to get Lein to do that so I don't have to manually edit a bunch of files?  Sorry if there's something obvious, Google did not yield results</text>
  </message>
  <message>
    <ts>2017-07-11T22:57:45.652145</ts>
    <user>U051SS2EU</user>
    <text>why not just recursively copy the old project then edit?</text>
  </message>
  <message>
    <ts>2017-07-11T22:58:06.656290</ts>
    <user>U051SS2EU</user>
    <text>it's possible to make your own template, but that seems like overkill to make one project</text>
  </message>
  <message>
    <ts>2017-07-11T22:59:51.675878</ts>
    <user>U4SCF2V1D</user>
    <text>the project has a bunch of files, and I'm messing with something new (importing React components into Reagent), so mostly I just wanted to avoid the risk of forgetting something.</text>
  </message>
  <message>
    <ts>2017-07-11T23:00:00.677785</ts>
    <user>U4SCF2V1D</user>
    <text>buuut it shouldn't be too bad.  Thanks!</text>
  </message>
  <message>
    <ts>2017-07-11T23:37:24.073412</ts>
    <user>U0W0JDY4C</user>
    <text>thanks &lt;@U051SS2EU&gt; ill work on that</text>
  </message>
  <message>
    <ts>2017-07-12T02:51:59.286692</ts>
    <user>U65F82796</user>
    <text>I have defined logger format in log4j.properties and the file is kept inside resource folder in clojure api. But logs is not getting displayed in given in log4j.properties. Logs getting displayed on console in this `[qtp681891967-13] INFO clojure-dauble-business-api.core - Function begins from here`.</text>
  </message>
  <message>
    <ts>2017-07-12T02:54:51.331150</ts>
    <user>U65F82796</user>
    <text>I also specified log4j.properties path in project.clj with this line `:profiles {:dev {:resource-paths ["resources"]}}`</text>
  </message>
  <message>
    <ts>2017-07-12T02:56:30.356990</ts>
    <user>U65F82796</user>
    <text>As per log4j.properties logs should be append to app.log file. It is not happening. Where I am doing wrong? Can anybody help me out?</text>
  </message>
  <message>
    <ts>2017-07-12T03:51:46.375335</ts>
    <user>U65F82796</user>
    <text>I figured out solution to the logging issue.  Dependency [org.slf4j/slf4j-simple "1.7.12"] overriding log4j.properties configurations.</text>
  </message>
  <message>
    <ts>2017-07-12T05:52:19.197059</ts>
    <user>U5YHNV0EA</user>
    <text>i've been trying for a couple days to resolve this problem when i run lein repl: `Error loading clojure.tools.nrepl.server: Could not locate clojure/tools/nrepl/server__init.class or clojure/tools/nrepl/server.clj on classpath`</text>
  </message>
  <message>
    <ts>2017-07-12T05:52:52.209872</ts>
    <user>U5YHNV0EA</user>
    <text>i cannot figure out how this dependency works and how to resolve it</text>
  </message>
  <message>
    <ts>2017-07-12T06:03:08.453543</ts>
    <user>U050SC7SV</user>
    <text>technically they are clojure.lang.MapEntry instance, and you can check for it via map-entry?</text>
  </message>
  <message>
    <ts>2017-07-12T06:04:22.483357</ts>
    <user>U050SC7SV</user>
    <text>they inherit from the .toString of vectors</text>
  </message>
  <message>
    <ts>2017-07-12T06:32:03.060800</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U5YHNV0EA&gt; is your code accessible publicly on github?</text>
  </message>
  <message>
    <ts>2017-07-12T06:32:24.067755</ts>
    <user>U5YHNV0EA</user>
    <text>&lt;@U5ZAJ15P0&gt; no</text>
  </message>
  <message>
    <ts>2017-07-12T06:32:53.077189</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U5YHNV0EA&gt; could you push it to github? I am happy to take a look</text>
  </message>
  <message>
    <ts>2017-07-12T06:33:09.082286</ts>
    <user>U5YHNV0EA</user>
    <text>&lt;@U5ZAJ15P0&gt; thanks, and i wish i could. it's a company project</text>
  </message>
  <message>
    <ts>2017-07-12T06:33:17.084978</ts>
    <user>U5ZAJ15P0</user>
    <text>ah :confused:</text>
  </message>
  <message>
    <ts>2017-07-12T06:33:46.094582</ts>
    <user>U5YHNV0EA</user>
    <text>&lt;@U5ZAJ15P0&gt; i'm trying various things, i should be able to get to the bottom of it.</text>
  </message>
  <message>
    <ts>2017-07-12T06:34:16.104177</ts>
    <user>U5YHNV0EA</user>
    <text>it's due to one of those sticky situations in clojure where sometimes building a project depends on the actual editor used by the developer. give the project to another developer with a different IDE and it blows up</text>
  </message>
  <message>
    <ts>2017-07-12T06:36:48.154607</ts>
    <user>U5YHNV0EA</user>
    <text>i think it's the only language i've used where a project's build process can be coupled with the code editor</text>
  </message>
  <message>
    <ts>2017-07-12T06:37:47.173990</ts>
    <user>U051SA920</user>
    <text>&lt;@U5YHNV0EA&gt; I'd first inspect the classpath and see if you have the `nrepl` jar on there</text>
  </message>
  <message>
    <ts>2017-07-12T06:40:03.218990</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U5YHNV0EA&gt; try `lein deps :tree`</text>
  </message>
  <message>
    <ts>2017-07-12T07:04:35.697098</ts>
    <user>U5YHNV0EA</user>
    <text>&lt;@U5ZAJ15P0&gt; &lt;@U051SA920&gt; i managed to resolve the problem by installing and using cider. not my preference but it's a quick solution for now</text>
  </message>
  <message>
    <ts>2017-07-12T07:12:09.841476</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U5YHNV0EA&gt; odd… glad it worked though</text>
  </message>
  <message>
    <ts>2017-07-12T07:23:47.059202</ts>
    <user>U5YHNV0EA</user>
    <text>are environment variables cached somehow. I removed one that was set in my project.clj, and instead put it in a separate profiles.clj. Even after a lein clean and restart of cider, calling the environ function to read an environment variable reveals the old value that was removed.</text>
  </message>
  <message>
    <ts>2017-07-12T07:37:32.318852</ts>
    <user>U11BV7MTK</user>
    <text>&lt;@U5YHNV0EA&gt; not sure how that's working but i can wager a guess. Emacs starts up with an environment and its possible that this process, since it is spawning the others, is preserving that environment you started with. perhaps restart emacs and see if the environment is updated then</text>
  </message>
  <message>
    <ts>2017-07-12T07:41:51.399448</ts>
    <user>U050SC7SV</user>
    <text>Check if you have a . lein-env file in the root of the project </text>
  </message>
  <message>
    <ts>2017-07-12T07:50:24.561555</ts>
    <user>U5YHNV0EA</user>
    <text>thanks. my probably was actually resolved after a reboot of the machine</text>
  </message>
  <message>
    <ts>2017-07-12T09:12:47.607412</ts>
    <user>U553KK0QH</user>
    <text>Is there a function to process the values of a map and get back a map with the original keys and updated values? A `mapmap` function? I find myself doing this a lot and use reduce like: ```(defn process-map
  [m]
  (reduce #(let [v (get m %2)
                 new-v (some-processing-here v)] (assoc %1 new-v)) {} (keys m)))``` but seems like this is a useful method to have built in.</text>
  </message>
  <message>
    <ts>2017-07-12T09:16:40.730869</ts>
    <user>U3L6TFEJF</user>
    <text>there is no built-in for that</text>
  </message>
  <message>
    <ts>2017-07-12T09:17:08.745926</ts>
    <user>U3L6TFEJF</user>
    <text>with Specter: `(transform MAP-VALS your-fn your-map)`</text>
  </message>
  <message>
    <ts>2017-07-12T09:19:36.825639</ts>
    <user>U60259LCB</user>
    <text>I have an atom with a vector with an map, how would I update the value :done of one item?
```[{:id "1", :title "Learn Clojure", :done "active"} {:id "2", :title "Learn ClojureScript", :done "active"}]
```</text>
  </message>
  <message>
    <ts>2017-07-12T09:19:55.835593</ts>
    <user>U3L6TFEJF</user>
    <text>which item?</text>
  </message>
  <message>
    <ts>2017-07-12T09:20:08.843018</ts>
    <user>U3L6TFEJF</user>
    <text>by index or by id?</text>
  </message>
  <message>
    <ts>2017-07-12T09:20:43.862389</ts>
    <user>U60259LCB</user>
    <text>by id</text>
  </message>
  <message>
    <ts>2017-07-12T09:20:48.865201</ts>
    <user>U60259LCB</user>
    <text>if possible</text>
  </message>
  <message>
    <ts>2017-07-12T09:22:57.935924</ts>
    <user>U60259LCB</user>
    <text>Pasted the wrong code :neutral_face:</text>
  </message>
  <message>
    <ts>2017-07-12T09:24:23.983070</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U60259LCB&gt; again, with Specter: `(setval [ATOM ALL :id #(= your-id %)] :your-value your-atom)`</text>
  </message>
  <message>
    <ts>2017-07-12T09:25:17.013639</ts>
    <user>U06B8J0AJ</user>
    <text>I'd like a version of `empty?` that doesn't throw on numbers (etc), but simply informs me that, no, the number `9` (for example) is not empty, whereas `""` is empty. What's the least unintelligent way to achieve this?</text>
  </message>
  <message>
    <ts>2017-07-12T09:26:34.057541</ts>
    <user>U06B8J0AJ</user>
    <text>(my current method is quite unintelligent)</text>
  </message>
  <message>
    <ts>2017-07-12T09:26:41.061539</ts>
    <user>U3L6TFEJF</user>
    <text>can you post it?</text>
  </message>
  <message>
    <ts>2017-07-12T09:28:31.123988</ts>
    <user>U06B8J0AJ</user>
    <text>Basically a protocol that dispatches on type. Seqs and strings, return empty, java.lang.Object: return false.</text>
  </message>
  <message>
    <ts>2017-07-12T09:28:43.130381</ts>
    <user>U60259LCB</user>
    <text>tnx &lt;@U3L6TFEJF&gt; didnt know about Specter</text>
  </message>
  <message>
    <ts>2017-07-12T09:29:12.146834</ts>
    <user>U3L6TFEJF</user>
    <text>give it a try, it's made exactly for these kinds of problems!</text>
  </message>
  <message>
    <ts>2017-07-12T09:29:47.167407</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U06B8J0AJ&gt; maybe just catch `Exception` and return false if it throws?</text>
  </message>
  <message>
    <ts>2017-07-12T09:29:55.171872</ts>
    <user>U3L6TFEJF</user>
    <text>certainly not the prettiest method either</text>
  </message>
  <message>
    <ts>2017-07-12T09:32:03.246704</ts>
    <user>U06B8J0AJ</user>
    <text>True, but perhaps better than straining the input to `empty?` through a protocol and hoping that I'm not straining too aggressively. Or not aggressively enough.</text>
  </message>
  <message>
    <ts>2017-07-12T11:38:56.311760</ts>
    <user>U61HA86AG</user>
    <text>yes, you have that correct. Protocols and Records arent simple data-types, you should only use them when you need something more abstract/powerful/clear than simple data-types can offer</text>
  </message>
  <message>
    <ts>2017-07-12T11:39:07.319052</ts>
    <user>U61HA86AG</user>
    <text>data-driven doesnt mean *only* use simple data types</text>
  </message>
  <message>
    <ts>2017-07-12T11:39:33.336216</ts>
    <user>U61HA86AG</user>
    <text>it means reach for them first, and use more meaty abstractions where data falls down</text>
  </message>
  <message>
    <ts>2017-07-12T11:41:50.431118</ts>
    <user>U61HA86AG</user>
    <text>Records and Protocols exist for a reason, the key is to use them when they make sense and are needed, but to use simple data as much as you can (within reason)</text>
  </message>
  <message>
    <ts>2017-07-12T11:44:27.538830</ts>
    <user>U61HA86AG</user>
    <text>see here &lt;https://clojure.org/reference/datatypes#_why_have_both_deftype_and_defrecord&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T12:04:27.349763</ts>
    <user>U050R7ECY</user>
    <text>Is `classlojure` the best way to have multiple clojure runtimes in the same JVM?</text>
  </message>
  <message>
    <ts>2017-07-12T12:05:48.403357</ts>
    <user>U050ECB92</user>
    <text>probably `shimdandy` &lt;@U050R7ECY&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T12:06:18.421732</ts>
    <user>U050ECB92</user>
    <text>&lt;@U06SGCEHJ&gt; or jim crossley are the experts there</text>
  </message>
  <message>
    <ts>2017-07-12T12:06:34.431939</ts>
    <user>U050R7ECY</user>
    <text>&lt;@U050ECB92&gt; I'm writing a library where I won't have control over how the JVM is started up. Does shimdandy still work there? From the readme it looks like it wont</text>
  </message>
  <message>
    <ts>2017-07-12T12:06:44.438166</ts>
    <user>U050ECB92</user>
    <text>not sure what boot uses but they do it too</text>
  </message>
  <message>
    <ts>2017-07-12T12:06:58.446882</ts>
    <user>U050ECB92</user>
    <text>dunno</text>
  </message>
  <message>
    <ts>2017-07-12T12:07:22.461734</ts>
    <user>U061V0GG2</user>
    <text>Boot uses shimdandy</text>
  </message>
  <message>
    <ts>2017-07-12T12:07:34.469008</ts>
    <user>U06SGCEHJ</user>
    <text>&lt;@U050R7ECY&gt; meaning you can't control the classpath?</text>
  </message>
  <message>
    <ts>2017-07-12T12:09:01.522762</ts>
    <user>U050R7ECY</user>
    <text>I'm working on &lt;https://github.com/arohner/spectrum&gt;. Spectrum uses tools.analyzer. Tools.analyzer uses eval, which breaks defrecords and protocols when files are reloaded. I'm looking for a way to isolate the code reloading</text>
  </message>
  <message>
    <ts>2017-07-12T12:09:59.558722</ts>
    <user>U06SGCEHJ</user>
    <text>Ah, a library, so you can't keep clojure.jar off of the cp</text>
  </message>
  <message>
    <ts>2017-07-12T12:10:08.563980</ts>
    <user>U050R7ECY</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-12T12:10:23.573586</ts>
    <user>U06SGCEHJ</user>
    <text>yeah, shimdandy won't work for you there</text>
  </message>
  <message>
    <ts>2017-07-12T12:12:50.664167</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U050R7ECY&gt; could you try maybe isolating the classloader that t.a uses?</text>
  </message>
  <message>
    <ts>2017-07-12T12:13:46.697742</ts>
    <user>U050R7ECY</user>
    <text>AIUI, it's compiler.java that's creating new classes via eval, so it's the compiler's classloader that matters?</text>
  </message>
  <message>
    <ts>2017-07-12T12:14:09.711995</ts>
    <user>U0K064KQV</user>
    <text>You were simply missing a dependency on nrepl. Cider jack in injects a few repl only dependencies. Not all editors do this. </text>
  </message>
  <message>
    <ts>2017-07-12T12:16:03.783804</ts>
    <user>U0W0JDY4C</user>
    <text>how is one supposed to use `loop/recur` to reduce a nested collection?

```
given {:children {1 {:children {3 {:children {}} 2 {:children {}}

(defn recurse-children [acc root]
  (reduce (fn [a node] 
    (if (empty? (:children n)) 
      (do-accumulation acc node)
      (map #(recurse-children a %) (:children n)))))
```
^ this is what I _want_ to do, but I know that will result in an overflow</text>
  </message>
  <message>
    <ts>2017-07-12T12:16:36.804600</ts>
    <user>U060FKQPN</user>
    <text>I think if we provided a custom classloader that extends DynamicClassLoader we could be able to isolate the evaluation that happens through tools.analyzer and the clojure runtime</text>
  </message>
  <message>
    <ts>2017-07-12T12:16:55.816657</ts>
    <user>U0W0JDY4C</user>
    <text>except if I try to rewrite that in `loop/recur`, i will end up with some sort of `(map #(recur acc %) (:children n))` at some point, which I know isn't valid either</text>
  </message>
  <message>
    <ts>2017-07-12T12:17:05.822954</ts>
    <user>U060FKQPN</user>
    <text>don't have time right now but if you're stuck on it I can give it a try this weekend</text>
  </message>
  <message>
    <ts>2017-07-12T12:17:34.841167</ts>
    <user>U050R7ECY</user>
    <text>&lt;@U060FKQPN&gt; I'm happy to work on it now, but I'm not following yet. which behavior in the CL needs to change?</text>
  </message>
  <message>
    <ts>2017-07-12T12:19:11.901277</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; it can be done breadth first if you add an extra accumulator for nested children, so you process items if leaves, or append to the accumulator if branches, then recur on the vector of branches</text>
  </message>
  <message>
    <ts>2017-07-12T12:19:17.905085</ts>
    <user>U060FKQPN</user>
    <text>DCL has a map that goes classname -&amp;gt; class, and that's how the Compiler resolves classes, if analyze+eval did evaluation using a different classloader using a different class cache, it might not impact the regular evaluation context (so no redefining of defrecords)</text>
  </message>
  <message>
    <ts>2017-07-12T12:19:32.913951</ts>
    <user>U060FKQPN</user>
    <text>I've literally given it just 20 seconds of thought tho, it might not work</text>
  </message>
  <message>
    <ts>2017-07-12T12:19:56.928717</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; that said, the result often looks weird enough that it's worth just using non-optimized recursion until you know you have inputs too big for that</text>
  </message>
  <message>
    <ts>2017-07-12T12:20:18.942941</ts>
    <user>U060FKQPN</user>
    <text>in particular there might be some more issues to solve around namespaces</text>
  </message>
  <message>
    <ts>2017-07-12T12:20:52.964367</ts>
    <user>U0W0JDY4C</user>
    <text>as always, a big help &lt;@U051SS2EU&gt; .. dont think I'll hit that limit for quite some time</text>
  </message>
  <message>
    <ts>2017-07-12T12:21:01.970419</ts>
    <user>U050R7ECY</user>
    <text>The most recent thing I tried doing was 1) grabbing the current classpath. 2) creating a new URLClassLoader using the current classpath URLs, but setting the parent classloader to `(.getParent (.getClassLoader clojure.lang.RT))`. 3) Using classlojure to `eval-in` in that supposedly isolated classloader.</text>
  </message>
  <message>
    <ts>2017-07-12T12:28:39.252021</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U050SC7SV&gt; they will not be MapEntry instances when processed in postwalk, postwalk returns vectors</text>
  </message>
  <message>
    <ts>2017-07-12T12:28:49.257845</ts>
    <user>U051SS2EU</user>
    <text>and vector? returns true for instances of MapEntry</text>
  </message>
  <message>
    <ts>2017-07-12T12:29:45.291303</ts>
    <user>U051SS2EU</user>
    <text>now, there are definitely cases where I changed my algorithm so I could use prewalk instead just because prewalk gives you MapEntry instead of vector</text>
  </message>
  <message>
    <ts>2017-07-12T12:30:32.320853</ts>
    <user>U553KK0QH</user>
    <text>&lt;@U3L6TFEJF&gt; Thanks for the pointer to Specter. Looks useful beyond my use case. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-12T12:31:13.346934</ts>
    <user>U050R7ECY</user>
    <text>hrm, using `(.getParent (clojure.lang.RT/baseLoader))` seems to work</text>
  </message>
  <message>
    <ts>2017-07-12T12:33:06.416727</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U050R7ECY&gt; what's the issue specifically btw? something we have to fix in t.a.jvm?</text>
  </message>
  <message>
    <ts>2017-07-12T12:33:07.416959</ts>
    <user>U5QCSK76C</user>
    <text>How do you load a local jar in a clojure project? Is there a lein way?</text>
  </message>
  <message>
    <ts>2017-07-12T12:33:38.436421</ts>
    <user>U060FKQPN</user>
    <text>ideally t.a.jvm/analyze-ns shouldn't behave differently than normal clojure namespace reloading</text>
  </message>
  <message>
    <ts>2017-07-12T12:33:42.438783</ts>
    <user>U050R7ECY</user>
    <text>&lt;@U060FKQPN&gt; still trying to figure it out :slightly_smiling_face: not sure if it's user error or bug</text>
  </message>
  <message>
    <ts>2017-07-12T12:34:08.453481</ts>
    <user>U050R7ECY</user>
    <text>I'm also trying to get analysis for e.g. clojure.core, so normal reloading is not good enough</text>
  </message>
  <message>
    <ts>2017-07-12T12:34:12.456203</ts>
    <user>U060FKQPN</user>
    <text>I've cried many many tears trying to make that the case and I thought that's how it behaved now</text>
  </message>
  <message>
    <ts>2017-07-12T12:34:13.456510</ts>
    <user>U060FKQPN</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-12T12:34:14.457889</ts>
    <user>U060FKQPN</user>
    <text>hm</text>
  </message>
  <message>
    <ts>2017-07-12T12:34:24.463909</ts>
    <user>U060FKQPN</user>
    <text>yeah that might cause some issues</text>
  </message>
  <message>
    <ts>2017-07-12T12:35:12.493623</ts>
    <user>U060FKQPN</user>
    <text>altho with clojure.core you should be able to avoid eval</text>
  </message>
  <message>
    <ts>2017-07-12T12:35:16.495919</ts>
    <user>U060FKQPN</user>
    <text>as everything is already evaluated</text>
  </message>
  <message>
    <ts>2017-07-12T12:37:05.560990</ts>
    <user>U050R7ECY</user>
    <text>oh, so write an `analyze-ns` that doesn't call analyze+eval?</text>
  </message>
  <message>
    <ts>2017-07-12T12:37:27.574258</ts>
    <user>U060FKQPN</user>
    <text>either that or wait for me to add a :no-eval option to analyze-ns :)</text>
  </message>
  <message>
    <ts>2017-07-12T12:37:58.591934</ts>
    <user>U060FKQPN</user>
    <text>but yeah you can try that for the time being</text>
  </message>
  <message>
    <ts>2017-07-12T12:39:15.637137</ts>
    <user>U060FKQPN</user>
    <text>hm, deftypes might get corrupted as t.a.jvm does an internal eval to set up reflection contexts :( so not as easy as just not using eval</text>
  </message>
  <message>
    <ts>2017-07-12T12:39:35.649369</ts>
    <user>U060FKQPN</user>
    <text>I have to go now but I'll think about it. I'm sure there's a way to make this less painful</text>
  </message>
  <message>
    <ts>2017-07-12T12:46:38.900855</ts>
    <user>U0J9LVB6G</user>
    <text>There's the `map-vals` function from &lt;https://github.com/weavejester/medley&gt;</text>
  </message>
  <message>
    <ts>2017-07-12T13:35:23.663099</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5QCSK76C&gt; the easy way is to install that jar in your local cache (which is `lein install` for lein projects) then you can just add it to your deps</text>
  </message>
  <message>
    <ts>2017-07-12T13:35:43.675088</ts>
    <user>U051SS2EU</user>
    <text>though when you deploy you'll probably need to make sure the deployed jar can find the artifact</text>
  </message>
  <message>
    <ts>2017-07-12T13:36:55.718757</ts>
    <user>U051SS2EU</user>
    <text>which might mean deploying the jar to clojars (for open source you want to share) or might mean building an uberjar on your local machine or hosting a secure private maven repo of your own</text>
  </message>
  <message>
    <ts>2017-07-12T14:35:00.844906</ts>
    <user>U052XLL3A</user>
    <text>In Datomic, I can test my queries on an inline datastructure, like `(d/q '[:find ?e :in ...], [[123 :att :val] [[456 :att :val]])`
Does something similar exist for SQL tables, so that I do not have to spawn a real database for integration tests?</text>
  </message>
  <message>
    <ts>2017-07-12T14:48:33.330752</ts>
    <user>U5YHNV0EA</user>
    <text>How would I add this dependency without using cider? Where would be the best place?</text>
  </message>
  <message>
    <ts>2017-07-12T15:02:45.844840</ts>
    <user>U0NCTKEV8</user>
    <text>there are file back and memory backed sql databases, but none of them are entirely compatible with the popular client/server sql dbs</text>
  </message>
  <message>
    <ts>2017-07-12T15:05:37.943452</ts>
    <user>U0NCTKEV8</user>
    <text>generally, the way I deal with wanting to run things entirely in memory is I create a protocol that represents a set of queries, and then have some kind of in memory store that satisfies that protocol, a long with something that satisfies the protocol for storing in a database,  and swap one for the other in tests or whatever</text>
  </message>
  <message>
    <ts>2017-07-12T15:37:28.988098</ts>
    <user>U0509NKGK</user>
    <text>&lt;@U052XLL3A&gt; did you try the code sample you shared? it should work :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-12T15:40:22.083551</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U052XLL3A&gt; &lt;http://www.h2database.com/html/main.html&gt; is an in-memory Java SQL DB</text>
  </message>
  <message>
    <ts>2017-07-12T15:56:17.608863</ts>
    <user>U06C63VL4</user>
    <text>wouldn't merge-with suffice for this? possibly a bit obscure looking:</text>
  </message>
  <message>
    <ts>2017-07-12T15:57:14.640488</ts>
    <user>U06C63VL4</user>
    <text>`(mege-with (fn[_ v] (some-processing v)) m m)`</text>
  </message>
  <message>
    <ts>2017-07-12T17:24:42.470134</ts>
    <user>U0HM5MJ5V</user>
    <text>&lt;@U052XLL3A&gt; there tend to be enough vendor specific differences between SQL databases that &lt;@U0NCTKEV8&gt;'s solution is the only one i've had success with</text>
  </message>
  <message>
    <ts>2017-07-12T17:25:14.485434</ts>
    <user>U0HM5MJ5V</user>
    <text>worked on a codebase that tried to do sqlite tests with postgres prod and bugs persistently crept in</text>
  </message>
  <message>
    <ts>2017-07-12T17:25:54.504798</ts>
    <user>U04V4HWQ4</user>
    <text>You go to production with the isolation level you have, not the isolation level you want to have.</text>
  </message>
  <message>
    <ts>2017-07-12T18:34:42.170231</ts>
    <user>U0524B4UW</user>
    <text>&lt;@U052XLL3A&gt; docker compose offers a decent way of running integration tests against a throwaway copy of your actual db</text>
  </message>
  <message>
    <ts>2017-07-12T19:37:46.303904</ts>
    <user>U0ALQHJRF</user>
    <text>&lt;https://twitter.com/degree9io/status/885280570204315648&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T02:18:51.023268</ts>
    <user>U3A8CQMGU</user>
    <text>Hi, does task defined using mount (&lt;https://github.com/tolitius/mount&gt;) 's `defstate` and started using `mount/start` running in a new thread or in the main thread? Can I `defstate` a function that blocks the thread ? Thanks.</text>
  </message>
  <message>
    <ts>2017-07-13T03:20:54.967160</ts>
    <user>U5YHX0TQV</user>
    <text>You can even map the directory of your db to a tmpfs speeding it up massively.</text>
  </message>
  <message>
    <ts>2017-07-13T03:43:39.396412</ts>
    <user>U052XLL3A</user>
    <text>&lt;@U0NCTKEV8&gt;  and others: Thanks for the great hints regarding integration-testing and databases! I think docker sounds like an interesting approach.</text>
  </message>
  <message>
    <ts>2017-07-13T04:03:04.800079</ts>
    <user>U3L6TFEJF</user>
    <text>what do you have to do to make reader tags work?</text>
  </message>
  <message>
    <ts>2017-07-13T04:03:25.807844</ts>
    <user>U3L6TFEJF</user>
    <text>I have a `data_readers.clj` in my source dir which looks like `{kh/test kleinheit.pg.impl/maybe-map}`</text>
  </message>
  <message>
    <ts>2017-07-13T04:04:00.820620</ts>
    <user>U3L6TFEJF</user>
    <text>but when I try it out in the REPL I just get
```dev=&amp;gt; #kh/test {:a 1 :b 2}

        java.lang.IllegalStateException: Attempting to call unbound fn: #'kleinheit.pg.impl/maybe-map
clojure.lang.LispReader$ReaderException: java.lang.IllegalStateException: Attempting to call unbound fn: #'kleinheit.pg.impl/maybe-map
```</text>
  </message>
  <message>
    <ts>2017-07-13T08:59:09.187509</ts>
    <user>U0564EGNY</user>
    <text>so, I need a function that takes a nested data structure (only concerned with maps right now) like {:a {:b {:c 1} :d 2}} 
and returns all the paths to leaves: [[:a ::b :c] [:a :d]]… 
not sure where to start</text>
  </message>
  <message>
    <ts>2017-07-13T09:33:12.246717</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U0564EGNY&gt; &lt;https://github.com/nathanmarz/specter&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T09:33:27.255444</ts>
    <user>U3L6TFEJF</user>
    <text>if you ask your question in &lt;#C0FVDQLQ5|specter&gt; I'm sure someone will help you out</text>
  </message>
  <message>
    <ts>2017-07-13T09:33:48.267036</ts>
    <user>U3L6TFEJF</user>
    <text>I'd love to take a look but that will have to be later, I'm at work at the moment</text>
  </message>
  <message>
    <ts>2017-07-13T10:40:43.767235</ts>
    <user>U050KSS8M</user>
    <text>I've been using Clojure for a long time now and one question randomly popped into my head:</text>
  </message>
  <message>
    <ts>2017-07-13T10:41:19.791234</ts>
    <user>U050KSS8M</user>
    <text>is there ANY case where map destructuring of *keys only* can throw an exception?</text>
  </message>
  <message>
    <ts>2017-07-13T10:41:40.804884</ts>
    <user>U050KSS8M</user>
    <text>I know that vector destructuring can throw all sorts of fun stuff :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T10:42:53.853099</ts>
    <user>U050MP39D</user>
    <text>if you pass it something that's not a map</text>
  </message>
  <message>
    <ts>2017-07-13T10:43:19.868948</ts>
    <user>U050KSS8M</user>
    <text>hm … :slightly_smiling_face: really?</text>
  </message>
  <message>
    <ts>2017-07-13T10:43:23.872235</ts>
    <user>U050KSS8M</user>
    <text>=&amp;gt; (let [{:keys [x y]} 1])
nil</text>
  </message>
  <message>
    <ts>2017-07-13T10:43:39.882166</ts>
    <user>U050MP39D</user>
    <text>blows up on my version of clojure</text>
  </message>
  <message>
    <ts>2017-07-13T10:43:42.884396</ts>
    <user>U0DJC1V3R</user>
    <text>`(let [{:keys [a b]} 0])` throws `Can't type hint a primitive local` lol</text>
  </message>
  <message>
    <ts>2017-07-13T10:44:11.903592</ts>
    <user>U050KSS8M</user>
    <text>woah… different in ClojureScript!</text>
  </message>
  <message>
    <ts>2017-07-13T10:44:16.907447</ts>
    <user>U050MP39D</user>
    <text>I (think) it's probably much more likely to blow up in 1.9 with spec too</text>
  </message>
  <message>
    <ts>2017-07-13T10:44:31.916947</ts>
    <user>U050MP39D</user>
    <text>huh, nope. interesting</text>
  </message>
  <message>
    <ts>2017-07-13T10:44:34.919148</ts>
    <user>U050KSS8M</user>
    <text>latest ClojureScript</text>
  </message>
  <message>
    <ts>2017-07-13T10:44:45.926102</ts>
    <user>U050KSS8M</user>
    <text>yes it blows up on Clojure JVM</text>
  </message>
  <message>
    <ts>2017-07-13T10:44:55.932719</ts>
    <user>U050KSS8M</user>
    <text>ok that's very interesting… good to know</text>
  </message>
  <message>
    <ts>2017-07-13T10:44:57.934418</ts>
    <user>U050MP39D</user>
    <text>yeah, blowing up is an implementation detail by the looks</text>
  </message>
  <message>
    <ts>2017-07-13T10:46:05.980223</ts>
    <user>U050MP39D</user>
    <text>```
(macroexpand '(let [{:keys [foo]} 1]))
=&amp;gt;
(let*
 [map__43828
  1
  map__43828
  (if (clojure.core/seq? map__43828) (clojure.lang.PersistentHashMap/create (clojure.core/seq map__43828)) map__43828)
  foo
  (clojure.core/get map__43828 :foo)])
```</text>
  </message>
  <message>
    <ts>2017-07-13T10:46:47.007895</ts>
    <user>U050MP39D</user>
    <text>sooooo maybe if clojure.core/get gets a spec it will start blowing up</text>
  </message>
  <message>
    <ts>2017-07-13T10:47:26.033913</ts>
    <user>U050KSS8M</user>
    <text>that is so very interesting… it's important to think about if your inputs are unpredictable/dynamic</text>
  </message>
  <message>
    <ts>2017-07-13T10:47:57.053511</ts>
    <user>U050MP39D</user>
    <text>if your inputs are unpredictable you're screwed, add a layer that makes them predictable :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-13T10:48:23.071112</ts>
    <user>U050KSS8M</user>
    <text>well yea… but if {:keys []} was NEVER throwing</text>
  </message>
  <message>
    <ts>2017-07-13T10:48:42.083834</ts>
    <user>U050KSS8M</user>
    <text>that layer could just be a (if (nil? x) …) check after</text>
  </message>
  <message>
    <ts>2017-07-13T10:49:10.102374</ts>
    <user>U050KSS8M</user>
    <text>now it's clear that you need a more "proper" check ala-spec, etc</text>
  </message>
  <message>
    <ts>2017-07-13T10:51:23.188843</ts>
    <user>U050MP39D</user>
    <text>yeah definitely, if you have uncertain input then use tools that are made for validating it as data (spec, schema, clojure data functions etc)</text>
  </message>
  <message>
    <ts>2017-07-13T10:52:39.240857</ts>
    <user>U050KSS8M</user>
    <text>yea… I was just calling some JavaScript APIs from ClojureScript, so I assume *everything* there is unpredictable :stuck_out_tongue_closed_eyes:</text>
  </message>
  <message>
    <ts>2017-07-13T10:53:44.284325</ts>
    <user>U050MP39D</user>
    <text>safe assumption</text>
  </message>
  <message>
    <ts>2017-07-13T10:56:13.386623</ts>
    <user>U050KSS8M</user>
    <text>yea…. ok this is actually more interesting than I thought …</text>
  </message>
  <message>
    <ts>2017-07-13T10:56:19.390623</ts>
    <user>U050KSS8M</user>
    <text>((fn [x]
   (let [{:keys [a b]} x]
     a)) 1)</text>
  </message>
  <message>
    <ts>2017-07-13T10:56:29.397367</ts>
    <user>U050KSS8M</user>
    <text>so in this more… *ahem* realistic example</text>
  </message>
  <message>
    <ts>2017-07-13T10:56:34.400520</ts>
    <user>U050KSS8M</user>
    <text>no error!</text>
  </message>
  <message>
    <ts>2017-07-13T10:57:34.442287</ts>
    <user>U050KSS8M</user>
    <text>since we're no longer destructuring a Primitive Local!</text>
  </message>
  <message>
    <ts>2017-07-13T10:58:20.473489</ts>
    <user>U050KSS8M</user>
    <text>but</text>
  </message>
  <message>
    <ts>2017-07-13T10:58:21.474528</ts>
    <user>U050KSS8M</user>
    <text>((fn [^long x]
   (let [{:keys [a b]} x]
     a)) 1)</text>
  </message>
  <message>
    <ts>2017-07-13T10:58:37.486156</ts>
    <user>U050KSS8M</user>
    <text>throws… which is logical given the previous things we just tried</text>
  </message>
  <message>
    <ts>2017-07-13T11:02:15.638085</ts>
    <user>U050KSS8M</user>
    <text>so actually… as long as: 
1. the things you're passing are not literals (which I've never done in real program) 
2. and you don't type hint an unpredictable dynamic thing (highly unlikely but possible to do)
…  it seems that {:keys […]} is actually "safe" from throwing exceptions</text>
  </message>
  <message>
    <ts>2017-07-13T11:03:32.690166</ts>
    <user>U050KSS8M</user>
    <text>not saying that you *should* rely on it lol… I tried looking and I couldn't find any place where it's stated that it's safe… so I assume it can be considered an implementation detail? someone pls correct me if you know better :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T11:12:41.053985</ts>
    <user>U050MP39D</user>
    <text>if it's not documented otherwise then you should consider the behaviour of something when you pass it an unexpected value to be "undefined"</text>
  </message>
  <message>
    <ts>2017-07-13T11:12:57.064558</ts>
    <user>U050MP39D</user>
    <text>ie, will do any random ole shit, and will change between versions and builds and days</text>
  </message>
  <message>
    <ts>2017-07-13T11:13:24.082233</ts>
    <user>U050MP39D</user>
    <text>nature of the beast with a dynamic language</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:07.268772</ts>
    <user>U11BV7MTK</user>
    <text>i'm not sure its the keys part that is throwing. I think you're just doing something Clojure doesn't allow in typehinting :
```
user&amp;gt; (let [^long x 1]
        x)
CompilerException java.lang.UnsupportedOperationException: Can't type hint a local with a primitive initializer, compiling:(*cider-repl employee-resizer*:67:7) 
```</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:15.274491</ts>
    <user>U11BV7MTK</user>
    <text>it's not the keys, that's just not a valid place for a type hint</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:24.279905</ts>
    <user>U050KSS8M</user>
    <text>&lt;@U11BV7MTK&gt; yes that's correct</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:33.285882</ts>
    <user>U050KSS8M</user>
    <text>see my follow up</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:35.287097</ts>
    <user>U11BV7MTK</user>
    <text>ah ok. i thought you were still attributing it to the `:keys` destructuring</text>
  </message>
  <message>
    <ts>2017-07-13T11:18:35.287648</ts>
    <user>U11BV7MTK</user>
    <text>my bad</text>
  </message>
  <message>
    <ts>2017-07-13T11:24:54.538933</ts>
    <user>U0564EGNY</user>
    <text>&lt;@U3L6TFEJF&gt; - I ended up using postwalk with core.match</text>
  </message>
  <message>
    <ts>2017-07-13T11:52:14.630792</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U0564EGNY&gt; nice! mind sharing the solution?</text>
  </message>
  <message>
    <ts>2017-07-13T11:55:13.749612</ts>
    <user>U0564EGNY</user>
    <text>I suppose the map should be mapv</text>
  </message>
  <message>
    <ts>2017-07-13T11:55:25.756706</ts>
    <user>U0564EGNY</user>
    <text>hmm, not sure how this is actually working without that :wink:</text>
  </message>
  <message>
    <ts>2017-07-13T11:56:33.804161</ts>
    <user>U0564EGNY</user>
    <text>oh, and the outer seq needs to be there because our tree may have multiple paths, duh</text>
  </message>
  <message>
    <ts>2017-07-13T11:57:23.837985</ts>
    <user>U0564EGNY</user>
    <text>ok, I have a bug when adding another path in the tree. I'm flattening at the wrong place</text>
  </message>
  <message>
    <ts>2017-07-13T12:11:43.393918</ts>
    <user>U3L6TFEJF</user>
    <text>here's my attempt with Specter:
```
(def TreeValues
  (s/recursive-path [] p
    (s/if-path map?
      [(s/collect-one s/FIRST s/FIRST) s/MAP-VALS p]
      s/STAY)))
```</text>
  </message>
  <message>
    <ts>2017-07-13T12:12:05.406416</ts>
    <user>U3L6TFEJF</user>
    <text>```
user =&amp;gt; (s/select TreeValues m)
[[:a :b :c 1] [:a :b 2]]
user =&amp;gt; (s/select TreeValues {:a {:fields {:b {:options [{:label "foo" :value "bar"}]}}}})
[[:a :fields :b :options [{:label "foo" :value "bar"}]]]
```</text>
  </message>
  <message>
    <ts>2017-07-13T12:12:39.427216</ts>
    <user>U3L6TFEJF</user>
    <text>I haven't figured out yet how to not include the leaf itself</text>
  </message>
  <message>
    <ts>2017-07-13T12:15:26.529198</ts>
    <user>U0564EGNY</user>
    <text>map over the results with `butlast`</text>
  </message>
  <message>
    <ts>2017-07-13T12:16:34.570632</ts>
    <user>U3L6TFEJF</user>
    <text>just noticed that mine is not correct either, I get `[:a :b 2]` instead of `[:a :d 2]`</text>
  </message>
  <message>
    <ts>2017-07-13T12:34:05.202598</ts>
    <user>U0J9LVB6G</user>
    <text>&lt;@U0564EGNY&gt; Here's one implementation.

```
(defn all-paths [m]
  (letfn [(step [acc current-path x]
            (reduce-kv (fn [acc k v]
                         (let [path (conj current-path k)]
                           (if (map? v)
                             (step acc path v)
                             (conj acc path))))
                       acc, x))]
    (step [] [] m)))

(all-paths {:a {:b {:c 1} :d 2}}) ;=&amp;gt; [[:a :b :c] [:a :d]]
```</text>
  </message>
  <message>
    <ts>2017-07-13T12:35:02.235789</ts>
    <user>U0564EGNY</user>
    <text>thanks, I'll try that on my data set</text>
  </message>
  <message>
    <ts>2017-07-13T12:50:32.774793</ts>
    <user>U071CG4QY</user>
    <text>&lt;https://stackoverflow.com/questions/21768802/how-can-i-get-the-nested-keys-of-a-map-in-clojure&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T12:51:56.824298</ts>
    <user>U3L6TFEJF</user>
    <text>sweet, there you have a working version of what I was trying to do:
```(def TreeValues
  (s/recursive-path [] p
    (s/if-path map?
       [s/ALL (s/collect-one s/FIRST) s/LAST p]
       s/STAY)))

user=&amp;gt; (map butlast (s/select TreeValues {:a {:b {:c 1} :d 2}}))
((:a :b :c) (:a :d))
```</text>
  </message>
  <message>
    <ts>2017-07-13T13:42:13.612407</ts>
    <user>U3JURM9B6</user>
    <text>what is the best data format for exchanging data between clojure and python?</text>
  </message>
  <message>
    <ts>2017-07-13T13:44:15.686168</ts>
    <user>U064X3EF3</user>
    <text>depends on what your needs are, but you should look at &lt;https://github.com/cognitect/transit-format&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T14:29:18.306615</ts>
    <user>U1Z5X06NP</user>
    <text>hey, has anybody ever had trouble requiring clj-time.types in a ns? I have the latest version from clojars but I get an exception when I compile complaining the ns clj-time.types doesn't exist or can't be found on the class path.</text>
  </message>
  <message>
    <ts>2017-07-13T14:29:46.324094</ts>
    <user>U1Z5X06NP</user>
    <text>the namespace clearly exists tho in the github repo</text>
  </message>
  <message>
    <ts>2017-07-13T14:31:45.398607</ts>
    <user>U0NCTKEV8</user>
    <text>yeah, but the latest in git doesn't have to match the latest jar on clojars</text>
  </message>
  <message>
    <ts>2017-07-13T14:33:03.446241</ts>
    <user>U0NCTKEV8</user>
    <text>there are also a few clj-time artifacts on clojars, are you sure you are using the one that maps to the github repo you are looking at?</text>
  </message>
  <message>
    <ts>2017-07-13T14:33:51.475004</ts>
    <user>U0NCTKEV8</user>
    <text>you should check `lein deps :tree`</text>
  </message>
  <message>
    <ts>2017-07-13T14:34:42.505049</ts>
    <user>U0NCTKEV8</user>
    <text>if any of your dependencies require one of these other clj-time artifacts (which unfortunately likely have the same namespace names) you will get all kinds of weird behavior</text>
  </message>
  <message>
    <ts>2017-07-13T14:34:58.514355</ts>
    <user>U1Z5X06NP</user>
    <text>I followed the clojars link on github, maybe they just didn't push a newer artifact to maven?</text>
  </message>
  <message>
    <ts>2017-07-13T14:35:33.535234</ts>
    <user>U1Z5X06NP</user>
    <text>er</text>
  </message>
  <message>
    <ts>2017-07-13T14:35:36.536852</ts>
    <user>U1Z5X06NP</user>
    <text>clojars</text>
  </message>
  <message>
    <ts>2017-07-13T14:36:24.565161</ts>
    <user>U1Z5X06NP</user>
    <text>ahah</text>
  </message>
  <message>
    <ts>2017-07-13T14:36:27.566962</ts>
    <user>U1Z5X06NP</user>
    <text>that's exactly</text>
  </message>
  <message>
    <ts>2017-07-13T14:36:28.567329</ts>
    <user>U0NCTKEV8</user>
    <text>could be, you also haven't shared the exception you are getting, clj-time.types could be failing to load because something is</text>
  </message>
  <message>
    <ts>2017-07-13T14:36:28.567491</ts>
    <user>U1Z5X06NP</user>
    <text>it</text>
  </message>
  <message>
    <ts>2017-07-13T14:37:01.586467</ts>
    <user>U1Z5X06NP</user>
    <text>Nah, the last push to clojars was in Dec. 2016, the change I want was added in march 2017</text>
  </message>
  <message>
    <ts>2017-07-13T14:40:21.704178</ts>
    <user>U1Z5X06NP</user>
    <text>crisis averted, I guess.</text>
  </message>
  <message>
    <ts>2017-07-13T14:54:58.221063</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U1Z5X06NP&gt; We'll be releasing a new `clj-time` very soon. I've been meaning to get to that for a week or two!</text>
  </message>
  <message>
    <ts>2017-07-13T14:55:47.250569</ts>
    <user>U1Z5X06NP</user>
    <text>&lt;@U04V70XH6&gt; , oh cool, I didn't even realize you we're in this channel! :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-13T14:57:07.297018</ts>
    <user>U04V70XH6</user>
    <text>Here's all the fun new stuff &lt;https://github.com/clj-time/clj-time/compare/86acab8a122e3229a2e5337075f52b6f75ae4584...master&gt; -- I think I'll make it 0.14.0 when I do it (hopefully in the next few days).</text>
  </message>
  <message>
    <ts>2017-07-13T15:32:28.477550</ts>
    <user>U0E0XL064</user>
    <text>clojure and jdbc... there seem to be 2 libs: `clojure.java.jdbc` and `clojure.jdbc`. Anyone any experience reports? Reasons why using one over the other? ...?</text>
  </message>
  <message>
    <ts>2017-07-13T15:40:00.718682</ts>
    <user>U050ECB92</user>
    <text>the first one is the standard one.  the second one's name is unfortunate</text>
  </message>
  <message>
    <ts>2017-07-13T15:52:26.119751</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0E0XL064&gt; I'm the maintainer of the standard (contrib) one: `clojure.java.jdbc` and we use it extremely heavily at work (with MySQL) for large volumes of data/queries.</text>
  </message>
  <message>
    <ts>2017-07-13T15:53:57.169412</ts>
    <user>U04V70XH6</user>
    <text>It's also tested against MS SQL Server (both MS driver and jTDS), PostgreSQL (both Postgres and Impossibl drivers), and H2, SQLite, Derby etc. There are Oracle and Terabase(?) users of it too. It's what most other JDBC wrapper libraries use under the hood.</text>
  </message>
  <message>
    <ts>2017-07-13T15:54:13.177820</ts>
    <user>U04V70XH6</user>
    <text>If you run into any issues with it, feel free to ask in the &lt;#C1Q164V29|sql&gt; channel.</text>
  </message>
  <message>
    <ts>2017-07-13T15:54:21.182304</ts>
    <user>U0E0XL064</user>
    <text>Right... Thx.</text>
  </message>
  <message>
    <ts>2017-07-13T15:56:52.265392</ts>
    <user>U0E0XL064</user>
    <text>:)</text>
  </message>
  <message>
    <ts>2017-07-13T16:01:04.406866</ts>
    <user>U04V70XH6</user>
    <text>You can also see from this initial commit that the author basically copied `clojure.java.jdbc` (without permission and without attribution -- I took him to task on the mailing list for that!): &lt;https://github.com/funcool/clojure.jdbc/commit/dfb16894734c2a95838cd5f5b3fef3e63ac1c4bf&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T16:01:53.434298</ts>
    <user>U04V70XH6</user>
    <text>In later commits he added some acknowledge of code he'd taken from `clojure.java.jdbc` and he did, over time, substantially rewrite the code base.</text>
  </message>
  <message>
    <ts>2017-07-13T16:03:14.479555</ts>
    <user>U04V70XH6</user>
    <text>(but, yeah, years later I'm still pretty annoyed about it)</text>
  </message>
  <message>
    <ts>2017-07-13T16:23:46.137067</ts>
    <user>U0W0JDY4C</user>
    <text>a list isn't IAssociative, but I want to update a list with deeply nested values somehow like:
```
(def L '( '( '( :a :b '( :c :d '( 'needs-updating )))))
(update-in L [0 0 1 1] fn)
```
now it's easy to do if the lists are vectors… but given that most-everything defaults to a list after running some process (map filter reduce etc.), I wonder whats the better way to do this that works for a more general `seq`?</text>
  </message>
  <message>
    <ts>2017-07-13T16:24:33.162601</ts>
    <user>U051SS2EU</user>
    <text>if you need associative updates, don't use lazy operations for modification - map, filter, etc all provide transducers that can make vectors</text>
  </message>
  <message>
    <ts>2017-07-13T16:25:38.197742</ts>
    <user>U0W0JDY4C</user>
    <text>so pour things `into []` or use `vec-*` for map/filter/etc.?</text>
  </message>
  <message>
    <ts>2017-07-13T16:25:54.206938</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U1Z5X06NP&gt; `clj-time` 0.14.0 is available &lt;https://github.com/clj-time/clj-time/releases/tag/v0.14.0&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T16:26:32.227126</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; right - but especially when chaining operations into with composed transducers is a better option</text>
  </message>
  <message>
    <ts>2017-07-13T16:26:49.236448</ts>
    <user>U051SS2EU</user>
    <text>and I don't think it's vec-*, it's *v</text>
  </message>
  <message>
    <ts>2017-07-13T16:27:02.243613</ts>
    <user>U051SS2EU</user>
    <text>(and not all of the foov exist - but filterv and mapv do at least)</text>
  </message>
  <message>
    <ts>2017-07-13T16:27:06.245784</ts>
    <user>U1Z5X06NP</user>
    <text>&lt;@U04V70XH6&gt; awesome!</text>
  </message>
  <message>
    <ts>2017-07-13T16:27:22.254302</ts>
    <user>U0W0JDY4C</user>
    <text>ah, it's `*v` yea … but why is into a better option? does it preserve laziness?</text>
  </message>
  <message>
    <ts>2017-07-13T16:27:34.261129</ts>
    <user>U051SS2EU</user>
    <text>no - vectors cannot be lazy</text>
  </message>
  <message>
    <ts>2017-07-13T16:27:55.272265</ts>
    <user>U051SS2EU</user>
    <text>by composing transducers you avoid creating intermediate data (which does nothing but create gc churn)</text>
  </message>
  <message>
    <ts>2017-07-13T16:30:33.359120</ts>
    <user>U0W0JDY4C</user>
    <text>hm, not totally following you but that's okay. i know `(comp a b c)` will produce a transducer. are you saying there's a way to do `into [] some-fn` where it doesnt use a transducer?</text>
  </message>
  <message>
    <ts>2017-07-13T16:30:56.371534</ts>
    <user>U051SS2EU</user>
    <text>no - and comp doesn't generate a transducer unless its args are transducers</text>
  </message>
  <message>
    <ts>2017-07-13T16:31:38.393869</ts>
    <user>U051SS2EU</user>
    <text>if you call `(filterv pred? (mapv f coll))` that generates a vector you don't need</text>
  </message>
  <message>
    <ts>2017-07-13T16:32:10.411381</ts>
    <user>U051SS2EU</user>
    <text>if you use `(into [] (comp (map f) (filter pred?)) coll)` you get the same result without creating a data structure nobody uses</text>
  </message>
  <message>
    <ts>2017-07-13T16:32:48.431646</ts>
    <user>U0W0JDY4C</user>
    <text>ooof. so much to learn I do have. thanks for the tips :yoda:</text>
  </message>
  <message>
    <ts>2017-07-13T16:33:23.450994</ts>
    <user>U051SS2EU</user>
    <text>you can still get the right answer without composing the transducers, and it's easy to change once you know how they work</text>
  </message>
  <message>
    <ts>2017-07-13T16:35:08.507714</ts>
    <user>U051SS2EU</user>
    <text>but back to the original question, if you need to do updates by index, keep things in associative collections, there are good options for making them but you don't need to do it the optimal way on the first pass through</text>
  </message>
  <message>
    <ts>2017-07-13T16:35:38.523694</ts>
    <user>U28TJ0DDZ</user>
    <text>what's your favorite logger library and why ?</text>
  </message>
  <message>
    <ts>2017-07-13T16:38:58.630360</ts>
    <user>U0NCTKEV8</user>
    <text>I tend to use tools.logging on top of log4j2. it works great, just about every other routing framework can be rerouted to log4j2</text>
  </message>
  <message>
    <ts>2017-07-13T16:41:03.698047</ts>
    <user>U0NCTKEV8</user>
    <text>the dependencies for that are something like ```
                 [org.apache.logging.log4j/log4j-core "2.8"]                                                                                                                                                                                   
                 [org.apache.logging.log4j/log4j-slf4j-impl "2.8"]                                                                                                                                                                             
                 [org.apache.logging.log4j/log4j-jul "2.8"]                                                                                                                                                                                    
                 [org.clojure/tools.logging "0.3.1"] 
```</text>
  </message>
  <message>
    <ts>2017-07-13T16:42:19.738758</ts>
    <user>U0NCTKEV8</user>
    <text>since you were asking about pedestal logging on irc, last I checked(years ago), it was a simple wrapper on log4j</text>
  </message>
  <message>
    <ts>2017-07-13T16:43:05.762735</ts>
    <user>U0NCTKEV8</user>
    <text>my mistake, it is a wrapper on slf4j</text>
  </message>
  <message>
    <ts>2017-07-13T16:47:31.905381</ts>
    <user>U66G3SGP5</user>
    <text>when accessing nested maps, do you guys prefer (-&amp;gt; a-map :a :d :c) or (get-in a-map [:a :d :c]) ?</text>
  </message>
  <message>
    <ts>2017-07-13T16:48:22.932749</ts>
    <user>U04V4HWQ4</user>
    <text>`get-in`</text>
  </message>
  <message>
    <ts>2017-07-13T16:51:01.016229</ts>
    <user>U0NCTKEV8</user>
    <text>I think most people prefer `get-in`</text>
  </message>
  <message>
    <ts>2017-07-13T16:51:10.021066</ts>
    <user>U0NCTKEV8</user>
    <text>I like the uniformity of `-&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-07-13T16:51:28.030803</ts>
    <user>U0NCTKEV8</user>
    <text>you can stick some functions in there</text>
  </message>
  <message>
    <ts>2017-07-13T16:52:01.048517</ts>
    <user>U0NCTKEV8</user>
    <text>`-&amp;gt;` may also be faster if you are dealing with nested records</text>
  </message>
  <message>
    <ts>2017-07-13T16:53:06.082874</ts>
    <user>U0NCTKEV8</user>
    <text>`-&amp;gt;` is a syntax short cut, it is gone at runtime, `get-in` is actually a function and will run and exist at runtime</text>
  </message>
  <message>
    <ts>2017-07-13T16:53:30.095394</ts>
    <user>U0NCTKEV8</user>
    <text>and you have this key vector that has to exist at runtime</text>
  </message>
  <message>
    <ts>2017-07-13T16:55:14.149180</ts>
    <user>U050ECB92</user>
    <text>I'll add one consideration: keyword accesses add quite a bit of bytecode `(-&amp;gt; :a :b :c :d)`</text>
  </message>
  <message>
    <ts>2017-07-13T16:55:42.164831</ts>
    <user>U050ECB92</user>
    <text>probably won't matter tho -- but if you care about jvm inlining i'd look into it</text>
  </message>
  <message>
    <ts>2017-07-13T16:57:01.206398</ts>
    <user>U0NCTKEV8</user>
    <text>sure, but at that point do you want to be dealing with nested maps?</text>
  </message>
  <message>
    <ts>2017-07-13T16:57:57.235922</ts>
    <user>U173SEFUN</user>
    <text>&lt;@U0W0JDY4C&gt; you can do that with specter very easily:
```
(def L '(((:a :b (:c :d (10))))))
(transform (nthpath 0 0 2 2 0) inc L)
;; =&amp;gt; (((:a :b (:c :d (11)))))
```</text>
  </message>
  <message>
    <ts>2017-07-13T16:58:21.248539</ts>
    <user>U1CTH1TUY</user>
    <text>I prefer `get-in` because it makes the intention clear, we know that the first argument is a map, and that the second argument is a path. That information is lost with `-&amp;gt;`, also, that means you can't pull the path, `[:b :c :d]` from a data source or generate it without your own macro, because you can't apply to `-&amp;gt;`</text>
  </message>
  <message>
    <ts>2017-07-13T16:59:00.268706</ts>
    <user>U0NCTKEV8</user>
    <text>sure, that is the flip side to what I said about the key vector</text>
  </message>
  <message>
    <ts>2017-07-13T16:59:41.290462</ts>
    <user>U0NCTKEV8</user>
    <text>if it is constant and known at compile time (which it seems like it almost always is) then keeping it around at runtime is (admittedly an insignificant) waste</text>
  </message>
  <message>
    <ts>2017-07-13T17:12:24.676321</ts>
    <user>U050ECB92</user>
    <text>true that</text>
  </message>
  <message>
    <ts>2017-07-13T17:33:48.272051</ts>
    <user>U0W0JDY4C</user>
    <text>specter keeps popping up here and there with some nice solutions.. i'll have to look more closely around its api</text>
  </message>
  <message>
    <ts>2017-07-13T17:34:53.302541</ts>
    <user>U3JURM9B6</user>
    <text>&lt;https://aws.amazon.com/lambda/faqs/&gt; &amp;lt;-- java is listed as supporrted language; does this mean one can do "clojure -&amp;gt; java" for lambda instead of "cljs -&amp;gt; js" ?</text>
  </message>
  <message>
    <ts>2017-07-13T17:40:55.474519</ts>
    <user>U050MP39D</user>
    <text>&lt;@U3JURM9B6&gt; my guess is that startup times might be problematic for many lambda use cases</text>
  </message>
  <message>
    <ts>2017-07-13T17:41:15.482978</ts>
    <user>U050MP39D</user>
    <text>but yes, you definitely *could*</text>
  </message>
  <message>
    <ts>2017-07-13T17:41:19.484843</ts>
    <user>U116D37KN</user>
    <text>Both clj and cljs can be used, but yeah, startup times become a thing.</text>
  </message>
  <message>
    <ts>2017-07-13T17:41:45.496141</ts>
    <user>U050MP39D</user>
    <text>just a lot of the use cases I can think of for lambda, a very fast starting VM such as the js vm is more appropriate than jvm+clj</text>
  </message>
  <message>
    <ts>2017-07-13T17:42:26.513506</ts>
    <user>U0NCTKEV8</user>
    <text>to be clear, by java they mean jvm, clojure doesn't compile to java like clojurescript compiles to javascript</text>
  </message>
  <message>
    <ts>2017-07-13T17:42:38.518631</ts>
    <user>U0NCTKEV8</user>
    <text>clojure generates jvm byte code</text>
  </message>
  <message>
    <ts>2017-07-13T17:43:20.536068</ts>
    <user>U050MP39D</user>
    <text>and with the incredible support cljs has for the node ecosystem these days... I would choose whichever vm makes the most sense for the scenario. which is a pretty amazing thing to be able to choose while keeping the language constant :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-13T17:43:34.542174</ts>
    <user>U3GJHS5DY</user>
    <text>&lt;https://aws.amazon.com/blogs/compute/clojure/&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T17:43:47.547427</ts>
    <user>U3GJHS5DY</user>
    <text>relevant ^ though im sure most have seen it</text>
  </message>
  <message>
    <ts>2017-07-13T17:44:52.574530</ts>
    <user>U3JURM9B6</user>
    <text>zylox: thanks for link, first time I'm seeing it</text>
  </message>
  <message>
    <ts>2017-07-13T17:45:30.590464</ts>
    <user>U1CTH1TUY</user>
    <text>&lt;@U3JURM9B6&gt; &lt;@U050MP39D&gt; the data from this talk suggest it might not be as big of a deal as you'd assume (if you are running lambdas frequently enough to limit cold starts): &lt;https://www.youtube.com/watch?v=GINI0T8FPD4&gt;</text>
  </message>
  <message>
    <ts>2017-07-13T17:45:50.599382</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure&gt; just gets larger and larger</text>
  </message>
  <message>
    <ts>2017-07-13T17:46:33.617079</ts>
    <user>U050MP39D</user>
    <text>&lt;@U1CTH1TUY&gt; yes! true. my assumption is that most people using lambda are using it for reasonably infrequent operations (to take advantage of paying for only what you use). but if that's not the case then clj could be perfectly fine</text>
  </message>
  <message>
    <ts>2017-07-13T17:47:41.645355</ts>
    <user>U0NCTKEV8</user>
    <text>somethings I know are different between clojure and clojurescript because I follow the jira issues aren't even on the list yet</text>
  </message>
  <message>
    <ts>2017-07-13T17:54:30.822441</ts>
    <user>U3JURM9B6</user>
    <text>actually I'm using it to not think about scaling</text>
  </message>
  <message>
    <ts>2017-07-13T17:54:46.829142</ts>
    <user>U3JURM9B6</user>
    <text>i.e. if my problem can be decomposed into an 'obviously parallel' setup, then AWS just scales everything for me</text>
  </message>
  <message>
    <ts>2017-07-13T17:54:53.831875</ts>
    <user>U3JURM9B6</user>
    <text>and I no longer think at the grainualarity of machines</text>
  </message>
  <message>
    <ts>2017-07-13T18:39:20.778297</ts>
    <user>U1ACUMJKX</user>
    <text>if you create a language binding to a library written in another language</text>
  </message>
  <message>
    <ts>2017-07-13T18:39:23.779088</ts>
    <user>U1ACUMJKX</user>
    <text>how do you license it?</text>
  </message>
  <message>
    <ts>2017-07-13T18:39:40.784722</ts>
    <user>U1ACUMJKX</user>
    <text>do you keep the license of the source library?</text>
  </message>
  <message>
    <ts>2017-07-13T18:45:37.896950</ts>
    <user>U1CTH1TUY</user>
    <text>depends on the license of the source library. If you aren't distributing their library, you might be able to license it however you want. Not something that can be answered in the abstract</text>
  </message>
  <message>
    <ts>2017-07-14T06:44:25.154130</ts>
    <user>U0LUEAS3Z</user>
    <text>Hi all, I'd like to fan out the same input sequence to several transducers and collect the results into a single sequence... is there a function for that?</text>
  </message>
  <message>
    <ts>2017-07-14T09:45:20.968631</ts>
    <user>U60259LCB</user>
    <text>Any one experience with Lanterna?  I'm looking into making a snake game, and would like to know if it can do a non blocking ui</text>
  </message>
  <message>
    <ts>2017-07-14T09:59:04.410330</ts>
    <user>U06CM8C3V</user>
    <text>&lt;@U60259LCB&gt; I believe it does, haven't used it in a while, but I see from the docs it has both `get-key` and `get-key-blocking` — the first returns nil if there's no keypress waiting to be read.</text>
  </message>
  <message>
    <ts>2017-07-14T10:41:29.880686</ts>
    <user>U5NAUMCAD</user>
    <text>Hi all, Is there any way to mock a function in clojure. For example I have this function: 
``` (defn a [x]
        (utils/count x)) ```

I need to write a test, but I do not know how to mock the utils/count  (for example)</text>
  </message>
  <message>
    <ts>2017-07-14T10:42:25.912815</ts>
    <user>U5NAUMCAD</user>
    <text>what if I have several functions inside the same function and I need to test it</text>
  </message>
  <message>
    <ts>2017-07-14T10:42:43.922903</ts>
    <user>U5NAUMCAD</user>
    <text>``` (defn a [x]
        (utils/count x)
        (utils/count2 x)
        (test/other x)) ```</text>
  </message>
  <message>
    <ts>2017-07-14T10:45:15.012375</ts>
    <user>U1G9D4WE7</user>
    <text>&lt;@U5NAUMCAD&gt;, you can use `with-redefs` to "re-bind" a symbol</text>
  </message>
  <message>
    <ts>2017-07-14T10:45:25.018565</ts>
    <user>U1G9D4WE7</user>
    <text>here is a useful testing pattern: &lt;https://stackoverflow.com/questions/31157889/clojure-unit-testing-with-redefs#31309070&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T10:45:39.026780</ts>
    <user>U11BV7MTK</user>
    <text>but in that function there's nothing to test</text>
  </message>
  <message>
    <ts>2017-07-14T10:45:48.032370</ts>
    <user>U11BV7MTK</user>
    <text>it sounds like you want to test `utils/count`</text>
  </message>
  <message>
    <ts>2017-07-14T10:46:01.039772</ts>
    <user>U5NAUMCAD</user>
    <text>it is an example!</text>
  </message>
  <message>
    <ts>2017-07-14T10:46:08.043366</ts>
    <user>U11BV7MTK</user>
    <text>gotcha. just making sure</text>
  </message>
  <message>
    <ts>2017-07-14T10:46:32.057719</ts>
    <user>U5NAUMCAD</user>
    <text>:smiley:</text>
  </message>
  <message>
    <ts>2017-07-14T10:46:42.064983</ts>
    <user>U11BV7MTK</user>
    <text>how many dependencies are in it?</text>
  </message>
  <message>
    <ts>2017-07-14T10:49:56.182981</ts>
    <user>U11BV7MTK</user>
    <text>i'm saying that because if its not too many, i would make a function that accepts those and calls them inside it self, and you can create your production one with `(create-a [count count2 other] (fn a [x] (utils/count ...)))`</text>
  </message>
  <message>
    <ts>2017-07-14T10:50:06.189182</ts>
    <user>U11BV7MTK</user>
    <text>and then you can test that with just passing in your own mocks</text>
  </message>
  <message>
    <ts>2017-07-14T10:50:14.194085</ts>
    <user>U11BV7MTK</user>
    <text>but this doesn't work if there are quite a few functions required</text>
  </message>
  <message>
    <ts>2017-07-14T10:51:06.226161</ts>
    <user>U0EHU1800</user>
    <text>I'm looking for a way to remove/clear protocol implementations during testing. Is there a common way of doing this? I came across mention in Stuart Sierra's LazyTest where he says his method is broken. &lt;https://github.com/stuartsierra/lazytest/blob/master/modules/clojure-language-tests/test/clojure/test_clojure/protocols.clj#L18-L28&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T10:52:53.290559</ts>
    <user>U0EHU1800</user>
    <text>Looking in Clojure core, I suspect something similar to that would work: &lt;https://github.com/clojure/clojure/blob/f572a60262852af68cdb561784a517143a5847cf/src/clj/clojure/core_deftype.clj#L791&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T10:53:15.303528</ts>
    <user>U0EHU1800</user>
    <text>I'd rather not reinvent the wheel if someone has something for this already.</text>
  </message>
  <message>
    <ts>2017-07-14T11:16:29.149266</ts>
    <user>U051SS2EU</user>
    <text>@grzrm so your test needs to eliminate the extensions of your protocol?</text>
  </message>
  <message>
    <ts>2017-07-14T11:22:49.374460</ts>
    <user>U0EHU1800</user>
    <text>yup. The library I'm testing provides alternative implementations, so I'm testing each one. Right now I'm running separate test suites, but that's a bit of a hassle.</text>
  </message>
  <message>
    <ts>2017-07-14T11:23:42.406295</ts>
    <user>U051SS2EU</user>
    <text>why do other extensions need to be deleted? can't the individual extensions be tested independently of one another?</text>
  </message>
  <message>
    <ts>2017-07-14T11:23:58.415847</ts>
    <user>U051SS2EU</user>
    <text>do you mean it's two extensions of one type to a protocol?</text>
  </message>
  <message>
    <ts>2017-07-14T11:24:43.442582</ts>
    <user>U0EHU1800</user>
    <text>If I have two different implementations on, say, IMap, only one takes effect.</text>
  </message>
  <message>
    <ts>2017-07-14T11:24:51.447606</ts>
    <user>U051SS2EU</user>
    <text>on one type?</text>
  </message>
  <message>
    <ts>2017-07-14T11:24:51.447726</ts>
    <user>U0EHU1800</user>
    <text>yes.</text>
  </message>
  <message>
    <ts>2017-07-14T11:24:53.449083</ts>
    <user>U051SS2EU</user>
    <text>OK</text>
  </message>
  <message>
    <ts>2017-07-14T11:25:25.468049</ts>
    <user>U051SS2EU</user>
    <text>my temptation would be to either replace the type or protocol when testing</text>
  </message>
  <message>
    <ts>2017-07-14T11:25:56.486988</ts>
    <user>U051SS2EU</user>
    <text>because clearly both implementors can't own both the type and the protocol, which would be good reason to make it modular…</text>
  </message>
  <message>
    <ts>2017-07-14T11:28:19.573310</ts>
    <user>U0EHU1800</user>
    <text>I'm not following. In this case the I'm trying to test specifically the implementation on that type. Swapping it out, like for a mock, would defeat the purpose in this case.</text>
  </message>
  <message>
    <ts>2017-07-14T11:29:36.619897</ts>
    <user>U051SS2EU</user>
    <text>it could be as simple as a proxy that uses proxy-super for every method you call</text>
  </message>
  <message>
    <ts>2017-07-14T11:30:01.634055</ts>
    <user>U0EHU1800</user>
    <text>Can you elaborate?</text>
  </message>
  <message>
    <ts>2017-07-14T11:30:45.661762</ts>
    <user>U0EHU1800</user>
    <text>Or point to a reference of what you're getting at?</text>
  </message>
  <message>
    <ts>2017-07-14T11:33:58.780008</ts>
    <user>U051SS2EU</user>
    <text>```user=&amp;gt; (str (proxy [Object] [] (toString [] (proxy-super toString))))
"user.proxy$java.lang.Object$ff19274a@6e0ed78c"
```</text>
  </message>
  <message>
    <ts>2017-07-14T11:34:12.788204</ts>
    <user>U051SS2EU</user>
    <text>you extend the supertype, and call the supertype's method on method calls</text>
  </message>
  <message>
    <ts>2017-07-14T11:34:22.794531</ts>
    <user>U051SS2EU</user>
    <text>it's a different class, but has the same behaviors</text>
  </message>
  <message>
    <ts>2017-07-14T11:34:56.815078</ts>
    <user>U051SS2EU</user>
    <text>another alternative is to use composition (a deftype with a Foo, which re-calls every method on that Foo)</text>
  </message>
  <message>
    <ts>2017-07-14T11:36:37.874486</ts>
    <user>U0EHU1800</user>
    <text>Thanks for the alternatives. I'll ponder those for a bit to see if I can make them work. Cheers!</text>
  </message>
  <message>
    <ts>2017-07-14T12:33:40.823735</ts>
    <user>U0CKDHF4L</user>
    <text>what's wrong with this spec expression that it doesn't return an explanation ? ```(s/explain (s/cat :this (s/* (s/coll-of :q/o)) :that :q/test-map) '((7 3 1) (9 7 3) {:q/b [2 4 6] :q/c ["abc" "xyz"] :q/d [:q :w] :q/a [1 3 5]}))
IllegalArgumentException Argument must be an integer: [:q/b [2 4 6]]  clojure.core/even? (core.clj:1383)```</text>
  </message>
  <message>
    <ts>2017-07-14T12:34:20.845218</ts>
    <user>U0CKDHF4L</user>
    <text>...each part of the s/cat works: ```(s/explain (s/cat :this (s/* (s/coll-of :q/o))) '((7 3 1) (9 7 3)))
Success!```</text>
  </message>
  <message>
    <ts>2017-07-14T12:34:52.862509</ts>
    <user>U0CKDHF4L</user>
    <text>```(s/explain (s/cat :that :q/test-map) '({:q/b [2 4 6] :q/c ["abc" "xyz"] :q/d [:q :w] :q/a [1 3 5]}))
Success!```</text>
  </message>
  <message>
    <ts>2017-07-14T12:36:07.900999</ts>
    <user>U0CKDHF4L</user>
    <text>(where ```(s/def :q/test-map (s/keys :req [:q/b :q/a] :opt [:q/c :q/d]))``` and the various keys :q/a etc are simple ```odd? even? string? keyword?```</text>
  </message>
  <message>
    <ts>2017-07-14T12:36:15.905422</ts>
    <user>U0NCTKEV8</user>
    <text>even? isn't total</text>
  </message>
  <message>
    <ts>2017-07-14T12:36:44.920616</ts>
    <user>U0NCTKEV8</user>
    <text>it throws an exception if something isn't a number</text>
  </message>
  <message>
    <ts>2017-07-14T12:37:07.932261</ts>
    <user>U0NCTKEV8</user>
    <text>so you need something like (s/and number? even?)</text>
  </message>
  <message>
    <ts>2017-07-14T12:37:56.957287</ts>
    <user>U0CKDHF4L</user>
    <text>sorry I should have said :q/a and q:b are ```(s/+ odd?)``` and ```(s/+ even?)```</text>
  </message>
  <message>
    <ts>2017-07-14T12:39:18.000431</ts>
    <user>U0NCTKEV8</user>
    <text>what is :q/o ?</text>
  </message>
  <message>
    <ts>2017-07-14T12:39:32.007711</ts>
    <user>U0CKDHF4L</user>
    <text>```(s/def :q/o odd?)```</text>
  </message>
  <message>
    <ts>2017-07-14T12:39:36.009844</ts>
    <user>U0NCTKEV8</user>
    <text>so the way s/* can tell it is done matching is something fails to match</text>
  </message>
  <message>
    <ts>2017-07-14T12:39:41.012641</ts>
    <user>U0NCTKEV8</user>
    <text>yeah, odd? isn't total</text>
  </message>
  <message>
    <ts>2017-07-14T12:39:49.016803</ts>
    <user>U6902JG68</user>
    <text>Hey guys can someone help with this problem, I am new to clojure, may be I am missing something:
&lt;https://stackoverflow.com/questions/45107883/clojure-reducers-foldcat-not-working&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T12:39:52.018113</ts>
    <user>U0NCTKEV8</user>
    <text>(s/and number? odd?)</text>
  </message>
  <message>
    <ts>2017-07-14T12:40:08.026843</ts>
    <user>U0CKDHF4L</user>
    <text>what do you mean by "total" ?</text>
  </message>
  <message>
    <ts>2017-07-14T12:40:50.049172</ts>
    <user>U04V70XH6</user>
    <text>I suspect the problem here is that `s/+` is a regex matcher, not a collection matcher...?</text>
  </message>
  <message>
    <ts>2017-07-14T12:41:13.061145</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0CKDHF4L&gt; &lt;http://mathworld.wolfram.com/TotalFunction.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T12:41:19.064458</ts>
    <user>U04V70XH6</user>
    <text>Change `:q/b` to `(s/coll-of even?)`</text>
  </message>
  <message>
    <ts>2017-07-14T12:41:39.075117</ts>
    <user>U04V70XH6</user>
    <text>(you can specify a minimum length of 1 to require at least one element)</text>
  </message>
  <message>
    <ts>2017-07-14T12:41:39.075298</ts>
    <user>U0NCTKEV8</user>
    <text>that'll be the next issue, which will get him a weird failing spec</text>
  </message>
  <message>
    <ts>2017-07-14T12:42:23.097994</ts>
    <user>U0NCTKEV8</user>
    <text>right now the error from feeding a non-number to odd? is bubbling out and killing the checking</text>
  </message>
  <message>
    <ts>2017-07-14T12:42:40.106981</ts>
    <user>U04V70XH6</user>
    <text>Ah, I see where you're going now. I was jumping ahead.</text>
  </message>
  <message>
    <ts>2017-07-14T12:43:00.117073</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0CKDHF4L&gt; "total" means "defined for all inputs"</text>
  </message>
  <message>
    <ts>2017-07-14T12:43:19.126433</ts>
    <user>U04V70XH6</user>
    <text>`even?` and `odd?` are only defined for numeric inputs.</text>
  </message>
  <message>
    <ts>2017-07-14T12:43:39.136949</ts>
    <user>U04V70XH6</user>
    <text>Hence &lt;@U0NCTKEV8&gt;'s suggestion to use `(s/and number? odd?)`</text>
  </message>
  <message>
    <ts>2017-07-14T12:44:22.159803</ts>
    <user>U0CKDHF4L</user>
    <text>ok a simpler version works: ```(s/explain (s/cat :this (s/* (s/coll-of odd?)) :that (s/coll-of even?)) '((7 3 1) (9 7 3) [2 4 6]))```</text>
  </message>
  <message>
    <ts>2017-07-14T12:47:46.267875</ts>
    <user>U0CKDHF4L</user>
    <text>using ```(s/def :q/b (s/coll-of (s/and number? even?)))``` does not work</text>
  </message>
  <message>
    <ts>2017-07-14T12:48:25.288617</ts>
    <user>U0CKDHF4L</user>
    <text>```(s/explain (s/cat :this (s/* (s/coll-of odd?)) :that (s/keys :req [:q/b])) '((7 3 1) (9 7 3) {:q/b [2 4 6]}))
IllegalArgumentException Argument must be an integer: [:q/b [2 4 6]]  clojure.core/even? (core.clj:1383)```</text>
  </message>
  <message>
    <ts>2017-07-14T12:48:50.301915</ts>
    <user>U0NCTKEV8</user>
    <text>you need to do it for odd? too</text>
  </message>
  <message>
    <ts>2017-07-14T12:48:56.305005</ts>
    <user>U0CKDHF4L</user>
    <text>however, ```(s/explain (s/cat :that (s/keys :req [:q/b])) '({:q/b [2 4 6]}))
Success!```</text>
  </message>
  <message>
    <ts>2017-07-14T12:49:02.308164</ts>
    <user>U0CKDHF4L</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-14T12:49:06.310537</ts>
    <user>U0NCTKEV8</user>
    <text>if I recall odd? is just (not (even? ...))</text>
  </message>
  <message>
    <ts>2017-07-14T12:49:36.326141</ts>
    <user>U0CKDHF4L</user>
    <text>ah yes that works ok</text>
  </message>
  <message>
    <ts>2017-07-14T12:49:48.332890</ts>
    <user>U0CKDHF4L</user>
    <text>```(s/explain (s/cat :this (s/* (s/coll-of (s/and number? odd?))) :that (s/keys :req [:q/b])) '((7 3 1) (9 7 3) {:q/b [2 4 6]}))
Success!```</text>
  </message>
  <message>
    <ts>2017-07-14T12:49:58.337962</ts>
    <user>U0CKDHF4L</user>
    <text>please explain why!?</text>
  </message>
  <message>
    <ts>2017-07-14T12:50:46.363521</ts>
    <user>U0NCTKEV8</user>
    <text>because odd? and even? as predicates aren't total, so they will throw exceptions when not passed numbers instead of returning false</text>
  </message>
  <message>
    <ts>2017-07-14T12:51:00.370923</ts>
    <user>U0NCTKEV8</user>
    <text>s/and tries each predicate it order</text>
  </message>
  <message>
    <ts>2017-07-14T12:51:06.374101</ts>
    <user>U0CKDHF4L</user>
    <text>yes but why should they be passed non-numbers ?</text>
  </message>
  <message>
    <ts>2017-07-14T12:51:29.386132</ts>
    <user>U0NCTKEV8</user>
    <text>because in order for s/* to stop matching it has to fail a match</text>
  </message>
  <message>
    <ts>2017-07-14T12:51:38.390768</ts>
    <user>U0NCTKEV8</user>
    <text>otherwise it would match everything</text>
  </message>
  <message>
    <ts>2017-07-14T12:52:33.419623</ts>
    <user>U0CKDHF4L</user>
    <text>oh yes I see! ```(odd? {})
IllegalArgumentException Argument must be an integer: {}  clojure.core/even? (core.clj:1383)```</text>
  </message>
  <message>
    <ts>2017-07-14T12:53:04.436360</ts>
    <user>U0CKDHF4L</user>
    <text>i had misunderstood how s/* worked</text>
  </message>
  <message>
    <ts>2017-07-14T12:53:14.441695</ts>
    <user>U0CKDHF4L</user>
    <text>thanks so much!</text>
  </message>
  <message>
    <ts>2017-07-14T13:09:24.972864</ts>
    <user>U1ALMRBLL</user>
    <text>serg: I saw you deleted this. I noticed if you removed `into []` and just used the seq instead of a vector, it works. Did you solve it?</text>
  </message>
  <message>
    <ts>2017-07-14T13:21:28.355247</ts>
    <user>U0W0JDY4C</user>
    <text>this is perhaps a little convoluted.. but now i'm curious just for curiosity's sake. if I had a function that maps over some collection, invokes a provided fn, and returns the value of that invoked fn as a different shape, how does this work with compose?
```
(defn do-map [f coll]
  (map (fn [[foo val baz]] [foo (f val) baz]) coll)) ;; &amp;lt;- notice the [a b c] 
;; wont work unless xform-2 and xform-1 are "aware" of the [a b c] shape
(do-map (comp xform-2 xform-1) coll)  
```</text>
  </message>
  <message>
    <ts>2017-07-14T13:22:36.392091</ts>
    <user>U0W0JDY4C</user>
    <text>is there a generic way to compose transformations and, after each xform, re-shape the data?</text>
  </message>
  <message>
    <ts>2017-07-14T13:24:14.444099</ts>
    <user>U0W0JDY4C</user>
    <text>the `do-map` couldn't really know whether `f` was composed or not, it just sees a function. so it would be hard to do something like `(-&amp;gt; coll f0 reshape f1 reshape ...)`</text>
  </message>
  <message>
    <ts>2017-07-14T13:28:31.586004</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; sounds like you want `(fn [f] (fn [[a b c]] [a (f b) c])`</text>
  </message>
  <message>
    <ts>2017-07-14T13:28:41.591129</ts>
    <user>U051SS2EU</user>
    <text>then you can wrap your functions in it?</text>
  </message>
  <message>
    <ts>2017-07-14T13:29:41.624301</ts>
    <user>U051SS2EU</user>
    <text>and -&amp;gt; isn't a composer of functions, it's a rewriter of forms, if you use `comp` it's easier to get the right behavior via wrapping functions without jumping through syntactic hoops</text>
  </message>
  <message>
    <ts>2017-07-14T13:33:55.767592</ts>
    <user>U0W0JDY4C</user>
    <text>not quite, but the more i think about it the less possible it seems. i essentially want an interface where I can pass in a single function (composed or not), and that function will be applied piecemeal. if the provided fn is a composed fn, it will invoke the first composed, reshape the results, invoke the second composed, etc… regardless of how many steps belong to that composed function.</text>
  </message>
  <message>
    <ts>2017-07-14T13:35:06.806405</ts>
    <user>U0W0JDY4C</user>
    <text>I think it's impossible to do it from the "inside"; there's no way to call 1 step of a composed function and "steal" the result before calling the 2nd step.</text>
  </message>
  <message>
    <ts>2017-07-14T13:37:20.878981</ts>
    <user>U0W0JDY4C</user>
    <text>i would have to make the interface something like `(do-map [coll f &amp;amp; maybe-more-fns] (if maybe-more-fns (compose f reshape (first maybe-more-fns) reshape (second maybe-more-fns ...))` and do the composing on the inside, I think</text>
  </message>
  <message>
    <ts>2017-07-14T13:41:29.013080</ts>
    <user>U0W0JDY4C</user>
    <text>that is, unless i'm totally misunderstanding your answer (happens often i find)</text>
  </message>
  <message>
    <ts>2017-07-14T13:46:01.157739</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; `#(apply comp (map (fn [f] (fn [[a b c]] [a (f b) c])) (reverse %))` will take the functions in the order -&amp;gt; would accept them, and return a composed function that does what you describe</text>
  </message>
  <message>
    <ts>2017-07-14T13:47:05.191022</ts>
    <user>U051SS2EU</user>
    <text>or you could write a macro that inserts that function around or inside each function in the form</text>
  </message>
  <message>
    <ts>2017-07-14T13:47:36.207060</ts>
    <user>U0W0JDY4C</user>
    <text>that's pretty neat. i considered macros, too, but thats a whole 'nother can of worms i havent opened yet.</text>
  </message>
  <message>
    <ts>2017-07-14T13:48:07.223256</ts>
    <user>U3L6TFEJF</user>
    <text>ooooh boy, you're in for a treat! :smile:</text>
  </message>
  <message>
    <ts>2017-07-14T13:48:33.236979</ts>
    <user>U051SS2EU</user>
    <text>this becomes more clear if you name that function eg. ```(defn to-middle
  [f]
  (fn [[a b c]]
    [a (f b) c]))

(apply comp (map to-middle functions))```</text>
  </message>
  <message>
    <ts>2017-07-14T13:51:08.318357</ts>
    <user>U0W0JDY4C</user>
    <text>yea that's much more clear. funny now that you point that out I realize this is expressed in a protocol, which doesn't support variadic arguments. so either enforce a seq like `(do-map v [f])` and use the fn above^, or I think something like `(-&amp;gt; coll (do-map xform-a) (do-map xform-b)` (though more inefficient) works too</text>
  </message>
  <message>
    <ts>2017-07-14T13:51:55.343740</ts>
    <user>U0W0JDY4C</user>
    <text>so much functional-ness, so little time</text>
  </message>
  <message>
    <ts>2017-07-14T13:52:22.357915</ts>
    <user>U051SS2EU</user>
    <text>that -&amp;gt; form will break</text>
  </message>
  <message>
    <ts>2017-07-14T13:52:46.370429</ts>
    <user>U051SS2EU</user>
    <text>that's why I mentioned using comp to avoid syntactic hoops - since `-&amp;gt;` is a form rewriter, it will put the coll in the wrong place</text>
  </message>
  <message>
    <ts>2017-07-14T13:53:36.397371</ts>
    <user>U0W0JDY4C</user>
    <text>hmm, ill have to look deeper at that. thanks for the warning</text>
  </message>
  <message>
    <ts>2017-07-14T14:14:35.092709</ts>
    <user>U0W0JDY4C</user>
    <text>so beautiful:
```
(map (apply comp (map reshape fns)) coll)
```
thanks a bunch !</text>
  </message>
  <message>
    <ts>2017-07-14T14:35:08.754673</ts>
    <user>U5NAUMCAD</user>
    <text>I am trying to rename the keys from a hashmap with rename-keys
I have 
``` (def a {a "A", b "B"} ```</text>
  </message>
  <message>
    <ts>2017-07-14T14:35:55.779685</ts>
    <user>U5NAUMCAD</user>
    <text>and use ``` (set/rename-keys a {:a :aa, :b :bb} ```</text>
  </message>
  <message>
    <ts>2017-07-14T14:36:33.800262</ts>
    <user>U5NAUMCAD</user>
    <text>but nothing changes</text>
  </message>
  <message>
    <ts>2017-07-14T14:37:17.822611</ts>
    <user>U5NAUMCAD</user>
    <text>Am I doing something wrong?</text>
  </message>
  <message>
    <ts>2017-07-14T14:38:00.845802</ts>
    <user>U051SS2EU</user>
    <text>nice</text>
  </message>
  <message>
    <ts>2017-07-14T14:38:24.857754</ts>
    <user>U071CG4QY</user>
    <text>Try `(def a {:a "A", :b "B"})`</text>
  </message>
  <message>
    <ts>2017-07-14T14:38:25.858392</ts>
    <user>U0NCTKEV8</user>
    <text>well for one, `a` and `b` are both unquote symbols which evaluate to some value where `:a` and `:b` are keywords that evaluate to themselves</text>
  </message>
  <message>
    <ts>2017-07-14T14:40:50.935535</ts>
    <user>U5NAUMCAD</user>
    <text>the problem is that I receive the Json as it is</text>
  </message>
  <message>
    <ts>2017-07-14T14:41:03.942176</ts>
    <user>U5NAUMCAD</user>
    <text>I can not change the a variable</text>
  </message>
  <message>
    <ts>2017-07-14T14:41:22.952551</ts>
    <user>U5NAUMCAD</user>
    <text>it was just an example; But i need to modify the names of the keys</text>
  </message>
  <message>
    <ts>2017-07-14T14:41:39.961536</ts>
    <user>U051SS2EU</user>
    <text>sounds like your real problem is that you aren't using the return value of rename-keys</text>
  </message>
  <message>
    <ts>2017-07-14T14:42:06.975148</ts>
    <user>U051SS2EU</user>
    <text>nothing in clojure actually modifies the built in maps, vectors, lists, etc. - they return new ones you can use</text>
  </message>
  <message>
    <ts>2017-07-14T14:42:10.977489</ts>
    <user>U5NAUMCAD</user>
    <text>I did a println</text>
  </message>
  <message>
    <ts>2017-07-14T14:42:16.980261</ts>
    <user>U071CG4QY</user>
    <text>You're probably getting string keys.</text>
  </message>
  <message>
    <ts>2017-07-14T14:42:18.981447</ts>
    <user>U5NAUMCAD</user>
    <text>but it printed the same a</text>
  </message>
  <message>
    <ts>2017-07-14T14:42:37.991059</ts>
    <user>U051SS2EU</user>
    <text>don't use println to look at data, use prn</text>
  </message>
  <message>
    <ts>2017-07-14T14:42:47.996178</ts>
    <user>U0AT6MBUL</user>
    <text>If you are working with JSON, you're likely getting the map as `{"a" "A", "b" "B"}`</text>
  </message>
  <message>
    <ts>2017-07-14T14:42:49.997425</ts>
    <user>U051SS2EU</user>
    <text>I bet a is actually "a" yeah</text>
  </message>
  <message>
    <ts>2017-07-14T14:43:02.004009</ts>
    <user>U051SS2EU</user>
    <text>so you need rename-keys {"a" :aa} etc.</text>
  </message>
  <message>
    <ts>2017-07-14T14:44:12.041222</ts>
    <user>U5NAUMCAD</user>
    <text>mmm I tried but I got this error :</text>
  </message>
  <message>
    <ts>2017-07-14T14:44:21.045385</ts>
    <user>U5NAUMCAD</user>
    <text>java.lang.ClassCastException: clojure.core$map$fn__4781 cannot be cast to clojure.lang.IPersistentMap</text>
  </message>
  <message>
    <ts>2017-07-14T14:45:14.073386</ts>
    <user>U051SS2EU</user>
    <text>that means you used `(map f)` where it expected a hash-map</text>
  </message>
  <message>
    <ts>2017-07-14T14:45:56.095301</ts>
    <user>U5NAUMCAD</user>
    <text>wait, yes!!!!</text>
  </message>
  <message>
    <ts>2017-07-14T14:46:18.107318</ts>
    <user>U5NAUMCAD</user>
    <text>I was doing it to another functionality</text>
  </message>
  <message>
    <ts>2017-07-14T14:46:22.109356</ts>
    <user>U5NAUMCAD</user>
    <text>now it is working</text>
  </message>
  <message>
    <ts>2017-07-14T14:46:35.116096</ts>
    <user>U5NAUMCAD</user>
    <text>rename-keys with "a" as key</text>
  </message>
  <message>
    <ts>2017-07-14T14:47:46.153806</ts>
    <user>U051SS2EU</user>
    <text>for future reference, this is the difference between `println` and `prn` ```kingfisher.core=&amp;gt; (println {"a" 0 "b" 1})
{a 0, b 1}
nil
kingfisher.core=&amp;gt; (prn {"a" 0 "b" 1})
{"a" 0, "b" 1}
nil```</text>
  </message>
  <message>
    <ts>2017-07-14T14:49:15.200540</ts>
    <user>U071CG4QY</user>
    <text>There's probably other option — you can get json with keys as keywords, just look to documentation of your json lib.</text>
  </message>
  <message>
    <ts>2017-07-14T14:49:47.217670</ts>
    <user>U051SS2EU</user>
    <text>that's sloppy though - there are valid json keys that are not valid keywords, so then you end up creating keywords that shouldn't exist</text>
  </message>
  <message>
    <ts>2017-07-14T14:55:10.390767</ts>
    <user>U0NCTKEV8</user>
    <text>well that is a whole other thing</text>
  </message>
  <message>
    <ts>2017-07-14T14:56:03.419242</ts>
    <user>U0NCTKEV8</user>
    <text>(are valid keywords only those keywords that can be produced by the reader?)</text>
  </message>
  <message>
    <ts>2017-07-14T14:57:05.452427</ts>
    <user>U0NCTKEV8</user>
    <text>but generally, turning keys in to keywords all the time is something every project (I have worked on) does, and I hate it</text>
  </message>
  <message>
    <ts>2017-07-14T14:57:29.465074</ts>
    <user>U0NCTKEV8</user>
    <text>but if you do it you are doing the same thing  that everyone does</text>
  </message>
  <message>
    <ts>2017-07-14T15:04:28.685267</ts>
    <user>U050MP39D</user>
    <text>"valid keywords" are those that follow the rules in the docs imo, but the reader will create some keywords that don't if asked</text>
  </message>
  <message>
    <ts>2017-07-14T15:09:04.822526</ts>
    <user>U0NCTKEV8</user>
    <text>which docs?</text>
  </message>
  <message>
    <ts>2017-07-14T15:09:43.841775</ts>
    <user>U050MP39D</user>
    <text>&lt;https://clojure.org/reference/reader#_literals&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T15:09:59.849087</ts>
    <user>U0NCTKEV8</user>
    <text>those a docs on keywords that the reader can read</text>
  </message>
  <message>
    <ts>2017-07-14T15:10:12.855514</ts>
    <user>U0NCTKEV8</user>
    <text>(which is why they are under the reader section)</text>
  </message>
  <message>
    <ts>2017-07-14T15:11:28.892269</ts>
    <user>U0NCTKEV8</user>
    <text>I've seen this discussion play out over and over again in chat, on the mailing list, and in jira issues, and it seems like the core team's general stance is what the reader excepts doesn't define what is valid</text>
  </message>
  <message>
    <ts>2017-07-14T15:12:41.926889</ts>
    <user>U050MP39D</user>
    <text>the reader accepts more than those docs, but those docs do give a guarantee of what the reader will accept. so for me they make sense as a definition of valid. not the same thing as "whatever the reader accepts"</text>
  </message>
  <message>
    <ts>2017-07-14T15:13:13.941699</ts>
    <user>U050MP39D</user>
    <text>eg
```
cljs.user=&amp;gt; :&amp;amp;
:&amp;amp;
```</text>
  </message>
  <message>
    <ts>2017-07-14T15:13:43.955746</ts>
    <user>U050MP39D</user>
    <text>but it's not documented that that will always work (or become reserved for some special system/core usage) so I wouldn't use it</text>
  </message>
  <message>
    <ts>2017-07-14T15:14:07.967367</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://dev.clojure.org/jira/browse/CLJ-1527&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T15:15:11.998371</ts>
    <user>U0NCTKEV8</user>
    <text>the point is, just because the reader only constructs certain kinds of symbols and keywords, that doesn't restrict the Symbol and Keyword data types to only construct those types of symbols and keywords</text>
  </message>
  <message>
    <ts>2017-07-14T15:15:36.010371</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://dev.clojure.org/jira/browse/CLJ-17&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T15:17:22.059541</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://dev.clojure.org/jira/browse/CLJ-2009&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T15:17:25.060919</ts>
    <user>U0NCTKEV8</user>
    <text>etc etc etc</text>
  </message>
  <message>
    <ts>2017-07-14T15:17:42.069167</ts>
    <user>U04V70XH6</user>
    <text>And at one point, very specifically, the Clojure/core team made `:1` (numeric keywords) illegal in the reader on the grounds that they weren't sanctioned by the docs -- and they broke a bunch of code out there in the wild so they reverted the reader change.</text>
  </message>
  <message>
    <ts>2017-07-14T15:18:55.103783</ts>
    <user>U04V70XH6</user>
    <text>I was affected by that change (one of the OSS libraries I maintain) but I would have been perfectly happy to change `:1` to `(keyword "1")` -- which they said they would _not_ break... but they still reverted the change :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T15:19:53.132351</ts>
    <user>U04V70XH6</user>
    <text>So we have prior art for the reader being publicly known to accept things that are not considered "correct" and not getting fixed -- and a statement that `keyword` (and, similarly, `symbol`) being able to produce "junk" output from arbitrary input :neutral_face:</text>
  </message>
  <message>
    <ts>2017-07-14T15:20:06.138625</ts>
    <user>U0NCTKEV8</user>
    <text>the issue isn't that the reader and the reader docs are not in 100% agreement about what is a readable keyword (that is another issue) the issue is that a valid readable keyword is not the same as a valid keyword</text>
  </message>
  <message>
    <ts>2017-07-14T15:20:31.150682</ts>
    <user>U0NCTKEV8</user>
    <text>for example, the keywords json libraries create for map keys never pass through the reader</text>
  </message>
  <message>
    <ts>2017-07-14T15:20:42.156074</ts>
    <user>U0NCTKEV8</user>
    <text>so they can be any crazy thing</text>
  </message>
  <message>
    <ts>2017-07-14T15:20:50.159882</ts>
    <user>U04V70XH6</user>
    <text>Exactly my point, yes.</text>
  </message>
  <message>
    <ts>2017-07-14T15:21:36.181745</ts>
    <user>U0NCTKEV8</user>
    <text>which negates the purpose of turning them in to keywords in the first place, because the only reason people turn them in to keywords is since most maps in clojure use keyword keys, they more comfortable with them</text>
  </message>
  <message>
    <ts>2017-07-14T15:22:07.196083</ts>
    <user>U04V70XH6</user>
    <text>Speed of lookup over plain strings. In theory.</text>
  </message>
  <message>
    <ts>2017-07-14T15:23:30.234825</ts>
    <user>U0NCTKEV8</user>
    <text>maybe</text>
  </message>
  <message>
    <ts>2017-07-14T15:23:42.240198</ts>
    <user>U04V70XH6</user>
    <text>`(identical? :abc (keyword (str "a" "bc")))` =&amp;gt; true</text>
  </message>
  <message>
    <ts>2017-07-14T15:24:24.259887</ts>
    <user>U04V70XH6</user>
    <text>So map lookup will be faster if it can check for `identical?` before falling back to "equal".</text>
  </message>
  <message>
    <ts>2017-07-14T15:24:30.263100</ts>
    <user>U0NCTKEV8</user>
    <text>but do you want to be interning json coming in over the wire?</text>
  </message>
  <message>
    <ts>2017-07-14T15:24:43.269371</ts>
    <user>U3L6TFEJF</user>
    <text>what am I missing here?
```
user=&amp;gt; (defn foo [args] (apply hash-map args))
#'user/foo
user=&amp;gt; (binding [*data-readers* {'foo #'user/foo}] #foo [1 2 3 4])

             java.lang.RuntimeException: No reader function for tag foo
clojure.lang.LispReader$ReaderException: java.lang.RuntimeException: No reader function for tag foo
             java.lang.RuntimeException: Unmatched delimiter: )
clojure.lang.LispReader$ReaderException: java.lang.RuntimeException: Unmatched delimiter: )
```</text>
  </message>
  <message>
    <ts>2017-07-14T15:25:07.280733</ts>
    <user>U0NCTKEV8</user>
    <text>the whole form is read before the binding is run</text>
  </message>
  <message>
    <ts>2017-07-14T15:25:18.285447</ts>
    <user>U04V70XH6</user>
    <text>Good question, given that converting arbitrary strings to keywords can open you up to a denial of service attack.</text>
  </message>
  <message>
    <ts>2017-07-14T15:26:08.309644</ts>
    <user>U0NCTKEV8</user>
    <text>I mean, you will likely be fine, and keyword's intern a weakreference, so the they will get cleared</text>
  </message>
  <message>
    <ts>2017-07-14T15:26:27.318837</ts>
    <user>U04V70XH6</user>
    <text>Ya, but... :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-14T15:27:04.335810</ts>
    <user>U051SS2EU</user>
    <text>```user=&amp;gt; (defn foo [args] (apply hash-map args))
#'user/foo
user=&amp;gt; (binding [*data-readers* {'foo #'user/foo}] (read-string "#foo [1 2 3 4]"))
{1 2, 3 4}```</text>
  </message>
  <message>
    <ts>2017-07-14T15:27:05.336375</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U0NCTKEV8&gt; ahh, so you need this? `(binding [*data-readers* {'foo #'user/foo}] (read-string "#foo [1 2 3 4]"))`</text>
  </message>
  <message>
    <ts>2017-07-14T15:27:14.340631</ts>
    <user>U3L6TFEJF</user>
    <text>haha, timing :smile:</text>
  </message>
  <message>
    <ts>2017-07-14T15:27:17.342134</ts>
    <user>U0NCTKEV8</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-14T15:28:34.379196</ts>
    <user>U3L6TFEJF</user>
    <text>while on the topic of tagged literals: is there anything special you need to do to get it to work with `tools.namespace`?</text>
  </message>
  <message>
    <ts>2017-07-14T15:29:20.401239</ts>
    <user>U3L6TFEJF</user>
    <text>I've placed a `data_readers.clj` in my classpath root, but when I try to use it in the REPL I get something like "Can't call unbound Var"</text>
  </message>
  <message>
    <ts>2017-07-14T15:29:33.407377</ts>
    <user>U3L6TFEJF</user>
    <text>lemme dig up the exact exception</text>
  </message>
  <message>
    <ts>2017-07-14T15:29:40.411299</ts>
    <user>U0NCTKEV8</user>
    <text>you need to require the namespace before you can use the reader</text>
  </message>
  <message>
    <ts>2017-07-14T15:30:31.436275</ts>
    <user>U0NCTKEV8</user>
    <text>data_readers.clj sets up the tag, but doesn't actually cause the namespace where the function is defined to load</text>
  </message>
  <message>
    <ts>2017-07-14T15:31:00.450343</ts>
    <user>U3L6TFEJF</user>
    <text>I'm pretty sure I did that, but let me double check</text>
  </message>
  <message>
    <ts>2017-07-14T15:33:18.514544</ts>
    <user>U3L6TFEJF</user>
    <text>ok, so my `data_readers.clj` contains `{foo kleinheit.pg.impl/foo}`</text>
  </message>
  <message>
    <ts>2017-07-14T15:33:39.523907</ts>
    <user>U3L6TFEJF</user>
    <text>`(defn foo [vs] (apply hash-map vs))`</text>
  </message>
  <message>
    <ts>2017-07-14T15:34:25.545762</ts>
    <user>U3L6TFEJF</user>
    <text>wait a minute!</text>
  </message>
  <message>
    <ts>2017-07-14T15:34:33.549404</ts>
    <user>U0NCTKEV8</user>
    <text>and every place where you read something using that tag, before that does a require of that namespace execute?</text>
  </message>
  <message>
    <ts>2017-07-14T15:35:42.580670</ts>
    <user>U3L6TFEJF</user>
    <text>okay, I see the problem: if I use `(require 'kleinheit.pg.impl :reload)` first thing in the REPL, it works</text>
  </message>
  <message>
    <ts>2017-07-14T15:36:01.589427</ts>
    <user>U3L6TFEJF</user>
    <text>but if I do `clojure.tools.namespace.repl/refresh`, it doesn't</text>
  </message>
  <message>
    <ts>2017-07-14T15:38:13.648647</ts>
    <user>U3L6TFEJF</user>
    <text>yep, `tool.namespace` clobbers it somehow</text>
  </message>
  <message>
    <ts>2017-07-14T15:51:16.009607</ts>
    <user>U3L6TFEJF</user>
    <text>the prevailing wisdom on the internet when having problems with data readers is to call `(#'clojure.core/load-data-readers)`, but then I get: ```dev=&amp;gt;   (#'clojure.core/load-data-readers)

clojure.lang.ExceptionInfo: Conflicting data-reader mapping```</text>
  </message>
  <message>
    <ts>2017-07-14T15:56:54.167172</ts>
    <user>U051SS2EU</user>
    <text>if you look at the ex-data on *e that should show you what went wrong, right?</text>
  </message>
  <message>
    <ts>2017-07-14T15:59:48.249134</ts>
    <user>U3L6TFEJF</user>
    <text>I'm getting a conflict with my own data reader file :neutral_face:</text>
  </message>
  <message>
    <ts>2017-07-14T16:00:18.264969</ts>
    <user>U051SS2EU</user>
    <text>OK - so the data readers are already loaded, you have to reload the code they refer to, right?</text>
  </message>
  <message>
    <ts>2017-07-14T16:01:01.286320</ts>
    <user>U0NCTKEV8</user>
    <text>(which refresh would do if you properly required that code before using the readers)</text>
  </message>
  <message>
    <ts>2017-07-14T16:01:58.313394</ts>
    <user>U3L6TFEJF</user>
    <text>still get the error after calling `refresh`</text>
  </message>
  <message>
    <ts>2017-07-14T16:02:14.321311</ts>
    <user>U0NCTKEV8</user>
    <text>right, because somewhere you aren't properly doing the require</text>
  </message>
  <message>
    <ts>2017-07-14T16:02:43.334513</ts>
    <user>U0NCTKEV8</user>
    <text>so find all the places you use the tag, ensure in that namespace you require the namespace where the function the tag maps to is</text>
  </message>
  <message>
    <ts>2017-07-14T16:03:34.358630</ts>
    <user>U3L6TFEJF</user>
    <text>```dev=&amp;gt; (dev/refresh)
:reloading (... kleinheit.pg.impl ...)
:ok

dev=&amp;gt; #foo [1 2 3 4]
        java.lang.IllegalStateException: Attempting to call unbound fn: #'kleinheit.pg.impl/foo
clojure.lang.LispReader$ReaderException: java.lang.IllegalStateException: Attempting to call unbound fn: #'kleinheit.pg.impl/foo
```</text>
  </message>
  <message>
    <ts>2017-07-14T16:05:08.401674</ts>
    <user>U3L6TFEJF</user>
    <text>and it works if I just skipped the `refresh` and do the regular `(require ...)`, so I'm at a loss ¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-14T16:05:23.408647</ts>
    <user>U0NCTKEV8</user>
    <text>what kind of repl you are using?</text>
  </message>
  <message>
    <ts>2017-07-14T16:05:29.411370</ts>
    <user>U3L6TFEJF</user>
    <text>`lein repl`</text>
  </message>
  <message>
    <ts>2017-07-14T16:06:04.427583</ts>
    <user>U0NCTKEV8</user>
    <text>lein repl can be kind of weird</text>
  </message>
  <message>
    <ts>2017-07-14T16:06:29.439134</ts>
    <user>U3L6TFEJF</user>
    <text>ehh… errhmm… how do I launch a REPL without lein? :sweat_smile:</text>
  </message>
  <message>
    <ts>2017-07-14T16:07:03.454724</ts>
    <user>U0NCTKEV8</user>
    <text>that depends, ```java -cp `lein classpath` clojure.main``` often works</text>
  </message>
  <message>
    <ts>2017-07-14T16:07:49.475215</ts>
    <user>U051SS2EU</user>
    <text>rlwrap is very handy when doing it that way</text>
  </message>
  <message>
    <ts>2017-07-14T16:09:42.525819</ts>
    <user>U3L6TFEJF</user>
    <text>still get the same behavior in that REPL unfortunately :confused:</text>
  </message>
  <message>
    <ts>2017-07-14T16:10:35.549531</ts>
    <user>U0NCTKEV8</user>
    <text>put a println at the top of the kleinheit.pg.impl namespace to see if it is actually getting reloaded</text>
  </message>
  <message>
    <ts>2017-07-14T16:12:36.605032</ts>
    <user>U3L6TFEJF</user>
    <text>yessir, it prints</text>
  </message>
  <message>
    <ts>2017-07-14T16:13:37.632865</ts>
    <user>U3L6TFEJF</user>
    <text>well, I'm gonna give this a rest for now, appreciate all your help folks</text>
  </message>
  <message>
    <ts>2017-07-14T16:14:43.663507</ts>
    <user>U0NCTKEV8</user>
    <text>ah, I bet refresh breaks var interning, so you end up with two vars with the same name</text>
  </message>
  <message>
    <ts>2017-07-14T16:15:34.687305</ts>
    <user>U3L6TFEJF</user>
    <text>ohh, now that sounds like it might be it!</text>
  </message>
  <message>
    <ts>2017-07-14T16:15:49.693824</ts>
    <user>U3L6TFEJF</user>
    <text>time to dig into the source…</text>
  </message>
  <message>
    <ts>2017-07-14T16:16:34.714409</ts>
    <user>U051SS2EU</user>
    <text>yeah, it destroys namespaces which might also include doing something wacky with vars that other code has captured…</text>
  </message>
  <message>
    <ts>2017-07-14T16:16:52.722848</ts>
    <user>U051SS2EU</user>
    <text>you might just want to blacklist the namespaces that define readers from auto-reload</text>
  </message>
  <message>
    <ts>2017-07-14T16:22:27.872966</ts>
    <user>U3L6TFEJF</user>
    <text>yeah, I'll see if I can figure out a way to do that, thanks!</text>
  </message>
  <message>
    <ts>2017-07-14T16:23:42.907178</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3L6TFEJF&gt; it's documented here &lt;https://github.com/clojure/tools.namespace#disabling-refresh-in-a-namespace&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T16:26:08.971940</ts>
    <user>U3L6TFEJF</user>
    <text>yeah, the problem with that is if I call `disable-unload!` in the file, the "do not refresh" metadata will be added on the first refresh and I'm stuck again</text>
  </message>
  <message>
    <ts>2017-07-14T16:26:25.979151</ts>
    <user>U3L6TFEJF</user>
    <text>can you add metadata to a namespace in the `ns` call?</text>
  </message>
  <message>
    <ts>2017-07-14T16:27:07.997817</ts>
    <user>U051SS2EU</user>
    <text>yeah- iirc it makes tools.namespace unhappy though (and various tools that use that, like eastwood)</text>
  </message>
  <message>
    <ts>2017-07-14T16:27:14.001013</ts>
    <user>U051SS2EU</user>
    <text>but maybe that's old info…</text>
  </message>
  <message>
    <ts>2017-07-14T16:33:20.164200</ts>
    <user>U3L6TFEJF</user>
    <text>well, that didn't work :smile:</text>
  </message>
  <message>
    <ts>2017-07-14T16:33:56.179907</ts>
    <user>U3L6TFEJF</user>
    <text>talking about interning got me thinking about a great clojure talk I need to rewatch: &lt;https://www.youtube.com/watch?v=8NUI07y1SlQ&gt;</text>
  </message>
  <message>
    <ts>2017-07-14T16:34:35.197506</ts>
    <user>U3L6TFEJF</user>
    <text>(thanks for the preview Slack….)</text>
  </message>
  <message>
    <ts>2017-07-14T16:51:56.648413</ts>
    <user>U1ACUMJKX</user>
    <text>woot i just made a graphics library for clojure! if anyone interested in that kind of thing could run some of the examples, i'd be thrilled to know if they work for you or not.</text>
  </message>
  <message>
    <ts>2017-07-14T16:52:20.658773</ts>
    <user>U1ACUMJKX</user>
    <text>&lt;https://github.com/bcbradle/gl&gt;</text>
  </message>
  <message>
    <ts>2017-07-15T02:43:34.753654</ts>
    <user>U6902JG68</user>
    <text>&lt;@U1ALMRBLL&gt; Hi Josh, actually the problem was in my mac, prev I ran this func with long running async task in map,  it was like fetch 6k items and insert into db values for each one, so seems like it was running all this time consuming all available threads, that's why it didn't work, once it has finished I got my code working as expected.</text>
  </message>
  <message>
    <ts>2017-07-15T02:46:16.763428</ts>
    <user>U6902JG68</user>
    <text>The strange thing is that I ran this in REPL and I am sure I have cancelled this task, but somehow it was still running in background consuming all available threads</text>
  </message>
  <message>
    <ts>2017-07-15T10:32:08.621394</ts>
    <user>U15MJHWRX</user>
    <text>hello everybody, is there a way to get the namespace of a map with uniformly namespaced keys?</text>
  </message>
  <message>
    <ts>2017-07-15T10:33:04.626417</ts>
    <user>U15MJHWRX</user>
    <text>e.g. `(map-ns {:some/key :val :some/other :val ,,,}) ;; =&amp;gt; "some")`</text>
  </message>
  <message>
    <ts>2017-07-15T11:01:37.776272</ts>
    <user>U071CG4QY</user>
    <text>```user=&amp;gt; (map namespace [::a ::b ::c])
("user" "user" "user")```</text>
  </message>
  <message>
    <ts>2017-07-15T11:04:21.791226</ts>
    <user>U051SS2EU</user>
    <text>the bot is kind of weird, the original hash-map was `{::a 0 ::b 1 ::c 2}`</text>
  </message>
  <message>
    <ts>2017-07-15T13:20:35.541055</ts>
    <user>U6ADT74FR</user>
    <text>can anyone let me know why this doesnt work
```
(defn what-is [x]
  (cond
    (identical? x 42) "everything"
    (identical? x (* 42 42)) "everything squared"
    :else "nothing"))

(what-is (* 42 42)) ; "nothing"
```</text>
  </message>
  <message>
    <ts>2017-07-15T13:22:04.549409</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U6ADT74FR&gt; ```+user=&amp;gt; (identical? 127 127)
true
+user=&amp;gt; (identical? 128 128)
false
```</text>
  </message>
  <message>
    <ts>2017-07-15T13:22:31.551847</ts>
    <user>U051SS2EU</user>
    <text>there's a cache for the Longs, but only between -128 and 127, they aren't all cached</text>
  </message>
  <message>
    <ts>2017-07-15T13:22:53.553774</ts>
    <user>U051SS2EU</user>
    <text>identical? isn't just an equality check, it checks if the data is stored in the same location on hardware</text>
  </message>
  <message>
    <ts>2017-07-15T13:24:17.561279</ts>
    <user>U051SS2EU</user>
    <text>when you type in 127, clojure asks for an instance of Long, and java uses a cached set of Longs to look up the value, when you type in 128 clojure once again asks for a Long, but this time java makes a new one</text>
  </message>
  <message>
    <ts>2017-07-15T13:26:00.569881</ts>
    <user>U6ADT74FR</user>
    <text>Thanks a lot, i was using the wrong function. This worked 
```
(defn what-is [x]
  (cond
    (= x 42) "everything"
    (= x (* 42 42)) "everything squared"
    :else "nothing"))
```</text>
  </message>
  <message>
    <ts>2017-07-15T13:26:18.571459</ts>
    <user>U051SS2EU</user>
    <text>there's also `==` for numeric equality</text>
  </message>
  <message>
    <ts>2017-07-15T13:26:28.572258</ts>
    <user>U051SS2EU</user>
    <text>eg. it would match 42.0 but = will not</text>
  </message>
  <message>
    <ts>2017-07-15T14:05:13.779954</ts>
    <user>U6ADT74FR</user>
    <text>Thank you for the help</text>
  </message>
  <message>
    <ts>2017-07-15T17:01:13.651861</ts>
    <user>U15MJHWRX</user>
    <text>&lt;@U071CG4QY&gt; &lt;@U051SS2EU&gt; thank you, i was looking for something preferably in core that behaves kind of like `namespace` does, returning the namespace when all keys have the same, `nil` when not all keys are namespaced, and a set of namespaces when multiple. i'll write my own then :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-15T17:04:34.667855</ts>
    <user>U051SS2EU</user>
    <text>returning a set or a string from one function is probably less than ideal - that kind of thing tends to increase the complexity of everything around it for no benefit</text>
  </message>
  <message>
    <ts>2017-07-15T17:07:30.681234</ts>
    <user>U15MJHWRX</user>
    <text>you are correct, although it's just for display purposes in a cli statement, so … :wink:</text>
  </message>
  <message>
    <ts>2017-07-15T20:18:17.467506</ts>
    <user>U2J4FRT2T</user>
    <text>&lt;@U15MJHWRX&gt; 
&lt;https://github.com/clojure/clojurescript/blob/797e247fbef676544060a57da995f058db061f37/src/main/cljs/cljs/core.cljs#L9803&gt;
on cljs, this function "detect" the NS of the map to print `{:a/b 33}` as `#:a{:b 33}` (reader 1.9 feature)
It may be usefull.</text>
  </message>
  <message>
    <ts>2017-07-16T02:06:58.640404</ts>
    <user>U3JURM9B6</user>
    <text>In haskell, there is something called &lt;https://hackage.haskell.org/package/threepenny-gui&gt;
where there is a thin js layer, and you can write your entire app in haskell (when on localhost)

Is there something similar to clojure? where when on localhost, you can write webapps in clj because the 'client' side is just a very thin cljs code that sends events back to the clj side to be processed</text>
  </message>
  <message>
    <ts>2017-07-16T03:10:16.838332</ts>
    <user>U04V70XH6</user>
    <text>I've read all the stuff about Threepenny and I still have no idea what it actually is/does...</text>
  </message>
  <message>
    <ts>2017-07-16T03:10:31.839233</ts>
    <user>U04V70XH6</user>
    <text>(but that's how I feel about most Haskell stuff)</text>
  </message>
  <message>
    <ts>2017-07-16T04:22:28.083546</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U04V70XH6&gt; : imagine ghcjs did not exist</text>
  </message>
  <message>
    <ts>2017-07-16T04:22:41.084369</ts>
    <user>U3JURM9B6</user>
    <text>imaginme haste did not exist; then there's no way to do js / browser dev in . ahskell</text>
  </message>
  <message>
    <ts>2017-07-16T04:23:05.085782</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U3JURM9B6&gt; in the Java world, this reminds me of Java Server Faces. Given the horrible experience I had with it, I'm not surprised it was not much reproduced in the Clojure ecosystem</text>
  </message>
  <message>
    <ts>2017-07-16T04:23:43.088480</ts>
    <user>U3JURM9B6</user>
    <text>then haskell creates the js library which talks to haskell ober websocket</text>
  </message>
  <message>
    <ts>2017-07-16T04:23:55.089245</ts>
    <user>U3JURM9B6</user>
    <text>this js likbrary allows haskell to create/modify dom elements, and routes events back to haskell</text>
  </message>
  <message>
    <ts>2017-07-16T07:31:57.763354</ts>
    <user>U46LFMYTD</user>
    <text>does anybody here have experience with loom?</text>
  </message>
  <message>
    <ts>2017-07-16T09:43:07.330488</ts>
    <user>U08E3BBST</user>
    <text>&lt;@U3JURM9B6&gt; so to ship your Threepenny-based app, you have to ship the haskell-compiled binary server as well?</text>
  </message>
  <message>
    <ts>2017-07-16T11:12:54.790758</ts>
    <user>U0739PUFQ</user>
    <text>hi everybody! does any one knows what happens to lein :repl-options :caught in headless mode?</text>
  </message>
  <message>
    <ts>2017-07-16T11:13:32.793819</ts>
    <user>U0739PUFQ</user>
    <text>it works when you start lein repl, but not lein repl :headless</text>
  </message>
  <message>
    <ts>2017-07-16T11:16:43.810653</ts>
    <user>U0739PUFQ</user>
    <text>hmmm more related to :repl-options :caught and nrepl</text>
  </message>
  <message>
    <ts>2017-07-16T11:33:02.897249</ts>
    <user>U1C03090C</user>
    <text>So I'm thinking about writing a clojure desktop app. Does &lt;https://github.com/halgari/fn-fx&gt; seem relatively stable and usable?</text>
  </message>
  <message>
    <ts>2017-07-16T12:52:18.324150</ts>
    <user>U06C63VL4</user>
    <text>RE: threepenny, seems like Haskell analogue to R's Shiny &lt;https://shiny.rstudio.com/&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T14:59:55.003278</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U08E3BBST&gt; : if you were to ship it, yes; in practice, you'd never ship it, it'd only for apps you run locally and want a browser-dom-gui</text>
  </message>
  <message>
    <ts>2017-07-16T15:00:28.007185</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U06C63VL4&gt; can R's shiny take *arbitrary* dom events, and send it back to R ?</text>
  </message>
  <message>
    <ts>2017-07-16T15:31:45.166056</ts>
    <user>U04V1HS2L</user>
    <text>Is there a team here, who uses both emacs/cider &amp;amp; intelij/cursive? Did you experienced indents issues like this? &lt;https://github.com/weavejester/cljfmt/issues/97&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T15:33:28.174629</ts>
    <user>U0ALQHJRF</user>
    <text>Can someone toss me a basic/simple macro that works in clj/cljs/self-hosted???</text>
  </message>
  <message>
    <ts>2017-07-16T15:34:28.179821</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U0ALQHJRF&gt; like `(defmacro foo [x] x)` ?</text>
  </message>
  <message>
    <ts>2017-07-16T15:37:06.193244</ts>
    <user>U0ALQHJRF</user>
    <text>&lt;@U0BKWMG5B&gt; hahah im looking for something that has reader conditionals, `(defmacro broken [] #?(:clj "clojure" :cljs "clojurescript"))` resolves to "clojure" in JVM ClojureScript</text>
  </message>
  <message>
    <ts>2017-07-16T15:38:08.198263</ts>
    <user>U0ALQHJRF</user>
    <text>ideally I would like "clojure" in clj and "clojurescript" in cljs/self-hosted</text>
  </message>
  <message>
    <ts>2017-07-16T15:39:07.203389</ts>
    <user>U0ALQHJRF</user>
    <text>&lt;@U0BKWMG5B&gt; im just trying to wrap my head around the correct pattern for what I am looking for</text>
  </message>
  <message>
    <ts>2017-07-16T15:41:39.216527</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U0ALQHJRF&gt; There's a way to do that that involves looking at a var, but I forget which one.</text>
  </message>
  <message>
    <ts>2017-07-16T15:43:11.224186</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U0ALQHJRF&gt; see &lt;https://github.com/cgrand/macrovich&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T15:43:54.227765</ts>
    <user>U0ALQHJRF</user>
    <text>&lt;@U060FKQPN&gt; &lt;@U0BKWMG5B&gt; yeah I looked at macrovich/case but I figured there was a proper way to do it without `&amp;amp;env` checking</text>
  </message>
  <message>
    <ts>2017-07-16T16:33:34.483718</ts>
    <user>U0GN0S72R</user>
    <text>I've been using clojure for 19 years and I just now figured out that you can use `(partition-all 2 1 coll)` to walk a collection with awareness of whether you're at the end or not.</text>
  </message>
  <message>
    <ts>2017-07-16T16:34:31.488598</ts>
    <user>U060FKQPN</user>
    <text>huh</text>
  </message>
  <message>
    <ts>2017-07-16T16:34:38.489221</ts>
    <user>U060FKQPN</user>
    <text>:upside_down_face:</text>
  </message>
  <message>
    <ts>2017-07-16T16:35:08.491734</ts>
    <user>U060FKQPN</user>
    <text>yep, that's a funny trick</text>
  </message>
  <message>
    <ts>2017-07-16T16:35:41.494327</ts>
    <user>U0509NKGK</user>
    <text>&lt;@U0GN0S72R&gt; neat!

```
Give me some Clojure:
&amp;gt; (partition-all 2 1 (range 5))
((0 1) (1 2) (2 3) (3 4) (4))
&amp;gt; (partition-all 2 1 (range 6))
((0 1) (1 2) (2 3) (3 4) (4 5) (5))
```</text>
  </message>
  <message>
    <ts>2017-07-16T17:08:49.667474</ts>
    <user>U06F82LES</user>
    <text>&lt;@U0GN0S72R&gt; nice! that's actually a pretty common use case</text>
  </message>
  <message>
    <ts>2017-07-16T17:10:35.677064</ts>
    <user>U0GN0S72R</user>
    <text>suggested usage: `(doseq [[x more?] (partition-all 2 1 coll)] ...)`</text>
  </message>
  <message>
    <ts>2017-07-16T17:45:16.853294</ts>
    <user>U0567Q30W</user>
    <text>&lt;@U04V1HS2L&gt; Cursive allows you to control this, _Settings-&amp;gt;Editor-&amp;gt;Code Style-&amp;gt;Clojure-&amp;gt;General-&amp;gt;One space list indent_</text>
  </message>
  <message>
    <ts>2017-07-16T17:45:49.856061</ts>
    <user>U0567Q30W</user>
    <text>Recent versions of CIDER will also allow you to configure Emacs to do the opposite if you prefer that, I'm not sure what the setting is though.</text>
  </message>
  <message>
    <ts>2017-07-16T22:05:51.376684</ts>
    <user>U3JURM9B6</user>
    <text>is there a way to get the emacs repl to display reagent/hiccup/react/dom/svg elements ? so I want to write sexps that return hiccup, then have emacs, instead of displaying the raw clojure data, to render it and display it</text>
  </message>
  <message>
    <ts>2017-07-16T22:06:00.377735</ts>
    <user>U3JURM9B6</user>
    <text>if I had this, it'd give me most of ipython in eamcs</text>
  </message>
  <message>
    <ts>2017-07-16T22:56:50.756557</ts>
    <user>U1C03090C</user>
    <text>So I'm thinking about writing a clojure desktop app. Does &lt;https://github.com/halgari/fn-fx&gt; seem relatively stable and usable?</text>
  </message>
  <message>
    <ts>2017-07-16T23:36:42.050495</ts>
    <user>U3JURM9B6</user>
    <text>&lt;https://ring-clojure.github.io/ring/ring.adapter.jetty.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-16T23:36:47.051142</ts>
    <user>U3JURM9B6</user>
    <text>why is there no websocket option there?</text>
  </message>
  <message>
    <ts>2017-07-16T23:36:56.052159</ts>
    <user>U3JURM9B6</user>
    <text>how do I specify a websocket (which, iirc, jetty9 supports)</text>
  </message>
  <message>
    <ts>2017-07-17T00:22:44.389454</ts>
    <user>U3QUAHZJ6</user>
    <text>can anyone recommend me an async http client based on core.async?</text>
  </message>
  <message>
    <ts>2017-07-17T00:36:36.490821</ts>
    <user>U0E0XL064</user>
    <text>config: nomad, aero, environ, cprop, ... who uses which library and why? (it's always nice to have some kind of experience reports before deciding)</text>
  </message>
  <message>
    <ts>2017-07-17T00:36:48.492188</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U3QUAHZJ6&gt; why should it be based on core async?</text>
  </message>
  <message>
    <ts>2017-07-17T01:00:53.694737</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0E0XL064&gt; We wrote our own. We haven't gotten around to open sourcing it yet tho'. It's partly inspired by `outpace/config` but does some specific stuff we needed, and it's Component-based. This is a good article comparing some of the config libraries: &lt;http://realworldclojure.com/application-configuration/&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T01:03:51.718368</ts>
    <user>U04V70XH6</user>
    <text>Hmm, actually now I re-read that article, I suspect Sonian's `carica` is more likely the inspiration for what we ended up with.</text>
  </message>
  <message>
    <ts>2017-07-17T01:06:19.736837</ts>
    <user>U06C63VL4</user>
    <text>Not entirely sure. Define 'arbitrary'. But on the face of it, I would think the answer is 'yes'. However, like all such things, it is not miraculous - it does not provide totally open ended automated UI generation...</text>
  </message>
  <message>
    <ts>2017-07-17T01:10:39.769169</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U04V70XH6&gt; right, thx</text>
  </message>
  <message>
    <ts>2017-07-17T02:10:31.277272</ts>
    <user>U051KLSJF</user>
    <text>&lt;@U0E0XL064&gt; we use aero, I like it's philosophy of centralising as much config as possible, and just separating out sensitive config</text>
  </message>
  <message>
    <ts>2017-07-17T03:00:57.858970</ts>
    <user>U1C03090C</user>
    <text>Does clojure have any sort of plugin loading library? I'd like to create an application which loads plugins, but I haven't seen anything around.</text>
  </message>
  <message>
    <ts>2017-07-17T04:02:09.870889</ts>
    <user>U5YHX0TQV</user>
    <text>&lt;@U1C03090C&gt; &lt;https://yogthos.net/posts/2015-01-15-A-Plugin-System-in-Clojure.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T04:04:58.925518</ts>
    <user>U0D33A4JF</user>
    <text>&lt;@U0E0XL064&gt; we use &lt;https://github.com/typesafehub/config&gt; with a tiny clojure wrapper</text>
  </message>
  <message>
    <ts>2017-07-17T04:07:10.965871</ts>
    <user>U050SC7SV</user>
    <text>&lt;@U0E0XL064&gt; aero here too, it's just edn + some data readers. nothing too fancy, but quite powerfull. And you can extend it if you need it to do something it can't. It's quite lightweight.</text>
  </message>
  <message>
    <ts>2017-07-17T04:46:47.770325</ts>
    <user>U3JURM9B6</user>
    <text>```
{:keys [in out] :or {in chan out chan}}
```

I am familiar with {:keys [...]} . What does the :or mean?</text>
  </message>
  <message>
    <ts>2017-07-17T04:47:19.781795</ts>
    <user>U060FKQPN</user>
    <text>if value is not present, use default</text>
  </message>
  <message>
    <ts>2017-07-17T04:47:20.782254</ts>
    <user>U0QNQ3P3L</user>
    <text>&lt;@U3JURM9B6&gt; those are alternate values if not found</text>
  </message>
  <message>
    <ts>2017-07-17T04:47:48.791775</ts>
    <user>U060FKQPN</user>
    <text>note that it checks using `contains?` not nil/false</text>
  </message>
  <message>
    <ts>2017-07-17T04:48:16.801483</ts>
    <user>U3JURM9B6</user>
    <text>ah, it's 

[in (if (contains? args :in) (:in args) chan))]</text>
  </message>
  <message>
    <ts>2017-07-17T04:48:39.809678</ts>
    <user>U060FKQPN</user>
    <text>semantically yes</text>
  </message>
  <message>
    <ts>2017-07-17T04:49:00.817285</ts>
    <user>U3JURM9B6</user>
    <text>great; thanks!</text>
  </message>
  <message>
    <ts>2017-07-17T04:51:10.864448</ts>
    <user>U1C03090C</user>
    <text>Thanks!</text>
  </message>
  <message>
    <ts>2017-07-17T04:52:37.895399</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U051KLSJF&gt; &lt;@U050SC7SV&gt; ok... I've been using cprop before. I might try aero for a change.
&lt;@U0D33A4JF&gt; any reason why you don't use one of the clojure config libs?</text>
  </message>
  <message>
    <ts>2017-07-17T05:56:50.281482</ts>
    <user>U0D33A4JF</user>
    <text>no, I just like that config format</text>
  </message>
  <message>
    <ts>2017-07-17T05:57:41.299098</ts>
    <user>U0D33A4JF</user>
    <text>well documented, does everything I want</text>
  </message>
  <message>
    <ts>2017-07-17T05:59:59.347477</ts>
    <user>U0D33A4JF</user>
    <text>question: In Clojurescript it seems that the `&amp;amp;env` passed to macros contains the `def` vars as well as locals. How do I get the same in Clojure?</text>
  </message>
  <message>
    <ts>2017-07-17T10:43:22.503131</ts>
    <user>U3CKJQW81</user>
    <text>I need to filter this out by matching the inner vector for example this [[:x [3 2]] [:y [1 1]] [:z [3 2]] [:i [3 1]] should be [[:x [3 2]] [:y [1 1]] [:z [3 2]]]</text>
  </message>
  <message>
    <ts>2017-07-17T10:45:11.573868</ts>
    <user>U3CKJQW81</user>
    <text>[:i [3 1]]  will be removed because the first element of the inner vector appeared before with a different value of the last element</text>
  </message>
  <message>
    <ts>2017-07-17T10:47:59.683675</ts>
    <user>U4VDXB2TU</user>
    <text>is there a clojure naming convention preference for a function which returns a predicate? Assumption here is that some extra data is required to create the predicate and we need a separate function taking that extra data and returning the predicate function</text>
  </message>
  <message>
    <ts>2017-07-17T10:49:31.743943</ts>
    <user>U050SC7SV</user>
    <text>I think `foo-fn`is quite common</text>
  </message>
  <message>
    <ts>2017-07-17T10:50:11.770445</ts>
    <user>U050SC7SV</user>
    <text>at least in clj.core</text>
  </message>
  <message>
    <ts>2017-07-17T10:51:10.809109</ts>
    <user>U61KCTX8S</user>
    <text>did anyone try to call an external program with clojure with timeout? none of the examples (conch), (clojure.contrib.shell-out with java.util.concurrent.TimeUni) did work... stuff runs forever</text>
  </message>
  <message>
    <ts>2017-07-17T10:51:43.830856</ts>
    <user>U61KCTX8S</user>
    <text>i mean a seperate process</text>
  </message>
  <message>
    <ts>2017-07-17T10:52:13.849969</ts>
    <user>U61KCTX8S</user>
    <text>like call a windows exe and kill it after 10 seconds if it still runs</text>
  </message>
  <message>
    <ts>2017-07-17T10:57:23.055755</ts>
    <user>U050SC7SV</user>
    <text>I think you need to do the bookeeping yourself and call destroy on the Process instance if not completed</text>
  </message>
  <message>
    <ts>2017-07-17T11:00:35.186405</ts>
    <user>U050SC7SV</user>
    <text>```
(let [x (.exec (Runtime/getRuntime) "htop")]
  (try
    (Thread/sleep 10)
    (.exitValue x) ;; check value possibly
    (catch java.lang.IllegalThreadStateException e
      (.destroy x))))
```</text>
  </message>
  <message>
    <ts>2017-07-17T11:00:50.196851</ts>
    <user>U050SC7SV</user>
    <text>something a bit like that</text>
  </message>
  <message>
    <ts>2017-07-17T11:01:05.207132</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U050SC7SV&gt;  you've seen a good working code example i can copy paste?</text>
  </message>
  <message>
    <ts>2017-07-17T11:01:13.212278</ts>
    <user>U61KCTX8S</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-17T11:01:57.242633</ts>
    <user>U61KCTX8S</user>
    <text>this example will not wait 10 secs if the procs dies before?</text>
  </message>
  <message>
    <ts>2017-07-17T11:02:16.255122</ts>
    <user>U050SC7SV</user>
    <text>10ms</text>
  </message>
  <message>
    <ts>2017-07-17T11:02:29.264455</ts>
    <user>U050SC7SV</user>
    <text>it's not a complete example, but you should be able to take it from here</text>
  </message>
  <message>
    <ts>2017-07-17T11:03:39.311506</ts>
    <user>U61KCTX8S</user>
    <text>how about getting stdout, stderr from this example?</text>
  </message>
  <message>
    <ts>2017-07-17T11:04:29.344798</ts>
    <user>U050SC7SV</user>
    <text>-&amp;gt; &lt;https://docs.oracle.com/javase/7/docs/api/java/lang/Process.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T11:04:31.346502</ts>
    <user>U61KCTX8S</user>
    <text>the problem wit conch was that stdot/err was flushed at the end, which would never happen when process was destroyed earlier</text>
  </message>
  <message>
    <ts>2017-07-17T11:09:33.542285</ts>
    <user>U61KCTX8S</user>
    <text>should it be possible to do stuff like (let [x (.exec (Runtime/getRuntime) "htop &amp;gt; mylogfile")] with mentioed example?</text>
  </message>
  <message>
    <ts>2017-07-17T11:14:36.736739</ts>
    <user>U050TNB9F</user>
    <text>I have a seq like `[:a :b :c]` and want to get a lazy seq like `[:a :b :c :a :b :c :a :b ....]` — any suggestions?</text>
  </message>
  <message>
    <ts>2017-07-17T11:15:07.757070</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U050TNB9F&gt; `(cycle [:a :b :c])`</text>
  </message>
  <message>
    <ts>2017-07-17T11:16:31.812110</ts>
    <user>U050TNB9F</user>
    <text>&lt;@U3L6TFEJF&gt; thanks, that's what I missed! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-17T11:24:16.115639</ts>
    <user>U6AKZKQVC</user>
    <text>Hello. I'm looking at &lt;https://dev.clojure.org/display/community/Maven+Settings+and+Repositories&gt; and wondering about SNAPSHOT releases. In the example, is 1.1.0-SNAPSHOT before or after the 1.1.0 release? In other words, is it supposed to be a pre-release snapshot or a post-release patch?</text>
  </message>
  <message>
    <ts>2017-07-17T12:04:17.692963</ts>
    <user>U051SS2EU</user>
    <text>I don't think any of the process stuff uses sh, and `&amp;gt;` is sh syntax, so you need to wrap up your call into a string passed to `/bin/sh` to make that work</text>
  </message>
  <message>
    <ts>2017-07-17T12:04:49.712462</ts>
    <user>U051SS2EU</user>
    <text>or you can create the redirection using the file handles Process gives you if you want to do it the hard/portable way, of course</text>
  </message>
  <message>
    <ts>2017-07-17T12:11:00.936798</ts>
    <user>U053032QC</user>
    <text>`1.1.0-SNAPSHOT` means "the version that will eventually be released as `1.1.0`"</text>
  </message>
  <message>
    <ts>2017-07-17T12:11:23.950145</ts>
    <user>U053032QC</user>
    <text>i.e., `*-SNAPSHOT` comes before `*`</text>
  </message>
  <message>
    <ts>2017-07-17T12:15:16.087257</ts>
    <user>U053032QC</user>
    <text>under the hood, every time you `lein install` a snapshot version, a timestamped artifact is added to your maven repo, and the SNAPSHOT name just points to the latest of these</text>
  </message>
  <message>
    <ts>2017-07-17T12:17:12.156004</ts>
    <user>U053032QC</user>
    <text>if you use the `lein-release` plugin then when you're ready to release it, you run `lein release` and it'll transition your `1.1.0-SNAPSHOT` to `1.1.0`, commit, tag and deploy that to your maven repo, and then bump the version to `1.1.1-SNAPSHOT`, so you're ready to start working on the future `1.1.1` release.</text>
  </message>
  <message>
    <ts>2017-07-17T13:54:43.553202</ts>
    <user>U6AKZKQVC</user>
    <text>&lt;@U053032QC&gt; Thanks!</text>
  </message>
  <message>
    <ts>2017-07-17T15:40:45.180703</ts>
    <user>U0ALQHJRF</user>
    <text>&lt;http://github.com/degree9/meta|github.com/degree9/meta&gt; has a fully open ended UI solution</text>
  </message>
  <message>
    <ts>2017-07-17T15:41:37.208808</ts>
    <user>U0ALQHJRF</user>
    <text>uses edn and a template to generate a default UI or you can provide an alternate template or final cljs file for the ui</text>
  </message>
  <message>
    <ts>2017-07-17T17:19:47.331404</ts>
    <user>U5Z4ECHCM</user>
    <text>Hate to interrupt, but I'm having trouble splitting up the middleware for my different routes in Compojure</text>
  </message>
  <message>
    <ts>2017-07-17T17:19:56.335445</ts>
    <user>U5Z4ECHCM</user>
    <text>Anyone have information / a blog post / etc on the topic?</text>
  </message>
  <message>
    <ts>2017-07-17T17:21:20.374810</ts>
    <user>U46LFMYTD</user>
    <text>I have a question about structural sharing in nested maps. Suppose I have a map called mymap that looks like this
```
mymap
=&amp;gt; {:mykey [{:A 1, :B 2} {:A 2, :B 2} {:A 3, :B 2}]}
```
I want to write a function that goes down and increments each value for :A
I can do this with
```
(assoc mymap :mykey (map #(assoc % :A (inc (:A %))) (:mykey mymap)))
{:mykey ({:A 2, :B 2} {:A 3, :B 2} {:A 4, :B 2})}
```
do the keys :B "point to the same place in memory" after this modification as the original maps? That is, is there structural sharing going on between the maps in the vector before and after this modification?</text>
  </message>
  <message>
    <ts>2017-07-17T17:30:22.621405</ts>
    <user>U0CHY4VNW</user>
    <text>Asymmetry in `string/split` and `string/join` makes me sad : ( ```        parts (string/split kafka #":")
        host (string/join ":" (butlast parts))
```</text>
  </message>
  <message>
    <ts>2017-07-17T17:32:46.685435</ts>
    <user>U5NAUMCAD</user>
    <text>Hi all, I am trying to write some test in clojure and I need to do some Mocks and proxies, however I cannot figure out how to proxy some java objects and methods

I have this function</text>
  </message>
  <message>
    <ts>2017-07-17T17:33:18.699618</ts>
    <user>U5NAUMCAD</user>
    <text>``` (defn singletest
  [cert]
  (let [x500principal (.getSubjectX500Principal cert)
        dn (.getName x500principal)]
    (apply str "abcdefg"))) ```</text>
  </message>
  <message>
    <ts>2017-07-17T17:33:48.712568</ts>
    <user>U5NAUMCAD</user>
    <text>cert is a java object of type X509CertImpl</text>
  </message>
  <message>
    <ts>2017-07-17T17:34:56.742046</ts>
    <user>U5NAUMCAD</user>
    <text>I know that I am not using x500principal and dn; but it is an example</text>
  </message>
  <message>
    <ts>2017-07-17T17:35:25.754755</ts>
    <user>U5NAUMCAD</user>
    <text>However I am having a hard time trying to do the test</text>
  </message>
  <message>
    <ts>2017-07-17T17:35:35.759241</ts>
    <user>U5NAUMCAD</user>
    <text>``` (deftest singletest
  (let [cert (.X509CertImpl)
        x500principal (proxy [X509CertImpl] []
                       (getSubjectX500Principal [] nil))
        dn (proxy [X500Principal] []
                       (getName [] "works"))]
       (is (= "" (c/singletest cert))))) ```</text>
  </message>
  <message>
    <ts>2017-07-17T17:36:13.775789</ts>
    <user>U5NAUMCAD</user>
    <text>throws me java.lang.IllegalArgumentException: Malformed member expression, expecting (.member target ...)</text>
  </message>
  <message>
    <ts>2017-07-17T17:37:42.813784</ts>
    <user>U5NAUMCAD</user>
    <text>any idea??</text>
  </message>
  <message>
    <ts>2017-07-17T17:38:09.825214</ts>
    <user>U5NAUMCAD</user>
    <text>someone has worked with certificates before :sob::sob:</text>
  </message>
  <message>
    <ts>2017-07-17T17:39:29.859866</ts>
    <user>U050MP39D</user>
    <text>what is c?</text>
  </message>
  <message>
    <ts>2017-07-17T17:40:13.879221</ts>
    <user>U050MP39D</user>
    <text>c/singletest looks like a syntax error</text>
  </message>
  <message>
    <ts>2017-07-17T17:40:30.886352</ts>
    <user>U050MP39D</user>
    <text>oh sorry no it's not</text>
  </message>
  <message>
    <ts>2017-07-17T17:40:32.887634</ts>
    <user>U050MP39D</user>
    <text>god I'm tired</text>
  </message>
  <message>
    <ts>2017-07-17T17:41:05.901682</ts>
    <user>U5NAUMCAD</user>
    <text>no worries</text>
  </message>
  <message>
    <ts>2017-07-17T17:41:20.908629</ts>
    <user>U050MP39D</user>
    <text>this (.X509CertImpl)</text>
  </message>
  <message>
    <ts>2017-07-17T17:41:23.909869</ts>
    <user>U050MP39D</user>
    <text>is invalid syntax</text>
  </message>
  <message>
    <ts>2017-07-17T17:41:42.918058</ts>
    <user>U050MP39D</user>
    <text>I think you want (new X509CertImpl) or (X509CertImpl.) (latter preferred generally)</text>
  </message>
  <message>
    <ts>2017-07-17T17:41:57.924740</ts>
    <user>U5NAUMCAD</user>
    <text>I change it to 
``` (deftest singletest
  (let [cert (proxy [X509CertImpl] []
               (getSubjectX500Principal [] nil))
        x500principal (proxy [X500Principal] []
                       (getName [] "works"))]
       (is (= "" (c/singletest cert))))) ```</text>
  </message>
  <message>
    <ts>2017-07-17T17:42:07.928740</ts>
    <user>U5NAUMCAD</user>
    <text>but I am getting</text>
  </message>
  <message>
    <ts>2017-07-17T17:42:14.931776</ts>
    <user>U5NAUMCAD</user>
    <text>java.lang.VerifyError: Cannot inherit from final class</text>
  </message>
  <message>
    <ts>2017-07-17T17:42:30.938584</ts>
    <user>U5NAUMCAD</user>
    <text>this is because X500Principal is a final class</text>
  </message>
  <message>
    <ts>2017-07-17T17:42:54.948971</ts>
    <user>U5NAUMCAD</user>
    <text>then how can I work around that</text>
  </message>
  <message>
    <ts>2017-07-17T17:43:22.960642</ts>
    <user>U050MP39D</user>
    <text>I think you want to implement java.security.Principal not X500Principal</text>
  </message>
  <message>
    <ts>2017-07-17T17:43:57.975940</ts>
    <user>U5NAUMCAD</user>
    <text>the problem is that I have everything working!</text>
  </message>
  <message>
    <ts>2017-07-17T17:44:05.979468</ts>
    <user>U050MP39D</user>
    <text>ditto you probably want to implement X509Certificate not X509CertImpl (program against abstractions, not concretions)</text>
  </message>
  <message>
    <ts>2017-07-17T17:44:13.982713</ts>
    <user>U5NAUMCAD</user>
    <text>I mean, the only thing left is the test</text>
  </message>
  <message>
    <ts>2017-07-17T17:44:30.990167</ts>
    <user>U050MP39D</user>
    <text>ok, test code is still code though</text>
  </message>
  <message>
    <ts>2017-07-17T17:44:40.994292</ts>
    <user>U5NAUMCAD</user>
    <text>yes!</text>
  </message>
  <message>
    <ts>2017-07-17T17:45:37.018363</ts>
    <user>U5NAUMCAD</user>
    <text>and there is no X509Certificate class from sun.security.x509</text>
  </message>
  <message>
    <ts>2017-07-17T17:46:23.037707</ts>
    <user>U5NAUMCAD</user>
    <text>what about the final class?</text>
  </message>
  <message>
    <ts>2017-07-17T17:46:30.040485</ts>
    <user>U5NAUMCAD</user>
    <text>I cannot proxy that</text>
  </message>
  <message>
    <ts>2017-07-17T18:14:45.694814</ts>
    <user>U2MPUENUC</user>
    <text>&lt;@U0CHY4VNW&gt; what is the asymmetry ?</text>
  </message>
  <message>
    <ts>2017-07-17T18:16:32.730934</ts>
    <user>U5Z4ECHCM</user>
    <text>Would anyone know why all my api routes are being broken by CORS and/or the solution?</text>
  </message>
  <message>
    <ts>2017-07-17T18:16:45.735345</ts>
    <user>U5Z4ECHCM</user>
    <text>404s and OPTION requests in the chrome console</text>
  </message>
  <message>
    <ts>2017-07-17T18:16:49.736798</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U2MPUENUC&gt; In `split` the delimiter is last, whereas in `join` the delimiter is first</text>
  </message>
  <message>
    <ts>2017-07-17T18:17:05.742036</ts>
    <user>U0CHY4VNW</user>
    <text>I only ever remember they are opposed, never which one is which</text>
  </message>
  <message>
    <ts>2017-07-17T18:17:20.747319</ts>
    <user>U2MPUENUC</user>
    <text>oh, in the args ..</text>
  </message>
  <message>
    <ts>2017-07-17T18:17:31.750916</ts>
    <user>U0CHY4VNW</user>
    <text>I literally have to try it in the repl every time I want to use them</text>
  </message>
  <message>
    <ts>2017-07-17T18:17:52.758094</ts>
    <user>U11BV7MTK</user>
    <text>string join works on a collection which always goes in the last positional argument</text>
  </message>
  <message>
    <ts>2017-07-17T18:18:13.764963</ts>
    <user>U11BV7MTK</user>
    <text>split works on a single object which always goes first positionally</text>
  </message>
  <message>
    <ts>2017-07-17T18:19:44.796587</ts>
    <user>U0CHY4VNW</user>
    <text>So you are saying the inconsistency is actually an example of a greater consistency?</text>
  </message>
  <message>
    <ts>2017-07-17T18:21:28.832131</ts>
    <user>U0CHY4VNW</user>
    <text>This must be what Gödel was talking about</text>
  </message>
  <message>
    <ts>2017-07-17T18:24:41.896978</ts>
    <user>U0CHY4VNW</user>
    <text>Still, why not always have "the thing being operated on" either always last or always first? What value does having one rule for single objects and a different rule for collections provide?</text>
  </message>
  <message>
    <ts>2017-07-17T18:27:03.943922</ts>
    <user>U11BV7MTK</user>
    <text>`(map fn coll)` is a very standard idiom</text>
  </message>
  <message>
    <ts>2017-07-17T18:27:11.946595</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U0CHY4VNW&gt; I didn't read all of these but it's exactly your question: &lt;https://stackoverflow.com/questions/18234818/why-is-the-argument-position-of-split-and-join-in-clojure-string-mixed-up&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T18:27:25.951083</ts>
    <user>U11BV7MTK</user>
    <text>think of the threading macros `-&amp;gt;` vs `-&amp;gt;&amp;gt;`. basically one is do stuff to object and one is do stuff to collection</text>
  </message>
  <message>
    <ts>2017-07-17T18:28:09.965558</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U11BV7MTK&gt; But.... that doesn't answer my question</text>
  </message>
  <message>
    <ts>2017-07-17T18:28:15.967553</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U1ALMRBLL&gt; Thanks!</text>
  </message>
  <message>
    <ts>2017-07-17T18:28:46.977400</ts>
    <user>U11BV7MTK</user>
    <text>i thought the question was why do these seem inconsistent. so then yes the "greater consistency" sounds good to me</text>
  </message>
  <message>
    <ts>2017-07-17T18:29:22.989197</ts>
    <user>U0CHY4VNW</user>
    <text>I did ask a few questions. The one I was referring to was this: "Still, why not always have "the thing being operated on" either always last or always first? What value does having one rule for single objects and a different rule for collections provide?"</text>
  </message>
  <message>
    <ts>2017-07-17T18:30:13.006177</ts>
    <user>U11BV7MTK</user>
    <text>well i can't speak to that i guess</text>
  </message>
  <message>
    <ts>2017-07-17T18:30:24.009799</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U1ALMRBLL&gt; Funny, they don't answer it there either : )</text>
  </message>
  <message>
    <ts>2017-07-17T18:30:31.012225</ts>
    <user>U0CHY4VNW</user>
    <text>just show ways to work around it</text>
  </message>
  <message>
    <ts>2017-07-17T18:31:12.026187</ts>
    <user>U050MP39D</user>
    <text>I think it's nice having it obviously clear whether code is working on collections or objects myself</text>
  </message>
  <message>
    <ts>2017-07-17T18:33:22.068678</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U0CHY4VNW&gt; with things like this I think you are bound to find reasons for doing it one way or another, and just as with anything, there are likely to be differences of opinion. Particularly with functions one does not use very often, you'll need to look at the docstring or IDE hints anyway to determine what it takes, so unless if vexes you greatly, I'd say this is not much of an irritation :wink:</text>
  </message>
  <message>
    <ts>2017-07-17T18:34:16.085554</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U1ALMRBLL&gt; Appreciated, though it does irritate me every time I have to look it up</text>
  </message>
  <message>
    <ts>2017-07-17T18:34:46.095170</ts>
    <user>U0CHY4VNW</user>
    <text>It is okay, nothing is perfect</text>
  </message>
  <message>
    <ts>2017-07-17T18:35:06.101320</ts>
    <user>U0CHY4VNW</user>
    <text>Really I gripe because clojure is so well-designed in most other ways, these funny inconsistencies stand out all the more</text>
  </message>
  <message>
    <ts>2017-07-17T18:35:10.102614</ts>
    <user>U1ALMRBLL</user>
    <text>Your point is well taken, and justifying its correctness may or may not be a losing battle -- if that's one of your irritations then I'd say you'll be just fine :thumbsup::skin-tone-2:  :wink:</text>
  </message>
  <message>
    <ts>2017-07-17T18:35:10.102787</ts>
    <user>U11BV7MTK</user>
    <text>not sure what your environment is but if in emacs `eldoc` will solve that for you</text>
  </message>
  <message>
    <ts>2017-07-17T18:36:52.134833</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U11BV7MTK&gt; Thanks I'll take a look at that</text>
  </message>
  <message>
    <ts>2017-07-17T18:37:34.147849</ts>
    <user>U11BV7MTK</user>
    <text>if in CIDER, apropos, grimoire, browse ns and eldoc are quite nice</text>
  </message>
  <message>
    <ts>2017-07-17T18:37:40.149624</ts>
    <user>U11BV7MTK</user>
    <text>i've been using grimoire quite a bit</text>
  </message>
  <message>
    <ts>2017-07-17T18:52:08.413225</ts>
    <user>U11BV7MTK</user>
    <text>That's awesome. It's just so handy. Much appreciated</text>
  </message>
  <message>
    <ts>2017-07-17T19:13:47.797511</ts>
    <user>U61KCTX8S</user>
    <text>can anyone explain me what a java.lang.IllegalArgumentException: array element type mismatch
means?</text>
  </message>
  <message>
    <ts>2017-07-17T19:16:48.846361</ts>
    <user>U0NCTKEV8</user>
    <text>it means the array type you are calling a java method with doesn't match</text>
  </message>
  <message>
    <ts>2017-07-17T19:18:36.874784</ts>
    <user>U61KCTX8S</user>
    <text>so fi it expects an array of ints and i am using an array of strings</text>
  </message>
  <message>
    <ts>2017-07-17T19:18:46.877581</ts>
    <user>U61KCTX8S</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-17T19:47:21.318265</ts>
    <user>U0CMVHBL2</user>
    <text>Yes, there is.  You can verify yourself whether this is so using identical? on the pieces you hope are being shared, as shown below</text>
  </message>
  <message>
    <ts>2017-07-17T19:47:26.319468</ts>
    <user>U0CMVHBL2</user>
    <text>user=&amp;gt; (def mymap {:mykey [{:A 1, :B 2} {:A 2, :B 2} {:A 3, :B 2}]})
#'user/mymap
user=&amp;gt; (def m2 (assoc mymap :mykey (map #(assoc % :A (inc (:A %))) (:mykey mymap))))
#'user/m2
user=&amp;gt; (identical? (-&amp;gt; mymap :mykey (nth 0) :B) (-&amp;gt; m2 :mykey (nth 0) :B))
true</text>
  </message>
  <message>
    <ts>2017-07-17T21:18:35.545010</ts>
    <user>U0DATSMH6</user>
    <text>Hmm, my gut tells me that's not a good example because: ```
user=&amp;gt; (identical? 2 2)
true
```</text>
  </message>
  <message>
    <ts>2017-07-17T21:20:55.574797</ts>
    <user>U0DATSMH6</user>
    <text>This would be a better test:
```
user=&amp;gt; (identical? {:test 1} {:test 1})
false
user=&amp;gt; (def mymap {:mykey [{:A 1, :B {:test 1}} {:A 2, :B {:test 1}} {:A 3, :B {:test 1}}]})
#'user/mymap
user=&amp;gt; (def m2 (assoc mymap :mykey (map #(assoc % :A (inc (:A %))) (:mykey mymap))))
#'user/m2
user=&amp;gt; (identical? (-&amp;gt; mymap :mykey (nth 0) :B) (-&amp;gt; m2 :mykey (nth 0) :B))
true
```</text>
  </message>
  <message>
    <ts>2017-07-17T21:23:25.606528</ts>
    <user>U0CMVHBL2</user>
    <text>The better test works, too, as I expected it would.  Thanks.</text>
  </message>
  <message>
    <ts>2017-07-17T21:25:27.633246</ts>
    <user>U0DATSMH6</user>
    <text>Also, for clarity, there isn't any structural sharing going on _within_ the vectors themselves - only at the same key "paths" between `mymap` and `m2`:
```
user=&amp;gt; (identical? (-&amp;gt; mymap :mykey first :B) (-&amp;gt; mymap :mykey last :B))
false
user=&amp;gt; (identical? (-&amp;gt; m2 :mykey first :B) (-&amp;gt; m2 :mykey last :B))
false
user=&amp;gt; (-&amp;gt; mymap :mykey first :B)
{:test 1}
user=&amp;gt; (-&amp;gt; mymap :mykey last :B)
{:test 1}
```</text>
  </message>
  <message>
    <ts>2017-07-17T21:25:58.639827</ts>
    <user>U0DATSMH6</user>
    <text>Yeah - this is a cool approach to discover the structural sharing. I hadn't thought of using `identical?` for this.</text>
  </message>
  <message>
    <ts>2017-07-17T22:54:08.689893</ts>
    <user>U3JURM9B6</user>
    <text>keep, for, map -- they want pure functions and return a lazy list</text>
  </message>
  <message>
    <ts>2017-07-17T22:54:18.691911</ts>
    <user>U3JURM9B6</user>
    <text>I want something which is okay to pass an unpure function to ... and returns a strict list</text>
  </message>
  <message>
    <ts>2017-07-17T23:07:42.840667</ts>
    <user>U3JURM9B6</user>
    <text>in good clojure style, do people do (map impure-function ...) or do we do something else when we have to run an impure function and also get its return value ?</text>
  </message>
  <message>
    <ts>2017-07-17T23:24:04.010064</ts>
    <user>U051KLSJF</user>
    <text>&lt;@U3JURM9B6&gt; usually you'll use `doall`</text>
  </message>
  <message>
    <ts>2017-07-17T23:24:48.017690</ts>
    <user>U051KLSJF</user>
    <text>if you care about the return value</text>
  </message>
  <message>
    <ts>2017-07-17T23:31:50.089317</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U3JURM9B6&gt; it is fine, as far as I know, to pass a function with side-effects to `keep`, `filter`, etc -- the gotcha is that you should not *expect* that your code will necessarily execute. So, your side effect may happen, and if you don't mind, great -- but, your side effect might *not* happen, and that's why it says to avoid impure functions (or in some cases, may get called *more than once*).</text>
  </message>
  <message>
    <ts>2017-07-17T23:33:57.110381</ts>
    <user>U051SS2EU</user>
    <text>it also might happen 31 times more than you expected</text>
  </message>
  <message>
    <ts>2017-07-17T23:33:58.110574</ts>
    <user>U051SS2EU</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-17T23:36:08.131658</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U3JURM9B6&gt; not sure why you want a "strict list", but for eager evaluation with guaranteed "run-once", `reduce` would be a decent candidate to build it:
```(defn eager-map [f coll]
  (reverse (reduce #(conj % (f %2)) () coll)))```</text>
  </message>
  <message>
    <ts>2017-07-17T23:43:09.203471</ts>
    <user>U1C03090C</user>
    <text>Does anyone know how to specify a stylesheet for a scene in fn-fx (a clojure wrapper for JavaFx)? &lt;https://github.com/halgari/fn-fx&gt;</text>
  </message>
  <message>
    <ts>2017-07-17T23:54:26.321145</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U051KLSJF&gt; , &lt;@U1ALMRBLL&gt; : okay, so despite the docs saying "use pure function", it's actually okay to assume *atmost once, in order* semantics -- i.e. we don't know how far it will exec (due to evaling thunks at a time) -- but we can assume that:

1. thunks, if evaluated, at evaluated at most once
2. thunks, if evaluated, as "in order"
so
(head (map f '(1 2 3 4 5)))

won't do

(f 1)
(f 3)
eh, let's skip 3 &amp;amp; 4 ... and then just eval (f 5) just for kicks</text>
  </message>
  <message>
    <ts>2017-07-18T00:00:58.393204</ts>
    <user>U46LFMYTD</user>
    <text>hey &lt;@U0DATSMH6&gt; , &lt;@U0CMVHBL2&gt; , I didn't know that `identical?` could be uesd in such a way to examine structural sharing - thanks!</text>
  </message>
  <message>
    <ts>2017-07-18T00:04:05.428111</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U3JURM9B6&gt; in the case of the current implementation of `map`, I'd say so -- with the obvious disclaimer that making assumptions like this and relying on these details is not safe, and that I wouldn't use an approach like this (I'd prefer the `eager-map` function I put above, for example)
in the case of something like a comparator, it's quite likely that it will be executed more than once, per pair, so you would definitely not get any guarantees there.</text>
  </message>
  <message>
    <ts>2017-07-18T00:04:26.431891</ts>
    <user>U5JEJN1CP</user>
    <text>I'm getting a bizarre repl error that occurs only when reloading a file:
```
2. Unhandled clojure.lang.Compiler$CompilerException
   Error compiling *cider-repl webtools* at (1:1)

1. Caused by java.lang.RuntimeException
   No such var: user/reset
```  
The project compiles fine.  The repl starts fine.  The problem only happens if I use `C-c C-x` to recompile.  If I restart the whole repl, it compiles fine.  It seems like it's trying to compile the repl buffer, but I can't for the life of me fathom WHY.  Wondering if anyone has any ideas what would cause this.  The only hit on stack overflow suggests that I must be requiring something `:as user`, but I'm definitely not.</text>
  </message>
  <message>
    <ts>2017-07-18T00:12:33.513942</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U1ALMRBLL&gt; : thanks for the eager map; it seems surprising that 1. core has no eager-map 2. many are probaly using (doall (map ...)) to simulate it, but 3. this revolves around assumptions that map doesn't really guarantee</text>
  </message>
  <message>
    <ts>2017-07-18T00:15:18.541544</ts>
    <user>U5JEJN1CP</user>
    <text>Tried a `lein clean` but that didn't make any difference.</text>
  </message>
  <message>
    <ts>2017-07-18T00:16:26.552395</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U5JEJN1CP&gt; : what is user/reset ? is it part your lein config, part of cider, part of some reload package that you are using? [I use boot]</text>
  </message>
  <message>
    <ts>2017-07-18T00:20:06.589003</ts>
    <user>U5JEJN1CP</user>
    <text>&lt;@U3JURM9B6&gt; User is the init-ns for a repl in my project.clj (lein config).</text>
  </message>
  <message>
    <ts>2017-07-18T00:21:48.606247</ts>
    <user>U5JEJN1CP</user>
    <text>&lt;@U3JURM9B6&gt; so It seems that it expects a symbol `user/reset` that suddenly doesn't exist.  But looking over my changes from the past day I don't see anything that I would expect to affect that.</text>
  </message>
  <message>
    <ts>2017-07-18T00:26:39.655166</ts>
    <user>U5JEJN1CP</user>
    <text>&lt;@U3JURM9B6&gt; Well, restarting emacs finally seems to have fixed it.</text>
  </message>
  <message>
    <ts>2017-07-18T00:27:25.662954</ts>
    <user>U3JURM9B6</user>
    <text>yeah, emacs can be quirky like that</text>
  </message>
  <message>
    <ts>2017-07-18T04:57:00.900416</ts>
    <user>U0666D1EK</user>
    <text>How to avoid reflection warning in gen-class state. Specifically I looking for answer for this question &lt;https://stackoverflow.com/questions/6625104/adding-a-type-hint-to-a-clojure-gen-class-state-access&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T07:10:11.781870</ts>
    <user>U69HWBFB3</user>
    <text>Hello fellow clojurians. I am eager to refactor part of my function that use destructuring but having some problem.

Here is a code snippet that has sequence of files that are grouped based on hash, uploaded and flattened back.

```
(-&amp;gt;&amp;gt;        
      items
      (group-by :hash)
      (pmap #(let
               [[hash [{file :file}] :as group] %]
               (if (upload hash file)
                 (second group))))
      (flatten))))
```

Is there a better way to destructure *group* into key and values to avoid performing `(second group)`?</text>
  </message>
  <message>
    <ts>2017-07-18T07:48:42.509614</ts>
    <user>U69HWBFB3</user>
    <text>Ok, so the only thing I came up with is:

```
(-&amp;gt;&amp;gt;        
      items
      (group-by :hash)
      (pmap #(let
               [[hash values] %
                 [{file :file}] values]
               (if (upload hash file)
                 values)))
      (flatten))))
```

Is it any good?</text>
  </message>
  <message>
    <ts>2017-07-18T08:28:05.357622</ts>
    <user>U071CG4QY</user>
    <text>values is a vector</text>
  </message>
  <message>
    <ts>2017-07-18T08:31:46.444845</ts>
    <user>U69HWBFB3</user>
    <text>&lt;@U485ZRA58&gt;, &lt;@U071CG4QY&gt; is correct - *values* is vector. It may work if we update it:

```
(-&amp;gt;&amp;gt;        
      items
      (group-by :hash)
      (pmap (fn [[hash values]]
			(when (upload hash (:file (first values)))
                  values)))
      flatten)))
```</text>
  </message>
  <message>
    <ts>2017-07-18T08:32:20.458273</ts>
    <user>U485ZRA58</user>
    <text>Oops, my bad. Missed that</text>
  </message>
  <message>
    <ts>2017-07-18T08:32:50.469906</ts>
    <user>U485ZRA58</user>
    <text>That should work</text>
  </message>
  <message>
    <ts>2017-07-18T08:34:28.510061</ts>
    <user>U071CG4QY</user>
    <text>Though I don't know if there is any point to removal of `(second group)`</text>
  </message>
  <message>
    <ts>2017-07-18T08:35:08.526475</ts>
    <user>U071CG4QY</user>
    <text>You may as well do this `[[hash [{file :file} second] :as group] %]`</text>
  </message>
  <message>
    <ts>2017-07-18T08:35:57.545692</ts>
    <user>U69HWBFB3</user>
    <text>&lt;@U071CG4QY&gt; Correct. That is my initial version. But don't you think destructured version is more readable?</text>
  </message>
  <message>
    <ts>2017-07-18T08:38:39.611071</ts>
    <user>U071CG4QY</user>
    <text>&lt;@U69HWBFB3&gt; Nope, imo — you need to parse destructuring and for that structure it is not very easy.</text>
  </message>
  <message>
    <ts>2017-07-18T09:37:54.399689</ts>
    <user>U66G3SGP5</user>
    <text>when using datomic, if I can freely choose between an SQL backed datomic or Cassandra backed datomic, which one is better?</text>
  </message>
  <message>
    <ts>2017-07-18T10:20:21.009950</ts>
    <user>U0BB79MMJ</user>
    <text>&lt;@U63RTB1KR&gt; It's because of the way transducers work. They *are* applied from right to left, but to the reducer fn.</text>
  </message>
  <message>
    <ts>2017-07-18T10:20:33.018031</ts>
    <user>U0BB79MMJ</user>
    <text>You can think of each wrapping the earlier transducers</text>
  </message>
  <message>
    <ts>2017-07-18T10:20:43.024487</ts>
    <user>U3GJHS5DY</user>
    <text>&lt;@U63RTB1KR&gt; &lt;https://clojure.org/reference/transducers&gt; checkout "defining Transformations with transducers"</text>
  </message>
  <message>
    <ts>2017-07-18T10:20:58.034576</ts>
    <user>U46LFMYTD</user>
    <text>I'm trying to do some Java interop using a Java library called Gurobi. I'm following their documentation which reads
```
import gurobi.*;
...creates outer class...
GRBEnv env = new GRBEnv("mip1.log");
GRBModel model = new GRBModel(env);
GRBVar x = model.addVar(0.0, 1.0, 0.0, GRB.BINARY, "x");
```
I am trying to work with this library in clojure. It seems I cannot wildcard import in clojure so I have 
```
(import '(gurobi GRB GRBCObj GRBCallback GRBColumn GRBConstr GRBEnv GRBExpr GRBException GRBGenConstr GRBLinExpr GRBQuadExpr GRBModel GRBSOS GRBVar GRBQConstr GurobiJni))
(def env (new GRBEnv "mip1.log"))
(def model (new GRBModel env))
(.addVar model 0 1 0 GRB.BINARY "x")
```
however I get the error on the final line "java.lang.ClassNotFoundException" caused by GRB.BINARY. I believe I have imported everything using the extensive import above.</text>
  </message>
  <message>
    <ts>2017-07-18T10:22:28.094010</ts>
    <user>U0BB79MMJ</user>
    <text>&lt;@U46LFMYTD&gt; Might be a static member, so it could be `GRB/BINARY`</text>
  </message>
  <message>
    <ts>2017-07-18T10:22:51.109509</ts>
    <user>U0BB79MMJ</user>
    <text>Or, an inner class, in which case you need to import `GRB$BINARY`, but from the upper case spelling, I'd assume the former</text>
  </message>
  <message>
    <ts>2017-07-18T10:22:55.111565</ts>
    <user>U46LFMYTD</user>
    <text>bingo</text>
  </message>
  <message>
    <ts>2017-07-18T10:23:00.115504</ts>
    <user>U63RTB1KR</user>
    <text>&lt;@U0BB79MMJ&gt; &lt;@U3GJHS5DY&gt;  Thx. I'll check it again.</text>
  </message>
  <message>
    <ts>2017-07-18T10:23:14.124221</ts>
    <user>U46LFMYTD</user>
    <text>it was `GRB/BINARY`, thank you</text>
  </message>
  <message>
    <ts>2017-07-18T11:07:14.957692</ts>
    <user>U46LFMYTD</user>
    <text>How would I convert `x.get(GRB.DoubleAttr.X)` to clojure</text>
  </message>
  <message>
    <ts>2017-07-18T11:07:19.962065</ts>
    <user>U46LFMYTD</user>
    <text>cider in emacs isnt giving me much help &amp;gt;&amp;lt;</text>
  </message>
  <message>
    <ts>2017-07-18T11:13:29.218936</ts>
    <user>U46LFMYTD</user>
    <text>can someone please help me convert `x.get(GRB.DoubleAttr.X)` to clojure code</text>
  </message>
  <message>
    <ts>2017-07-18T11:20:06.496451</ts>
    <user>U46LFMYTD</user>
    <text>so turned out I needed this</text>
  </message>
  <message>
    <ts>2017-07-18T11:20:08.498053</ts>
    <user>U46LFMYTD</user>
    <text>`(.get x gurobi.GRB$DoubleAttr/X)`

But I'm confused as to why I needed gurobi.GRB$DoubleAttr instead of GRB$DoubleAttr as I already imported gurobi.GRB in my import statement</text>
  </message>
  <message>
    <ts>2017-07-18T11:21:47.566974</ts>
    <user>U46LFMYTD</user>
    <text>and when I begin to type `gurobi.GRB$Dou....` cider doesn't autocomplete it</text>
  </message>
  <message>
    <ts>2017-07-18T11:23:48.651254</ts>
    <user>U46LFMYTD</user>
    <text>so this worked `(.get x gurobi.GRB$DoubleAttr/X)` but i feel like im in the dark</text>
  </message>
  <message>
    <ts>2017-07-18T11:24:04.662662</ts>
    <user>U46LFMYTD</user>
    <text>cider isn't giving me any autocompletion help so its hard to find the proper structure</text>
  </message>
  <message>
    <ts>2017-07-18T11:24:21.673981</ts>
    <user>U46LFMYTD</user>
    <text>cidre doesn't autocomplete `gurobi.GRB$...` at all</text>
  </message>
  <message>
    <ts>2017-07-18T11:32:15.004119</ts>
    <user>U0BB79MMJ</user>
    <text>&lt;@U46LFMYTD&gt; Yeah, nested classes are confusing to work with... You can probably directly import GRB$DoubleAttr as well, that should fix it</text>
  </message>
  <message>
    <ts>2017-07-18T12:51:34.040487</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3JURM9B6&gt; &lt;@U1ALMRBLL&gt; clojure has eager-map built in, it's called mapv, and it will perform better than that reduce example, even if you need to call seq on the result to get a list instead of vector</text>
  </message>
  <message>
    <ts>2017-07-18T12:57:08.251637</ts>
    <user>U0G75ARHC</user>
    <text>what's the best and most elegant way when using `environ/env` to ensure that values that can be coerced end up being so. Right now everything it reads as strings. I'd like values like "true"/"false" and numbers to be converted to be of the right type</text>
  </message>
  <message>
    <ts>2017-07-18T12:58:02.286608</ts>
    <user>U0G75ARHC</user>
    <text>Tried simply using edn/read-string, but it turned out to be not so straightforward.</text>
  </message>
  <message>
    <ts>2017-07-18T13:00:04.365540</ts>
    <user>U0G75ARHC</user>
    <text>some edge-cases when the exceptions thrown, I end up with code that doesn't look elegant. Clojure has spoiled me: If code doesn't look elegant - I feel it's not worth adding it.</text>
  </message>
  <message>
    <ts>2017-07-18T13:00:28.381313</ts>
    <user>U051SS2EU</user>
    <text>I wonder if `plumatic/schema` coercers would help here…</text>
  </message>
  <message>
    <ts>2017-07-18T13:01:01.403019</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://github.com/plumatic/schema#transformations-and-coercion&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T13:01:26.419096</ts>
    <user>U051SS2EU</user>
    <text>&amp;gt; Coercion is like validation, except a schema-dependent transformation can be applied to the input data before validation.</text>
  </message>
  <message>
    <ts>2017-07-18T13:03:34.501869</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0G75ARHC&gt; consider that you'll read this at startup, and IMHO startup is the perfect time in the run of an app to reject input outright and exit with an error</text>
  </message>
  <message>
    <ts>2017-07-18T13:04:29.536338</ts>
    <user>U051SS2EU</user>
    <text>so I'd say, don't try/catch, even explicitly throw AssertionErrors if the data isn't "perfect" - then whoever set up the run environment can use your clear descriptive error message to fix the input and try again</text>
  </message>
  <message>
    <ts>2017-07-18T13:05:25.570548</ts>
    <user>U0G75ARHC</user>
    <text>&lt;@U051SS2EU&gt; I'm not using schema in this particular project. Seems to be an overkill to have to use it to solve this particular problem</text>
  </message>
  <message>
    <ts>2017-07-18T13:05:46.582865</ts>
    <user>U051SS2EU</user>
    <text>OK - but my point about asserting / throwing / bailing out still stands</text>
  </message>
  <message>
    <ts>2017-07-18T13:18:06.030243</ts>
    <user>U09A6U6GJ</user>
    <text>RFC, all contributors to and users of nREPL: &lt;https://groups.google.com/forum/#!topic/clojure/6SX7q39lK90&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T13:29:02.428257</ts>
    <user>U051TMSBY</user>
    <text>&lt;@U0G75ARHC&gt; you can check out &lt;https://github.com/amperity/envoy&gt; too</text>
  </message>
  <message>
    <ts>2017-07-18T14:04:06.717817</ts>
    <user>U2J7JRTDX</user>
    <text>ag: Use `aero`: &lt;https://github.com/juxt/aero&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T14:06:43.813022</ts>
    <user>U0W0JDY4C</user>
    <text>is there a way to change the signature of a defmulti after you decide on which arguments to dispatch?
```
(defmulti foo (fn [a b] [a b]))
(defmethod foo [:foo :bar] [just-foo?] (do ...))
```
or does every defmethod have to have the signature `[a b]`?</text>
  </message>
  <message>
    <ts>2017-07-18T14:08:39.881880</ts>
    <user>U0NCTKEV8</user>
    <text>the defmethod only needs to be able to be invoked on the args given to it</text>
  </message>
  <message>
    <ts>2017-07-18T14:09:27.909920</ts>
    <user>U0NCTKEV8</user>
    <text>so if you have a mutlimethod that can be invoked with differing numbers of arguments, and those differing  numbers of arguments are dispatched differently, each method only needs to handle the arity it would be invoked with</text>
  </message>
  <message>
    <ts>2017-07-18T14:10:42.954817</ts>
    <user>U0NCTKEV8</user>
    <text>if you invoke a multimethod with N arguments, whichever method it dispatches to will be invoked with N arguments, you can't change that</text>
  </message>
  <message>
    <ts>2017-07-18T14:11:18.975362</ts>
    <user>U0W0JDY4C</user>
    <text>okay, that makes sense. I just didnt want to have to change my signature across a couple files that implement the defmethod *if at all possible</text>
  </message>
  <message>
    <ts>2017-07-18T14:16:22.155736</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U0G75ARHC&gt; &lt;@U051SS2EU&gt; I did exactly that using the json coercer that ships with schema</text>
  </message>
  <message>
    <ts>2017-07-18T14:16:37.164892</ts>
    <user>U051SS2EU</user>
    <text>yeah- that's what I was thinking of</text>
  </message>
  <message>
    <ts>2017-07-18T14:17:29.195381</ts>
    <user>U0K0TFQLW</user>
    <text>I have a file in each of my projects that looks like ```(def settings {:debug {:schema s/Bool :default false}
   :db-uri {:schema sc/URI :default "&lt;postgres://postgres@localhost:5432/foo&gt;"}
   :redis-uri {:schema sc/URI :default "&lt;redis://localhost:6379/0&gt;"}})
```</text>
  </message>
  <message>
    <ts>2017-07-18T14:18:19.224655</ts>
    <user>U0K0TFQLW</user>
    <text>and then I have a component that takes a settings map in and can realize those at component/start time to be injected around to whomever needs them</text>
  </message>
  <message>
    <ts>2017-07-18T14:19:05.251438</ts>
    <user>U0K0TFQLW</user>
    <text>although I have a vendoring of environ.core/env's underlying functions to allow me to invoke it in my start() and thus allow me to stop a system, change java properties, and then start the system again</text>
  </message>
  <message>
    <ts>2017-07-18T14:21:18.330693</ts>
    <user>U0K0TFQLW</user>
    <text>This is the matcher I use: &lt;https://gist.github.com/8da9d6240679bbb57080682b20d4ba98&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T14:39:05.984503</ts>
    <user>U3QUAHZJ6</user>
    <text>hello everyone, i have a giant regexp, is it possible to break it into various lines?

or build it from a string (which can be broken into various lines and assembled together with `str`)</text>
  </message>
  <message>
    <ts>2017-07-18T14:40:37.040180</ts>
    <user>U050ECB92</user>
    <text>yes you can do that by calling `(re-pattern (str the pieces of the regex))` or java.util.regex.Pattern/compile</text>
  </message>
  <message>
    <ts>2017-07-18T14:41:49.083280</ts>
    <user>U3QUAHZJ6</user>
    <text>thank you! the clojure docs are somewhat hard to navigate, sorry for the dumb question</text>
  </message>
  <message>
    <ts>2017-07-18T16:18:40.367117</ts>
    <user>U2N9GDB1U</user>
    <text>have you found your answers ?</text>
  </message>
  <message>
    <ts>2017-07-18T16:32:10.824815</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U051SS2EU&gt; &lt;@U1ALMRBLL&gt; : I'm an idiot for forgetting mapv; for some reason, I always thought "this was for ppl who wanted vector instead of list" but never eager vs lazy or impure vs pure</text>
  </message>
  <message>
    <ts>2017-07-18T16:54:16.577113</ts>
    <user>U087U9YG3</user>
    <text>So I'm looking at the honeysql README</text>
  </message>
  <message>
    <ts>2017-07-18T16:54:18.578397</ts>
    <user>U087U9YG3</user>
    <text>&lt;https://github.com/jkk/honeysql&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T16:54:23.581235</ts>
    <user>U087U9YG3</user>
    <text>and it has loads of example code</text>
  </message>
  <message>
    <ts>2017-07-18T16:54:25.582402</ts>
    <user>U087U9YG3</user>
    <text>which is great</text>
  </message>
  <message>
    <ts>2017-07-18T16:54:30.585256</ts>
    <user>U087U9YG3</user>
    <text>except sometimes it goes stale</text>
  </message>
  <message>
    <ts>2017-07-18T16:54:47.594524</ts>
    <user>U087U9YG3</user>
    <text>and someone messages us to tell us that one of the examples in the README doesn't run anymore</text>
  </message>
  <message>
    <ts>2017-07-18T16:54:53.598481</ts>
    <user>U087U9YG3</user>
    <text>and I was thinking</text>
  </message>
  <message>
    <ts>2017-07-18T16:55:07.606056</ts>
    <user>U087U9YG3</user>
    <text>we could set up a test case that actually parses the README</text>
  </message>
  <message>
    <ts>2017-07-18T16:55:16.611546</ts>
    <user>U087U9YG3</user>
    <text>and finds the backtick-quoted sections and `eval`s them</text>
  </message>
  <message>
    <ts>2017-07-18T16:55:34.621580</ts>
    <user>U087U9YG3</user>
    <text>finds the forms preceded by =&amp;gt; and treats them as expected results</text>
  </message>
  <message>
    <ts>2017-07-18T16:55:53.632637</ts>
    <user>U087U9YG3</user>
    <text>I'm wondering if anyone's done this before/if this is something that already exists off the shelf</text>
  </message>
  <message>
    <ts>2017-07-18T16:56:12.643751</ts>
    <user>U087U9YG3</user>
    <text>because if not I could imagine throwing together a sort of 'literate testing' library to do this and sharing that</text>
  </message>
  <message>
    <ts>2017-07-18T17:01:55.841043</ts>
    <user>U0K0TFQLW</user>
    <text>it sounds like a combination of org-mode and pythons doctests</text>
  </message>
  <message>
    <ts>2017-07-18T17:01:59.843142</ts>
    <user>U0NCTKEV8</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-18T17:02:06.847497</ts>
    <user>U0NCTKEV8</user>
    <text>there is a lein plugin for it if I recall</text>
  </message>
  <message>
    <ts>2017-07-18T17:02:53.873562</ts>
    <user>U0K0TFQLW</user>
    <text>as I understand it, the python community has largely shied away from doctests (although I don't particularly know the reason; it might be an implementation issue)</text>
  </message>
  <message>
    <ts>2017-07-18T17:07:43.025819</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U087U9YG3&gt; it should be straightfoward to go the route you proposed using an augmented codeblock transformer with markdown-clj to grab the code blocks. See &lt;https://github.com/yogthos/markdown-clj#customizing-the-parser&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T17:08:46.058096</ts>
    <user>U0K0TFQLW</user>
    <text>(just thinking about it from the perspective of reusing existing stuff to avoid writing markdown grammar or some regexes)</text>
  </message>
  <message>
    <ts>2017-07-18T18:30:49.160432</ts>
    <user>U06FTAZV3</user>
    <text>&lt;@U087U9YG3&gt; Elixir has something like executable documentation that (I think) centers around iex.</text>
  </message>
  <message>
    <ts>2017-07-18T18:31:24.172223</ts>
    <user>U06FTAZV3</user>
    <text>Here you go: &lt;https://elixir-lang.org/getting-started/mix-otp/docs-tests-and-with.html#doctests&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T18:39:33.332343</ts>
    <user>U04V32P6U</user>
    <text>Playing around with spec-ing `clojure.core/sort` and I came across something interesting:

```
(frequencies [Double/NaN Double/NaN])
=&amp;gt; {NaN 1, NaN 1}
```</text>
  </message>
  <message>
    <ts>2017-07-18T18:40:02.341599</ts>
    <user>U04V32P6U</user>
    <text>ah, this is why</text>
  </message>
  <message>
    <ts>2017-07-18T18:40:19.347474</ts>
    <user>U04V32P6U</user>
    <text>```
(= Double/NaN Double/NaN)
=&amp;gt; false
```</text>
  </message>
  <message>
    <ts>2017-07-18T18:42:10.382969</ts>
    <user>U050MP39D</user>
    <text>lol.... I guess that makes some math I don't understand work</text>
  </message>
  <message>
    <ts>2017-07-18T19:16:40.013366</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U087U9YG3&gt; If you're willing to live with Midje, there's a plugin to run the readme code as a set of tests -- clj-time uses it.</text>
  </message>
  <message>
    <ts>2017-07-18T19:30:48.248682</ts>
    <user>U087U9YG3</user>
    <text>&lt;@U04V70XH6&gt; I've got clj-time checked out and I'm actually having a hard time figuring out how to see/run the readme tests</text>
  </message>
  <message>
    <ts>2017-07-18T19:31:02.252448</ts>
    <user>U087U9YG3</user>
    <text>docs say to run lein test-readme but I'm getting no such task</text>
  </message>
  <message>
    <ts>2017-07-18T19:31:17.256537</ts>
    <user>U087U9YG3</user>
    <text>and the test/readme.clj file that got generated looks really short</text>
  </message>
  <message>
    <ts>2017-07-18T19:59:14.697190</ts>
    <user>U04V70XH6</user>
    <text>`lein with-profile dev,default,midje test readme` -- only code annotated with `clojure` (not `clj`) is turned into Midje facts</text>
  </message>
  <message>
    <ts>2017-07-18T20:00:59.726114</ts>
    <user>U04V70XH6</user>
    <text>I get a `test/readme.clj` that's nearly 400 lines long -- mostly whitespace but it does have all the ````clojure` code fragments as tests</text>
  </message>
  <message>
    <ts>2017-07-18T20:01:27.733545</ts>
    <user>U04V70XH6</user>
    <text>(hard to backtick a bunch of backticks)</text>
  </message>
  <message>
    <ts>2017-07-18T20:01:34.735414</ts>
    <user>U04V70XH6</user>
    <text>^ &lt;@U087U9YG3&gt;</text>
  </message>
  <message>
    <ts>2017-07-18T20:03:14.761222</ts>
    <user>U087U9YG3</user>
    <text>heh, yeah, I ran into the same problem</text>
  </message>
  <message>
    <ts>2017-07-18T20:04:06.774497</ts>
    <user>U087U9YG3</user>
    <text>cool =)</text>
  </message>
  <message>
    <ts>2017-07-18T20:35:27.211404</ts>
    <user>U087U9YG3</user>
    <text>&lt;@U04V70XH6&gt; hm I don't suppose you ever found a way to make that command exit with failure if a test fails?</text>
  </message>
  <message>
    <ts>2017-07-18T20:36:16.222194</ts>
    <user>U087U9YG3</user>
    <text>also, wow, that found a lot of README errors XD</text>
  </message>
  <message>
    <ts>2017-07-18T20:40:47.278923</ts>
    <user>U04V70XH6</user>
    <text>`lein test` ought to get a non-zero exit status if tests fail? (Dunno, we switched to Boot ages ago at work)</text>
  </message>
  <message>
    <ts>2017-07-18T20:42:23.298837</ts>
    <user>U04V70XH6</user>
    <text>Ah, but *Midje* doesn't. Yeah that kinda sucks. </text>
  </message>
  <message>
    <ts>2017-07-18T20:43:17.309739</ts>
    <user>U04V70XH6</user>
    <text>I've always avoided Midje for... reasons... but I hadn't noticed it doesn't set an exit status in this case. </text>
  </message>
  <message>
    <ts>2017-07-18T20:43:59.318100</ts>
    <user>U04V70XH6</user>
    <text>Maybe I'll write a Boot task that does something similar :smile_cat: </text>
  </message>
  <message>
    <ts>2017-07-18T20:44:51.328698</ts>
    <user>U3FKR3KDF</user>
    <text>What's the idiomatic way of 'namespacing' keys in a map?</text>
  </message>
  <message>
    <ts>2017-07-18T20:45:57.342335</ts>
    <user>U3FKR3KDF</user>
    <text>I have a map, and I want to namespace all the keys in the map (same namespace)</text>
  </message>
  <message>
    <ts>2017-07-18T20:55:32.461891</ts>
    <user>U628K7XGQ</user>
    <text>```#:person{:first "Han" :last "Solo" :ship #:ship{:name "Millenium Falcon" :model "YT-1300f light freighter"}}
```</text>
  </message>
  <message>
    <ts>2017-07-18T20:55:40.463380</ts>
    <user>U628K7XGQ</user>
    <text>you mean like this?</text>
  </message>
  <message>
    <ts>2017-07-18T20:58:57.504150</ts>
    <user>U3FKR3KDF</user>
    <text>Yeah, but that's using a map literal.</text>
  </message>
  <message>
    <ts>2017-07-18T20:59:04.505513</ts>
    <user>U3FKR3KDF</user>
    <text>What if I already have a map.</text>
  </message>
  <message>
    <ts>2017-07-18T21:07:21.611443</ts>
    <user>U2J4FRT2T</user>
    <text>`(with-meta (first {:foo :bar}) {:foo :bar})`
=&amp;gt; `ClassCastException clojure.lang.MapEntry cannot be cast to clojure.lang.IObj  clojure.core/with-meta--4962 (core.clj:217)`
Is it a bug?
My workaround is `(with-meta (first (map vec {:foo :bar})) {:foo :bar})`</text>
  </message>
  <message>
    <ts>2017-07-18T21:41:17.031341</ts>
    <user>U2J4FRT2T</user>
    <text>+1 to "namespace utils" for datomic, like "split-by-namespace" and "qualify-map"</text>
  </message>
  <message>
    <ts>2017-07-18T22:05:31.331931</ts>
    <user>U2FBZ33M3</user>
    <text>&lt;@U2J4FRT2T&gt; ~Nope, map is unordered, so there's no "first", technically speaking. Since vec is ordered, you get your first element. The problem is when there's more elements and you convert to vec, you'll get first somewhat randomly (not sure exactly how order is defined)~ Discard that, not the case.</text>
  </message>
  <message>
    <ts>2017-07-18T22:32:02.639900</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U2J4FRT2T&gt; another alternative would be `(into ^{:foo :bar} [] (first {:foo :bar}))` but using first on a hash map is a code smell - it could for example be a sign that the data doesn't belong in a hash map, or that you are not looking something up the right way *fixed</text>
  </message>
  <message>
    <ts>2017-07-18T22:32:37.646789</ts>
    <user>U051SS2EU</user>
    <text>that's putting the meta on a new vector and then emptying the map-entry into it</text>
  </message>
  <message>
    <ts>2017-07-18T22:39:37.727389</ts>
    <user>U2J4FRT2T</user>
    <text>I'm not doing `(with-meta (first ..)`... it's just a minimal/synthetic example :stuck_out_tongue_winking_eye: In my case, I have a function that do some like `(map #(with-meta {:type t} %) my-seq)`. Then I think that should work with maps too (once maps in clojure are "mappable").</text>
  </message>
  <message>
    <ts>2017-07-18T22:41:39.750171</ts>
    <user>U051SS2EU</user>
    <text>only if you put each map entry into a vector</text>
  </message>
  <message>
    <ts>2017-07-18T22:41:47.751483</ts>
    <user>U051SS2EU</user>
    <text>but yeah</text>
  </message>
  <message>
    <ts>2017-07-18T22:42:24.758371</ts>
    <user>U051SS2EU</user>
    <text>so my version would be `(map #(into ^{:type t} [] %) m)`</text>
  </message>
  <message>
    <ts>2017-07-19T01:02:24.042431</ts>
    <user>U1C03090C</user>
    <text>Not yet. Posted an issue on the github but no answers. </text>
  </message>
  <message>
    <ts>2017-07-19T02:09:00.743342</ts>
    <user>U3L6TFEJF</user>
    <text>with Specter: ```(s/setval [s/MAP-KEYS s/NAMESPACE] "your-ns" your-map)```</text>
  </message>
  <message>
    <ts>2017-07-19T02:11:22.772157</ts>
    <user>U3L6TFEJF</user>
    <text>with regular clojure you're gonna have to do the usual for-loop dance (or something like it): 
```(into {} (for [[k v] your-map] [(keyword (name k) "your-ns") v]))```</text>
  </message>
  <message>
    <ts>2017-07-19T03:47:27.313631</ts>
    <user>U3JURM9B6</user>
    <text>Anyone here using &lt;http://nd4j.org/&gt; ? This library shows up first for "java ndarray", but reading the docs, this project seems to have a very high opinion of itself (and I can't find other people using it.)</text>
  </message>
  <message>
    <ts>2017-07-19T05:26:33.585877</ts>
    <user>U051HUZLD</user>
    <text>Is following "thread safe"? Can there be a race condition?
```(reset! db @db)
```
e.g. changed `db` value between `deref` and `reset!`</text>
  </message>
  <message>
    <ts>2017-07-19T05:28:21.628464</ts>
    <user>U053XQP4S</user>
    <text>unsafe</text>
  </message>
  <message>
    <ts>2017-07-19T05:28:25.629710</ts>
    <user>U3L6TFEJF</user>
    <text>the value can change</text>
  </message>
  <message>
    <ts>2017-07-19T05:28:41.636429</ts>
    <user>U3L6TFEJF</user>
    <text>for the behavior you want, use &lt;http://clojuredocs.org/clojure.core/compare-and-set&gt;!</text>
  </message>
  <message>
    <ts>2017-07-19T05:31:09.694514</ts>
    <user>U051HUZLD</user>
    <text>:hearts:</text>
  </message>
  <message>
    <ts>2017-07-19T05:41:43.939681</ts>
    <user>U3LURNK5W</user>
    <text>Is there a way to time all sub-calls of a fn?</text>
  </message>
  <message>
    <ts>2017-07-19T05:42:26.956095</ts>
    <user>U3LURNK5W</user>
    <text>let's say i have:
```(defn foo [x]
         (-&amp;gt; (foo-1 x)
               foo-2
               foo-3))```</text>
  </message>
  <message>
    <ts>2017-07-19T05:42:42.961941</ts>
    <user>U3LURNK5W</user>
    <text>ofc i can do ```(time (foo x))```</text>
  </message>
  <message>
    <ts>2017-07-19T05:43:01.969523</ts>
    <user>U3LURNK5W</user>
    <text>but can i get the timings of the calls to foo-1,foo-2,foo-3 without wrapping each fn?</text>
  </message>
  <message>
    <ts>2017-07-19T06:06:33.502989</ts>
    <user>U04V1HS2L</user>
    <text>Is there any way (lib?) to rerun only "failed-last-time" clojure.test vars?</text>
  </message>
  <message>
    <ts>2017-07-19T07:05:16.633145</ts>
    <user>U051HUZLD</user>
    <text>&lt;@U3LURNK5W&gt; have a look at &lt;https://github.com/thunknyc/profile&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T07:15:08.810601</ts>
    <user>U3LURNK5W</user>
    <text>thx</text>
  </message>
  <message>
    <ts>2017-07-19T08:03:08.712860</ts>
    <user>U051HUZLD</user>
    <text>what would be a use case for this? &lt;https://github.com/weavejester/medley/blob/1.0.0/src/medley/core.cljc#L273&gt;
same as `swap!`, but returns atom's previous value (before it was successfully swapped)</text>
  </message>
  <message>
    <ts>2017-07-19T08:11:07.879989</ts>
    <user>U053XQP4S</user>
    <text>&lt;@U051HUZLD&gt; 
```
(def queue (atom clojure.lang.PersistentQueue/EMPTY))

(defn push! [x]
  (swap! queue conj x))

(defn pull! []
  (-&amp;gt; queue (deref-swap! pop) peek))
```</text>
  </message>
  <message>
    <ts>2017-07-19T10:44:03.844383</ts>
    <user>U1Q12R4F2</user>
    <text>Hello everyone, I have an app which stores documents (edn/json files, size from 100kb up to 1000kb) and I want to save the whole change-history (changes will be small, max 30kb maybe, but frequently) without storing the whole document for each change. Is there a free document database which supports document history with delta encoding?</text>
  </message>
  <message>
    <ts>2017-07-19T10:46:16.934388</ts>
    <user>U06FTAZV3</user>
    <text>&lt;@U1Q12R4F2&gt; Datomic comes close to doing what you want, but it's not an exact match.</text>
  </message>
  <message>
    <ts>2017-07-19T10:46:47.956126</ts>
    <user>U053XQP4S</user>
    <text>git ?</text>
  </message>
  <message>
    <ts>2017-07-19T10:54:31.279337</ts>
    <user>U1Q12R4F2</user>
    <text>&lt;@U06FTAZV3&gt; yes, datomic looks promising, but the licensing doesn't fit. (only 1 year updates in free version etc.)
&lt;@U053XQP4S&gt; I heard this from other people before. It sounds logical, but odd to use git as a "database" :grinning: 
Maybe I should give that idea a try. The documents are hold in-memory at runtime, and only written on disk if changes were made - so using git seems to be a good solution.</text>
  </message>
  <message>
    <ts>2017-07-19T10:57:22.397839</ts>
    <user>U050SC7SV</user>
    <text>there's irmin, but I am not sure there's a binding for java, it should not be impossible to do tho</text>
  </message>
  <message>
    <ts>2017-07-19T11:23:45.492353</ts>
    <user>U06FTAZV3</user>
    <text>&lt;@U050SC7SV&gt; &lt;https://github.com/mirage/irmin&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-19T11:43:05.290210</ts>
    <user>U0K0TFQLW</user>
    <text>is it possible to do local type extension?</text>
  </message>
  <message>
    <ts>2017-07-19T11:43:12.294911</ts>
    <user>U0K0TFQLW</user>
    <text>i.e. extend something only in a let binding?</text>
  </message>
  <message>
    <ts>2017-07-19T11:46:36.433268</ts>
    <user>U5XMV6DQT</user>
    <text>```
(let [wtf (extend-fn wtf)]
 …
```
?</text>
  </message>
  <message>
    <ts>2017-07-19T11:52:13.661926</ts>
    <user>U050ECB92</user>
    <text>&lt;@U0K0TFQLW&gt; nope.  What are you trying to achieve?</text>
  </message>
  <message>
    <ts>2017-07-19T11:52:30.673868</ts>
    <user>U0K0TFQLW</user>
    <text>locally I want to encode JSON differently</text>
  </message>
  <message>
    <ts>2017-07-19T11:52:51.688225</ts>
    <user>U0K0TFQLW</user>
    <text>was just looking through how cheshire.generate maps encoders via a protocol JSONable</text>
  </message>
  <message>
    <ts>2017-07-19T11:53:45.725266</ts>
    <user>U050ECB92</user>
    <text>I see. Unfortunately cheshire write methods are global =(</text>
  </message>
  <message>
    <ts>2017-07-19T11:53:56.732495</ts>
    <user>U0K0TFQLW</user>
    <text>yeah</text>
  </message>
  <message>
    <ts>2017-07-19T11:54:02.736829</ts>
    <user>U050ECB92</user>
    <text>Transit and Fressian do not make that mistake</text>
  </message>
  <message>
    <ts>2017-07-19T11:54:12.743250</ts>
    <user>U050ECB92</user>
    <text>( i know that doesn't help you immediately )</text>
  </message>
  <message>
    <ts>2017-07-19T11:54:19.748414</ts>
    <user>U0K0TFQLW</user>
    <text>unfortunately my third party api doesn't accept either of those</text>
  </message>
  <message>
    <ts>2017-07-19T11:55:12.785473</ts>
    <user>U0K0TFQLW</user>
    <text>I wonder if data.json is extensible locally</text>
  </message>
  <message>
    <ts>2017-07-19T11:55:49.810366</ts>
    <user>U050ECB92</user>
    <text>can you convert prior to sending down to cheshire?</text>
  </message>
  <message>
    <ts>2017-07-19T11:57:35.882963</ts>
    <user>U050ECB92</user>
    <text>we should have a new json library that does write dispatch the same way transit does</text>
  </message>
  <message>
    <ts>2017-07-19T11:57:44.889154</ts>
    <user>U0K0TFQLW</user>
    <text>trying to do that, but this is for serializing part of an ExceptionInfo object to an exception tracker</text>
  </message>
  <message>
    <ts>2017-07-19T11:57:46.890727</ts>
    <user>U050ECB92</user>
    <text>not global protocols but per instance maps</text>
  </message>
  <message>
    <ts>2017-07-19T11:57:49.892535</ts>
    <user>U0K0TFQLW</user>
    <text>so sometimes I get things like Fns</text>
  </message>
  <message>
    <ts>2017-07-19T11:58:25.917288</ts>
    <user>U0K0TFQLW</user>
    <text>and I don't want to completely lose the information, but I would be satisfied by an encoder that just did `pr`</text>
  </message>
  <message>
    <ts>2017-07-19T11:58:42.928937</ts>
    <user>U0K0TFQLW</user>
    <text>but I don't want to just `(cheshire.generate/add-encoder Object pr)` globally</text>
  </message>
  <message>
    <ts>2017-07-19T12:01:49.061126</ts>
    <user>U050ECB92</user>
    <text>&lt;@U053S2W0V&gt; don't you have some sort of 'local multimethod' gist somewhere?  for non global-dispatch tables</text>
  </message>
  <message>
    <ts>2017-07-19T12:02:09.074413</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U050ECB92&gt; I have one of those too for testing purposes</text>
  </message>
  <message>
    <ts>2017-07-19T12:02:09.074692</ts>
    <user>U050ECB92</user>
    <text>maybe that was &lt;@U060FKQPN&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-19T12:02:20.082224</ts>
    <user>U0K0TFQLW</user>
    <text>that lets me clone a multimethod</text>
  </message>
  <message>
    <ts>2017-07-19T12:02:25.085921</ts>
    <user>U0K0TFQLW</user>
    <text>for local modification</text>
  </message>
  <message>
    <ts>2017-07-19T12:03:21.124147</ts>
    <user>U060FKQPN</user>
    <text>in tools.analyzer I used a combination of dyn var initialized to a wrapping default fn and multimethods to allow extensibility through multimethods</text>
  </message>
  <message>
    <ts>2017-07-19T12:04:32.171680</ts>
    <user>U060FKQPN</user>
    <text>the pattern I used is e.g. 
```(defmulti -foo dispatch-fn)
(def ^:dynamic foo* -foo)
(defn foo [] 
  (foo* ..))```</text>
  </message>
  <message>
    <ts>2017-07-19T12:05:13.197752</ts>
    <user>U060FKQPN</user>
    <text>not the prettiest of patterns but it gets the job done</text>
  </message>
  <message>
    <ts>2017-07-19T12:06:17.239664</ts>
    <user>U060FKQPN</user>
    <text>example setup:
&lt;https://github.com/clojure/tools.analyzer/blob/master/src/main/clojure/clojure/tools/analyzer/passes/emit_form.clj#L12-L30&gt;
and redef:
&lt;https://github.com/clojure/tools.analyzer.jvm/blob/master/src/main/clojure/clojure/tools/analyzer/passes/jvm/emit_form.clj#L14-L46&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T12:07:00.266985</ts>
    <user>U050ECB92</user>
    <text>&lt;@U0K0TFQLW&gt; I have a small wrapper around Jackson that I used to parse instead of cheshire &lt;https://github.com/ghadishayban/tinyjson/blob/master/src/ls/tinyjson/json.clj#L60-L138&gt;

The writing side of it I used a protocol, which was a mistake.  Feel free to fork or PR</text>
  </message>
  <message>
    <ts>2017-07-19T12:07:57.302771</ts>
    <user>U0K0TFQLW</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-19T12:09:09.348160</ts>
    <user>U050ECB92</user>
    <text>I should have done a dispatch impl like &lt;https://github.com/cognitect/transit-clj/blob/master/src/cognitect/transit.clj#L88-L123&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T12:30:47.150077</ts>
    <user>U053S2W0V</user>
    <text>&lt;@U050ECB92&gt; github: dispatch-map</text>
  </message>
  <message>
    <ts>2017-07-19T12:30:55.155233</ts>
    <user>U053S2W0V</user>
    <text>warning: never actually used in anger</text>
  </message>
  <message>
    <ts>2017-07-19T12:31:14.166425</ts>
    <user>U053S2W0V</user>
    <text>&lt;https://github.com/brandonbloom/dispatch-map&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T12:31:32.177652</ts>
    <user>U053S2W0V</user>
    <text>also likely out of date w/ any bug fixes or perf improvements that happened in clj/core</text>
  </message>
  <message>
    <ts>2017-07-19T13:37:35.519449</ts>
    <user>U050ECB92</user>
    <text>thanks &lt;@U053S2W0V&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:33:45.563054</ts>
    <user>U678P5US3</user>
    <text>Hey can someone point me to the name of this syntax `&amp;lt;&amp;gt;` please? It's a pain to Google!</text>
  </message>
  <message>
    <ts>2017-07-19T14:34:14.580080</ts>
    <user>U051SS2EU</user>
    <text>that's not a syntax</text>
  </message>
  <message>
    <ts>2017-07-19T14:34:21.584274</ts>
    <user>U051SS2EU</user>
    <text>but it's a valid binding or def</text>
  </message>
  <message>
    <ts>2017-07-19T14:34:52.602455</ts>
    <user>U051SS2EU</user>
    <text>clojure has very few syntaxes, the ones that are symbols usually start with `#`</text>
  </message>
  <message>
    <ts>2017-07-19T14:35:30.625255</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U678P5US3&gt; if you tell us where you find it that might be a clue to what it means though</text>
  </message>
  <message>
    <ts>2017-07-19T14:35:52.638948</ts>
    <user>U050MP39D</user>
    <text>&lt;@U678P5US3&gt; as a random guess, you're probably looking at code that uses the swiss arrows library</text>
  </message>
  <message>
    <ts>2017-07-19T14:36:34.664157</ts>
    <user>U050MP39D</user>
    <text>(googling "swiss arrows clojure" will tell you if that's true)</text>
  </message>
  <message>
    <ts>2017-07-19T14:39:28.767875</ts>
    <user>U678P5US3</user>
    <text>I've just seen it around and was curious, doesn't appear to be swiss arrows, and here's some linkable code &lt;https://github.com/metabase/metabase/blob/master/src/metabase/api/metric.clj#L44-L47&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:39:58.785546</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U678P5US3&gt; that's just a binding that as-&amp;gt; sets up</text>
  </message>
  <message>
    <ts>2017-07-19T14:40:03.788766</ts>
    <user>U051SS2EU</user>
    <text>check out the doc for as-&amp;gt;</text>
  </message>
  <message>
    <ts>2017-07-19T14:40:22.800288</ts>
    <user>U051SS2EU</user>
    <text>it's just a name they picked, you could find/replace it with `elephant` and the meaning of the code wouldn't change</text>
  </message>
  <message>
    <ts>2017-07-19T14:40:43.812053</ts>
    <user>U678P5US3</user>
    <text>:ok_hand: Perfect, thanks a lot :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-19T14:41:23.835630</ts>
    <user>U678P5US3</user>
    <text>A lot to take in coming from Golang as a primary language :smile:</text>
  </message>
  <message>
    <ts>2017-07-19T14:41:50.851768</ts>
    <user>U051SS2EU</user>
    <text>though `x` would be more idiomatic, and `&amp;lt;&amp;gt;` is a nice symbol for "fill in the blank" once you know what it means</text>
  </message>
  <message>
    <ts>2017-07-19T14:49:51.136177</ts>
    <user>U0NCTKEV8</user>
    <text>I like to use % with as-&amp;gt;</text>
  </message>
  <message>
    <ts>2017-07-19T16:16:02.023444</ts>
    <user>U3Q8MMREX</user>
    <text>we're having trouble finding docs on the exact meaning of the `#=` macro anywhere, anyone know where to find that?</text>
  </message>
  <message>
    <ts>2017-07-19T16:17:30.071969</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3Q8MMREX&gt; it's the read-eval reader macro, which causes arbitrary code to execute while reading, it's disreccomended</text>
  </message>
  <message>
    <ts>2017-07-19T16:18:11.093907</ts>
    <user>U051SS2EU</user>
    <text>the core read will eval if the right dynamic var is set and it finds that macro, clojure.edn's read will not though</text>
  </message>
  <message>
    <ts>2017-07-19T16:18:13.095064</ts>
    <user>U050MP39D</user>
    <text>it's not officially supported according to the only docs I can find &lt;https://clojure.org/guides/weird_characters#__code_code_reader_eval&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T16:18:37.108305</ts>
    <user>U3Q8MMREX</user>
    <text>aha, thanks for that link</text>
  </message>
  <message>
    <ts>2017-07-19T16:49:08.110074</ts>
    <user>U628K7XGQ</user>
    <text>what's the currently favored HTTP server library you guy are using? It seems Aleph and http-kit are favorites. Anything else I'm missing?</text>
  </message>
  <message>
    <ts>2017-07-19T16:50:42.160848</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U628K7XGQ&gt; I use Pedestal quite a bit, and I like it.</text>
  </message>
  <message>
    <ts>2017-07-19T16:50:52.165827</ts>
    <user>U087U9YG3</user>
    <text>We just use jetty</text>
  </message>
  <message>
    <ts>2017-07-19T16:51:02.171082</ts>
    <user>U087U9YG3</user>
    <text>if that's the layer you're asking about</text>
  </message>
  <message>
    <ts>2017-07-19T16:51:52.198036</ts>
    <user>U07TDTQNL</user>
    <text>Yeah, on that layer I highly recommend using a well established library like Jetty. It removes a lot of questions from debugging sessions.</text>
  </message>
  <message>
    <ts>2017-07-19T16:58:13.404173</ts>
    <user>U628K7XGQ</user>
    <text>Yup, agree on Jetty, although I prefer Netty (I did a bunch of work with Vert.x, so I'm familiar with async web servers). I was wondering which wrapper you guys are using for creating a REST endpoint (or GraphQL for that matter), registering something like routes/handlers (or do it Resource-style like in Jersey)</text>
  </message>
  <message>
    <ts>2017-07-19T16:58:27.412490</ts>
    <user>U087U9YG3</user>
    <text>aha, we're using compojure-api</text>
  </message>
  <message>
    <ts>2017-07-19T16:58:40.419015</ts>
    <user>U087U9YG3</user>
    <text>last shop I was at used it too</text>
  </message>
  <message>
    <ts>2017-07-19T16:58:51.425152</ts>
    <user>U628K7XGQ</user>
    <text>particularly interested in support for full async operation and reasonable standards-support like CORS, JWT etc.</text>
  </message>
  <message>
    <ts>2017-07-19T16:58:58.428925</ts>
    <user>U087U9YG3</user>
    <text>it generates swagger specifications from your code, which is pretty nice</text>
  </message>
  <message>
    <ts>2017-07-19T16:59:18.439406</ts>
    <user>U628K7XGQ</user>
    <text>ah: swagger, pseudo-REST :wink:</text>
  </message>
  <message>
    <ts>2017-07-19T16:59:23.442234</ts>
    <user>U087U9YG3</user>
    <text>=)</text>
  </message>
  <message>
    <ts>2017-07-19T16:59:34.448355</ts>
    <user>U0E0XL064</user>
    <text>Aleph</text>
  </message>
  <message>
    <ts>2017-07-19T17:00:17.472934</ts>
    <user>U628K7XGQ</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-19T17:01:02.497573</ts>
    <user>U0E0XL064</user>
    <text>Really like it, it makes perfect sense. &lt;http://aleph.io&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T17:01:33.515178</ts>
    <user>U0E0XL064</user>
    <text>Uses Netty, btw</text>
  </message>
  <message>
    <ts>2017-07-19T17:16:25.958213</ts>
    <user>U0E0XL064</user>
    <text>Oh, sorry: yada</text>
  </message>
  <message>
    <ts>2017-07-19T17:17:48.998350</ts>
    <user>U0E0XL064</user>
    <text>&lt;https://youtu.be/tKFrqsFC1XM&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T17:19:35.048970</ts>
    <user>U0E0XL064</user>
    <text>yada uses aleph</text>
  </message>
  <message>
    <ts>2017-07-19T17:24:25.185430</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U628K7XGQ&gt; Pedestal and Aleph are the only ones that support full async. IMO Pedestal is a bit simpler in design.</text>
  </message>
  <message>
    <ts>2017-07-19T17:24:51.197175</ts>
    <user>U628K7XGQ</user>
    <text>thanks everyone!</text>
  </message>
  <message>
    <ts>2017-07-19T17:35:14.484809</ts>
    <user>U0ALP2929</user>
    <text>I like yada as well. It has built-in support for swagger and jwt. More importantly I find it well designed :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-19T18:48:53.111624</ts>
    <user>U0K0TFQLW</user>
    <text>compojure-api on top of Undertow (via immutant.web)</text>
  </message>
  <message>
    <ts>2017-07-19T18:51:34.161002</ts>
    <user>U0K0TFQLW</user>
    <text>compojure's 2.0-alpha releases support async as well but currently only works out of the box with ring-jetty. I haven't tried it out, but you should be able to bootstrap it onto Aleph, HttpKit, or Undertow. See here: &lt;https://github.com/metosin/compojure-api/wiki/Async&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T19:12:05.522871</ts>
    <user>U5JEJN1CP</user>
    <text>Quick quesiton: cljs-ajax's documentation makes it sound like it can be used both clientside in CLJS and server-side in clojure, but when I try I get errors like ` No implementation of method: :-js-ajax-request of protocol: #'ajax.protocols/AjaxImpl found for class: ajax.apache.Connection `, which makes it sound like it won't work on the server side.  Am I missing something here, or is it actually CLJS only?  I know I could just use clj-http on the server, but that will mean some duplicated code between the client/server side instead of putting it in cljc.</text>
  </message>
  <message>
    <ts>2017-07-19T19:21:50.686012</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://github.com/JulianBirch/cljs-ajax/blob/master/src/ajax/apache.clj#L135&gt;</text>
  </message>
  <message>
    <ts>2017-07-19T19:22:27.696148</ts>
    <user>U0NCTKEV8</user>
    <text>likely you recompiled the file that defined the protocol without recompiling the file that extends the record</text>
  </message>
  <message>
    <ts>2017-07-19T19:22:48.701767</ts>
    <user>U0NCTKEV8</user>
    <text>the record code also imports the interface generated by the protocol and uses that instead of actually using the protocol</text>
  </message>
  <message>
    <ts>2017-07-19T19:23:21.710316</ts>
    <user>U0NCTKEV8</user>
    <text>which is common way to break things like this</text>
  </message>
  <message>
    <ts>2017-07-19T19:24:35.729934</ts>
    <user>U0NCTKEV8</user>
    <text>that a project as active as that, with that many contributors, can have that kind of error in it makes me sad</text>
  </message>
  <message>
    <ts>2017-07-19T19:32:38.858080</ts>
    <user>U5JEJN1CP</user>
    <text>I'm afraid I don't have a good grasp of how protocols and records work.  Is this something I should submit an issue for then?</text>
  </message>
  <message>
    <ts>2017-07-19T19:34:41.889767</ts>
    <user>U0NCTKEV8</user>
    <text>I am typing up an issue</text>
  </message>
  <message>
    <ts>2017-07-19T19:39:13.959596</ts>
    <user>U5JEJN1CP</user>
    <text>Looks like you were right about the compilation issue.  Restarting the repl from scratch did clear the error.</text>
  </message>
  <message>
    <ts>2017-07-19T20:00:29.284916</ts>
    <user>U5JEJN1CP</user>
    <text>But it does crop up again eventually as I'm reloading different files.  I'll see if I can narrow it down.</text>
  </message>
  <message>
    <ts>2017-07-19T20:02:01.309418</ts>
    <user>U0NCTKEV8</user>
    <text>you are reloading the file where the protocols without reloading the file where the record defined, or you are reloading the file where the protocols are defined and trying to call the new (because of the reload) protocol on a instance of the record type that had the old protocol extended to it</text>
  </message>
  <message>
    <ts>2017-07-19T20:03:49.336336</ts>
    <user>U5JEJN1CP</user>
    <text>But I don't understand why that's happening.  The only file I ever require directly from cljs-ajax is `ajax.core`, as far as I know.</text>
  </message>
  <message>
    <ts>2017-07-19T20:05:47.364242</ts>
    <user>U0NCTKEV8</user>
    <text>sure, but how are you requiring it and what tooling stuff are  you using?</text>
  </message>
  <message>
    <ts>2017-07-19T20:06:31.375226</ts>
    <user>U0NCTKEV8</user>
    <text>ugh</text>
  </message>
  <message>
    <ts>2017-07-19T20:06:46.378719</ts>
    <user>U0NCTKEV8</user>
    <text>and core is importing the record class directly instead of using the constructor fns</text>
  </message>
  <message>
    <ts>2017-07-19T20:07:05.383252</ts>
    <user>U0NCTKEV8</user>
    <text>I would just not use cljs-ajax</text>
  </message>
  <message>
    <ts>2017-07-19T20:47:26.909320</ts>
    <user>U08PZ4SET</user>
    <text>Can't imagine cljs-ajax would work in JVM-hosted clojure</text>
  </message>
  <message>
    <ts>2017-07-19T20:47:50.914157</ts>
    <user>U08PZ4SET</user>
    <text>"ajax" is a term only used in frontend programming afaik</text>
  </message>
  <message>
    <ts>2017-07-19T20:49:31.934579</ts>
    <user>U050MP39D</user>
    <text>and yet, that file imports quite a lot of java classes and ends in .clj :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-19T20:53:51.988085</ts>
    <user>U08PZ4SET</user>
    <text>Yeah looks like indeed the intent is there... interesting</text>
  </message>
  <message>
    <ts>2017-07-19T21:13:51.240723</ts>
    <user>U5JEJN1CP</user>
    <text>The docs for cljs-ajax really make it sound like it should work in both, and it almost did, except for this reloading issue.  At any rate, I switched to using clj-http on the server and it's all working now.  It just means I can't share the code between the client and server the way I wanted.</text>
  </message>
  <message>
    <ts>2017-07-20T03:56:15.107390</ts>
    <user>U0LJU20SJ</user>
    <text>does anybody uses `eastwood` together with `clojure.spec`. It is becomming really annoying that eastwood complains about the spec macros even though I cannot do anything about it. Or can I?</text>
  </message>
  <message>
    <ts>2017-07-20T04:27:42.779945</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U0LJU20SJ&gt; &lt;https://github.com/jonase/eastwood/issues/222&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-20T04:30:32.844466</ts>
    <user>U0LJU20SJ</user>
    <text>&lt;@U0E0XL064&gt; no, from what I understand it is about the macro expansion of the specs:
```
src/service/routing/spec.clj:40:17: suspicious-expression: and called with 1 args.  (and x) always returns x.  Perhaps there are misplaced parentheses?

src/service/routing/spec.clj:44:22: suspicious-expression: and called with 1 args.  (and x) always returns x.  Perhaps there are misplaced parentheses?

src/service/routing/spec.clj:38:20: constant-test: Test expression is always logical true or always logical false: 2 in form (if or__5058__auto__ or__5058__auto__ (clojure.core/or 0))

src/service/routing/spec.clj:38:20: constant-test: Test expression is always logical true or always logical false: nil in form (if nil (clojure.core/inc nil) 2)

src/service/routing/spec.clj:38:20: constant-test: Test expression is always logical true or always logical false: nil in form (if or__5058__auto__ or__5058__auto__ (clojure.core/or 
```</text>
  </message>
  <message>
    <ts>2017-07-20T04:33:19.907760</ts>
    <user>U0E0XL064</user>
    <text>Well, I guess eastwood is not clojure.spec compliant yet. You may add an issue to &lt;https://github.com/jonase/eastwood/issues&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-20T04:34:31.934792</ts>
    <user>U0E0XL064</user>
    <text>similar issues seem to exist already: &lt;https://github.com/jonase/eastwood/issues/207&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T04:41:17.088011</ts>
    <user>U0LJU20SJ</user>
    <text>jumm I was hoping to be wrong. The question is rather is eastwood at fault or clojure.spec? because those expanded expressions do look suspicious</text>
  </message>
  <message>
    <ts>2017-07-20T06:54:04.956568</ts>
    <user>U1B0DFD25</user>
    <text>Is `clojure.core/hash` always non-negative?</text>
  </message>
  <message>
    <ts>2017-07-20T06:54:34.966166</ts>
    <user>U060FKQPN</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-07-20T06:55:33.984741</ts>
    <user>U060FKQPN</user>
    <text>it uses the full int range</text>
  </message>
  <message>
    <ts>2017-07-20T07:00:41.082469</ts>
    <user>U1B0DFD25</user>
    <text>Thanks</text>
  </message>
  <message>
    <ts>2017-07-20T07:06:18.188824</ts>
    <user>U3J7HSKNC</user>
    <text>this might be a dumb question - it likely is - but what is the best way to define a spec in `clojure.spec` for an argument that is a function of arity 1?</text>
  </message>
  <message>
    <ts>2017-07-20T07:06:22.189948</ts>
    <user>U3J7HSKNC</user>
    <text>is that a thing?</text>
  </message>
  <message>
    <ts>2017-07-20T07:07:39.212425</ts>
    <user>U3J7HSKNC</user>
    <text>Something that could be used to spec a function like `take!` from `core.async`:

```
(defprotocol ReadPort
  (take! [port fn1-handler] "derefable val if taken, nil if take was enqueued"))
```</text>
  </message>
  <message>
    <ts>2017-07-20T07:07:52.216395</ts>
    <user>U3J7HSKNC</user>
    <text>for `fn1-handler`</text>
  </message>
  <message>
    <ts>2017-07-20T07:14:31.335685</ts>
    <user>U068SUJNT</user>
    <text>How could I combine two images?</text>
  </message>
  <message>
    <ts>2017-07-20T09:00:44.613967</ts>
    <user>U1B0DFD25</user>
    <text>What's the pattern in Integrant/Component REPL development to pick up an edited configuration file on reset? Do you make it a component in the system? I'm building my system object according to the config so I can't do that.</text>
  </message>
  <message>
    <ts>2017-07-20T09:01:56.649727</ts>
    <user>U06FTAZV3</user>
    <text>&lt;@U1B0DFD25&gt; I tend to read the config file each time and merge the result into my system map. Using Aero to read the EDN file I then do something like this: `(merge-with merge system config)`.</text>
  </message>
  <message>
    <ts>2017-07-20T09:03:07.683644</ts>
    <user>U06FTAZV3</user>
    <text>With a component like this:

```
(defrecord Datomic [uri]
  component/Lifecycle
  ;; ...
  )
```

And a config file like this:

```
{:datomic {:uri "datomic:&lt;mem://my-app&gt;"}}
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:03:35.697259</ts>
    <user>U06FTAZV3</user>
    <text>And a system map like this:

```
(component/system-map :datomic (map-&amp;gt;Datomic {}))
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:04:05.712100</ts>
    <user>U06FTAZV3</user>
    <text>Integrant does things slightly differently I believe?</text>
  </message>
  <message>
    <ts>2017-07-20T09:05:08.742408</ts>
    <user>U06FTAZV3</user>
    <text>Looks like Integrant will reload your config from this: &lt;https://github.com/weavejester/integrant#configurations&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T09:07:57.821479</ts>
    <user>U1B0DFD25</user>
    <text>&lt;@U06FTAZV3&gt; Integrant config is the equivalent to Component's system, so it won't just re-read my external config file.</text>
  </message>
  <message>
    <ts>2017-07-20T09:09:10.856139</ts>
    <user>U06FTAZV3</user>
    <text>Yeah, from a quick look at the Integrant README, there is no explicit system map in Integrant.</text>
  </message>
  <message>
    <ts>2017-07-20T09:09:36.868903</ts>
    <user>U1B0DFD25</user>
    <text>That's what I like about it, the system map is data.</text>
  </message>
  <message>
    <ts>2017-07-20T09:10:10.885421</ts>
    <user>U06FTAZV3</user>
    <text>Component's system map is data too. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T09:10:47.903493</ts>
    <user>U06FTAZV3</user>
    <text>If you've got a `config` somewhere as per the README, and reloading is done via clojure.tools.namespace, I'd expect changes to the file to show up.

```
(def config
  (ig/read-string (slurp "config.edn")))
```</text>
  </message>
  <message>
    <ts>2017-07-20T09:11:10.914706</ts>
    <user>U06FTAZV3</user>
    <text>Can't say I've used Integrant before though. Sorry.</text>
  </message>
  <message>
    <ts>2017-07-20T09:11:38.928791</ts>
    <user>U1B0DFD25</user>
    <text>You've given me a direction. Thanks</text>
  </message>
  <message>
    <ts>2017-07-20T09:48:29.137942</ts>
    <user>U068SUJNT</user>
    <text>How can I add java dependencies to my clojure project?</text>
  </message>
  <message>
    <ts>2017-07-20T09:49:40.179477</ts>
    <user>U050MP39D</user>
    <text>&lt;@U068SUJNT&gt; same way you add clojure dependencies. the project.clj dependencies list is just maven artifacts</text>
  </message>
  <message>
    <ts>2017-07-20T09:49:51.185907</ts>
    <user>U068SUJNT</user>
    <text>okay.</text>
  </message>
  <message>
    <ts>2017-07-20T09:53:07.303576</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U1B0DFD25&gt; you might want to look at Integrant-REPL</text>
  </message>
  <message>
    <ts>2017-07-20T10:08:47.900416</ts>
    <user>U4DNSU5NE</user>
    <text>Does anyone know of a fuzzy finder lib for Clojure? By fuzzy finding I mean that you can, for example, search for "msd" and it would match, and give a high score to, "my/secret/dir", because the letters appear at word boundaries.</text>
  </message>
  <message>
    <ts>2017-07-20T12:41:23.870427</ts>
    <user>U6BEL7FPC</user>
    <text>Hi &lt;@U0BKWMG5B&gt;, I was wondering if i could ask you a &lt;#C5K1SHR6X|duct&gt; related question?</text>
  </message>
  <message>
    <ts>2017-07-20T13:17:01.109837</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U4DNSU5NE&gt; &lt;http://yomguithereal.github.io/clj-fuzzy/clojure.html&gt; (and there's also a Java lib: &lt;https://github.com/tdebatty/java-string-similarity&gt; )</text>
  </message>
  <message>
    <ts>2017-07-20T13:18:45.169095</ts>
    <user>U4DNSU5NE</user>
    <text>&lt;@U0E0XL064&gt; Does that do what I want? All the examples look weird, e.g. `(dice "healed" "sealed") =&amp;gt; 0.8`</text>
  </message>
  <message>
    <ts>2017-07-20T13:22:30.300954</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U4DNSU5NE&gt; oh, I must have misunderstood you. But it looks pretty easy to make it work as you expect: extract the letters at word boundaries and match it against one of the fuzzy string algorithms</text>
  </message>
  <message>
    <ts>2017-07-20T13:22:49.311801</ts>
    <user>U0BKWMG5B</user>
    <text>Sure, &lt;@U6BEL7FPC&gt; </text>
  </message>
  <message>
    <ts>2017-07-20T13:23:02.319283</ts>
    <user>U0E0XL064</user>
    <text>so, the only thing to do for you would be: convert `my/secret/dir` to `msd`, right?</text>
  </message>
  <message>
    <ts>2017-07-20T13:25:09.393602</ts>
    <user>U4DNSU5NE</user>
    <text>&lt;@U0E0XL064&gt; I want some more features, like "msod" would not match "my/secret/dir" but it would match "my/awesome/dir"</text>
  </message>
  <message>
    <ts>2017-07-20T13:25:41.412752</ts>
    <user>U4DNSU5NE</user>
    <text>But I have now written it myself. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-20T13:25:54.420509</ts>
    <user>U0E0XL064</user>
    <text>oh... that's different, right :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T13:26:18.434380</ts>
    <user>U0E0XL064</user>
    <text>So, you've written it in less than 3 hours, right? Nice :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T13:26:26.439333</ts>
    <user>U4DNSU5NE</user>
    <text>Yes :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-20T13:30:08.572388</ts>
    <user>U050MP39D</user>
    <text>I wonder if you could rip off elisp from one of the emacs helpers that does that and convert it</text>
  </message>
  <message>
    <ts>2017-07-20T13:30:58.602789</ts>
    <user>U4DNSU5NE</user>
    <text>&lt;@U0E0XL064&gt; &lt;https://ptpb.pw/y1Qw&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T13:32:34.660551</ts>
    <user>U4DNSU5NE</user>
    <text>Ops, that last one should not have a score of 3 :stuck_out_tongue: I added it manually and did it wrong. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-20T13:33:35.695982</ts>
    <user>U4DNSU5NE</user>
    <text>I accidentally put s and d next to each other in the string.</text>
  </message>
  <message>
    <ts>2017-07-20T13:37:29.831310</ts>
    <user>U0E0XL064</user>
    <text>got it. :+1:</text>
  </message>
  <message>
    <ts>2017-07-20T13:39:23.896366</ts>
    <user>U0NA370RG</user>
    <text>Anyone have a pointer to a small-to-medium-size, open source codebase that uses `clojure.spec` in the ways that it is typically used?</text>
  </message>
  <message>
    <ts>2017-07-20T13:45:11.097658</ts>
    <user>U0E0XL064</user>
    <text>I expect to have one next week :slightly_smiling_face:. Well, it still needs some work, but the current state is: &lt;https://gitlab.com/kurtosys/lib/factoidic/&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T13:47:33.181795</ts>
    <user>U0NA370RG</user>
    <text>Thanks!</text>
  </message>
  <message>
    <ts>2017-07-20T13:51:01.306497</ts>
    <user>U0QKTTY4D</user>
    <text>is there a good clojure library for very simple GIS/map data visualization? or am I better off using something like Om with clojurescript?</text>
  </message>
  <message>
    <ts>2017-07-20T13:51:53.338778</ts>
    <user>U0E0XL064</user>
    <text>&lt;https://gitlab.com/kurtosys/lib/factoidic/blob/master/factoidic/src/clj/factoidic/config.clj&gt; - spec for config (will be lib boundary, that's why it's in a separate namespace; other specs might not be in a separate namespace).</text>
  </message>
  <message>
    <ts>2017-07-20T13:53:05.383266</ts>
    <user>U0E0XL064</user>
    <text>I use it for:
1. lib boundary validation
2. generative testing
3. instrumentation during debugging</text>
  </message>
  <message>
    <ts>2017-07-20T14:25:57.563667</ts>
    <user>U07HVL0F7</user>
    <text>may not fit your requirements, but &lt;https://github.com/wiseman/leaflet-gorilla&gt; could be relevant</text>
  </message>
  <message>
    <ts>2017-07-20T14:37:11.971636</ts>
    <user>U0NA370RG</user>
    <text>generative testing code is not in there yet, right?</text>
  </message>
  <message>
    <ts>2017-07-20T14:38:51.032599</ts>
    <user>U0E0XL064</user>
    <text>right, that's one of the reasons why I keep it quiet and it's still in `SNAPSHOT`. I have to add more specs, testing and some benchmarking.</text>
  </message>
  <message>
    <ts>2017-07-20T14:45:52.282638</ts>
    <user>U0NA370RG</user>
    <text>awesome.  Thanks for the link</text>
  </message>
  <message>
    <ts>2017-07-20T14:56:08.652309</ts>
    <user>U6BEL7FPC</user>
    <text>Okay &lt;@U0BKWMG5B&gt;, right now i'm trying to integrate `buddy`'s authentication middleware with `ataraxy` and `duct`, and looking at the ataraxy module docs, it says that for finer control i should use `duct.router/ataraxy` instead of `duct.module/ataraxy`. I was wondering if there was a way to add other middleware using the `module` instead of `router`?</text>
  </message>
  <message>
    <ts>2017-07-20T15:17:13.380861</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U6BEL7FPC&gt; you can use both. Use the module to create the routes, then add the middleware to the router key.</text>
  </message>
  <message>
    <ts>2017-07-20T15:18:31.423428</ts>
    <user>U6BEL7FPC</user>
    <text>&lt;@U0BKWMG5B&gt;, oh what would that look like? Would `duct.module/ataraxy` and `duct.router` be keys in the edn file?</text>
  </message>
  <message>
    <ts>2017-07-20T15:21:35.524510</ts>
    <user>U085HE1PB</user>
    <text>Hi, how do I write a response directly in http-kit? I'm building a tunneling proxy and need the very first response to be exactly `"HTTP/1.1 200 Connection established\r\n\r\n",` but it seems http-kit renders that as a *body*, even if I do something like `{:status "HTTP/1.1 200 Connection established"}`</text>
  </message>
  <message>
    <ts>2017-07-20T15:23:47.596932</ts>
    <user>U051SS2EU</user>
    <text>sounds like what you want is to supply a :headers map? but I thought :status would automatically be lifted into the headers</text>
  </message>
  <message>
    <ts>2017-07-20T15:27:58.734804</ts>
    <user>U085HE1PB</user>
    <text>&lt;@U051SS2EU&gt; Oddly, it's not a header, it's a `status-line` in the HTTP spec</text>
  </message>
  <message>
    <ts>2017-07-20T15:28:38.756419</ts>
    <user>U085HE1PB</user>
    <text>```status-line = HTTP-version SP status-code SP reason-phrase CRLF```</text>
  </message>
  <message>
    <ts>2017-07-20T15:28:43.759046</ts>
    <user>U051SS2EU</user>
    <text>oh, OK - I don't know how to override that via ring (assuming if you're handing it a hash-map like that you're using it via ring)</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:20.779400</ts>
    <user>U051SS2EU</user>
    <text>sounds like you'd be better off using a TCP library rather than an http library if you want to specify that kind of thing by hand?</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:25.782065</ts>
    <user>U051SS2EU</user>
    <text>I might be wrong</text>
  </message>
  <message>
    <ts>2017-07-20T15:29:55.798251</ts>
    <user>U085HE1PB</user>
    <text>Ya, I'm not sure it's possible with ring. I'd rather not have to use a TCP library, as I don't want to have to glue reqeusts and responses together. But you're right. I may just fork httpkit/ring and kludge something in there</text>
  </message>
  <message>
    <ts>2017-07-20T15:30:30.817369</ts>
    <user>U051SS2EU</user>
    <text>there's also aleph which has an http server but also supports using tcp sockets in the same lib</text>
  </message>
  <message>
    <ts>2017-07-20T15:30:41.823541</ts>
    <user>U051SS2EU</user>
    <text>i'd hazard a guess it would be more flexible</text>
  </message>
  <message>
    <ts>2017-07-20T15:31:18.844417</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://github.com/ztellman/aleph#tcp&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T15:34:54.962049</ts>
    <user>U053QM94L</user>
    <text>i'm surprised something is depending on that specific reason phrase and forcing you to not use "OK" :crying_cat_face:</text>
  </message>
  <message>
    <ts>2017-07-20T15:35:29.981578</ts>
    <user>U053V4R5N</user>
    <text>what an obtuse corner of the spec – you learn something every day</text>
  </message>
  <message>
    <ts>2017-07-20T15:35:59.997530</ts>
    <user>U085HE1PB</user>
    <text>Yup, oddly enough, Ring or every HTTP server hard-codes an [int string] pair</text>
  </message>
  <message>
    <ts>2017-07-20T15:36:12.003940</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U085HE1PB&gt; also - thinking outside the box for a minute - it's probably a good idea to reverse-proxy any jvm webserver behind nginx anyway, and I bet there's a four line snippet to rewrite your status lines via nginx</text>
  </message>
  <message>
    <ts>2017-07-20T15:36:36.017017</ts>
    <user>U085HE1PB</user>
    <text>&lt;@U053V4R5N&gt; suppp</text>
  </message>
  <message>
    <ts>2017-07-20T15:36:37.017481</ts>
    <user>U053V4R5N</user>
    <text>a quick web search reveals a lot of "why would you ever want to do that? lol" by library authors in general</text>
  </message>
  <message>
    <ts>2017-07-20T15:36:48.023522</ts>
    <user>U053V4R5N</user>
    <text>&lt;@U085HE1PB&gt; hiii</text>
  </message>
  <message>
    <ts>2017-07-20T15:37:43.052888</ts>
    <user>U085HE1PB</user>
    <text>&lt;@U051SS2EU&gt; That's interesting. Hm...</text>
  </message>
  <message>
    <ts>2017-07-20T15:38:55.092030</ts>
    <user>U66SFLTPT</user>
    <text>looks like it could be for using http `CONNECT` requests?</text>
  </message>
  <message>
    <ts>2017-07-20T15:39:02.096020</ts>
    <user>U051SS2EU</user>
    <text>possible terrible kluges include "run server sockets through netcat / sed shell pipeline"</text>
  </message>
  <message>
    <ts>2017-07-20T15:39:09.099952</ts>
    <user>U053V4R5N</user>
    <text>I'm not saying anyone in clojure-land would ever give that response, just seeing it in general for searching "set status-line http" :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-20T15:39:11.100645</ts>
    <user>U051SS2EU</user>
    <text>(don't actually do that)</text>
  </message>
  <message>
    <ts>2017-07-20T15:39:39.115181</ts>
    <user>U66SFLTPT</user>
    <text>&lt;https://textslashplain.com/2015/11/19/understanding-connect-tunnels/&gt; seems relevant</text>
  </message>
  <message>
    <ts>2017-07-20T15:40:03.128488</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U6BEL7FPC&gt; Something like:
```
{:duct.module/ataraxy {"/" ^:foo [:index]}
 :duct.router/ataraxy {:middleware {:foo #ig/ref :foo.middleware/auth}}}
```</text>
  </message>
  <message>
    <ts>2017-07-20T15:40:17.135895</ts>
    <user>U66SFLTPT</user>
    <text>specifically:
&amp;gt; Upon receiving such a request, the proxy is expected to establish a TCP/IP connection to the requested hostname and port and signal its success by returning a HTTP/200 response indicating that the requested connection was made:
```
  HTTP/1.1 200 Connection Established
  Connection: close
```</text>
  </message>
  <message>
    <ts>2017-07-20T15:40:37.146345</ts>
    <user>U0BKWMG5B</user>
    <text>Come to think of it, I think middleware of `:foo` assumes a key of `:project.middleware/foo` already.</text>
  </message>
  <message>
    <ts>2017-07-20T15:42:05.193586</ts>
    <user>U6BEL7FPC</user>
    <text>&lt;@U0BKWMG5B&gt; so if i wanted to use a 3rd-party middleware i'd replace `:foo.middleware/auth` with `&amp;lt;3rd party ns&amp;gt;.wrap-auth`?</text>
  </message>
  <message>
    <ts>2017-07-20T15:44:02.256419</ts>
    <user>U085HE1PB</user>
    <text>&lt;@U66SFLTPT&gt; ahhh thanks!</text>
  </message>
  <message>
    <ts>2017-07-20T15:44:48.280790</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U6BEL7FPC&gt; You'd need to create an `init-key` method for it. Say your project name is "foo". What I tend to do is have a `foo.middleware` namespace where I dump all the init-keys for middleware.</text>
  </message>
  <message>
    <ts>2017-07-20T15:45:48.312918</ts>
    <user>U0BKWMG5B</user>
    <text>```
(ns foo.middleware
  (:require [integrant.core :as ig]
            [buddy.middleware.auth :refer [wrap-auth]])

(defmethod ig/init-key ::auth [_ options]
  #(wrap-auth % options))
```</text>
  </message>
  <message>
    <ts>2017-07-20T15:46:37.338940</ts>
    <user>U0BKWMG5B</user>
    <text>And then in my config:
```
{:duct.module/ataraxy {"/" [:index], "/private ^:auth [:private]}}
```</text>
  </message>
  <message>
    <ts>2017-07-20T15:46:43.342385</ts>
    <user>U085HE1PB</user>
    <text>Lol you have to set "Connection: close" but leave the socket open</text>
  </message>
  <message>
    <ts>2017-07-20T15:46:58.350055</ts>
    <user>U66SFLTPT</user>
    <text>yeah lol</text>
  </message>
  <message>
    <ts>2017-07-20T15:47:10.356550</ts>
    <user>U6BEL7FPC</user>
    <text>&lt;@U0BKWMG5B&gt; ahh thanks, i'll give it a try!</text>
  </message>
  <message>
    <ts>2017-07-20T15:50:20.457392</ts>
    <user>U085HE1PB</user>
    <text>httpkit also forces you to add headers, tsk tsk. ```        if (!headers.containsKey("Server")) {
          headers.put("Server", "http-kit");
        }
        if (!headers.containsKey("Date")) {
          headers.put("Date", DateFormatter.getDate()); 
        }```</text>
  </message>
  <message>
    <ts>2017-07-20T15:50:52.475089</ts>
    <user>U085HE1PB</user>
    <text>I guess the spec says you need these sometimes, and I'm a corner case anyway</text>
  </message>
  <message>
    <ts>2017-07-20T16:45:14.220723</ts>
    <user>U0CAUAKCG</user>
    <text/>
    <text>I have a java.nio.HeapByteBuffer which I feed into this function
```
(defn- decode-UTF-8 [^ByteBuffer buf]
  (.toString (.decode StandardCharsets/UTF_8 buf)))
```
still I'm getting plenty of barbage,
this is the return value before being applied the function decode-UTF-8
```
#object[java.nio.HeapByteBuffer 0x40b43b15 "java.nio.HeapByteBuffer[pos=0 lim=28 cap=32768]"]
```
and for the same object, after the application
```
/g_new,iii
```
Is there any possible way to trim this garbage away from the given information of pos, lim and cap?</text>
  </message>
  <message>
    <ts>2017-07-20T16:47:10.280103</ts>
    <user>U0CAUAKCG</user>
    <text>there are two boxes (and invisible chars) that I don't want in my string.</text>
  </message>
  <message>
    <ts>2017-07-20T16:48:05.309386</ts>
    <user>U0NCTKEV8</user>
    <text>slice</text>
  </message>
  <message>
    <ts>2017-07-20T16:48:30.322413</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#slice()&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T16:49:02.339301</ts>
    <user>U0CAUAKCG</user>
    <text>mindblow, try it... :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T16:52:42.454039</ts>
    <user>U0CAUAKCG</user>
    <text/>
    <text>```
(defn- decode-UTF-8 [^ByteBuffer buf]
  (.toString (.decode StandardCharsets/UTF_8 (.slice buf))))
```
didnt do it, may be something more extreme here going on
```
#object[java.nio.HeapByteBuffer 0x1f6ad41a "java.nio.HeapByteBuffer[pos=0 lim=252 cap=32768]"]
/d_recv,b�SCgfovertone.studio.fx/fx-freeverb?�33???buswet-dry	room-size	dampeningControlInFreeVerb
      BinaryOpUGen��
ReplaceOut
```
some esetoric charset here in play, this is a buffer from clj-osc.</text>
  </message>
  <message>
    <ts>2017-07-20T16:56:34.577250</ts>
    <user>U0CAUAKCG</user>
    <text>debugging charsets, I try all the combination until I get something working :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T17:00:23.699238</ts>
    <user>U0GN0S72R</user>
    <text>I love how `clj-time.core/today`'s docstring says "LocalDate objects do not deal with timezones at all.", but it doesn't mention that the function is sensitive to the current timezone.


I don't think programmers have a good vocabulary for discussing time[-zones]</text>
  </message>
  <message>
    <ts>2017-07-20T17:08:57.959477</ts>
    <user>U69US348Z</user>
    <text>My apologies if this is a FAQ, I did try searching here and in the Google Group… but I'm just curious, does anyone have a sense for when Clojure 1.9.0 might start making its way to beta and then final releases? I'm not stressed about it or anything, really I'm just curious. Thanks!</text>
  </message>
  <message>
    <ts>2017-07-20T17:12:20.057340</ts>
    <user>U0CAUAKCG</user>
    <text>solved my shit above, someone from the past made osc message decoder that I could just use directly. This is what happens when I program without a beer.</text>
  </message>
  <message>
    <ts>2017-07-20T17:12:22.058828</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U69US348Z&gt; I get the impression sometime later this year. The hold-up is because 1.9 will include its own dependency management.</text>
  </message>
  <message>
    <ts>2017-07-20T17:15:44.154871</ts>
    <user>U0GN0S72R</user>
    <text>dependency management?</text>
  </message>
  <message>
    <ts>2017-07-20T17:17:20.199799</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U0GN0S72R&gt; There was a talk about it at EuroClojure a few hours ago. Because spec is now its own package, the idea is that Clojure needs to be able to download dependencies without requiring an additional build tool like Leiningen or Boot.</text>
  </message>
  <message>
    <ts>2017-07-20T17:17:32.205393</ts>
    <user>U0GN0S72R</user>
    <text>oh man</text>
  </message>
  <message>
    <ts>2017-07-20T17:18:15.225541</ts>
    <user>U050ECB92</user>
    <text>:exclamation:</text>
  </message>
  <message>
    <ts>2017-07-20T17:19:00.246419</ts>
    <user>U0BKWMG5B</user>
    <text>So Clojure will get a `clj` script that will use a `deps.edn` file to retrieve packages and construct a classpath. The classpath will be cached so that the shell script can use it directly the next time its called.</text>
  </message>
  <message>
    <ts>2017-07-20T17:19:46.267864</ts>
    <user>U11BV7MTK</user>
    <text>huh. i wonder if stuart sierra was getting at this a bit in his recent article</text>
  </message>
  <message>
    <ts>2017-07-20T17:20:01.274566</ts>
    <user>U0BKWMG5B</user>
    <text>It looks pretty nice.</text>
  </message>
  <message>
    <ts>2017-07-20T17:20:03.275371</ts>
    <user>U11BV7MTK</user>
    <text>or was that in the comments about caching the jar deps</text>
  </message>
  <message>
    <ts>2017-07-20T17:20:30.288018</ts>
    <user>U0GN0S72R</user>
    <text>so it's definitely user-facing then?

the next question is how that composes with lein/boot</text>
  </message>
  <message>
    <ts>2017-07-20T17:21:26.313742</ts>
    <user>U0GN0S72R</user>
    <text>and where do you get the script from</text>
  </message>
  <message>
    <ts>2017-07-20T17:21:43.321801</ts>
    <user>U69US348Z</user>
    <text>Thanks &lt;@U0BKWMG5B&gt; !</text>
  </message>
  <message>
    <ts>2017-07-20T17:21:57.327886</ts>
    <user>U69US348Z</user>
    <text>And thanks so much for all the excellent libraries and tools that you share with the community!</text>
  </message>
  <message>
    <ts>2017-07-20T17:23:07.359913</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U0GN0S72R&gt; Script will be packaged up in brew, apt, etc. I believe it's a script around a Java jar for performance, IIRC.</text>
  </message>
  <message>
    <ts>2017-07-20T17:23:52.380582</ts>
    <user>U0BKWMG5B</user>
    <text>Lein and Boot probably won't be affected at first, since it's a separate system</text>
  </message>
  <message>
    <ts>2017-07-20T17:24:28.396770</ts>
    <user>U0BKWMG5B</user>
    <text>But I can see a build tool being made that's effectively just a bunch of `clj` aliases.</text>
  </message>
  <message>
    <ts>2017-07-20T17:24:40.402440</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U69US348Z&gt; You're welcome</text>
  </message>
  <message>
    <ts>2017-07-20T17:24:45.404617</ts>
    <user>U0GN0S72R</user>
    <text>please tell me `deps.edn` uses the `[org.clojure/clojure "0.9.0"]` syntax at least</text>
  </message>
  <message>
    <ts>2017-07-20T17:25:31.426712</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U0GN0S72R&gt; Nope, it's more like: `org.clojure/clojure {:source :mvn, :version "0.9.0"}`</text>
  </message>
  <message>
    <ts>2017-07-20T17:25:51.435984</ts>
    <user>U0BKWMG5B</user>
    <text>So it's a map of symbols to maps.</text>
  </message>
  <message>
    <ts>2017-07-20T17:26:13.446103</ts>
    <user>U0BKWMG5B</user>
    <text>But the idea is that it's not necessarily limited to Maven</text>
  </message>
  <message>
    <ts>2017-07-20T17:26:27.452453</ts>
    <user>U0GN0S72R</user>
    <text>e.g., npm?</text>
  </message>
  <message>
    <ts>2017-07-20T17:27:08.471527</ts>
    <user>U0BKWMG5B</user>
    <text>Yeah, or raw Github for example. Funny you should mention npm, since ClojureScript is getting the ability to use that directly.</text>
  </message>
  <message>
    <ts>2017-07-20T17:27:31.482206</ts>
    <user>U0GN0S72R</user>
    <text>via `deps.edn` or something different?</text>
  </message>
  <message>
    <ts>2017-07-20T17:27:51.491309</ts>
    <user>U0BKWMG5B</user>
    <text>Via a compiler option I believe</text>
  </message>
  <message>
    <ts>2017-07-20T17:28:02.496208</ts>
    <user>U0BKWMG5B</user>
    <text>I imagine that it'll converge with Clojure</text>
  </message>
  <message>
    <ts>2017-07-20T17:28:25.507549</ts>
    <user>U0BKWMG5B</user>
    <text>Advantage is that npm packages can be pulled into Google Closure, so you don't need externs</text>
  </message>
  <message>
    <ts>2017-07-20T17:28:30.509866</ts>
    <user>U0BKWMG5B</user>
    <text>As well as being convenient.</text>
  </message>
  <message>
    <ts>2017-07-20T17:29:12.529020</ts>
    <user>U0GN0S72R</user>
    <text>computers are complicated</text>
  </message>
  <message>
    <ts>2017-07-20T17:31:13.585012</ts>
    <user>U69US348Z</user>
    <text>:thinking_face: probably naïve, but when you first mentioned dependencies I thought of Rich Hickey's talk last year (?) about maybe radically changing how we manage dependencies… IIRC to boil it down reductively, to track dependencies at the function level rather than the "library" level, and to never change the contract of any given function… pretty compelling stuff!</text>
  </message>
  <message>
    <ts>2017-07-20T17:31:43.598158</ts>
    <user>U69US348Z</user>
    <text>&lt;https://www.youtube.com/watch?v=oyLBGkS5ICk&gt; for those who have not seen it</text>
  </message>
  <message>
    <ts>2017-07-20T17:32:16.613089</ts>
    <user>U0BKWMG5B</user>
    <text>It doesn't go that far, yet, since it's just for classpaths and only supports Maven currently.</text>
  </message>
  <message>
    <ts>2017-07-20T17:32:32.619950</ts>
    <user>U0BKWMG5B</user>
    <text>But I get the impression it could go that way in future.</text>
  </message>
  <message>
    <ts>2017-07-20T17:32:35.621142</ts>
    <user>U69US348Z</user>
    <text>yeah that makes sense</text>
  </message>
  <message>
    <ts>2017-07-20T17:32:42.624154</ts>
    <user>U69US348Z</user>
    <text>gotta start somewhere</text>
  </message>
  <message>
    <ts>2017-07-20T17:33:02.632707</ts>
    <user>U0BKWMG5B</user>
    <text>And it has the advantage of not using Maven's dependency resolution algorithm.</text>
  </message>
  <message>
    <ts>2017-07-20T17:34:02.658808</ts>
    <user>U69US348Z</user>
    <text>I don't know the details of why that's compelling, but moving away from Maven sounds positive to me</text>
  </message>
  <message>
    <ts>2017-07-20T17:34:48.678569</ts>
    <user>U0GN0S72R</user>
    <text>so transitive deps are all entered manually?</text>
  </message>
  <message>
    <ts>2017-07-20T17:35:56.707768</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U0GN0S72R&gt; No, it'l resolve transitive dependencies, but I believe it all has to be unambiguous otherwise it'll complain.</text>
  </message>
  <message>
    <ts>2017-07-20T17:36:21.718542</ts>
    <user>U0BKWMG5B</user>
    <text>Presumably if the Maven artifacts lead to conflicts it'll require that you resolve the dep explicitly.</text>
  </message>
  <message>
    <ts>2017-07-20T17:36:38.725430</ts>
    <user>U0BKWMG5B</user>
    <text>Rather than the Maven resolution of just going with the "closest" dependency.</text>
  </message>
  <message>
    <ts>2017-07-20T17:37:32.748118</ts>
    <user>U0BKWMG5B</user>
    <text>Same thing I heard with the cljs npm deps. They want the deps to be unambiguous and not subject to change.</text>
  </message>
  <message>
    <ts>2017-07-20T17:37:45.753189</ts>
    <user>U0BKWMG5B</user>
    <text>Which I can get behind.</text>
  </message>
  <message>
    <ts>2017-07-20T17:38:28.771731</ts>
    <user>U04V32P6U</user>
    <text>So there is no support for specifying version "ranges" then</text>
  </message>
  <message>
    <ts>2017-07-20T17:39:10.788936</ts>
    <user>U04V32P6U</user>
    <text>or is there a lock-file type thing? a la Bundler/Cargo/Yarn?</text>
  </message>
  <message>
    <ts>2017-07-20T17:39:48.804953</ts>
    <user>U0BKWMG5B</user>
    <text>No support for specifying ranges, I'm pretty sure.</text>
  </message>
  <message>
    <ts>2017-07-20T17:41:08.837933</ts>
    <user>U0BKWMG5B</user>
    <text>There's support for overriding deps, though, IIRC.</text>
  </message>
  <message>
    <ts>2017-07-20T17:41:37.850130</ts>
    <user>U0BKWMG5B</user>
    <text>And (eventually) for excluding transitive deps, but the syntax for that is pending a talk with Rich</text>
  </message>
  <message>
    <ts>2017-07-20T17:43:12.889072</ts>
    <user>U0BKWMG5B</user>
    <text>Take what I'm saying with a grain of salt, until the EuroClojure videos comes out :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T17:43:34.898349</ts>
    <user>U0BKWMG5B</user>
    <text>Since I'm a secondary source, and it's late</text>
  </message>
  <message>
    <ts>2017-07-20T17:48:01.005870</ts>
    <user>U04V70XH6</user>
    <text>That's Alex Miller's talk today?</text>
  </message>
  <message>
    <ts>2017-07-20T17:48:17.012103</ts>
    <user>U04V70XH6</user>
    <text>Looking forward to the video ... hopefully tomorrow? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-20T17:48:52.025723</ts>
    <user>U0BKWMG5B</user>
    <text>Yep, Alex's talk was on the `clj` script, `deps.edn` thing.</text>
  </message>
  <message>
    <ts>2017-07-20T17:49:36.042691</ts>
    <user>U0BKWMG5B</user>
    <text>I'm kinda thinking about a `build.edn` now…</text>
  </message>
  <message>
    <ts>2017-07-20T17:50:36.066208</ts>
    <user>U0BKWMG5B</user>
    <text>Or a `tasks.edn`, either in the project root, or included in the resources path.</text>
  </message>
  <message>
    <ts>2017-07-20T18:04:55.400702</ts>
    <user>U04V70XH6</user>
    <text>We use `deps.edn` for regular coordinates today and load them from various subprojects and concatenate them (and then update them from a list of "pinned" versions in a `versions.properties` file) as part of our dynamic Boot-based dependency analysis.</text>
  </message>
  <message>
    <ts>2017-07-20T19:23:47.847158</ts>
    <user>U0F27GHT7</user>
    <text>Is there a way to do something like map fusion on lazy seqs? Does it even make sense to do that (given chunking, or for some other reason I haven't thought of)?</text>
  </message>
  <message>
    <ts>2017-07-20T19:25:34.875627</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://clojure.org/reference/transducers&gt;</text>
  </message>
  <message>
    <ts>2017-07-20T19:28:05.914457</ts>
    <user>U0F27GHT7</user>
    <text>Thanks! I'd been under the impression that transducers only made sense in an eager context, but further research suggests that belief may have been oversimplified :stuck_out_tongue_winking_eye:.</text>
  </message>
  <message>
    <ts>2017-07-20T20:24:06.695785</ts>
    <user>U0W0JDY4C</user>
    <text>i feel like i'm missing 2 things about protocols;
1) if a record implements a protocol, and that record has fields defined in `defrecord MyRecord [foo]`, what's the difference between using `foo` and `(:foo this)` in a protocol function's implementation?
2) how does a protocol call one of the other functions defined in its own protocol interface? I'm getting compiler warnings about `my-protocol-func not defined` if attempting to do something like
```
IMyProtocol
(foo [_ a] ...)
(bar [_ a] (foo _ a)
```</text>
  </message>
  <message>
    <ts>2017-07-20T20:25:06.708726</ts>
    <user>U051SS2EU</user>
    <text>protocol functions need to be used the same way you would any other function</text>
  </message>
  <message>
    <ts>2017-07-20T20:25:07.708971</ts>
    <user>U0NCTKEV8</user>
    <text>you look like you might be using the interface generated by the protocol instead of the protocol</text>
  </message>
  <message>
    <ts>2017-07-20T20:25:11.709768</ts>
    <user>U051SS2EU</user>
    <text>they belong to the other namespace</text>
  </message>
  <message>
    <ts>2017-07-20T20:25:53.718738</ts>
    <user>U051SS2EU</user>
    <text>you could also use the method call syntax `.foo` without namespacing of course, but it's better to use the protocol function</text>
  </message>
  <message>
    <ts>2017-07-20T20:26:13.722934</ts>
    <user>U0W0JDY4C</user>
    <text>ahh.. they are defined in the `protocols.cljs` so you have to `protocols/foo` in the above example</text>
  </message>
  <message>
    <ts>2017-07-20T20:26:18.724010</ts>
    <user>U051SS2EU</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-20T20:26:49.730218</ts>
    <user>U051SS2EU</user>
    <text>very common beginning mistake with protocols - to think their functions are like methods</text>
  </message>
  <message>
    <ts>2017-07-20T20:27:05.733425</ts>
    <user>U051SS2EU</user>
    <text>(and they are - but not in this aspect)</text>
  </message>
  <message>
    <ts>2017-07-20T20:28:06.745850</ts>
    <user>U0W0JDY4C</user>
    <text>so the `this` context is kind of the method context? "invoke my protocol func on `this`"</text>
  </message>
  <message>
    <ts>2017-07-20T20:28:38.752543</ts>
    <user>U051SS2EU</user>
    <text>it's the object that the method was called on - and don't call it `_` if you are going to call a function on it</text>
  </message>
  <message>
    <ts>2017-07-20T20:28:44.753714</ts>
    <user>U050MP39D</user>
    <text>I would say the answer to your first question is "there is no difference use whichever you prefer"</text>
  </message>
  <message>
    <ts>2017-07-20T20:28:58.756739</ts>
    <user>U051SS2EU</user>
    <text>`_` is a naming convention that means "I plan on ignoring this, on purpose"</text>
  </message>
  <message>
    <ts>2017-07-20T20:29:15.760462</ts>
    <user>U0NCTKEV8</user>
    <text>the behavior of `this` is likely slightly different in clojurescript vs. clojure</text>
  </message>
  <message>
    <ts>2017-07-20T20:29:28.763249</ts>
    <user>U050MP39D</user>
    <text>although honestly I haven't used a defrecord in 2 years so I may be misremembering something</text>
  </message>
  <message>
    <ts>2017-07-20T20:29:52.768498</ts>
    <user>U0NCTKEV8</user>
    <text>(this meaning the first argument to something defined inline on a defrecord, deftype, or reify)</text>
  </message>
  <message>
    <ts>2017-07-20T20:30:04.771054</ts>
    <user>U051SS2EU</user>
    <text>I suspect that using the name of the field directly leads to a faster lookup, but if that difference means anything in your code you probably want something more performant than a record anyway</text>
  </message>
  <message>
    <ts>2017-07-20T20:30:24.775624</ts>
    <user>U0W0JDY4C</user>
    <text>so even if I invoke `(protocols/foo this)`, it still doesnt matter if I refer to the record's field or the `(:foo this)` because at that point the context has already changed</text>
  </message>
  <message>
    <ts>2017-07-20T20:30:44.779922</ts>
    <user>U0NCTKEV8</user>
    <text>what?</text>
  </message>
  <message>
    <ts>2017-07-20T20:31:05.784474</ts>
    <user>U0NCTKEV8</user>
    <text>the first argument is always going to be the thing you invoked the protocol function</text>
  </message>
  <message>
    <ts>2017-07-20T20:31:10.785502</ts>
    <user>U0NCTKEV8</user>
    <text>on</text>
  </message>
  <message>
    <ts>2017-07-20T20:32:15.799477</ts>
    <user>U0W0JDY4C</user>
    <text>```
(defrecord MyRecord [field]
  IMyProto
  (foo [this a] (do-something field)) &amp;lt;- here shouldnt matter if I use field or (:field this)?
  (bar [this a] (protocols/foo this a)
```</text>
  </message>
  <message>
    <ts>2017-07-20T20:32:59.808837</ts>
    <user>U0W0JDY4C</user>
    <text>I just want to make sure I dont get this very subtle bug by implementing a protocol that's using a field versus a lookup on this, when self-referencing(?) a protocol</text>
  </message>
  <message>
    <ts>2017-07-20T20:33:00.809107</ts>
    <user>U050MP39D</user>
    <text>`field` and (:field this) will always be the same thing</text>
  </message>
  <message>
    <ts>2017-07-20T20:33:19.812939</ts>
    <user>U0W0JDY4C</user>
    <text>i've been stabbed in the foot by javascript so many times I'm very paranoid</text>
  </message>
  <message>
    <ts>2017-07-20T20:33:48.818914</ts>
    <user>U0W0JDY4C</user>
    <text>okay, good to know the context stays the same no matter how it's invoked</text>
  </message>
  <message>
    <ts>2017-07-20T20:34:14.823889</ts>
    <user>U0W0JDY4C</user>
    <text>thanks &lt;@U0NCTKEV8&gt; &lt;@U050MP39D&gt;  &lt;@U051SS2EU&gt; :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-20T20:36:57.856058</ts>
    <user>U0W0JDY4C</user>
    <text>```
let my_obj = {
  lolGoodLuck(args) {
    let that = this
    function() {
      that.call(this, args)
    }
  }
}
my_obj.lolGoodLuck.apply(youWillNeverGuess)
```</text>
  </message>
  <message>
    <ts>2017-07-20T23:00:14.492866</ts>
    <user>U17DY48BW</user>
    <text>Got a tough problem if anyone has an answer. Basically I have a large data structure (vector of hashmaps) about 50,000 hashmaps. And I need to pass the data to a Java function, but the hashmap has keyword keywords and those keywords need to be transferred to strings for the java function. Is there a fast way to convert keyword keywords to strings? right now the conversion takes about 2 seconds</text>
  </message>
  <message>
    <ts>2017-07-20T23:04:58.542969</ts>
    <user>U07S8JGF7</user>
    <text>Use strings from the start instead of keywords?</text>
  </message>
  <message>
    <ts>2017-07-20T23:06:00.553612</ts>
    <user>U07S8JGF7</user>
    <text>You're talking linear time + string manipulation. Probably not a fast operation no matter how you slice it.</text>
  </message>
  <message>
    <ts>2017-07-20T23:07:45.570835</ts>
    <user>U051SS2EU</user>
    <text>name shouldn't be manipulating strings - it should just be getting a field from the keyword</text>
  </message>
  <message>
    <ts>2017-07-20T23:07:59.573124</ts>
    <user>U07S8JGF7</user>
    <text>Turning string data into keywords is a bad habit that clojure developers have. Benefit is really only concision, downsides are slow and buggy translation.</text>
  </message>
  <message>
    <ts>2017-07-20T23:08:06.574349</ts>
    <user>U051SS2EU</user>
    <text>(I mean, if you are converting by manipulating strings, use name instead)</text>
  </message>
  <message>
    <ts>2017-07-20T23:08:19.576478</ts>
    <user>U07S8JGF7</user>
    <text>Yeah right. Fair enough.</text>
  </message>
  <message>
    <ts>2017-07-21T00:20:16.457163</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U17DY48BW&gt; I just generated 50,000 keywords, at 50 random characters each (using c.s.gen), and both `str` and `name` take about &amp;lt;10ms to convert the whole vector from keywords to strings

```
(defn trunc [s n]
  (subs s 0 (min (count s) n)))

(def kws
  (doall
    (gen/sample
      (gen/fmap
        #(keyword (trunc (name %) 50))
        (gen/keyword))
      50000))

(time (do (doall (map name kws)) nil))
"Elapsed time: 5.684874 msecs"
=&amp;gt; nil
(time (do (doall (map str kws)) nil))
"Elapsed time: 5.781799 msecs"
=&amp;gt; nil
```</text>
  </message>
  <message>
    <ts>2017-07-21T00:20:59.463682</ts>
    <user>U1ALMRBLL</user>
    <text>(where `gen` is `clojure.spec.gen.alpha`)</text>
  </message>
  <message>
    <ts>2017-07-21T00:21:57.472453</ts>
    <user>U17DY48BW</user>
    <text>&lt;@U1ALMRBLL&gt; ya your test doesn't compare as I am talking about a series of hashmaps with multiple keys in each one</text>
  </message>
  <message>
    <ts>2017-07-21T00:22:53.481060</ts>
    <user>U17DY48BW</user>
    <text>but &lt;@U07S8JGF7&gt; your suggestion is what I landed on, so I'll just change my json decoding to get string keys</text>
  </message>
  <message>
    <ts>2017-07-21T00:23:01.482252</ts>
    <user>U1ALMRBLL</user>
    <text>oh, so there are many such keywords in each hashmap?</text>
  </message>
  <message>
    <ts>2017-07-21T00:23:16.484631</ts>
    <user>U17DY48BW</user>
    <text>&lt;@U1ALMRBLL&gt; correct</text>
  </message>
  <message>
    <ts>2017-07-21T00:23:17.484834</ts>
    <user>U1ALMRBLL</user>
    <text>how many total?</text>
  </message>
  <message>
    <ts>2017-07-21T00:23:25.485844</ts>
    <user>U051SS2EU</user>
    <text>I bet the map construction when converting is the more expensive part, not the keyword/string part</text>
  </message>
  <message>
    <ts>2017-07-21T00:23:32.486986</ts>
    <user>U1ALMRBLL</user>
    <text>^^ yep</text>
  </message>
  <message>
    <ts>2017-07-21T00:23:32.487012</ts>
    <user>U051SS2EU</user>
    <text>but avoiding converting avoids both</text>
  </message>
  <message>
    <ts>2017-07-21T00:41:17.650926</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0W0JDY4C&gt; re: `field` vs `(:field this)` -- I asked a while back and Alex said to use `field` as it will be faster and it's the "correct" way to deal with records /cc &lt;@U050MP39D&gt; &lt;@U0NCTKEV8&gt; &lt;@U051SS2EU&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T02:45:33.947630</ts>
    <user>U68M9194Z</user>
    <text>I'm using boot for my build system. Is there a library to help with the following task. I have a function TRANSLATE, which does *.foo -&amp;gt; *.clj. I also have a bunch of *.foo files. Whenever any of them changes, I want TRANSLATE to be called to generate the corresponding *.clj file.
Is there a library to handle this for me?</text>
  </message>
  <message>
    <ts>2017-07-21T02:47:35.973936</ts>
    <user>U0J9LVB6G</user>
    <text>&lt;@U68M9194Z&gt; This should probably do the trick &lt;https://github.com/wkf/hawk&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T02:49:01.993305</ts>
    <user>U0J9LVB6G</user>
    <text>Or, actually, I think boot has that as a built in task</text>
  </message>
  <message>
    <ts>2017-07-21T02:49:23.998306</ts>
    <user>U68M9194Z</user>
    <text>I see now. The core of my problem is just a "watch + notify." Right, there's a boot task. Boot can do this already for me.</text>
  </message>
  <message>
    <ts>2017-07-21T04:52:14.239666</ts>
    <user>U1561881H</user>
    <text>hi everyone,
i want ask, how create multiple connection database  or host in sqlkorma ?</text>
  </message>
  <message>
    <ts>2017-07-21T04:57:39.359179</ts>
    <user>U1YTUBH53</user>
    <text>How well would a clojure dev environment work on a Raspberry Pi?</text>
  </message>
  <message>
    <ts>2017-07-21T08:27:22.322366</ts>
    <user>U051SS2EU</user>
    <text>The arm jvm is not so great last I checked, and startup times go into the multiple minutes if using nrepl and lein</text>
  </message>
  <message>
    <ts>2017-07-21T08:28:13.339998</ts>
    <user>U051SS2EU</user>
    <text>But it can run things once it gets going.</text>
  </message>
  <message>
    <ts>2017-07-21T12:07:16.455067</ts>
    <user>U1A6BTMPA</user>
    <text>I have two REPL clients connected to the same nrepl and I want them to share a stdout/stderr, is this possible without unix hackery?</text>
  </message>
  <message>
    <ts>2017-07-21T12:24:53.030646</ts>
    <user>U051SS2EU</user>
    <text>nrepl is a network library, it doesn't share stdio between processes</text>
  </message>
  <message>
    <ts>2017-07-21T12:25:01.034816</ts>
    <user>U051SS2EU</user>
    <text>you'd need some other infrastructure entirely</text>
  </message>
  <message>
    <ts>2017-07-21T12:26:07.070058</ts>
    <user>U051SS2EU</user>
    <text>you could set something up for multicast output to clients, but it would require new middleware on both the client and server sides</text>
  </message>
  <message>
    <ts>2017-07-21T12:26:23.078466</ts>
    <user>U051SS2EU</user>
    <text>hm.. maybe only server side</text>
  </message>
  <message>
    <ts>2017-07-21T12:37:52.446355</ts>
    <user>U1A6BTMPA</user>
    <text>Thanks! &lt;@U051SS2EU&gt; I guess nirvana is not for this world. I'll just do the unix hackery</text>
  </message>
  <message>
    <ts>2017-07-21T12:55:28.003290</ts>
    <user>U051HUZLD</user>
    <text>can anyone explain the difference between `event` and `trigger` in FSMs? In particular in context of UML state charts specification.
Is it just a java-esque OOP overhead, or is there key semantic difference?</text>
  </message>
  <message>
    <ts>2017-07-21T13:00:01.152600</ts>
    <user>U051SS2EU</user>
    <text>"trigger" is more general, "event" assumes a specific interpretation of how the state machine interacts with an unknown outside world</text>
  </message>
  <message>
    <ts>2017-07-21T13:00:14.160634</ts>
    <user>U051SS2EU</user>
    <text>by unknown I mean "something not specified by the machine itself"</text>
  </message>
  <message>
    <ts>2017-07-21T13:01:39.209852</ts>
    <user>U051SS2EU</user>
    <text>you can of course describe all things as events, but that's a more specific term, and some semantics prefer to draw a distinction between eg. an event and a start of a timer</text>
  </message>
  <message>
    <ts>2017-07-21T13:01:42.211198</ts>
    <user>U051HUZLD</user>
    <text>can you give an example, where having an event and a trigger would not be "redundant"?</text>
  </message>
  <message>
    <ts>2017-07-21T13:01:51.216561</ts>
    <user>U051SS2EU</user>
    <text>since that can be triggered internally by another part of the machine</text>
  </message>
  <message>
    <ts>2017-07-21T13:02:35.241332</ts>
    <user>U051SS2EU</user>
    <text>maybe I did that already as you were typing? if a change in one part of the machine activates another part of the same machine, that's a trigger, but not an event because it came from inside the machine itself</text>
  </message>
  <message>
    <ts>2017-07-21T13:03:26.269915</ts>
    <user>U051SS2EU</user>
    <text>so let's say a parser: if your language rules say "you are now in a closure" that's a trigger but not an event, if you read a semicolon and that means you end the closure, that is an event that is also a trigger</text>
  </message>
  <message>
    <ts>2017-07-21T13:03:36.275115</ts>
    <user>U051HUZLD</user>
    <text>I have a feeling, that having both events and triggers (which are followed with guards (predicates)) - is somewhat excessive, at least in the clojure/edn/library context</text>
  </message>
  <message>
    <ts>2017-07-21T13:04:08.292461</ts>
    <user>U051SS2EU</user>
    <text>they are different levels of abstraction - an event is a special kind of trigger and most users of fsms differentiate them</text>
  </message>
  <message>
    <ts>2017-07-21T13:04:33.305513</ts>
    <user>U051SS2EU</user>
    <text>definitely implement in terms of triggers first, if you do it right you can build events on top if you need them?</text>
  </message>
  <message>
    <ts>2017-07-21T13:05:50.347205</ts>
    <user>U051SS2EU</user>
    <text>but calling a trigger that is totally internal to the state of the machine an event seems weird (unless you also reify the trigger as some output and re-consume it I guess? I've done that for coordination)</text>
  </message>
  <message>
    <ts>2017-07-21T13:06:32.369762</ts>
    <user>U051HUZLD</user>
    <text>I get that there are less/more specific events. what I cannot pin point, is why some would be triggers, not events (or vise versa)</text>
  </message>
  <message>
    <ts>2017-07-21T13:07:24.397116</ts>
    <user>U051HUZLD</user>
    <text>so basically: internal=trigger, external=event? (interna/external to machine, not particular state)</text>
  </message>
  <message>
    <ts>2017-07-21T13:09:45.470909</ts>
    <user>U051HUZLD</user>
    <text>or even: event/type is a trigger, but event is an entire "object"? sort of</text>
  </message>
  <message>
    <ts>2017-07-21T13:14:23.614418</ts>
    <user>U051SS2EU</user>
    <text>no, event is not the general thing, a trigger is the general thing</text>
  </message>
  <message>
    <ts>2017-07-21T13:14:38.621921</ts>
    <user>U051SS2EU</user>
    <text>all things that cause transitions are triggers, period</text>
  </message>
  <message>
    <ts>2017-07-21T13:14:51.628576</ts>
    <user>U051SS2EU</user>
    <text>if you only want one abstraction, it's a trigger</text>
  </message>
  <message>
    <ts>2017-07-21T13:14:57.631633</ts>
    <user>U051SS2EU</user>
    <text>an event is a special kind of trigger</text>
  </message>
  <message>
    <ts>2017-07-21T13:16:08.668436</ts>
    <user>U051HUZLD</user>
    <text>thank you for the input</text>
  </message>
  <message>
    <ts>2017-07-21T13:18:02.727459</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U051HUZLD&gt; it could be that what you really want is event sourcing. That works very nicely with clojure / immutable data.</text>
  </message>
  <message>
    <ts>2017-07-21T13:18:23.737804</ts>
    <user>U051SS2EU</user>
    <text>while a state machine is kind of designed for c or assembly, it's all about when to do what mutation</text>
  </message>
  <message>
    <ts>2017-07-21T13:19:06.759743</ts>
    <user>U051SS2EU</user>
    <text>if so, yeah, everything should be an event, you have a log of events to consume, and you project various views from the events via a projection (aka fold, aka `clojure.core/reductions`).</text>
  </message>
  <message>
    <ts>2017-07-21T13:20:21.798988</ts>
    <user>U051SS2EU</user>
    <text>I'm currently building a system around that, and it's very nice (especially the fact that when I hit a bug I can just dump an excerpt of the log, and replaying that log builds my regression test)</text>
  </message>
  <message>
    <ts>2017-07-21T13:27:55.040004</ts>
    <user>U051HUZLD</user>
    <text>&lt;@U051SS2EU&gt; I am trying to reconcile my understanding of the components of: rule based systems, FSMs, and event sourcing, to "solve" single page apps state management for myself. I tried basic event sourcing, but when you have: few audio/video html tags with their own states, some i/o, a bunch of buttons depending on the above, and custom performance-sensitive progress bar – it kind of is not enough, and coordinating all of this is not much easier, than just a bunch of atoms with a page of `add-watch`es connecting them. So i went looking for a better way, or just to improve my understanding of the building blocks.</text>
  </message>
  <message>
    <ts>2017-07-21T13:28:47.067762</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U051HUZLD&gt; OK - I suggest checking out petri nets btw because they are async and have a formal provable semantics</text>
  </message>
  <message>
    <ts>2017-07-21T13:29:17.083949</ts>
    <user>U051HUZLD</user>
    <text>those are on my reading list, yes</text>
  </message>
  <message>
    <ts>2017-07-21T13:29:26.088784</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U051HUZLD&gt; also the very high level response to that problem is "when event sourcing leads to local state changes, reify the state change by sending it out as a new event and then consuming it"</text>
  </message>
  <message>
    <ts>2017-07-21T13:29:51.102046</ts>
    <user>U051SS2EU</user>
    <text>that way you still have the events as the canonical source of all truth</text>
  </message>
  <message>
    <ts>2017-07-21T13:30:18.117058</ts>
    <user>U051SS2EU</user>
    <text>when you have local state changes that will guide behavior that are not visible in the events, you've undermined the event sourcing system because you now have an irreproducible state</text>
  </message>
  <message>
    <ts>2017-07-21T13:30:26.121345</ts>
    <user>U051SS2EU</user>
    <text>it's actually not event sourced any more</text>
  </message>
  <message>
    <ts>2017-07-21T13:31:54.168767</ts>
    <user>U051HUZLD</user>
    <text>I sort of did that. But having few "a pure state {} depending on side-effectful io/video/audio and vice versa" loops messes things up. So I went for specs to get some vocabulary for "internal/external/pure/io events", etc.</text>
  </message>
  <message>
    <ts>2017-07-21T13:34:19.245644</ts>
    <user>U051HUZLD</user>
    <text>the challenge is: from event sourcing pov: there are like 100 states, but from ui components' pov: 10, and I am looking for a way to manage those 2 "projections"</text>
  </message>
  <message>
    <ts>2017-07-21T13:35:14.274601</ts>
    <user>U051HUZLD</user>
    <text>(basically states vs. &lt;https://en.wikipedia.org/wiki/UML_state_machine#Extended_states&gt;)</text>
  </message>
  <message>
    <ts>2017-07-21T13:35:22.279398</ts>
    <user>U051SS2EU</user>
    <text>my solution was to base things on a petri net - which have two kinds of things, places and transitions, a transition consumes tokens from 1 or more places and puts tokens into 0 or more places. All canonical state is the content of places (keys in a hash-map, obviously) and transitions are described by predicates on the contents under those keys and an update that removes tokens from N places and places tokens in N places</text>
  </message>
  <message>
    <ts>2017-07-21T13:36:17.308509</ts>
    <user>U051SS2EU</user>
    <text>but yes, I have dealt with that problem you describe in my reagent app</text>
  </message>
  <message>
    <ts>2017-07-21T13:36:21.310214</ts>
    <user>U051HUZLD</user>
    <text>what do tokens represent? "should I run this predicate?"?</text>
  </message>
  <message>
    <ts>2017-07-21T13:36:29.314139</ts>
    <user>U051SS2EU</user>
    <text>tokens are immutable data</text>
  </message>
  <message>
    <ts>2017-07-21T13:36:47.324134</ts>
    <user>U051SS2EU</user>
    <text>the predicate says "given these tokens that currently exist, do I fire?"</text>
  </message>
  <message>
    <ts>2017-07-21T13:37:00.330593</ts>
    <user>U051SS2EU</user>
    <text>and firing consumes some tokens and maybe produces some in other places</text>
  </message>
  <message>
    <ts>2017-07-21T13:37:14.338118</ts>
    <user>U051SS2EU</user>
    <text>it's like actors without the data hiding</text>
  </message>
  <message>
    <ts>2017-07-21T13:38:52.388857</ts>
    <user>U051SS2EU</user>
    <text>instead of mailboxes they have some places they watch (and anyone else can watch), and instead of sending messages they remove data from one place and maybe put new immutable data in places</text>
  </message>
  <message>
    <ts>2017-07-21T13:39:30.408226</ts>
    <user>U051HUZLD</user>
    <text>so the places are basically like queues?</text>
  </message>
  <message>
    <ts>2017-07-21T13:39:36.411475</ts>
    <user>U051SS2EU</user>
    <text>they aren't ordered</text>
  </message>
  <message>
    <ts>2017-07-21T13:40:06.426662</ts>
    <user>U051HUZLD</user>
    <text>like an (atom {}), which you take values from or put into?</text>
  </message>
  <message>
    <ts>2017-07-21T13:40:37.443152</ts>
    <user>U051SS2EU</user>
    <text>and you might say "I only fire if I can consume 3 from :a plus one from :b" - eg. that is what assigning work to a worker ends up looking like - you have a token for a worker and a token for the job, you consume both and create a new token representing a pending result</text>
  </message>
  <message>
    <ts>2017-07-21T13:40:46.448024</ts>
    <user>U051HUZLD</user>
    <text>so 10 places (nodes) = 10 atoms?</text>
  </message>
  <message>
    <ts>2017-07-21T13:40:57.453599</ts>
    <user>U051SS2EU</user>
    <text>no, you don't even need an atom</text>
  </message>
  <message>
    <ts>2017-07-21T13:41:30.471064</ts>
    <user>U051SS2EU</user>
    <text>I put it all in one hash map, but you could eg. represent the whole thing with `reductions` which would mean each state is another item in the lazy-seq that reductions outputs</text>
  </message>
  <message>
    <ts>2017-07-21T13:41:55.483930</ts>
    <user>U051SS2EU</user>
    <text>(free history!)</text>
  </message>
  <message>
    <ts>2017-07-21T13:42:06.489764</ts>
    <user>U051SS2EU</user>
    <text>or reduce on an atom</text>
  </message>
  <message>
    <ts>2017-07-21T13:42:08.490610</ts>
    <user>U051SS2EU</user>
    <text>or whatever</text>
  </message>
  <message>
    <ts>2017-07-21T13:42:44.509483</ts>
    <user>U3DUA3TPY</user>
    <text>thats how i designed my deterministic game simulation</text>
  </message>
  <message>
    <ts>2017-07-21T13:43:08.522354</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3DUA3TPY&gt; hehe my event / petri based library is called "ludic" and the primary metaphor is playing chess by mail</text>
  </message>
  <message>
    <ts>2017-07-21T13:43:28.532909</ts>
    <user>U051SS2EU</user>
    <text>but really it's doing a bunch of data transitions based on a petri net model from an event source :smile:</text>
  </message>
  <message>
    <ts>2017-07-21T13:43:45.542005</ts>
    <user>U051SS2EU</user>
    <text>(ludic is a super intellectual word describing playfulness)</text>
  </message>
  <message>
    <ts>2017-07-21T13:44:00.549770</ts>
    <user>U051HUZLD</user>
    <text>so you have a list of "workers", and just (while true) apply them on the same {}? and each of those modify it, if "there is enough of particular tokens"</text>
  </message>
  <message>
    <ts>2017-07-21T13:44:23.561847</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U051HUZLD&gt; one thing it does is manage workers and tasks, but that's just because I'm running a computation cluster</text>
  </message>
  <message>
    <ts>2017-07-21T13:44:46.574256</ts>
    <user>U051SS2EU</user>
    <text>if you are in the browser, you don't need workers - make places / tokens that model your domain</text>
  </message>
  <message>
    <ts>2017-07-21T13:45:09.586683</ts>
    <user>U051SS2EU</user>
    <text>eg. a place could be a dom node and the tokens represent the data driving it… (maybe?)</text>
  </message>
  <message>
    <ts>2017-07-21T13:46:31.631176</ts>
    <user>U051SS2EU</user>
    <text>or maybe better would be a place being a UI state, tokens describing it, and transitions deciding where it should go next</text>
  </message>
  <message>
    <ts>2017-07-21T13:46:36.633722</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! I have a set containing vectors, e.g. `#{[1 2 3]}`, and I want to get the first element of the first member of the set. Is there a more idiomatic way to do this than `(first (first set))` ?</text>
  </message>
  <message>
    <ts>2017-07-21T13:46:42.636755</ts>
    <user>U051HUZLD</user>
    <text>I'll read your lib's readme first. Did not quite get the analogy yet : )</text>
  </message>
  <message>
    <ts>2017-07-21T13:46:56.644123</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; sets don't have "first" anything, they are unordered</text>
  </message>
  <message>
    <ts>2017-07-21T13:47:28.661453</ts>
    <user>U051SS2EU</user>
    <text>if you want an implementation-derived item that will change when you change contents in odd ways, sure, you can call `ffirst`</text>
  </message>
  <message>
    <ts>2017-07-21T13:47:34.664500</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; right; in my case I don't care about which element of the set gets picked; hopefully it should be a singleton set, or empty set</text>
  </message>
  <message>
    <ts>2017-07-21T13:47:35.665372</ts>
    <user>U051SS2EU</user>
    <text>but don't count on any particular item coming out</text>
  </message>
  <message>
    <ts>2017-07-21T13:47:48.672068</ts>
    <user>U04V70XH6</user>
    <text>There's a `ffirst` function.</text>
  </message>
  <message>
    <ts>2017-07-21T13:48:16.686700</ts>
    <user>U5ZAJ15P0</user>
    <text>ffirst is exactly what I was looking for; thank you!</text>
  </message>
  <message>
    <ts>2017-07-21T13:49:40.732239</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U051HUZLD&gt; I almost regret mentioning my lib - it's still super young and I don't think the examples are good yet and it's still changing fast</text>
  </message>
  <message>
    <ts>2017-07-21T13:49:43.734103</ts>
    <user>U051SS2EU</user>
    <text>just FYI</text>
  </message>
  <message>
    <ts>2017-07-21T13:50:16.752614</ts>
    <user>U051SS2EU</user>
    <text>I only brought it up because of the game thing</text>
  </message>
  <message>
    <ts>2017-07-21T13:51:53.805838</ts>
    <user>U051HUZLD</user>
    <text>&lt;@U051SS2EU&gt; I just need lots of input and analogies to straighten my thoughts at this point :)</text>
  </message>
  <message>
    <ts>2017-07-21T13:54:10.881311</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U051HUZLD&gt; on that account, this book is very well written, has beautiful illustrations and typography &lt;https://www.amazon.com/gp/product/3642332773/ref=oh_aui_detailpage_o04_s00?ie=UTF8&amp;amp;psc=1&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T13:54:22.888178</ts>
    <user>U051SS2EU</user>
    <text>(it's a book about petri nets, since the url doesn't reveal that)</text>
  </message>
  <message>
    <ts>2017-07-21T13:54:51.903867</ts>
    <user>U051SS2EU</user>
    <text>definitely the most beautiful CS book I own</text>
  </message>
  <message>
    <ts>2017-07-21T13:55:29.925501</ts>
    <user>U051HUZLD</user>
    <text>no kindle edition :harold:</text>
  </message>
  <message>
    <ts>2017-07-21T13:55:39.931303</ts>
    <user>U11BV7MTK</user>
    <text>just a reminder that the first element of a set is not a well defined concept. it may be consistent but this would only be due to implementation details</text>
  </message>
  <message>
    <ts>2017-07-21T13:56:22.955290</ts>
    <user>U051HUZLD</user>
    <text>thank you. everything was really helpful</text>
  </message>
  <message>
    <ts>2017-07-21T13:57:21.988026</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U11BV7MTK&gt; thanks! I'm aware of that however, and in my case it doesn't matter. The set should always be either empty or a singleton</text>
  </message>
  <message>
    <ts>2017-07-21T13:57:24.989551</ts>
    <user>U051SS2EU</user>
    <text>np - and keep in mind you might not need the petri net model - you might just want eg. CSP instead (since core.async is right there) - but do think about how well the foo you connect your events to is something that works nicely in the clojure ecosystem</text>
  </message>
  <message>
    <ts>2017-07-21T13:57:44.000979</ts>
    <user>U051SS2EU</user>
    <text>events -&amp;gt; datalog works great too</text>
  </message>
  <message>
    <ts>2017-07-21T13:57:45.001483</ts>
    <user>U11BV7MTK</user>
    <text>sounds good. just wanted to remind just incase</text>
  </message>
  <message>
    <ts>2017-07-21T13:58:22.021694</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks :slightly_smiling_face: it could have introduced a nasty bug if I relied on the first element being stable..</text>
  </message>
  <message>
    <ts>2017-07-21T13:59:40.065367</ts>
    <user>U051HUZLD</user>
    <text>about that :kappa:</text>
  </message>
  <message>
    <ts>2017-07-21T14:01:28.128003</ts>
    <user>U051HUZLD</user>
    <text>the bigger picture I keep in mind, is some kind of format, which can help describe system in concise way, so you could see it all at once, to some level of details</text>
  </message>
  <message>
    <ts>2017-07-21T14:01:54.142604</ts>
    <user>U051HUZLD</user>
    <text>like: &lt;http://www.thelogbook.com/phosphor/2008/frisky.gif&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T14:04:28.228224</ts>
    <user>U051HUZLD</user>
    <text>channels are cool, but when all the plumbing is spread across entire project - it becomes challenging to see the "project mini map". And anything I encountered so far – are either one way graph wiz pngs, or completely new visual-first language.</text>
  </message>
  <message>
    <ts>2017-07-21T14:06:33.294484</ts>
    <user>U051SS2EU</user>
    <text>it was pretty straightforward to make a function that consumed my rules and based on the places they consume from and produce to (fields on the rule record) generate a `.dot` file for graphviz showing a petri net.</text>
  </message>
  <message>
    <ts>2017-07-21T14:07:03.310056</ts>
    <user>U051SS2EU</user>
    <text>not the precise petri net my code implements (since my code can easily break that abstraction…) but at least a diagram that is helpful</text>
  </message>
  <message>
    <ts>2017-07-21T14:07:55.338005</ts>
    <user>U051HUZLD</user>
    <text>yeah, I saw the .dot support</text>
  </message>
  <message>
    <ts>2017-07-21T14:10:08.408875</ts>
    <user>U0LGCREMU</user>
    <text>you also might find Milner' Pi Calc useful &lt;https://www.amazon.com/Communicating-Mobile-Systems-Pi-Calculus/dp/0521658691&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T14:10:24.417265</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0LGCREMU&gt; oh nice thanks for reminding me of that</text>
  </message>
  <message>
    <ts>2017-07-21T14:12:03.468538</ts>
    <user>U0LGCREMU</user>
    <text>np, thanks for the petri book ref, always wanted to find sth like that!</text>
  </message>
  <message>
    <ts>2017-07-21T15:15:59.438072</ts>
    <user>U066TMAKS</user>
    <text>is there a parallel transduce? say, something like `(pmap send-messages!)`</text>
  </message>
  <message>
    <ts>2017-07-21T15:32:57.901156</ts>
    <user>U5ZAJ15P0</user>
    <text>Is &lt;https://github.com/stuartsierra/component&gt; "state of the art" to structure a system in Clojure? Or does anyone have better advice?</text>
  </message>
  <message>
    <ts>2017-07-21T15:34:10.934255</ts>
    <user>U0E0XL064</user>
    <text>I prefer &lt;https://github.com/tolitius/mount&gt; by far. Simpler, less opinionated, less viral.</text>
  </message>
  <message>
    <ts>2017-07-21T15:34:54.953818</ts>
    <user>U0NCTKEV8</user>
    <text>mount is just terrible though</text>
  </message>
  <message>
    <ts>2017-07-21T15:35:10.961437</ts>
    <user>U0E0XL064</user>
    <text>could be. I rather don't like component.</text>
  </message>
  <message>
    <ts>2017-07-21T15:35:51.979592</ts>
    <user>U0DJC1V3R</user>
    <text>&lt;@U5ZAJ15P0&gt; check out integrant: &lt;https://github.com/weavejester/integrant&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T15:35:52.980272</ts>
    <user>U5ZAJ15P0</user>
    <text>:smile: well, let me turn my question around then: what would be your preferred way to structure a system to as to make dependency injection / mocking easy?</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:03.984925</ts>
    <user>U0NCTKEV8</user>
    <text>component</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:07.986589</ts>
    <user>U5ZAJ15P0</user>
    <text>I am new to clojure and about to build my first app</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:07.986877</ts>
    <user>U0E0XL064</user>
    <text>mount :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:20.992505</ts>
    <user>U0E0XL064</user>
    <text>lol</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:24.994302</ts>
    <user>U0BKWMG5B</user>
    <text>Integrant :wink:</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:24.994398</ts>
    <user>U0NCTKEV8</user>
    <text>mount is a formalized system of global state, component gets rid of global state</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:29.996640</ts>
    <user>U5ZAJ15P0</user>
    <text>I guess I'll try all three then</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:30.997225</ts>
    <user>U0BKWMG5B</user>
    <text>But I might be a touch biased</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:30.997320</ts>
    <user>U5ZAJ15P0</user>
    <text>:smile:</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:45.004108</ts>
    <user>U5ZAJ15P0</user>
    <text>oh, integrant is your project &lt;@U0BKWMG5B&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:48.005168</ts>
    <user>U051HUZLD</user>
    <text>&lt;@U0NCTKEV8&gt; why is mount terrible?</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:54.008253</ts>
    <user>U0BKWMG5B</user>
    <text>Component is the most used. Integrant is a little new, but YMMV.</text>
  </message>
  <message>
    <ts>2017-07-21T15:36:57.009353</ts>
    <user>U0E0XL064</user>
    <text>yeah, I guess that's the best thing to do: try all :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T15:37:01.011407</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; what does integrant do better than mount and component?</text>
  </message>
  <message>
    <ts>2017-07-21T15:37:09.015174</ts>
    <user>U0NCTKEV8</user>
    <text>mount is based on global state in global atoms</text>
  </message>
  <message>
    <ts>2017-07-21T15:37:16.018113</ts>
    <user>U0NCTKEV8</user>
    <text>I've done that, it sucked</text>
  </message>
  <message>
    <ts>2017-07-21T15:37:55.036380</ts>
    <user>U0NCTKEV8</user>
    <text>component turns your system in to another first class value you can pass around, have multiple copies of, etc</text>
  </message>
  <message>
    <ts>2017-07-21T15:37:56.036963</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U0NCTKEV8&gt; we've all done all kinds of stuff, I never liked component. No need to argue with : I like it - I don't.</text>
  </message>
  <message>
    <ts>2017-07-21T15:38:02.039557</ts>
    <user>U5ZAJ15P0</user>
    <text>I fear I've asked a more contentious question than "should I use VIM or Emacs?"</text>
  </message>
  <message>
    <ts>2017-07-21T15:38:03.040107</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U5ZAJ15P0&gt; Compared to Mount, Integrant doesn't have global state. Compared to Component, Integrant can have dependencies between things that aren't maps/records.</text>
  </message>
  <message>
    <ts>2017-07-21T15:38:45.059088</ts>
    <user>U0BKWMG5B</user>
    <text>I feel like Vim and Emacs users can be collectively smug toward users of lesser editors :wink:</text>
  </message>
  <message>
    <ts>2017-07-21T15:38:48.060663</ts>
    <user>U0E0XL064</user>
    <text>we know &lt;@U0NCTKEV8&gt; doesn't like mount : &lt;https://gist.github.com/pandeiro/9a1c8fd431e1b4c78c99&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T15:39:24.076731</ts>
    <user>U0E0XL064</user>
    <text>That discussion actually drew my attention to mount, and I like it since. Thanks to &lt;@U0NCTKEV8&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T15:39:50.088257</ts>
    <user>U0NCTKEV8</user>
    <text>huh, I  didn't know there was acopy of that floating around</text>
  </message>
  <message>
    <ts>2017-07-21T15:39:54.089867</ts>
    <user>U051HUZLD</user>
    <text>```
seems bad, like sticking (def state (atom {})) in every namespace would be
```
isn't this the way I am supposed to do things? :kappa:</text>
  </message>
  <message>
    <ts>2017-07-21T15:40:04.094487</ts>
    <user>U0NCTKEV8</user>
    <text>god no</text>
  </message>
  <message>
    <ts>2017-07-21T15:40:36.109266</ts>
    <user>U0NCTKEV8</user>
    <text>singleton global state is bad and sprinkling clojure on it doesn't make it good</text>
  </message>
  <message>
    <ts>2017-07-21T15:40:57.118594</ts>
    <user>U0E0XL064</user>
    <text>still, thanks for pointing me to mount :wink:</text>
  </message>
  <message>
    <ts>2017-07-21T15:41:06.122720</ts>
    <user>U051HUZLD</user>
    <text>actually, I'd love to see good example of not doing global atoms, asking for a friend™</text>
  </message>
  <message>
    <ts>2017-07-21T15:42:11.152133</ts>
    <user>U051HUZLD</user>
    <text>I guess good component example would suffice as well</text>
  </message>
  <message>
    <ts>2017-07-21T15:43:11.179905</ts>
    <user>U0NCTKEV8</user>
    <text>all the main component projects I have worked on have been closed source apps</text>
  </message>
  <message>
    <ts>2017-07-21T15:43:26.186683</ts>
    <user>U5ZAJ15P0</user>
    <text>Oh, I didn't realise you're the maintainer of Ring and Compojure!</text>
  </message>
  <message>
    <ts>2017-07-21T15:43:33.190088</ts>
    <user>U0CHY4VNW</user>
    <text>Here is the problem with global state: you don't know beforehand how you will want to use your code later. So, inevitably the system grows to the point where your previous "application" is subsumed in some larger structure, and you have to refactor all the global state out of it. Which is a much bigger pain later.</text>
  </message>
  <message>
    <ts>2017-07-21T15:43:59.201700</ts>
    <user>U0BKWMG5B</user>
    <text>Indeed. Feel free to hit me up with any questions when/if you happen to have any.</text>
  </message>
  <message>
    <ts>2017-07-21T15:44:05.204502</ts>
    <user>U0E0XL064</user>
    <text>Read the discussion... it's enlightening</text>
  </message>
  <message>
    <ts>2017-07-21T15:44:09.206082</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://github.com/hiredman/songs-of-future-past/blob/master/src/com/manigfeald/sofp.clj&gt; is an example of something using component, I don't know that it is good</text>
  </message>
  <message>
    <ts>2017-07-21T15:44:35.218102</ts>
    <user>U051HUZLD</user>
    <text>thank you</text>
  </message>
  <message>
    <ts>2017-07-21T15:44:36.218382</ts>
    <user>U0NCTKEV8</user>
    <text>it doesn't have any tests, which is where the lack of global state would really shine</text>
  </message>
  <message>
    <ts>2017-07-21T15:45:38.246837</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; thanks, will do! Watching your talk on Integrant now</text>
  </message>
  <message>
    <ts>2017-07-21T15:45:53.253674</ts>
    <user>U0CHY4VNW</user>
    <text>I only say this because I went through this before. Component solves a problem I was having, and has been great ever since.</text>
  </message>
  <message>
    <ts>2017-07-21T15:46:21.266591</ts>
    <user>U0CHY4VNW</user>
    <text>I feel like you can go through this yourself, maybe that is the only way to see it</text>
  </message>
  <message>
    <ts>2017-07-21T15:47:37.301110</ts>
    <user>U0LGCREMU</user>
    <text>hmaurer: in that case, build it yourself.  once you've got that experience under your belt you'll be able to evaluate mount, component, etc.  walk before you run. </text>
  </message>
  <message>
    <ts>2017-07-21T15:48:01.312707</ts>
    <user>U0NCTKEV8</user>
    <text>I would say it is a classic easy/simple split, component is way simpler (&lt;https://gist.github.com/hiredman/075b45eaeb01e4b526ce6f8854685487&gt; implements all the functionality of component in 30 lines, but lacks refinement), but mount is going to be easier because using globals is always easier for a few months</text>
  </message>
  <message>
    <ts>2017-07-21T15:48:23.322687</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0LGCREMU&gt; good point. that has been my general philosophy so far</text>
  </message>
  <message>
    <ts>2017-07-21T15:48:53.336730</ts>
    <user>U0CHY4VNW</user>
    <text>I think of it as an "easier now"/"easier later" divide</text>
  </message>
  <message>
    <ts>2017-07-21T15:49:33.355447</ts>
    <user>U0CHY4VNW</user>
    <text>Global state is easy now. You don't have to learn anything and it doesn't take work to set up</text>
  </message>
  <message>
    <ts>2017-07-21T15:49:43.360155</ts>
    <user>U0E0XL064</user>
    <text>Going the 'simpler' and 'easier' way, are we?</text>
  </message>
  <message>
    <ts>2017-07-21T15:50:33.383683</ts>
    <user>U0LGCREMU</user>
    <text>hmaurer: fwiw all that stuff is interesting and useful, i suppose, but i've not needed to use any of them.  mastering clojure is already a tall order, those things are for ninjas (imho).  good luck!</text>
  </message>
  <message>
    <ts>2017-07-21T15:50:43.388281</ts>
    <user>U0E0XL064</user>
    <text>Right, it may be easier, and if it solves the problem, why make it more difficult? - What is the problem you want to solve? This may be the first question to &lt;@U5ZAJ15P0&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T15:51:01.395936</ts>
    <user>U0CHY4VNW</user>
    <text>But there will come a day when you are screwed</text>
  </message>
  <message>
    <ts>2017-07-21T15:51:12.400982</ts>
    <user>U0E0XL064</user>
    <text>Having a viral framework, I never liked that. Component is more a framework - I will be screwed as well</text>
  </message>
  <message>
    <ts>2017-07-21T15:51:16.403058</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0LGCREMU&gt; thanks! any tip on mastering clojure itself?</text>
  </message>
  <message>
    <ts>2017-07-21T15:51:25.407131</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U0E0XL064&gt; Agreed. &lt;@U5ZAJ15P0&gt; If you are trying to learn Clojure, just use a global atom</text>
  </message>
  <message>
    <ts>2017-07-21T15:51:30.409553</ts>
    <user>U0E0XL064</user>
    <text>Have used enough frameworks, they always hit you in the face as well... and hard :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T15:52:10.427295</ts>
    <user>U5ZAJ15P0</user>
    <text>I don't really want to use a global state atom. While I am new to clojure I've been interested in functional programming for quite a while; if there are ways to avoid global state I rather do so</text>
  </message>
  <message>
    <ts>2017-07-21T15:52:15.429732</ts>
    <user>U5ZAJ15P0</user>
    <text>But I'll try out mount either way</text>
  </message>
  <message>
    <ts>2017-07-21T15:52:18.430986</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U0E0XL064&gt; We disagree in general, it is okay</text>
  </message>
  <message>
    <ts>2017-07-21T15:52:20.431925</ts>
    <user>U5ZAJ15P0</user>
    <text>I might learn some valuable lessons</text>
  </message>
  <message>
    <ts>2017-07-21T15:52:32.437632</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U5ZAJ15P0&gt; That is good context. In that case I think you will appreciate component</text>
  </message>
  <message>
    <ts>2017-07-21T15:52:36.439414</ts>
    <user>U051HUZLD</user>
    <text>fwiw, there is a yurt for mount &lt;https://github.com/tolitius/yurt&gt;
```Multiple brand new local Yurts with components can be created and passed down to the application / REPL to be used simultaneously in the same Clojure runtime for fun and profit.```</text>
  </message>
  <message>
    <ts>2017-07-21T15:52:37.439792</ts>
    <user>U0E0XL064</user>
    <text>Exactly - check what works out for you.</text>
  </message>
  <message>
    <ts>2017-07-21T15:52:40.441415</ts>
    <user>U0NCTKEV8</user>
    <text>integrant seems ok, I haven't looked at in depth, but it looks like it uses multimethods for dispatch, which I've done with component before, but is annoying if you want to create an anonymous sort of mock of something in a test</text>
  </message>
  <message>
    <ts>2017-07-21T15:53:17.457481</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U5ZAJ15P0&gt; Once you understand it, it is not as bad as people make it out to be</text>
  </message>
  <message>
    <ts>2017-07-21T15:53:18.457984</ts>
    <user>U5ZAJ15P0</user>
    <text>A global state atom also sounds a bit messy for mocking</text>
  </message>
  <message>
    <ts>2017-07-21T15:53:21.459706</ts>
    <user>U0CHY4VNW</user>
    <text>It is a conceptual hurdle</text>
  </message>
  <message>
    <ts>2017-07-21T15:53:25.461657</ts>
    <user>U0CHY4VNW</user>
    <text>not a technical one</text>
  </message>
  <message>
    <ts>2017-07-21T15:53:31.464216</ts>
    <user>U5ZAJ15P0</user>
    <text>I mean, you could set the global state atom before runing your tests with the mock dependency</text>
  </message>
  <message>
    <ts>2017-07-21T15:53:33.465178</ts>
    <user>U5ZAJ15P0</user>
    <text>but it sounds a bit dirty</text>
  </message>
  <message>
    <ts>2017-07-21T15:53:38.467292</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;@U5ZAJ15P0&gt; the beating heart of mount &lt;https://github.com/tolitius/mount/blob/master/src/mount/core.cljc#L12-L16&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T15:54:04.479333</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U0CHY4VNW&gt; right... one prefers frameworks, the other doesn't. Fine with me :slightly_smiling_face:.</text>
  </message>
  <message>
    <ts>2017-07-21T15:54:37.494182</ts>
    <user>U0E0XL064</user>
    <text>Global state atom can be bad, of course. That's why mount manages it, so you don't have to.</text>
  </message>
  <message>
    <ts>2017-07-21T15:54:55.502020</ts>
    <user>U051HUZLD</user>
    <text>:opieop:</text>
  </message>
  <message>
    <ts>2017-07-21T15:54:59.503875</ts>
    <user>U0CHY4VNW</user>
    <text>I would call component more of a pattern. It is not doing much for you, most of it is explicit</text>
  </message>
  <message>
    <ts>2017-07-21T15:55:24.515444</ts>
    <user>U0E0XL064</user>
    <text>Anyway, we'll never agree on that part - that discussion was pretty clear about how it's not that different from component (passing in state everywhere)</text>
  </message>
  <message>
    <ts>2017-07-21T15:55:34.519659</ts>
    <user>U0CHY4VNW</user>
    <text>It is a pattern of state access, treating state as a value</text>
  </message>
  <message>
    <ts>2017-07-21T15:55:56.529803</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U0CHY4VNW&gt; right... it does not do much... I like that :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T15:56:16.539240</ts>
    <user>U0CHY4VNW</user>
    <text>Basically, it is the functional way to do things: you have to pass everything in</text>
  </message>
  <message>
    <ts>2017-07-21T15:56:48.554518</ts>
    <user>U0E0XL064</user>
    <text>yes, that's a dogmatic reason. I prefer pragmatism in many cases.</text>
  </message>
  <message>
    <ts>2017-07-21T15:57:10.564570</ts>
    <user>U0LGCREMU</user>
    <text>write code, heh.  to me the key is compositionality.  it was not obvious to me just what that means when i was starting.  i guess i would recommend focussing on the small stuff first - sequuences, laziness, core.async, etc.  explore the api - what does juxt do?  how to use protocols? etc.</text>
  </message>
  <message>
    <ts>2017-07-21T15:57:26.572247</ts>
    <user>U5ZAJ15P0</user>
    <text>Is there a good blog/book/resource somewhere on clojure ways of doing things? (i am already familiar with "programming clojure" and "the joy of clojure")</text>
  </message>
  <message>
    <ts>2017-07-21T15:58:04.590513</ts>
    <user>U3DUA3TPY</user>
    <text>I've heard good things of &lt;http://www.braveclojure.com/&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T15:58:14.595166</ts>
    <user>U0LGCREMU</user>
    <text>better: forget the app for now, just spend a lot of time in the repl experimenting.  </text>
  </message>
  <message>
    <ts>2017-07-21T15:58:22.598781</ts>
    <user>U0D33A4JF</user>
    <text>heh, I went to Mount after a couple years of Component straitjacket. In a bigger team I'd use Component though :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T15:58:25.600214</ts>
    <user>U0E0XL064</user>
    <text>clojure does have state management constructs because you don't pass everything in. There's a reason why clojure isn't dogmatic on FP.</text>
  </message>
  <message>
    <ts>2017-07-21T15:59:08.620036</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;https://leanpub.com/elementsofclojure&gt; isn't finished but has some interesting ideas. It's not a general purpose programming book, though. I think the first chapter on naming is free.</text>
  </message>
  <message>
    <ts>2017-07-21T15:59:12.622265</ts>
    <user>U04V70XH6</user>
    <text>As someone who initially went down a Mount-like path when building a system and has since switched to Component, I'll "vote" for &lt;@U0NCTKEV8&gt;'s position here that global state is a *terrible* idea.</text>
  </message>
  <message>
    <ts>2017-07-21T15:59:37.633613</ts>
    <user>U0E0XL064</user>
    <text>It is a terrible idea in general, right. The dogmatic reason. I can understand it.</text>
  </message>
  <message>
    <ts>2017-07-21T15:59:55.642062</ts>
    <user>U0E0XL064</user>
    <text>But having a viral framework has hit me many times, including component.</text>
  </message>
  <message>
    <ts>2017-07-21T16:00:20.654987</ts>
    <user>U04V70XH6</user>
    <text>We're still feeling the pain of the global state approach as we piecemeal migrate away from it (by using Component instead but having its `start`/`stop` functions keep the legacy global state in sync until we can replace it).</text>
  </message>
  <message>
    <ts>2017-07-21T16:00:42.665944</ts>
    <user>U0E0XL064</user>
    <text>That's why I prefer mount - pragmatism, and as long as you manage state, it's ok.</text>
  </message>
  <message>
    <ts>2017-07-21T16:00:52.670479</ts>
    <user>U3DUA3TPY</user>
    <text>single global atom is the rallying cry for frontend projects lately</text>
  </message>
  <message>
    <ts>2017-07-21T16:01:03.675602</ts>
    <user>U0E0XL064</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T16:01:15.681365</ts>
    <user>U0LGCREMU</user>
    <text>&lt;@U5ZAJ15P0&gt; as you can tell from this thread, there is always More Than One Way to Do It.  Master the basics first, then you'll see just how true that is!</text>
  </message>
  <message>
    <ts>2017-07-21T16:01:28.687900</ts>
    <user>U0E0XL064</user>
    <text>lol true!</text>
  </message>
  <message>
    <ts>2017-07-21T16:01:33.690324</ts>
    <user>U04V70XH6</user>
    <text>Component is not a "viral framework". Functions need to be based stuff as arguments, not reach out to global state for it.</text>
  </message>
  <message>
    <ts>2017-07-21T16:01:48.697466</ts>
    <user>U5ZAJ15P0</user>
    <text>Haha, I am glad it sparked a discussion though. It would have been quite boring if someone linked me a lib and 5 people thumbed up</text>
  </message>
  <message>
    <ts>2017-07-21T16:01:51.699039</ts>
    <user>U0E0XL064</user>
    <text>Once you start using component, it's hard not to use it everywhere in your code base.</text>
  </message>
  <message>
    <ts>2017-07-21T16:01:57.701448</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;@U3DUA3TPY&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:02:13.709287</ts>
    <user>U0E0XL064</user>
    <text>So well, I call that viral (inside the code base).</text>
  </message>
  <message>
    <ts>2017-07-21T16:02:19.711824</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;@U3DUA3TPY&gt; I wouldn't be surprised if that is the primary split front end / back end on mount / component</text>
  </message>
  <message>
    <ts>2017-07-21T16:02:39.721134</ts>
    <user>U0E0XL064</user>
    <text>You do it 'the component way' or not. There's nothing in between... using component.</text>
  </message>
  <message>
    <ts>2017-07-21T16:02:39.721252</ts>
    <user>U0CHY4VNW</user>
    <text>I think it is more about providing each part of your system the minimal amount of information it needs to do its job. That way you can decompose and rearrange it later. Which at some point will become very important.</text>
  </message>
  <message>
    <ts>2017-07-21T16:02:59.730234</ts>
    <user>U0CHY4VNW</user>
    <text>global state creates interdependence, which is weakness</text>
  </message>
  <message>
    <ts>2017-07-21T16:03:05.733061</ts>
    <user>U050ECB92</user>
    <text>Hate to make an argument by authority, but it's really not insignificant that some of the most veteran clojure developers (&lt;@U0NCTKEV8&gt; / &lt;@U04V70XH6&gt; ) favor component.
Personally I think mount teaches new clojure users bad habits.</text>
  </message>
  <message>
    <ts>2017-07-21T16:03:13.736577</ts>
    <user>U0E0XL064</user>
    <text>Same with mount, honestly. Check that discussion I posted above, it's really all not that different.</text>
  </message>
  <message>
    <ts>2017-07-21T16:03:19.739613</ts>
    <user>U050ECB92</user>
    <text>s/mount/global state patterns/</text>
  </message>
  <message>
    <ts>2017-07-21T16:03:29.744017</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0E0XL064&gt; any given function just needs to be passed what it _needs_ -- not the whole system -- and that's just functional cleanliness. You initialize all your resources at application startup, put them in a map, pass the relevant bits down the call chain. Component just formalizes that and manages dependencies for you.</text>
  </message>
  <message>
    <ts>2017-07-21T16:03:39.748565</ts>
    <user>U5ZAJ15P0</user>
    <text>can you do that with component? don't you pass the whole context around usually? or do you intentionally strip some keys from the context?</text>
  </message>
  <message>
    <ts>2017-07-21T16:03:57.756975</ts>
    <user>U0E0XL064</user>
    <text>Same with mount, really, if you like so.</text>
  </message>
  <message>
    <ts>2017-07-21T16:04:12.763281</ts>
    <user>U0D33A4JF</user>
    <text>&lt;@U050ECB92&gt; - even though I prefer Mount - I agree :slightly_smiling_face: Mount should only be allowed once you spent a year with Component</text>
  </message>
  <message>
    <ts>2017-07-21T16:04:28.770521</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U0D33A4JF&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T16:04:51.780673</ts>
    <user>U0CHY4VNW</user>
    <text>You only give each component access to the components it asks for (basically you declare a dependency). Your component only ever sees the state that it asks for</text>
  </message>
  <message>
    <ts>2017-07-21T16:05:30.797931</ts>
    <user>U04V70XH6</user>
    <text>Perhaps the pain level with Mount doesn't show up until you have a large enough system? Just like global state only causes you pain after a certain point?</text>
  </message>
  <message>
    <ts>2017-07-21T16:05:41.802794</ts>
    <user>U050ECB92</user>
    <text>The `mount` readme describing `component` is disingenuous &lt;https://github.com/tolitius/mount/blob/master/doc/differences-from-component.md#differences-from-component&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:05:54.808805</ts>
    <user>U0CHY4VNW</user>
    <text>which makes it really nice, because your systems are modular by default</text>
  </message>
  <message>
    <ts>2017-07-21T16:06:33.825440</ts>
    <user>U0D33A4JF</user>
    <text>&lt;@U04V70XH6&gt; it's probably true. In my case I've avoided building large applications (modules). I just have many of them.</text>
  </message>
  <message>
    <ts>2017-07-21T16:06:57.836505</ts>
    <user>U04V70XH6</user>
    <text>We have about 60,000 lines of Clojure right now...</text>
  </message>
  <message>
    <ts>2017-07-21T16:07:11.842516</ts>
    <user>U0D33A4JF</user>
    <text>I have half that, but I'm the only dev</text>
  </message>
  <message>
    <ts>2017-07-21T16:07:29.850671</ts>
    <user>U0E0XL064</user>
    <text>LOC - so?</text>
  </message>
  <message>
    <ts>2017-07-21T16:07:38.854526</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U0D33A4JF&gt; I kind of fear your codebase ; )</text>
  </message>
  <message>
    <ts>2017-07-21T16:07:59.863672</ts>
    <user>U0D33A4JF</user>
    <text>you should :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T16:08:13.869663</ts>
    <user>U0CHY4VNW</user>
    <text>Sweet, your glyphs and wards are working</text>
  </message>
  <message>
    <ts>2017-07-21T16:08:16.871299</ts>
    <user>U0E0XL064</user>
    <text>anyway, as said before, one prefers dogmatic, other prefer pragmatism. One prefers frameworks, other prefer libs/patterns. One likes pink, the other blue. Whatever :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T16:08:57.888776</ts>
    <user>U0CHY4VNW</user>
    <text>If you want to do things functionally, component is what you want</text>
  </message>
  <message>
    <ts>2017-07-21T16:09:41.908280</ts>
    <user>U0E0XL064</user>
    <text>(some ran away from component, others ran away from mount, so maybe we all should try integrant and decide it's not a silver bullet either :slightly_smiling_face: )</text>
  </message>
  <message>
    <ts>2017-07-21T16:10:01.917010</ts>
    <user>U5ZAJ15P0</user>
    <text>can you elaborate on the potential issues with multimethods please?</text>
  </message>
  <message>
    <ts>2017-07-21T16:10:12.922242</ts>
    <user>U0E0XL064</user>
    <text>lol - because someone has an opinion? Nice.</text>
  </message>
  <message>
    <ts>2017-07-21T16:13:26.008145</ts>
    <user>U04V70XH6</user>
    <text>Like I say, hard lessons learned building a system the "easy" way with Mount-like managed state, instead of the "simple" way with Component-like managed dependencies.</text>
  </message>
  <message>
    <ts>2017-07-21T16:14:19.030909</ts>
    <user>U0LGCREMU</user>
    <text>zzzzz. clojurians having another vigorous debate/ disagreement _without calling each other names_.  wtf is wrong with you people?!  :wink: </text>
  </message>
  <message>
    <ts>2017-07-21T16:16:41.091578</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;@U0LGCREMU&gt; I dunno, can't we just hate each other's software without hating each other?</text>
  </message>
  <message>
    <ts>2017-07-21T16:17:24.109703</ts>
    <user>U0NCTKEV8</user>
    <text>(hating your own software is of course also acceptable)</text>
  </message>
  <message>
    <ts>2017-07-21T16:17:26.110556</ts>
    <user>U0LGCREMU</user>
    <text>hate the code, not the coder!</text>
  </message>
  <message>
    <ts>2017-07-21T16:17:31.112754</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0NCTKEV8&gt;  ^</text>
  </message>
  <message>
    <ts>2017-07-21T16:18:23.017078</ts>
    <user>U0LGCREMU</user>
    <text>anyway that was a lame attempt at irony - the clojure community is extraordinarily irenic. (look, i made a pun! whee!)</text>
  </message>
  <message>
    <ts>2017-07-21T16:18:35.021847</ts>
    <user>U0NCTKEV8</user>
    <text>generally multi methods are also global, created with defmulti (technically you could create an anonymous one, but I have never actually seen anyone do that, and it would kind of defeat the purpose)</text>
  </message>
  <message>
    <ts>2017-07-21T16:19:06.035004</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; quick question on Integrant (I'm half way through the talk): how would I proceed to mock the implementation of one of the services?</text>
  </message>
  <message>
    <ts>2017-07-21T16:19:08.035746</ts>
    <user>U0NCTKEV8</user>
    <text>so if you want to create a mock, you have to use defmethod which effects the global multimethod</text>
  </message>
  <message>
    <ts>2017-07-21T16:19:12.037413</ts>
    <user>U5ZAJ15P0</user>
    <text>I am not sure how to do it with multimethods</text>
  </message>
  <message>
    <ts>2017-07-21T16:19:33.046021</ts>
    <user>U0NCTKEV8</user>
    <text>if you use protocols you can generally reify the protocol inline in the test, and outside of the test there is no effect</text>
  </message>
  <message>
    <ts>2017-07-21T16:19:34.046707</ts>
    <user>U5ZAJ15P0</user>
    <text>ah, so the latest defmethod will be used, overriding a previous definition?</text>
  </message>
  <message>
    <ts>2017-07-21T16:19:53.054521</ts>
    <user>U5ZAJ15P0</user>
    <text>that's a bit nasty</text>
  </message>
  <message>
    <ts>2017-07-21T16:19:54.054978</ts>
    <user>U051HUZLD</user>
    <text>_"hate a la carte" joke_</text>
  </message>
  <message>
    <ts>2017-07-21T16:19:59.057265</ts>
    <user>U0CHY4VNW</user>
    <text>&lt;@U0LGCREMU&gt; Online peace is a noble goal</text>
  </message>
  <message>
    <ts>2017-07-21T16:20:26.068824</ts>
    <user>U0BKWMG5B</user>
    <text>For that, I tend to use protocols. In Duct (which builds on Integrant), I call them "boundary protocols", as they define the I/O boundary of the system.</text>
  </message>
  <message>
    <ts>2017-07-21T16:20:29.070096</ts>
    <user>U5ZAJ15P0</user>
    <text>ah nevermind, got an answer by &lt;@U0NCTKEV8&gt;  :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T16:20:39.074555</ts>
    <user>U5ZAJ15P0</user>
    <text>oh, I'll check Duct</text>
  </message>
  <message>
    <ts>2017-07-21T16:20:45.077177</ts>
    <user>U0NCTKEV8</user>
    <text>uh, yes, but that is not what I meant</text>
  </message>
  <message>
    <ts>2017-07-21T16:20:46.077450</ts>
    <user>U0BKWMG5B</user>
    <text>For example: &lt;https://github.com/duct-framework/database.sql/blob/master/src/duct/database/sql.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:21:09.087403</ts>
    <user>U0BKWMG5B</user>
    <text>Instead of just returning the database spec, I wrap it in a record.</text>
  </message>
  <message>
    <ts>2017-07-21T16:21:38.099547</ts>
    <user>U0BKWMG5B</user>
    <text>This allows me to write a protocol against it, and I can mock out the protocol for tests using a tool like Shrubbery.</text>
  </message>
  <message>
    <ts>2017-07-21T16:21:57.107706</ts>
    <user>U0NCTKEV8</user>
    <text>each multi method has a dispatch table for behaviors, so say you want stick in a :my-special-mock, well that goes in the table associated with the multimethod, less likely to cause harm than actually replacing the dispatch, but still kind of a drag</text>
  </message>
  <message>
    <ts>2017-07-21T16:22:00.109083</ts>
    <user>U0BKWMG5B</user>
    <text>It's also useful for having a "local" service that fakes out cloud services or external APIs etc.</text>
  </message>
  <message>
    <ts>2017-07-21T16:22:36.124179</ts>
    <user>U5ZAJ15P0</user>
    <text>Yes that's exactly the sort of application I'm thinking. Two more projects to look at on my list :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-21T16:22:43.127712</ts>
    <user>U0BKWMG5B</user>
    <text>Duct builds on top of the ideas of Integrant. It's the vocabulary to Integrant's grammar. &lt;https://github.com/duct-framework/duct&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:22:47.129558</ts>
    <user>U0NCTKEV8</user>
    <text>(following the thread with &lt;@U0BKWMG5B&gt;) it looks like he uses protocols for some stuff, so maybe that is less of a problem</text>
  </message>
  <message>
    <ts>2017-07-21T16:23:41.152479</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; the last web framework I looked into was Pedestal. Do you have any opinions on it?</text>
  </message>
  <message>
    <ts>2017-07-21T16:23:56.158611</ts>
    <user>U0NCTKEV8</user>
    <text>at my last job we used component but had a team member who hated defrecords, so we more or less retro-fitted component to use multimethods instead (which is pretty easy to do) which is where my experience with the pain of mocking that kind of thing comes from</text>
  </message>
  <message>
    <ts>2017-07-21T16:25:47.206033</ts>
    <user>U0BKWMG5B</user>
    <text>I haven't use Pedestal in anger. Some ideas it has are good, but it feels more complex than what I need, and it's web-focused.</text>
  </message>
  <message>
    <ts>2017-07-21T16:26:03.212989</ts>
    <user>U0BKWMG5B</user>
    <text>Duct/Integrant are more generic</text>
  </message>
  <message>
    <ts>2017-07-21T16:36:38.487239</ts>
    <user>U0LGCREMU</user>
    <text>did i just kill a discussion?  ouch.</text>
  </message>
  <message>
    <ts>2017-07-21T16:38:31.535852</ts>
    <user>U2PGHFU5U</user>
    <text>Interesting discussion. At my work we use mount (mount.lite actually), but I always liked the IoC-pattern in OO, which I miss doing mount. It is nice that you do not have to pass state as parameters everywhere, and if you want to mock a state you can substitute state for a mock implementation. BUT I miss having a composition root responsible for composing modules, and seeing that you have to refactor because a module takes too many constructor parameters.</text>
  </message>
  <message>
    <ts>2017-07-21T16:39:11.553460</ts>
    <user>U0CME35FV</user>
    <text>&lt;@U5ZAJ15P0&gt; when you looking at mount, besides the docs, these little example apps may help you to see how it could be used: &lt;https://github.com/tolitius/stater&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:39:26.560073</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-21T16:44:12.681607</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; sorry, watching the rest of your talk and reading a bit of Duct's doc I realise this was a silly question. Duct seems more like an approach to structure an application around Integrant</text>
  </message>
  <message>
    <ts>2017-07-21T16:44:36.691904</ts>
    <user>U2PGHFU5U</user>
    <text>I find initializing state in one file like below (where a timbre appender is added) quite nice. I don't know what the equivalent would be for a Component application. Logging is a cross-cutting concern, so perhaps not really something you inject.

```
(ns blabla.logging
  "Logging setup for blabla."
  (:require [blabla.config :refer [config]]
            [clojurewerkz.elastisch.native :as es]
            [mount.lite :refer [defstate]]
            [taoensso.timbre :as log]
            [blabla.logging.elastic :as log-es]))


(log/handle-uncaught-jvm-exceptions!)

(defstate log-level
  :start (let [current-level (:level log/*config*)]
           (log/set-level! (:log-level config))
           current-level))

(defstate blacklist
  :start (when-not (:development config)
           (log/swap-config! update :ns-blacklist conj "io.pedestal.http.impl.*"))
  :stop (log/swap-config! update :ns-blacklist #(vec (remove #{"io.pedestal.http.impl.*"} %))))

(defstate elastic-client
  :start (let [{:keys [elastic-native-pair elastic-cluster-name]} config]
           (when elastic-native-pair
             (es/connect [elastic-native-pair] {"cluster.name" elastic-cluster-name})))
  :stop (when elastic-client
          (.close elastic-client)))

(defstate elastic-appender
  :start (when elastic-client
           (let [options {:base-doc {:app "blabla"
                                     :k8s {:namespace (:kubernetes-namespace config)}}
                          :mapping  log-es/mapping}]
             (log-es/add-elastic-appender! elastic-client "hd-logging" options)))
  :stop (log-es/remove-elastic-appender!))
```</text>
  </message>
  <message>
    <ts>2017-07-21T16:45:37.718310</ts>
    <user>U5ZAJ15P0</user>
    <text>Duct is a backbone, and all the web/else related logic is handled by other librairies, e.g. Compojure</text>
  </message>
  <message>
    <ts>2017-07-21T16:45:48.723163</ts>
    <user>U0BKWMG5B</user>
    <text>Right. It provides a template, a bunch of integrant-compatible libraries, and "modules" which are essentially pure functions that transform the Integrant configuration.</text>
  </message>
  <message>
    <ts>2017-07-21T16:46:32.741654</ts>
    <user>U0BKWMG5B</user>
    <text>Modules provide a way of automating gluing together libraries</text>
  </message>
  <message>
    <ts>2017-07-21T16:47:30.767502</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; do you have an example of how a module would work?</text>
  </message>
  <message>
    <ts>2017-07-21T16:48:08.784079</ts>
    <user>U0BKWMG5B</user>
    <text>An example, or an explanation?</text>
  </message>
  <message>
    <ts>2017-07-21T16:48:39.797879</ts>
    <user>U5ZAJ15P0</user>
    <text>explanation, or an explanatory example :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T16:49:12.812148</ts>
    <user>U0BKWMG5B</user>
    <text>Okay, let me find something quick…</text>
  </message>
  <message>
    <ts>2017-07-21T16:52:31.898120</ts>
    <user>U0BKWMG5B</user>
    <text>Actually, I wrote a blog post about this, which might be more useful: &lt;https://www.booleanknot.com/blog/2017/05/09/advancing-duct.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:53:18.917621</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; ah that's perfect, thank you!</text>
  </message>
  <message>
    <ts>2017-07-21T16:53:27.921734</ts>
    <user>U0BKWMG5B</user>
    <text>One module is `:duct.module/web`. That sets up a handler and middleware, and looks through the configuration for a web server. If it finds one, it connects the handler to the existing web server. If none exist, then it creates a new one.</text>
  </message>
  <message>
    <ts>2017-07-21T16:53:48.930200</ts>
    <user>U0BKWMG5B</user>
    <text>There's also: &lt;https://www.booleanknot.com/blog/2017/05/29/building-web-services-with-duct.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T16:54:18.942910</ts>
    <user>U0BKWMG5B</user>
    <text>The explanation I find myself often using for modules are web sessions that are stored in a SQL database.</text>
  </message>
  <message>
    <ts>2017-07-21T16:54:25.945856</ts>
    <user>U5ZAJ15P0</user>
    <text>how does it "find the web server" in the config? based on the name of popular web servers?</text>
  </message>
  <message>
    <ts>2017-07-21T16:54:31.948156</ts>
    <user>U5ZAJ15P0</user>
    <text>or a special key?</text>
  </message>
  <message>
    <ts>2017-07-21T16:54:55.958053</ts>
    <user>U0BKWMG5B</user>
    <text>Keyword inheritance. The `:duct.server.http/jetty` key is derived from `:duct.server/http`.</text>
  </message>
  <message>
    <ts>2017-07-21T16:55:21.969429</ts>
    <user>U0BKWMG5B</user>
    <text>So to find all the web servers in a Duct config, you just run `(ig/find-derived config :duct.server/http)`</text>
  </message>
  <message>
    <ts>2017-07-21T16:56:31.998957</ts>
    <user>U0BKWMG5B</user>
    <text>The idea is to use `derive` a little like a dictionary definition or a thesaurus. It allows us to describe what a keyword is, to give it some meaning.</text>
  </message>
  <message>
    <ts>2017-07-21T16:56:35.000844</ts>
    <user>U5ZAJ15P0</user>
    <text>keyword inheritance is just based on the name + namespace of the keywords? e.g. a keyword X inherits from a keyword Y if X's namespace is Y's namespace plus its name?</text>
  </message>
  <message>
    <ts>2017-07-21T16:57:02.012120</ts>
    <user>U0BKWMG5B</user>
    <text>No, it's its own thing. Any namespaced keyword can `derive` from any other.</text>
  </message>
  <message>
    <ts>2017-07-21T16:57:13.016424</ts>
    <user>U0BKWMG5B</user>
    <text>Namespaced keywords have multiple inheritance in Clojure.</text>
  </message>
  <message>
    <ts>2017-07-21T16:58:06.039102</ts>
    <user>U5ZAJ15P0</user>
    <text>ah, I wasn't familiar with Clojure's `clojure.core/derive` function. I'll look into it before bothering you further</text>
  </message>
  <message>
    <ts>2017-07-21T16:58:10.040927</ts>
    <user>U5ZAJ15P0</user>
    <text>Thanks!</text>
  </message>
  <message>
    <ts>2017-07-21T16:58:26.047682</ts>
    <user>U0BKWMG5B</user>
    <text>It's not often used, but I feel like it has some important niches</text>
  </message>
  <message>
    <ts>2017-07-21T16:58:59.061988</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;https://clojure.org/reference/multimethods&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T17:00:29.100963</ts>
    <user>U5ZAJ15P0</user>
    <text>mmh, so `derive` is effectful from what I gather</text>
  </message>
  <message>
    <ts>2017-07-21T17:01:00.114421</ts>
    <user>U5ZAJ15P0</user>
    <text>Where does it hold the relationship data between keywords? A global registry? I can't see it setting metadata on the keywords themselves</text>
  </message>
  <message>
    <ts>2017-07-21T17:01:58.139294</ts>
    <user>U0BKWMG5B</user>
    <text>A global registry. Derive *can* be used functionally if you supply a hierarchy, but mostly it's used globally.</text>
  </message>
  <message>
    <ts>2017-07-21T17:02:12.144841</ts>
    <user>U0BKWMG5B</user>
    <text>To my mind it's like vars, or specs.</text>
  </message>
  <message>
    <ts>2017-07-21T17:02:22.149050</ts>
    <user>U5ZAJ15P0</user>
    <text>Oh, I think I get what you meant by a "grammar" then. You use keywords + derive to build a sort of ontology?</text>
  </message>
  <message>
    <ts>2017-07-21T17:02:29.152086</ts>
    <user>U0BKWMG5B</user>
    <text>Exactly :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T17:03:44.183801</ts>
    <user>U0BKWMG5B</user>
    <text>Jetty, for instance, is a HTTP server that supports synchronous and asynchronous handlers. So we could write:
```
(derive :duct.server.http/jetty :duct.server/http)
(derive :duct.server.http/jetty :duct.server.http/async)
(derive :duct.server.http/jetty :duct.server.http/sync)
```</text>
  </message>
  <message>
    <ts>2017-07-21T17:03:59.189742</ts>
    <user>U5ZAJ15P0</user>
    <text>that's brilliant</text>
  </message>
  <message>
    <ts>2017-07-21T17:04:18.197229</ts>
    <user>U0BKWMG5B</user>
    <text>If Integrant is the "grammar", Duct is attempting to build a "vocabulary".</text>
  </message>
  <message>
    <ts>2017-07-21T17:04:44.208065</ts>
    <user>U5ZAJ15P0</user>
    <text>So duct is an ontology for configuration + tools that understand and work with this ontology</text>
  </message>
  <message>
    <ts>2017-07-21T17:05:13.219237</ts>
    <user>U0BKWMG5B</user>
    <text>Right. That, plus a way of transforming configurations via a preprocessing "prep" stage.</text>
  </message>
  <message>
    <ts>2017-07-21T17:05:20.222295</ts>
    <user>U0BKWMG5B</user>
    <text>Basically query+transformation</text>
  </message>
  <message>
    <ts>2017-07-21T17:05:58.237501</ts>
    <user>U5ZAJ15P0</user>
    <text>I'll check out Duct's code if it's not too complex</text>
  </message>
  <message>
    <ts>2017-07-21T17:06:08.241266</ts>
    <user>U5ZAJ15P0</user>
    <text>That's super exciting</text>
  </message>
  <message>
    <ts>2017-07-21T17:06:12.243156</ts>
    <user>U0BKWMG5B</user>
    <text>Start with duct/core</text>
  </message>
  <message>
    <ts>2017-07-21T17:06:34.251976</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;https://github.com/duct-framework/core/blob/master/src/duct/core.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T17:07:19.269128</ts>
    <user>U0BKWMG5B</user>
    <text>Essentially Duct tries to solve the problem of wiring up libraries. Even something seemingly trivial, like storing sessions in a SQL database, requires a lot of wiring.</text>
  </message>
  <message>
    <ts>2017-07-21T17:07:33.274446</ts>
    <user>U0BKWMG5B</user>
    <text>You need a database migration to create the SQL table to store the sessions</text>
  </message>
  <message>
    <ts>2017-07-21T17:07:38.276521</ts>
    <user>U0BKWMG5B</user>
    <text>You need a DB connection</text>
  </message>
  <message>
    <ts>2017-07-21T17:07:40.277203</ts>
    <user>U0BKWMG5B</user>
    <text>Middleware</text>
  </message>
  <message>
    <ts>2017-07-21T17:07:46.279581</ts>
    <user>U0BKWMG5B</user>
    <text>Session storage protocol</text>
  </message>
  <message>
    <ts>2017-07-21T17:07:58.283993</ts>
    <user>U0BKWMG5B</user>
    <text>And a worker process to clean up old sessions</text>
  </message>
  <message>
    <ts>2017-07-21T17:08:52.304703</ts>
    <user>U0BKWMG5B</user>
    <text>Very hard to do with a normal library, but a module could ask questions like "Where do I register a new periodic cleanup job?" "Where do I add new middleware?" "Where can I add a database migration?"</text>
  </message>
  <message>
    <ts>2017-07-21T17:10:15.336311</ts>
    <user>U5ZAJ15P0</user>
    <text>I guess it's a form of convention over configuration</text>
  </message>
  <message>
    <ts>2017-07-21T17:10:42.346658</ts>
    <user>U5ZAJ15P0</user>
    <text>But in the sense that with Duct you establish a language to talk about your configuration, deriving Duct concepts</text>
  </message>
  <message>
    <ts>2017-07-21T17:10:56.352138</ts>
    <user>U5ZAJ15P0</user>
    <text>then modules can use this language to understand your configuration and act on it</text>
  </message>
  <message>
    <ts>2017-07-21T17:12:05.378363</ts>
    <user>U0BKWMG5B</user>
    <text>Right. It borrows a lot from tools like Rails, but whereas Rails used the filesystem as the basis for its convention, Duct uses an immutable data structure.</text>
  </message>
  <message>
    <ts>2017-07-21T17:12:06.378916</ts>
    <user>U5ZAJ15P0</user>
    <text>Instead of following some predefined key structure for your configuration, you just need to follow an ontology/grammar</text>
  </message>
  <message>
    <ts>2017-07-21T17:12:24.385976</ts>
    <user>U0BKWMG5B</user>
    <text>Exactly :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T17:13:09.402830</ts>
    <user>U0BKWMG5B</user>
    <text>It's still early days, but that's ultimately where Duct is going.</text>
  </message>
  <message>
    <ts>2017-07-21T17:13:13.404269</ts>
    <user>U5ZAJ15P0</user>
    <text>Are there any other projects that you know of which take this approach? Obviously ontologies are quite talked about in the context of the semantic web / knowledge bases / etc, but I think this is the first time I've seen it applied to a dev tool</text>
  </message>
  <message>
    <ts>2017-07-21T17:15:38.458767</ts>
    <user>U0BKWMG5B</user>
    <text>Arachne is another of Duct's inspirations</text>
  </message>
  <message>
    <ts>2017-07-21T17:16:13.471858</ts>
    <user>U0BKWMG5B</user>
    <text>It takes a similar approach, but I don't think it emphasises the semantic ontology angle</text>
  </message>
  <message>
    <ts>2017-07-21T17:16:56.487621</ts>
    <user>U0BKWMG5B</user>
    <text>And rather than a data structure, it uses a bunch of scripting functions to create an in-memory datomic database, which is then translated into a Component system.</text>
  </message>
  <message>
    <ts>2017-07-21T17:17:04.490288</ts>
    <user>U0BKWMG5B</user>
    <text>Duct IMO is a little simpler.</text>
  </message>
  <message>
    <ts>2017-07-21T17:20:03.554783</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; thanks for taking the time to explain this out! I'll read up on Duct/Integrant. The theory sounds great; let's see if it holds up in practice :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-21T17:20:25.562889</ts>
    <user>U0BKWMG5B</user>
    <text>No problem - let me know what you think</text>
  </message>
  <message>
    <ts>2017-07-21T17:21:12.579676</ts>
    <user>U0BKWMG5B</user>
    <text>The two blog posts I linked, especially the later API-focused one, should give you a good idea of how to start.</text>
  </message>
  <message>
    <ts>2017-07-21T17:22:56.615854</ts>
    <user>U087U9YG3</user>
    <text>If you want to evaluate mount/component/integrant, I'd recommend starting by just reading them</text>
  </message>
  <message>
    <ts>2017-07-21T17:23:09.620374</ts>
    <user>U087U9YG3</user>
    <text>they're all in the 300-500 LoC range</text>
  </message>
  <message>
    <ts>2017-07-21T17:23:42.632220</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; I think I am going to have some fun with `clojure.core/derive` itself too. Such a neat little function</text>
  </message>
  <message>
    <ts>2017-07-21T17:24:37.652131</ts>
    <user>U0BKWMG5B</user>
    <text>I wouldn't say it's a function that should commonly be used; it's got niche functionality. But I also think it's underused. Not many people seem to have heard of it.</text>
  </message>
  <message>
    <ts>2017-07-21T17:25:11.664235</ts>
    <user>U087U9YG3</user>
    <text>I mean there are things you can only learn by using them in a large project for a long time, or talking to someone who has, but I think reading them is a reasonable starting point</text>
  </message>
  <message>
    <ts>2017-07-21T17:59:54.337998</ts>
    <user>U5ZAJ15P0</user>
    <text>Yep that's what I intend to do now that I've seen they're pretty concise. Thanks for the advice!</text>
  </message>
  <message>
    <ts>2017-07-21T18:35:57.910988</ts>
    <user>U050MP39D</user>
    <text>if I'm understanding your example correctly, component also wires everything together in one file like you prefer</text>
  </message>
  <message>
    <ts>2017-07-21T18:36:47.922423</ts>
    <user>U050MP39D</user>
    <text>generally you have a 'system' or whatever ns with a big map that looks like 
```
(defn example-system [config-options]
  (let [{:keys [host port]} config-options]
    (component/system-map
      :db (new-database host port)
      :scheduler (new-scheduler)
      :app (component/using
             (example-component config-options)
             {:database  :db
              :scheduler :scheduler}))))
```</text>
  </message>
  <message>
    <ts>2017-07-21T18:58:03.212982</ts>
    <user>U3SG7RX7A</user>
    <text>Aaand don't forget the new-new kid on the block: `deferst`:
&lt;https://github.com/employeerepublic/deferst&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T18:58:46.223193</ts>
    <user>U2PGHFU5U</user>
    <text>Yes that is what I am missing from Mount :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-21T18:58:57.225707</ts>
    <user>U2PGHFU5U</user>
    <text>Your `example-system` is a Composition Root</text>
  </message>
  <message>
    <ts>2017-07-21T18:59:09.228224</ts>
    <user>U2PGHFU5U</user>
    <text>&lt;http://blog.ploeh.dk/2011/07/28/CompositionRoot/&gt;</text>
  </message>
  <message>
    <ts>2017-07-21T19:11:10.380191</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; Out of curiosity, why did you make the choice of using multimethods for Integrant?</text>
  </message>
  <message>
    <ts>2017-07-21T19:13:03.402106</ts>
    <user>U5ZAJ15P0</user>
    <text>It seems to me (as a clojure beginner) that it introduces a form of global that makes stubbing a bit harder</text>
  </message>
  <message>
    <ts>2017-07-21T19:13:34.408542</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g. wouldn't it be nicer to pass a second argument to `ig/init`: a map from keys to implementations?</text>
  </message>
  <message>
    <ts>2017-07-21T19:13:53.412340</ts>
    <user>U5ZAJ15P0</user>
    <text>I am sure you had a good reason for using multimethods and not the approach I'm suggesting, but I would like to understand it</text>
  </message>
  <message>
    <ts>2017-07-21T19:24:31.533378</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; is it related to hot-reloading?</text>
  </message>
  <message>
    <ts>2017-07-21T19:34:57.644169</ts>
    <user>U11BV7MTK</user>
    <text>do clojure files have to have a namespace?</text>
  </message>
  <message>
    <ts>2017-07-21T19:35:28.649723</ts>
    <user>U11BV7MTK</user>
    <text>and if so, should tooling not assume that there will be a namespace form at the top?</text>
  </message>
  <message>
    <ts>2017-07-21T19:37:11.667488</ts>
    <user>U0NCTKEV8</user>
    <text>they don't</text>
  </message>
  <message>
    <ts>2017-07-21T19:37:23.669621</ts>
    <user>U0NCTKEV8</user>
    <text>and you can put other things before the namespace</text>
  </message>
  <message>
    <ts>2017-07-21T19:37:28.670490</ts>
    <user>U0NCTKEV8</user>
    <text>(the ns form)</text>
  </message>
  <message>
    <ts>2017-07-21T19:37:39.672345</ts>
    <user>U11BV7MTK</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-21T19:37:56.675286</ts>
    <user>U11BV7MTK</user>
    <text>never really know where to go to find the hard requirements on these things so thanks for the info</text>
  </message>
  <message>
    <ts>2017-07-21T19:38:02.676291</ts>
    <user>U0NCTKEV8</user>
    <text>it is super common to have the ns form be the first thing, so some tooling does assume it</text>
  </message>
  <message>
    <ts>2017-07-21T19:38:17.678815</ts>
    <user>U11BV7MTK</user>
    <text>ok. i was not positive if it was convention or spec</text>
  </message>
  <message>
    <ts>2017-07-21T19:38:36.682031</ts>
    <user>U0NCTKEV8</user>
    <text>so some tooling requires it, but clojure does not</text>
  </message>
  <message>
    <ts>2017-07-21T19:39:01.686028</ts>
    <user>U11BV7MTK</user>
    <text>well, if possible, i'd like to conform to clojure requirements and not some subset</text>
  </message>
  <message>
    <ts>2017-07-21T19:40:48.703130</ts>
    <user>U11BV7MTK</user>
    <text>there were some namespace cache changes in CIDER that seems to affect files without a ns form so wanted to see what the requirements were. thanks a bunch</text>
  </message>
  <message>
    <ts>2017-07-21T23:27:58.017472</ts>
    <user>U0567Q30W</user>
    <text>@puredanger Are your deps slides available anywhere, until the talk is online?</text>
  </message>
  <message>
    <ts>2017-07-21T23:28:15.018590</ts>
    <user>U0567Q30W</user>
    <text>I mean &lt;@U064X3EF3&gt; ^^</text>
  </message>
  <message>
    <ts>2017-07-22T01:18:30.442990</ts>
    <user>U61KCTX8S</user>
    <text>hi all, good morning</text>
  </message>
  <message>
    <ts>2017-07-22T01:18:47.443981</ts>
    <user>U61KCTX8S</user>
    <text>how do I check wether a process is alive?</text>
  </message>
  <message>
    <ts>2017-07-22T01:18:57.444465</ts>
    <user>U61KCTX8S</user>
    <text>i mean i launched a subprocess</text>
  </message>
  <message>
    <ts>2017-07-22T01:19:03.444825</ts>
    <user>U61KCTX8S</user>
    <text>whether with sh or conch</text>
  </message>
  <message>
    <ts>2017-07-22T01:19:19.445802</ts>
    <user>U61KCTX8S</user>
    <text>and i'd like to know whether it's finished or not</text>
  </message>
  <message>
    <ts>2017-07-22T01:52:53.552084</ts>
    <user>U064X3EF3</user>
    <text>I'll put some stuff out early next week - slides, code, and some more info</text>
  </message>
  <message>
    <ts>2017-07-22T02:16:11.629806</ts>
    <user>U1WMJ5CQ2</user>
    <text>&lt;@U61KCTX8S&gt; `sh` is a blocking call:
```
(sh "ls")
(prn "finished")
```</text>
  </message>
  <message>
    <ts>2017-07-22T02:26:51.663556</ts>
    <user>U064X3EF3</user>
    <text>want to have a little more context than just dumping the slides. haven't had a chance to do all that stuff due to the conf and today's travel home.</text>
  </message>
  <message>
    <ts>2017-07-22T02:29:35.672046</ts>
    <user>U61KCTX8S</user>
    <text>i did it like:</text>
  </message>
  <message>
    <ts>2017-07-22T02:29:51.672756</ts>
    <user>U61KCTX8S</user>
    <text>(defmacro try-noooo  "Returns the result of evaluating e, or :noooo if it throws an exception."  [e]  `(try ~e (catch java.lang.Exception _# :noooo)))(defn is-proc-running[p] (if (= (try-noooo (.exitValue  p ) )   :noooo) true false))</text>
  </message>
  <message>
    <ts>2017-07-22T02:30:39.676028</ts>
    <user>U61KCTX8S</user>
    <text>sorry about the formatting, havent figured this out yet on slack</text>
  </message>
  <message>
    <ts>2017-07-22T02:33:32.685974</ts>
    <user>U61KCTX8S</user>
    <text>the .exit-Value call throws an exception if the process is still running</text>
  </message>
  <message>
    <ts>2017-07-22T02:33:39.686388</ts>
    <user>U61KCTX8S</user>
    <text>that's the trick</text>
  </message>
  <message>
    <ts>2017-07-22T03:06:51.794654</ts>
    <user>U1WMJ5CQ2</user>
    <text>&lt;@U61KCTX8S&gt; 
If you use the built-in future to handle async, you can do this:
```
(def process-future
  (future (sh "./my-script.sh")))

(when-not (future-done? process-future)
  (prn "still running...."))
```</text>
  </message>
  <message>
    <ts>2017-07-22T03:15:52.823329</ts>
    <user>U0BKWMG5B</user>
    <text>hmaurer: A lot of the time stubbing isn't necessary; only for keys that connect to an external I/O source. Also, polymorphism is more convenient than a lookup table, and it encourages using the same key for the same behaviour.</text>
  </message>
  <message>
    <ts>2017-07-22T03:16:59.826948</ts>
    <user>U0BKWMG5B</user>
    <text>It's important for Duct/Integrant's design around the idea of a vocabulary that keywords have the same meaning.</text>
  </message>
  <message>
    <ts>2017-07-22T03:29:32.869284</ts>
    <user>U0BKWMG5B</user>
    <text>Also, it's more useful to stub the I/O source you're passing around than the multimethod. e.g. you might pass your database to another function as an argument. You need to be able to stub that directly.</text>
  </message>
  <message>
    <ts>2017-07-22T03:29:42.869790</ts>
    <user>U0BKWMG5B</user>
    <text>Hence records and protocols.</text>
  </message>
  <message>
    <ts>2017-07-22T04:12:40.017668</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U1WMJ5CQ2&gt; that would do the trick, but i also need a timeout</text>
  </message>
  <message>
    <ts>2017-07-22T04:22:12.049168</ts>
    <user>U1WMJ5CQ2</user>
    <text>&lt;@U61KCTX8S&gt; 
```
(let [result (deref (future (sh "./my-script.sh")) 100 :timeout)]
  (if (= result :timeout)
    (prn "time limit exceeded.")
    (prn "process exited with: " result)))
```</text>
  </message>
  <message>
    <ts>2017-07-22T04:22:59.051779</ts>
    <user>U1WMJ5CQ2</user>
    <text>&lt;https://clojuredocs.org/clojure.core/deref&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T06:07:16.416284</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; I see; I think I am misunderstanding something. Let's put it into context. In some cases I might want to use a different config during testing, which is very easy to do with Integrant (just load a different edn or merge some keys in the loaded config before calling `ig/init`). However, in other cases I might want to stub the implementation. For example, I might be using Redis as a kv store, but during testing I might want to stub it for my own in-memory version.</text>
  </message>
  <message>
    <ts>2017-07-22T06:08:03.418819</ts>
    <user>U5ZAJ15P0</user>
    <text>In that case, I wouldn't have a `:redis` key in my configuration, but likely a `:cache` key, or `:kv-store` key, which obeys a kv-store protocol</text>
  </message>
  <message>
    <ts>2017-07-22T06:08:51.421462</ts>
    <user>U5ZAJ15P0</user>
    <text>In my default, production implementation, the multimethod would return a Redis connector wrapped inside a record obeying the kv-store protocol</text>
  </message>
  <message>
    <ts>2017-07-22T06:09:02.421990</ts>
    <user>U5ZAJ15P0</user>
    <text>Which I think is what you're describing as "boundaries" in Duct</text>
  </message>
  <message>
    <ts>2017-07-22T06:09:17.422879</ts>
    <user>U5ZAJ15P0</user>
    <text>However I am still unclear as to how I would swap that implementation for my own in-memory version during testing</text>
  </message>
  <message>
    <ts>2017-07-22T06:09:31.423501</ts>
    <user>U5ZAJ15P0</user>
    <text>I suspect this is due to my lack of knowledge on Clojure itself, rather than Integrant/Duct…</text>
  </message>
  <message>
    <ts>2017-07-22T06:11:35.430354</ts>
    <user>U61KCTX8S</user>
    <text>you're the master!</text>
  </message>
  <message>
    <ts>2017-07-22T06:12:39.434205</ts>
    <user>U61KCTX8S</user>
    <text>that's far more elegant than my solution</text>
  </message>
  <message>
    <ts>2017-07-22T06:13:48.438313</ts>
    <user>U0567Q30W</user>
    <text>Sure, no problem - thanks!</text>
  </message>
  <message>
    <ts>2017-07-22T06:26:38.480752</ts>
    <user>U3L6TFEJF</user>
    <text>I'd love to hear more about this as well, I'm going to try out Integrant in a project in the coming weeks and I've been wondering the same thing</text>
  </message>
  <message>
    <ts>2017-07-22T06:30:25.493730</ts>
    <user>U0BKWMG5B</user>
    <text>So there are two ways to do this.</text>
  </message>
  <message>
    <ts>2017-07-22T06:30:49.495203</ts>
    <user>U0BKWMG5B</user>
    <text>First, if you're testing a single key, then you can use `init-key` directly and pass the stubbed/mocked connections.</text>
  </message>
  <message>
    <ts>2017-07-22T06:32:09.500140</ts>
    <user>U0BKWMG5B</user>
    <text>For example, say you have a key `:foo.handler/user` that takes a database option. You could test it with:
```
(ig/init-key :foo.handler/user {:db (-&amp;gt;StubbedDatabase)})
```</text>
  </message>
  <message>
    <ts>2017-07-22T06:32:46.502336</ts>
    <user>U0BKWMG5B</user>
    <text>Because the database isn't accessed directly, but via protocol methods, we can create a stubbed or mocked version with the same interface. Shrubbery is a test tool that streamlines this process.</text>
  </message>
  <message>
    <ts>2017-07-22T06:33:27.504849</ts>
    <user>U0BKWMG5B</user>
    <text>If you're testing the configuration in a wider context, then you can take advantage of keyword inheritance.</text>
  </message>
  <message>
    <ts>2017-07-22T06:34:31.508214</ts>
    <user>U0BKWMG5B</user>
    <text>For example, say you had a configuration like:
```
{:duct.database.sql/hikaricp
 {:jdbc-url ...}
 :foo.handler/user
 {:db #ig/ref :duct.database.sql/hikaricp}}
```</text>
  </message>
  <message>
    <ts>2017-07-22T06:34:55.509469</ts>
    <user>U0BKWMG5B</user>
    <text>One feature of Integrant is that you can reference *derived* keys, so you could write the above as:</text>
  </message>
  <message>
    <ts>2017-07-22T06:35:19.510932</ts>
    <user>U0BKWMG5B</user>
    <text>```
{:duct.database.sql/hikaricp
 {:jdbc-url ...}
 :foo.handler/user
 {:db #ig/ref :duct.database/sql}}
```</text>
  </message>
  <message>
    <ts>2017-07-22T06:36:06.513519</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; oh, so in that case you wouldn't swap any implementation, you would simply instruct the system to use a different implementation based on the config (different derived key)</text>
  </message>
  <message>
    <ts>2017-07-22T06:36:25.514704</ts>
    <user>U0BKWMG5B</user>
    <text>So if you want to stub out the key directly, then change the database key to a fake one that derives from the same base:
```
(derive :duct.database.sql/fake :duct.database/sql)
```</text>
  </message>
  <message>
    <ts>2017-07-22T06:37:17.517671</ts>
    <user>U5ZAJ15P0</user>
    <text>Thank you, I'll try both of those approaches :slightly_smiling_face: I had a follow up question but you answered it. It was going to be: "in your talk you mention how you can instantiate two systems with different configurations, but how can I instantiate two systems with different implementations?"</text>
  </message>
  <message>
    <ts>2017-07-22T06:37:20.517841</ts>
    <user>U0BKWMG5B</user>
    <text>Right: you could update the configuration to replace the real database with a fake one:
```
{:duct.database.sql/fake
 {:jdbc-url ...}
 :foo.handler/user
 {:db #ig/ref :duct.database/sql}}
```</text>
  </message>
  <message>
    <ts>2017-07-22T06:37:36.518852</ts>
    <user>U5ZAJ15P0</user>
    <text>From what I gather the answer to this would be "you only have one implementation per keyword; you just use a different config"</text>
  </message>
  <message>
    <ts>2017-07-22T06:38:11.520944</ts>
    <user>U0BKWMG5B</user>
    <text>Right. Just take the base config and alter it with `assoc`. Or use `duct.core/merge-configs` to merge in new options.</text>
  </message>
  <message>
    <ts>2017-07-22T06:38:42.522634</ts>
    <user>U0BKWMG5B</user>
    <text>It effectively amounts to the same thing.</text>
  </message>
  <message>
    <ts>2017-07-22T06:39:15.524452</ts>
    <user>U0BKWMG5B</user>
    <text>You *could* also use `with-redefs` to redefine the `init-key` multimethod, but since that's not thread-safe I'd advise avoiding that route.</text>
  </message>
  <message>
    <ts>2017-07-22T06:39:46.526086</ts>
    <user>U5ZAJ15P0</user>
    <text>Thanks for the explanation! So the gist is that I was finding it annoying to swap implementation due to multimethods, but that's intentional because under your design you *should not* swap implementations</text>
  </message>
  <message>
    <ts>2017-07-22T06:40:54.529936</ts>
    <user>U0BKWMG5B</user>
    <text>Right. I mean, in theory it might be good for testing, but in practice I think it makes more sense to substitute keys in the configuration, rather than make the config-&amp;gt;implementation bridge dynamic in some fashion</text>
  </message>
  <message>
    <ts>2017-07-22T06:41:20.531332</ts>
    <user>U0BKWMG5B</user>
    <text>It also makes it explicit where you're stubbing/mocking.</text>
  </message>
  <message>
    <ts>2017-07-22T06:43:25.538435</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; thanks for taking the time to explain this out. Once I understand Integrant/Duct better I'll try to give back by writing some doc :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-22T06:44:38.542252</ts>
    <user>U0BKWMG5B</user>
    <text>Thanks! But if you like, just some feedback once you've gotten to use it a little would be  useful. The more use-cases I know about, the more useful I can make the library.</text>
  </message>
  <message>
    <ts>2017-07-22T06:46:23.548143</ts>
    <user>U5ZAJ15P0</user>
    <text>Certainly</text>
  </message>
  <message>
    <ts>2017-07-22T06:51:36.566364</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! What is the preferred way to do input payload validation for a json api in Clojure? If possible a solution that offers both input validation and machine-readable errors to be consumed by the client. Hopefully I won't start a 40min heated debate like yesterday :smile:</text>
  </message>
  <message>
    <ts>2017-07-22T06:55:10.578801</ts>
    <user>U3L6TFEJF</user>
    <text>Just adding stuff from this conversation to the readme / wiki would be helpful, because as far as I could see the questions are not addressed on Github at the moment</text>
  </message>
  <message>
    <ts>2017-07-22T06:55:32.580096</ts>
    <user>U3L6TFEJF</user>
    <text>sort of "Best practices" for stubbing / mocking with Integrant</text>
  </message>
  <message>
    <ts>2017-07-22T06:55:50.581141</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3L6TFEJF&gt; yep that would be great</text>
  </message>
  <message>
    <ts>2017-07-22T06:56:50.584394</ts>
    <user>U051HUZLD</user>
    <text>I'd read one, though :opieop: </text>
  </message>
  <message>
    <ts>2017-07-22T07:18:19.664302</ts>
    <user>U0BKWMG5B</user>
    <text>Point taken, I'll put together something for the Duct docs.</text>
  </message>
  <message>
    <ts>2017-07-22T07:19:41.668683</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; are you using Duct in production?</text>
  </message>
  <message>
    <ts>2017-07-22T07:23:14.680801</ts>
    <user>U0BKWMG5B</user>
    <text>The Integrant version? Not yet, or at least it's not *running* in production. I am working on an app that will be running in production in a couple of months, though.</text>
  </message>
  <message>
    <ts>2017-07-22T07:49:07.775731</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; Another question… What would be the preferred way to reference some environment variables in the config? It seems to be like an EDN tag would be neat, e.g. `#ig/env "DATABASE_PASSWORD"`. Do you have an existing option? I guess I could merge in the relevant config from env vars</text>
  </message>
  <message>
    <ts>2017-07-22T07:50:34.781202</ts>
    <user>U0BKWMG5B</user>
    <text>An edn tag would be neat, and in Duct it's called `#duct/env`.</text>
  </message>
  <message>
    <ts>2017-07-22T07:51:08.783421</ts>
    <user>U0BKWMG5B</user>
    <text>If you put that in your main `config.edn`, then you can always override them in `dev.edn` or `local.edn`.</text>
  </message>
  <message>
    <ts>2017-07-22T07:51:36.785018</ts>
    <user>U5ZAJ15P0</user>
    <text>Oh I hadn't even realised Duct had this functionality; I am focussing on Integrant's doc atm. Brilliant</text>
  </message>
  <message>
    <ts>2017-07-22T07:51:58.786275</ts>
    <user>U0BKWMG5B</user>
    <text>Certain modules also have defaults, e.g. `:duct.module/sql` uses `JDBC_DATABASE_URL` and `DATABASE_URL` automatically, and `:duct.module/web` uses `PORT` for the port number.</text>
  </message>
  <message>
    <ts>2017-07-22T07:53:22.791340</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U5ZAJ15P0&gt; There are a few solutions. Compojure-API can use Schema or Spec. My own Ataraxy has spec validation in the latest version. There are also various validation and coercion libraries, but I think the most common approaches are Schema or Spec.</text>
  </message>
  <message>
    <ts>2017-07-22T07:54:00.793767</ts>
    <user>U0BKWMG5B</user>
    <text>Spec isn't designed around coercion so much, so I'm not sure how well it could handle that.</text>
  </message>
  <message>
    <ts>2017-07-22T08:19:07.893516</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; on the topic of loading env vars, maybe it would be neat if one was allowed to extended integrant with custom readers?</text>
  </message>
  <message>
    <ts>2017-07-22T08:19:35.895206</ts>
    <user>U5ZAJ15P0</user>
    <text>oh hang on; I just looked at Integrant's code and it's already the case</text>
  </message>
  <message>
    <ts>2017-07-22T08:19:37.895340</ts>
    <user>U0BKWMG5B</user>
    <text>Take a look at read-config</text>
  </message>
  <message>
    <ts>2017-07-22T08:19:43.895689</ts>
    <user>U0BKWMG5B</user>
    <text>Yep :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-22T08:19:45.895781</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;https://github.com/weavejester/integrant/blob/master/src/integrant/core.cljc#L85&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T08:20:28.898605</ts>
    <user>U0BKWMG5B</user>
    <text>Though in duct someone pointed out that the readers don't persist though includes, so that needs to be fixed.</text>
  </message>
  <message>
    <ts>2017-07-22T08:21:24.902185</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; what do you mean by that?</text>
  </message>
  <message>
    <ts>2017-07-22T08:22:56.908265</ts>
    <user>U0BKWMG5B</user>
    <text>Duct adds a :duct.core/include key that allows a config to pull in other configs from the classpath in the "prep" stage</text>
  </message>
  <message>
    <ts>2017-07-22T08:23:26.910194</ts>
    <user>U0BKWMG5B</user>
    <text>But prep doesn't know about the custom readers.</text>
  </message>
  <message>
    <ts>2017-07-22T08:24:44.915156</ts>
    <user>U0BKWMG5B</user>
    <text>I'm also considering better ways of performing an include.</text>
  </message>
  <message>
    <ts>2017-07-22T08:29:47.933160</ts>
    <user>U055NJ5CC</user>
    <text>&lt;@U5ZAJ15P0&gt; wrote a post about the coercion &amp;amp; error messages some time ago: &lt;http://www.metosin.fi/blog/clojure-spec-with-ring-and-swagger/&gt;.</text>
  </message>
  <message>
    <ts>2017-07-22T08:36:26.958210</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-22T08:41:24.977459</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; another question… Is there a way to "inherit" from a config? For example, let's say I have a "database" config, and I want to create two services whose configs are slight twist over the general "database" config</text>
  </message>
  <message>
    <ts>2017-07-22T08:41:41.978562</ts>
    <user>U5ZAJ15P0</user>
    <text>a bit like your `:adapter/jetty` example on the Integrant readme</text>
  </message>
  <message>
    <ts>2017-07-22T08:42:10.980605</ts>
    <user>U5ZAJ15P0</user>
    <text>except that you replicate the config (port and handle) under both keys, whereas I would like to share a config block and override some bits</text>
  </message>
  <message>
    <ts>2017-07-22T08:42:13.980839</ts>
    <user>U5ZAJ15P0</user>
    <text>if that makes any sense</text>
  </message>
  <message>
    <ts>2017-07-22T08:42:27.981837</ts>
    <user>U5ZAJ15P0</user>
    <text>(theoretical question anyway, I don't have a specific usecase)</text>
  </message>
  <message>
    <ts>2017-07-22T08:42:51.983407</ts>
    <user>U0BKWMG5B</user>
    <text>Not currently, unless you modify the config with either a module or directly after it's loaded.</text>
  </message>
  <message>
    <ts>2017-07-22T08:43:16.985082</ts>
    <user>U5ZAJ15P0</user>
    <text>So I would need a module that knows about those keys and performs a merge?</text>
  </message>
  <message>
    <ts>2017-07-22T09:07:01.084388</ts>
    <user>U1B0DFD25</user>
    <text>I'm using integrant-repl and reading config from `resources` folder in my preparer function (`(read-config (io/resource "config.edn"))`) and yet it won't pick up new values for mongodb host when I change them, forcing me to stop and start the REPL. Does this ring a bell to anyone? Any common gotchas?</text>
  </message>
  <message>
    <ts>2017-07-22T09:13:52.114396</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; ^</text>
  </message>
  <message>
    <ts>2017-07-22T09:37:17.215565</ts>
    <user>U5ZAJ15P0</user>
    <text>Quick question: how can I pass a static function around? E.g. if I try to pass `System/getenv` around I get `Unable to find static field: getenv in class java.lang.System`</text>
  </message>
  <message>
    <ts>2017-07-22T09:37:28.216294</ts>
    <user>U5ZAJ15P0</user>
    <text>(but `(System/getenv "foobar")` works)</text>
  </message>
  <message>
    <ts>2017-07-22T09:37:48.217703</ts>
    <user>U5ZAJ15P0</user>
    <text>I could pass `#(System/getenv %)` around, but I assume there is a simpler way</text>
  </message>
  <message>
    <ts>2017-07-22T09:44:02.245466</ts>
    <user>U051SS2EU</user>
    <text>that's a static method, methods unlike functions are not first class objects supported by the vm</text>
  </message>
  <message>
    <ts>2017-07-22T09:44:20.246781</ts>
    <user>U051SS2EU</user>
    <text>you can't pass something as an argument that can't be put on the stack</text>
  </message>
  <message>
    <ts>2017-07-22T09:44:49.248653</ts>
    <user>U051SS2EU</user>
    <text>that's why you need to create a function, which is an object (with a static method that gets called if you apply it)</text>
  </message>
  <message>
    <ts>2017-07-22T09:47:02.258174</ts>
    <user>U051SS2EU</user>
    <text>so tl;dr there isn't a simpler way, that's the way you do it</text>
  </message>
  <message>
    <ts>2017-07-22T09:47:56.262390</ts>
    <user>U053XQP4S</user>
    <text>&lt;@U5ZAJ15P0&gt; you could check `memfn` as well &lt;https://clojuredocs.org/clojure.core/memfn&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T09:49:01.267377</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U053XQP4S&gt; that doesn't work with static methods</text>
  </message>
  <message>
    <ts>2017-07-22T09:49:25.269275</ts>
    <user>U051SS2EU</user>
    <text>and it's not any more succinct or efficient than creating a lambda in most cases</text>
  </message>
  <message>
    <ts>2017-07-22T09:49:42.270600</ts>
    <user>U051SS2EU</user>
    <text>(that's what it actually does, it creates a function)</text>
  </message>
  <message>
    <ts>2017-07-22T09:50:52.276009</ts>
    <user>U053XQP4S</user>
    <text>oh right, my bad</text>
  </message>
  <message>
    <ts>2017-07-22T09:50:54.276173</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; ah I see; I thought there might be something like that going on</text>
  </message>
  <message>
    <ts>2017-07-22T10:23:30.432597</ts>
    <user>U6DBQRAHM</user>
    <text>hi all, i am trying to understand how `reduce` works in the following example:
```
user=&amp;gt; (reduce str (repeat 3 "str"))
"strstrstr"
```
i don't understand why this returns what it does. can someone break down what `reduce` is doing here?</text>
  </message>
  <message>
    <ts>2017-07-22T10:27:26.451295</ts>
    <user>U11BV7MTK</user>
    <text>&lt;@U6DBQRAHM&gt; head to &lt;#C053AK3F9|beginners&gt; and I'll walk you through it</text>
  </message>
  <message>
    <ts>2017-07-22T10:27:52.453266</ts>
    <user>U6DBQRAHM</user>
    <text>&lt;@U11BV7MTK&gt; ok thanks!</text>
  </message>
  <message>
    <ts>2017-07-22T11:32:27.788434</ts>
    <user>U0BKWMG5B</user>
    <text>I'd need to see more of your setup. If you're performing a reset, your prep function will be hit</text>
  </message>
  <message>
    <ts>2017-07-22T11:35:04.801963</ts>
    <user>U0BKWMG5B</user>
    <text>Yes, though depending on your use case, it may or may not be a good idea</text>
  </message>
  <message>
    <ts>2017-07-22T11:37:12.813198</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; yet another question on Integrant… Why is `ig/suspend!` necessary? Couldn't you do all the logic in `ig/resume`? (naming it `ig/swap` or similar). It seems to only be used when hot-swapping for dev</text>
  </message>
  <message>
    <ts>2017-07-22T11:38:23.819548</ts>
    <user>U5ZAJ15P0</user>
    <text>There are two steps: suspending the system then resuming it with a different config</text>
  </message>
  <message>
    <ts>2017-07-22T11:38:39.820983</ts>
    <user>U5ZAJ15P0</user>
    <text>To do essentially one thing: hot-swap some parts of the running system</text>
  </message>
  <message>
    <ts>2017-07-22T11:38:51.822029</ts>
    <user>U5ZAJ15P0</user>
    <text>(at least that's the only use of suspend!/resume I have seen yet)</text>
  </message>
  <message>
    <ts>2017-07-22T11:43:16.845408</ts>
    <user>U0BKWMG5B</user>
    <text>Consider the case of a web server. Suspend can tell the server to buffer connections until resume is called. After suspend we reload namespaces which can take several seconds.</text>
  </message>
  <message>
    <ts>2017-07-22T11:43:35.846989</ts>
    <user>U0BKWMG5B</user>
    <text>Suspend and resume are only used for dev</text>
  </message>
  <message>
    <ts>2017-07-22T11:44:07.849558</ts>
    <user>U5ZAJ15P0</user>
    <text>ah right, so you wouldn't be able to hot-swap in one go because reloading namespaces while requests are being processed would lead to issues I assume</text>
  </message>
  <message>
    <ts>2017-07-22T11:45:41.857814</ts>
    <user>U5ZAJ15P0</user>
    <text>Ring will buffer requests by default if the handler is a promise?</text>
  </message>
  <message>
    <ts>2017-07-22T11:46:02.859594</ts>
    <user>U5ZAJ15P0</user>
    <text>well, the ring jetty adapter</text>
  </message>
  <message>
    <ts>2017-07-22T11:49:53.879401</ts>
    <user>U0BKWMG5B</user>
    <text>Yes, because a promise blocks</text>
  </message>
  <message>
    <ts>2017-07-22T11:50:36.883158</ts>
    <user>U5ZAJ15P0</user>
    <text>Ah, so if the passed handler is a promise it will try to deref, which will block. ok.</text>
  </message>
  <message>
    <ts>2017-07-22T11:51:23.887169</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-22T11:54:10.901568</ts>
    <user>U0BKWMG5B</user>
    <text>Right</text>
  </message>
  <message>
    <ts>2017-07-22T11:54:45.904801</ts>
    <user>U0BKWMG5B</user>
    <text>Suspend and resume are useful for keeping connections open and avoiding restart time during development.</text>
  </message>
  <message>
    <ts>2017-07-22T11:55:01.906052</ts>
    <user>U0BKWMG5B</user>
    <text>Web sockets for example</text>
  </message>
  <message>
    <ts>2017-07-22T12:18:46.033713</ts>
    <user>U628K7XGQ</user>
    <text>How are you guys printing the guts of Java objects on the REPL? I'd love to be able to convert any java object to a graph of maps I can easily inspect.
(similar to what the debugger in IntelliJ allows you to do)</text>
  </message>
  <message>
    <ts>2017-07-22T12:19:48.038977</ts>
    <user>U060FKQPN</user>
    <text>`bean`</text>
  </message>
  <message>
    <ts>2017-07-22T12:23:30.058887</ts>
    <user>U628K7XGQ</user>
    <text>wouldn't work on non-beans</text>
  </message>
  <message>
    <ts>2017-07-22T12:26:02.072496</ts>
    <user>U628K7XGQ</user>
    <text>I tried to make sense of `clojure.reflect` but before I spent my time on that - shall we say - sparsely documented lib, I was wondering if someone had a neat `java-to-map` fn</text>
  </message>
  <message>
    <ts>2017-07-22T12:30:05.094443</ts>
    <user>U050MP39D</user>
    <text>I think clojure.reflect/reflect basically does that iirc</text>
  </message>
  <message>
    <ts>2017-07-22T12:32:11.106382</ts>
    <user>U051SS2EU</user>
    <text>if I recall, bean used to be more general and didn't look for JavaBean specific stuff... let me see if I can find it</text>
  </message>
  <message>
    <ts>2017-07-22T12:33:53.115565</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (bean (java.util.Date.))
{:day 6, :date 22, :time 1500741217657, :month 6, :seconds 37, :year 117, :class java.util.Date, :timezoneOffset 420, :hours 9, :minutes 33}
```</text>
  </message>
  <message>
    <ts>2017-07-22T12:34:04.116589</ts>
    <user>U051SS2EU</user>
    <text>maybe it's that Date is a bean and I never realized it was?</text>
  </message>
  <message>
    <ts>2017-07-22T12:34:12.117274</ts>
    <user>U050MP39D</user>
    <text>yeah bean looks quite good
```
(bean (HTableDescriptor. (TableName/valueOf "foo")))
=&amp;gt;
{:familiesKeys #{},
 :columnFamilies #object["[Lorg.apache.hadoop.hbase.HColumnDescriptor;"
                         0x124eda1b
                         "[Lorg.apache.hadoop.hbase.HColumnDescriptor;@124eda1b"],
 :regionReplication 1,
 :memStoreFlushSize -1,
 :name #object["[B" 0x19dca84c "[B@19dca84c"],
 :tableName #object[org.apache.hadoop.hbase.TableName 0x6328ce6a "foo"],
 :metaRegion false,
 :rootRegion false,
 :compactionEnabled true,
 :maxFileSi... snip
```</text>
  </message>
  <message>
    <ts>2017-07-22T12:34:38.119846</ts>
    <user>U051SS2EU</user>
    <text>and you could start with bean's source code if you want something that isn't so JavaBean centric</text>
  </message>
  <message>
    <ts>2017-07-22T14:32:17.722062</ts>
    <user>U065JNAN8</user>
    <text>I don't understand this line in the docs about clojure.spec

"Thus a bare (s/keys) is valid and will check all attributes of a map without checking which keys are required or optional."

What is it checking if there are no specs to check?

```
(s/def ::foo (s/keys))
(s/valid? ::foo {:yolo 42})
=&amp;gt;true
```</text>
  </message>
  <message>
    <ts>2017-07-22T14:34:44.734276</ts>
    <user>U065JNAN8</user>
    <text>Ah I hadn't read enough. Namespace qualified keys will be checked against their specs</text>
  </message>
  <message>
    <ts>2017-07-22T15:00:47.860543</ts>
    <user>U050R7ECY</user>
    <text>Are there any good debuggers that work at the bytecode level? I have cider, but I have an infinite loop somewhere, so I need 'pause execution'</text>
  </message>
  <message>
    <ts>2017-07-22T15:01:48.866000</ts>
    <user>U051SS2EU</user>
    <text>cider and cursive have this - to some degree, you need to turn off some clojure features for it to work well</text>
  </message>
  <message>
    <ts>2017-07-22T15:03:31.874262</ts>
    <user>U051SS2EU</user>
    <text>usually I opt for adding (swap! debug-atom conj {:context ::foo :data foo}) in the middle of some function and then use the resulting atom in the repl to figure out what's going on (which does require iterating sometimes to figure out which data you should even be tracking of course)</text>
  </message>
  <message>
    <ts>2017-07-22T15:05:30.884058</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; is there an equivalent of Ruby's "pry" in clojure? e.g. a way to open  a repl at any point in a program, with access to local bindings?</text>
  </message>
  <message>
    <ts>2017-07-22T15:05:30.884131</ts>
    <user>U050R7ECY</user>
    <text>I thought cider's debugger worked by instrumenting and evaling source?</text>
  </message>
  <message>
    <ts>2017-07-22T15:07:07.892261</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U050R7ECY&gt; I didn't check recently but at one point they were actually using jdx bindings to get into the byte code level - when I saw people claim "cider can debug like cursive now" I assumed that meant that feature was working</text>
  </message>
  <message>
    <ts>2017-07-22T15:07:18.893232</ts>
    <user>U051SS2EU</user>
    <text>cursive definitely does byte code level debugging</text>
  </message>
  <message>
    <ts>2017-07-22T15:07:38.894928</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; that's hard with a compiled language</text>
  </message>
  <message>
    <ts>2017-07-22T15:07:49.895735</ts>
    <user>U051SS2EU</user>
    <text>I don't think that exists, definitely not in a general way</text>
  </message>
  <message>
    <ts>2017-07-22T15:07:52.896025</ts>
    <user>U050R7ECY</user>
    <text>&lt;@U051SS2EU&gt; that doesn't look to be in the latest release: &lt;https://cider.readthedocs.io/en/latest/debugging/&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T15:08:41.900043</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U050R7ECY&gt; oh, clearly I was misinformed and/or misunderstood what I was being told</text>
  </message>
  <message>
    <ts>2017-07-22T15:08:47.900474</ts>
    <user>U051SS2EU</user>
    <text>thanks for the clarification</text>
  </message>
  <message>
    <ts>2017-07-22T15:09:02.901826</ts>
    <user>U050R7ECY</user>
    <text>&lt;@U5ZAJ15P0&gt; cider can do that by recompiling functions. Macros get access to all local variables in scope when compiling</text>
  </message>
  <message>
    <ts>2017-07-22T15:09:55.906216</ts>
    <user>U050R7ECY</user>
    <text>i.e. `(let [x 1] (my-dbg (inc x))`, if my-dbg is a defmacro, there's an extra `&amp;amp;env` variable that contains `{x 1}`</text>
  </message>
  <message>
    <ts>2017-07-22T15:10:18.908204</ts>
    <user>U5ZAJ15P0</user>
    <text>Well, I guess I should start using emacs then</text>
  </message>
  <message>
    <ts>2017-07-22T15:10:46.910438</ts>
    <user>U051SS2EU</user>
    <text>I find it easier to just use a macro that puts the locals in a hash map, then access it &lt;https://gist.github.com/noisesmith/3490f2d3ed98e294e033b002bc2de178&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T15:10:49.910658</ts>
    <user>U050R7ECY</user>
    <text>a bytecode debugger can see the locals in scope, but IIRC the compiler throws away the variable names in the bytecode, so you just get `foo_1`, etc.</text>
  </message>
  <message>
    <ts>2017-07-22T15:10:53.910926</ts>
    <user>U050R7ECY</user>
    <text>and there's locals clearing</text>
  </message>
  <message>
    <ts>2017-07-22T15:11:11.912394</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U050R7ECY&gt; right that's the clojure feature I was t alking about - you can disable it</text>
  </message>
  <message>
    <ts>2017-07-22T15:11:18.913039</ts>
    <user>U46LFMYTD</user>
    <text>Has anyone used visualvm to profile clojure code?</text>
  </message>
  <message>
    <ts>2017-07-22T15:11:23.913400</ts>
    <user>U46LFMYTD</user>
    <text>I cant get it to work</text>
  </message>
  <message>
    <ts>2017-07-22T15:11:28.913856</ts>
    <user>U051SS2EU</user>
    <text>yes - it works but yourkit is much better</text>
  </message>
  <message>
    <ts>2017-07-22T15:11:29.913968</ts>
    <user>U050R7ECY</user>
    <text>try the sampler rather than the profiler</text>
  </message>
  <message>
    <ts>2017-07-22T15:11:41.914972</ts>
    <user>U050R7ECY</user>
    <text>profiler rarely works well for me</text>
  </message>
  <message>
    <ts>2017-07-22T15:11:53.915913</ts>
    <user>U060FKQPN</user>
    <text>it doesn't</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:03.916754</ts>
    <user>U060FKQPN</user>
    <text>the compiler, I mean</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:06.917044</ts>
    <user>U051SS2EU</user>
    <text>but both are somewhat difficult because so much of profiling assumes that the class you are looking at is important, and most of the classes are going to be eg. clojure.lang.PeristentVector</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:11.917502</ts>
    <user>U060FKQPN</user>
    <text>the local names are right there in the bytecode</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:23.918363</ts>
    <user>U46LFMYTD</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:29.918777</ts>
    <user>U050R7ECY</user>
    <text>sure, but at least the sampler comes back with *a* result :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:37.919410</ts>
    <user>U051SS2EU</user>
    <text>it's definitely doable though - I've had a lot of help from profiling</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:38.919477</ts>
    <user>U050R7ECY</user>
    <text>profiler usually takes forever to instrument and then doesn't work</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:43.919875</ts>
    <user>U46LFMYTD</user>
    <text>well, I've been following the guide written here: &lt;https://torsten.io/stdout/how-to-profile-clojure-code/&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T15:12:51.920379</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U050R7ECY&gt; oh, I haven't had that issue</text>
  </message>
  <message>
    <ts>2017-07-22T15:13:03.921342</ts>
    <user>U051SS2EU</user>
    <text>it needs more time to start up for sure though</text>
  </message>
  <message>
    <ts>2017-07-22T15:13:19.922717</ts>
    <user>U46LFMYTD</user>
    <text>but it says Failed to Create JMX connection to target application</text>
  </message>
  <message>
    <ts>2017-07-22T15:13:35.924025</ts>
    <user>U051SS2EU</user>
    <text>then you need to add the args to java to allow jmx connect</text>
  </message>
  <message>
    <ts>2017-07-22T15:14:15.927217</ts>
    <user>U5ZAJ15P0</user>
    <text>is there any good way to debug clojure without using a particular editor? (aka no cursive and no cider)</text>
  </message>
  <message>
    <ts>2017-07-22T15:14:43.929332</ts>
    <user>U051SS2EU</user>
    <text>that's where swapping data into an atom excels</text>
  </message>
  <message>
    <ts>2017-07-22T15:14:59.930482</ts>
    <user>U051SS2EU</user>
    <text>or you could use jdb - if you are familiar enough with clojure internals it can work</text>
  </message>
  <message>
    <ts>2017-07-22T15:15:01.930686</ts>
    <user>U051SS2EU</user>
    <text>but it's confusing</text>
  </message>
  <message>
    <ts>2017-07-22T15:15:23.932512</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; funnily enough swapping data into an atom is the solution I came up with this morning</text>
  </message>
  <message>
    <ts>2017-07-22T15:15:33.933194</ts>
    <user>U051SS2EU</user>
    <text>there's an old tool for setting up a "debug repl" that kind of worked but it was funky</text>
  </message>
  <message>
    <ts>2017-07-22T15:16:00.935249</ts>
    <user>U050R7ECY</user>
    <text>&lt;@U46LFMYTD&gt; are you specifically trying to get remote profiling working? Local clojure process should just work</text>
  </message>
  <message>
    <ts>2017-07-22T15:17:17.941515</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; as a level up from swapping into an atom, I also dump the relevant part so I can use it in a unit test when I figure out what is going on - I made a small lib for this &lt;https://github.com/noisesmith/poirot&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T15:17:49.943914</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; oh yes, you sent that one to me already but hadn't yet looked into it</text>
  </message>
  <message>
    <ts>2017-07-22T15:19:06.950775</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U46LFMYTD&gt; oh - weird - I haven't experienced that issue, not sure what that's about</text>
  </message>
  <message>
    <ts>2017-07-22T15:20:18.957099</ts>
    <user>U46LFMYTD</user>
    <text>:disappointed: Ive had this working on a remote process before... something about running it locally is not working</text>
  </message>
  <message>
    <ts>2017-07-22T15:32:46.018293</ts>
    <user>U050R7ECY</user>
    <text>ok, got `jdb` working acceptably well</text>
  </message>
  <message>
    <ts>2017-07-22T15:35:30.031210</ts>
    <user>U46LFMYTD</user>
    <text>is there any special setup in the project.clj to use YourKit? It seems a lot of feature are missing when i connect to my running repl</text>
  </message>
  <message>
    <ts>2017-07-22T15:38:17.043476</ts>
    <user>U051SS2EU</user>
    <text>you might need to add jvm args to allow the kind of connection it wants</text>
  </message>
  <message>
    <ts>2017-07-22T15:38:27.044187</ts>
    <user>U051SS2EU</user>
    <text>those would be the same args a java program would need</text>
  </message>
  <message>
    <ts>2017-07-22T15:39:56.051316</ts>
    <user>U051SS2EU</user>
    <text>I've had a lot of luck with using the yourkit agent</text>
  </message>
  <message>
    <ts>2017-07-22T16:05:26.170061</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U050R7ECY&gt; I just realized this would be relevant - if you send a signal you can make the jvm print all its stack traces (or you can use jstack from another terminal to get all stack traces by pid) and if you have a loop that isn't exiting a few stack traces should show where that's happening pretty quickly</text>
  </message>
  <message>
    <ts>2017-07-22T16:05:50.172126</ts>
    <user>U050R7ECY</user>
    <text>yeah, I did basically the same thing using jdb</text>
  </message>
  <message>
    <ts>2017-07-22T16:05:54.172358</ts>
    <user>U051SS2EU</user>
    <text>I forget the signal name but on *nix terminals its bound to `C-\`</text>
  </message>
  <message>
    <ts>2017-07-22T16:06:02.173023</ts>
    <user>U050R7ECY</user>
    <text>using `threads` and `where`</text>
  </message>
  <message>
    <ts>2017-07-22T16:06:06.173405</ts>
    <user>U051SS2EU</user>
    <text>cool</text>
  </message>
  <message>
    <ts>2017-07-22T16:14:16.211305</ts>
    <user>U5ZAJ15P0</user>
    <text>Can someone please remind me of the name of the clojure function which does the following: `(f g :a :b :c) =&amp;gt; [(g :a) (g :b) (g :c)]` ?</text>
  </message>
  <message>
    <ts>2017-07-22T16:14:44.213320</ts>
    <user>U5ZAJ15P0</user>
    <text>ah I am stupid, I could just map</text>
  </message>
  <message>
    <ts>2017-07-22T16:14:45.213422</ts>
    <user>U050R7ECY</user>
    <text>looks almost like `juxt`</text>
  </message>
  <message>
    <ts>2017-07-22T16:14:55.214109</ts>
    <user>U5ZAJ15P0</user>
    <text>but `juxt` is what I was looking for</text>
  </message>
  <message>
    <ts>2017-07-22T16:14:55.214170</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-22T16:15:15.215746</ts>
    <user>U5ZAJ15P0</user>
    <text>my example was just wrong</text>
  </message>
  <message>
    <ts>2017-07-22T16:15:43.217712</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks &lt;@U050R7ECY&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T16:21:40.243938</ts>
    <user>U46LFMYTD</user>
    <text>seems to be working much better than visualVM</text>
  </message>
  <message>
    <ts>2017-07-22T16:22:01.245486</ts>
    <user>U46LFMYTD</user>
    <text>its hard to make sense of though</text>
  </message>
  <message>
    <ts>2017-07-22T16:22:23.247087</ts>
    <user>U46LFMYTD</user>
    <text>in the sense that it is hard to find which of my functions is taking the longest time amid all the clojure / java functions</text>
  </message>
  <message>
    <ts>2017-07-22T16:22:38.248346</ts>
    <user>U051SS2EU</user>
    <text>yeah - it takes a while to figure out, I have a long term plan to do a talk on this topic</text>
  </message>
  <message>
    <ts>2017-07-22T16:23:35.252567</ts>
    <user>U46LFMYTD</user>
    <text>sounds good</text>
  </message>
  <message>
    <ts>2017-07-22T16:23:43.253093</ts>
    <user>U46LFMYTD</user>
    <text>my code takes 7 days to run ^^</text>
  </message>
  <message>
    <ts>2017-07-22T17:10:49.459724</ts>
    <user>U0LGCREMU</user>
    <text>haha! didn't i tell you? :)</text>
  </message>
  <message>
    <ts>2017-07-22T17:20:38.502335</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0LGCREMU&gt; you did! that's how I vaguely remembered there was a function for this, but I have the brain of a goldfish today so I couldn't think of the name</text>
  </message>
  <message>
    <ts>2017-07-22T18:52:12.858628</ts>
    <user>U09LZR36F</user>
    <text>Is there a form of resolved keywords which looks into `refer`'d vars? 

```
(ns foo
  (:require [clojure.string :refer [blank?]]))

(println ::blank?)
;; (desired) =&amp;gt; clojure.string/blank?
;; (actual)  =&amp;gt; foo/blank?
```</text>
  </message>
  <message>
    <ts>2017-07-22T18:53:35.864000</ts>
    <user>U1B0DFD25</user>
    <text>&lt;@U5ZAJ15P0&gt; there's also `sayid`: &lt;https://github.com/bpiel/sayid&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T18:54:08.866041</ts>
    <user>U060FKQPN</user>
    <text>keywords have no relationship with vars &lt;@U09LZR36F&gt;</text>
  </message>
  <message>
    <ts>2017-07-22T19:02:30.899433</ts>
    <user>U1B0DFD25</user>
    <text>&lt;@U09LZR36F&gt; is it something you need for spec?</text>
  </message>
  <message>
    <ts>2017-07-22T19:21:23.973158</ts>
    <user>U0567Q30W</user>
    <text>&lt;@U050R7ECY&gt; Cursive has a bytecode debugger, and you can definitely see the locals (as well as other normally invisible locals created by e.g. destructuring). It also does its best to help control locals clearing.</text>
  </message>
  <message>
    <ts>2017-07-22T19:21:42.974364</ts>
    <user>U0567Q30W</user>
    <text>You're right AFAIK that CIDER's debugger is source transformation.</text>
  </message>
  <message>
    <ts>2017-07-22T19:29:37.003265</ts>
    <user>U09LZR36F</user>
    <text>I figured it would be useful for that, yes</text>
  </message>
  <message>
    <ts>2017-07-22T20:51:54.297740</ts>
    <user>U628K7XGQ</user>
    <text>Going back to my question from this morning to introspect a Java object, here's a fn I've written to expose the fields of an object via reflection (clojure.reflect really didn't help).
I've crammed it all into a single fn and it looks quite ugly. Any suggestions on how to improve the code style. I'm still a clnewb?

```
(defn java-&amp;gt;map
  "Turns fields of a Java object into a map, up to 'level' deep"
  ([obj] (java-&amp;gt;map obj 1))
  ([obj level]
   (when (some? obj)
     (let [c (class obj)]
       (cond
         ;;;(.isPrimitive c) obj never works because clojure implicitly wraps primitives
         (contains?
           #{java.lang.Long java.lang.Character java.lang.Byte
             java.lang.Double java.lang.Float java.lang.Short java.lang.Integer} c) obj
         (= 0 level) (.toString obj)
         (instance? java.lang.String obj) obj
         (.isArray c) (concat
                        (-&amp;gt;&amp;gt; obj
                             (take 5)
                             (map (fn [e] (java-&amp;gt;map e (dec level)))))
                        (when (&amp;gt; (count obj) 5) [:more (count obj)]))
         :else
         (assoc (into {} (-&amp;gt;&amp;gt; (concat (.getDeclaredFields c)
                                      (.getFields c))
                              (filter #(= (bit-and (.getModifiers %) java.lang.reflect.Modifier/STATIC) 0)) ;;; ignore static fields
                              (map
                                #(do (.setAccessible % true)
                                     [(keyword (.getName %))
                                      (java-&amp;gt;map (.get % obj) (dec level))]))))
           :-type c  ;;; add the type as well
           ))))))
```

Examples:
```
(java-&amp;gt;map (java.util.Date.) 4)
=&amp;gt; {:fastTime 1500771066642, :cdate nil, :-type java.util.Date}

(java-&amp;gt;map (java.text.AttributedString. "bubu") 2)
=&amp;gt;
{:text "bubu",
 :runArraySize 0,
 :runCount 0,
 :runStarts nil,
 :runAttributes nil,
 :runAttributeValues nil,
 :-type java.text.AttributedString}
```</text>
  </message>
  <message>
    <ts>2017-07-22T22:31:07.639695</ts>
    <user>U2TCUSM2R</user>
    <text>I'm having trouble adding metadata inside a macro. It's a bit weird (as usual) since it overrides `defn` in order to capture the ast after compilation, but works otherwise: ```(defmacro defn [name &amp;amp; decls] `(def ^{:ast ~decls} ~name (fn ~decls)))```</text>
  </message>
  <message>
    <ts>2017-07-22T22:32:47.644839</ts>
    <user>U051SS2EU</user>
    <text>defmacro never sees the reader macro, it's applied before it sees the form</text>
  </message>
  <message>
    <ts>2017-07-22T22:33:05.645853</ts>
    <user>U051SS2EU</user>
    <text>you need to use with-meta or vary-meta to add metadata to the symbol you emit</text>
  </message>
  <message>
    <ts>2017-07-22T22:33:35.647440</ts>
    <user>U2TCUSM2R</user>
    <text>I did try that, but perhaps didn't do it correctly</text>
  </message>
  <message>
    <ts>2017-07-22T22:33:55.648495</ts>
    <user>U2TCUSM2R</user>
    <text>(and good call because I definitely don't want this done at runtime)</text>
  </message>
  <message>
    <ts>2017-07-22T22:34:00.648812</ts>
    <user>U051SS2EU</user>
    <text>`^{:foo :bar} baz ` translates to `(with-meta baz {:foo :bar})`</text>
  </message>
  <message>
    <ts>2017-07-22T22:34:09.649317</ts>
    <user>U2TCUSM2R</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-22T22:34:18.649825</ts>
    <user>U2TCUSM2R</user>
    <text>lemme give it another go and post the results if it doesn't work</text>
  </message>
  <message>
    <ts>2017-07-22T22:41:53.673255</ts>
    <user>U2TCUSM2R</user>
    <text>ok, so yeah so for some reason the actual `fn` part doesn't compile when i write it like that: ```(defmacro defn [name &amp;amp; decls] `(def ~(with-meta ~name {:ast ~decls}) (fn ~decls)))```</text>
  </message>
  <message>
    <ts>2017-07-22T22:43:32.677992</ts>
    <user>U051SS2EU</user>
    <text>nested ~ isn't valid like that</text>
  </message>
  <message>
    <ts>2017-07-22T22:43:47.678674</ts>
    <user>U051SS2EU</user>
    <text>it needs to be one of those positions or the other, not both</text>
  </message>
  <message>
    <ts>2017-07-22T22:44:44.681621</ts>
    <user>U2TCUSM2R</user>
    <text>oh. i tried unquote splicing it, but then got an error on the macro</text>
  </message>
  <message>
    <ts>2017-07-22T22:44:59.682317</ts>
    <user>U051SS2EU</user>
    <text>splicing isn't valid there either</text>
  </message>
  <message>
    <ts>2017-07-22T22:45:12.683108</ts>
    <user>U2TCUSM2R</user>
    <text>is it enough to just unquote the expression? that works</text>
  </message>
  <message>
    <ts>2017-07-22T22:45:23.683606</ts>
    <user>U2TCUSM2R</user>
    <text>but same error when calling the macro</text>
  </message>
  <message>
    <ts>2017-07-22T22:47:05.688655</ts>
    <user>U051SS2EU</user>
    <text>the next problem is that decls isn't going to be a valid data literal</text>
  </message>
  <message>
    <ts>2017-07-22T22:47:16.689224</ts>
    <user>U051SS2EU</user>
    <text>so it needs to be escaped or quoted in some manner</text>
  </message>
  <message>
    <ts>2017-07-22T22:48:01.691492</ts>
    <user>U2TCUSM2R</user>
    <text>hmm. it worked fine without the metadata</text>
  </message>
  <message>
    <ts>2017-07-22T22:48:29.692980</ts>
    <user>U051SS2EU</user>
    <text>right but the decls are a data literal in the metadata - so they need to be a valid one</text>
  </message>
  <message>
    <ts>2017-07-22T22:48:36.693319</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (defmacro defn [name &amp;amp; decls] `(def ~(with-meta name {:ast (cons 'quote decls)}) (fn ~decls)))
#'user/defn
+user=&amp;gt; (defn baz [])
#'user/baz
+user=&amp;gt; (meta #'baz)
{:ast [], :line 19, :column 1, :file "NO_SOURCE_PATH", :name baz, :ns #object[clojure.lang.Namespace 0x373ebf74 "user"]}
user=&amp;gt; 
```</text>
  </message>
  <message>
    <ts>2017-07-22T22:48:37.693366</ts>
    <user>U2TCUSM2R</user>
    <text>oh that one</text>
  </message>
  <message>
    <ts>2017-07-22T22:48:47.693904</ts>
    <user>U2TCUSM2R</user>
    <text>i confused the error message</text>
  </message>
  <message>
    <ts>2017-07-22T22:50:20.699120</ts>
    <user>U051SS2EU</user>
    <text>wait I think cons ins the wrong way to do that... checking</text>
  </message>
  <message>
    <ts>2017-07-22T22:50:56.700939</ts>
    <user>U051SS2EU</user>
    <text>yeah, my bad ```+user=&amp;gt; (defn baz ([]) ([_]))
CompilerException clojure.lang.ExceptionInfo: Wrong number of args (2) passed to quote {:form (quote ([]) ([_]))}, compiling:(NO_SOURCE_PATH:21:1) 
```</text>
  </message>
  <message>
    <ts>2017-07-22T22:52:35.705679</ts>
    <user>U051SS2EU</user>
    <text>this fixes an issue with multi arities in the original too ```+user=&amp;gt; (defmacro defn [name &amp;amp; decls] `(def ~(with-meta name {:ast (cons 'quote (list decls))}) (fn ~@decls)))
#'user/defn
+user=&amp;gt; (defn baz ([]) ([_]))
#'user/baz
+user=&amp;gt; (meta #'baz)
{:ast (([]) ([_])), :line 25, :column 1, :file "NO_SOURCE_PATH", :name baz, :ns #object[clojure.lang.Namespace 0x373ebf74 "user"]}
```</text>
  </message>
  <message>
    <ts>2017-07-22T22:53:23.707942</ts>
    <user>U051SS2EU</user>
    <text>there's probably a better way to rewrite`(cons 'quote (list decls))` - that's super ugly</text>
  </message>
  <message>
    <ts>2017-07-22T22:53:43.708939</ts>
    <user>U2TCUSM2R</user>
    <text>it works if i just do `(list 'quote decls)`</text>
  </message>
  <message>
    <ts>2017-07-22T22:53:52.709309</ts>
    <user>U051SS2EU</user>
    <text>oh, right, much nicer</text>
  </message>
  <message>
    <ts>2017-07-22T22:54:31.711241</ts>
    <user>U2TCUSM2R</user>
    <text>wow, thanks for explaining that to me as always</text>
  </message>
  <message>
    <ts>2017-07-22T22:54:41.711763</ts>
    <user>U2TCUSM2R</user>
    <text>definitely would not have picked up on that on my own</text>
  </message>
  <message>
    <ts>2017-07-22T22:55:05.712902</ts>
    <user>U051SS2EU</user>
    <text>yeah, there's an art to this stuff, and seeing simple examples makes a difference in learning it</text>
  </message>
  <message>
    <ts>2017-07-22T22:55:51.715221</ts>
    <user>U2TCUSM2R</user>
    <text>tbh i never cared much about macros before the project i'm using this for</text>
  </message>
  <message>
    <ts>2017-07-22T22:57:04.718904</ts>
    <user>U2TCUSM2R</user>
    <text>it's funny because in scheme i'm pretty sure i'd do some fancy transformation like closure conversion, but that's not possible since clojure is JIT compiled at the function level. but otoh, i don't think i could do it this way with scheme-style macros</text>
  </message>
  <message>
    <ts>2017-07-22T22:58:35.723873</ts>
    <user>U2TCUSM2R</user>
    <text>now i get to play around with techniques for parsing the asts. i'll check out the muir library, but suspect i'll end up having to hack away at it myself</text>
  </message>
  <message>
    <ts>2017-07-23T02:54:21.413710</ts>
    <user>U66SFLTPT</user>
    <text>is there a "built-in" absolute value function? I couldn't find it on &lt;https://clojure.org/api/cheatsheet&gt; . I came up with ```(if (neg? x) (- x) x)```</text>
  </message>
  <message>
    <ts>2017-07-23T02:55:53.417607</ts>
    <user>U0CHY4VNW</user>
    <text>`Math/abs`</text>
  </message>
  <message>
    <ts>2017-07-23T02:58:47.425525</ts>
    <user>U66SFLTPT</user>
    <text>lol of course</text>
  </message>
  <message>
    <ts>2017-07-23T02:58:55.425879</ts>
    <user>U66SFLTPT</user>
    <text>(I'm not a java programmer)</text>
  </message>
  <message>
    <ts>2017-07-23T03:01:11.433533</ts>
    <user>U0CHY4VNW</user>
    <text>Non-obvious legacy weirdness. `abs` would be nicer</text>
  </message>
  <message>
    <ts>2017-07-23T03:01:50.435588</ts>
    <user>U0CHY4VNW</user>
    <text>along with `sin`, `cos`, `sqrt`, `pow`, `exp` etc etc</text>
  </message>
  <message>
    <ts>2017-07-23T03:03:54.441508</ts>
    <user>U66SFLTPT</user>
    <text>indeed</text>
  </message>
  <message>
    <ts>2017-07-23T03:04:01.441857</ts>
    <user>U66SFLTPT</user>
    <text>i was definitely expecting `abs`</text>
  </message>
  <message>
    <ts>2017-07-23T03:04:39.443696</ts>
    <user>U66SFLTPT</user>
    <text>that would be nice because it could work on longs, floats, rationals, and bignums</text>
  </message>
  <message>
    <ts>2017-07-23T04:07:59.631457</ts>
    <user>U4SJP8VD4</user>
    <text>&lt;https://medium.com/technology-nineleaps/clojure-tutorial-ii-packaging-6868849c94cb&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T05:41:50.917006</ts>
    <user>U1B0DFD25</user>
    <text>How would you use it?</text>
  </message>
  <message>
    <ts>2017-07-23T07:13:03.208715</ts>
    <user>U5ZAJ15P0</user>
    <text>oh thanks, that looks interesting</text>
  </message>
  <message>
    <ts>2017-07-23T10:03:37.848175</ts>
    <user>U050CBXUZ</user>
    <text>spangler: the functional way to do things is to have a clear separation between IO and business logic</text>
  </message>
  <message>
    <ts>2017-07-23T10:04:05.850111</ts>
    <user>U050CBXUZ</user>
    <text>you should never be passing resources into your business logic code, and if you're not doing that then this whole discussion is moot</text>
  </message>
  <message>
    <ts>2017-07-23T10:04:27.851696</ts>
    <user>U050CBXUZ</user>
    <text>if you are, then you're not doing proper FP in the first place</text>
  </message>
  <message>
    <ts>2017-07-23T10:05:38.856701</ts>
    <user>U050CBXUZ</user>
    <text>ghadi: I'm a pretty experienced Clojure developer myself last I checked, and I'm firmly in favor of mount</text>
  </message>
  <message>
    <ts>2017-07-23T10:06:24.859964</ts>
    <user>U050CBXUZ</user>
    <text>personally, I think that most component based code isn't proper FP because resources are often accessed within business logic</text>
  </message>
  <message>
    <ts>2017-07-23T11:52:28.348685</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U66SFLTPT&gt; &lt;@U0CHY4VNW&gt;  the rationale of just using java.lang.Math is most people using those things extensively are doing performance critical stuff where the overhead of a clojure wrapper that dispatched on and preserved types would be a problem</text>
  </message>
  <message>
    <ts>2017-07-23T11:57:21.372024</ts>
    <user>U5ZAJ15P0</user>
    <text>Does anybody have a good online resource / talk / book to recommend to learning clojure's internals?</text>
  </message>
  <message>
    <ts>2017-07-23T11:57:42.373680</ts>
    <user>U5ZAJ15P0</user>
    <text>Implementation details, how it interacts with the JVM, etc</text>
  </message>
  <message>
    <ts>2017-07-23T11:58:17.376690</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U5ZAJ15P0&gt; I recommend reading through &lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj&gt; from start to finish</text>
  </message>
  <message>
    <ts>2017-07-23T11:58:40.378916</ts>
    <user>U051SS2EU</user>
    <text>this talk is decent &lt;https://www.youtube.com/watch?v=6DaBmz_6y0s&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T11:58:57.380731</ts>
    <user>U5ZAJ15P0</user>
    <text>What will this teach me? Doesn't it just contain the std lib?</text>
  </message>
  <message>
    <ts>2017-07-23T11:59:26.383554</ts>
    <user>U051SS2EU</user>
    <text>it's everything implementing the language, except the special forms and the parser and the bytecode emitter</text>
  </message>
  <message>
    <ts>2017-07-23T11:59:38.385024</ts>
    <user>U3L6TFEJF</user>
    <text>It's an entry point to learn about the internals</text>
  </message>
  <message>
    <ts>2017-07-23T11:59:49.385907</ts>
    <user>U3L6TFEJF</user>
    <text>see where it calls into java / compiler stuff and dive in from there</text>
  </message>
  <message>
    <ts>2017-07-23T12:00:07.388135</ts>
    <user>U3L6TFEJF</user>
    <text>here's another good one about namespaces: &lt;https://www.youtube.com/watch?v=8NUI07y1SlQ&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T12:00:09.388546</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3L6TFEJF&gt; ok perfect then, thanks! 7000LOC isn't so bad actually</text>
  </message>
  <message>
    <ts>2017-07-23T12:00:33.391303</ts>
    <user>U5ZAJ15P0</user>
    <text>Out of curiosity, where is Clojure's STM implemented? (for refs, etc)</text>
  </message>
  <message>
    <ts>2017-07-23T12:01:07.395397</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L2259-L2293&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T12:01:22.396815</ts>
    <user>U3L6TFEJF</user>
    <text>which calls into &lt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Ref.java&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T12:04:50.415993</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3L6TFEJF&gt; thank you!</text>
  </message>
  <message>
    <ts>2017-07-23T13:17:07.770112</ts>
    <user>U5ZAJ15P0</user>
    <text>I have a function (`refresh`) which returns either `:ok` or an exception (without throwing it). I am calling `refresh` in a `do` block. If `refresh` returns `:ok`, I would like to continue the execution, but if `refresh` returns an exception I would like to return that exception</text>
  </message>
  <message>
    <ts>2017-07-23T13:17:49.773285</ts>
    <user>U5ZAJ15P0</user>
    <text>I could do this with a `(let [result (refresh)] (if (= result :ok) ...` but  am wondering if there is a more idiomatic way</text>
  </message>
  <message>
    <ts>2017-07-23T13:20:08.784326</ts>
    <user>U5ZAJ15P0</user>
    <text>What the `refresh` function actually does is I think irrelevant to answer my question, but in case anyone is wondering, it's the one from &lt;https://github.com/clojure/tools.namespace&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T15:10:39.318971</ts>
    <user>U0C3SLTHP</user>
    <text>hey guys, I'm building a bot application as a service (websocket based , slack bots ) using clojure. I'm struggling on how to manage the sockets for multiple users.
using the repl/exploratory code I'm able to connect, receive message and post message to slack, no problem at all, but I'm stuck on how to make it able to multiple users.

that is my function to connect on slack websocket ( will return the ws socket )
```
(slack/ws-connect token
            :on-message dispatch
            :on-error #(.getMessage %1))
```</text>
  </message>
  <message>
    <ts>2017-07-23T15:11:24.322594</ts>
    <user>U0C3SLTHP</user>
    <text>how can manage multiple sockets on my app ( creating a global map and assoc the sockets there ? )</text>
  </message>
  <message>
    <ts>2017-07-23T15:12:08.326203</ts>
    <user>U051SS2EU</user>
    <text>a global map with a unique ID per websocket (and the id also attached to client account, if you have any such concept) is the normal way</text>
  </message>
  <message>
    <ts>2017-07-23T15:12:13.326705</ts>
    <user>U051SS2EU</user>
    <text>that's what eg. sente has under the hood</text>
  </message>
  <message>
    <ts>2017-07-23T15:12:58.330222</ts>
    <user>U0C3SLTHP</user>
    <text>thanks , will do that</text>
  </message>
  <message>
    <ts>2017-07-23T15:13:33.333364</ts>
    <user>U051SS2EU</user>
    <text>if you have minimal state to track, you can also just have handler functions that take a request and a websocket object, and call them from the listener you attach to the socket</text>
  </message>
  <message>
    <ts>2017-07-23T15:13:50.334739</ts>
    <user>U051SS2EU</user>
    <text>but if things get stateful at all the map is good</text>
  </message>
  <message>
    <ts>2017-07-23T15:17:35.353598</ts>
    <user>U66SFLTPT</user>
    <text>that makes sense. one thing it might be useful to have a clojure-defined `abs`, `sin`, etc for is cross-target support. yeah they might be slower but at least the code would work without modification</text>
  </message>
  <message>
    <ts>2017-07-23T15:18:37.358788</ts>
    <user>U66SFLTPT</user>
    <text>by cross-target I mean clj, cljs, cljn (is that the .net suffix)?</text>
  </message>
  <message>
    <ts>2017-07-23T15:19:07.361341</ts>
    <user>U0C3SLTHP</user>
    <text>&amp;gt; you can also just have handler functions that take a request and a websocket object, and call them from the listener you attach to the socket
can you pseudo-code that ? didn't get</text>
  </message>
  <message>
    <ts>2017-07-23T15:38:30.456961</ts>
    <user>U051SS2EU</user>
    <text>`(defn do-something-for-socket [connection args] (let [result (frob args)] (send-to-connection connection result))`</text>
  </message>
  <message>
    <ts>2017-07-23T15:39:25.461214</ts>
    <user>U051SS2EU</user>
    <text>assuming you get something from the request that you can send data to by some method or function (that's usually how this is set up)</text>
  </message>
  <message>
    <ts>2017-07-23T15:41:47.472104</ts>
    <user>U051SS2EU</user>
    <text>Math/foo works for clj and cljs already - not sure what the .net scenario is (since js already wanted to be like java it implemented the math functions with the same api)</text>
  </message>
  <message>
    <ts>2017-07-23T15:54:53.532946</ts>
    <user>U0C3SLTHP</user>
    <text>connection is the ws socket, right ?
how the client of `do-something-for-socket` will grab the ws socket ?</text>
  </message>
  <message>
    <ts>2017-07-23T17:51:31.075069</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U5ZAJ15P0&gt; if your app is backed by Datomic, I strongly recommend you use an architecture which reifies the execution context, such as Component or Integrant, which will enable you to implement a 'fork' operation on it. &lt;http://vvvvalvalval.github.io/posts/2016-01-03-architecture-datomic-branching-reality.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T17:53:22.083453</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U06GS6P1N&gt; I've been toying with Integrant since yesterday, and I was considering Component too :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T17:53:35.084422</ts>
    <user>U5ZAJ15P0</user>
    <text>"forking" the execution context seems highly non-trivial though</text>
  </message>
  <message>
    <ts>2017-07-23T18:10:09.162033</ts>
    <user>U628K7XGQ</user>
    <text>I'm trying to create an uberjar for yada and are getting interesting error messages like: 'namespace 'cheshire.factory' not found'</text>
  </message>
  <message>
    <ts>2017-07-23T18:10:19.162844</ts>
    <user>U628K7XGQ</user>
    <text>I can compile the code fine</text>
  </message>
  <message>
    <ts>2017-07-23T18:10:27.163376</ts>
    <user>U628K7XGQ</user>
    <text>anything obvious I'm missing? (this is with leiningen)</text>
  </message>
  <message>
    <ts>2017-07-23T18:24:31.225124</ts>
    <user>U628K7XGQ</user>
    <text>only happens when using `{:aot :all}` though</text>
  </message>
  <message>
    <ts>2017-07-23T18:29:15.247053</ts>
    <user>U3JURM9B6</user>
    <text>in clojure/jdbc, are all sql statements compiled down to STRINGS, sent to SQL, then reparsed ?</text>
  </message>
  <message>
    <ts>2017-07-23T18:29:50.249868</ts>
    <user>U3JURM9B6</user>
    <text>I'm wondering if there is a way to send an AST or something, instead of directly sending the strings</text>
  </message>
  <message>
    <ts>2017-07-23T18:33:50.270050</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U628K7XGQ&gt; total newbie here, but is your cheshire dependency in "dependencies", or under dev dependencies?</text>
  </message>
  <message>
    <ts>2017-07-23T18:35:15.276662</ts>
    <user>U628K7XGQ</user>
    <text>it is brought in by yada indirectly, but also when adding it explicitly it barfs when trying to create the uberjar</text>
  </message>
  <message>
    <ts>2017-07-23T18:35:30.277834</ts>
    <user>U628K7XGQ</user>
    <text>(and it is in dependencies)</text>
  </message>
  <message>
    <ts>2017-07-23T18:36:11.281056</ts>
    <user>U5ZAJ15P0</user>
    <text>I am operating blind here, but lookign at Yada's project.clj it is under the "test" profile dependencies</text>
  </message>
  <message>
    <ts>2017-07-23T18:36:12.281115</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;https://github.com/juxt/yada/blob/master/project.clj#L52&gt;</text>
  </message>
  <message>
    <ts>2017-07-23T18:36:26.282230</ts>
    <user>U5ZAJ15P0</user>
    <text>Those dependencies won't be pulled when running uberjar</text>
  </message>
  <message>
    <ts>2017-07-23T18:36:52.284177</ts>
    <user>U628K7XGQ</user>
    <text>yes, looked at that too, but the dependency tree brings it in via `yada/json`</text>
  </message>
  <message>
    <ts>2017-07-23T18:37:06.285379</ts>
    <user>U5ZAJ15P0</user>
    <text>ah</text>
  </message>
  <message>
    <ts>2017-07-23T18:37:34.287765</ts>
    <user>U628K7XGQ</user>
    <text>the weird thing is, that error is triggered when aot compiling `cheshire.core`</text>
  </message>
  <message>
    <ts>2017-07-23T18:37:53.289097</ts>
    <user>U628K7XGQ</user>
    <text>`Exception in thread "main" java.lang.Exception: namespace 'cheshire.factory' not found, compiling:(cheshire/core.clj:1:1)`</text>
  </message>
  <message>
    <ts>2017-07-23T18:38:13.290610</ts>
    <user>U628K7XGQ</user>
    <text>even weirder: the JAR file for cheshire in the requested version does have a `factory.clj`</text>
  </message>
  <message>
    <ts>2017-07-23T18:38:45.292943</ts>
    <user>U5ZAJ15P0</user>
    <text>so I assume you ran `lein deps :tree` and checked that cheshire was there?</text>
  </message>
  <message>
    <ts>2017-07-23T18:39:17.295491</ts>
    <user>U5ZAJ15P0</user>
    <text>and you checked that the right version was the first one in the output?</text>
  </message>
  <message>
    <ts>2017-07-23T18:39:18.295511</ts>
    <user>U628K7XGQ</user>
    <text>yup, it's there</text>
  </message>
  <message>
    <ts>2017-07-23T18:39:27.296274</ts>
    <user>U5ZAJ15P0</user>
    <text>(not overriden by another version without factory.clj)</text>
  </message>
  <message>
    <ts>2017-07-23T18:39:37.297061</ts>
    <user>U628K7XGQ</user>
    <text>only happens when doing `{:uberjar with {:aot :all}}`</text>
  </message>
  <message>
    <ts>2017-07-23T18:39:58.298621</ts>
    <user>U5ZAJ15P0</user>
    <text>weird. I don't know how aot works so I am afraid I can't help you further :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-23T18:40:43.302311</ts>
    <user>U628K7XGQ</user>
    <text>yeah, I'm feeling pretty clueless myself. But running `lein deps :tree` has interesting warnings. Looking at those now. Thank you!</text>
  </message>
  <message>
    <ts>2017-07-23T18:41:37.306307</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U628K7XGQ&gt; make sure that the right version of cheshire appears first in the tree</text>
  </message>
  <message>
    <ts>2017-07-23T18:41:49.307248</ts>
    <user>U5ZAJ15P0</user>
    <text>from what I have been told lein will pick the first version it finds in the list</text>
  </message>
  <message>
    <ts>2017-07-23T18:41:50.307391</ts>
    <user>U628K7XGQ</user>
    <text>there's only one</text>
  </message>
  <message>
    <ts>2017-07-23T18:41:53.307641</ts>
    <user>U5ZAJ15P0</user>
    <text>ok…</text>
  </message>
  <message>
    <ts>2017-07-23T18:42:29.310410</ts>
    <user>U5ZAJ15P0</user>
    <text>@mention me if you find a solution please, I am curious :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-23T18:44:05.317576</ts>
    <user>U628K7XGQ</user>
    <text>I will, thanks again</text>
  </message>
  <message>
    <ts>2017-07-23T18:47:49.335472</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U628K7XGQ&gt; can you Gist me the output of `lein deps :tree` ?</text>
  </message>
  <message>
    <ts>2017-07-23T18:48:08.337004</ts>
    <user>U628K7XGQ</user>
    <text>&lt;@U5ZAJ15P0&gt; I was able to get it working. I had to exclude cheshire manually and then re-add</text>
  </message>
  <message>
    <ts>2017-07-23T18:48:12.337360</ts>
    <user>U628K7XGQ</user>
    <text>I have no idea why that fixed things</text>
  </message>
  <message>
    <ts>2017-07-23T18:48:23.338276</ts>
    <user>U628K7XGQ</user>
    <text>i.e. 
```
[cheshire "5.6.3"]
[yada "1.2.6" :exclusions [ring-swagger cheshire]]
```</text>
  </message>
  <message>
    <ts>2017-07-23T18:48:29.338742</ts>
    <user>U5ZAJ15P0</user>
    <text>odd. Maybe some dependency cache going on</text>
  </message>
  <message>
    <ts>2017-07-23T18:48:36.339248</ts>
    <user>U5ZAJ15P0</user>
    <text>no idea how those things work in clojure/java</text>
  </message>
  <message>
    <ts>2017-07-23T18:48:38.339397</ts>
    <user>U5ZAJ15P0</user>
    <text>oh well</text>
  </message>
  <message>
    <ts>2017-07-23T18:48:51.340400</ts>
    <user>U628K7XGQ</user>
    <text>uberjar seems a bit brittle</text>
  </message>
  <message>
    <ts>2017-07-23T18:49:04.341461</ts>
    <user>U628K7XGQ</user>
    <text>but it looks like I can soon deploy something to Heroku and so my Sunday is complete</text>
  </message>
  <message>
    <ts>2017-07-23T18:49:16.342414</ts>
    <user>U5ZAJ15P0</user>
    <text>:100:</text>
  </message>
  <message>
    <ts>2017-07-23T18:50:44.349664</ts>
    <user>U628K7XGQ</user>
    <text>thanks for your help</text>
  </message>
  <message>
    <ts>2017-07-23T18:51:53.355168</ts>
    <user>U5ZAJ15P0</user>
    <text>You're welcome! Enjoy the rest of your evening</text>
  </message>
  <message>
    <ts>2017-07-23T19:13:27.464540</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U628K7XGQ&gt; AOT is the root of a lot of problems and is best avoided, if possible. As for dependency conflicts, that's pretty common the JVM world so I'm not surprised you had to add `:exclusions` -- Cheshire is a popular library and lots of other libraries depend on it so you can get any one of a whole bunch of different versions pulled in if you're not careful.</text>
  </message>
  <message>
    <ts>2017-07-23T19:13:53.466725</ts>
    <user>U628K7XGQ</user>
    <text>weird thing here: only yada really asked for it</text>
  </message>
  <message>
    <ts>2017-07-23T20:11:15.782606</ts>
    <user>U5ZAJ15P0</user>
    <text>Hey, what is the go-to Ring logger? &lt;https://github.com/nberger/ring-logger&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-23T23:55:26.602834</ts>
    <user>U65U08BB4</user>
    <text>noob question: ((fn [a b] [a b]) 1 2) eval to [1 2], (#(vector %1 %2) 1 2) eval to [1 2] too, why (#([%1 %2]) 1 2) got clojure.lang.ArityException: Wrong number of args (0) passed to: PersistentVector</text>
  </message>
  <message>
    <ts>2017-07-23T23:55:47.605709</ts>
    <user>U65U08BB4</user>
    <text>and what does (#(-&amp;gt; [%1 %2]) 1 2) mean?</text>
  </message>
  <message>
    <ts>2017-07-23T23:57:58.624549</ts>
    <user>U051SS2EU</user>
    <text>just like #(+ %1 %2) expands to (fn [x y] (+ x y)) #([%1 %2]) expands to (fn [x y] ([x y])) - #() keeps the outer parens</text>
  </message>
  <message>
    <ts>2017-07-23T23:58:36.630048</ts>
    <user>U051SS2EU</user>
    <text>`-&amp;gt;` is a macro also known as thread-first and it's being abused here to be able to use a vector literal where it would otherwise not work</text>
  </message>
  <message>
    <ts>2017-07-23T23:58:40.630583</ts>
    <user>U65U08BB4</user>
    <text>I got it~ so (#(do [%1 %2]) 1 2) works too</text>
  </message>
  <message>
    <ts>2017-07-23T23:59:00.633443</ts>
    <user>U051SS2EU</user>
    <text>yes - do is better than -&amp;gt; here (in this context do and -&amp;gt; are the same)</text>
  </message>
  <message>
    <ts>2017-07-23T23:59:26.637284</ts>
    <user>U65U08BB4</user>
    <text>so the [%1 %2] was evaled in place and used as the initial value of -&amp;gt;, but there is no further functions, so it got returned</text>
  </message>
  <message>
    <ts>2017-07-23T23:59:30.637943</ts>
    <user>U051SS2EU</user>
    <text>with more forms,-&amp;gt; would be writing each form into the one after it</text>
  </message>
  <message>
    <ts>2017-07-23T23:59:42.639527</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U65U08BB4&gt; exactly</text>
  </message>
  <message>
    <ts>2017-07-24T00:00:20.645855</ts>
    <user>U65U08BB4</user>
    <text>hmmm~ I thought about this, but was not very sure~ I thought it was kinda an abuse too~</text>
  </message>
  <message>
    <ts>2017-07-24T00:00:42.649575</ts>
    <user>U65U08BB4</user>
    <text>thanks~ &lt;@U051SS2EU&gt;~!</text>
  </message>
  <message>
    <ts>2017-07-24T02:03:48.749368</ts>
    <user>U5JEJN1CP</user>
    <text>Is there any sane way of handling repeated date conversions between java.sql.date and java.util.Date or should I give up and use timestamps instead (if that would be better)?  Every sql update query rotates the date back a full day because of the time zone getting chopped off and re-added.</text>
  </message>
  <message>
    <ts>2017-07-24T02:20:07.932756</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U5JEJN1CP&gt; The only sane solution is to have all your servers set to UTC and your database set to UTC, and work entirely in UTC date/times -- and only convert to/from local date/times on the fringe.</text>
  </message>
  <message>
    <ts>2017-07-24T02:20:36.938530</ts>
    <user>U5JEJN1CP</user>
    <text>I was afraid it would be something like that.</text>
  </message>
  <message>
    <ts>2017-07-24T02:20:46.940410</ts>
    <user>U04V70XH6</user>
    <text>Our data center is East Coast and we have _everything_ set to UTC across the board.</text>
  </message>
  <message>
    <ts>2017-07-24T02:21:32.949649</ts>
    <user>U5JEJN1CP</user>
    <text>Thanks</text>
  </message>
  <message>
    <ts>2017-07-24T02:23:56.977188</ts>
    <user>U04V70XH6</user>
    <text>What database are you using?</text>
  </message>
  <message>
    <ts>2017-07-24T02:27:12.016448</ts>
    <user>U5JEJN1CP</user>
    <text>Postgres.  Wanted to use datomic, but my organization's purchasing rules wouldn't allow it without too many headaches.</text>
  </message>
  <message>
    <ts>2017-07-24T02:28:00.026385</ts>
    <user>U04V70XH6</user>
    <text>I don't know about Postgres but with MySQL you have to explicitly set the DB to UTC separately from the O/S. Just FYI.</text>
  </message>
  <message>
    <ts>2017-07-24T02:28:31.033055</ts>
    <user>U5JEJN1CP</user>
    <text>Thanks, I'm digging into the docs now to figure it out.</text>
  </message>
  <message>
    <ts>2017-07-24T03:07:13.574121</ts>
    <user>U3JURM9B6</user>
    <text>I'm not a big fan of how the javadoc UI works for browing java functions.</text>
  </message>
  <message>
    <ts>2017-07-24T03:07:26.577639</ts>
    <user>U3JURM9B6</user>
    <text>Is there a clojure library for parsing javadocs into clojure data (so I can build my own search system) ?</text>
  </message>
  <message>
    <ts>2017-07-24T03:12:47.661943</ts>
    <user>U050SC7SV</user>
    <text>dont think so, that'd be a useful library tho :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T05:14:34.124797</ts>
    <user>U051HUZLD</user>
    <text>greetings,
[finite state machines] can anyone describe the difference between "composite state" and "(sub) machine"?
UML spec says those are basically the same thing, however, there are 2 names, which is suspicious:
```A submachine State implies a macro-like insertion of the specification of the corresponding submachine StateMachine. It is, therefore, semantically equivalent to a composite State. The Regions of the submachine StateMachine are the Regions of the composite State.```</text>
  </message>
  <message>
    <ts>2017-07-24T06:23:03.611633</ts>
    <user>U3TSNPRT9</user>
    <text>I'm trying to "live at the REPL" more. One common debugging issue is how to quickly evaluate forms within functions or let bindings, where the symbols are not defined. ProtoREPL has a whole feature around this, and it looks like Cider does too.... (We use Cursive as we've come from a Java shop and deal with lots of Java code still.) Is this something people use a lot? Is there a repl independent approach to this?</text>
  </message>
  <message>
    <ts>2017-07-24T06:36:49.875263</ts>
    <user>U0567Q30W</user>
    <text>&lt;@U3TSNPRT9&gt; You should be able to do this in Cursive - if there's something missing (or if you have a link to some doc about ProtoREPL's approach to this) I'd be very interested to see it.</text>
  </message>
  <message>
    <ts>2017-07-24T06:37:26.886732</ts>
    <user>U0567Q30W</user>
    <text>You can select any form and that will be sent, or there's the "Send form before caret" action. Cursive doesn't do anything clever with missing symbols though, is that what you're referring to?</text>
  </message>
  <message>
    <ts>2017-07-24T06:39:36.926639</ts>
    <user>U3TSNPRT9</user>
    <text>Sorry I meant to quote this discussion &lt;https://github.com/clojure-emacs/cider/issues/1809&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T06:42:28.979135</ts>
    <user>U0567Q30W</user>
    <text>&lt;@U3TSNPRT9&gt; So that's sort of what I had in mind. If you send a form for evaluation, I can check if any of its bindings are not defined in that form. I had envisioned a popup dialog when you evaluate the form which would allow you to enter a value for each one. Does that sound like what you had in mind?</text>
  </message>
  <message>
    <ts>2017-07-24T06:43:00.988918</ts>
    <user>U3TSNPRT9</user>
    <text>That sounds nice :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T06:43:22.995586</ts>
    <user>U0567Q30W</user>
    <text>Definitely. Could you file an issue for that and I'll see what I can do?</text>
  </message>
  <message>
    <ts>2017-07-24T06:47:54.078620</ts>
    <user>U3TSNPRT9</user>
    <text>I think this is related to tracing though. In protorepl (sorry to mention the competition!) you stick a (save) form in your code and it can remember values flowing through code as a test runs say, and then you can def these values so you can evaluate forms and debug as you go.</text>
  </message>
  <message>
    <ts>2017-07-24T06:50:45.129751</ts>
    <user>U0567Q30W</user>
    <text>No problem at all, ProtoREPL is awesome, it's by far my second favourite Clojure environment :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T06:51:37.145687</ts>
    <user>U0567Q30W</user>
    <text>Ok, I see - I think that should be possible. One issue with that is that IntelliJ's ability to paint things over the editor isn't as slick as Atom's yet.</text>
  </message>
  <message>
    <ts>2017-07-24T06:51:53.150315</ts>
    <user>U0567Q30W</user>
    <text>But that's just a UI issue that can be worked around.</text>
  </message>
  <message>
    <ts>2017-07-24T07:02:09.339902</ts>
    <user>U0NBGRGD6</user>
    <text>Hi, how to do optimistic locking in `java.jdbc`, write a sql that update by id and version field?</text>
  </message>
  <message>
    <ts>2017-07-24T07:05:09.394645</ts>
    <user>U3TSNPRT9</user>
    <text>&lt;@U0567Q30W&gt; I think tools like this would really help the team debug efficiently. Experienced Java developers used to debuggers balk at the debugging approaches we resort to - still generally sprinkling printlns in the code. We know evaluating forms in the REPL is the way, but it feels like it's hard work to be efficient. Not sure if Sayid's approach to tracing, where every function call's arguments is saved is too "omniscient" or could be drawn upon? &lt;https://github.com/jasongilman/proto-repl-sayid&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T07:05:53.407569</ts>
    <user>U0567Q30W</user>
    <text>Sure, I think Sayid is great too - there are lots of different ways to skin the cat.</text>
  </message>
  <message>
    <ts>2017-07-24T07:06:07.411692</ts>
    <user>U0567Q30W</user>
    <text>Cursive does offer a traditional Java-style debugger, FWIW</text>
  </message>
  <message>
    <ts>2017-07-24T07:06:22.416117</ts>
    <user>U0567Q30W</user>
    <text>It works very well, with some caveats.</text>
  </message>
  <message>
    <ts>2017-07-24T07:11:27.503439</ts>
    <user>U3TSNPRT9</user>
    <text>Yes - perhaps I should stop being so purist and get better at using it!</text>
  </message>
  <message>
    <ts>2017-07-24T07:12:09.515356</ts>
    <user>U0567Q30W</user>
    <text>It's essential to my work, definitely. Fortunately we don't have to choose, we can have both!</text>
  </message>
  <message>
    <ts>2017-07-24T07:37:21.957891</ts>
    <user>U5NMX95UJ</user>
    <text>hey, I have a function `f` that calls `g`, and `g` calls `f`, how to order `defn's` so the compiler knows about all definitions?</text>
  </message>
  <message>
    <ts>2017-07-24T07:38:18.974871</ts>
    <user>U0T4T70KB</user>
    <text>Declare</text>
  </message>
  <message>
    <ts>2017-07-24T07:38:38.981336</ts>
    <user>U0T4T70KB</user>
    <text>`declare` I mean</text>
  </message>
  <message>
    <ts>2017-07-24T07:38:44.983087</ts>
    <user>U5NMX95UJ</user>
    <text>&lt;@U0T4T70KB&gt; that's it, thanks</text>
  </message>
  <message>
    <ts>2017-07-24T07:40:33.015338</ts>
    <user>U6BQSDQRE</user>
    <text>Hello. I'm trying to set up a project for both client and server development, using compojure and http-kit. Since I already had a project going, I decided to modify my own `project.clj` to match the the one I would get using `lein new compojure ..`, but I'm getting some errors from ring regarding jetty. Here is my `project.clj`: &lt;https://gist.github.com/dea054c015658d4ed3295b40b12c8fd5&gt;

Here are the errors: &lt;https://gist.github.com/f3f62cb6633979ebbfb849a8b6b20861&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T07:40:42.018195</ts>
    <user>U6BQSDQRE</user>
    <text>This is upon running `lein ring server`</text>
  </message>
  <message>
    <ts>2017-07-24T07:42:42.054553</ts>
    <user>U6BQSDQRE</user>
    <text>I also just noticed that `lein deps :tree` seems to output a good deal of warnings regarding my dependencies. I'm honestly not sure what the best way to fix that would be, so I'll post that as well: &lt;https://gist.github.com/87f04f1805c2cc20e1dee2a9defe0462&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T08:02:59.436798</ts>
    <user>U6BQSDQRE</user>
    <text>Hmm. This seems to have something to do with datomic. I added exclusions like this: `[com.datomic/clj-client "0.8.606" :exclusions [org.eclipse.jetty/jetty-http]]` and eventually got it to run. Now the `lein ring` server starts but attempting to connect to it just results in a connection reset</text>
  </message>
  <message>
    <ts>2017-07-24T08:13:02.638688</ts>
    <user>U5ZAJ15P0</user>
    <text>Why does `(if-let [x y] ...)` expands to
```
(let*
 [temp__4655__auto__ y]
 (if temp__4655__auto__ (clojure.core/let [x temp__4655__auto__] ...) nil))
```
and not to
```
(let [x y]
  (if x ...))
```
?</text>
  </message>
  <message>
    <ts>2017-07-24T08:28:47.975497</ts>
    <user>U06F82LES</user>
    <text>so that `x` doesn't have to be re-evaluated multiple times</text>
  </message>
  <message>
    <ts>2017-07-24T08:29:31.992024</ts>
    <user>U06F82LES</user>
    <text>Different question: Is this an ok way to access both the first arg and all args? `(fn [&amp;amp; [head :as all]])`</text>
  </message>
  <message>
    <ts>2017-07-24T08:31:28.034728</ts>
    <user>U5ZAJ15P0</user>
    <text>how would x be re-evaluated multiple times in that scenario?</text>
  </message>
  <message>
    <ts>2017-07-24T08:57:15.660566</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U06F82LES&gt; ^</text>
  </message>
  <message>
    <ts>2017-07-24T08:59:33.722944</ts>
    <user>U06F82LES</user>
    <text>```user=&amp;gt; (macroexpand-1 '(if-let [x (do (prn :foo) true)] [x x] (prn :no)))
(clojure.core/let [temp__6751__auto__ (do (prn :foo) true)] (if temp__6751__auto__ (clojure.core/let [x temp__6751__auto__] [x x]) (prn :no)))```</text>
  </message>
  <message>
    <ts>2017-07-24T09:00:18.745412</ts>
    <user>U06F82LES</user>
    <text>i.e. in cases where `x` is used in the body of the if-let</text>
  </message>
  <message>
    <ts>2017-07-24T09:34:45.797023</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U06F82LES&gt; it still wouldn't get evaluated multiple times with
```
(let [x (do (prn :foo) true)] (if x [x x]))
```</text>
  </message>
  <message>
    <ts>2017-07-24T09:34:57.803167</ts>
    <user>U5ZAJ15P0</user>
    <text>?</text>
  </message>
  <message>
    <ts>2017-07-24T09:50:09.315227</ts>
    <user>U06F82LES</user>
    <text>isn't that pretty much what the actual implementation does?</text>
  </message>
  <message>
    <ts>2017-07-24T09:52:37.404142</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U5ZAJ15P0&gt; that binds `x` in the else branch</text>
  </message>
  <message>
    <ts>2017-07-24T09:52:41.406552</ts>
    <user>U060FKQPN</user>
    <text>`if-let` doesn't</text>
  </message>
  <message>
    <ts>2017-07-24T09:52:52.412534</ts>
    <user>U060FKQPN</user>
    <text>that's what the extra local binding is for</text>
  </message>
  <message>
    <ts>2017-07-24T09:53:00.417813</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U060FKQPN&gt; oh, I see. that makes sense; thanks!</text>
  </message>
  <message>
    <ts>2017-07-24T10:41:23.244153</ts>
    <user>U5ZAJ15P0</user>
    <text>I am getting a StackOverflow error when trying to use log4j with Leiningen, could someone please take a look at the stacktrace? &lt;https://gist.github.com/hmaurer/40c1bc6d08550222f65e06a6366f0eb9&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T10:44:37.368436</ts>
    <user>U5ZAJ15P0</user>
    <text>fixed it by removing a few dependencies… still strange though, I would like to understand why simply adding dependencies to project.clj could cause a stackoverflow error when launching the repl</text>
  </message>
  <message>
    <ts>2017-07-24T10:52:05.662452</ts>
    <user>U0739PUFQ</user>
    <text>Hi everyone, I've been doing some experiments on visualizing clojure.spec fails and ended up wrapping them in a library</text>
  </message>
  <message>
    <ts>2017-07-24T10:52:08.664542</ts>
    <user>U0739PUFQ</user>
    <text>&lt;https://github.com/jpmonettas/inspectable&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T10:52:55.695805</ts>
    <user>U0739PUFQ</user>
    <text>maybe it's useful to someone else</text>
  </message>
  <message>
    <ts>2017-07-24T11:40:53.596818</ts>
    <user>U6BQSDQRE</user>
    <text>Given that I have figwheel set up to use a ring handler via `:ring-handler`, and that handler is also set to auto reload via `ring.middlware.reload/reload`, is there some way I can make it reload *everything*? Basically restart the whole deal. I'm working with a library called `sente` which is for websocket communications, and it doesn't look like the code that initializes everything related to that is being re-run, so it's kind of painful to iterate.</text>
  </message>
  <message>
    <ts>2017-07-24T11:44:49.748466</ts>
    <user>U0739PUFQ</user>
    <text>what I do is put all the code that has a lifecycle into &lt;https://github.com/stuartsierra/component&gt; so I have a way to restart the entire thing</text>
  </message>
  <message>
    <ts>2017-07-24T11:47:02.834254</ts>
    <user>U6BQSDQRE</user>
    <text>&lt;@U0739PUFQ&gt; Hmm, alright. I'll see if I can whip something up that works. Thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T11:47:54.867948</ts>
    <user>U0739PUFQ</user>
    <text>don't know if you are currently using something like components or mount</text>
  </message>
  <message>
    <ts>2017-07-24T11:48:07.876257</ts>
    <user>U0739PUFQ</user>
    <text>but I've done that with sente</text>
  </message>
  <message>
    <ts>2017-07-24T11:49:29.929433</ts>
    <user>U0739PUFQ</user>
    <text>you create something like a web-server component, and in the start/stop of that component you start/stop http-kit server, sente channels etc</text>
  </message>
  <message>
    <ts>2017-07-24T11:50:04.953033</ts>
    <user>U6BQSDQRE</user>
    <text>Nah, not using anything like that. I'm pretty new to all of this, so still trying to figure out best practices and what people are doing etc.

Okay, I see. Is it possible to get that to play well with figwheel using `:ring-handler`?</text>
  </message>
  <message>
    <ts>2017-07-24T11:52:18.042658</ts>
    <user>U0739PUFQ</user>
    <text>I mean, if you move all the stuff that deals with state into components, and then create a system(a bunch of components) you end up with a restart fn you can use wherever you want</text>
  </message>
  <message>
    <ts>2017-07-24T11:52:56.067163</ts>
    <user>U0739PUFQ</user>
    <text>I never fired it from that reload middleware but can't see any issues with that</text>
  </message>
  <message>
    <ts>2017-07-24T11:53:36.093384</ts>
    <user>U6BQSDQRE</user>
    <text>I see. I guess I just don't quite grok how all these things work together. But I'm sure I can come up with something from what you've told me. Thanks!</text>
  </message>
  <message>
    <ts>2017-07-24T14:14:35.121262</ts>
    <user>U3J7HSKNC</user>
    <text>does anyone have a pro-tip/link to an example of using core.async with ring? or some other http server? like how does one wait for input on a channel and flush said result to a response?</text>
  </message>
  <message>
    <ts>2017-07-24T14:16:37.192755</ts>
    <user>U051SS2EU</user>
    <text>aleph actually has an async request handler infrastructure - and it uses manifold that is designed to integrate easily with core.async</text>
  </message>
  <message>
    <ts>2017-07-24T14:17:03.208049</ts>
    <user>U051SS2EU</user>
    <text>if you use eg. jetty your async code will run but there will still be a blocking thread per request until you respond</text>
  </message>
  <message>
    <ts>2017-07-24T14:17:51.236296</ts>
    <user>U051SS2EU</user>
    <text>the real question I guess is why you are using async, then you can use that answer to guide how you integrate that with a ring server</text>
  </message>
  <message>
    <ts>2017-07-24T14:19:13.283670</ts>
    <user>U051SS2EU</user>
    <text>for the go-loop as you show it, you end up with a single block of code that can only deal with one request at a time - there's valid reasons to do this sometimes but it's a pretty severe bottleneck</text>
  </message>
  <message>
    <ts>2017-07-24T14:19:19.287478</ts>
    <user>U3J7HSKNC</user>
    <text>awesome - I will look into aleph. I was thinking of using core.async as a general abstraction on input/output</text>
  </message>
  <message>
    <ts>2017-07-24T14:19:55.308010</ts>
    <user>U3J7HSKNC</user>
    <text>something like that</text>
  </message>
  <message>
    <ts>2017-07-24T14:20:12.318090</ts>
    <user>U051SS2EU</user>
    <text>when I say "one request at a time in the block" I mean globally, only one of your requests can be in that block - so if you have five concurrent clients, it takes 5x as long to complete</text>
  </message>
  <message>
    <ts>2017-07-24T14:20:37.333380</ts>
    <user>U051SS2EU</user>
    <text>which usually isn't the kind of behavior you want in a web server at all</text>
  </message>
  <message>
    <ts>2017-07-24T14:20:44.337186</ts>
    <user>U3J7HSKNC</user>
    <text>yeah :confused:</text>
  </message>
  <message>
    <ts>2017-07-24T14:21:13.354569</ts>
    <user>U3J7HSKNC</user>
    <text>trying to figure out how to use the results of `(&amp;gt;! out)` in that example</text>
  </message>
  <message>
    <ts>2017-07-24T14:21:31.365419</ts>
    <user>U051SS2EU</user>
    <text>with manifold, you can set up a function that gets called with an input channel and an output channel, and it is instantiated as many times as you get requests, which is a more reasonable pattern of behavior</text>
  </message>
  <message>
    <ts>2017-07-24T14:22:27.398668</ts>
    <user>U5ZAJ15P0</user>
    <text>Is there a way to quickly run tests when a file changes? Manually running `lein test` takes about 10s to boot for me, and using &lt;https://github.com/weavejester/lein-auto&gt; take the same time</text>
  </message>
  <message>
    <ts>2017-07-24T14:22:46.409628</ts>
    <user>U5ZAJ15P0</user>
    <text>I assume the delay is coming from the jvm boot time, but I don't know how to avoid it</text>
  </message>
  <message>
    <ts>2017-07-24T14:23:12.424797</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; fyi lein test just uses clojure.test, and you can require that and run `(clojure.test/run-all-tests)` in your repl (after requiring your test namespaces of course)</text>
  </message>
  <message>
    <ts>2017-07-24T14:23:28.433871</ts>
    <user>U050MP39D</user>
    <text>&lt;@U5ZAJ15P0&gt; I'd recommend running tests from a persistent repl, and using something like clojure.tools.namespace to ensure code is reloaded and up to date</text>
  </message>
  <message>
    <ts>2017-07-24T14:23:41.441858</ts>
    <user>U051SS2EU</user>
    <text>you could hook up the run-all-tests to run as part of your system refresh if you have such defined</text>
  </message>
  <message>
    <ts>2017-07-24T14:24:00.452761</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; ah, good point. Thanks!</text>
  </message>
  <message>
    <ts>2017-07-24T14:24:22.465960</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks! hadn't thought of that</text>
  </message>
  <message>
    <ts>2017-07-24T14:25:11.494390</ts>
    <user>U050MP39D</user>
    <text>fwiw, I always have something like this in user.clj
```
(defn run-unit-tests []
  (repl/refresh)
  (test/run-all-tests #"^project-ns.*$"))
```</text>
  </message>
  <message>
    <ts>2017-07-24T14:25:12.495255</ts>
    <user>U5ZAJ15P0</user>
    <text>are there any "good practice" I should be aware of regarding testing clojure? (either tools/libs or approaches). Or should I just get started with clojure.test?</text>
  </message>
  <message>
    <ts>2017-07-24T14:25:28.504710</ts>
    <user>U050MP39D</user>
    <text>I also use Cursive to run single test files a lot</text>
  </message>
  <message>
    <ts>2017-07-24T14:26:24.537447</ts>
    <user>U5ZAJ15P0</user>
    <text>Also, is it advisable to place pre/post conditions on every "core"  functions of an app? Including spec checks on arguments.</text>
  </message>
  <message>
    <ts>2017-07-24T14:26:58.558070</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U050MP39D&gt; I am trying to avoid Cursive for now to get a first-hand experience on clojure, and not have too much hidden behind IDE magic</text>
  </message>
  <message>
    <ts>2017-07-24T14:27:03.561015</ts>
    <user>U5ZAJ15P0</user>
    <text>but I'll definitely try it out at some point</text>
  </message>
  <message>
    <ts>2017-07-24T14:27:41.583496</ts>
    <user>U050MP39D</user>
    <text>that's fair, and to do what cursive does without cursive it's basically just (do (repl/refresh) (test/run-test ...))</text>
  </message>
  <message>
    <ts>2017-07-24T14:28:20.606186</ts>
    <user>U050MP39D</user>
    <text>repl in this case is clojure.tools.namespace.repl and test is clojure.test</text>
  </message>
  <message>
    <ts>2017-07-24T14:31:07.704141</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U050MP39D&gt; yep, right now I have a function "reload" which calls clojure.tools.namespace.repl/refresh, as well as restarts my system</text>
  </message>
  <message>
    <ts>2017-07-24T14:31:11.706669</ts>
    <user>U5ZAJ15P0</user>
    <text>I guess I can just run the tests there</text>
  </message>
  <message>
    <ts>2017-07-24T14:36:05.878115</ts>
    <user>U051SS2EU</user>
    <text>one thing to keep in mind is that testing functional code is easier than what you are probably used to</text>
  </message>
  <message>
    <ts>2017-07-24T14:36:34.895297</ts>
    <user>U051SS2EU</user>
    <text>good functional design in general separates the mutable / side effecting source and sink of your data from the immutable guts</text>
  </message>
  <message>
    <ts>2017-07-24T14:36:59.909625</ts>
    <user>U051SS2EU</user>
    <text>if you do that right, you can unit test the immutable guts easily, and separately verify that the mutable input and output logic works</text>
  </message>
  <message>
    <ts>2017-07-24T14:37:26.925327</ts>
    <user>U051SS2EU</user>
    <text>where the input and output would likely be integration tests, or even better they can be verified by the tests on the separate code implementing the i/o</text>
  </message>
  <message>
    <ts>2017-07-24T14:37:58.943565</ts>
    <user>U3J7HSKNC</user>
    <text>aleph + manifold seems to be the ticket. many thanks for pointing me in that direction :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T14:38:39.967058</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; what that looks like in the big picture is a bunch of immutable code that does no io or side effects, and a top level "driver" that connects that to data - which can easily be subbed out by a lambda or direct function argument in your test</text>
  </message>
  <message>
    <ts>2017-07-24T14:40:09.017957</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; Ok, I'll try to follow that idea. I have done some FP before so it's not completely unfamiliar. The app I am currently working on is very much CRUD, so I don't think there will be that much distinction to make betwen i/o code and pure functions (almost everything does i/o)</text>
  </message>
  <message>
    <ts>2017-07-24T14:40:21.024588</ts>
    <user>U5ZAJ15P0</user>
    <text>Last but not least, is Midje worth looking into?</text>
  </message>
  <message>
    <ts>2017-07-24T14:40:35.032941</ts>
    <user>U051SS2EU</user>
    <text>I don't like midje at all</text>
  </message>
  <message>
    <ts>2017-07-24T14:41:03.049023</ts>
    <user>U051SS2EU</user>
    <text>some people like it, especially if they are used to that kind of dsl for testing</text>
  </message>
  <message>
    <ts>2017-07-24T14:41:30.064703</ts>
    <user>U050MP39D</user>
    <text>I like midje. but it wasn't widely embraced and the lead developer is done with clojure. I would not start a new project with it</text>
  </message>
  <message>
    <ts>2017-07-24T14:41:31.065298</ts>
    <user>U5ZAJ15P0</user>
    <text>so according to you, clojure.test is all I need to get going?</text>
  </message>
  <message>
    <ts>2017-07-24T14:41:54.078182</ts>
    <user>U051SS2EU</user>
    <text>yeah - but there are some nice additions to it, like difftest</text>
  </message>
  <message>
    <ts>2017-07-24T14:42:14.089027</ts>
    <user>U5ZAJ15P0</user>
    <text>where is he gone to?</text>
  </message>
  <message>
    <ts>2017-07-24T14:42:24.095284</ts>
    <user>U051SS2EU</user>
    <text>expectations is decent too</text>
  </message>
  <message>
    <ts>2017-07-24T14:42:29.098012</ts>
    <user>U07TDTQNL</user>
    <text>Elixir</text>
  </message>
  <message>
    <ts>2017-07-24T14:43:00.116009</ts>
    <user>U5ZAJ15P0</user>
    <text>Alright, thanks! Also, what's your stand on using pre/post conditions on functions. Is that something that should be done?</text>
  </message>
  <message>
    <ts>2017-07-24T14:43:22.128758</ts>
    <user>U07TDTQNL</user>
    <text>I'd stick with spec for that sort of thing, it's pretty much pre/post v 2.0</text>
  </message>
  <message>
    <ts>2017-07-24T14:43:54.146736</ts>
    <user>U051SS2EU</user>
    <text>I found problems where they were being missed at dev time and caught things at run time, and they throw AssertionError which our try/catch blocks weren't catching which led to annoying hard to debug failures</text>
  </message>
  <message>
    <ts>2017-07-24T14:44:14.158396</ts>
    <user>U051SS2EU</user>
    <text>(especially inside futures and go blocks)</text>
  </message>
  <message>
    <ts>2017-07-24T14:44:54.181703</ts>
    <user>U07TDTQNL</user>
    <text>on the subject of testing though, what I like in a testing lib is utter simplicity. A testing framework really only needs to be about 100 lines of Clojure code. Clojure.test is about 500 but that's mostly cruft that could be stripped out (by breaking backwards compatibility).</text>
  </message>
  <message>
    <ts>2017-07-24T14:45:47.212582</ts>
    <user>U051SS2EU</user>
    <text>yeah, I find if something is hard to test with clojure.test that's a sign my code is too "fancy" for its own good and the easier to test code is better</text>
  </message>
  <message>
    <ts>2017-07-24T14:46:39.242466</ts>
    <user>U07TDTQNL</user>
    <text>Also, if you find code that re-defs vars for testing/mocking that's a bit of a code-smell, imo. It's not always avoidable, but the cases when you need `with-redefs` or the like should be really rare.</text>
  </message>
  <message>
    <ts>2017-07-24T14:49:13.331300</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U07TDTQNL&gt; good point, when I read about with-redefs it did seem to be like a "better avoid if possible" construct</text>
  </message>
  <message>
    <ts>2017-07-24T14:50:00.358901</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U5ZAJ15P0&gt; what editor are you using?</text>
  </message>
  <message>
    <ts>2017-07-24T14:50:05.361692</ts>
    <user>U5ZAJ15P0</user>
    <text>regarding the short test lib I just wanted to make sure. Some other languages tend to have rather large "testing frameworks", and while clojure.test seemed enough it felt a bit like cheating</text>
  </message>
  <message>
    <ts>2017-07-24T14:50:11.365219</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U07TDTQNL&gt; Atom at the moment</text>
  </message>
  <message>
    <ts>2017-07-24T14:50:18.369865</ts>
    <user>U07TDTQNL</user>
    <text>Some like Cursive (and I think Cider as well) have keybindings for running tests via a IDE command</text>
  </message>
  <message>
    <ts>2017-07-24T14:50:24.373531</ts>
    <user>U5ZAJ15P0</user>
    <text>Intentionally avoiding deep editor integrations (Cursive and Cider) for now</text>
  </message>
  <message>
    <ts>2017-07-24T14:51:03.396207</ts>
    <user>U07TDTQNL</user>
    <text>fair enough, so yeah, you can send across run-all-tests or write some sort of editor macro that dumps that into a repl for you</text>
  </message>
  <message>
    <ts>2017-07-24T14:51:23.407761</ts>
    <user>U07TDTQNL</user>
    <text>Something like that could be coded with emacs+inferior lisp with about 10 lines of code, so I assume Atom would be close to the same.</text>
  </message>
  <message>
    <ts>2017-07-24T14:51:52.424886</ts>
    <user>U07TDTQNL</user>
    <text>I also bind CTRL+` to "send the sexpr under the cursor to the repl". That's also a big time saver.</text>
  </message>
  <message>
    <ts>2017-07-24T14:52:34.449447</ts>
    <user>U69US8BKQ</user>
    <text>I've been using Midje lately but have found some bad issues. One being dependency errors get swallowed and are a pain to fix.</text>
  </message>
  <message>
    <ts>2017-07-24T14:56:03.571272</ts>
    <user>U07TDTQNL</user>
    <text>For better or worse, Midje is a DSL, your tests aren't written in Clojure they're written in a Midje testing language. And yes, that can be the source of a lot of confusing errors.</text>
  </message>
  <message>
    <ts>2017-07-24T15:00:29.726537</ts>
    <user>U69US8BKQ</user>
    <text>What do you use?</text>
  </message>
  <message>
    <ts>2017-07-24T15:02:54.809552</ts>
    <user>U050MP39D</user>
    <text>simplicity is great but it kind of sucks that midje had better tooling baked in 2 years ago than exists for clojure.test at all today</text>
  </message>
  <message>
    <ts>2017-07-24T15:03:32.830326</ts>
    <user>U07TDTQNL</user>
    <text>what sort of tooling?</text>
  </message>
  <message>
    <ts>2017-07-24T15:03:50.840101</ts>
    <user>U050MP39D</user>
    <text>the midje repl tools, autotest for one</text>
  </message>
  <message>
    <ts>2017-07-24T15:04:14.853613</ts>
    <user>U07TDTQNL</user>
    <text>As mentioned things like auto-runners are a bit pointless in Clojure because there shouldn't be a reason to restart the repl</text>
  </message>
  <message>
    <ts>2017-07-24T15:04:28.861203</ts>
    <user>U050MP39D</user>
    <text>eh?</text>
  </message>
  <message>
    <ts>2017-07-24T15:04:32.862945</ts>
    <user>U07TDTQNL</user>
    <text>it's more of a design difference than a lack of tooling.</text>
  </message>
  <message>
    <ts>2017-07-24T15:04:35.865087</ts>
    <user>U050MP39D</user>
    <text>the midje autotest ran at the repl</text>
  </message>
  <message>
    <ts>2017-07-24T15:05:18.889138</ts>
    <user>U07TDTQNL</user>
    <text>interesting, I never had it running that way, but honestly I'd be a bit nervous of something auto-running my code whenever I change it.</text>
  </message>
  <message>
    <ts>2017-07-24T15:05:27.894352</ts>
    <user>U050MP39D</user>
    <text>midje: at repl (midje.repl/autotest)
clojure.test: ? need some leiningen plugin thing which is bound to break with other lein plugins</text>
  </message>
  <message>
    <ts>2017-07-24T15:05:40.901225</ts>
    <user>U07TDTQNL</user>
    <text>Woudln't want to accidentally type `(sh/sh "rm -rf foo")` then accidentally delete 3 characters from that string ^^</text>
  </message>
  <message>
    <ts>2017-07-24T15:06:41.934260</ts>
    <user>U050MP39D</user>
    <text>... I mean. test autorunners have been around since junit and I've literally never heard of someone managing that (not saying it's not possible, but sheesh)</text>
  </message>
  <message>
    <ts>2017-07-24T15:07:29.959632</ts>
    <user>U07TDTQNL</user>
    <text>So to make it a bit more concrete, my workflow is this: 
* Edit some code
* Send it to the repl with either "send form" or "reload current namespace in repl"
* Test the code I just sent by hand, normally with a few bits of code I keep in a `(comments ...)` block
* Once it appears to work, I switch to the test namespace and re-run all the tests, or maybe just the tests I care about (keybindings for that)</text>
  </message>
  <message>
    <ts>2017-07-24T15:08:15.984507</ts>
    <user>U07TDTQNL</user>
    <text>But with a REPL you end up doing a lot lest test-driven development. It's not "write test", "write code". It's more like "write spec", "write code", "play in repl", "fix code", "write a test if it needs to exist".</text>
  </message>
  <message>
    <ts>2017-07-24T15:08:46.000669</ts>
    <user>U050MP39D</user>
    <text>that is also my workflow, but having worked with good autorunners before I can say from experience a good autorunner is still an improvement to that workflow</text>
  </message>
  <message>
    <ts>2017-07-24T15:09:23.020492</ts>
    <user>U07TDTQNL</user>
    <text>But how much time does that save? Like 3 sec every 10 min?</text>
  </message>
  <message>
    <ts>2017-07-24T15:10:27.053963</ts>
    <user>U050MP39D</user>
    <text>I mean, that would add up to quite a lot over a year programming</text>
  </message>
  <message>
    <ts>2017-07-24T15:11:39.092438</ts>
    <user>U050MP39D</user>
    <text>honestly if it worked well it would probably add up to more though. my test suite takes longer than a 3s difference between the full suite and the "tests affected" set for most things</text>
  </message>
  <message>
    <ts>2017-07-24T15:12:58.135444</ts>
    <user>U07TDTQNL</user>
    <text>That's kindof my point though, when I'm trying to fix a specific bug, I run all the tests, then pick one failing one, and make that work. Whenever I make a code change I rerun only that single test.</text>
  </message>
  <message>
    <ts>2017-07-24T15:14:16.177334</ts>
    <user>U050MP39D</user>
    <text>which is what an autorunner does for you. I'm not sure I understand the objection to having the computer do it instead of doing it yourself</text>
  </message>
  <message>
    <ts>2017-07-24T15:14:27.183250</ts>
    <user>U07TDTQNL</user>
    <text>Because the computer won't do it right</text>
  </message>
  <message>
    <ts>2017-07-24T15:15:14.208577</ts>
    <user>U07TDTQNL</user>
    <text>And if there's one thing that utterly kills my productivity, it's making a change and then seeing that a test didn't pass due to stale code.</text>
  </message>
  <message>
    <ts>2017-07-24T15:15:51.228364</ts>
    <user>U050MP39D</user>
    <text>when I used these things back in ruby days, the vast majority of the time it did. when it didn't there was nothing stopping me manually intervening</text>
  </message>
  <message>
    <ts>2017-07-24T15:15:59.232568</ts>
    <user>U1LCB75M2</user>
    <text>There are more people maintaining Midje after Marick (we are big users of it where I work at).</text>
  </message>
  <message>
    <ts>2017-07-24T15:16:10.238434</ts>
    <user>U07TDTQNL</user>
    <text>Stuff like Java imports of deftypes, global state, multimethod dispatch functions, etc. All those things break most autorunners (even Midje in some cases)</text>
  </message>
  <message>
    <ts>2017-07-24T15:16:30.249609</ts>
    <user>U050MP39D</user>
    <text>those things break everything. tools.namespace, the repl, etc etc</text>
  </message>
  <message>
    <ts>2017-07-24T15:16:41.254959</ts>
    <user>U07TDTQNL</user>
    <text>not the repl though</text>
  </message>
  <message>
    <ts>2017-07-24T15:17:02.266003</ts>
    <user>U07TDTQNL</user>
    <text>the repl only does what I tell it to, so whenever I change a form I reload it. or the entire namespace.</text>
  </message>
  <message>
    <ts>2017-07-24T15:18:26.310667</ts>
    <user>U050MP39D</user>
    <text>that's not going to help you with any state referring to the old protocol. this is a well documented annoyance. whatever, fine, it all works perfectly for you. I'm just saying I've done the clojure workflow both with a good autotester and without and it was better with one</text>
  </message>
  <message>
    <ts>2017-07-24T15:18:38.317218</ts>
    <user>U050MP39D</user>
    <text>(for me)</text>
  </message>
  <message>
    <ts>2017-07-24T15:18:50.323189</ts>
    <user>U1LCB75M2</user>
    <text>While I can't speak for the future, in the short term it should be up-to-date.</text>
  </message>
  <message>
    <ts>2017-07-24T15:33:25.786361</ts>
    <user>U06DQC6MA</user>
    <text>lazy question: &lt;@U04V70XH6&gt; is there any notion of "business time" in clj-time?</text>
  </message>
  <message>
    <ts>2017-07-24T15:34:08.808643</ts>
    <user>U06DQC6MA</user>
    <text>in my past ruby life I used this: &lt;https://github.com/bokmann/business_time&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T16:07:24.893910</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U69US8BKQ&gt; clojure.test. And I wish it was simpler :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-24T16:07:53.909980</ts>
    <user>U07TDTQNL</user>
    <text>All a testing lib really needs is deftest (that generates a tagged function), some sort of smart assert, and a `run-all-tests`</text>
  </message>
  <message>
    <ts>2017-07-24T16:09:46.971523</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U69US8BKQ&gt; I'll put in Expectations which is more BDD in style than `clojure.test`'s assertion-based format -- and now supports all the `clojure.test` tooling.</text>
  </message>
  <message>
    <ts>2017-07-24T16:10:13.986044</ts>
    <user>U04V70XH6</user>
    <text>There's an &lt;#C2L9MU2RY|expectations&gt; channel if you have any questions.</text>
  </message>
  <message>
    <ts>2017-07-24T16:23:33.414969</ts>
    <user>U09LZR36F</user>
    <text>How is this? &lt;https://github.com/aruberto/business-time/blob/master/README.md&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T16:33:14.733098</ts>
    <user>U69US348Z</user>
    <text>&amp;lt;deleted&amp;gt;</text>
  </message>
  <message>
    <ts>2017-07-24T16:34:34.775783</ts>
    <user>U69US348Z</user>
    <text>Ah, sorry, I guess I'll delete that and post it to &lt;#C1B1BB2Q3|clojure-spec&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T16:42:55.041051</ts>
    <user>U04V70XH6</user>
    <text>Using that with &lt;https://github.com/dm3/clojure.java-time&gt; ought to get you what you need, fairly cleanly.</text>
  </message>
  <message>
    <ts>2017-07-24T16:43:26.057187</ts>
    <user>U04V70XH6</user>
    <text>FYI, at World Singles, we're slowly migrating away from clj-time to clojure.java-time (or just using Java Time directly).</text>
  </message>
  <message>
    <ts>2017-07-24T16:47:21.184465</ts>
    <user>U09LZR36F</user>
    <text>That's interesting. We've been making a similar move too.</text>
  </message>
  <message>
    <ts>2017-07-24T16:49:51.263297</ts>
    <user>U3L6TFEJF</user>
    <text>I have a Clojure design problem which I'd love some feedback on. I have a `SeriesStore` record and corresponding `SeriesStore` protocol. There are different stores for different accounts etc, so I need some way to create these stores. I'm considering two options:
1. Have a regular fn that is a closure around all dependencies of the store, and then pass that fn around
2. Create another record which contains all the dependencies, e.g `SeriesStoreFactory`, and then pass an instance of that record around.
i.e regular fn closure vs. record, which is preferable and why?</text>
  </message>
  <message>
    <ts>2017-07-24T16:50:42.290962</ts>
    <user>U04V70XH6</user>
    <text>See this &lt;https://github.com/clj-time/clj-time/issues/196#issuecomment-294067755&gt; -- and read the whole thread for background. It is a discussion around moving `clj-time` to JSR-310 and the pros and cons... and why, ultimately, I came out against the switch of implementation and why I would encourage folks to use `clojure.java-time` _instead_ of `clj-time` if they want to switch from Joda Time to Java Time.</text>
  </message>
  <message>
    <ts>2017-07-24T16:54:53.426761</ts>
    <user>U07TDTQNL</user>
    <text>Records almost always win &lt;@U3L6TFEJF&gt; for the simple reason that functions are opaque. Once you close over something with a function there's no way to introspect the closure to see what you closed over.</text>
  </message>
  <message>
    <ts>2017-07-24T16:55:25.444154</ts>
    <user>U07TDTQNL</user>
    <text>Sometimes you need that for debugging, other times just to do `keys` or to otherwise get the state out inside some function.</text>
  </message>
  <message>
    <ts>2017-07-24T16:57:53.524616</ts>
    <user>U3QUAHZJ6</user>
    <text>hello everyone while using `clojure.test` its possible to share data between tests?

something like

```
(def data (atom :none))
(deftest t1 ... (reset! data 10))
(deftest t2 ... (do-stuff 10))
```</text>
  </message>
  <message>
    <ts>2017-07-24T16:58:27.542257</ts>
    <user>U3QUAHZJ6</user>
    <text>(do-stuff data) *****</text>
  </message>
  <message>
    <ts>2017-07-24T16:59:16.568894</ts>
    <user>U5ZAJ15P0</user>
    <text>If I wish to set up some data that should be accessible to all tests (either set up once before all tests or set up and tear down before and after each test), how can I do it with clojure.test? with-fixtures doesn't appear to let me pass data down to the test. I could use a global atom but that seems nasty</text>
  </message>
  <message>
    <ts>2017-07-24T16:59:29.576226</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3QUAHZJ6&gt; oh wow, haha, I hadn't read your message before posting</text>
  </message>
  <message>
    <ts>2017-07-24T16:59:34.578670</ts>
    <user>U5ZAJ15P0</user>
    <text>looks like we have the exact same question</text>
  </message>
  <message>
    <ts>2017-07-24T17:00:12.599692</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U07TDTQNL&gt; sounds reasonable. but sometimes you want it opaque though? my main concern with records is that I want to keep it as functional as possible, and I worry that my code will start to look like OO if there are too many records all over the place. what's your experience on striking the right balance between records and fns?</text>
  </message>
  <message>
    <ts>2017-07-24T17:01:29.642895</ts>
    <user>U050MP39D</user>
    <text>&lt;@U3L6TFEJF&gt; records are still immutable. they're still functional</text>
  </message>
  <message>
    <ts>2017-07-24T17:01:55.657331</ts>
    <user>U2J4YH6BG</user>
    <text>&lt;@U3L6TFEJF&gt; in clojure Ive never been like, I wish I had less information at my disposal</text>
  </message>
  <message>
    <ts>2017-07-24T17:02:03.661849</ts>
    <user>U07TDTQNL</user>
    <text>Right, you got to separate out "is a protocol" from "looks like OOP"</text>
  </message>
  <message>
    <ts>2017-07-24T17:02:24.672940</ts>
    <user>U050MP39D</user>
    <text>polymorphism is orthogonal from "functional" imo</text>
  </message>
  <message>
    <ts>2017-07-24T17:02:26.674064</ts>
    <user>U2J4YH6BG</user>
    <text>also I would recommend checking out stuart sierra's component or weavejesters integrant</text>
  </message>
  <message>
    <ts>2017-07-24T17:02:49.685692</ts>
    <user>U07TDTQNL</user>
    <text>OOP = information hiding, local mutation, and inheritence</text>
  </message>
  <message>
    <ts>2017-07-24T17:02:58.690268</ts>
    <user>U07TDTQNL</user>
    <text>records and protocols don't do any of that.</text>
  </message>
  <message>
    <ts>2017-07-24T17:03:41.712459</ts>
    <user>U3L6TFEJF</user>
    <text>true, true. and I actually have polymorphism in this case, so I'll go with records. thanks for the input!</text>
  </message>
  <message>
    <ts>2017-07-24T17:04:13.729225</ts>
    <user>U3L6TFEJF</user>
    <text>&lt;@U2J4YH6BG&gt; I've tried the whole gamut of state management libs in clojure, I'm currently experimenting with &lt;https://github.com/vspinu/commix&gt; which I think is fantastic so far!</text>
  </message>
  <message>
    <ts>2017-07-24T17:04:31.738269</ts>
    <user>U2J4YH6BG</user>
    <text>:slightly_smiling_face: there are alot, I havent even heard of this option</text>
  </message>
  <message>
    <ts>2017-07-24T17:04:45.745268</ts>
    <user>U3L6TFEJF</user>
    <text>It's less than a week old :smile:</text>
  </message>
  <message>
    <ts>2017-07-24T17:04:52.749104</ts>
    <user>U2J4YH6BG</user>
    <text>sounds ready for production to me</text>
  </message>
  <message>
    <ts>2017-07-24T17:05:23.764258</ts>
    <user>U3L6TFEJF</user>
    <text>I wouldn't, but hey, I won't judge you :wink:</text>
  </message>
  <message>
    <ts>2017-07-24T17:05:47.776067</ts>
    <user>U07TDTQNL</user>
    <text>Better than most node libraries! #burn</text>
  </message>
  <message>
    <ts>2017-07-24T17:05:55.780453</ts>
    <user>U2J4YH6BG</user>
    <text>&amp;gt; Commix was built as a response to a range of limitations in Integrant which in turn was designed to overcome limitations in Component.</text>
  </message>
  <message>
    <ts>2017-07-24T17:06:23.794160</ts>
    <user>U2J4YH6BG</user>
    <text>turns out dependencies are hard?</text>
  </message>
  <message>
    <ts>2017-07-24T17:06:31.798047</ts>
    <user>U5ZAJ15P0</user>
    <text>I've been using integrant for a couple of days, it has been great so far</text>
  </message>
  <message>
    <ts>2017-07-24T17:06:51.807963</ts>
    <user>U2J4YH6BG</user>
    <text>I liked it as well when I compared it with component</text>
  </message>
  <message>
    <ts>2017-07-24T17:07:18.821493</ts>
    <user>U3L6TFEJF</user>
    <text>I tried using Integrant but I immediately found myself working around it instead of with it, then I stumbled over commix here: &lt;https://github.com/weavejester/integrant/issues/21&gt;</text>
  </message>
  <message>
    <ts>2017-07-24T17:07:54.839688</ts>
    <user>U3L6TFEJF</user>
    <text>I recognized some of the problems I encountered in the "differences from Integrant" section</text>
  </message>
  <message>
    <ts>2017-07-24T17:08:20.852036</ts>
    <user>U3L6TFEJF</user>
    <text>anyways, more options on the table, more innovation = win for everyone</text>
  </message>
  <message>
    <ts>2017-07-24T17:11:40.946270</ts>
    <user>U5ZAJ15P0</user>
    <text>Does anyone have a recommendation for me on how to share some stuff between tests? e.g. a database connection</text>
  </message>
  <message>
    <ts>2017-07-24T17:20:02.181585</ts>
    <user>U3QUAHZJ6</user>
    <text>well if is something static i think you can just

```
(def db-spec (..))

(deftest test
   (jdbc/query db-spec ..))
```

i really would like to know how i can share data that is produced by one test in another test</text>
  </message>
  <message>
    <ts>2017-07-24T17:20:28.193856</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3QUAHZJ6&gt; why would you want to do that?</text>
  </message>
  <message>
    <ts>2017-07-24T17:24:36.308992</ts>
    <user>U3QUAHZJ6</user>
    <text>im trying to do some sort of all-or-nothing integration api integration test

imagine that i do a request to create an user, and it returns me an id
afterwards in another test id like to user this id to create a bank account for this user (or something like that)</text>
  </message>
  <message>
    <ts>2017-07-24T17:26:02.349497</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3QUAHZJ6&gt; ah, I was planning on doing the same thing. It seems to me this should be done within one test block? I don't think there are much guarantees as to in which order tests will run</text>
  </message>
  <message>
    <ts>2017-07-24T17:26:06.351246</ts>
    <user>U5ZAJ15P0</user>
    <text>and you would rely on order there</text>
  </message>
  <message>
    <ts>2017-07-24T17:27:23.385879</ts>
    <user>U3QUAHZJ6</user>
    <text>im trying to avoid a giant let with tons of implicit tests, but i seems that i got no other option</text>
  </message>
  <message>
    <ts>2017-07-24T17:28:45.423252</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3QUAHZJ6&gt; I am a newb, but what do you think would be the issue? You can nest `testing` calls to create context</text>
  </message>
  <message>
    <ts>2017-07-24T17:28:58.429119</ts>
    <user>U050MP39D</user>
    <text>dynamic vars and a fixture would be another option but probably not a very good one</text>
  </message>
  <message>
    <ts>2017-07-24T17:29:02.430689</ts>
    <user>U5ZAJ15P0</user>
    <text>and from what I just inferred from the source of `testing`, it returns its last expression</text>
  </message>
  <message>
    <ts>2017-07-24T17:29:09.434029</ts>
    <user>U5ZAJ15P0</user>
    <text>so you could use that to pass values around</text>
  </message>
  <message>
    <ts>2017-07-24T17:29:11.435055</ts>
    <user>U5ZAJ15P0</user>
    <text>not sure though…</text>
  </message>
  <message>
    <ts>2017-07-24T17:29:20.439301</ts>
    <user>U5ZAJ15P0</user>
    <text>like</text>
  </message>
  <message>
    <ts>2017-07-24T17:30:39.474864</ts>
    <user>U3QUAHZJ6</user>
    <text>the last line of deftest is returned?</text>
  </message>
  <message>
    <ts>2017-07-24T17:31:21.493714</ts>
    <user>U5ZAJ15P0</user>
    <text>```
(defn- create-user-account []
  (testing "Create a user account"
    (let [user-account (app/create-user-account)]
      (is (= ....))
      user-account)))

(defn- create-bank-account [user-account]
  (testing "Create bank account"))

(deftest scenario-1
  (let [user-account (create-user-account)
        bank-account (create-bank-account user-account)]))
```</text>
  </message>
  <message>
    <ts>2017-07-24T17:31:39.501814</ts>
    <user>U5ZAJ15P0</user>
    <text>I don't know if you can use `testing` outside a deftest though</text>
  </message>
  <message>
    <ts>2017-07-24T17:31:47.505388</ts>
    <user>U5ZAJ15P0</user>
    <text>if you can't, just move it to within the deftest</text>
  </message>
  <message>
    <ts>2017-07-24T17:32:08.514076</ts>
    <user>U5ZAJ15P0</user>
    <text>I haven't tried it though, and completely new to clojure.test, so don't take my word on it</text>
  </message>
  <message>
    <ts>2017-07-24T17:32:26.521748</ts>
    <user>U5ZAJ15P0</user>
    <text>do you have a better option? dynamic vars is all I can think of</text>
  </message>
  <message>
    <ts>2017-07-24T17:34:45.582584</ts>
    <user>U3QUAHZJ6</user>
    <text>i wanst aware of the `testing`  function / macro</text>
  </message>
  <message>
    <ts>2017-07-24T17:34:55.586791</ts>
    <user>U3QUAHZJ6</user>
    <text>will check it out thanks :smile:</text>
  </message>
  <message>
    <ts>2017-07-24T17:35:43.607766</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3QUAHZJ6&gt; I just tried to use `testing` inside a `defn-` function called from a `deftest` and it worked, but the doc says `May be nested,
but must occur inside a test function (deftest).`, so I am not sure how to take it</text>
  </message>
  <message>
    <ts>2017-07-24T17:36:00.614759</ts>
    <user>U050MP39D</user>
    <text>unless there's a serious desire to split the tests across multiple files I would go the huge let block over the dynamic vars</text>
  </message>
  <message>
    <ts>2017-07-24T17:36:02.615431</ts>
    <user>U5ZAJ15P0</user>
    <text>maybe it means it will work so long as it's called within the callstack of a `deftest` function</text>
  </message>
  <message>
    <ts>2017-07-24T17:36:08.618222</ts>
    <user>U5ZAJ15P0</user>
    <text>or maybe I am doing something very wrong :smile:</text>
  </message>
  <message>
    <ts>2017-07-24T17:37:00.640011</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U050MP39D&gt; huge let blocks can't be shared across tests though</text>
  </message>
  <message>
    <ts>2017-07-24T17:37:02.640723</ts>
    <user>U5ZAJ15P0</user>
    <text>no?</text>
  </message>
  <message>
    <ts>2017-07-24T17:39:41.708410</ts>
    <user>U050MP39D</user>
    <text>if they can't I wasn't aware of it</text>
  </message>
  <message>
    <ts>2017-07-24T17:40:23.726268</ts>
    <user>U050MP39D</user>
    <text>well they can't be shared across deftests I guess, but they can be shared across assertions</text>
  </message>
  <message>
    <ts>2017-07-24T17:40:24.726429</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U050MP39D&gt; would you mind showing me a quick example?</text>
  </message>
  <message>
    <ts>2017-07-24T17:40:29.728636</ts>
    <user>U5ZAJ15P0</user>
    <text>oh right</text>
  </message>
  <message>
    <ts>2017-07-24T17:40:42.734022</ts>
    <user>U5ZAJ15P0</user>
    <text>is it common to have a lot of `testing` blocks under a single `deftest`?</text>
  </message>
  <message>
    <ts>2017-07-24T17:40:47.735962</ts>
    <user>U050MP39D</user>
    <text>I guess I'm generally a bit ambivalent about the difference between "tests" and "assertions". I don't really care about the granularity</text>
  </message>
  <message>
    <ts>2017-07-24T17:41:51.762525</ts>
    <user>U050MP39D</user>
    <text>I don't know about common, but I would prefer it over fixtures populating dynamic vars</text>
  </message>
  <message>
    <ts>2017-07-24T17:42:11.770245</ts>
    <user>U5ZAJ15P0</user>
    <text>+1. I agree, the granularity is a bit confusing</text>
  </message>
  <message>
    <ts>2017-07-24T17:42:11.770604</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks!</text>
  </message>
  <message>
    <ts>2017-07-24T17:51:25.997742</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U5ZAJ15P0&gt; I just did a `macroexpand` of `(testing "foo" body)` and it looks like it relies on dynamic calls for context so I _think_ you're OK -- but it's definitely a bit unorthodox.</text>
  </message>
  <message>
    <ts>2017-07-24T17:51:52.008769</ts>
    <user>U04V70XH6</user>
    <text>```(macroexpand '(clojure.test/testing "foo" (something)))``` =&amp;gt; ```(let* 
 [] 
 (clojure.core/push-thread-bindings 
  (clojure.core/hash-map 
   (var clojure.test/*testing-contexts*) 
   (clojure.core/conj clojure.test/*testing-contexts* "foo"))) 
 (try (something) (finally (clojure.core/pop-thread-bindings)))) ```</text>
  </message>
  <message>
    <ts>2017-07-24T17:56:26.120587</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U04V70XH6&gt; so deftest sets a dynamic var which is available anywhere within the callstack during its execution?</text>
  </message>
  <message>
    <ts>2017-07-24T17:56:33.123500</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks for checking it!</text>
  </message>
  <message>
    <ts>2017-07-24T17:56:57.132869</ts>
    <user>U5ZAJ15P0</user>
    <text>do you have a better suggestion to do what I was trying to do? (split a test in this way)</text>
  </message>
  <message>
    <ts>2017-07-24T17:59:18.189550</ts>
    <user>U5ZAJ15P0</user>
    <text>is it "not ok" for some reason to split a test in multiple functions that way?</text>
  </message>
  <message>
    <ts>2017-07-24T17:59:36.197060</ts>
    <user>U5ZAJ15P0</user>
    <text>it seems that it improves composability</text>
  </message>
  <message>
    <ts>2017-07-24T18:06:24.358478</ts>
    <user>U04V70XH6</user>
    <text>I haven't seen it done that way before -- so it looks unfamiliar -- but if `clojure.test` manages all of its testing context dynamically, I guess it's fine. I guess I would have a specific test for each creation function that asserted whatever behavior I expected (and cleaned up after itself), and then in the main test I'd just call the creation functions without worrying about `testing` or `is`...</text>
  </message>
  <message>
    <ts>2017-07-24T18:06:56.370039</ts>
    <user>U04V70XH6</user>
    <text>In other words, I'd only have "one" test for those common things, rather than repeating the tests every time they are called.</text>
  </message>
  <message>
    <ts>2017-07-24T18:08:16.398236</ts>
    <user>U5ZAJ15P0</user>
    <text>Ah, I see.</text>
  </message>
  <message>
    <ts>2017-07-24T18:25:57.758247</ts>
    <user>U09LZR36F</user>
    <text>How should a regex look for the `:aot` option in leiningen?</text>
  </message>
  <message>
    <ts>2017-07-24T18:27:19.784985</ts>
    <user>U09LZR36F</user>
    <text>The way I used it seems to have no effect</text>
  </message>
  <message>
    <ts>2017-07-24T18:31:59.876554</ts>
    <user>U0NCTKEV8</user>
    <text>are you sure you want to aot compile?</text>
  </message>
  <message>
    <ts>2017-07-24T18:33:24.903542</ts>
    <user>U0NCTKEV8</user>
    <text>if you don't have :gen-class in a ns form, compile is a nop, and if you don't have gen-class I doubt you really want to aot compile</text>
  </message>
  <message>
    <ts>2017-07-24T18:34:25.922522</ts>
    <user>U09LZR36F</user>
    <text>&lt;@U0NCTKEV8&gt; I'm sure. I'm trying to minimize startup time in resulting jar.</text>
  </message>
  <message>
    <ts>2017-07-24T18:35:09.935790</ts>
    <user>U09LZR36F</user>
    <text>I noticed that most ns don't necessarily get aot'd, when I stripped out clj files jar started to fail</text>
  </message>
  <message>
    <ts>2017-07-24T19:02:22.436391</ts>
    <user>U053V4R5N</user>
    <text>does anyone know of a library for doing set-like operations (`intersect`, `union`) on possibly infinite sets?</text>
  </message>
  <message>
    <ts>2017-07-24T19:03:36.459058</ts>
    <user>U053V4R5N</user>
    <text>f.e. `(set/union inf/all #{1}) =&amp;gt; inf/all` or `(set/intersect inf/all #{1}) =&amp;gt; #{1}`</text>
  </message>
  <message>
    <ts>2017-07-24T19:04:10.468751</ts>
    <user>U053V4R5N</user>
    <text>I'm crawling through a clojars search but figured I'd ask</text>
  </message>
  <message>
    <ts>2017-07-24T19:19:39.731967</ts>
    <user>U0NCTKEV8</user>
    <text>I suspect what you want is a symbolic logic library</text>
  </message>
  <message>
    <ts>2017-07-24T19:25:52.832670</ts>
    <user>U053V4R5N</user>
    <text>how so?</text>
  </message>
  <message>
    <ts>2017-07-24T19:26:18.839458</ts>
    <user>U053V4R5N</user>
    <text>I didn't find anything in my quick searching, but rolling my own shouldn't be too hard</text>
  </message>
  <message>
    <ts>2017-07-24T19:26:33.843384</ts>
    <user>U053V4R5N</user>
    <text>just gotta figure out what infinity looks like</text>
  </message>
  <message>
    <ts>2017-07-24T19:28:20.872666</ts>
    <user>U0NCTKEV8</user>
    <text>oh, just because that is a more logic based representation of a set vs. a datastructure</text>
  </message>
  <message>
    <ts>2017-07-24T19:28:38.877766</ts>
    <user>U053V4R5N</user>
    <text>ah</text>
  </message>
  <message>
    <ts>2017-07-24T19:29:18.888469</ts>
    <user>U053V4R5N</user>
    <text>for my use case, 95% of the time it'll fall back to regular set ops</text>
  </message>
  <message>
    <ts>2017-07-24T19:39:45.055931</ts>
    <user>U053V4R5N</user>
    <text>can you recommend a good primer on the topic of symbolic logic programming?</text>
  </message>
  <message>
    <ts>2017-07-24T19:40:00.059900</ts>
    <user>U053V4R5N</user>
    <text>the core.logic readme mentions _The Reasoned Schemer_</text>
  </message>
  <message>
    <ts>2017-07-24T19:44:36.129460</ts>
    <user>U0NCTKEV8</user>
    <text>core.logic isn't really that, the little prover (which shares an author) would be more like it</text>
  </message>
  <message>
    <ts>2017-07-24T19:47:27.172617</ts>
    <user>U053V4R5N</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-24T19:47:58.180112</ts>
    <user>U053V4R5N</user>
    <text>I actually have enough time to read this before I have to tackle this problem for real</text>
  </message>
  <message>
    <ts>2017-07-25T03:35:03.889870</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U5ZAJ15P0&gt; re: tests, you may want to watch this: &lt;http://2017.clojurewest.org/full-stack-teleport-testing/&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T03:46:58.118598</ts>
    <user>U06GS6P1N</user>
    <text>youtube video: &lt;https://www.youtube.com/watch?v=qijWBPYkRAQ&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T06:11:52.385660</ts>
    <user>U0CV2KYE8</user>
    <text>does anyone have any idea how to encode the `::selection` selector in `garden` ?</text>
  </message>
  <message>
    <ts>2017-07-25T06:51:08.152546</ts>
    <user>U0CV2KYE8</user>
    <text>ah.. need to define a pseudoselector.</text>
  </message>
  <message>
    <ts>2017-07-25T07:14:49.598899</ts>
    <user>U5ZAJ15P0</user>
    <text>I have seen it. Mind-blowingly awesome. It's on my todo-list to implement something similar :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T08:32:44.182765</ts>
    <user>U2MPUENUC</user>
    <text>cljr for Clojure CLR</text>
  </message>
  <message>
    <ts>2017-07-25T10:00:12.888056</ts>
    <user>U5ZAJ15P0</user>
    <text>Is it a common/recommended practice to add tests as metadata directly on functions?</text>
  </message>
  <message>
    <ts>2017-07-25T10:08:09.197684</ts>
    <user>U051HUZLD</user>
    <text>I can't `apply` macro, can I?</text>
  </message>
  <message>
    <ts>2017-07-25T10:10:25.283563</ts>
    <user>U051HUZLD</user>
    <text>I essentially want to 
```
(let [specs [:a :b]]
  (apply clojure.spec.alpha/cat (interleave specs specs)))
```
what my options are?</text>
  </message>
  <message>
    <ts>2017-07-25T10:12:58.381872</ts>
    <user>U09LZR36F</user>
    <text>write a macro to do it :disappointed:</text>
  </message>
  <message>
    <ts>2017-07-25T10:13:13.390981</ts>
    <user>U050SC7SV</user>
    <text>or eval</text>
  </message>
  <message>
    <ts>2017-07-25T10:13:14.391671</ts>
    <user>U2PGHFU5U</user>
    <text>Nope. See &lt;https://stackoverflow.com/a/9273469&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T10:13:19.394821</ts>
    <user>U050SC7SV</user>
    <text>pick your poison :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T10:14:14.430436</ts>
    <user>U051HUZLD</user>
    <text>oh, wait, there is a ~@</text>
  </message>
  <message>
    <ts>2017-07-25T10:14:27.438997</ts>
    <user>U050SC7SV</user>
    <text>```
(let [specs [:a :b]]  (eval `(clojure.spec.alpha/cat ~@(interleave specs specs))))
```</text>
  </message>
  <message>
    <ts>2017-07-25T10:14:28.439521</ts>
    <user>U051HUZLD</user>
    <text>forgot about it</text>
  </message>
  <message>
    <ts>2017-07-25T10:14:39.446731</ts>
    <user>U051HUZLD</user>
    <text>exactly, thanks</text>
  </message>
  <message>
    <ts>2017-07-25T10:14:56.457948</ts>
    <user>U051HUZLD</user>
    <text>wait, why eval?</text>
  </message>
  <message>
    <ts>2017-07-25T10:15:12.468560</ts>
    <user>U051HUZLD</user>
    <text>ah, it's not wrapped in macro.</text>
  </message>
  <message>
    <ts>2017-07-25T10:15:50.493383</ts>
    <user>U050SC7SV</user>
    <text>yep, I prefer eval personally for that stuff. a macro def will stay here in all its uselessness after you used it to generate your spec</text>
  </message>
  <message>
    <ts>2017-07-25T10:16:04.502193</ts>
    <user>U050SC7SV</user>
    <text>depends if you need to do that a lot or not</text>
  </message>
  <message>
    <ts>2017-07-25T10:16:53.534166</ts>
    <user>U051HUZLD</user>
    <text>I wanted a macro initially, because I have too many `s/cat`s where I basically reuse spec names as dispatch keys</text>
  </message>
  <message>
    <ts>2017-07-25T10:18:08.582606</ts>
    <user>U051HUZLD</user>
    <text>figured I'd try to just re-use spec names instead of coming up with throw-away names time and time again.</text>
  </message>
  <message>
    <ts>2017-07-25T10:20:02.656902</ts>
    <user>U051HUZLD</user>
    <text>&lt;@U2PGHFU5U&gt; thanks, I just forgot about ~@ splicing. it's all good now</text>
  </message>
  <message>
    <ts>2017-07-25T10:26:45.918558</ts>
    <user>U051HUZLD</user>
    <text>while we are on macro subject: how do grown ups validate macro's input (e.g. with spec)?</text>
  </message>
  <message>
    <ts>2017-07-25T11:18:36.010151</ts>
    <user>U09LZR36F</user>
    <text>I use spec lately. asserts are great too though.</text>
  </message>
  <message>
    <ts>2017-07-25T11:19:22.041907</ts>
    <user>U064X3EF3</user>
    <text>&lt;@U051HUZLD&gt; s/conform</text>
  </message>
  <message>
    <ts>2017-07-25T11:20:01.068616</ts>
    <user>U064X3EF3</user>
    <text>will give you the destructured version. if it's ::s/invalid, then s/explain.</text>
  </message>
  <message>
    <ts>2017-07-25T12:53:51.786602</ts>
    <user>U051HUZLD</user>
    <text>is there a way to get fn's arity? like
```
(arity filter)
;; =&amp;gt; [1 2]
```
actually I am not even sure why I am asking this :dafuq:</text>
  </message>
  <message>
    <ts>2017-07-25T12:57:04.905102</ts>
    <user>U064X3EF3</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-07-25T13:10:27.396032</ts>
    <user>U06B8J0AJ</user>
    <text>&lt;@U051HUZLD&gt; In cljs, you can do `(.-length (.-constructor (.-prototype render)))`</text>
  </message>
  <message>
    <ts>2017-07-25T13:10:52.410195</ts>
    <user>U06B8J0AJ</user>
    <text>Where `render` would be the function, for example</text>
  </message>
  <message>
    <ts>2017-07-25T13:12:06.453077</ts>
    <user>U04V4KLKC</user>
    <text>If function was defined with defn - `(:arglists (meta #'filter))`</text>
  </message>
  <message>
    <ts>2017-07-25T13:13:04.486700</ts>
    <user>U06B8J0AJ</user>
    <text>Or why not `(-&amp;gt; render .-prototype .-constructor .-length)`. We're not barbarians after all.</text>
  </message>
  <message>
    <ts>2017-07-25T13:13:21.496127</ts>
    <user>U3JURM9B6</user>
    <text>anyone else find code written via reduce to be "obfuscated" ?</text>
  </message>
  <message>
    <ts>2017-07-25T13:13:46.510434</ts>
    <user>U06B8J0AJ</user>
    <text>&lt;@U3JURM9B6&gt; Example?</text>
  </message>
  <message>
    <ts>2017-07-25T13:13:49.512205</ts>
    <user>U3JURM9B6</user>
    <text>for some reason, when writing code involving reduce, it's always:
1. how can I write this imperatively ?
2. then I reformulate it as reduce</text>
  </message>
  <message>
    <ts>2017-07-25T13:14:39.541132</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U06B8J0AJ&gt;: no concrete example, just that most of the time, I want to do:
```
(let [state (atom ...)]
  (doseq ...))
```</text>
  </message>
  <message>
    <ts>2017-07-25T13:14:57.551827</ts>
    <user>U3JURM9B6</user>
    <text>then I end up "inverting" the doseq / modification to the @state atom in order to get my reduce code</text>
  </message>
  <message>
    <ts>2017-07-25T13:17:30.640829</ts>
    <user>U06B8J0AJ</user>
    <text>&lt;@U3JURM9B6&gt; There's nothing inherently wrong with that, in my opinion. For me, it's a quite common pattern that I pull out the transducers once I start noticing boilerplate and repeating patterns in the code.</text>
  </message>
  <message>
    <ts>2017-07-25T13:18:30.675969</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U06B8J0AJ&gt;: have you used Haskell? the haskell solution to this would be the 'state' monad, then an external sequence_</text>
  </message>
  <message>
    <ts>2017-07-25T13:19:23.705808</ts>
    <user>U06B8J0AJ</user>
    <text>&lt;@U3JURM9B6&gt; Unfortunately I haven't used it beyond the tutorial on the home page (which is quite nice)</text>
  </message>
  <message>
    <ts>2017-07-25T13:22:54.831779</ts>
    <user>U06B8J0AJ</user>
    <text>`map` does seem to be easier to visualize than `reduce` though. I think `map` corresponds more to everyday patterns of life. You can imagine walking along a row of potted plants and watering each for example, getting a row of watered plants.</text>
  </message>
  <message>
    <ts>2017-07-25T13:23:33.855746</ts>
    <user>U06B8J0AJ</user>
    <text>But what would be the `reduce` version of that? Repot them in one large pot, one plant at a time?</text>
  </message>
  <message>
    <ts>2017-07-25T13:24:43.898131</ts>
    <user>U06B8J0AJ</user>
    <text>But also, the order in which they were repotted would somehow matter. I don't know, it's not _as_ straightforward.</text>
  </message>
  <message>
    <ts>2017-07-25T13:24:46.899453</ts>
    <user>U66SFLTPT</user>
    <text>&lt;@U3JURM9B6&gt; in Haskell how would you solve the problem?</text>
  </message>
  <message>
    <ts>2017-07-25T13:24:59.907090</ts>
    <user>U66SFLTPT</user>
    <text>`foldr` over a sequence?</text>
  </message>
  <message>
    <ts>2017-07-25T13:25:27.924462</ts>
    <user>U66SFLTPT</user>
    <text>(I'm just curious)</text>
  </message>
  <message>
    <ts>2017-07-25T13:25:36.929670</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U66SFLTPT&gt; : I would write the code "imperatively" with putState / getState, then  put it on a do block + use sequence_ if there's a list</text>
  </message>
  <message>
    <ts>2017-07-25T13:26:14.952448</ts>
    <user>U050MP39D</user>
    <text>I find it easier to go `write using loop/recur` -&amp;gt; `refactor to reduce`</text>
  </message>
  <message>
    <ts>2017-07-25T13:26:30.962690</ts>
    <user>U3JURM9B6</user>
    <text>the point is that the code goes something like:
```
s &amp;lt;- getState
... do some processing ...
putState s'
```

but then the reduce somehow causes me to "invert" the state manipulation</text>
  </message>
  <message>
    <ts>2017-07-25T13:26:42.969635</ts>
    <user>U050MP39D</user>
    <text>generally, than doseq. because that way you just delete a bunch of code and change some keywords. refactoring doseq and atom updates is annoying</text>
  </message>
  <message>
    <ts>2017-07-25T13:27:17.990815</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U050MP39D&gt; : loop/recur is definitely closer to reduce than doseq/atom</text>
  </message>
  <message>
    <ts>2017-07-25T13:27:48.010013</ts>
    <user>U3JURM9B6</user>
    <text>nevertheless, it seems that in an otherwise clean language, there's this mismatch between "mental thought" and "how code has to be written"</text>
  </message>
  <message>
    <ts>2017-07-25T13:28:09.022704</ts>
    <user>U3JURM9B6</user>
    <text>or maybe I just haven't mastered reduce idioms</text>
  </message>
  <message>
    <ts>2017-07-25T13:29:02.054915</ts>
    <user>U050MP39D</user>
    <text>mmmmmm my assumption is that that mismatch is just a result of spending so much time in imperative languages. I definitely find myself having to go through that interim step a lot less than I did 4 years ago when I moved ruby-&amp;gt;clojure. could be wrong though</text>
  </message>
  <message>
    <ts>2017-07-25T13:30:01.091107</ts>
    <user>U3JURM9B6</user>
    <text>haskell is not exactly '</text>
  </message>
  <message>
    <ts>2017-07-25T13:30:08.095632</ts>
    <user>U3JURM9B6</user>
    <text>imperative' -- some would say it's even more 'functional' :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T13:30:29.109496</ts>
    <user>U06B8J0AJ</user>
    <text>&lt;@U3JURM9B6&gt; Is there no notion of `reduce` in Haskell though?</text>
  </message>
  <message>
    <ts>2017-07-25T13:30:39.115125</ts>
    <user>U051SS2EU</user>
    <text>that's foldl</text>
  </message>
  <message>
    <ts>2017-07-25T13:30:43.117779</ts>
    <user>U050MP39D</user>
    <text>there is, and it would be considered *way* more idiomatic than using the state monad</text>
  </message>
  <message>
    <ts>2017-07-25T13:30:46.119631</ts>
    <user>U3JURM9B6</user>
    <text>haskell definitely has foldl / foldr, but it also has state monads + sequence_</text>
  </message>
  <message>
    <ts>2017-07-25T13:31:10.133923</ts>
    <user>U051SS2EU</user>
    <text>and it's provable that everything you can do via state manipulation you can do in a left fold / reduce, it's just a different code pattern to do it</text>
  </message>
  <message>
    <ts>2017-07-25T13:31:19.139619</ts>
    <user>U3JURM9B6</user>
    <text>I would say, any time you're bashing state, state monad is more idiomatic than folds</text>
  </message>
  <message>
    <ts>2017-07-25T13:31:30.145782</ts>
    <user>U3JURM9B6</user>
    <text>and with reduce, the initial value is basically your 'local state'</text>
  </message>
  <message>
    <ts>2017-07-25T13:31:33.147737</ts>
    <user>U050MP39D</user>
    <text>the state monad is a "purely functional statically typed" math trick around writing an imperative looking thing and still keeping it pure</text>
  </message>
  <message>
    <ts>2017-07-25T13:33:07.204870</ts>
    <user>U3JURM9B6</user>
    <text>yeah, I guess 99% of the problems I have with clojure is: it doesn't have haskell's type system :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T13:33:27.216877</ts>
    <user>U050MP39D</user>
    <text>funny, that's my favourite thing about clojure :laughing:</text>
  </message>
  <message>
    <ts>2017-07-25T13:34:43.263261</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3JURM9B6&gt; frege is haskell for the jvm, and it would even be usable except it is too hard to use interfaces or extend java types (because it really does implement haskell's type system - which is better but also alien to the platform)</text>
  </message>
  <message>
    <ts>2017-07-25T13:35:24.287652</ts>
    <user>U3JURM9B6</user>
    <text>I tried using frege once; I found neither the documentation nor the community helpful.</text>
  </message>
  <message>
    <ts>2017-07-25T13:35:29.290899</ts>
    <user>U051SS2EU</user>
    <text>I would have totally used it for some things in my codebase but not being able to define or implement interfaces (not to mention concrete inheritence, which clojure taught me how to do without), it was a no go</text>
  </message>
  <message>
    <ts>2017-07-25T13:35:32.292625</ts>
    <user>U1KK3BW3W</user>
    <text>Is there a way that others are using tools like `eastwood` with files that contain namespaced keywords?</text>
  </message>
  <message>
    <ts>2017-07-25T13:35:51.304062</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U3JURM9B6&gt; I think their assumption is "just do it the way you would in haskell"</text>
  </message>
  <message>
    <ts>2017-07-25T13:35:53.305305</ts>
    <user>U050MP39D</user>
    <text>thing is clojure just has no need for a state monad, because if imperative code is what's appropriate there *are* mutable options</text>
  </message>
  <message>
    <ts>2017-07-25T13:35:57.307979</ts>
    <user>U06B8J0AJ</user>
    <text>Well, cognitively, our problem solving is very pattern based. A problem occurs-&amp;gt;go fetch the nearest solution from memory that approximately fits problem-&amp;gt;apply to problem. Certain mismatch is bound to happen when encountering a somewhat different paradigm.</text>
  </message>
  <message>
    <ts>2017-07-25T13:42:27.545252</ts>
    <user>U06B8J0AJ</user>
    <text>Personally, I find macros to be some of the most intractable marshlands of the language. The parser in my head doesn't predict the output of a macro well at all.</text>
  </message>
  <message>
    <ts>2017-07-25T13:57:12.100265</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U051SS2EU&gt; I really liked the promise of Frege and spent quite a bit of time working with it -- I wrote a Leiningen plugin for it and put out some mixed Clojure / Frege code examples. But, ultimately, I just found it too frustrating to use and kept going back to Clojure... which kinda fits in with the love/hate relationship I've had with Haskell ever since it appeared (I always hoped Haskell would rule the world but it seemed like the team behind it tried very hard to make sure that didn't happen!).</text>
  </message>
  <message>
    <ts>2017-07-25T13:57:59.130169</ts>
    <user>U051SS2EU</user>
    <text>yeah I think I might have first heard of frege from you - and if I could have just defined / implemented interfaces I could have used it for my project…</text>
  </message>
  <message>
    <ts>2017-07-25T13:58:35.154132</ts>
    <user>U04V70XH6</user>
    <text>I just watched Prof Turner's talk about "Some History of Functional Programming Languages" from the Poland FP conference this year. Great to hear how everything came together (he was going to be my external examiner for my PhD thesis back in '86... if I'd actually completed it!).</text>
  </message>
  <message>
    <ts>2017-07-25T13:59:53.204037</ts>
    <user>U04V70XH6</user>
    <text>We used Miranda at my university and I was familiar with ML and SASL and a bunch of the other FP languages that all merged into Haskell. I created my own (SURE), just like all the other FP researchers in England at the time! :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T14:00:10.215916</ts>
    <user>U5ZAJ15P0</user>
    <text>Whereabout did you study?</text>
  </message>
  <message>
    <ts>2017-07-25T14:00:51.242898</ts>
    <user>U051SS2EU</user>
    <text>I remember checking out CLEAN shortly after I got into software (by reading "tech yourself C++ in 21 days")</text>
  </message>
  <message>
    <ts>2017-07-25T14:01:10.255003</ts>
    <user>U051SS2EU</user>
    <text>in retrospect I'm amazed I got turned to such an interesting direction so early on</text>
  </message>
  <message>
    <ts>2017-07-25T14:01:25.264726</ts>
    <user>U04V70XH6</user>
    <text>&lt;https://www.youtube.com/watch?v=QVwm9jlBTik&amp;amp;__s=csfyzpydsvfikkqz5bvw&gt; (for those who missed the link in Eric's &lt;http://PurelyFunctional.tv|PurelyFunctional.tv&gt; newsletter)</text>
  </message>
  <message>
    <ts>2017-07-25T14:01:59.287541</ts>
    <user>U04V70XH6</user>
    <text>University of Surrey (Guildford).</text>
  </message>
  <message>
    <ts>2017-07-25T14:02:19.300430</ts>
    <user>U04V70XH6</user>
    <text>SURE was Surrey University Recursive Evaluator :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T14:02:25.304140</ts>
    <user>U5ZAJ15P0</user>
    <text>ooh, makes sense!</text>
  </message>
  <message>
    <ts>2017-07-25T14:20:38.997516</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! I have the following in a Datalog query:
```
'[:find ... :where [(wef-backend.app.identity/past-expiry? ?expiry)]]]
```</text>
  </message>
  <message>
    <ts>2017-07-25T14:21:01.011233</ts>
    <user>U5ZAJ15P0</user>
    <text>Due to how Datomic/Datalog works I must fully qualify the past-expiry? function, even though it is available in the namespace where I wrote this query</text>
  </message>
  <message>
    <ts>2017-07-25T14:21:09.016516</ts>
    <user>U5ZAJ15P0</user>
    <text>is there some clever trick that would let me omit the full qualifier?</text>
  </message>
  <message>
    <ts>2017-07-25T14:21:27.027258</ts>
    <user>U5ZAJ15P0</user>
    <text>I tried syntax quoting on the query but that doesn't work, as it fully qualifies the `?expiry, etc` variables too</text>
  </message>
  <message>
    <ts>2017-07-25T14:22:07.052151</ts>
    <user>U5ZAJ15P0</user>
    <text>Essentially I would like to fully qualify some symbols in that quoted expression</text>
  </message>
  <message>
    <ts>2017-07-25T14:22:11.053835</ts>
    <user>U5ZAJ15P0</user>
    <text>but not others</text>
  </message>
  <message>
    <ts>2017-07-25T14:24:35.144405</ts>
    <user>U2H58V4P2</user>
    <text>I don't recall any problems with namespaced keywords, but I seem to remember I had problems with namespaced maps. As these were limited to my test classes, I added these namespaces to the ignore list I think. Also, I think there were some fixes on the master branch that remain unreleased. A bit vague I realise, but if you're still stuck tomorrow (unlikely) then I'll check when I'm back in front of a computer...</text>
  </message>
  <message>
    <ts>2017-07-25T14:31:08.387949</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; you can use ` for this, and selectively use ~ for the symbols you want to namespace qualify</text>
  </message>
  <message>
    <ts>2017-07-25T14:31:37.406632</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; how so? I tried variations on your suggestion but didn't manage to get it to work</text>
  </message>
  <message>
    <ts>2017-07-25T14:32:56.456571</ts>
    <user>U051SS2EU</user>
    <text>```peregrine.circle=&amp;gt; `[:find ... :where [identity ~'?foo]]
[:find ... :where [clojure.core/identity ?foo]]```</text>
  </message>
  <message>
    <ts>2017-07-25T14:33:11.466026</ts>
    <user>U051SS2EU</user>
    <text>I just picked a random thing with identity in the name, but I hope it translates</text>
  </message>
  <message>
    <ts>2017-07-25T14:34:22.510743</ts>
    <user>U5ZAJ15P0</user>
    <text>ah</text>
  </message>
  <message>
    <ts>2017-07-25T14:34:26.513223</ts>
    <user>U051SS2EU</user>
    <text>I guess I should have explicitly mentioned the `~'` idiom to prevent namespacing</text>
  </message>
  <message>
    <ts>2017-07-25T14:34:36.519558</ts>
    <user>U5ZAJ15P0</user>
    <text>is there a way to do the opposite? selectively pick the symbols I want to namespace qualify</text>
  </message>
  <message>
    <ts>2017-07-25T14:34:43.524070</ts>
    <user>U051SS2EU</user>
    <text>that's harder</text>
  </message>
  <message>
    <ts>2017-07-25T14:34:46.525473</ts>
    <user>U5ZAJ15P0</user>
    <text>instead of the ones I do not want to namespace qualify</text>
  </message>
  <message>
    <ts>2017-07-25T14:34:49.527555</ts>
    <user>U5ZAJ15P0</user>
    <text>mmh ok</text>
  </message>
  <message>
    <ts>2017-07-25T14:34:51.528562</ts>
    <user>U5ZAJ15P0</user>
    <text>nevermind then</text>
  </message>
  <message>
    <ts>2017-07-25T14:34:53.529508</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-25T14:35:37.556918</ts>
    <user>U051SS2EU</user>
    <text>this is close, but no cigar ```peregrine.circle=&amp;gt; '[:find ... :where [`identity ?foo]]
[:find ... :where [(quote clojure.core/identity) ?foo]]```</text>
  </message>
  <message>
    <ts>2017-07-25T14:35:51.565085</ts>
    <user>U5ZAJ15P0</user>
    <text>yep, not quite :confused:</text>
  </message>
  <message>
    <ts>2017-07-25T14:36:14.579551</ts>
    <user>U5ZAJ15P0</user>
    <text>why wouldn't this work:
```
'[:find ... :where [~`identity ?foo]]
```
?</text>
  </message>
  <message>
    <ts>2017-07-25T14:36:34.591687</ts>
    <user>U051SS2EU</user>
    <text>~ doesn't make sense outside `</text>
  </message>
  <message>
    <ts>2017-07-25T14:36:52.602991</ts>
    <user>U5ZAJ15P0</user>
    <text>why does it make sense here:
```
`[:find ... :where [identity ~'?foo]]
```
?</text>
  </message>
  <message>
    <ts>2017-07-25T14:37:10.614296</ts>
    <user>U051SS2EU</user>
    <text>it's inside the ` at the beginning of the vector</text>
  </message>
  <message>
    <ts>2017-07-25T14:37:11.615245</ts>
    <user>U051HUZLD</user>
    <text>thanks</text>
  </message>
  <message>
    <ts>2017-07-25T14:37:55.642722</ts>
    <user>U5ZAJ15P0</user>
    <text>right, but why does swapping out the use of syntax quoting vs normal quoting makes it different in use?</text>
  </message>
  <message>
    <ts>2017-07-25T14:38:01.646719</ts>
    <user>U5ZAJ15P0</user>
    <text>(I'm not familiar enough with quoting yet)</text>
  </message>
  <message>
    <ts>2017-07-25T14:38:08.650934</ts>
    <user>U051SS2EU</user>
    <text>because ~ is only valid in syntax quote</text>
  </message>
  <message>
    <ts>2017-07-25T14:38:13.653895</ts>
    <user>U5ZAJ15P0</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-25T14:38:35.667554</ts>
    <user>U051SS2EU</user>
    <text>it's a special operation that is only defined in that context</text>
  </message>
  <message>
    <ts>2017-07-25T14:39:35.704077</ts>
    <user>U5ZAJ15P0</user>
    <text>using it outside throws ```java.lang.IllegalStateException: Attempting to call unbound fn: #'clojure.core/unquote```</text>
  </message>
  <message>
    <ts>2017-07-25T14:39:41.707426</ts>
    <user>U5ZAJ15P0</user>
    <text>does this only get bound within a syntax quote?</text>
  </message>
  <message>
    <ts>2017-07-25T14:39:50.712595</ts>
    <user>U5ZAJ15P0</user>
    <text>or is that a different error?</text>
  </message>
  <message>
    <ts>2017-07-25T14:39:54.715018</ts>
    <user>U051SS2EU</user>
    <text>right, it exapands to unquote, that is undefined outside `</text>
  </message>
  <message>
    <ts>2017-07-25T14:40:14.727242</ts>
    <user>U051SS2EU</user>
    <text>this is all stuff implemented in the java code of the reader</text>
  </message>
  <message>
    <ts>2017-07-25T14:40:25.733891</ts>
    <user>U051SS2EU</user>
    <text>it isn't built on the normal machinery, it's the basis for it</text>
  </message>
  <message>
    <ts>2017-07-25T14:40:42.744637</ts>
    <user>U5ZAJ15P0</user>
    <text>is unquote a special form?</text>
  </message>
  <message>
    <ts>2017-07-25T14:40:59.754696</ts>
    <user>U051SS2EU</user>
    <text>syntax-quote ` is special, and it handles unquote</text>
  </message>
  <message>
    <ts>2017-07-25T14:41:18.766382</ts>
    <user>U5ZAJ15P0</user>
    <text>so unquote will get evaluate somehow within a syntax quote</text>
  </message>
  <message>
    <ts>2017-07-25T14:41:23.769207</ts>
    <user>U5ZAJ15P0</user>
    <text>but outside of it it has no meaning</text>
  </message>
  <message>
    <ts>2017-07-25T14:41:27.771653</ts>
    <user>U5ZAJ15P0</user>
    <text>and even inside, it's not a function</text>
  </message>
  <message>
    <ts>2017-07-25T14:41:32.774793</ts>
    <user>U5ZAJ15P0</user>
    <text>it's just a symbol that ` interprets</text>
  </message>
  <message>
    <ts>2017-07-25T14:41:35.776420</ts>
    <user>U5ZAJ15P0</user>
    <text>correct?</text>
  </message>
  <message>
    <ts>2017-07-25T14:41:37.777804</ts>
    <user>U051SS2EU</user>
    <text>right, it's a parser machinery basically</text>
  </message>
  <message>
    <ts>2017-07-25T14:42:04.793894</ts>
    <user>U051SS2EU</user>
    <text>we're at the point in this convo where I'd probably have to read more code to answer more questions though</text>
  </message>
  <message>
    <ts>2017-07-25T14:42:23.805487</ts>
    <user>U5ZAJ15P0</user>
    <text>Luckily for you I don't have more questions at the moment :smile:</text>
  </message>
  <message>
    <ts>2017-07-25T14:42:34.812122</ts>
    <user>U051SS2EU</user>
    <text>like whether there's an actual unquote method somewhere in Compiler.java or if it's entirely a figment of syntax-quote</text>
  </message>
  <message>
    <ts>2017-07-25T14:43:13.835072</ts>
    <user>U5ZAJ15P0</user>
    <text>For now I think I am contempt with the answer that clojure.core/unquote is not a function, but something that has a special interpretation within a syntax quote</text>
  </message>
  <message>
    <ts>2017-07-25T14:43:44.853974</ts>
    <user>U051SS2EU</user>
    <text>there's this, but I am not totally sure what it means - UNQUOTE used to be defined as a special symbol but now it is commented out &lt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Compiler.java#L70&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T14:45:39.925193</ts>
    <user>U1KK3BW3W</user>
    <text>Ah, to be more specific, I am using `lein eastwood '{:add-linters [:unused-namespaces] :namespaces [:source-paths] :exclude-linters [:unlimited-use]}'` as my command, and I get an error for a namespaced spec (so you might be right that a namespaced keyword would not create problems, sorry!).</text>
  </message>
  <message>
    <ts>2017-07-25T14:45:41.926138</ts>
    <user>U060FKQPN</user>
    <text>unquote never makes it to the compiler</text>
  </message>
  <message>
    <ts>2017-07-25T14:46:04.940432</ts>
    <user>U1KK3BW3W</user>
    <text>```== Eastwood 0.2.4 Clojure 1.9.0-alpha17 JVM 1.8.0_121
Exception in thread "main" clojure.lang.ExceptionInfo: Invalid token: ::spec-ns/spec-name {:type :reader-exception}```</text>
  </message>
  <message>
    <ts>2017-07-25T14:46:06.941307</ts>
    <user>U060FKQPN</user>
    <text>it's handled by the reader earlier than that</text>
  </message>
  <message>
    <ts>2017-07-25T14:47:21.986367</ts>
    <user>U1KK3BW3W</user>
    <text>```(ns acme.spec-ns
  (:require [clojure.spec.alpha :as s]))

(s/def ::spec-name string?)
```</text>
  </message>
  <message>
    <ts>2017-07-25T14:47:39.997116</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U060FKQPN&gt; could you point at where exactly it is handled?</text>
  </message>
  <message>
    <ts>2017-07-25T14:48:00.009847</ts>
    <user>U060FKQPN</user>
    <text>&lt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L986-L990&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T14:48:15.018936</ts>
    <user>U060FKQPN</user>
    <text>&lt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L1040-L1044&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T14:48:26.026034</ts>
    <user>U060FKQPN</user>
    <text>from within the implementation of syntax quote</text>
  </message>
  <message>
    <ts>2017-07-25T14:49:08.050763</ts>
    <user>U060FKQPN</user>
    <text>the tl;dr is that when the compiler sees `~foo` it expands into `(clojure.core/unquote foo)`</text>
  </message>
  <message>
    <ts>2017-07-25T14:49:23.060026</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U060FKQPN&gt; ah, so if it's an unquote form it simply gets rid of the "unquote" and "quote" bits at reading time?</text>
  </message>
  <message>
    <ts>2017-07-25T14:49:38.069261</ts>
    <user>U060FKQPN</user>
    <text>then syntax-quote walks its expression and expands all the unquoted forms</text>
  </message>
  <message>
    <ts>2017-07-25T14:50:22.095845</ts>
    <user>U060FKQPN</user>
    <text>you can see how that gets transformed by quoting a syntax-quoted expression</text>
  </message>
  <message>
    <ts>2017-07-25T14:50:34.102802</ts>
    <user>U060FKQPN</user>
    <text>```user=&amp;gt; '`(~a)
(clojure.core/seq (clojure.core/concat (clojure.core/list a)))
```</text>
  </message>
  <message>
    <ts>2017-07-25T14:50:38.105650</ts>
    <user>U5ZAJ15P0</user>
    <text>so the reader would transform `(clojure.core/unquote 'foo)` into `foo`?</text>
  </message>
  <message>
    <ts>2017-07-25T14:50:46.110164</ts>
    <user>U060FKQPN</user>
    <text>it's more complex than that</text>
  </message>
  <message>
    <ts>2017-07-25T14:50:47.111243</ts>
    <user>U5ZAJ15P0</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-25T14:50:49.111985</ts>
    <user>U060FKQPN</user>
    <text>because of splicing</text>
  </message>
  <message>
    <ts>2017-07-25T14:51:08.123826</ts>
    <user>U5ZAJ15P0</user>
    <text>if there was no splicing then it would be this simple?</text>
  </message>
  <message>
    <ts>2017-07-25T14:51:16.128774</ts>
    <user>U060FKQPN</user>
    <text>more or less, yes</text>
  </message>
  <message>
    <ts>2017-07-25T14:51:40.142894</ts>
    <user>U060FKQPN</user>
    <text>but because of splicing, it has to wrap every subform that is unquoted in a list &amp;amp; concat them all</text>
  </message>
  <message>
    <ts>2017-07-25T14:51:49.148609</ts>
    <user>U060FKQPN</user>
    <text>so splicing becomes just like unquote w/o the wrapping list</text>
  </message>
  <message>
    <ts>2017-07-25T14:51:57.153033</ts>
    <user>U060FKQPN</user>
    <text>```user=&amp;gt; '`(~@a)
(clojure.core/seq (clojure.core/concat a))
user=&amp;gt; 
```</text>
  </message>
  <message>
    <ts>2017-07-25T14:52:16.163236</ts>
    <user>U060FKQPN</user>
    <text>because the list is already in `a` (so to speak)</text>
  </message>
  <message>
    <ts>2017-07-25T14:52:51.181943</ts>
    <user>U060FKQPN</user>
    <text>the impl is quite more complex because it has to deal with maps/vectors/sets other than just lists</text>
  </message>
  <message>
    <ts>2017-07-25T14:52:54.183267</ts>
    <user>U060FKQPN</user>
    <text>but that's the basic idea</text>
  </message>
  <message>
    <ts>2017-07-25T14:53:11.191837</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks! that clarifies things</text>
  </message>
  <message>
    <ts>2017-07-25T14:57:26.350282</ts>
    <user>U050TNB9F</user>
    <text>has anyone written about how to organize specs when they don't perfectly map to namespaces etc?</text>
  </message>
  <message>
    <ts>2017-07-25T14:57:46.362109</ts>
    <user>U1KK3BW3W</user>
    <text>When I use `(:require [acme.spec-ns :as spec-ns]) ... (clojure.spec.alpha/validate ::spec-ns/spec-name) ...)`, this is the context I have using a namespaced spec in</text>
  </message>
  <message>
    <ts>2017-07-25T14:58:37.393013</ts>
    <user>U051SS2EU</user>
    <text>I'd be interested to see a well reasoned pitch justifying the practice</text>
  </message>
  <message>
    <ts>2017-07-25T14:58:48.399462</ts>
    <user>U051SS2EU</user>
    <text>your data domain doesn't match your namespace organization?</text>
  </message>
  <message>
    <ts>2017-07-25T15:00:04.446169</ts>
    <user>U37NPE2H0</user>
    <text>organizational/insitutional inertia?</text>
  </message>
  <message>
    <ts>2017-07-25T15:00:48.474472</ts>
    <user>U37NPE2H0</user>
    <text>because that's why _my_ namespaces don't match my data domain.</text>
  </message>
  <message>
    <ts>2017-07-25T15:01:07.486089</ts>
    <user>U37NPE2H0</user>
    <text>Professional software dev is hard, man.  Companies are hard.</text>
  </message>
  <message>
    <ts>2017-07-25T15:02:58.553747</ts>
    <user>U0NCTKEV8</user>
    <text>it seems like people are really tied to namespaces on keywords matching the namespaces code is organized in to</text>
  </message>
  <message>
    <ts>2017-07-25T15:03:06.558435</ts>
    <user>U0NCTKEV8</user>
    <text>there is no reason for that</text>
  </message>
  <message>
    <ts>2017-07-25T15:03:51.584951</ts>
    <user>U0NCTKEV8</user>
    <text>code should change and reorganize way more often than your data formats</text>
  </message>
  <message>
    <ts>2017-07-25T15:04:33.609578</ts>
    <user>U0NCTKEV8</user>
    <text>The only time I ever use a code namespace name on a keyword is when I am sure it is temporary and will change</text>
  </message>
  <message>
    <ts>2017-07-25T15:04:45.616470</ts>
    <user>U050TNB9F</user>
    <text>well lets say I have some type of domain object. Most functions operating on that are in some namespace that might contain multiple spec'd domain objects. To define specs for these objects I'd have to do something like `(s/def ::my-object-name string?)`</text>
  </message>
  <message>
    <ts>2017-07-25T15:04:51.619822</ts>
    <user>U050TNB9F</user>
    <text>does that make sense?</text>
  </message>
  <message>
    <ts>2017-07-25T15:05:07.628951</ts>
    <user>U0NCTKEV8</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-07-25T15:06:02.660495</ts>
    <user>U0NCTKEV8</user>
    <text>never use `::` and instead of tying to the namespace the code is currently in, use a namespace like :my-org.project/whatever</text>
  </message>
  <message>
    <ts>2017-07-25T15:07:20.705839</ts>
    <user>U050TNB9F</user>
    <text>ok yeah, that seems like a sensible argument</text>
  </message>
  <message>
    <ts>2017-07-25T15:07:22.706830</ts>
    <user>U0E0XL064</user>
    <text>right... I'm also more and more inclined to _not_ use `::`, but using data domain logic.</text>
  </message>
  <message>
    <ts>2017-07-25T15:08:34.747118</ts>
    <user>U0NCTKEV8</user>
    <text>your specs are like a database schema, imagine if in tables you named columns after the code that is currently accessing it, terrible</text>
  </message>
  <message>
    <ts>2017-07-25T15:20:09.129775</ts>
    <user>U5ZAJ15P0</user>
    <text>Yeah, I am not sure why they use `::` everywhere in spec's doc</text>
  </message>
  <message>
    <ts>2017-07-25T15:25:33.307782</ts>
    <user>U0NCTKEV8</user>
    <text>it makes for shorter docs</text>
  </message>
  <message>
    <ts>2017-07-25T15:28:22.401803</ts>
    <user>U066U8JQJ</user>
    <text>&lt;@U0NCTKEV8&gt; another option is to have namespaces dedicated to your specs, I've being doing that and I quite like it, you can have a namespace like `your-org.specs` and inside of that you create the namespaces with your data definitions, by doing that the `::` gets very convenient, also you ensure very long namespaces so you have a more strong uniqueness sense</text>
  </message>
  <message>
    <ts>2017-07-25T15:32:03.523646</ts>
    <user>U0E0XL064</user>
    <text>Yeah, but putting all specs in there isn't much fun either...</text>
  </message>
  <message>
    <ts>2017-07-25T15:32:35.540904</ts>
    <user>U0E0XL064</user>
    <text>I've been splitting the specs and where to put them and how to name them depending on the purpose.</text>
  </message>
  <message>
    <ts>2017-07-25T15:50:15.129509</ts>
    <user>U3JURM9B6</user>
    <text>here's something easy to do with state monad but non-obvious to me how to do with reduce: I have a expression tree. I want to compile it to Three-Address-Code, i.e. a list of statements where each statement is (set! a (op b c)).</text>
  </message>
  <message>
    <ts>2017-07-25T15:59:07.429681</ts>
    <user>U06GS6P1N</user>
    <text>I'm writing a blog post on REPLs, can anyone recommend a short video demonstrating the Clojure REPL?</text>
  </message>
  <message>
    <ts>2017-07-25T16:13:13.903790</ts>
    <user>U5ZAJ15P0</user>
    <text>Out of curiosity, what exactly will be the focus of your blog post?</text>
  </message>
  <message>
    <ts>2017-07-25T16:18:16.073770</ts>
    <user>U064X3EF3</user>
    <text>&lt;https://vimeo.com/223309989&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T16:19:26.112900</ts>
    <user>U3QUAHZJ6</user>
    <text>is anyone aware of an *async* ring (compojure) middleware to log requests and responses?</text>
  </message>
  <message>
    <ts>2017-07-25T16:19:26.112963</ts>
    <user>U61HA86AG</user>
    <text>&lt;https://www.youtube.com/watch?v=2AvoH6XNAWY&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T16:24:14.275951</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;@U3JURM9B6&gt; clojure's reduce isn't really for folding over trees. it only folds over  seqs. so you'll need to write your own fold over a tree or flatten the tree first</text>
  </message>
  <message>
    <ts>2017-07-25T16:28:09.410658</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://gist.github.com/hiredman/2b2707d74ad2ff0b2f941b965f7dd97f#file-ref-clj-L3-L13&gt; is an example of a custom reduce implementation over a tree using cps</text>
  </message>
  <message>
    <ts>2017-07-25T16:30:23.486874</ts>
    <user>U0NCTKEV8</user>
    <text>I don't know what  your expression tree is like, but if you can transform it in to something like anf generating three address code will be much easier</text>
  </message>
  <message>
    <ts>2017-07-25T16:31:14.515718</ts>
    <user>U6DJH8TCL</user>
    <text>Hi all, I´m just starting with clojure, currently I am reading "The joy of clojure", and while trying to implement an example from the book, I am getting the following error on REPL:
```

user=&amp;gt; (def frame (java.awt.Frame.))

CompilerException java.lang.reflect.InvocationTargetException, compiling:(form-init6212165196188451204.clj:1:1) 

user=&amp;gt; frame
#object[clojure.lang.Var$Unbound 0x4aabdabc "Unbound: #'user/frame"]
```
I was wondering if someone could point me in the right direction?</text>
  </message>
  <message>
    <ts>2017-07-25T16:34:13.617373</ts>
    <user>U0NCTKEV8</user>
    <text>*e will show you the whole stacktrace</text>
  </message>
  <message>
    <ts>2017-07-25T16:34:31.627369</ts>
    <user>U051SS2EU</user>
    <text>also, the most likely cause of that error for that code is using a headless JVM</text>
  </message>
  <message>
    <ts>2017-07-25T16:34:37.630962</ts>
    <user>U051SS2EU</user>
    <text>which won't include awt</text>
  </message>
  <message>
    <ts>2017-07-25T16:36:01.677723</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U6DJH8TCL&gt; what does `(resolve 'java.awt.Frame)` say?</text>
  </message>
  <message>
    <ts>2017-07-25T16:37:46.736149</ts>
    <user>U0NCTKEV8</user>
    <text>(&lt;http://matt.might.net/articles/a-normalization/&gt; is a good write up on anf)</text>
  </message>
  <message>
    <ts>2017-07-25T16:43:27.922673</ts>
    <user>U6DJH8TCL</user>
    <text>hey &lt;@U051SS2EU&gt;  I think you got it right, I´m in another environment right now. But I recall a message mentioning something about "Headless", if that is the case, do you know how can I solve it?</text>
  </message>
  <message>
    <ts>2017-07-25T16:44:02.942398</ts>
    <user>U051SS2EU</user>
    <text>by installing a jvm that's meant for doing desktop /gui stuff</text>
  </message>
  <message>
    <ts>2017-07-25T16:44:21.952641</ts>
    <user>U051SS2EU</user>
    <text>but that shouldn't be urgent for learning clojure (though playing with windows and widgets can be nifty)</text>
  </message>
  <message>
    <ts>2017-07-25T16:45:12.981160</ts>
    <user>U051SS2EU</user>
    <text>typically on eg. a debian system, you can pick different jvms and decide which is default, and the one they pick for you if you aren't too bothered to customize doesn't come with the desktop and graphics stuff just to keep default installs smaller</text>
  </message>
  <message>
    <ts>2017-07-25T16:45:40.996662</ts>
    <user>U051SS2EU</user>
    <text>but the process of getting the right jvm installed for the features you want will vary based on your OS</text>
  </message>
  <message>
    <ts>2017-07-25T16:50:42.163158</ts>
    <user>U6DJH8TCL</user>
    <text>&lt;@U051SS2EU&gt; I thing I´ve got it, I´ll try to fix it later and I´ll let you know, but anyway I will follow your advice and wont let it get to much in the way of my progress, thank you very much!</text>
  </message>
  <message>
    <ts>2017-07-25T17:06:24.679326</ts>
    <user>U050MP39D</user>
    <text>how would you do it with the state monad? I think the trickyness here is more traversing trees than building up state</text>
  </message>
  <message>
    <ts>2017-07-25T17:18:15.028094</ts>
    <user>U050MP39D</user>
    <text>I would probably just use an atom and postwalk, fwiw</text>
  </message>
  <message>
    <ts>2017-07-25T17:19:12.055606</ts>
    <user>U050MP39D</user>
    <text>oh... or tree-seq. which I found out about just now</text>
  </message>
  <message>
    <ts>2017-07-25T18:57:58.345649</ts>
    <user>U06NT1WSV</user>
    <text>I'm trying to wrap my head around `core.async/pipeline-async`, and it seems to be running more parallel tasks than I'm requesting: &lt;https://gist.github.com/lynaghk/01aaa39bedcd2d37032dba3b68d9f94f&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T18:58:51.361633</ts>
    <user>U06NT1WSV</user>
    <text>Is the "parallelism n" in the docstring more of a suggestion than a hard limit? Even when setting n=1, I'm getting three async tasks running at the same time.</text>
  </message>
  <message>
    <ts>2017-07-25T19:02:21.428381</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://dev.clojure.org/jira/browse/ASYNC-163&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T19:02:26.430071</ts>
    <user>U0NCTKEV8</user>
    <text>actuallly</text>
  </message>
  <message>
    <ts>2017-07-25T19:03:13.444583</ts>
    <user>U0NCTKEV8</user>
    <text>pipeline-async is really weird, the other two pipeline variants are much easier to work with and much more likely to end up something that works like you expect</text>
  </message>
  <message>
    <ts>2017-07-25T19:05:03.477555</ts>
    <user>U06NT1WSV</user>
    <text>&lt;@U0NCTKEV8&gt; Thanks for the link! I have to run this in cljs, so pipeline-async is my only option.</text>
  </message>
  <message>
    <ts>2017-07-25T19:05:04.477933</ts>
    <user>U050MP39D</user>
    <text>I believe pipeline-async is meant for working with callback-based libs</text>
  </message>
  <message>
    <ts>2017-07-25T19:06:44.506832</ts>
    <user>U06NT1WSV</user>
    <text>Off-by-two isn't going to be a dealbreaker for me, I just wanted to make sure my understanding was sound.</text>
  </message>
  <message>
    <ts>2017-07-25T19:07:57.527603</ts>
    <user>U06NT1WSV</user>
    <text>Looks like the async.clj and async.cljs implementations are the same, so presumably cljs would have the same issue.</text>
  </message>
  <message>
    <ts>2017-07-25T19:22:34.772822</ts>
    <user>U17DY48BW</user>
    <text>anyone know why running `lein run` might overwrite my `.lein-env` file?</text>
  </message>
  <message>
    <ts>2017-07-25T19:25:06.815058</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://github.com/weavejester/environ/blob/master/lein-environ/src/lein_environ/plugin.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T19:26:12.832362</ts>
    <user>U0NCTKEV8</user>
    <text>it looks like .lein-env is a generated cache that environ owns and you shouldn't be modifying</text>
  </message>
  <message>
    <ts>2017-07-25T19:39:53.048569</ts>
    <user>U056QFNM5</user>
    <text>I was (with much rejoicing) teaching a couple of colleagues Clojure today, and one of them asked a question that stumped me. Why is there no `delete` function for vectors? As in, to drop an element at an index out of the vector and move the succeeding elements backwards by an index to fill the hole?</text>
  </message>
  <message>
    <ts>2017-07-25T19:40:41.061293</ts>
    <user>U050MP39D</user>
    <text>because that's a very expensive operation, so you should stop and think rather than just seeing an 'easy' core op that does it</text>
  </message>
  <message>
    <ts>2017-07-25T19:41:51.079195</ts>
    <user>U056QFNM5</user>
    <text>OK, fair enough. I wondered if that was why but wasn't sure.</text>
  </message>
  <message>
    <ts>2017-07-25T19:53:22.258169</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U0NCTKEV8&gt; is correct, &lt;@U17DY48BW&gt;. The `.lein-env` file is for internal use, and shouldn't be modified manually. It also mentions that at the top of the README.</text>
  </message>
  <message>
    <ts>2017-07-25T20:32:01.818419</ts>
    <user>U0NBGRGD6</user>
    <text>I'm trying to use environ, but using it at compile time(our build machine have all env vars), if I wrote `(def ^:const x (env :x))` it works, x will be compile to a constant. but `(def ^:const x (Integer/parseInt (env :x)))`will not work.</text>
  </message>
  <message>
    <ts>2017-07-25T20:33:52.842649</ts>
    <user>U3JURM9B6</user>
    <text>imho, the trick part is assigning a unique var to every node of the tree</text>
  </message>
  <message>
    <ts>2017-07-25T20:34:06.845927</ts>
    <user>U3JURM9B6</user>
    <text>with a state monad, you just keep an int counter, and increment it as you traverse the nodes of the tree</text>
  </message>
  <message>
    <ts>2017-07-25T20:41:28.940855</ts>
    <user>U051KLSJF</user>
    <text>&lt;@U0NBGRGD6&gt; are you doing AOT compiling? Or is this ClojureScript?</text>
  </message>
  <message>
    <ts>2017-07-25T20:42:29.953908</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U050MP39D&gt; : why should delete be more expensive than assoc? can't we just 'mark it with a tombstone' ?</text>
  </message>
  <message>
    <ts>2017-07-25T20:44:40.982078</ts>
    <user>U0NBGRGD6</user>
    <text>&lt;@U051KLSJF&gt; I'm doing AOT compile in Clojure. </text>
  </message>
  <message>
    <ts>2017-07-25T20:51:28.067700</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U3JURM9B6&gt; A look at the source for `assoc` on vectors should convince you that `delete` would be more expensive -- `assoc` doesn't change any of the indices for the vector so only the segment containing the "changed" item needs to be updated. `delete` would cascade a change of indices across the segments of the vector. _As I understand how vectors are implemented in Clojure -- happy to be corrected._</text>
  </message>
  <message>
    <ts>2017-07-25T20:53:33.094438</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0NBGRGD6&gt; Aside from all the myriad problems associated with AOT and why you should avoid it... _ahem_ ...could you be a bit more specific about "will not work"? What exactly is the error/behavior you get?</text>
  </message>
  <message>
    <ts>2017-07-25T20:57:38.146230</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U04V70XH6&gt; : I failed to consider indexing. Does vector maintain the invariant "the only non-full 32-item block is the last block" ?</text>
  </message>
  <message>
    <ts>2017-07-25T20:58:44.160512</ts>
    <user>U0NBGRGD6</user>
    <text>if I use `(def ^:const x (env :x))` and :x in env is "hello", it will be compile to `(def ^:const x "hello")` i think, because our build machine have environment variables, and production machine dont, this is the way we want. if I use `(def ^:const x (Integer/parseInt (env :x)))`, x will not be compiled to a literal constant. so at runtime, this `(Integer/parseInt (env :x))` will run again.
</text>
  </message>
  <message>
    <ts>2017-07-25T21:15:45.384064</ts>
    <user>U050MP39D</user>
    <text>I'm not sure about the internal implementation, but vectors guarantee constant time index lookup.  seems hard to have both that guarantee and a fast  delete-at-index op</text>
  </message>
  <message>
    <ts>2017-07-25T21:19:44.433669</ts>
    <user>U0NCTKEV8</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-07-25T21:26:09.514910</ts>
    <user>U0NCTKEV8</user>
    <text>^:const has a very small very specific use, that is not it, it only happens to "work" for (env :x) but that could change at anytime</text>
  </message>
  <message>
    <ts>2017-07-25T21:33:34.610135</ts>
    <user>U3JURM9B6</user>
    <text>vectors guarantee a (log_32 num-elements) time lookup, it's stored as a btree with branching factor of 32</text>
  </message>
  <message>
    <ts>2017-07-25T21:34:01.615714</ts>
    <user>U3JURM9B6</user>
    <text>&lt;http://hypirion.com/musings/understanding-persistent-vector-pt-1&gt;</text>
  </message>
  <message>
    <ts>2017-07-25T21:34:18.619355</ts>
    <user>U3JURM9B6</user>
    <text>I think it's possible to store "how many elements does this subtree have" , which also allows fast lookup</text>
  </message>
  <message>
    <ts>2017-07-25T21:45:15.756263</ts>
    <user>U0NBGRGD6</user>
    <text>what's the explain for this, what's the difference between these two?</text>
  </message>
  <message>
    <ts>2017-07-25T21:48:35.798622</ts>
    <user>U04V70XH6</user>
    <text>(I'm a bit surprised `(def ^:const x (env :x))` works, to be honest)</text>
  </message>
  <message>
    <ts>2017-07-25T21:52:33.847637</ts>
    <user>U060FKQPN</user>
    <text>^:const causes the value of def to be inlined at the invocation site, it doesn't care about how the value is produced</text>
  </message>
  <message>
    <ts>2017-07-25T21:53:05.854087</ts>
    <user>U060FKQPN</user>
    <text>`(env :x)` is fine if that returns an value that can be used as a constant</text>
  </message>
  <message>
    <ts>2017-07-25T21:55:23.882708</ts>
    <user>U060FKQPN</user>
    <text>const doesn't mean that the literal expression passed to `def` will be inlined, `(def ^:const x (do (println "foo") 2))` the println will only ever be runned once</text>
  </message>
  <message>
    <ts>2017-07-25T22:02:52.978991</ts>
    <user>U0NBGRGD6</user>
    <text>and x will be 2?</text>
  </message>
  <message>
    <ts>2017-07-25T22:03:00.980528</ts>
    <user>U060FKQPN</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-25T22:03:37.988132</ts>
    <user>U0NBGRGD6</user>
    <text>and x will be 2? </text>
  </message>
  <message>
    <ts>2017-07-26T00:40:44.708601</ts>
    <user>U3JURM9B6</user>
    <text>I know how to write macros. Is it easy to write reader macros?</text>
  </message>
  <message>
    <ts>2017-07-26T00:41:20.714874</ts>
    <user>U3JURM9B6</user>
    <text>I'm trying to implement a special macro (:: a t-sig) where it always evals to a, regarxless of where the :: is located at</text>
  </message>
  <message>
    <ts>2017-07-26T00:41:34.717326</ts>
    <user>U3JURM9B6</user>
    <text>so I can write something like 
```
(defn [ (::a int) (:: b int)] .... )
```</text>
  </message>
  <message>
    <ts>2017-07-26T00:41:44.718978</ts>
    <user>U3JURM9B6</user>
    <text>and it should become
```
(defn [a b] ...)
```</text>
  </message>
  <message>
    <ts>2017-07-26T00:47:28.777145</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U3JURM9B6&gt; Not sure I'm understanding you but Clojure does not support "reader macros"...</text>
  </message>
  <message>
    <ts>2017-07-26T00:58:18.889076</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U04V70XH6&gt; : I also thoguht it might be impossible, but then I read: &lt;https://stackoverflow.com/questions/20677055/define-my-own-reader-macro-in-clojure&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T01:49:04.421021</ts>
    <user>U04V70XH6</user>
    <text>Tagged literals begin with `#` -- like `#inst` and `#uuid` -- but that's not "reader macros".</text>
  </message>
  <message>
    <ts>2017-07-26T01:50:34.437345</ts>
    <user>U04V70XH6</user>
    <text>Tagged literals have `#`, a namespace-qualified symbol, and a regular Clojure expression. The regular Clojure expression is read, then passed to the function associated with that symbol.</text>
  </message>
  <message>
    <ts>2017-07-26T01:51:18.445344</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U3JURM9B6&gt; We use tagged literals in our configuration library at work so we can define values in "special" ways.</text>
  </message>
  <message>
    <ts>2017-07-26T02:42:09.082807</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U04V70XH6&gt; : (I know nothing about tagged literals / reader macros) -- so what you're saying is that (1) what tagged literals get is after macro expansion and (2) it's basically a function call with a single argument ?</text>
  </message>
  <message>
    <ts>2017-07-26T03:07:38.473654</ts>
    <user>U051SA920</user>
    <text>How come `tools.deps.alpha` is using a map (which is merged with the default deps)? Doesn't that mean I can't specify the order of the deps? Which, IMO is crucial on the JVM.</text>
  </message>
  <message>
    <ts>2017-07-26T03:35:25.972576</ts>
    <user>U06B8J0AJ</user>
    <text>Just tried out Compojure API (2.0). &lt;https://github.com/metosin/compojure-api&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T03:35:41.977527</ts>
    <user>U06B8J0AJ</user>
    <text>I had no idea it was this easy to set up an API. Is this normal?</text>
  </message>
  <message>
    <ts>2017-07-26T04:14:03.762607</ts>
    <user>U06F82LES</user>
    <text>Paranormal</text>
  </message>
  <message>
    <ts>2017-07-26T04:18:04.849417</ts>
    <user>U06F82LES</user>
    <text>&lt;@U051SA920&gt;. Do you mean the order of maven coordinates in project.clj? I wasn't aware that ordered mattered there</text>
  </message>
  <message>
    <ts>2017-07-26T04:20:04.893219</ts>
    <user>U050SC7SV</user>
    <text>it matters anywhere (boot, lein etc) I think, it's a maven property</text>
  </message>
  <message>
    <ts>2017-07-26T04:20:25.901415</ts>
    <user>U051SA920</user>
    <text>&lt;@U06F82LES&gt; No I mean the new `tools.deps.alpha` project that just got released. In maven all of the order matters, which makes projects predictable. Though there is a bug report for leiningen too: &lt;https://github.com/technomancy/leiningen/issues/2283&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T04:20:35.905351</ts>
    <user>U050SC7SV</user>
    <text>but yes, I think &lt;@U051SA920&gt; is right about that</text>
  </message>
  <message>
    <ts>2017-07-26T04:21:32.926370</ts>
    <user>U051SA920</user>
    <text>It's going to seeminly work for projects that have &amp;lt;=8 dependencies and then all in a sudden the depedencies will be semi random and even change if you just change the version number.</text>
  </message>
  <message>
    <ts>2017-07-26T04:21:56.935019</ts>
    <user>U051SA920</user>
    <text>So IMO, deps shouldn't be specified by a map.</text>
  </message>
  <message>
    <ts>2017-07-26T04:23:07.960146</ts>
    <user>U050SC7SV</user>
    <text>it's prolly worth raising the issue with &lt;@U064X3EF3&gt; &amp;amp; co</text>
  </message>
  <message>
    <ts>2017-07-26T04:24:23.990460</ts>
    <user>U051SA920</user>
    <text>Yeah I'll wait until they wake up in the states.</text>
  </message>
  <message>
    <ts>2017-07-26T04:27:12.053842</ts>
    <user>U06F82LES</user>
    <text>&lt;@U051SA920&gt;, I was aware of tools.deps but didn't know order influenced the maven algorithm</text>
  </message>
  <message>
    <ts>2017-07-26T04:28:13.076518</ts>
    <user>U06F82LES</user>
    <text>Maybe just order apathetically?</text>
  </message>
  <message>
    <ts>2017-07-26T04:28:31.083632</ts>
    <user>U06F82LES</user>
    <text>Whoops alphabetically</text>
  </message>
  <message>
    <ts>2017-07-26T04:28:55.092805</ts>
    <user>U06F82LES</user>
    <text>A wonderful typo though</text>
  </message>
  <message>
    <ts>2017-07-26T04:29:40.110027</ts>
    <user>U050SC7SV</user>
    <text>sorting wouldn't help</text>
  </message>
  <message>
    <ts>2017-07-26T04:29:52.114668</ts>
    <user>U050SC7SV</user>
    <text>&amp;gt; Dependency mediation - this determines what version of a dependency will be used when multiple versions of an artifact are encountered. Currently, Maven 2.0 only supports using the "nearest definition" which means that it will use the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, until Maven 2.0.8 it was not defined which one would win, but since Maven 2.0.9 it's the order in the declaration that counts: the first declaration wins.

&lt;https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T04:30:42.134760</ts>
    <user>U06F82LES</user>
    <text>At least it would make it predictable</text>
  </message>
  <message>
    <ts>2017-07-26T04:31:05.143633</ts>
    <user>U050SC7SV</user>
    <text>but it prevents you to have control over it</text>
  </message>
  <message>
    <ts>2017-07-26T04:32:39.180070</ts>
    <user>U06F82LES</user>
    <text>But yeah deviating from maven here doesn't seem like a good idea</text>
  </message>
  <message>
    <ts>2017-07-26T04:32:44.181919</ts>
    <user>U050SC7SV</user>
    <text>I imagine deps could support a vector of "tuples" and map transparently, use the former if you care, the other if not (but since maps make ordering unpredictable I am not sure that even make sense to support them at all)</text>
  </message>
  <message>
    <ts>2017-07-26T04:36:27.267299</ts>
    <user>U051SA920</user>
    <text>Yeah I wish the new `t.d.alpha` was leaning heavily on maven and would just provide a hiccup wrapper around their XML config. That'd be neat.</text>
  </message>
  <message>
    <ts>2017-07-26T04:37:46.297531</ts>
    <user>U06F82LES</user>
    <text>to be fair I've never been in a situation where I had to re-order maven coordinates in clojure to fix dependencies. Have you?</text>
  </message>
  <message>
    <ts>2017-07-26T04:38:07.305499</ts>
    <user>U06F82LES</user>
    <text>Can't you accomplish the same thing through exclusions?</text>
  </message>
  <message>
    <ts>2017-07-26T04:39:50.345694</ts>
    <user>U050SC7SV</user>
    <text>imho it doesn't really matter, if the aim is to have a simple tool that kind of maps 1-1 with maven without too much indirection, that ordering issue could be considered a flaw</text>
  </message>
  <message>
    <ts>2017-07-26T04:40:12.354138</ts>
    <user>U050SC7SV</user>
    <text>but no, never had to mess with ordering myself I think</text>
  </message>
  <message>
    <ts>2017-07-26T04:41:13.378270</ts>
    <user>U051SA920</user>
    <text>It's seldom and only matters if you have the same files in two jars. Which you shouldn't have. But then, it's not clear how often this problems has been the issue with user reported problems who never figured it out what the issue was.</text>
  </message>
  <message>
    <ts>2017-07-26T04:41:22.382020</ts>
    <user>U2MPUENUC</user>
    <text>&lt;@U06F82LES&gt; we have had to do this many times when using xml</text>
  </message>
  <message>
    <ts>2017-07-26T04:42:08.399862</ts>
    <user>U050SC7SV</user>
    <text>deps conflicts is quite common, ex between guava versions in transitive deps it happens to me all the time</text>
  </message>
  <message>
    <ts>2017-07-26T04:42:17.403484</ts>
    <user>U051SA920</user>
    <text>IMO predictability is crucial, so deps should neither be put into a set (as leiningen does currently) nor into a map.</text>
  </message>
  <message>
    <ts>2017-07-26T04:49:38.575280</ts>
    <user>U1561881H</user>
    <text>hi everyone,…i want ask, sqlkorma how set date and datetime mysql format timezone GMT ?</text>
  </message>
  <message>
    <ts>2017-07-26T04:58:09.778584</ts>
    <user>U06F82LES</user>
    <text>&lt;@U051SA920&gt;, wait why is it a set? do you mean internally?</text>
  </message>
  <message>
    <ts>2017-07-26T05:01:24.860152</ts>
    <user>U051KLSJF</user>
    <text>&lt;@U051SA920&gt; my (limited) understanding is that you're meant to resolve all dependency conflicts completely, so it would actually be ok to store them as a map</text>
  </message>
  <message>
    <ts>2017-07-26T05:04:38.938363</ts>
    <user>U06F82LES</user>
    <text>&lt;@U051KLSJF&gt; how would that work given that there are transitive dependencies, java dependnecies, etc.?</text>
  </message>
  <message>
    <ts>2017-07-26T05:04:52.943883</ts>
    <user>U06F82LES</user>
    <text>do you mean a complete spec in the style of yarn.lock?</text>
  </message>
  <message>
    <ts>2017-07-26T05:05:21.955519</ts>
    <user>U051KLSJF</user>
    <text>I thought the idea was that you completely resolved all of the transitive dependencies explicitly</text>
  </message>
  <message>
    <ts>2017-07-26T05:05:44.964231</ts>
    <user>U050SC7SV</user>
    <text>more like, being explicit about exclusions to solve these kind of issues, but still</text>
  </message>
  <message>
    <ts>2017-07-26T05:06:01.971092</ts>
    <user>U050SC7SV</user>
    <text>(which is the best way to fix these in general anyway)</text>
  </message>
  <message>
    <ts>2017-07-26T05:06:31.983142</ts>
    <user>U050SC7SV</user>
    <text>&lt;@U051KLSJF&gt; ahh? didn't understand it that way.</text>
  </message>
  <message>
    <ts>2017-07-26T05:06:51.991045</ts>
    <user>U051KLSJF</user>
    <text>yeah I think you're closer &lt;@U050SC7SV&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T05:07:26.004439</ts>
    <user>U051KLSJF</user>
    <text>but I thought idea is that there is no conflicts</text>
  </message>
  <message>
    <ts>2017-07-26T05:07:39.009058</ts>
    <user>U051KLSJF</user>
    <text>sort of like lein pedantic</text>
  </message>
  <message>
    <ts>2017-07-26T05:08:07.019583</ts>
    <user>U050SC7SV</user>
    <text>I see, that would make sense, and actually an improvement over raw maven definitions (arguably, since way more verbose)</text>
  </message>
  <message>
    <ts>2017-07-26T05:10:57.084579</ts>
    <user>U051SA920</user>
    <text>&lt;@U051KLSJF&gt; My issue isn't only about transitive deps, but about the non-predictable ORDER of the jar's on the classpath. (See my leiningen ticket)</text>
  </message>
  <message>
    <ts>2017-07-26T05:14:25.165524</ts>
    <user>U051KLSJF</user>
    <text>hmm, yeah</text>
  </message>
  <message>
    <ts>2017-07-26T05:14:50.175153</ts>
    <user>U051KLSJF</user>
    <text>Does the order matter for you because you have several JARs which provide the same namespaces/classes?</text>
  </message>
  <message>
    <ts>2017-07-26T05:14:58.178386</ts>
    <user>U06F82LES</user>
    <text>alex mentioned the classpath order in the talk here in berlin</text>
  </message>
  <message>
    <ts>2017-07-26T05:16:14.208776</ts>
    <user>U06F82LES</user>
    <text>iirc, he said that the order is useful for some things (like overriding packages a la carte) but is not a great fit for other things, like making sure the right dependencies are picked up</text>
  </message>
  <message>
    <ts>2017-07-26T05:16:53.224237</ts>
    <user>U06F82LES</user>
    <text>so it sounded to me like tools.deps is intended to take classpath order out of the equation somehow</text>
  </message>
  <message>
    <ts>2017-07-26T05:28:41.501141</ts>
    <user>U6ESMKQNB</user>
    <text>hey, anyone here who can help out with a boot-clj related question?</text>
  </message>
  <message>
    <ts>2017-07-26T05:31:45.572624</ts>
    <user>U0E0XL064</user>
    <text>well... probably someone, just ask, but maybe in the &lt;#C053K90BR|boot&gt; channel...</text>
  </message>
  <message>
    <ts>2017-07-26T06:19:58.649394</ts>
    <user>U0524T275</user>
    <text>what could be an easy way to some a random choice given some probabilities
I just need a function that given something like this:
`{:a 1/2 :b 1/4 :c 1/4}`</text>
  </message>
  <message>
    <ts>2017-07-26T06:20:33.661215</ts>
    <user>U0524T275</user>
    <text>returns me a random element from [:a ':b :c] respecting the probabilities for each of them</text>
  </message>
  <message>
    <ts>2017-07-26T06:20:49.666435</ts>
    <user>U3JURM9B6</user>
    <text>put the cnhoices in arbitrary order</text>
  </message>
  <message>
    <ts>2017-07-26T06:20:54.668109</ts>
    <user>U3JURM9B6</user>
    <text>sample randomly from [0, 1]</text>
  </message>
  <message>
    <ts>2017-07-26T06:21:02.670876</ts>
    <user>U3JURM9B6</user>
    <text>index into the cumulative probability</text>
  </message>
  <message>
    <ts>2017-07-26T06:21:32.680821</ts>
    <user>U0524T275</user>
    <text>yeah I thought about that, so I guess there is no easier way?</text>
  </message>
  <message>
    <ts>2017-07-26T06:22:06.692055</ts>
    <user>U61HA86AG</user>
    <text>wouldnt repeating each choice depending on the probability and then using `rand-nth` do the trick?</text>
  </message>
  <message>
    <ts>2017-07-26T06:22:22.697059</ts>
    <user>U0524T275</user>
    <text>that would work in a simple case like this one</text>
  </message>
  <message>
    <ts>2017-07-26T06:22:35.701329</ts>
    <user>U0524T275</user>
    <text>but in the general case I would need to find the LCD of all the fractions</text>
  </message>
  <message>
    <ts>2017-07-26T06:22:45.704436</ts>
    <user>U0524T275</user>
    <text>and generate a massive vector with all the repeated stuff</text>
  </message>
  <message>
    <ts>2017-07-26T06:22:54.707024</ts>
    <user>U61HA86AG</user>
    <text>right, i see</text>
  </message>
  <message>
    <ts>2017-07-26T06:22:57.708132</ts>
    <user>U3JURM9B6</user>
    <text>suppose an item has probability .3957 , do you repeat it 3957 times? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T06:24:39.741012</ts>
    <user>U61HA86AG</user>
    <text>fair point</text>
  </message>
  <message>
    <ts>2017-07-26T06:35:45.954477</ts>
    <user>U0524T275</user>
    <text>Something like this gives me the ranges I can then check
```
user&amp;gt; (def probs {0 1/2 1 1/4 2 1/4})
#'user/probs
user&amp;gt; (into {} (map-indexed
                (fn [idx [el prob]]
                  [el
                   [(apply + (take idx (vals probs)))
                   (apply + (take (inc idx) (vals probs)))]])
                probs))
{0 [0 1/2], 1 [1/2 3/4], 2 [3/4 1N]}
```</text>
  </message>
  <message>
    <ts>2017-07-26T06:36:08.961775</ts>
    <user>U0524T275</user>
    <text>quite sure it can be improved a lot though</text>
  </message>
  <message>
    <ts>2017-07-26T06:38:17.002208</ts>
    <user>U071CG4QY</user>
    <text>&lt;https://stackoverflow.com/questions/14464011/idiomatic-clojure-for-picking-between-random-weighted-choices&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T06:39:18.021259</ts>
    <user>U0524T275</user>
    <text>nice thanks</text>
  </message>
  <message>
    <ts>2017-07-26T07:23:35.845714</ts>
    <user>U5ZAJ15P0</user>
    <text>I am pondering about how I would implement a simple compiler and/or interpreter in Clojure. In particular, I am wondering what would be the best way to model the abstract syntax tree.

The first (and most obvious) option would need to represent AST nodes as maps, tagged with their type/label (e.g. :type key). I would then define the various functions that operate on the AST as multimethods using the node's types as dispatch keys.

Another option would be to represent each type of node as a record, and to then have them all implement a protocol (e.g. IExpr) which would contain have implementations for all the functions operation on AST nodes. This comes wth the added benefits that AST nodes could implement existing protocols too.

Which of these options would be most idiomatic in Clojure? Or do you have another one to suggest?</text>
  </message>
  <message>
    <ts>2017-07-26T07:24:27.861445</ts>
    <user>U5XMV6DQT</user>
    <text>Take a look at Instaparse</text>
  </message>
  <message>
    <ts>2017-07-26T07:25:54.887371</ts>
    <user>U050SC7SV</user>
    <text>clj-antlr isn't bad either</text>
  </message>
  <message>
    <ts>2017-07-26T07:26:33.899668</ts>
    <user>U5ZAJ15P0</user>
    <text>Which parts in particular? I am not looking to write a parser, just to understand what the best way to model an AST in clojure would be</text>
  </message>
  <message>
    <ts>2017-07-26T07:26:59.907912</ts>
    <user>U5XMV6DQT</user>
    <text>multimethods are nice, I think</text>
  </message>
  <message>
    <ts>2017-07-26T07:28:28.935540</ts>
    <user>U5XMV6DQT</user>
    <text>I made a notice about instaparse because if you use it — you don't have to think about AST representation yourself</text>
  </message>
  <message>
    <ts>2017-07-26T07:28:34.937498</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U5ZAJ15P0&gt; take a look at tools.analyzer</text>
  </message>
  <message>
    <ts>2017-07-26T07:29:02.945745</ts>
    <user>U060FKQPN</user>
    <text>&lt;https://github.com/clojure/tools.analyzer&gt;  &lt;https://github.com/clojure/tools.analyzer.jvm&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T07:32:19.005678</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks! so from that I gather that raw maps with a :type field seems to be the way to go?</text>
  </message>
  <message>
    <ts>2017-07-26T07:32:25.007476</ts>
    <user>U5ZAJ15P0</user>
    <text>ok thanks, I'll take a look</text>
  </message>
  <message>
    <ts>2017-07-26T07:54:05.404030</ts>
    <user>U5ZAJ15P0</user>
    <text>Another, completely unrelated question… Does anyone have advice/examples on how to structure application business logic? This is a fairly general question (not specific to Clojure), but there might be Clojure-specific idioms coming into play. Roughly speaking I am wondering if I should take a CQRS-y road and try to have a clear distinction between functions that modify the app's state and functions that read that state. The application I am currently working on is a fairly simple, CRUD-y Clojure+Datomic web app, but I would like to use it as a learning ground for good practices</text>
  </message>
  <message>
    <ts>2017-07-26T07:55:15.426159</ts>
    <user>U5ZAJ15P0</user>
    <text>A link to an open-source application that you consider well-structured would be helpful, or advice / link to blog posts / resources</text>
  </message>
  <message>
    <ts>2017-07-26T08:17:03.882792</ts>
    <user>U06CM8C3V</user>
    <text>&lt;@U5ZAJ15P0&gt; have you seen the docs for re-frame? He talks extensively about CQRS-y architecture (even though it's cljs not clj) &lt;https://github.com/Day8/re-frame&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T08:18:09.907426</ts>
    <user>U06CM8C3V</user>
    <text>There's a pretty detailed readme doc right up front, but don't be fooled, the real meat is in the docs/ folder</text>
  </message>
  <message>
    <ts>2017-07-26T08:18:16.910467</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U06CM8C3V&gt; ah, let me check it now, thanks! By the way, something I should have specified: I am looking for a way to structure my code while keeping it fairly straightforward. E.g. no crazy async at the moment; ideally I would like to keep everything synchronous</text>
  </message>
  <message>
    <ts>2017-07-26T08:18:43.920145</ts>
    <user>U5ZAJ15P0</user>
    <text>Oh wow, indeed</text>
  </message>
  <message>
    <ts>2017-07-26T08:43:10.506377</ts>
    <user>U060FKQPN</user>
    <text>it's the most common way at least</text>
  </message>
  <message>
    <ts>2017-07-26T09:37:58.198151</ts>
    <user>U068SUJNT</user>
    <text>When I do some calculation with pmap and want to use another pmap on the result. How I can I wait until the first pmap is done?</text>
  </message>
  <message>
    <ts>2017-07-26T09:51:35.688892</ts>
    <user>U5JUDH2UE</user>
    <text>Does anyone know of a clean way to assoc in a field only if the field isn't null; otherwise return the map unmodified?</text>
  </message>
  <message>
    <ts>2017-07-26T09:53:04.744272</ts>
    <user>U11BV7MTK</user>
    <text>&lt;@U5JUDH2UE&gt; merge</text>
  </message>
  <message>
    <ts>2017-07-26T09:53:15.750654</ts>
    <user>U5JUDH2UE</user>
    <text>:facepalm:</text>
  </message>
  <message>
    <ts>2017-07-26T09:53:20.754465</ts>
    <user>U11BV7MTK</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-07-26T09:53:33.762409</ts>
    <user>U5JUDH2UE</user>
    <text>Thanks, &lt;@U11BV7MTK&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T09:55:01.818403</ts>
    <user>U0E0XL064</user>
    <text>merge will overwrite existing keys in the original map... this may (or may not) be the expected behaviour.</text>
  </message>
  <message>
    <ts>2017-07-26T09:55:29.836087</ts>
    <user>U11BV7MTK</user>
    <text>change the order</text>
  </message>
  <message>
    <ts>2017-07-26T09:55:53.851065</ts>
    <user>U5JUDH2UE</user>
    <text>I'm aware. That is what I want. It's just an optional field that should be tacked on only if it's not nil. (An authorization http header)</text>
  </message>
  <message>
    <ts>2017-07-26T09:55:57.854018</ts>
    <user>U11BV7MTK</user>
    <text>`(merge {:field "value if not present"} my-map)`</text>
  </message>
  <message>
    <ts>2017-07-26T09:56:07.860124</ts>
    <user>U11BV7MTK</user>
    <text>yeah exactly</text>
  </message>
  <message>
    <ts>2017-07-26T09:56:20.868851</ts>
    <user>U0E0XL064</user>
    <text>right :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T09:56:51.889424</ts>
    <user>U5JUDH2UE</user>
    <text>I don't suppose there's a merge that would do `(merge {:a 1} {:b nil})` and return `{:a 1}`?</text>
  </message>
  <message>
    <ts>2017-07-26T09:57:53.929972</ts>
    <user>U11BV7MTK</user>
    <text>that sounds orthogonal to merge. you want to prune your map after the merge?</text>
  </message>
  <message>
    <ts>2017-07-26T09:58:51.967256</ts>
    <user>U11BV7MTK</user>
    <text>if it's just top level keys you could `(into {} (map (fn [[k v]] (when v [k v])) my-map)` would probably work</text>
  </message>
  <message>
    <ts>2017-07-26T09:59:34.995350</ts>
    <user>U11BV7MTK</user>
    <text>there's probably an even better sort with filter</text>
  </message>
  <message>
    <ts>2017-07-26T10:00:00.012139</ts>
    <user>U11BV7MTK</user>
    <text>`(into {} (filter (fn [[k v]] v) my-map)`</text>
  </message>
  <message>
    <ts>2017-07-26T10:01:40.080647</ts>
    <user>U214G9RAP</user>
    <text>To clarify your intention is to load the entirety of output of the first pmap into memory, then consume it once its realised?</text>
  </message>
  <message>
    <ts>2017-07-26T10:02:17.104670</ts>
    <user>U11BV7MTK</user>
    <text>and if you have possibility of false change the body of the `fn` to (some v)</text>
  </message>
  <message>
    <ts>2017-07-26T10:03:05.136391</ts>
    <user>U5JUDH2UE</user>
    <text>All great ideas.
I've gone with `(merge xs (when a {:a a}))`.</text>
  </message>
  <message>
    <ts>2017-07-26T10:03:30.152739</ts>
    <user>U11BV7MTK</user>
    <text>that will clobber your original value i thought</text>
  </message>
  <message>
    <ts>2017-07-26T10:03:35.156537</ts>
    <user>U11BV7MTK</user>
    <text>you need your original map second</text>
  </message>
  <message>
    <ts>2017-07-26T10:03:48.165083</ts>
    <user>U051SA920</user>
    <text>&lt;@U5JUDH2UE&gt; In that case you could do: `(cond-&amp;gt; xs a (assoc :a a))`</text>
  </message>
  <message>
    <ts>2017-07-26T10:04:20.186729</ts>
    <user>U5JUDH2UE</user>
    <text>Sorry, I'm mixing names. `xs` doesn't have a `:a` yet. There's no possibility of clobbering.</text>
  </message>
  <message>
    <ts>2017-07-26T10:04:27.191298</ts>
    <user>U11BV7MTK</user>
    <text>:+1:</text>
  </message>
  <message>
    <ts>2017-07-26T10:06:43.279660</ts>
    <user>U5JUDH2UE</user>
    <text>&lt;@U051SA920&gt; I quite like that one. :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-26T10:08:09.334394</ts>
    <user>U214G9RAP</user>
    <text>If that's the case simply wrap the first pmap in a `doall`

```
(pmap #(println "b" %)
  (doall (pmap (fn [x] (println "a" x) x)
(range 1000))))
```</text>
  </message>
  <message>
    <ts>2017-07-26T10:12:53.519878</ts>
    <user>U5JUDH2UE</user>
    <text>Is there a better way to do `(symbol *ns* 'symbol)`?</text>
  </message>
  <message>
    <ts>2017-07-26T10:16:20.655803</ts>
    <user>U5JUDH2UE</user>
    <text>Huh, nevermind. Apparently I can do syntax quoting for the dispatch value of a multimethod. Not sure why I thought I couldn't earlier.</text>
  </message>
  <message>
    <ts>2017-07-26T10:50:13.046703</ts>
    <user>U0E0XL064</user>
    <text>&lt;@U5JUDH2UE&gt; Not sure if it would help, but &lt;https://github.com/nathanmarz/specter&gt; has some really 'navigators' to do all kinds of transformations on data structures. (Maybe not worth the effort for easy navigation, although I think it may be if you have at least 2 steps to navigate, including predicates :slightly_smiling_face: )</text>
  </message>
  <message>
    <ts>2017-07-26T10:53:41.193392</ts>
    <user>U5JUDH2UE</user>
    <text>&lt;@U0E0XL064&gt; Huh, that's cool. Definitely overkill for this though. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T10:54:10.212905</ts>
    <user>U173SEFUN</user>
    <text>&lt;@U5JUDH2UE&gt; for associng a value if not null, with specter it's `(setval [:a some?] my-value amap)`</text>
  </message>
  <message>
    <ts>2017-07-26T10:54:34.229909</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0E0XL064&gt; are those basically lenses?</text>
  </message>
  <message>
    <ts>2017-07-26T10:54:37.232347</ts>
    <user>U173SEFUN</user>
    <text>for associng only if field exists, it would be `(setval (must :a) my-val amap)`</text>
  </message>
  <message>
    <ts>2017-07-26T10:54:53.243132</ts>
    <user>U173SEFUN</user>
    <text>will be way more performant than merge as well</text>
  </message>
  <message>
    <ts>2017-07-26T10:55:53.285747</ts>
    <user>U0E0XL064</user>
    <text>I didn't use specter much yet - only found about it about a month ago - but it's definitely cool. Also for small cases.</text>
  </message>
  <message>
    <ts>2017-07-26T11:54:49.724457</ts>
    <user>U064X3EF3</user>
    <text>This is discussed in my talk, but if order matters, then your system is already broken. That is, you should never have two different versions of the same class on your classpath - if you do, then something bad has already happened.</text>
  </message>
  <message>
    <ts>2017-07-26T12:00:59.979081</ts>
    <user>U050MP39D</user>
    <text>you're right, log32n. so if you allowed delete you'd have to rebalance the tree right? honestly I haven't thought about data structure algorithmic performance since uni, but I just kind of trust that this probably isn't feasible. I'm sure the fact that the data structures are persistent makes it even more complicated</text>
  </message>
  <message>
    <ts>2017-07-26T12:03:25.077892</ts>
    <user>U3JURM9B6</user>
    <text>disclaimer: I haven't read the actual source code

so now we both agree that a persistent vector is a tree with depth log32n

this means that assoc is NOT O(1), but O(log_32 n)

the reason being, when we update a node, we have to update "all anvestors" until we get to the root</text>
  </message>
  <message>
    <ts>2017-07-26T12:03:57.099181</ts>
    <user>U3JURM9B6</user>
    <text>since vectors are persistent =&amp;gt; assoc has to create a new node =&amp;gt; but then it has to create a new block for every anvestor from the thing we want to update until we get up to the root</text>
  </message>
  <message>
    <ts>2017-07-26T12:04:31.121667</ts>
    <user>U3JURM9B6</user>
    <text>so then the question is: can we do delete! in O(log_32 n) time, whilemaking it easy to index -- and I don't know, but I'm leaning towards yes</text>
  </message>
  <message>
    <ts>2017-07-26T12:18:02.636156</ts>
    <user>U0561MZLJ</user>
    <text>Style question: say I have three items `(def a ["a"]) (def b [["b" "c"] ["d" "e"]]) (def c "f")`, and I want to put them into a list like so:
```
`[~a ~@b ~c]
```
but without using syntax-quote/unquote/splicing-unquote...how would you do it as concisely as possible (without losing generality)?</text>
  </message>
  <message>
    <ts>2017-07-26T12:20:16.718979</ts>
    <user>U0561MZLJ</user>
    <text>(i.e. the desired result is `[["a"] ["b" "c"] ["d" "e"] "f"]`)</text>
  </message>
  <message>
    <ts>2017-07-26T12:20:43.736094</ts>
    <user>U11BV7MTK</user>
    <text>so you just want to append them?</text>
  </message>
  <message>
    <ts>2017-07-26T12:20:56.744200</ts>
    <user>U051SS2EU</user>
    <text>the middle one is unpacked</text>
  </message>
  <message>
    <ts>2017-07-26T12:21:20.759158</ts>
    <user>U051SS2EU</user>
    <text>one option is `(concat [a] b [c])` - I admit that looks weird</text>
  </message>
  <message>
    <ts>2017-07-26T12:21:47.775309</ts>
    <user>U0561MZLJ</user>
    <text>&lt;@U051SS2EU&gt; actually, that's not nearly as bad as what I was doing</text>
  </message>
  <message>
    <ts>2017-07-26T12:22:08.788262</ts>
    <user>U0561MZLJ</user>
    <text>Does suck a bit that you have to pack the elements you don't want unpacked just to...well...yeah</text>
  </message>
  <message>
    <ts>2017-07-26T12:30:50.119121</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0561MZLJ&gt; depending on your actual problem, you could use something like `(def prepacked [x] (if (and (coll? x) (vector? (first x)))) x [x])` `(mapcat prepacked [a b c])`</text>
  </message>
  <message>
    <ts>2017-07-26T12:31:59.162343</ts>
    <user>U0561MZLJ</user>
    <text>hah...yeah, that probably won't work because some of these are multiple levels nested, and only some of the levels need to be unpacked</text>
  </message>
  <message>
    <ts>2017-07-26T12:32:21.176037</ts>
    <user>U0561MZLJ</user>
    <text>my personal preference is to "say what you mean" with syntax-quote, but understandably the team is worried about maintainability...</text>
  </message>
  <message>
    <ts>2017-07-26T14:11:48.768446</ts>
    <user>U14DSHZ4P</user>
    <text>Hey there. How to update a key in a map to hold a empty vector?</text>
  </message>
  <message>
    <ts>2017-07-26T14:11:51.770491</ts>
    <user>U14DSHZ4P</user>
    <text>```=&amp;gt; (def Person {:person-id "person-1" :category "customer" :purchase ["p1"] :dates ["d1"]})
#'user/Person
=&amp;gt; (update :purchase Person [])
IllegalArgumentException Key must be integer  clojure.lang.APersistentVector.invoke (APersistentVector.java:292)```</text>
  </message>
  <message>
    <ts>2017-07-26T14:14:08.851607</ts>
    <user>U0NCTKEV8</user>
    <text>look at the docs for update</text>
  </message>
  <message>
    <ts>2017-07-26T14:14:40.870031</ts>
    <user>U0NCTKEV8</user>
    <text>(you seem to have picked random arguments in a random order)</text>
  </message>
  <message>
    <ts>2017-07-26T14:15:30.899906</ts>
    <user>U0NCTKEV8</user>
    <text>(and you want assoc not update, but go ahead and read the docs for both assoc and update)</text>
  </message>
  <message>
    <ts>2017-07-26T14:16:36.939245</ts>
    <user>U0NCTKEV8</user>
    <text>by docs I meant the docstring you access using `doc` in the repl, but you may also want to start here &lt;https://clojure.org/reference/data_structures#Maps&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T14:17:00.953690</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! I am getting a cryptic error which I do not understand. Here's the piece of code: &lt;https://gist.github.com/hmaurer/8e786bfd507798393c8be45ffb3a1b46&gt;. The error is in the comments. Could someone take a look please?</text>
  </message>
  <message>
    <ts>2017-07-26T14:18:21.000816</ts>
    <user>U5ZAJ15P0</user>
    <text>The error is `Can't let qualified name`, but I don't get why the gensym'ed variable gets qualified by the syntax quote</text>
  </message>
  <message>
    <ts>2017-07-26T14:20:35.079449</ts>
    <user>U14DSHZ4P</user>
    <text>dumbo! i was using the wrong function here. Thanks &lt;@U0NCTKEV8&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T14:20:41.082897</ts>
    <user>U0NCTKEV8</user>
    <text>I would double check to  make sure  the code that is being run actually matches the code you are reading (restart your jvms) and then I would suspect this is actually coming from some other macro</text>
  </message>
  <message>
    <ts>2017-07-26T14:21:11.100252</ts>
    <user>U5ZAJ15P0</user>
    <text>I restarted lein's repl. Is that enough?</text>
  </message>
  <message>
    <ts>2017-07-26T14:22:03.132218</ts>
    <user>U0NCTKEV8</user>
    <text>yes</text>
  </message>
  <message>
    <ts>2017-07-26T14:22:33.150102</ts>
    <user>U0NCTKEV8</user>
    <text>I would put a println at the start of the macro to print out ctx-binding because  I suspect it is already being passed in a fully qualified symbol</text>
  </message>
  <message>
    <ts>2017-07-26T14:22:56.164133</ts>
    <user>U0NCTKEV8</user>
    <text>your docstring is also in the wrong place</text>
  </message>
  <message>
    <ts>2017-07-26T14:24:13.211141</ts>
    <user>U5ZAJ15P0</user>
    <text>ah, thanks for pointing that out</text>
  </message>
  <message>
    <ts>2017-07-26T14:25:00.239745</ts>
    <user>U0NCTKEV8</user>
    <text>it is a super common thing to do</text>
  </message>
  <message>
    <ts>2017-07-26T14:25:07.244051</ts>
    <user>U5ZAJ15P0</user>
    <text>ctx-binding seems fine. The println prints `ctx`</text>
  </message>
  <message>
    <ts>2017-07-26T14:25:33.259688</ts>
    <user>U5ZAJ15P0</user>
    <text>which matches how I am using the macro, e.g.
```
(deftest test-authentication
  (with-scratch-ctx ctx
      ...
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:25:55.272785</ts>
    <user>U5ZAJ15P0</user>
    <text>Still throwing ` :cause "Can't let qualified name: wef-backend.test-util/conn# "` though</text>
  </message>
  <message>
    <ts>2017-07-26T14:26:07.281113</ts>
    <user>U0NCTKEV8</user>
    <text>is d/db a macro?</text>
  </message>
  <message>
    <ts>2017-07-26T14:26:48.307408</ts>
    <user>U5ZAJ15P0</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-07-26T14:28:15.363445</ts>
    <user>U5ZAJ15P0</user>
    <text>but I get the same error even if I deleted the whole ~ctx-binding line</text>
  </message>
  <message>
    <ts>2017-07-26T14:28:42.380925</ts>
    <user>U5ZAJ15P0</user>
    <text>I never got that error with uri# or datomic# by the way, it only occured when I added conn#</text>
  </message>
  <message>
    <ts>2017-07-26T14:28:50.386327</ts>
    <user>U5ZAJ15P0</user>
    <text>It's probably something silly</text>
  </message>
  <message>
    <ts>2017-07-26T14:29:09.398300</ts>
    <user>U0NCTKEV8</user>
    <text>do you have a var named conn# in that namespace?</text>
  </message>
  <message>
    <ts>2017-07-26T14:29:29.410877</ts>
    <user>U051SA920</user>
    <text>&lt;@U5ZAJ15P0&gt; What does macroexpand give you?</text>
  </message>
  <message>
    <ts>2017-07-26T14:29:58.429236</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0NCTKEV8&gt; no, I checked. Let me check again just to make sure..</text>
  </message>
  <message>
    <ts>2017-07-26T14:30:28.448675</ts>
    <user>U5ZAJ15P0</user>
    <text>`java.lang.RuntimeException: No such var: wef-backend.test-util/conn#`</text>
  </message>
  <message>
    <ts>2017-07-26T14:30:44.458835</ts>
    <user>U0NCTKEV8</user>
    <text>you could fix it immediately by replacing most of the macro with a function that returns the context, and have the macro expand in to invoking that and then deleting it</text>
  </message>
  <message>
    <ts>2017-07-26T14:31:04.471195</ts>
    <user>U0NCTKEV8</user>
    <text>but that wouldn't tell you what is wrong</text>
  </message>
  <message>
    <ts>2017-07-26T14:32:58.544318</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SA920&gt;
```
(let*
 [uri__16604__auto__
  (clojure.core/str "datomic:mem://hello-test-" (java.util.UUID/randomUUID))
  datomic__16605__auto__
  (integrant.core/init-key :wef-backend/datomic {:uri uri__16604__auto__})
  wef-backend.test-util/conn#
  (:conn datomic__16605__auto__)
  ctx
  {:auth nil :conn conn__16606__auto__ :db (datomic.api/db conn__16606__auto__)}]
 (try (+ 1 2) (finally (datomic.api/delete-database uri__16604__auto__))))
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:33:12.553358</ts>
    <user>U5ZAJ15P0</user>
    <text>when running
```
(macroexpand '(wef-backend.test-util/with-scratch-ctx ctx (+ 1 2)))
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:33:46.573891</ts>
    <user>U051SA920</user>
    <text>What happens when you rename it to `some-other-conn#`?</text>
  </message>
  <message>
    <ts>2017-07-26T14:34:01.582552</ts>
    <user>U5ZAJ15P0</user>
    <text>tried that, didn't work. Trying again now just to make sure</text>
  </message>
  <message>
    <ts>2017-07-26T14:34:05.585130</ts>
    <user>U0NCTKEV8</user>
    <text>is that a real pound sign, or some unicode nonsense?</text>
  </message>
  <message>
    <ts>2017-07-26T14:34:25.597310</ts>
    <user>U051SA920</user>
    <text>Well the second usage of `conn#` expands properly. (in the map)</text>
  </message>
  <message>
    <ts>2017-07-26T14:35:45.647558</ts>
    <user>U0NCTKEV8</user>
    <text>yeah, which makes me  suspect the first has some weird shenanigans</text>
  </message>
  <message>
    <ts>2017-07-26T14:36:05.659353</ts>
    <user>U5ZAJ15P0</user>
    <text>Wait, I think I found the issue</text>
  </message>
  <message>
    <ts>2017-07-26T14:36:13.664576</ts>
    <user>U5ZAJ15P0</user>
    <text>`some-other-conn# (:conn datomic#)]`</text>
  </message>
  <message>
    <ts>2017-07-26T14:36:25.671863</ts>
    <user>U5ZAJ15P0</user>
    <text>the "space" between # and ( has charcode 160</text>
  </message>
  <message>
    <ts>2017-07-26T14:36:28.673493</ts>
    <user>U5ZAJ15P0</user>
    <text>instead of 32</text>
  </message>
  <message>
    <ts>2017-07-26T14:36:46.684156</ts>
    <user>U051SA920</user>
    <text>oh lol. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T14:36:50.686438</ts>
    <user>U0NCTKEV8</user>
    <text>hah!</text>
  </message>
  <message>
    <ts>2017-07-26T14:36:50.686440</ts>
    <user>U0NCTKEV8</user>
    <text>unicode malarky</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:09.697323</ts>
    <user>U11BV7MTK</user>
    <text>did you copy past some of this from a github page?</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:21.704827</ts>
    <user>U5ZAJ15P0</user>
    <text>nope, I wrote it myself</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:24.706742</ts>
    <user>U5ZAJ15P0</user>
    <text>no idea what happened there</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:40.716618</ts>
    <user>U5ZAJ15P0</user>
    <text>well, I copied an earlier version of that code, which worked</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:48.721280</ts>
    <user>U5ZAJ15P0</user>
    <text>then added that line myself</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:49.721668</ts>
    <user>U11BV7MTK</user>
    <text>from where?</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:54.724587</ts>
    <user>U5ZAJ15P0</user>
    <text>it might have picked up a character from somewhere</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:55.725047</ts>
    <user>U5ZAJ15P0</user>
    <text>github</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:55.725396</ts>
    <user>U11BV7MTK</user>
    <text>oh</text>
  </message>
  <message>
    <ts>2017-07-26T14:37:57.726461</ts>
    <user>U11BV7MTK</user>
    <text>weird</text>
  </message>
  <message>
    <ts>2017-07-26T14:38:57.763046</ts>
    <user>U5ZAJ15P0</user>
    <text>I just checked and none of the characters from the snippet I copy/pasted had character 160</text>
  </message>
  <message>
    <ts>2017-07-26T14:38:58.763600</ts>
    <user>U5ZAJ15P0</user>
    <text>oh well</text>
  </message>
  <message>
    <ts>2017-07-26T14:39:05.767908</ts>
    <user>U5ZAJ15P0</user>
    <text>sorry for the trouble</text>
  </message>
  <message>
    <ts>2017-07-26T14:40:23.815244</ts>
    <user>U0NCTKEV8</user>
    <text>there is actually an open jira issue that has had some recent activity about changing how clojure handles unicode whitespaces</text>
  </message>
  <message>
    <ts>2017-07-26T14:40:29.818980</ts>
    <user>U11BV7MTK</user>
    <text>`char code 160 would be &amp;amp;nbsp;`</text>
  </message>
  <message>
    <ts>2017-07-26T14:41:05.840366</ts>
    <user>U44SHEP4N</user>
    <text>the fun thing about this is, thats 160 is not even considered whitespace by java</text>
  </message>
  <message>
    <ts>2017-07-26T14:41:15.846151</ts>
    <user>U0NCTKEV8</user>
    <text>oh, I guess the issue it got declined</text>
  </message>
  <message>
    <ts>2017-07-26T14:41:15.846531</ts>
    <user>U5ZAJ15P0</user>
    <text>Probably what happened is that OS X and/or Atom (the editor I am using) has some shortcut or some way to enter this type of whitespace, and it fat-fingered on the shortcut</text>
  </message>
  <message>
    <ts>2017-07-26T14:41:22.850403</ts>
    <user>U11BV7MTK</user>
    <text>```
employee-resizer.core&amp;gt; (char 160)
\ 
employee-resizer.core&amp;gt; \ 
\space
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:42:05.877048</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;https://dev.clojure.org/jira/browse/CLJ-2207&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T14:42:15.883075</ts>
    <user>U5ZAJ15P0</user>
    <text>it had been a while since I debugged a unicode issue; almost forgot how fun it is</text>
  </message>
  <message>
    <ts>2017-07-26T14:42:17.884348</ts>
    <user>U5ZAJ15P0</user>
    <text>:kappa:</text>
  </message>
  <message>
    <ts>2017-07-26T14:44:14.954582</ts>
    <user>U11BV7MTK</user>
    <text>apparently atom will enter a non-breaking space with alt-space</text>
  </message>
  <message>
    <ts>2017-07-26T14:44:22.959803</ts>
    <user>U11BV7MTK</user>
    <text>probably pretty easy to inadvertently hit</text>
  </message>
  <message>
    <ts>2017-07-26T14:44:38.969312</ts>
    <user>U5ZAJ15P0</user>
    <text>yep, I most definitely inadvertently hit that</text>
  </message>
  <message>
    <ts>2017-07-26T14:45:38.005235</ts>
    <user>U5ZAJ15P0</user>
    <text>If Clojure's reader threw an error saying "unknown character at position X" it would have been easy/easier to debug, but it considered it as part of the symbol</text>
  </message>
  <message>
    <ts>2017-07-26T14:45:49.012091</ts>
    <user>U0NCTKEV8</user>
    <text>that actually may be just be a bug in the reader</text>
  </message>
  <message>
    <ts>2017-07-26T14:46:15.027447</ts>
    <user>U5ZAJ15P0</user>
    <text>Now I know how to confuse the hell out of people though</text>
  </message>
  <message>
    <ts>2017-07-26T14:46:58.053453</ts>
    <user>U5ZAJ15P0</user>
    <text>```
wef-backend.core=&amp;gt; (def     42)
#'wef-backend.core/
wef-backend.core=&amp;gt;
42
wef-backend.core=&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:47:02.055391</ts>
    <user>U5ZAJ15P0</user>
    <text>this works</text>
  </message>
  <message>
    <ts>2017-07-26T14:48:28.107145</ts>
    <user>U5ZAJ15P0</user>
    <text>this too:</text>
  </message>
  <message>
    <ts>2017-07-26T14:48:31.109129</ts>
    <user>U5ZAJ15P0</user>
    <text>```
wef-backend.core=&amp;gt; (def hello world this is a long variable 99)
#'wef-backend.core/hello world this is a long variable
wef-backend.core=&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-07-26T14:48:51.120723</ts>
    <user>U5ZAJ15P0</user>
    <text>eh</text>
  </message>
  <message>
    <ts>2017-07-26T15:04:11.680563</ts>
    <user>U5JUDH2UE</user>
    <text>What is a fast way to do this without the repeated nested pointer?
```
(-&amp;gt; state
    (assoc-in [:a :b :b/field0] "")
    (assoc-in [:a :b :b/field1] "")
    (assoc-in [:a :b :b/field2] ""))
```</text>
  </message>
  <message>
    <ts>2017-07-26T15:05:29.726672</ts>
    <user>U0CM1QURZ</user>
    <text>```
;; maybe?
(assoc-in [:a :b] {:b/field1 "" :b/field1 "" :b/field2 ""})
```</text>
  </message>
  <message>
    <ts>2017-07-26T15:05:44.735480</ts>
    <user>U050MP39D</user>
    <text>fast as in performance?</text>
  </message>
  <message>
    <ts>2017-07-26T15:06:05.747836</ts>
    <user>U5JUDH2UE</user>
    <text>Fast as in, using standard library. I don't want to add any external libs or anything.</text>
  </message>
  <message>
    <ts>2017-07-26T15:06:10.750608</ts>
    <user>U5JUDH2UE</user>
    <text>Performance isn't a concern.</text>
  </message>
  <message>
    <ts>2017-07-26T15:06:23.758274</ts>
    <user>U5JUDH2UE</user>
    <text>Sorry, I shouldn't be using that work. :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-26T15:06:29.761892</ts>
    <user>U050MP39D</user>
    <text>(merge state {:b/field1 "" :b/field1 "" :b/field2 ""})</text>
  </message>
  <message>
    <ts>2017-07-26T15:06:42.769316</ts>
    <user>U050MP39D</user>
    <text>err</text>
  </message>
  <message>
    <ts>2017-07-26T15:06:58.777921</ts>
    <user>U050MP39D</user>
    <text>sorry, (update-in state [:a b] merge {:b/field1 "" :b/field1 "" :b/field2 ""})</text>
  </message>
  <message>
    <ts>2017-07-26T15:07:01.779548</ts>
    <user>U050MP39D</user>
    <text>forgot a few words</text>
  </message>
  <message>
    <ts>2017-07-26T15:07:12.785912</ts>
    <user>U11BV7MTK</user>
    <text>```
(let [nav [:a :b]]
  (-&amp;gt; {:a {:b {}}}
      (assoc-in (conj nav :b/field0) "")
      (assoc-in (conj nav :b/field1) "")))
{:a {:b {:b/field0 "", :b/field1 ""}}}
```</text>
  </message>
  <message>
    <ts>2017-07-26T15:07:41.803228</ts>
    <user>U11BV7MTK</user>
    <text>the navigator is just a vector, so create it with the shared navigation parts</text>
  </message>
  <message>
    <ts>2017-07-26T15:07:56.811509</ts>
    <user>U11BV7MTK</user>
    <text>if i'm understanding correctly</text>
  </message>
  <message>
    <ts>2017-07-26T15:08:11.819955</ts>
    <user>U5JUDH2UE</user>
    <text>&lt;@U11BV7MTK&gt; That's what I thought I was going to need to do.
&lt;@U050MP39D&gt; I'm not sure why I didn't think of update-in... That should work nicely.</text>
  </message>
  <message>
    <ts>2017-07-26T15:08:47.840347</ts>
    <user>U5JUDH2UE</user>
    <text>Not the question is update-in with assoc or merge. Is there any performance difference?</text>
  </message>
  <message>
    <ts>2017-07-26T15:09:34.866794</ts>
    <user>U050MP39D</user>
    <text>I suspect they'd be identical</text>
  </message>
  <message>
    <ts>2017-07-26T15:09:58.879870</ts>
    <user>U5JUDH2UE</user>
    <text>I figured they would be. Anyways, thanks all!</text>
  </message>
  <message>
    <ts>2017-07-26T15:10:07.885177</ts>
    <user>U050MP39D</user>
    <text>merge is implemented in terms of `conj` so yes I'd say identical &lt;https://github.com/clojure/clojure/blob/clojure-1.9.0-alpha14/src/clj/clojure/core.clj#L3022&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T15:10:58.914305</ts>
    <user>U5ZAJ15P0</user>
    <text>When I use lein, where will the clojure stdlib be located on my file system?</text>
  </message>
  <message>
    <ts>2017-07-26T15:11:03.917053</ts>
    <user>U5ZAJ15P0</user>
    <text>.clj files that is</text>
  </message>
  <message>
    <ts>2017-07-26T15:11:23.928643</ts>
    <user>U11BV7MTK</user>
    <text>```
(let [nav [:a :b]]
  (reduce (fn [m [k v]] (assoc-in m (conj nav k) v))
          {:a {:b {}}}
          [[:b/field0 ""]
           [:b/field1 ""]
           [:b/field2 ""]]))
{:a {:b {:b/field0 "", :b/field1 "", :b/field2 ""}}}
```</text>
  </message>
  <message>
    <ts>2017-07-26T15:13:19.993853</ts>
    <user>U06CM8C3V</user>
    <text>&lt;@U5ZAJ15P0&gt; You mean the jar files?</text>
  </message>
  <message>
    <ts>2017-07-26T15:13:35.003088</ts>
    <user>U5ZAJ15P0</user>
    <text>ah right, so the std lib will be within jar files. Nevermind then</text>
  </message>
  <message>
    <ts>2017-07-26T15:13:57.015496</ts>
    <user>U050MP39D</user>
    <text>jar files are just zip files and you can unzip them and the .clj files will be inside, if that matters to you</text>
  </message>
  <message>
    <ts>2017-07-26T15:14:00.016997</ts>
    <user>U0NCTKEV8</user>
    <text>&lt;@U5ZAJ15P0&gt; lein runs 2 jvms, lein's jvm and your project's jvm, the clojure runtime that lein uses is  part of the lein jar and lives in ~/.lein, the clojure runtime for your project is Just Another Jar(tm)</text>
  </message>
  <message>
    <ts>2017-07-26T15:15:27.065521</ts>
    <user>U06CM8C3V</user>
    <text>lots of interesting jar files in `~/.m2/repository` too</text>
  </message>
  <message>
    <ts>2017-07-26T15:30:20.559101</ts>
    <user>U066TMAKS</user>
    <text>what's a good way to xor two sets?</text>
  </message>
  <message>
    <ts>2017-07-26T15:38:51.836735</ts>
    <user>U050MP39D</user>
    <text>(set/union (set/difference s1 s2) (set/difference s2 s1))</text>
  </message>
  <message>
    <ts>2017-07-26T15:50:35.215861</ts>
    <user>U051SS2EU</user>
    <text>a silly way to do it ```=&amp;gt; (into #{} (comp cat (take 2)) (clojure.data/diff #{1 2 3} #{2 3 4}))
#{1 4}```</text>
  </message>
  <message>
    <ts>2017-07-26T16:30:41.560562</ts>
    <user>U0CDMAKD0</user>
    <text>is it possible to use clojure.java.shell to invoke a shell command like `tr &amp;lt; infile.txt -d '\000' &amp;gt; outfile.txt` ?</text>
  </message>
  <message>
    <ts>2017-07-26T16:31:35.590938</ts>
    <user>U0CDMAKD0</user>
    <text>&lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/java/shell.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T16:42:39.954694</ts>
    <user>U050ECB92</user>
    <text>&lt;https://twitter.com/clojure_conj/status/889899202767147008&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T16:42:45.957694</ts>
    <user>U050ECB92</user>
    <text>^ How cool is that?</text>
  </message>
  <message>
    <ts>2017-07-26T16:43:24.979151</ts>
    <user>U11BV7MTK</user>
    <text>yeah got the email earlier. super super cool</text>
  </message>
  <message>
    <ts>2017-07-26T16:58:03.464037</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0CDMAKD0&gt; in order to use things like `&amp;lt;` you need to invoke /bin/sh</text>
  </message>
  <message>
    <ts>2017-07-26T16:58:18.472177</ts>
    <user>U051SS2EU</user>
    <text>clojure.java.shell/sh, despite the name, is a raw system command that doesn't use sh</text>
  </message>
  <message>
    <ts>2017-07-26T16:59:21.506830</ts>
    <user>U051SS2EU</user>
    <text>of course that's not portable, and then you've created code that only works on a *nix system or reasonable facsimile</text>
  </message>
  <message>
    <ts>2017-07-26T17:04:19.671529</ts>
    <user>U0CDMAKD0</user>
    <text>yeah, &lt;@U051SS2EU&gt; there is a thorny translation that `tr` handles well at the command line that I'd like to shell out within a clojure program ( that does a whole laundry list of things).  Haven't yet found the right syntax for calling `tr` via clojure.java.shell/sh though</text>
  </message>
  <message>
    <ts>2017-07-26T17:05:11.699008</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0CDMAKD0&gt; you send a normal shell command to sh `(clojure.java.shell/sh "/bin/sh" "-c" "tr &amp;lt; infile.txt -d '\000' &amp;gt; outfile.txt")`</text>
  </message>
  <message>
    <ts>2017-07-26T17:06:38.744372</ts>
    <user>U0CDMAKD0</user>
    <text>wow, thank-you.  That works. I tried a lot of other combinations but without the "/bin/sh" "-c"</text>
  </message>
  <message>
    <ts>2017-07-26T17:06:59.754612</ts>
    <user>U051SS2EU</user>
    <text>right, sh -c says "find and run the sh executable, tell it to run this"</text>
  </message>
  <message>
    <ts>2017-07-26T17:07:29.769303</ts>
    <user>U0CDMAKD0</user>
    <text>that class of example should probably be added to the other examples (&lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/java/shell.clj#L130-L142&gt;)</text>
  </message>
  <message>
    <ts>2017-07-26T17:07:39.774131</ts>
    <user>U0CDMAKD0</user>
    <text>thanks again</text>
  </message>
  <message>
    <ts>2017-07-26T17:09:03.816825</ts>
    <user>U051SS2EU</user>
    <text>np, glad I could help, I wonder if it would be worth submitting a patch to JIRA for adding another println to that comment block</text>
  </message>
  <message>
    <ts>2017-07-26T17:11:15.883542</ts>
    <user>U0CDMAKD0</user>
    <text>agreed - I think that would help others.  Not sure how easy that is to do...</text>
  </message>
  <message>
    <ts>2017-07-26T17:14:10.967877</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0CDMAKD0&gt; there is an example of using sh -c as an arg to sh on the clojuredocs page &lt;https://clojuredocs.org/clojure.java.shell/sh&gt;</text>
  </message>
  <message>
    <ts>2017-07-26T17:16:42.042053</ts>
    <user>U0CDMAKD0</user>
    <text>true enough, perhaps a few words there describing why it is useful/needed would work too</text>
  </message>
  <message>
    <ts>2017-07-26T17:46:11.864798</ts>
    <user>U6DJH8TCL</user>
    <text>&lt;@U051SS2EU&gt; thanks for your help yesterday, you were correct !!!!</text>
  </message>
  <message>
    <ts>2017-07-26T21:56:07.942365</ts>
    <user>U17DY48BW</user>
    <text>I know this is a clojure channel but maybe someone will know the answer. I'm trying to ssh into a server, run a shell script, and the disconnect from the server and have the script continue to run</text>
  </message>
  <message>
    <ts>2017-07-26T22:05:30.063019</ts>
    <user>U0954HGDQ</user>
    <text>ssh + nohup?</text>
  </message>
  <message>
    <ts>2017-07-26T23:12:54.851621</ts>
    <user>U3JURM9B6</user>
    <text>&lt;#C03RZGPG3|off-topic&gt; :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-26T23:28:41.020902</ts>
    <user>U4PUTN69G</user>
    <text>tmux or screen</text>
  </message>
  <message>
    <ts>2017-07-27T02:05:03.674368</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U5ZAJ15P0&gt; 'what makes a good REPL?' - what value do REPLs bring, what features make for good REPL, what programming language features enable them</text>
  </message>
  <message>
    <ts>2017-07-27T02:06:53.695991</ts>
    <user>U06GS6P1N</user>
    <text>&lt;@U064X3EF3&gt; a bit too long :) I need a 2-minutes thing</text>
  </message>
  <message>
    <ts>2017-07-27T07:13:33.705600</ts>
    <user>U068SUJNT</user>
    <text>Thanks,  that helped me</text>
  </message>
  <message>
    <ts>2017-07-27T07:48:35.328552</ts>
    <user>U5ZAJ15P0</user>
    <text>Hello! I am reading clojure.core's source cdoe and the beginning confuses me. Could someone explain this out?
```
;during bootstrap we don't have destructuring let, loop or fn, will redefine later
(def
  ^{:macro true
    :added "1.0"}
  let (fn* let [&amp;amp;form &amp;amp;env &amp;amp; decl] (cons 'let* decl)))
```</text>
  </message>
  <message>
    <ts>2017-07-27T07:48:40.329971</ts>
    <user>U5ZAJ15P0</user>
    <text>there are a number of those declarations</text>
  </message>
  <message>
    <ts>2017-07-27T07:49:03.336545</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L31&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T08:10:00.749885</ts>
    <user>U61HA86AG</user>
    <text>`fn*` is a compiler internal thing: &lt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Compiler.java#L47&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T08:13:11.817654</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U61HA86AG&gt; what is the difference with `fn`? Also, why is `let` defined as a macro? I thought it was a special form</text>
  </message>
  <message>
    <ts>2017-07-27T08:14:29.845066</ts>
    <user>U61HA86AG</user>
    <text>`fn` is defined in clojure, and just calls out to `fn*`: &lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L42&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T08:15:45.871978</ts>
    <user>U61HA86AG</user>
    <text>likewise, `let` is a macro that calls out to the special form `let*`</text>
  </message>
  <message>
    <ts>2017-07-27T08:16:17.882952</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U61HA86AG&gt; ah, I see. So special forms are always followed by a `*`, but for easy of use there is a non-starred version</text>
  </message>
  <message>
    <ts>2017-07-27T08:16:31.887907</ts>
    <user>U5ZAJ15P0</user>
    <text>Follow up question: what is the use of adding a name to an anonymous function?</text>
  </message>
  <message>
    <ts>2017-07-27T08:16:36.889911</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g. `(fn foo [x] ...)`</text>
  </message>
  <message>
    <ts>2017-07-27T08:17:04.900075</ts>
    <user>U5ZAJ15P0</user>
    <text>ah nevermind, got it, stack traces :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T08:17:16.904759</ts>
    <user>U61HA86AG</user>
    <text>yeah :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T08:17:52.917556</ts>
    <user>U5ZAJ15P0</user>
    <text>Is there a std lib function to pick a number of keys out of a map? e.g. `Map -&amp;gt; [Key] -&amp;gt; Map`</text>
  </message>
  <message>
    <ts>2017-07-27T08:18:02.921259</ts>
    <user>U61HA86AG</user>
    <text>and the non-starred version is more than just convenience, it also lets you do e.g. `(doc let)`</text>
  </message>
  <message>
    <ts>2017-07-27T08:18:31.932110</ts>
    <user>U060FKQPN</user>
    <text>`select-keys`</text>
  </message>
  <message>
    <ts>2017-07-27T08:18:54.939986</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U61HA86AG&gt; when I do `(doc let)` it says `let` is a special form, but in reality it's a macro which expands to a special form. I assume there is some magic going on here; where is it?</text>
  </message>
  <message>
    <ts>2017-07-27T08:19:28.952363</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U060FKQPN&gt; thanks! I really miss a Hoogle-like tool for Clojure :disappointed: &lt;https://www.haskell.org/hoogle/&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T08:21:12.990317</ts>
    <user>U61HA86AG</user>
    <text>&lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L4439&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T08:24:23.059830</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U61HA86AG&gt; why is it defined first here &lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L32&gt; then  here &lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L4439&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-27T08:25:35.085614</ts>
    <user>U446AB17F</user>
    <text>&lt;@U06B8J0AJ&gt; can it be that you are not on the latest version? it is fixed in v0.22.4 &lt;https://github.com/atom/language-clojure/commit/70e83b27444da31d6367a0aa447a216836eafc05&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T08:25:43.088633</ts>
    <user>U61HA86AG</user>
    <text>well if you look here &lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L193&gt; it uses `let`, but `defmacro` hasn't been defined yet</text>
  </message>
  <message>
    <ts>2017-07-27T08:26:20.101989</ts>
    <user>U61HA86AG</user>
    <text>think the first `let` is a barebones version</text>
  </message>
  <message>
    <ts>2017-07-27T08:29:48.180286</ts>
    <user>U61HA86AG</user>
    <text>yeah, so the first let only has the functionality needed to bootstrap the rest of clojure, and then later on it gets the rest of its functionality via `defmacro`</text>
  </message>
  <message>
    <ts>2017-07-27T08:29:58.184192</ts>
    <user>U5ZAJ15P0</user>
    <text>interesting</text>
  </message>
  <message>
    <ts>2017-07-27T08:31:05.210082</ts>
    <user>U5ZAJ15P0</user>
    <text>thanks for explaining this out &lt;@U61HA86AG&gt;  :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T08:31:16.214533</ts>
    <user>U61HA86AG</user>
    <text>no problem! any time</text>
  </message>
  <message>
    <ts>2017-07-27T09:42:06.250588</ts>
    <user>U0E0XL064</user>
    <text>I'm trying to use transducers... The original code:
```
(-&amp;gt;&amp;gt; m 
     (map :my-key)
     (map #(clojure.edn/read-string %)) )
```</text>
  </message>
  <message>
    <ts>2017-07-27T09:44:07.319342</ts>
    <user>U0E0XL064</user>
    <text>translating to transducers:
```
(let [xf (comp (map :my-key)
                (map #(clojure.edn/read-string %))))]
  (transduce xf concat m)
```
This gives a stackoverflow error...</text>
  </message>
  <message>
    <ts>2017-07-27T09:45:13.358056</ts>
    <user>U0E0XL064</user>
    <text>oh wait... it's not the same.</text>
  </message>
  <message>
    <ts>2017-07-27T09:47:04.423826</ts>
    <user>U0E0XL064</user>
    <text>concat gives that stackoverflowerror...</text>
  </message>
  <message>
    <ts>2017-07-27T09:50:06.527703</ts>
    <user>U051SA920</user>
    <text>&lt;@U0E0XL064&gt; `(into [] xf m)`</text>
  </message>
  <message>
    <ts>2017-07-27T09:50:58.558937</ts>
    <user>U0E0XL064</user>
    <text>right, thx.</text>
  </message>
  <message>
    <ts>2017-07-27T09:51:53.591375</ts>
    <user>U0539NJF7</user>
    <text>also: &lt;https://stuartsierra.com/2015/04/26/clojure-donts-concat&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T09:52:36.616974</ts>
    <user>U0E0XL064</user>
    <text>funny... I read that last week. stupid me :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-27T10:14:31.474234</ts>
    <user>U0539NJF7</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T10:20:44.723047</ts>
    <user>U0E0XL064</user>
    <text>well, actually it's `(flatten (into [] xf m)` I was after.</text>
  </message>
  <message>
    <ts>2017-07-27T10:24:30.875296</ts>
    <user>U050487DQ</user>
    <text>&lt;@U0E0XL064&gt; or second `map` should be `mapcat` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T10:25:41.923464</ts>
    <user>U0E0XL064</user>
    <text>nice.</text>
  </message>
  <message>
    <ts>2017-07-27T11:18:13.062722</ts>
    <user>U051HUZLD</user>
    <text>is there something builtin or better for this?
```
(defn least-common-ancestor [path1 path2]
  (let [i (min (count path1) (count path2))]
    (reduce
      (fn [p idx]
        (let [v1 (nth path1 idx)
              v2 (nth path2 idx)]
          (if (= v1 v2)
            (conj p v1)
            (reduced p))))
      [], (range i))))

(least-common-ancestor
  [:a :b :c]
  [:a :b :d])
=&amp;gt; [:a :b]
```</text>
  </message>
  <message>
    <ts>2017-07-27T11:25:44.369230</ts>
    <user>U051SA920</user>
    <text>&lt;@U051HUZLD&gt; `(take-while some? (map (fn [a b] (when (= a b) a)) [0 1 2] [0 1 3]))`</text>
  </message>
  <message>
    <ts>2017-07-27T11:28:06.464141</ts>
    <user>U3HKE2SLW</user>
    <text>This one has much better runtime performance, mostly stemming from the omission of `nth`</text>
  </message>
  <message>
    <ts>2017-07-27T11:29:43.530258</ts>
    <user>U051HUZLD</user>
    <text>:bellissimo:</text>
  </message>
  <message>
    <ts>2017-07-27T11:29:54.537727</ts>
    <user>U051SA920</user>
    <text>Well you could avoid one `nth` call here if you use `reduce-kv` and you can guarantee it's a vec</text>
  </message>
  <message>
    <ts>2017-07-27T11:30:43.571494</ts>
    <user>U051HUZLD</user>
    <text>not worth it. on the other hand, count being &amp;gt; 10 is highly unlikely (in my case).</text>
  </message>
  <message>
    <ts>2017-07-27T11:31:11.590789</ts>
    <user>U051SA920</user>
    <text>Yeah then the `map` version will be quicker. Reduce is often slower for smallish input</text>
  </message>
  <message>
    <ts>2017-07-27T11:35:33.767091</ts>
    <user>U051SA920</user>
    <text>And if you want to avoid the intermediate sequence: `(sequence (comp (map #(when (= %1 %2) %1) ) (take-while some?))   [0 1 2] [0 1 3])`</text>
  </message>
  <message>
    <ts>2017-07-27T11:46:19.195802</ts>
    <user>U051HUZLD</user>
    <text>&lt;@U051SA920&gt; on such small inputs it is not worth it:
```
(time  (dotimes [n 1000]    (take-while some? (map (fn [a b] (when (= a b) a)) [0 1 2] [0 1 3]))))
"Elapsed time: 1.166446 msecs"
(time  (dotimes [n 1000]    (sequence (comp (map #(when (= %1 %2) %1) ) (take-while some?))   [0 1 2] [0 1 3])))
"Elapsed time: 7.258858 msecs"
```</text>
  </message>
  <message>
    <ts>2017-07-27T11:47:30.244041</ts>
    <user>U051SA920</user>
    <text>&lt;@U051HUZLD&gt; Don't forget a `doall` :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T11:48:23.279430</ts>
    <user>U051HUZLD</user>
    <text>```(time  (dotimes [n 1000]    (doall (take-while
"Elapsed time: 3.356031 msecs"```</text>
  </message>
  <message>
    <ts>2017-07-27T11:48:29.283286</ts>
    <user>U051HUZLD</user>
    <text>:opieop:</text>
  </message>
  <message>
    <ts>2017-07-27T11:49:22.319027</ts>
    <user>U051HUZLD</user>
    <text>omg what am I doing right now?</text>
  </message>
  <message>
    <ts>2017-07-27T13:09:10.233423</ts>
    <user>U051SS2EU</user>
    <text>if you want to measure calculation time (or run for side effects) and don't need the result, use dorun instead of doall</text>
  </message>
  <message>
    <ts>2017-07-27T13:32:45.068207</ts>
    <user>U051SS2EU</user>
    <text>also, sequence is not typically more efficient than regular lazy ops in most cases iirc</text>
  </message>
  <message>
    <ts>2017-07-27T13:59:35.036290</ts>
    <user>U051SS2EU</user>
    <text>I'd start with the general concept of event sourcing, which is more general and more usable than CQRS</text>
  </message>
  <message>
    <ts>2017-07-27T14:00:54.087833</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; right, sorry, I think my question was misphrased. Right now I am more concerned about how to structure my code at the application level (how to organise functions and manage side effects)</text>
  </message>
  <message>
    <ts>2017-07-27T14:01:09.097005</ts>
    <user>U051SS2EU</user>
    <text>event sourcing is a strategy for this</text>
  </message>
  <message>
    <ts>2017-07-27T14:01:14.099660</ts>
    <user>U5ZAJ15P0</user>
    <text>Datomic already gives me some level of event sourcing, which is enough for my needs</text>
  </message>
  <message>
    <ts>2017-07-27T14:01:18.102757</ts>
    <user>U5ZAJ15P0</user>
    <text>ah</text>
  </message>
  <message>
    <ts>2017-07-27T14:01:21.104818</ts>
    <user>U5ZAJ15P0</user>
    <text>how so &lt;@U051SS2EU&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-27T14:01:32.111158</ts>
    <user>U051SS2EU</user>
    <text>the concept is that events are immutable and describe the actual domain data</text>
  </message>
  <message>
    <ts>2017-07-27T14:01:53.124692</ts>
    <user>U051SS2EU</user>
    <text>then, your db describes state, and is created via a reduce across the events (literally or conceptually)</text>
  </message>
  <message>
    <ts>2017-07-27T14:01:56.126548</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt;  i mean, I am familiar with what event sourcing is, but I don't see how it would help with this</text>
  </message>
  <message>
    <ts>2017-07-27T14:02:12.136294</ts>
    <user>U051SS2EU</user>
    <text>because now your state is just a query across your events</text>
  </message>
  <message>
    <ts>2017-07-27T14:02:17.139544</ts>
    <user>U051SS2EU</user>
    <text>it's an optimization</text>
  </message>
  <message>
    <ts>2017-07-27T14:02:49.159504</ts>
    <user>U051SS2EU</user>
    <text>so you have "all events", from that you derive a postgress db, or a datomic db, or even a mongo db - via looping over the events, maybe with reduce</text>
  </message>
  <message>
    <ts>2017-07-27T14:02:54.162280</ts>
    <user>U051SS2EU</user>
    <text>that's your state of the world</text>
  </message>
  <message>
    <ts>2017-07-27T14:03:24.181724</ts>
    <user>U5ZAJ15P0</user>
    <text>Right, but Datomic already gives a fairly event-sourced model (except that transactions dont' represent domain actions, but they can be reified with a key that does represent a domain action)</text>
  </message>
  <message>
    <ts>2017-07-27T14:03:28.183914</ts>
    <user>U051SS2EU</user>
    <text>now, if your events are set up properly (strictly ordered, immutable) - all instances of your app have access to the same time series of immutable states</text>
  </message>
  <message>
    <ts>2017-07-27T14:03:59.203261</ts>
    <user>U5ZAJ15P0</user>
    <text>Datomic's transaction log can be considered as the event log</text>
  </message>
  <message>
    <ts>2017-07-27T14:04:00.204026</ts>
    <user>U051SS2EU</user>
    <text>queries are reads of the current state, "modifications" are insertions into the stream of events (you must loop back up to that level)</text>
  </message>
  <message>
    <ts>2017-07-27T14:04:04.206358</ts>
    <user>U051SS2EU</user>
    <text>right, right</text>
  </message>
  <message>
    <ts>2017-07-27T14:04:17.214882</ts>
    <user>U051SS2EU</user>
    <text>so you are on the right track if using datomic, you don't need CQRS for this</text>
  </message>
  <message>
    <ts>2017-07-27T14:04:49.233868</ts>
    <user>U5ZAJ15P0</user>
    <text>My concern is more: how do I nicely separate my "business logic" (functions that perform transactions, authorisation and reify transactions with additional infos) from my API</text>
  </message>
  <message>
    <ts>2017-07-27T14:04:58.239302</ts>
    <user>U5ZAJ15P0</user>
    <text>in the application code</text>
  </message>
  <message>
    <ts>2017-07-27T14:05:02.241565</ts>
    <user>U5ZAJ15P0</user>
    <text>sorry if this wasn't clear</text>
  </message>
  <message>
    <ts>2017-07-27T14:05:25.255726</ts>
    <user>U051SS2EU</user>
    <text>I use protocols to describe my domain / API level abstractions</text>
  </message>
  <message>
    <ts>2017-07-27T14:05:25.255892</ts>
    <user>U5ZAJ15P0</user>
    <text>what should the interface for those functions be to make them easy to think about and deal with, etc</text>
  </message>
  <message>
    <ts>2017-07-27T14:05:49.270237</ts>
    <user>U051SS2EU</user>
    <text>then for my implementation, I use functional code over vanilla data structures implementing those protocols</text>
  </message>
  <message>
    <ts>2017-07-27T14:06:20.288526</ts>
    <user>U051SS2EU</user>
    <text>the protocols are used as a signal to a reader of the code / user of the library that these names describe domain level concepts, they are the big picture organization of the code</text>
  </message>
  <message>
    <ts>2017-07-27T14:06:32.296064</ts>
    <user>U5ZAJ15P0</user>
    <text>do you have an example of this structure?</text>
  </message>
  <message>
    <ts>2017-07-27T14:06:53.308462</ts>
    <user>U051SS2EU</user>
    <text>I'll have to see if I have a good open source implementation of it…</text>
  </message>
  <message>
    <ts>2017-07-27T14:06:57.310756</ts>
    <user>U5ZAJ15P0</user>
    <text>so protocols are your "public API", and all other functions are implementation details</text>
  </message>
  <message>
    <ts>2017-07-27T14:07:18.322881</ts>
    <user>U051SS2EU</user>
    <text>right - and the protocol methods are expected to take and return hash maps, vectors, keywords, numbers</text>
  </message>
  <message>
    <ts>2017-07-27T14:07:51.342041</ts>
    <user>U051SS2EU</user>
    <text>so we don't pile on mountains of OO, we use modeling tools on the boundaries as a line in the sand, so to speak - to declare organizational intention</text>
  </message>
  <message>
    <ts>2017-07-27T14:07:52.342278</ts>
    <user>U5ZAJ15P0</user>
    <text>how do you pass context around (db, conn and auth)? and how do you perform authorisation / reified transactions, if you do so?</text>
  </message>
  <message>
    <ts>2017-07-27T14:08:20.358826</ts>
    <user>U051SS2EU</user>
    <text>I use component, so that each subsystem gets the parts of the app that it needs passed in on initialization</text>
  </message>
  <message>
    <ts>2017-07-27T14:09:33.400587</ts>
    <user>U5ZAJ15P0</user>
    <text>Could you give me a example of a protocol definition you use in one of your apps?</text>
  </message>
  <message>
    <ts>2017-07-27T14:10:10.421978</ts>
    <user>U051SS2EU</user>
    <text>absolutely - found it!</text>
  </message>
  <message>
    <ts>2017-07-27T14:10:15.425049</ts>
    <user>U051SS2EU</user>
    <text>protocol definition &lt;https://github.com/noisesmith/ludic/blob/master/src/clj/org/noisesmith/ludic/protocol.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T14:10:27.431937</ts>
    <user>U051SS2EU</user>
    <text>implementation &lt;https://github.com/noisesmith/ludic/blob/master/src/clj/org/noisesmith/ludic.clj&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T14:11:41.475511</ts>
    <user>U5ZAJ15P0</user>
    <text>and brilliant, thanks!</text>
  </message>
  <message>
    <ts>2017-07-27T14:11:57.484985</ts>
    <user>U051SS2EU</user>
    <text>oh man - that project is in a slightly weird state, there's two GameBoard protocols that should have different names, and some protocols that need to be moved to the proto namespace</text>
  </message>
  <message>
    <ts>2017-07-27T14:12:03.488743</ts>
    <user>U5ZAJ15P0</user>
    <text>if those functions were hitting a database, would your record hold its ref?</text>
  </message>
  <message>
    <ts>2017-07-27T14:12:05.490081</ts>
    <user>U051SS2EU</user>
    <text>sorry ! it's still in heavy development</text>
  </message>
  <message>
    <ts>2017-07-27T14:12:21.499620</ts>
    <user>U051SS2EU</user>
    <text>the record would expect the ref, yes</text>
  </message>
  <message>
    <ts>2017-07-27T14:12:57.520732</ts>
    <user>U5ZAJ15P0</user>
    <text>Mmh</text>
  </message>
  <message>
    <ts>2017-07-27T14:13:29.539023</ts>
    <user>U5ZAJ15P0</user>
    <text>And if I want to reify *every* transaction with, say, the access token of the current user, how would you do this? Would you provide your own "transact" function, wrapping Datomic's?</text>
  </message>
  <message>
    <ts>2017-07-27T14:13:40.545601</ts>
    <user>U5ZAJ15P0</user>
    <text>Sorry for the messy questions</text>
  </message>
  <message>
    <ts>2017-07-27T14:14:50.586725</ts>
    <user>U051SS2EU</user>
    <text>that's a usage of reify that doesn't match what I thought the word meant</text>
  </message>
  <message>
    <ts>2017-07-27T14:15:13.600418</ts>
    <user>U051SS2EU</user>
    <text>do you mean parameterize? I thought reify meant "make an abstract thing into a concrete one"</text>
  </message>
  <message>
    <ts>2017-07-27T14:15:59.626668</ts>
    <user>U5ZAJ15P0</user>
    <text>I thought that's a usage I read in the doc</text>
  </message>
  <message>
    <ts>2017-07-27T14:16:02.628795</ts>
    <user>U5ZAJ15P0</user>
    <text>I might be mis-using the term</text>
  </message>
  <message>
    <ts>2017-07-27T14:16:02.629017</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;http://blog.datomic.com/2015/12/reified-transactions.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T14:16:20.639209</ts>
    <user>U5ZAJ15P0</user>
    <text>I should have said "add an attribute to the reified transaction"</text>
  </message>
  <message>
    <ts>2017-07-27T14:16:32.646352</ts>
    <user>U051SS2EU</user>
    <text>ahh! now I get it, thanks</text>
  </message>
  <message>
    <ts>2017-07-27T14:16:52.658395</ts>
    <user>U051SS2EU</user>
    <text>so yeah, I would make an object that represents that reifications including the user id</text>
  </message>
  <message>
    <ts>2017-07-27T14:17:25.677529</ts>
    <user>U051SS2EU</user>
    <text>this is getting deeper into datomic than my working knowledge of it - I've taken a workshop but not gotten far with it in real usage</text>
  </message>
  <message>
    <ts>2017-07-27T14:21:26.820533</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; haha ok, no worries. In general though, would you consider it "good code" if I wrapped all access to Datomic inside a protocol (e.g. IDatomicReaderWriter or something) so as to control how every transaction is made, and add some data to the transactions as I see fit?</text>
  </message>
  <message>
    <ts>2017-07-27T14:22:40.864976</ts>
    <user>U051SS2EU</user>
    <text>I'd first see if this is an abstraction datomic itself allows</text>
  </message>
  <message>
    <ts>2017-07-27T14:23:08.881646</ts>
    <user>U051SS2EU</user>
    <text>unless your goal is to be able to swap in another database (which probably means forgoing a bunch of the features that make datomic worth it?)</text>
  </message>
  <message>
    <ts>2017-07-27T14:23:50.907240</ts>
    <user>U051SS2EU</user>
    <text>I wouldn't bother abstracting things that pragmatically wouldn't be worth replacing ever</text>
  </message>
  <message>
    <ts>2017-07-27T14:23:51.907510</ts>
    <user>U5ZAJ15P0</user>
    <text>I wouldn't want to swap out Datomic. The only thing I would want is "intercept" calls to `datomic/transact` to add some data to the transactions</text>
  </message>
  <message>
    <ts>2017-07-27T14:24:14.921980</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g. add the "current user id" as an attribute on the transaction</text>
  </message>
  <message>
    <ts>2017-07-27T14:24:30.931785</ts>
    <user>U051SS2EU</user>
    <text>I'd say make your own function over transact that adds the data, probably parameterized with a hash map so you can generalize and introspect</text>
  </message>
  <message>
    <ts>2017-07-27T14:24:31.932054</ts>
    <user>U5ZAJ15P0</user>
    <text>so that I don't have to do this manually everywhere I call `datomic/transact` in my application</text>
  </message>
  <message>
    <ts>2017-07-27T14:25:02.951671</ts>
    <user>U5ZAJ15P0</user>
    <text>ok; thanks!</text>
  </message>
  <message>
    <ts>2017-07-27T14:25:51.981871</ts>
    <user>U051SS2EU</user>
    <text>one thing to avoid is opaque wrappers (whether partial or an Object with hidden state - which btw is what a partial or closure is) - use a record implementing datomic's own protocol if possible, but parameterized by keys you can introspect on the record and access in context</text>
  </message>
  <message>
    <ts>2017-07-27T14:27:07.027910</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; is there a repl command to get the list of all protocols implemented by an object?</text>
  </message>
  <message>
    <ts>2017-07-27T14:27:14.032383</ts>
    <user>U5ZAJ15P0</user>
    <text>well, the record of which an object is an instance</text>
  </message>
  <message>
    <ts>2017-07-27T14:27:30.041732</ts>
    <user>U051SS2EU</user>
    <text>supers</text>
  </message>
  <message>
    <ts>2017-07-27T14:27:44.050407</ts>
    <user>U5ZAJ15P0</user>
    <text>ah right because protocols are just interfaces</text>
  </message>
  <message>
    <ts>2017-07-27T14:27:46.051158</ts>
    <user>U051SS2EU</user>
    <text>oh, supers needs the class, but that's easy enough</text>
  </message>
  <message>
    <ts>2017-07-27T14:28:04.062736</ts>
    <user>U051SS2EU</user>
    <text>```=&amp;gt; (supers (class {}))
#{clojure.lang.IKVReduce clojure.lang.IFn clojure.lang.IMapIterable java.io.Serializable java.lang.Object clojure.lang.IObj clojure.lang.IMeta java.lang.Runnable clojure.lang.MapEquivalence clojure.lang.IHashEq clojure.lang.ILookup clojure.lang.IPersistentMap clojure.lang.Counted clojure.lang.IEditableCollection clojure.lang.Associative java.lang.Iterable clojure.lang.IPersistentCollection clojure.lang.AFn java.util.Map java.util.concurrent.Callable clojure.lang.Seqable clojure.lang.APersistentMap}```</text>
  </message>
  <message>
    <ts>2017-07-27T14:28:06.063477</ts>
    <user>U5ZAJ15P0</user>
    <text>```
wef-backend.core=&amp;gt; (supers (type (get-conn)))
#{#&amp;lt;Class@35fc6dc4 java.lang.Object&amp;gt;
  #&amp;lt;Class@e7b265e clojure.lang.IType&amp;gt;
  #&amp;lt;Class@6b337969 datomic.Connection&amp;gt;}
```</text>
  </message>
  <message>
    <ts>2017-07-27T14:28:33.079950</ts>
    <user>U051SS2EU</user>
    <text>cool - so you can make a defrecord that implements Connection - the others come free with defrecord</text>
  </message>
  <message>
    <ts>2017-07-27T14:28:44.086621</ts>
    <user>U5ZAJ15P0</user>
    <text>is Connection a protocol there?</text>
  </message>
  <message>
    <ts>2017-07-27T14:29:00.097001</ts>
    <user>U051SS2EU</user>
    <text>this is the point where I end up reading source code usually, heh</text>
  </message>
  <message>
    <ts>2017-07-27T14:29:10.103094</ts>
    <user>U051SS2EU</user>
    <text>I bet it's documented … somewhere</text>
  </message>
  <message>
    <ts>2017-07-27T14:29:25.112717</ts>
    <user>U5ZAJ15P0</user>
    <text>I'll look into it. Thanks :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T14:31:19.183640</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;https://gist.github.com/robert-stuttaford/39d43c011e498542bcf8&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T14:31:33.192726</ts>
    <user>U5ZAJ15P0</user>
    <text>I'll ask &lt;@U0509NKGK&gt; , I am sure he has insights on this</text>
  </message>
  <message>
    <ts>2017-07-27T14:33:12.253656</ts>
    <user>U051SS2EU</user>
    <text>cool - thanks for asking about this, I learned a couple of things in trying to find your answer</text>
  </message>
  <message>
    <ts>2017-07-27T14:33:41.271726</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; Glad to hear that! I was afraid I wasted a bit too much of your time</text>
  </message>
  <message>
    <ts>2017-07-27T14:34:44.310915</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;https://blog.clubhouse.io/auditing-with-reified-transactions-in-datomic-f1ea30610285&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T14:34:58.319194</ts>
    <user>U5ZAJ15P0</user>
    <text>In this article they wrap d/transact, as you were suggesting</text>
  </message>
  <message>
    <ts>2017-07-27T14:36:30.375379</ts>
    <user>U051SS2EU</user>
    <text>well - they do it slightly differently than I suggested, because the user-id org-id and tx-data are totally hidden once you call defn</text>
  </message>
  <message>
    <ts>2017-07-27T14:36:41.381896</ts>
    <user>U051SS2EU</user>
    <text>err, I mean once you call transact-wrapper</text>
  </message>
  <message>
    <ts>2017-07-27T14:36:53.389359</ts>
    <user>U051SS2EU</user>
    <text>the return value of that function doesn't expose any of those things as data</text>
  </message>
  <message>
    <ts>2017-07-27T14:36:56.390805</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; do you think that's an issue? it seems to simplify the life of the caller, especially if he doesn't care about those</text>
  </message>
  <message>
    <ts>2017-07-27T14:37:22.406008</ts>
    <user>U5ZAJ15P0</user>
    <text>cluttering every function that calls transact with auth data that it doesn't care about sounds problematic</text>
  </message>
  <message>
    <ts>2017-07-27T14:37:50.422248</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; until you are trying to debug code using the wrapper (in my experience) - it's not always neccessary to use the alternative of using a record to store the data instead of a closure, but what this gains is quick access to what the thing actually encompases</text>
  </message>
  <message>
    <ts>2017-07-27T14:38:47.455706</ts>
    <user>U051SS2EU</user>
    <text>you don't clutter - the record itself is something you can call if you implement IFn - or you just expect people to use a protocol method with it as the first arg (also fairly reasonable but less fancy)</text>
  </message>
  <message>
    <ts>2017-07-27T14:39:15.472783</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; sorry, I think I am missing something. Can you give me a code example of what you mean?</text>
  </message>
  <message>
    <ts>2017-07-27T14:39:26.479218</ts>
    <user>U051SS2EU</user>
    <text>hmm</text>
  </message>
  <message>
    <ts>2017-07-27T14:39:37.485454</ts>
    <user>U5ZAJ15P0</user>
    <text>Just a quick snippet here on Slack</text>
  </message>
  <message>
    <ts>2017-07-27T14:40:32.518233</ts>
    <user>U051SS2EU</user>
    <text>OK - I was just looking at this right now, sorry about the distracting details, but the big picture structure should be illustrative of what I am saying ```(defrecord Transmitter [transmit from user-data creator to journey routing]
  IFn
  (call [this] (.invoke this [nil this]))
  (run [this] (.invoke this [nil this]))
  (applyTo [this coll] (.invoke this (first coll)))
  (invoke [this [routing-override message]]
    (let [updated (into this message)
          routing (or routing-override routing (first journey))]
      (.invoke this routing updated)))
  (invoke [_ routing-override message]
    (let [{:keys [transmit generic]} message
          message (dissoc message :transmit :generic :routing :from :to)
          {:keys [journey routing message]}
          (if generic
            {:journey [routing-override]
             :routing :generic/reply
             :message (assoc message :generic-raw [routing-override message])}
            {:journey (rest journey)
             :routing routing-override
             :message message})
          {:keys [request-id birth-time]} user-data
          final-message (assoc message :journey journey :mediary to)]
      (when-let [schema-error (check-schema from routing final-message)]
        (log/error ::Transmitter
                   "for routing"
                   (pr-str routing)
                   (pr-str {:journey journey})
                   (pr-str schema-error)))
      (log/trace ::simple-kafka-transmit routing "to" request-id "from"
                 birth-time "-" (pull-transmit-info message))
      (transmit from routing final-message))))```</text>
  </message>
  <message>
    <ts>2017-07-27T14:41:27.550609</ts>
    <user>U051SS2EU</user>
    <text>the transmitter has all this incidental data - who is sending? who is the target? what data did the initiator of the request expect to get back with any responses? what is the path the overall task should take through the system?</text>
  </message>
  <message>
    <ts>2017-07-27T14:41:37.556778</ts>
    <user>U5ZAJ15P0</user>
    <text>But that's basically the approach I was suggesting with a "DatomicWriter" protocol, no?</text>
  </message>
  <message>
    <ts>2017-07-27T14:41:37.556813</ts>
    <user>U051SS2EU</user>
    <text>v1 wrapped this in calls to partial</text>
  </message>
  <message>
    <ts>2017-07-27T14:41:42.559447</ts>
    <user>U5ZAJ15P0</user>
    <text>that "wraps' transact</text>
  </message>
  <message>
    <ts>2017-07-27T14:42:01.571162</ts>
    <user>U051SS2EU</user>
    <text>the difference is that this returns an object that acts like a function</text>
  </message>
  <message>
    <ts>2017-07-27T14:42:42.595498</ts>
    <user>U051SS2EU</user>
    <text>maybe I misunderstaood what `@(d/transact ...)` is in the transact-wrapper function</text>
  </message>
  <message>
    <ts>2017-07-27T14:42:46.598359</ts>
    <user>U5ZAJ15P0</user>
    <text>right, but so instead of doing something like
```
(transact transmitter conn tx-data)
```
you would do
```
(transmitter conn tx-data)
```</text>
  </message>
  <message>
    <ts>2017-07-27T14:43:05.609691</ts>
    <user>U051SS2EU</user>
    <text>right</text>
  </message>
  <message>
    <ts>2017-07-27T14:43:11.613215</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; (d/transact returns a promise I think, and @ dereferences it</text>
  </message>
  <message>
    <ts>2017-07-27T14:43:29.623978</ts>
    <user>U051SS2EU</user>
    <text>and if you look at transmitter it shows you all the data it has inside</text>
  </message>
  <message>
    <ts>2017-07-27T14:43:33.626046</ts>
    <user>U051SS2EU</user>
    <text>it acts like a hash-map</text>
  </message>
  <message>
    <ts>2017-07-27T14:43:36.627775</ts>
    <user>U051SS2EU</user>
    <text>that's the key thing to me</text>
  </message>
  <message>
    <ts>2017-07-27T14:43:36.627818</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;http://docs.datomic.com/clojure/#datomic.api/transact&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T14:43:58.640858</ts>
    <user>U051SS2EU</user>
    <text>OK</text>
  </message>
  <message>
    <ts>2017-07-27T14:44:12.649508</ts>
    <user>U5ZAJ15P0</user>
    <text>Ok I see</text>
  </message>
  <message>
    <ts>2017-07-27T14:44:20.654436</ts>
    <user>U0509NKGK</user>
    <text>what was the question :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-27T14:44:38.664956</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0509NKGK&gt; Hi! 76 messages to read :smile:</text>
  </message>
  <message>
    <ts>2017-07-27T14:44:48.670815</ts>
    <user>U5ZAJ15P0</user>
    <text>just kidding, let me clarify the question:</text>
  </message>
  <message>
    <ts>2017-07-27T14:44:48.670821</ts>
    <user>U0509NKGK</user>
    <text>lol</text>
  </message>
  <message>
    <ts>2017-07-27T14:45:28.693846</ts>
    <user>U5ZAJ15P0</user>
    <text>I want to add some attributes to every transaction in my sytem (e.g. for audit purposes; things like the current user ID) and I am wondering how I should do it</text>
  </message>
  <message>
    <ts>2017-07-27T14:45:52.708169</ts>
    <user>U051SS2EU</user>
    <text>your question suddenly sounds very focused and pragmatic</text>
  </message>
  <message>
    <ts>2017-07-27T14:45:53.708817</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g. should I wrap all access to Datomic behind a protocol that proxies most calls but does some stuff to transact's tx-data before proxying</text>
  </message>
  <message>
    <ts>2017-07-27T14:46:06.716333</ts>
    <user>U5ZAJ15P0</user>
    <text>should I have an explicit function wrapping d/transact</text>
  </message>
  <message>
    <ts>2017-07-27T14:46:07.716808</ts>
    <user>U5ZAJ15P0</user>
    <text>etc</text>
  </message>
  <message>
    <ts>2017-07-27T14:46:16.722283</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt;  sorry :smile:</text>
  </message>
  <message>
    <ts>2017-07-27T14:46:28.729344</ts>
    <user>U5ZAJ15P0</user>
    <text>I guess that's what talking about something for 80 messages does</text>
  </message>
  <message>
    <ts>2017-07-27T14:46:30.730517</ts>
    <user>U5ZAJ15P0</user>
    <text>it clarifies things</text>
  </message>
  <message>
    <ts>2017-07-27T14:46:30.730654</ts>
    <user>U0509NKGK</user>
    <text>we use an explicit function wrapping d/transact and d/transact-async</text>
  </message>
  <message>
    <ts>2017-07-27T14:47:21.760835</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0509NKGK&gt; do you pass the auth context to all your "business functions" and then pass it explicitly to your function wrapping d/transact every time you call it?</text>
  </message>
  <message>
    <ts>2017-07-27T14:48:05.786783</ts>
    <user>U0509NKGK</user>
    <text>no; we use middleware and `binding` with a dynamic var</text>
  </message>
  <message>
    <ts>2017-07-27T14:48:11.790398</ts>
    <user>U0509NKGK</user>
    <text>and if the var has a value, we annotate</text>
  </message>
  <message>
    <ts>2017-07-27T14:48:24.798412</ts>
    <user>U5ZAJ15P0</user>
    <text>I was told using dynamic vars will send me straight to hell</text>
  </message>
  <message>
    <ts>2017-07-27T14:48:42.809137</ts>
    <user>U0509NKGK</user>
    <text>we have repl helpers that do the binding so that we also use it when manually altering the db at the repl</text>
  </message>
  <message>
    <ts>2017-07-27T14:48:56.817528</ts>
    <user>U5ZAJ15P0</user>
    <text>do you somehow ensure that no intern misadvertantly uses d/transact instead of your wrapper?</text>
  </message>
  <message>
    <ts>2017-07-27T14:49:47.847976</ts>
    <user>U0509NKGK</user>
    <text>no. but in 5 years, it's not been a problem. we had ONE case where someone retracted more than they should have. it was easy to fix</text>
  </message>
  <message>
    <ts>2017-07-27T14:50:01.856404</ts>
    <user>U0509NKGK</user>
    <text>i do live i fear of an accidental d/delete-database though</text>
  </message>
  <message>
    <ts>2017-07-27T14:50:09.861176</ts>
    <user>U5ZAJ15P0</user>
    <text>Ok, thanks a lot. One other thing: how do you handle security? Specifically, do you use d/filter?</text>
  </message>
  <message>
    <ts>2017-07-27T14:50:26.871608</ts>
    <user>U0509NKGK</user>
    <text>we can't use d/filter ; we have too much sharing going on</text>
  </message>
  <message>
    <ts>2017-07-27T14:50:30.873949</ts>
    <user>U5ZAJ15P0</user>
    <text>yeah, it's a bit odd there is no way to prevent /delete-database tbh</text>
  </message>
  <message>
    <ts>2017-07-27T14:50:40.879586</ts>
    <user>U5ZAJ15P0</user>
    <text>I guess with backups every 24 hours it eases the fear</text>
  </message>
  <message>
    <ts>2017-07-27T14:50:46.883631</ts>
    <user>U0509NKGK</user>
    <text>d/filter is nice if you have very strict boxes. we don't.</text>
  </message>
  <message>
    <ts>2017-07-27T14:50:54.887894</ts>
    <user>U0509NKGK</user>
    <text>hah. try continuously</text>
  </message>
  <message>
    <ts>2017-07-27T14:50:55.888839</ts>
    <user>U5ZAJ15P0</user>
    <text>although I wonder what would happen if the db got deleted, re-created, then a backup was run</text>
  </message>
  <message>
    <ts>2017-07-27T14:51:01.892343</ts>
    <user>U5ZAJ15P0</user>
    <text>would it get rid of the incremental backup?</text>
  </message>
  <message>
    <ts>2017-07-27T14:51:19.903261</ts>
    <user>U5ZAJ15P0</user>
    <text>how do you do access control them? do you have a nice approach?</text>
  </message>
  <message>
    <ts>2017-07-27T14:51:55.924837</ts>
    <user>U0509NKGK</user>
    <text>we replicate our backups to off-AWS places, so we have some protection against that</text>
  </message>
  <message>
    <ts>2017-07-27T14:52:06.931376</ts>
    <user>U0509NKGK</user>
    <text>access control what, the backups, or the repl access?</text>
  </message>
  <message>
    <ts>2017-07-27T14:52:42.952897</ts>
    <user>U5ZAJ15P0</user>
    <text>data access control</text>
  </message>
  <message>
    <ts>2017-07-27T14:52:52.958848</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g. which users can see what</text>
  </message>
  <message>
    <ts>2017-07-27T14:52:55.960425</ts>
    <user>U5ZAJ15P0</user>
    <text>enforcing it</text>
  </message>
  <message>
    <ts>2017-07-27T14:53:09.968578</ts>
    <user>U0509NKGK</user>
    <text>oh, that's basically normal queries in middleware</text>
  </message>
  <message>
    <ts>2017-07-27T14:55:32.054943</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0509NKGK&gt; middleware as in you filter the query after executing it?</text>
  </message>
  <message>
    <ts>2017-07-27T14:56:09.076804</ts>
    <user>U0509NKGK</user>
    <text>no, simpler than that - we explicitly use the viewing user in queries</text>
  </message>
  <message>
    <ts>2017-07-27T14:57:11.114909</ts>
    <user>U5ZAJ15P0</user>
    <text>oh right.</text>
  </message>
  <message>
    <ts>2017-07-27T14:57:14.117081</ts>
    <user>U5ZAJ15P0</user>
    <text>what about the entity API?</text>
  </message>
  <message>
    <ts>2017-07-27T14:59:43.207442</ts>
    <user>U0509NKGK</user>
    <text>very often we use datalog to find valid entities, map d/entity, and go from there</text>
  </message>
  <message>
    <ts>2017-07-27T15:00:01.218510</ts>
    <user>U0509NKGK</user>
    <text>sometimes we d/entity on a lookup ref, query to validate access, and continue</text>
  </message>
  <message>
    <ts>2017-07-27T15:01:56.290092</ts>
    <user>U5ZAJ15P0</user>
    <text>right, what I mean is that d/entity will let you traverse the data tree without access control</text>
  </message>
  <message>
    <ts>2017-07-27T15:02:06.295625</ts>
    <user>U5ZAJ15P0</user>
    <text>but I assume so long as you control what is traversed, it's fine</text>
  </message>
  <message>
    <ts>2017-07-27T15:02:25.306618</ts>
    <user>U5ZAJ15P0</user>
    <text>I am using GraphQL on my app and d/entity could cause issues if I tried to use it directly</text>
  </message>
  <message>
    <ts>2017-07-27T15:02:35.312650</ts>
    <user>U5ZAJ15P0</user>
    <text>and let the graphql query resolvers hit it directly</text>
  </message>
  <message>
    <ts>2017-07-27T15:02:55.323972</ts>
    <user>U5ZAJ15P0</user>
    <text>as it could potentially go any level deep in the data tree, reaching data that should not be accessible to the current user</text>
  </message>
  <message>
    <ts>2017-07-27T15:02:57.325390</ts>
    <user>U5ZAJ15P0</user>
    <text>if that makes any sense</text>
  </message>
  <message>
    <ts>2017-07-27T15:03:58.360150</ts>
    <user>U0509NKGK</user>
    <text>oh right, yes. we totally control the query. we don't allow arbitrary query from clientside</text>
  </message>
  <message>
    <ts>2017-07-27T15:04:16.370471</ts>
    <user>U0509NKGK</user>
    <text>in that case, d/filter is a far safer approach</text>
  </message>
  <message>
    <ts>2017-07-27T15:04:48.389024</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0509NKGK&gt; ok, thanks. Sorry, my questions are not very clear today</text>
  </message>
  <message>
    <ts>2017-07-27T15:05:01.396212</ts>
    <user>U0509NKGK</user>
    <text>it's ok :slightly_smiling_face: hth</text>
  </message>
  <message>
    <ts>2017-07-27T16:17:44.760622</ts>
    <user>U0564EGNY</user>
    <text>So this is fun: when using postwalk, map entries are just vectors (so map-entry? returns false), so there is no way to distinguish a map entry from a map value that is a vector… Anyone else run into this?</text>
  </message>
  <message>
    <ts>2017-07-27T16:18:40.790839</ts>
    <user>U0564EGNY</user>
    <text>I suppose a map key could also be a vector, which adds a 3rd case of ambiguity</text>
  </message>
  <message>
    <ts>2017-07-27T16:18:53.797778</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U0564EGNY&gt; It's a known issue in JIRA...</text>
  </message>
  <message>
    <ts>2017-07-27T16:19:23.813920</ts>
    <user>U0564EGNY</user>
    <text>&lt;@U04V70XH6&gt; say no more, and thank you</text>
  </message>
  <message>
    <ts>2017-07-27T16:19:29.817087</ts>
    <user>U04V70XH6</user>
    <text>&lt;https://dev.clojure.org/jira/browse/CLJ-2031&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T16:20:03.835062</ts>
    <user>U04V70XH6</user>
    <text>(go vote for it!)</text>
  </message>
  <message>
    <ts>2017-07-27T16:23:38.950037</ts>
    <user>U0564EGNY</user>
    <text>ah, prewalk works for my use case</text>
  </message>
  <message>
    <ts>2017-07-27T16:24:04.963369</ts>
    <user>U0564EGNY</user>
    <text>(and I voted)</text>
  </message>
  <message>
    <ts>2017-07-27T16:35:54.351620</ts>
    <user>U051SS2EU</user>
    <text>if I am implementing something that is meant to be used in place of a function, is it enough to implement IFn or should I implement AFn too?</text>
  </message>
  <message>
    <ts>2017-07-27T16:36:51.381775</ts>
    <user>U0NCTKEV8</user>
    <text>it sort of depends on how you are implementing it, AFn is an abstract class so dealing with it from clojure is kind of a pain, but from java that is where I would start</text>
  </message>
  <message>
    <ts>2017-07-27T16:37:10.391846</ts>
    <user>U051SS2EU</user>
    <text>OK - this is clojure code, so I hope I'm safe ignoring AFn</text>
  </message>
  <message>
    <ts>2017-07-27T16:37:17.395275</ts>
    <user>U0NCTKEV8</user>
    <text>AFn provides defaults for a lot of things like the applyTo machinery and such</text>
  </message>
  <message>
    <ts>2017-07-27T16:37:43.409744</ts>
    <user>U0NCTKEV8</user>
    <text>I often will implement IFn and just particular invoke arity that I expect to be used</text>
  </message>
  <message>
    <ts>2017-07-27T16:37:58.417777</ts>
    <user>U0NCTKEV8</user>
    <text>but such an object will not always behave like a function</text>
  </message>
  <message>
    <ts>2017-07-27T16:38:30.435284</ts>
    <user>U0NCTKEV8</user>
    <text>I think apply won't work, and you will get some weird brokeness with more than 20 args, and maybe fn? will return false</text>
  </message>
  <message>
    <ts>2017-07-27T16:38:46.443798</ts>
    <user>U051SS2EU</user>
    <text>yeah - this is a macro implementing generally something you recommended earlier (making a record that can be called like a function but unlike a lexical closure you can also look at the data in its keys) - trying to make it a convenient to use replacement for code that uses partials extensively</text>
  </message>
  <message>
    <ts>2017-07-27T16:39:38.470628</ts>
    <user>U051SS2EU</user>
    <text>I just verified I implemented things properly to make apply work for over 20 args</text>
  </message>
  <message>
    <ts>2017-07-27T16:40:01.483399</ts>
    <user>U051SS2EU</user>
    <text>but returning false for fn? is acceptable</text>
  </message>
  <message>
    <ts>2017-07-27T16:40:29.498167</ts>
    <user>U0NCTKEV8</user>
    <text>I think you can fix that too, if I recall fn? checks some marker interface</text>
  </message>
  <message>
    <ts>2017-07-27T16:40:48.508517</ts>
    <user>U051SS2EU</user>
    <text>instance? clojure.lang.Fn</text>
  </message>
  <message>
    <ts>2017-07-27T16:41:16.522964</ts>
    <user>U051SS2EU</user>
    <text>easy enough to extend that, it has no methods</text>
  </message>
  <message>
    <ts>2017-07-27T16:41:18.523915</ts>
    <user>U051SS2EU</user>
    <text>sweet!</text>
  </message>
  <message>
    <ts>2017-07-27T16:41:20.525295</ts>
    <user>U0NCTKEV8</user>
    <text>yep</text>
  </message>
  <message>
    <ts>2017-07-27T16:42:27.561290</ts>
    <user>U051SS2EU</user>
    <text>thanks - I think this will be a handy little one macro lib, just need a snappy marketable name</text>
  </message>
  <message>
    <ts>2017-07-27T16:55:54.987523</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U051SS2EU&gt; big note: you probably want ifn? if you want to check if something is a function. fn? does something different (and is normally wrong, imo).</text>
  </message>
  <message>
    <ts>2017-07-27T17:00:15.126684</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U07TDTQNL&gt; so if I am making something that is a drop in replacement for a function returned from partial, would it be a bad idea to make fn? return true from someone else's check?</text>
  </message>
  <message>
    <ts>2017-07-27T17:00:33.136890</ts>
    <user>U051SS2EU</user>
    <text>I guess that's a style issue</text>
  </message>
  <message>
    <ts>2017-07-27T17:02:32.199304</ts>
    <user>U07TDTQNL</user>
    <text>nah, just code against IFn, and then `ifn?` will return true, which is what most people should be using</text>
  </message>
  <message>
    <ts>2017-07-27T17:03:39.233604</ts>
    <user>U051SS2EU</user>
    <text>:thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-27T17:04:29.258974</ts>
    <user>U2J4FRT2T</user>
    <text>will be possible with spec :wink:</text>
  </message>
  <message>
    <ts>2017-07-27T17:04:44.267204</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U07TDTQNL&gt; on thing though, in my code, checking ifn? would lead to surprising results here ```=&amp;gt; (ifn? :hi)
true```</text>
  </message>
  <message>
    <ts>2017-07-27T17:05:09.279955</ts>
    <user>U051SS2EU</user>
    <text>that could be a sign of doing other things wrong I guess…</text>
  </message>
  <message>
    <ts>2017-07-27T17:05:19.284780</ts>
    <user>U050ECB92</user>
    <text>that doesn't surprise me, a keyword is a function</text>
  </message>
  <message>
    <ts>2017-07-27T17:05:26.288513</ts>
    <user>U07TDTQNL</user>
    <text>(What &lt;@U050ECB92&gt; said)</text>
  </message>
  <message>
    <ts>2017-07-27T17:06:22.316318</ts>
    <user>U050ECB92</user>
    <text>I suppose the `fn?` stole the good name early, but had the wrong semantics</text>
  </message>
  <message>
    <ts>2017-07-27T17:06:58.333562</ts>
    <user>U07TDTQNL</user>
    <text>yeah fn? really means "something that was created with `(fn ...)`"</text>
  </message>
  <message>
    <ts>2017-07-27T17:07:41.354588</ts>
    <user>U0NCTKEV8</user>
    <text>fn? was added when trampoline was added</text>
  </message>
  <message>
    <ts>2017-07-27T17:07:55.361266</ts>
    <user>U0NCTKEV8</user>
    <text>continue-trampolining?</text>
  </message>
  <message>
    <ts>2017-07-27T17:07:59.363433</ts>
    <user>U051SS2EU</user>
    <text>yeah, I guess the answer of `(defmulti foo first)` `(fn? foo)` can be a guide there</text>
  </message>
  <message>
    <ts>2017-07-27T17:08:31.378916</ts>
    <user>U050ECB92</user>
    <text>-----------------------------------------------
Sooooooooo who here has played with `tools.deps.alpha` and what do they think?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</text>
  </message>
  <message>
    <ts>2017-07-27T17:09:03.394856</ts>
    <user>U11BV7MTK</user>
    <text>i looked at the version compare and it seems like it will return `1.1` &amp;gt; `1.9`</text>
  </message>
  <message>
    <ts>2017-07-27T17:09:30.408274</ts>
    <user>U11BV7MTK</user>
    <text>but i don't know how to crank it up since it's based on the pom file rather than a project file</text>
  </message>
  <message>
    <ts>2017-07-27T17:09:37.411596</ts>
    <user>U0NCTKEV8</user>
    <text>10541c0254973ce045305499d4b5622073ede622 (is the trampoline commit fyi)</text>
  </message>
  <message>
    <ts>2017-07-27T17:09:42.414415</ts>
    <user>U11BV7MTK</user>
    <text>i'm not a java guy</text>
  </message>
  <message>
    <ts>2017-07-27T17:09:57.422061</ts>
    <user>U11BV7MTK</user>
    <text>it also specifies its own deps in the new edn format. does that make it "self-hosted"?</text>
  </message>
  <message>
    <ts>2017-07-27T17:10:48.446886</ts>
    <user>U050ECB92</user>
    <text>&lt;@U11BV7MTK&gt; if you have `mvn` installed you can crank it up using the commands in the README.  Use of mvn/pom is a one-time thing at setup.  (It will probably be handled by the package manager when this stuff filters over there)</text>
  </message>
  <message>
    <ts>2017-07-27T17:11:06.455668</ts>
    <user>U11BV7MTK</user>
    <text>thanks. i'll get that going tonight</text>
  </message>
  <message>
    <ts>2017-07-27T17:11:49.476115</ts>
    <user>U11BV7MTK</user>
    <text>yeah i wanted to play with it and do a PR for 
```
;; TODO - choose better
(defn- choose-coord
  [coord1 coord2]
  (if coord1
    (if coord2
      (let [v1 (:version coord1)
            v2 (:version coord2)]
        (if (pos? (compare (str v1) (str v2)))
          coord1
          coord2))
      coord1)
    coord2))

```</text>
  </message>
  <message>
    <ts>2017-07-27T17:12:01.482153</ts>
    <user>U050ECB92</user>
    <text>once you have it installed, you can use it in a project folder (using `$PWD/deps.edn`) or globally (using `$HOME/.clojure/deps.edn`)</text>
  </message>
  <message>
    <ts>2017-07-27T17:12:41.501512</ts>
    <user>U050ECB92</user>
    <text>The version comparison seems intentionally naive, no need to poke fun at that yet :smiley:</text>
  </message>
  <message>
    <ts>2017-07-27T17:12:57.509211</ts>
    <user>U11BV7MTK</user>
    <text>oh i know. i wasn't doing it in the notion of sniping</text>
  </message>
  <message>
    <ts>2017-07-27T17:12:57.509248</ts>
    <user>U050ECB92</user>
    <text>If you specify versions explicitly you won't invoke that code</text>
  </message>
  <message>
    <ts>2017-07-27T17:13:13.516655</ts>
    <user>U11BV7MTK</user>
    <text>but let alex and others figure out the hard stuff and I could help out with the easy solved stuff</text>
  </message>
  <message>
    <ts>2017-07-27T17:13:24.521961</ts>
    <user>U5ZAJ15P0</user>
    <text>I would like to write a function (if possible with the stdlib) to check if a map "matches" a pattern. More specifically, I would like to describe a map in terms of another map with the same structure, whose values can either be ints/bools/strings or regexs. If the value are ints/bools/strings they they should be compared for equality with the target map, and if they are regexs they should match</text>
  </message>
  <message>
    <ts>2017-07-27T17:13:34.526604</ts>
    <user>U11BV7MTK</user>
    <text>i meant "take this off their plate" not like "i can't believe they coded this"</text>
  </message>
  <message>
    <ts>2017-07-27T17:13:55.536536</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g.
```
{:first-name "john"
 :last-name #".*"}
```
should match 
```
{:first-name "john"
 :last-name "doe"}
```</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:07.542059</ts>
    <user>U5ZAJ15P0</user>
    <text>it should work for deeply nested maps</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:16.546301</ts>
    <user>U050ECB92</user>
    <text>i know :smiley:  I wonder what lein and boot do</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:18.547593</ts>
    <user>U11BV7MTK</user>
    <text>spec?</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:24.550593</ts>
    <user>U5ZAJ15P0</user>
    <text>(I would use it to write tests checking the expected output of an API)</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:31.553942</ts>
    <user>U0NCTKEV8</user>
    <text>there are a few  options</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:37.556545</ts>
    <user>U0NCTKEV8</user>
    <text>(for the map thing)</text>
  </message>
  <message>
    <ts>2017-07-27T17:14:45.560479</ts>
    <user>U5ZAJ15P0</user>
    <text>mmh yes specs would work but it seems a bit overkill for what I need</text>
  </message>
  <message>
    <ts>2017-07-27T17:15:01.567771</ts>
    <user>U0NCTKEV8</user>
    <text>you could just take two maps, the first being the shape and the second being the data and recurse through them</text>
  </message>
  <message>
    <ts>2017-07-27T17:15:26.579423</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0NCTKEV8&gt; that's precisely what I'm wondering how to do. Is there an easy way to express this recursion procss with stdlib functions?</text>
  </message>
  <message>
    <ts>2017-07-27T17:15:28.580486</ts>
    <user>U0NCTKEV8</user>
    <text>you can take the description map and turn it to into a sequence of paths and predicates and reduce over that with the data</text>
  </message>
  <message>
    <ts>2017-07-27T17:15:48.589743</ts>
    <user>U5ZAJ15P0</user>
    <text>or to turn it into a sequence of paths</text>
  </message>
  <message>
    <ts>2017-07-27T17:17:45.645388</ts>
    <user>U5ZAJ15P0</user>
    <text>ah, found an example. &lt;http://blog.jayfields.com/2010/09/clojure-flatten-keys.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T17:19:22.691491</ts>
    <user>U0NCTKEV8</user>
    <text>```

(defn f [m1 m2]
  (letfn [(g [p m]
            (if (map? m)
              (for [[k v] m
                    i (g (conj p k) v)]
                i)
              [[p m]]))]
    (reduce
     (fn [x [path predicate]]
       (and x (predicate (get-in m2 path))))
     true
     (g [] m1))))
```</text>
  </message>
  <message>
    <ts>2017-07-27T17:19:32.696169</ts>
    <user>U0NCTKEV8</user>
    <text>dictated but not read, etc</text>
  </message>
  <message>
    <ts>2017-07-27T17:20:01.709920</ts>
    <user>U0NCTKEV8</user>
    <text>that assumes the description map is a map of keys to predicates, so you will have to change it to do your regex and = compares instead</text>
  </message>
  <message>
    <ts>2017-07-27T17:20:31.723985</ts>
    <user>U5ZAJ15P0</user>
    <text>great. It's sane to convert it to a map of predicates anyway</text>
  </message>
  <message>
    <ts>2017-07-27T17:20:32.724735</ts>
    <user>U5ZAJ15P0</user>
    <text>thank you!</text>
  </message>
  <message>
    <ts>2017-07-27T17:21:01.738324</ts>
    <user>U5ZAJ15P0</user>
    <text>I was thinking of writing my tests in a descriptive form as EDN, using tags for different types of predicates</text>
  </message>
  <message>
    <ts>2017-07-27T17:21:03.739467</ts>
    <user>U5ZAJ15P0</user>
    <text>(e.g. regex)</text>
  </message>
  <message>
    <ts>2017-07-27T17:21:42.757541</ts>
    <user>U5ZAJ15P0</user>
    <text>with your approach it should extend nicely to other predicates</text>
  </message>
  <message>
    <ts>2017-07-27T17:25:41.868017</ts>
    <user>U050ECB92</user>
    <text>&lt;https://maven.apache.org/resolver/apidocs/org/eclipse/aether/util/version/GenericVersionScheme.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-27T17:26:07.879990</ts>
    <user>U050ECB92</user>
    <text>that might be useful from the same library that tools.deps already uses</text>
  </message>
  <message>
    <ts>2017-07-27T19:20:46.261386</ts>
    <user>U0JUW6WNP</user>
    <text>Is there a protocol I can implement to get peek/pop/conj to work on a queue like datastructure I'm building?</text>
  </message>
  <message>
    <ts>2017-07-27T19:22:09.282944</ts>
    <user>U0NCTKEV8</user>
    <text>conj maps to the cons method of IPersistentCollection java interface</text>
  </message>
  <message>
    <ts>2017-07-27T19:22:49.293623</ts>
    <user>U0NCTKEV8</user>
    <text>peek and pop map to the IPersistentStack java interface (with the same method names)</text>
  </message>
  <message>
    <ts>2017-07-27T19:23:09.298974</ts>
    <user>U0JUW6WNP</user>
    <text>Thank you</text>
  </message>
  <message>
    <ts>2017-07-27T22:29:50.690079</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U0JUW6WNP&gt; and though you're building your own, clojure has a `PersistentQueue`, if that helps you in some way, and peek/pop/conj work on it</text>
  </message>
  <message>
    <ts>2017-07-27T23:26:58.284529</ts>
    <user>U17DY48BW</user>
    <text>Anyone know a good way to do synchronous REDIS pub/sub? Basically publish a message, and wait for the message response before moving forward evaluating?</text>
  </message>
  <message>
    <ts>2017-07-27T23:58:15.589357</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U17DY48BW&gt;  in a pub/sub model, you publish a message, but you don't receive any response. Maybe you mean that you'd like to wait until the publish has completed before continuing. I'm not a redis expert by any means ,but I don't think it's possible to do this in redis (Kafka, by contrast, allows you to both pass in a callback function and also returns a Future that you can use to determine completion of the publish).  Consider whether you actually need to know when the publish is complete, as one of the main benefits of a pubsub architecture is that the publisher really knows very little about who will consume its messages</text>
  </message>
  <message>
    <ts>2017-07-28T00:00:32.613050</ts>
    <user>U17DY48BW</user>
    <text>&lt;@U1ALMRBLL&gt; Yep I've used the classic pubsub structure, but what I'm describing is a special use case. No worries though I think I figured it out.</text>
  </message>
  <message>
    <ts>2017-07-28T01:43:00.591867</ts>
    <user>U1C03090C</user>
    <text>So I'm making a clojure desktop app that relies heavily on plugins. I'm thinking about using pomegrante to load them on the classpath (from a specific directory). Is that a reasonable idea, or is it likely to break?</text>
  </message>
  <message>
    <ts>2017-07-28T03:41:45.181888</ts>
    <user>U2APCNHCN</user>
    <text>In datascript, is there a way to only return results based on how many entries in a ref they have? E.g. only return results X that have 2 Y stored in X.refY</text>
  </message>
  <message>
    <ts>2017-07-28T03:46:36.267819</ts>
    <user>U050UBKAA</user>
    <text>you mean, from queries?</text>
  </message>
  <message>
    <ts>2017-07-28T03:47:00.274999</ts>
    <user>U050UBKAA</user>
    <text>I can't think of a simple way to do that</text>
  </message>
  <message>
    <ts>2017-07-28T03:47:51.289843</ts>
    <user>U050UBKAA</user>
    <text>you can
```
(d/q '[:find ?x (count ?y)
       :where [?x :ref ?y]]
     db)
```
and then filter the results yourself</text>
  </message>
  <message>
    <ts>2017-07-28T03:54:50.416864</ts>
    <user>U2APCNHCN</user>
    <text>Ah. So, no `count`in `:where`.</text>
  </message>
  <message>
    <ts>2017-07-28T05:35:44.519351</ts>
    <user>U050UBKAA</user>
    <text>no :)</text>
  </message>
  <message>
    <ts>2017-07-28T06:42:25.820850</ts>
    <user>U3JURM9B6</user>
    <text>normally, macro expansion is outside in, however, is it possible to write a macro foo which says:

(foo ...)
==&amp;gt;

do all macro expansion of ..., then pass it to some other function for post processing ?</text>
  </message>
  <message>
    <ts>2017-07-28T06:46:15.886856</ts>
    <user>U3JURM9B6</user>
    <text>&lt;https://clojuredocs.org/clojure.walk/macroexpand-all&gt; &amp;lt;-- is this bug for real ?</text>
  </message>
  <message>
    <ts>2017-07-28T06:46:28.890504</ts>
    <user>U3JURM9B6</user>
    <text>seems to suggest that macroexpand-all is broken since 'pure data' is being expanded</text>
  </message>
  <message>
    <ts>2017-07-28T06:51:13.972080</ts>
    <user>U060FKQPN</user>
    <text>macroexpand-all is not lexical scope aware</text>
  </message>
  <message>
    <ts>2017-07-28T07:51:07.977003</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; would you recommend using &lt;https://github.com/weavejester/cljfmt&gt; ?</text>
  </message>
  <message>
    <ts>2017-07-28T07:51:51.989992</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U5ZAJ15P0&gt; I find it useful :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-28T07:51:53.990332</ts>
    <user>U5ZAJ15P0</user>
    <text>(aka does it have any known significant issues)</text>
  </message>
  <message>
    <ts>2017-07-28T07:52:21.998630</ts>
    <user>U5ZAJ15P0</user>
    <text>does it auto-wrap lines above a certain length?</text>
  </message>
  <message>
    <ts>2017-07-28T07:52:49.006358</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U5ZAJ15P0&gt; It could have more features; I haven't had time to work on it recently, but aside from that, not that I'm aware of… It might not support reader conditionals; I can't recall.</text>
  </message>
  <message>
    <ts>2017-07-28T07:53:06.010798</ts>
    <user>U0BKWMG5B</user>
    <text>&lt;@U5ZAJ15P0&gt; No, cljfmt is pretty conservative.</text>
  </message>
  <message>
    <ts>2017-07-28T07:53:47.022109</ts>
    <user>U0BKWMG5B</user>
    <text>There's another one, zprint, that just removes all formatting and reapplies it.</text>
  </message>
  <message>
    <ts>2017-07-28T07:53:57.025156</ts>
    <user>U0BKWMG5B</user>
    <text>Whereas cljfmt just tries to fix formatting that's wrong.</text>
  </message>
  <message>
    <ts>2017-07-28T08:00:36.141672</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U0BKWMG5B&gt; Thanks, I'll take a look at zprint too then!</text>
  </message>
  <message>
    <ts>2017-07-28T09:06:40.574410</ts>
    <user>U1C03090C</user>
    <text>I'm looking to create a plugin system for my application that will allow me to distribute it as an uberjar and then load the plugins from the classpath, ideally as jar-files without the source but I'm willing to fudge on that. Does using pomegrante (&lt;https://github.com/cemerick/pomegranate&gt;) for dependency management seem reasonable? I get the impression that having the same libraries with different versions will usually wreak havoc.</text>
  </message>
  <message>
    <ts>2017-07-28T09:33:27.339038</ts>
    <user>U05111TCS</user>
    <text>My friend asked me to give him one resource link for him to start learning Clojure. I proudly gave him this &lt;https://clojure.org/guides/getting_started&gt;. 

Shout out to everyone who involves in making it this great! Thank you!</text>
  </message>
  <message>
    <ts>2017-07-28T09:57:39.123157</ts>
    <user>U3JURM9B6</user>
    <text>```

(require '[clojure.walk :as walk]) 
(println (walk/macroexpand-all '(quote (let [a 1] a)))) 
; (quote (let* [a 1] a))
 
```
is above viewed as a bug or a feature ?</text>
  </message>
  <message>
    <ts>2017-07-28T09:57:46.126871</ts>
    <user>U3JURM9B6</user>
    <text>(and if a feature, what is the reasoning)</text>
  </message>
  <message>
    <ts>2017-07-28T09:59:31.188757</ts>
    <user>U060FKQPN</user>
    <text>I'd say it's neither a bug nor a feature, it's a limitation of `macroexpand-all`, it has no awareness of lexical scoping or evaluation rules (and doesn't claim to)</text>
  </message>
  <message>
    <ts>2017-07-28T10:00:12.213398</ts>
    <user>U060FKQPN</user>
    <text>if you want to macroexpand all with lexical scoping &amp;amp; evaluation awareness, use either tools.analyzer.jvm or riddley</text>
  </message>
  <message>
    <ts>2017-07-28T10:05:06.386085</ts>
    <user>U3JURM9B6</user>
    <text>one of the things that makes it easy to write new DSLs in racket is the ability to write

```
#lang foobar
```

at the top of a file, then define a foobar reader/expander, and viola you can write foobar code in *.rkt files.

Does Clojure have any feature like this (perhaps as a library) ?</text>
  </message>
  <message>
    <ts>2017-07-28T10:05:14.390821</ts>
    <user>U060FKQPN</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-07-28T10:05:32.401300</ts>
    <user>U060FKQPN</user>
    <text>clojure's reader and macroexpander are not extensible in the way that racket's are</text>
  </message>
  <message>
    <ts>2017-07-28T10:12:34.641491</ts>
    <user>U3JURM9B6</user>
    <text>&lt;@U060FKQPN&gt; : to the best of your knowledge is there anyway to get racket's "dsl building" features in clojure ?</text>
  </message>
  <message>
    <ts>2017-07-28T10:13:08.661209</ts>
    <user>U060FKQPN</user>
    <text>use racket :) </text>
  </message>
  <message>
    <ts>2017-07-28T10:13:22.669627</ts>
    <user>U3JURM9B6</user>
    <text>if it had decent jvm / js support, I would :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-28T10:13:46.683437</ts>
    <user>U060FKQPN</user>
    <text>clojure's philosophy is not really compatible with the language extensibility features of racket </text>
  </message>
  <message>
    <ts>2017-07-28T10:13:47.683691</ts>
    <user>U3JURM9B6</user>
    <text>the tco/continuations I don't really need, but the dsl building capabilities are something else</text>
  </message>
  <message>
    <ts>2017-07-28T10:15:15.734072</ts>
    <user>U4R5K5M0A</user>
    <text>TCO would be really nice to have</text>
  </message>
  <message>
    <ts>2017-07-28T10:16:36.781996</ts>
    <user>U060FKQPN</user>
    <text>would it? how many times do you actually use recursion (and more specifically, non-tail recursion) in clojure?</text>
  </message>
  <message>
    <ts>2017-07-28T10:21:22.950150</ts>
    <user>U4R5K5M0A</user>
    <text>0 times cause there is no TCO :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-28T10:21:54.968800</ts>
    <user>U4R5K5M0A</user>
    <text>we have partial TCO at least with recur</text>
  </message>
  <message>
    <ts>2017-07-28T10:22:38.994789</ts>
    <user>U060FKQPN</user>
    <text>yes, my point is, if you can express your programs using reduce/map and loop recur if necessary, how would TCO be really nice to have</text>
  </message>
  <message>
    <ts>2017-07-28T10:22:43.997567</ts>
    <user>U4R5K5M0A</user>
    <text>lazy sequences somewhat alleviates the need for TCO but some algorithms are nicely expressed using mutual recursion</text>
  </message>
  <message>
    <ts>2017-07-28T10:38:01.550086</ts>
    <user>U0QKTTY4D</user>
    <text>i like that loop/recur enforces tail position for the recur call actually</text>
  </message>
  <message>
    <ts>2017-07-28T10:57:03.247238</ts>
    <user>U07TDTQNL</user>
    <text>And as Guido pointed out more than once about Python. TCO has a nasty habit of removing bits of your call stask you may have wanted during debugging.</text>
  </message>
  <message>
    <ts>2017-07-28T11:07:05.622852</ts>
    <user>U1ALMRBLL</user>
    <text>&lt;@U4R5K5M0A&gt; trampoline for that :wink:</text>
  </message>
  <message>
    <ts>2017-07-28T11:08:13.662996</ts>
    <user>U4R5K5M0A</user>
    <text>&lt;@U07TDTQNL&gt; that's feature of TCO :slightly_smiling_face: - if you really need that add an accumulator</text>
  </message>
  <message>
    <ts>2017-07-28T11:09:08.696561</ts>
    <user>U07TDTQNL</user>
    <text>You think you have confusing stack traces now? Just wait until you see "foo called bar", and you look at the source and foo never calls bar.</text>
  </message>
  <message>
    <ts>2017-07-28T11:09:15.701095</ts>
    <user>U07TDTQNL</user>
    <text>That's a good way to waste a few hours in debugging.</text>
  </message>
  <message>
    <ts>2017-07-28T11:14:10.878391</ts>
    <user>U1ALMRBLL</user>
    <text>given that you really don't want to use stack-consuming recursion in general, so you'll be calling from tail position most of the time anyway, you replace `foo` with `recur` in your call, and it's quite literally the same, except you're being explicit that this is TCO'd … implicit would be fine, but in most cases you quite literally gain nothing, IME anyway &lt;@U4R5K5M0A&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T11:14:50.902220</ts>
    <user>U1ALMRBLL</user>
    <text>`(defn foo [x] (if (g x) "done" (foo (f x))))`
versus
`(defn foo [x] (if (g x) "done" (recur (f x))))`</text>
  </message>
  <message>
    <ts>2017-07-28T11:15:29.926190</ts>
    <user>U07TDTQNL</user>
    <text>and with recur you get compiler checked tco, so you know when you messed up.</text>
  </message>
  <message>
    <ts>2017-07-28T11:21:02.125466</ts>
    <user>U4R5K5M0A</user>
    <text>&lt;@U1ALMRBLL&gt; yes, recur was mentioned, was referring more about tail calls to other functions rather than self calls</text>
  </message>
  <message>
    <ts>2017-07-28T11:22:46.187410</ts>
    <user>U1ALMRBLL</user>
    <text>yeah, using `trampoline` has its drawbacks but happy there's the option</text>
  </message>
  <message>
    <ts>2017-07-28T11:31:00.488547</ts>
    <user>U4R5K5M0A</user>
    <text>&lt;@U07TDTQNL&gt; I'm not saying its a must have just that it would be nice to have the option of full TCO, Clojure being a lisp and all.</text>
  </message>
  <message>
    <ts>2017-07-28T11:31:32.507439</ts>
    <user>U4R5K5M0A</user>
    <text>Does the JVM even has plans to ever implement TCO?</text>
  </message>
  <message>
    <ts>2017-07-28T11:46:30.046553</ts>
    <user>U050MP39D</user>
    <text>I really doubt it'll ever happen</text>
  </message>
  <message>
    <ts>2017-07-28T12:12:45.969903</ts>
    <user>U1C03090C</user>
    <text>What's the best way to add a directory to the classpath after a clojure program has started up? I found pomegrante (&lt;https://github.com/cemerick/pomegranate&gt;), but from the readme: "add-classpath and add-dependencies should be considered escape hatches to be used when necessary, rather than a regular part of your development workflow," which makes it seem like it would be unsuitable for a production program.</text>
  </message>
  <message>
    <ts>2017-07-28T12:16:44.101434</ts>
    <user>U0NCTKEV8</user>
    <text>the classpath is just something the system classloader uses to load things, you don't really want to alter the classpath, you want to create yourself a classloader and use it to load code</text>
  </message>
  <message>
    <ts>2017-07-28T12:19:35.194454</ts>
    <user>U0NCTKEV8</user>
    <text>but if you are not experienced enough with the jvm to know how the classpath and classloaders work, I would suggest you find an alternative means to your ends. getting classloaders to both do what you want and behave correctly is non-trivial, and you will immediately be plunged in to the deep end</text>
  </message>
  <message>
    <ts>2017-07-28T12:23:20.315103</ts>
    <user>U3JURM9B6</user>
    <text>Are there any good guides for writing compilers inside of clojure (inside of writing compilers from clojure to some other target language.)</text>
  </message>
  <message>
    <ts>2017-07-28T12:24:38.357961</ts>
    <user>U04V70XH6</user>
    <text>There won't be anything Clojure-specific -- but the principles of compiler writer are the same regardless of language.</text>
  </message>
  <message>
    <ts>2017-07-28T12:25:14.376669</ts>
    <user>U04V70XH6</user>
    <text>The main issue you'll have is that most compiler-writing material is going to be illustrated with non-functional languages.</text>
  </message>
  <message>
    <ts>2017-07-28T12:25:34.388043</ts>
    <user>U0NCTKEV8</user>
    <text>the clojurescript compiler and the go macro implementation in core.async are pretty decent examples (I don't know of any prose write ups)</text>
  </message>
  <message>
    <ts>2017-07-28T12:27:09.438751</ts>
    <user>U050MP39D</user>
    <text>instaparse may be of interest &lt;https://github.com/Engelberg/instaparse&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T12:27:56.464505</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U3JURM9B6&gt; Here's a book about writing a compiler in a functional language &lt;http://www.cs.princeton.edu/~appel/modern/ml/&gt; (Standard ML, but the same functional principles will apply).</text>
  </message>
  <message>
    <ts>2017-07-28T12:29:09.503042</ts>
    <user>U3JURM9B6</user>
    <text>is there a nice way to translate union types from SML to clojure ?</text>
  </message>
  <message>
    <ts>2017-07-28T12:29:35.517181</ts>
    <user>U051SS2EU</user>
    <text>Object is a supertype of all union types on the jvm, no?</text>
  </message>
  <message>
    <ts>2017-07-28T12:31:14.571631</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U3JURM9B6&gt; Use tagged maps and multimethods?</text>
  </message>
  <message>
    <ts>2017-07-28T12:40:40.867236</ts>
    <user>U1C03090C</user>
    <text>I'm definetely not experienced with the classpath and classloaders. Is there an alternate way to make a sane plugin system? Clojure doesn't really have any libraries dedicated to that it seems</text>
  </message>
  <message>
    <ts>2017-07-28T13:12:53.894014</ts>
    <user>U08FM7RL1</user>
    <text>Transducers question:  When combining functions with `(comp)`, the functions end up being applied in right-to-left order.  When combining transducers with `(comp)`, the transducers end up being applied in left-to-right order.  Is that intentional?</text>
  </message>
  <message>
    <ts>2017-07-28T13:13:56.926563</ts>
    <user>U08FM7RL1</user>
    <text>I'm just trying to gain an intuition here, if there is one to be had</text>
  </message>
  <message>
    <ts>2017-07-28T13:14:03.930349</ts>
    <user>U17DY48BW</user>
    <text>Anyone know the lighttable plugin for moving parens via keyboard shortcuts?</text>
  </message>
  <message>
    <ts>2017-07-28T13:19:09.090372</ts>
    <user>U050MP39D</user>
    <text>&lt;@U08FM7RL1&gt; it's not so much intentional as just a consequence of how transducers work</text>
  </message>
  <message>
    <ts>2017-07-28T13:19:23.098267</ts>
    <user>U08FM7RL1</user>
    <text>okay, this is what I'm looking for</text>
  </message>
  <message>
    <ts>2017-07-28T13:19:26.099903</ts>
    <user>U08FM7RL1</user>
    <text>please explain</text>
  </message>
  <message>
    <ts>2017-07-28T13:19:35.105015</ts>
    <user>U08FM7RL1</user>
    <text>if you would be so kind</text>
  </message>
  <message>
    <ts>2017-07-28T13:20:22.130036</ts>
    <user>U050MP39D</user>
    <text>I think this thread should explain it for you &lt;https://groups.google.com/forum/#!topic/clojure/OeXZOJYydAs&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T13:21:50.177623</ts>
    <user>U08FM7RL1</user>
    <text>very helpful, thank you &lt;@U050MP39D&gt; !</text>
  </message>
  <message>
    <ts>2017-07-28T13:22:47.206934</ts>
    <user>U050MP39D</user>
    <text>no worries, I remember finding that consequence  pretty interesting myself</text>
  </message>
  <message>
    <ts>2017-07-28T13:37:48.690427</ts>
    <user>U050N5T47</user>
    <text>Anybody have tips or know of a write up or library for implementing fine grained role based permissions in a ring/compojure web app? I mean something like check that this particular user has a role with permissions to delete/modify this particular record.</text>
  </message>
  <message>
    <ts>2017-07-28T13:55:43.270028</ts>
    <user>U0K0TFQLW</user>
    <text>&lt;@U050N5T47&gt; friend can help with that: &lt;https://github.com/cemerick/friend&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T14:00:06.415047</ts>
    <user>U050N5T47</user>
    <text>Thanks &lt;@U0K0TFQLW&gt; I want something like the authorize macro but more focused and easier to use (with docs) to recommend to another developer.</text>
  </message>
  <message>
    <ts>2017-07-28T14:02:20.491848</ts>
    <user>U050N5T47</user>
    <text>Also, that doesn't depend on friend specific attributes (like *identity* being bound, hierarchical keywords, etc.)</text>
  </message>
  <message>
    <ts>2017-07-28T14:05:33.598343</ts>
    <user>U3QUAHZJ6</user>
    <text>is it possible to update 2 keys at once inside a map using clojure's `update` function? something like
```
(update {:a 20 :b 10} :a inc :b dec)
```</text>
  </message>
  <message>
    <ts>2017-07-28T14:06:06.615518</ts>
    <user>U0K0TFQLW</user>
    <text>all you really need to do is have some ring middleware that populates a session key containing a user-id in the ring request. then your controllers can take that user-id and build whatever authz (role-based, fine-grained permissions based on models, etc) that you want</text>
  </message>
  <message>
    <ts>2017-07-28T14:06:57.642280</ts>
    <user>U0K0TFQLW</user>
    <text>there are a bunch of helpers for doing things like working with encrypted+signed session cookies</text>
  </message>
  <message>
    <ts>2017-07-28T14:08:44.699077</ts>
    <user>U050MP39D</user>
    <text>&lt;@U3QUAHZJ6&gt; not with update afaict, reduce works though (reduce #(update %1 %2 inc) [:a :b])</text>
  </message>
  <message>
    <ts>2017-07-28T14:29:57.380842</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U3QUAHZJ6&gt; what about this?
```
(merge-with #(%2 %1) {:a 20 :b 10} {:a inc :b dec})
```</text>
  </message>
  <message>
    <ts>2017-07-28T14:30:59.414431</ts>
    <user>U050MP39D</user>
    <text>^that's pretty bloody cool</text>
  </message>
  <message>
    <ts>2017-07-28T14:35:51.573539</ts>
    <user>U051SS2EU</user>
    <text>or `(-&amp;gt; m (update :a inc) (update :b dec))`</text>
  </message>
  <message>
    <ts>2017-07-28T14:36:17.587501</ts>
    <user>U051SS2EU</user>
    <text>which I think tends to be the version that is easy to read and refactor</text>
  </message>
  <message>
    <ts>2017-07-28T15:16:36.822746</ts>
    <user>U09FEH8GN</user>
    <text>So how do you provide high availability? Right now in prod we just have on JVM instance that handles our web traffic, datomic peer, and background jobs. It's handling the load fine but we don't want it to be a single point of failure. Also it's been nice to reason about things by just having one process.

I figured we could take two approaches. The Datomic transactor approach, have a backup instance that just sits idle and takes over if the main instance dies. The other is to have a pool of instances that can operate independently, possible separate web workers from background job workers. Sort of like the way Rails does it.</text>
  </message>
  <message>
    <ts>2017-07-28T15:16:53.830759</ts>
    <user>U050ECB92</user>
    <text>^ that GenericVersionScheme already proved useful</text>
  </message>
  <message>
    <ts>2017-07-28T15:17:19.843320</ts>
    <user>U050ECB92</user>
    <text>you can't override the broken spec.alpha reference from 0.1.94 to 0.1.123 right now, because the comparator is busted</text>
  </message>
  <message>
    <ts>2017-07-28T15:17:41.853277</ts>
    <user>U07TDTQNL</user>
    <text>&lt;@U09FEH8GN&gt; most systems I've worked on use a load balancer and more than one web server. If one server goes down the loadbalancer stops sending requests to it</text>
  </message>
  <message>
    <ts>2017-07-28T15:19:11.894888</ts>
    <user>U09FEH8GN</user>
    <text>&lt;@U07TDTQNL&gt; do you see anything inherently flawed about the Datomic transactor approach for web servers? Just because we built our whole architecture assuming one instance.</text>
  </message>
  <message>
    <ts>2017-07-28T15:19:23.900621</ts>
    <user>U07TDTQNL</user>
    <text>It's really hard to implement</text>
  </message>
  <message>
    <ts>2017-07-28T15:19:55.915278</ts>
    <user>U07TDTQNL</user>
    <text>you have to make sure you somehow don't have both instances running at the same time.</text>
  </message>
  <message>
    <ts>2017-07-28T15:20:04.919549</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! I would like to metaprogrammingly define a bunch of tests (based on descriptions in an EDN file). Roughly speaking I want to loop over the content of an EDN file and define `deftest` blocks on the fly</text>
  </message>
  <message>
    <ts>2017-07-28T15:20:37.934417</ts>
    <user>U09FEH8GN</user>
    <text>sounds like a job for a macro</text>
  </message>
  <message>
    <ts>2017-07-28T15:20:39.935219</ts>
    <user>U07TDTQNL</user>
    <text>continuing here to allow others to use main chat</text>
  </message>
  <message>
    <ts>2017-07-28T15:21:01.945963</ts>
    <user>U07TDTQNL</user>
    <text>So the other problem is that a single server is rather limiting. A app that is unhappy with multiple instances needs to be redesigned, imo.</text>
  </message>
  <message>
    <ts>2017-07-28T15:21:19.954532</ts>
    <user>U07TDTQNL</user>
    <text>Single writer is fine, but limiting reads to a single box is a scaling issue long-term.</text>
  </message>
  <message>
    <ts>2017-07-28T15:21:57.972404</ts>
    <user>U09FEH8GN</user>
    <text>I see, Stuart Halloway made it sound simple in on of his videos. But I'm probably overlooking a lot of stuff.</text>
  </message>
  <message>
    <ts>2017-07-28T15:22:26.985967</ts>
    <user>U09FEH8GN</user>
    <text>Anyway thanks for the response. And by the way those core asnyc videos you did a while back were fantastic!</text>
  </message>
  <message>
    <ts>2017-07-28T15:22:34.989643</ts>
    <user>U07TDTQNL</user>
    <text>Look at the implementation of deftest. You may not even need a macro. Most of the clojure.test interface is data driven, so it's possible to run a single function that does a ton of work, and reports results with custom report logic.</text>
  </message>
  <message>
    <ts>2017-07-28T15:23:00.001676</ts>
    <user>U07TDTQNL</user>
    <text>Well, remember that the Datomic transactor doesn't handle reads, only writes.</text>
  </message>
  <message>
    <ts>2017-07-28T15:23:02.002576</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U07TDTQNL&gt; ah, so I could just have a single deftest with a bunch of assertions?</text>
  </message>
  <message>
    <ts>2017-07-28T15:23:20.011377</ts>
    <user>U09FEH8GN</user>
    <text>Ah, yeah that's true!</text>
  </message>
  <message>
    <ts>2017-07-28T15:23:31.016312</ts>
    <user>U07TDTQNL</user>
    <text>And those writes are serialized. So you can do stuff like: finish your current transaction, then reject the remaining writes, then shutdown</text>
  </message>
  <message>
    <ts>2017-07-28T15:23:37.019670</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g. a single "rest api" test block that runs tests on all endpoints?</text>
  </message>
  <message>
    <ts>2017-07-28T15:23:50.025528</ts>
    <user>U07TDTQNL</user>
    <text>Also Datomic only fails over once. It won't fail back to the original transactor automatically, as that could cause flip-flop issues.</text>
  </message>
  <message>
    <ts>2017-07-28T15:24:03.031673</ts>
    <user>U07TDTQNL</user>
    <text>Sure, I do that sort of thing all the time</text>
  </message>
  <message>
    <ts>2017-07-28T15:25:16.067095</ts>
    <user>U07TDTQNL</user>
    <text>also, although `testing` says it wants a string, it will take an expression as well: &lt;https://github.com/clojure/clojure/blob/master/src/clj/clojure/test.clj#L596&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T15:25:43.079806</ts>
    <user>U07TDTQNL</user>
    <text>So you can do:

`(testing (str "running-endpoint-" url)
   ....)`</text>
  </message>
  <message>
    <ts>2017-07-28T15:26:15.095257</ts>
    <user>U09FEH8GN</user>
    <text>How does serialized writes change anything? Not sure I understand that point.</text>
  </message>
  <message>
    <ts>2017-07-28T15:27:08.119697</ts>
    <user>U07TDTQNL</user>
    <text>You only ever have a single thread writing to storage, and that simplifies things a bit. Transactions during a shutdown can be in 3 phases: pending, writing, written.</text>
  </message>
  <message>
    <ts>2017-07-28T15:27:35.132623</ts>
    <user>U07TDTQNL</user>
    <text>And there will only ever be one that's being written. Pending transactions can be discarded, and then you have to figure out something to do with written.</text>
  </message>
  <message>
    <ts>2017-07-28T15:27:59.143541</ts>
    <user>U07TDTQNL</user>
    <text>But in general it sounds like your app is a bit more complicated than "a process that reads from a queue, indexes data, and writes it to disk".</text>
  </message>
  <message>
    <ts>2017-07-28T15:28:23.154630</ts>
    <user>U07TDTQNL</user>
    <text>So what are you doing that makes the server hard to duplicate?</text>
  </message>
  <message>
    <ts>2017-07-28T15:29:47.193806</ts>
    <user>U09FEH8GN</user>
    <text>Yeah it's a SaaS for marketers. Well we have every client connect to the webserver via websockets. Then we use the TxReportQueue to push novelty to the each client over the websocket.</text>
  </message>
  <message>
    <ts>2017-07-28T15:30:05.202687</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U07TDTQNL&gt; brilliant, ty</text>
  </message>
  <message>
    <ts>2017-07-28T15:30:13.206327</ts>
    <user>U07TDTQNL</user>
    <text>so what about that can't be done with multiple boxes?</text>
  </message>
  <message>
    <ts>2017-07-28T15:30:48.223066</ts>
    <user>U09FEH8GN</user>
    <text>We also have situations where we make an HTTP request for several blobs of data, the HTTP response is empty, but we load those blobs asynchronously over the websocket.</text>
  </message>
  <message>
    <ts>2017-07-28T15:30:54.226097</ts>
    <user>U07TDTQNL</user>
    <text>Sounds perfect, incoming data is pushed to Datomic, the TxReportQueue pushes to all the connected peers.</text>
  </message>
  <message>
    <ts>2017-07-28T15:31:23.239423</ts>
    <user>U07TDTQNL</user>
    <text>as opposed to sending the request over the websocket?</text>
  </message>
  <message>
    <ts>2017-07-28T15:31:45.249727</ts>
    <user>U09FEH8GN</user>
    <text>yeah, I suppose we could send the request over websockets instead.</text>
  </message>
  <message>
    <ts>2017-07-28T15:32:00.256459</ts>
    <user>U09FEH8GN</user>
    <text>the only reason we send it over http is for legacy reasons</text>
  </message>
  <message>
    <ts>2017-07-28T15:32:42.276001</ts>
    <user>U07TDTQNL</user>
    <text>so your current pattern would have problems with a loadbalancer out-of-the-box, but most load balancers also support things like routing all requests from a single client to the same server</text>
  </message>
  <message>
    <ts>2017-07-28T15:34:12.317238</ts>
    <user>U09FEH8GN</user>
    <text>hmm yeah that might work, then the websocket and the http requests would be guaranteed to be connected to the same instance</text>
  </message>
  <message>
    <ts>2017-07-28T15:34:34.327535</ts>
    <user>U07TDTQNL</user>
    <text>another approach I've used, which might work with smaller numbers of clients, is that you maintain a message queue for each connected websocket. When a user connects to the system they start receiving messages from their queue. That way if the websocket connection breaks, they can reconnect via a different server, and pick up where they left off by reading from the same queue, but on a different server.</text>
  </message>
  <message>
    <ts>2017-07-28T15:35:13.345033</ts>
    <user>U07TDTQNL</user>
    <text>then your HTTP requests can also go into a message queue with a "response queue" name as part of the request.</text>
  </message>
  <message>
    <ts>2017-07-28T15:35:27.351338</ts>
    <user>U07TDTQNL</user>
    <text>That's a rather complex model that works quite well, but has more moving bits.</text>
  </message>
  <message>
    <ts>2017-07-28T15:35:44.359637</ts>
    <user>U09FEH8GN</user>
    <text>and what would you use for the message queue bit?</text>
  </message>
  <message>
    <ts>2017-07-28T15:36:04.368443</ts>
    <user>U07TDTQNL</user>
    <text>I've used RabbitMQ for this, but Id probably use Kafka these days since it's immutable</text>
  </message>
  <message>
    <ts>2017-07-28T15:36:11.371886</ts>
    <user>U050TNB9F</user>
    <text>```
;; breaks with EOF while reading
(some-&amp;gt;&amp;gt; (identity [:#something])
         (filter identity))
;; works
(some-&amp;gt;&amp;gt; (identity [:#something]) (filter identity))
```
whhyyyy? :smile:</text>
  </message>
  <message>
    <ts>2017-07-28T15:36:28.379840</ts>
    <user>U07TDTQNL</user>
    <text>so when a client reconnects they can say "I last read from message #4434" and then they can start getting data from that point on.</text>
  </message>
  <message>
    <ts>2017-07-28T15:36:51.390099</ts>
    <user>U09FEH8GN</user>
    <text>i see</text>
  </message>
  <message>
    <ts>2017-07-28T15:37:13.400091</ts>
    <user>U09FEH8GN</user>
    <text>yeah the load balancer approach might be most appropriate for us</text>
  </message>
  <message>
    <ts>2017-07-28T15:37:32.409126</ts>
    <user>U09FEH8GN</user>
    <text>This has been really helpful, thank you.</text>
  </message>
  <message>
    <ts>2017-07-28T15:41:36.521098</ts>
    <user>U051SS2EU</user>
    <text>I'd blame that on :#anything being invalid</text>
  </message>
  <message>
    <ts>2017-07-28T15:41:40.522909</ts>
    <user>U07HZ0JGL</user>
    <text>is there a predicate equivalent to `(or (fn? %) (and (var? %) (fn? (var-get %)))` ?</text>
  </message>
  <message>
    <ts>2017-07-28T15:43:02.559947</ts>
    <user>U051SS2EU</user>
    <text>no</text>
  </message>
  <message>
    <ts>2017-07-28T15:44:09.590081</ts>
    <user>U5ZAJ15P0</user>
    <text>Is there a project (more specifically a web application) which lets you search the std lib by giving one (or many) input-output samples?</text>
  </message>
  <message>
    <ts>2017-07-28T15:44:26.597880</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; there's findfn which is a lib</text>
  </message>
  <message>
    <ts>2017-07-28T15:44:32.600613</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g. give it `#(* 2 %), [1 2 3] [2 4 6]` and it would tell you it's map</text>
  </message>
  <message>
    <ts>2017-07-28T15:44:41.604501</ts>
    <user>U5ZAJ15P0</user>
    <text>by trying it out on very clojure.core function</text>
  </message>
  <message>
    <ts>2017-07-28T15:44:42.604918</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://github.com/Raynes/findfn&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T15:44:48.607208</ts>
    <user>U050ECB92</user>
    <text>look at &lt;https://crossclj.info&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T15:44:58.611645</ts>
    <user>U050ECB92</user>
    <text>not exactly what you're asking</text>
  </message>
  <message>
    <ts>2017-07-28T15:45:16.619976</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U050ECB92&gt; ha, still cool!</text>
  </message>
  <message>
    <ts>2017-07-28T15:45:24.623861</ts>
    <user>U050ECB92</user>
    <text>good for finding examples out in the wild.</text>
  </message>
  <message>
    <ts>2017-07-28T15:45:43.632231</ts>
    <user>U5ZAJ15P0</user>
    <text>exactly what I was look for; thanks! I thought about building a web app for this but if it already exists…</text>
  </message>
  <message>
    <ts>2017-07-28T15:46:48.662500</ts>
    <user>U051SS2EU</user>
    <text>findfn gives really surprising results sometimes (eg. the long list of clojure.core functions that are effectively identity if called on one arg)</text>
  </message>
  <message>
    <ts>2017-07-28T15:47:17.675566</ts>
    <user>U051SS2EU</user>
    <text>but history shows I'm easily amused, so there's that</text>
  </message>
  <message>
    <ts>2017-07-28T16:46:53.269516</ts>
    <user>U050ECB92</user>
    <text>is there a vim repl plugin that works *without* nREPL?</text>
  </message>
  <message>
    <ts>2017-07-28T16:47:29.284928</ts>
    <user>U050ECB92</user>
    <text>similar to emacs/inf-clojure</text>
  </message>
  <message>
    <ts>2017-07-28T16:51:20.383577</ts>
    <user>U051SS2EU</user>
    <text>the newer vim can do socket comms - so it *should* exist even if it doesn't</text>
  </message>
  <message>
    <ts>2017-07-28T16:53:16.431756</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U050ECB92&gt; using this to connect to clojure socket server would be a fun weekend hack I bet &lt;http://vimhelp.appspot.com/channel.txt.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T16:53:43.443374</ts>
    <user>U1CTH1TUY</user>
    <text>&lt;http://blog.cognitect.com/blog/2017/4/17/clojure-for-neovim-for-clojure&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T16:54:21.459364</ts>
    <user>U1CTH1TUY</user>
    <text>and &lt;https://github.com/jebberjeb/clojure-socketrepl.nvim&gt;</text>
  </message>
  <message>
    <ts>2017-07-28T16:54:31.463783</ts>
    <user>U051SS2EU</user>
    <text>oh, nice</text>
  </message>
  <message>
    <ts>2017-07-28T16:55:22.486109</ts>
    <user>U050ECB92</user>
    <text>interesting, thanks!</text>
  </message>
  <message>
    <ts>2017-07-29T05:15:32.852646</ts>
    <user>U5ZAJ15P0</user>
    <text>Hi! Is there a "test reporter" for plumatic schema (or another schema lib?)?</text>
  </message>
  <message>
    <ts>2017-07-29T05:15:47.853359</ts>
    <user>U5ZAJ15P0</user>
    <text>usecase: I want to validate API responses in tests against a schema and have a nice test report if things fail</text>
  </message>
  <message>
    <ts>2017-07-29T11:41:55.421012</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; what I do is call s/check on the schema and the object, and fail if the result isn't nil with the output of check in the failure</text>
  </message>
  <message>
    <ts>2017-07-29T11:42:33.424150</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U051SS2EU&gt; how should I configure clojure.test to have a nice output for "expected" and "actual" on the report?</text>
  </message>
  <message>
    <ts>2017-07-29T11:42:35.424367</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; test/is lets you put anything you want in the second arg's string</text>
  </message>
  <message>
    <ts>2017-07-29T11:42:52.425714</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; umm that's kind of what clojure.test does when you run the tests</text>
  </message>
  <message>
    <ts>2017-07-29T11:43:02.426802</ts>
    <user>U051SS2EU</user>
    <text>are you talking about doing this outside unit tests?</text>
  </message>
  <message>
    <ts>2017-07-29T11:43:06.427185</ts>
    <user>U5ZAJ15P0</user>
    <text>it only seems to work fell for some predicates</text>
  </message>
  <message>
    <ts>2017-07-29T11:43:09.427610</ts>
    <user>U5ZAJ15P0</user>
    <text>no, running the tests</text>
  </message>
  <message>
    <ts>2017-07-29T11:43:39.430010</ts>
    <user>U5ZAJ15P0</user>
    <text>for example, if the predicate is any arbitrary function it won't report much</text>
  </message>
  <message>
    <ts>2017-07-29T11:43:52.431049</ts>
    <user>U5ZAJ15P0</user>
    <text>I wrote a dumb, poor "schema" toy lib</text>
  </message>
  <message>
    <ts>2017-07-29T11:44:06.432162</ts>
    <user>U5ZAJ15P0</user>
    <text>and getting a report such as:
```
expected: (v (get flat-target k))
  actual: false
```</text>
  </message>
  <message>
    <ts>2017-07-29T11:44:21.433503</ts>
    <user>U5ZAJ15P0</user>
    <text>(v is a predicate function)</text>
  </message>
  <message>
    <ts>2017-07-29T11:44:37.434760</ts>
    <user>U5ZAJ15P0</user>
    <text>I'll try with the approach you suggest</text>
  </message>
  <message>
    <ts>2017-07-29T11:45:03.436951</ts>
    <user>U5ZAJ15P0</user>
    <text>(that's running it with `test/is`)</text>
  </message>
  <message>
    <ts>2017-07-29T11:45:17.438347</ts>
    <user>U051SS2EU</user>
    <text>```Clojure 1.9.0-alpha15
+user=&amp;gt; (require '[clojure.test :as t] '[schema.core :as s])
nil
+user=&amp;gt; (t/is (nil? (s/check [Number] ["a"])) "expected a number")

FAIL in () (NO_SOURCE_FILE:2)
expected a number
expected: (nil? (s/check [Number] ["a"]))
  actual: (not (nil? [(not (instance? java.lang.Number "a"))]))
false
```</text>
  </message>
  <message>
    <ts>2017-07-29T11:45:25.439116</ts>
    <user>U5ZAJ15P0</user>
    <text>Maybe I could call do-report manually instance</text>
  </message>
  <message>
    <ts>2017-07-29T11:45:31.439652</ts>
    <user>U5ZAJ15P0</user>
    <text>mmh</text>
  </message>
  <message>
    <ts>2017-07-29T11:45:53.441437</ts>
    <user>U5ZAJ15P0</user>
    <text>hang on</text>
  </message>
  <message>
    <ts>2017-07-29T11:48:51.456566</ts>
    <user>U5ZAJ15P0</user>
    <text>seems to work, ok, nevermind</text>
  </message>
  <message>
    <ts>2017-07-29T11:49:27.459645</ts>
    <user>U051SS2EU</user>
    <text>if you test a predicate, all you get in the error is that the predicate didn't return the true/false you expected</text>
  </message>
  <message>
    <ts>2017-07-29T12:13:53.587805</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; (defmacro handle [obj prop fun]
  `(.setValue ~(symbol (str (name obj) "/" (name prop))) (fi javafx.event.ActionEvent ~(symbol "event") ~fun)))
#'user/handle
+user=&amp;gt; (macroexpand '(handle a :onAction (fn [x] nil)))
(. a/onAction setValue (user/fi javafx.event.ActionEvent event (fn [x] nil)))
``` I don't know if it's cider, but something's misbehaving</text>
  </message>
  <message>
    <ts>2017-07-29T12:13:55.587906</ts>
    <user>U2APCNHCN</user>
    <text>...ah, it didn't compile and didn't say anythign</text>
  </message>
  <message>
    <ts>2017-07-29T12:14:31.591094</ts>
    <user>U051SS2EU</user>
    <text>oh - right-  macroexpand silently outputs a form that doesn't start with a known macro</text>
  </message>
  <message>
    <ts>2017-07-29T12:14:38.591653</ts>
    <user>U051SS2EU</user>
    <text>even if the thing in it isn't defined</text>
  </message>
  <message>
    <ts>2017-07-29T12:14:53.592829</ts>
    <user>U2APCNHCN</user>
    <text>Back to the drawing board, I guess. Apparently I'm still too dumb to do macros.</text>
  </message>
  <message>
    <ts>2017-07-29T12:15:36.596855</ts>
    <user>U051SS2EU</user>
    <text>Cider magic introduces ambiguities and special cases about what's been evaluated and what hasn't, it's an easy mistake</text>
  </message>
  <message>
    <ts>2017-07-29T12:16:07.599502</ts>
    <user>U051SS2EU</user>
    <text>and macroexpand doesn't care if the things inside it are known, it just expands known macros and leaves the rest alone</text>
  </message>
  <message>
    <ts>2017-07-29T12:17:27.606197</ts>
    <user>U2APCNHCN</user>
    <text>Ok so it expands with `C-x e` in the editor, but not in the REPL, which is set to be the same ns. Huh.</text>
  </message>
  <message>
    <ts>2017-07-29T12:19:57.619076</ts>
    <user>U2APCNHCN</user>
    <text>Heh ^^ But I wouldn't want to miss it. It's weird, but it's great.</text>
  </message>
  <message>
    <ts>2017-07-29T12:20:12.620575</ts>
    <user>U2APCNHCN</user>
    <text>...like Emacs, I guess :stuck_out_tongue:</text>
  </message>
  <message>
    <ts>2017-07-29T12:21:09.625677</ts>
    <user>U054D2JUV</user>
    <text>`C-x e` by default is for calling a keyboard macro inside Emacs, and I think the default binding for expanding a clojure macro is `C-c RET` which works for me from the REPL as well</text>
  </message>
  <message>
    <ts>2017-07-29T12:22:37.633381</ts>
    <user>U054D2JUV</user>
    <text>`C-c RET` for `cider-macroexpand-1` and `C-c M-m` for `cider-macroexpand-all`</text>
  </message>
  <message>
    <ts>2017-07-29T12:23:15.636616</ts>
    <user>U2APCNHCN</user>
    <text>Ah. So `clojure.core/macroexpand` isn't expected to work in the CIDER REPL?</text>
  </message>
  <message>
    <ts>2017-07-29T12:24:00.640490</ts>
    <user>U054D2JUV</user>
    <text>oh right you are typing it in the REPL, let me try that</text>
  </message>
  <message>
    <ts>2017-07-29T12:24:38.643678</ts>
    <user>U2APCNHCN</user>
    <text>exactly</text>
  </message>
  <message>
    <ts>2017-07-29T12:25:12.646403</ts>
    <user>U054D2JUV</user>
    <text>I get the same result as &lt;@U051SS2EU&gt; when typing it in the REPL</text>
  </message>
  <message>
    <ts>2017-07-29T12:27:06.656184</ts>
    <user>U2APCNHCN</user>
    <text>It simply returns the input for me on the REPL, but works fine when evaluating with C-x e in the editor</text>
  </message>
  <message>
    <ts>2017-07-29T12:27:48.659816</ts>
    <user>U2APCNHCN</user>
    <text>But `C-c RET` is a more-than-worthy REPLacement anyway</text>
  </message>
  <message>
    <ts>2017-07-29T12:28:48.665111</ts>
    <user>U054D2JUV</user>
    <text>what is `C-x e` bound to for you?</text>
  </message>
  <message>
    <ts>2017-07-29T12:29:50.670633</ts>
    <user>U2APCNHCN</user>
    <text>The default, that is evaluating the expression at the cursor</text>
  </message>
  <message>
    <ts>2017-07-29T12:32:27.685251</ts>
    <user>U054D2JUV</user>
    <text>perhaps you mean `C-x C-e`?</text>
  </message>
  <message>
    <ts>2017-07-29T12:32:54.687601</ts>
    <user>U2APCNHCN</user>
    <text>Ah, yes, right.</text>
  </message>
  <message>
    <ts>2017-07-29T12:34:02.693912</ts>
    <user>U054D2JUV</user>
    <text>it works for me the same way regardless of whether I type it or evaluate the form in a code buffer or in the REPL</text>
  </message>
  <message>
    <ts>2017-07-29T12:34:47.698038</ts>
    <user>U054D2JUV</user>
    <text>I'm not on the latest version however, so perhaps something changed, anyways this should probably belong to &lt;#C0617A8PQ|cider&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T12:35:10.700150</ts>
    <user>U11BV7MTK</user>
    <text>```
fizzbuzz.core&amp;gt; (macroexpand-1 '(handle a :onAction (fn [x] nil)))
(.setValue a/onAction (fizzbuzz.core/fi javafx.event.ActionEvent event (fn [x] nil)))
```</text>
  </message>
  <message>
    <ts>2017-07-29T12:36:23.706936</ts>
    <user>U11BV7MTK</user>
    <text>am i missing something from the discussion on macroexpansion with CIDER?</text>
  </message>
  <message>
    <ts>2017-07-29T12:37:41.714117</ts>
    <user>U2APCNHCN</user>
    <text>&lt;@U11BV7MTK&gt; no, you don't miss anything.
`clojurefx.controllergen&amp;gt; (macroexpand-1 '(handle a :onAction (fn [x] nil)))
(handle a :onAction (fn [x] nil)`</text>
  </message>
  <message>
    <ts>2017-07-29T12:38:09.716584</ts>
    <user>U11BV7MTK</user>
    <text>ah. weird</text>
  </message>
  <message>
    <ts>2017-07-29T12:38:29.718373</ts>
    <user>U2APCNHCN</user>
    <text>Maybe I gotta restart cider. Maybe I've messed something  up.</text>
  </message>
  <message>
    <ts>2017-07-29T12:39:50.725276</ts>
    <user>U11BV7MTK</user>
    <text>what does `(meta #'handle)` return?</text>
  </message>
  <message>
    <ts>2017-07-29T12:41:45.735340</ts>
    <user>U2APCNHCN</user>
    <text>Already restarted the REPL now... I guess what one'd expect now.
`{:arglists ([obj prop fun]), :line 37, :column 1, :file "/home/zilti/projects/clojurefx/src/clojurefx/clojurefx.clj", :name handle, :ns #namespace[clojurefx.clojurefx], :macro true}` but it works now</text>
  </message>
  <message>
    <ts>2017-07-29T12:41:59.736434</ts>
    <user>U11BV7MTK</user>
    <text>huh. weird</text>
  </message>
  <message>
    <ts>2017-07-29T18:21:19.322884</ts>
    <user>U5ZAJ15P0</user>
    <text>Would it make sense to use a record with no fields purely to implement a protocol?</text>
  </message>
  <message>
    <ts>2017-07-29T18:21:40.324047</ts>
    <user>U5ZAJ15P0</user>
    <text>e.g. use the record as a way to get an object implementing some functions (the protocol) so you know it follows a certain interface</text>
  </message>
  <message>
    <ts>2017-07-29T18:21:46.324421</ts>
    <user>U5ZAJ15P0</user>
    <text>without needing the record to hold any data</text>
  </message>
  <message>
    <ts>2017-07-29T18:22:44.328058</ts>
    <user>U5ZAJ15P0</user>
    <text>It's a bit of an odd question, I am not sure it's sensible</text>
  </message>
  <message>
    <ts>2017-07-29T18:25:30.338310</ts>
    <user>U051SS2EU</user>
    <text>sounds like a job for deftype or reify</text>
  </message>
  <message>
    <ts>2017-07-29T18:25:54.339606</ts>
    <user>U051SS2EU</user>
    <text>deftype if you need a named class, reify if you don't</text>
  </message>
  <message>
    <ts>2017-07-29T18:27:52.346179</ts>
    <user>U5ZAJ15P0</user>
    <text>I found a better solution to my problem (not involving this scheme) but my question still stands. To give you some context, I have a bunch of entities that have different access patterns. I was thinking of having an `Entity` protocol with some functions such as `get`, `put`, etc (`EntityRepository` might be a better name actually). Then have a record per entity type implementing that protocol, e.g. `(defrecord UserRepository [] EntityRepository (get...`</text>
  </message>
  <message>
    <ts>2017-07-29T18:29:03.350412</ts>
    <user>U051SS2EU</user>
    <text>the syntax to use reify or deftype there is nearly identical</text>
  </message>
  <message>
    <ts>2017-07-29T18:29:12.350973</ts>
    <user>U5ZAJ15P0</user>
    <text>it wasn't really meant as a way to allow to polymorphically pass any EntityRepository</text>
  </message>
  <message>
    <ts>2017-07-29T18:29:21.351658</ts>
    <user>U5ZAJ15P0</user>
    <text>but more as a way to ensure that UserRepository implements the right methods</text>
  </message>
  <message>
    <ts>2017-07-29T18:29:39.352660</ts>
    <user>U051SS2EU</user>
    <text>and it will behave the same (except the whole "acts like a hash map" part)</text>
  </message>
  <message>
    <ts>2017-07-29T18:29:45.353026</ts>
    <user>U5ZAJ15P0</user>
    <text>(to have a consistent API for accessing entities across the app, even if at the call point I always know what kind of entity I am accessing)</text>
  </message>
  <message>
    <ts>2017-07-29T18:30:07.354413</ts>
    <user>U051SS2EU</user>
    <text>I still don't see why any of  these things imply a defrecord instead of deftype or reify</text>
  </message>
  <message>
    <ts>2017-07-29T18:30:21.355374</ts>
    <user>U5ZAJ15P0</user>
    <text>I don't either, I've no idea what deftype does :smile: looking now</text>
  </message>
  <message>
    <ts>2017-07-29T18:30:35.356139</ts>
    <user>U5ZAJ15P0</user>
    <text>I was just trying to give you a bit more context, just in case</text>
  </message>
  <message>
    <ts>2017-07-29T18:31:36.359735</ts>
    <user>U5ZAJ15P0</user>
    <text>yeah you are right, deftype is a better idea in this case</text>
  </message>
  <message>
    <ts>2017-07-29T18:31:53.360904</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U5ZAJ15P0&gt; the chart here is useful &lt;https://cemerick.com/2011/07/05/flowchart-for-choosing-the-right-clojure-type-definition-form/&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T18:32:14.362206</ts>
    <user>U051SS2EU</user>
    <text>it recommends reify for your case, unless you need a named type for some reason not mentioned yet</text>
  </message>
  <message>
    <ts>2017-07-29T18:32:15.362291</ts>
    <user>U5ZAJ15P0</user>
    <text>defrecord is just sugar on top of deftype right?</text>
  </message>
  <message>
    <ts>2017-07-29T18:32:19.362502</ts>
    <user>U5ZAJ15P0</user>
    <text>ok</text>
  </message>
  <message>
    <ts>2017-07-29T18:32:40.363706</ts>
    <user>U5ZAJ15P0</user>
    <text>ah, thanks, helpful flow chart!</text>
  </message>
  <message>
    <ts>2017-07-29T18:32:49.364185</ts>
    <user>U051SS2EU</user>
    <text>it's like deftype but it automatically acts like a hash map (which is a feature you don't need)</text>
  </message>
  <message>
    <ts>2017-07-29T18:33:17.365783</ts>
    <user>U5ZAJ15P0</user>
    <text>Could I implement that behaviour myself on top of deftype?</text>
  </message>
  <message>
    <ts>2017-07-29T18:33:29.366497</ts>
    <user>U5ZAJ15P0</user>
    <text>by implementing some protocols?</text>
  </message>
  <message>
    <ts>2017-07-29T18:33:35.366874</ts>
    <user>U5ZAJ15P0</user>
    <text>or it's some compiler wizardry?</text>
  </message>
  <message>
    <ts>2017-07-29T18:33:54.367854</ts>
    <user>U051SS2EU</user>
    <text>deftype implements protocols, so yes you can do it by implementing the right ones</text>
  </message>
  <message>
    <ts>2017-07-29T18:33:54.367878</ts>
    <user>U5ZAJ15P0</user>
    <text>(just curious, not planning on re-inventing defrecord)</text>
  </message>
  <message>
    <ts>2017-07-29T18:34:26.369790</ts>
    <user>U5ZAJ15P0</user>
    <text>ok; thank you :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-29T18:38:50.385361</ts>
    <user>U61KCTX8S</user>
    <text>what is a safe way to suppress ALL output from a called function? I tried both wrapping it up  with "with-out-str" and redirecting output with bindings like "(binding [*out* "chuj" *err* "chuj2"] ", but my called function still outputs tons of shit</text>
  </message>
  <message>
    <ts>2017-07-29T18:45:49.410830</ts>
    <user>U08E3BBST</user>
    <text>&lt;@U61KCTX8S&gt; the code could be using `System/out` directly</text>
  </message>
  <message>
    <ts>2017-07-29T18:47:00.415043</ts>
    <user>U61KCTX8S</user>
    <text>(binding [*out* "chuj" *err* "chuj2" System/out "chuj3"] ??</text>
  </message>
  <message>
    <ts>2017-07-29T18:47:24.416548</ts>
    <user>U08E3BBST</user>
    <text>`System/out` is a Java thing, imagine calling into native java code which does some printing</text>
  </message>
  <message>
    <ts>2017-07-29T18:47:31.416974</ts>
    <user>U5ZAJ15P0</user>
    <text>&lt;@U61KCTX8S&gt; edgy kids would run it in a Docker container for complete isolation :kappa:</text>
  </message>
  <message>
    <ts>2017-07-29T18:51:39.430870</ts>
    <user>U08E3BBST</user>
    <text>&lt;@U5ZAJ15P0&gt; I don't understand how Docker could be related to the problem, or I don't understand the problem :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-29T18:53:05.436132</ts>
    <user>U08E3BBST</user>
    <text>he calls a function, which can potentially call some non-clojure code, which can potentially print something, redirecting clojure's print facilities does not help redirecting all possible output</text>
  </message>
  <message>
    <ts>2017-07-29T18:53:42.438224</ts>
    <user>U08E3BBST</user>
    <text>even clojure code could do directly `(.write System/out "something")` bypassing Clojure's `*out*`</text>
  </message>
  <message>
    <ts>2017-07-29T18:53:52.438784</ts>
    <user>U5ZAJ15P0</user>
    <text>I was trolling, sorry</text>
  </message>
  <message>
    <ts>2017-07-29T18:55:55.445875</ts>
    <user>U08E3BBST</user>
    <text>if this is what is happening, &lt;@U61KCTX8S&gt; would have to capture the output on lower-level in Java land, something like this: &lt;https://stackoverflow.com/a/8708357/84283&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T18:58:40.455286</ts>
    <user>U61KCTX8S</user>
    <text>I could run the function in a separate process and use OS stuff to redirect it's output, this is(besides inefficient and ugly) not so good since my function is changing some global variables</text>
  </message>
  <message>
    <ts>2017-07-29T19:01:08.465326</ts>
    <user>U08E3BBST</user>
    <text>&lt;@U61KCTX8S&gt; the question is *who* is printing and via *what* mechanism, is it just clojure code? on the same thread? do you have control over it? I assume it is more complicated and you don't know exactly.</text>
  </message>
  <message>
    <ts>2017-07-29T19:01:43.467780</ts>
    <user>U61KCTX8S</user>
    <text>my function runs in a seperate thread, so i think &lt;@U08E3BBST&gt; 's solution should not be good, since all of system.out is suppressed this way. Thread1 starts thread2 with the function that i want to silence</text>
  </message>
  <message>
    <ts>2017-07-29T19:02:08.469718</ts>
    <user>U61KCTX8S</user>
    <text>the lowlevel java solution, as far as i understand it, suppress all of system.out</text>
  </message>
  <message>
    <ts>2017-07-29T19:02:22.470604</ts>
    <user>U61KCTX8S</user>
    <text>so also that of thread1</text>
  </message>
  <message>
    <ts>2017-07-29T19:02:38.471629</ts>
    <user>U08E3BBST</user>
    <text>well, you might simply be doing bindings on a wrong thread</text>
  </message>
  <message>
    <ts>2017-07-29T19:03:02.473147</ts>
    <user>U08E3BBST</user>
    <text>`binding` is local to current thread</text>
  </message>
  <message>
    <ts>2017-07-29T19:03:13.473896</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U08E3BBST&gt; i am calling a third library function, that's printing the mess, havent looked deep inside it to know how it prints all the mess</text>
  </message>
  <message>
    <ts>2017-07-29T19:05:07.481051</ts>
    <user>U61KCTX8S</user>
    <text>clj-http.client is the evil doer</text>
  </message>
  <message>
    <ts>2017-07-29T19:05:16.481582</ts>
    <user>U051SS2EU</user>
    <text>it should just be a logger</text>
  </message>
  <message>
    <ts>2017-07-29T19:05:25.482163</ts>
    <user>U051SS2EU</user>
    <text>if you configure it's logger you can fix it</text>
  </message>
  <message>
    <ts>2017-07-29T19:05:33.482588</ts>
    <user>U61KCTX8S</user>
    <text>since it's http stuff i rather expect it to run on a couple of threads</text>
  </message>
  <message>
    <ts>2017-07-29T19:06:27.485899</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U051SS2EU&gt; , yes i could do it, but since i have function mappings and i plan to expand the code, I would prefer to have a generic method to suppress output</text>
  </message>
  <message>
    <ts>2017-07-29T19:07:13.488701</ts>
    <user>U61KCTX8S</user>
    <text>i can fix clj-http.client logging today but I will have the same problem when i add some other stuff tommorrow</text>
  </message>
  <message>
    <ts>2017-07-29T19:07:36.490106</ts>
    <user>U051SS2EU</user>
    <text>no, not fix the logging, configure it - that's the proper way to fix logging behavior, is to provide config</text>
  </message>
  <message>
    <ts>2017-07-29T19:08:28.493216</ts>
    <user>U051SS2EU</user>
    <text>there are only so many logging libs out there</text>
  </message>
  <message>
    <ts>2017-07-29T19:08:41.493898</ts>
    <user>U051SS2EU</user>
    <text>(too many, but not arbitrarily many)</text>
  </message>
  <message>
    <ts>2017-07-29T19:08:56.494754</ts>
    <user>U051SS2EU</user>
    <text>anything in the clj ecosystem should be configurable via slf4j</text>
  </message>
  <message>
    <ts>2017-07-29T19:09:03.495185</ts>
    <user>U61KCTX8S</user>
    <text>and the logging libraries are able to redirect output ?</text>
  </message>
  <message>
    <ts>2017-07-29T19:09:09.495588</ts>
    <user>U61KCTX8S</user>
    <text>in a generic way?</text>
  </message>
  <message>
    <ts>2017-07-29T19:09:09.495642</ts>
    <user>U051SS2EU</user>
    <text>that's what they are for, yes</text>
  </message>
  <message>
    <ts>2017-07-29T19:12:51.508695</ts>
    <user>U2APCNHCN</user>
    <text>taoensso.timbre is also able to configure slf4j in a very simple way</text>
  </message>
  <message>
    <ts>2017-07-29T19:13:42.511879</ts>
    <user>U051SS2EU</user>
    <text>yeah, I use timbre's slf4j extension to control java logging things in my app</text>
  </message>
  <message>
    <ts>2017-07-29T19:14:14.513926</ts>
    <user>U051SS2EU</user>
    <text>it's annoying, then you get it configured and pretty much never have to touch it again</text>
  </message>
  <message>
    <ts>2017-07-29T19:14:24.514655</ts>
    <user>U61KCTX8S</user>
    <text>none of themlooks simple i need stuff like (shut-up (myfunction..</text>
  </message>
  <message>
    <ts>2017-07-29T19:15:01.516725</ts>
    <user>U051SS2EU</user>
    <text>you set the log level to a less verbose level for the specific package doing the printing</text>
  </message>
  <message>
    <ts>2017-07-29T19:15:17.517761</ts>
    <user>U61KCTX8S</user>
    <text>log-capture!</text>
  </message>
  <message>
    <ts>2017-07-29T19:15:19.517887</ts>
    <user>U051SS2EU</user>
    <text>then you just call stuff and if it is from that package the verbosity is lower</text>
  </message>
  <message>
    <ts>2017-07-29T19:17:06.524306</ts>
    <user>U61KCTX8S</user>
    <text>i don't like these solutions, people on the web are complaining that the loggers themself spit output</text>
  </message>
  <message>
    <ts>2017-07-29T19:17:35.526100</ts>
    <user>U61KCTX8S</user>
    <text>you see, i don't need a logger,  want to silence a function</text>
  </message>
  <message>
    <ts>2017-07-29T19:17:44.526667</ts>
    <user>U051SS2EU</user>
    <text>the function is using a logger</text>
  </message>
  <message>
    <ts>2017-07-29T19:17:52.527166</ts>
    <user>U051SS2EU</user>
    <text>the way to make a logger shut up is to configure it properly</text>
  </message>
  <message>
    <ts>2017-07-29T19:17:58.527533</ts>
    <user>U61KCTX8S</user>
    <text>so putting a logging library into the project is bloating my software</text>
  </message>
  <message>
    <ts>2017-07-29T19:18:07.528094</ts>
    <user>U051SS2EU</user>
    <text>OK, have fun</text>
  </message>
  <message>
    <ts>2017-07-29T19:18:33.529662</ts>
    <user>U051SS2EU</user>
    <text>the logging library - the big one - is already pulled in by clj-http</text>
  </message>
  <message>
    <ts>2017-07-29T19:18:54.530845</ts>
    <user>U051SS2EU</user>
    <text>you can fix this with a small text file that tells the logger how to behave - or some other crazy hack if you really prefer that</text>
  </message>
  <message>
    <ts>2017-07-29T19:19:36.533281</ts>
    <user>U051SS2EU</user>
    <text>the timbre solution is better if you are using timbre / need timbre's features, but the logger that clj-http is already pulling can be controlled with a small props file or xml document</text>
  </message>
  <message>
    <ts>2017-07-29T19:21:19.539406</ts>
    <user>U08E3BBST</user>
    <text>a friendly alternative: I'm not friends with xml, I tend to use this: &lt;https://github.com/malcolmsparks/clj-logging-config&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T19:34:11.583911</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U051SS2EU&gt; clj-http uses this logging library, ok i can configure it, i use many different functions calls, maybe one of em uses another logging library which overrides this stuff?! That's why i'd prefer a "hack", a function which simply silences ALL output of a called function</text>
  </message>
  <message>
    <ts>2017-07-29T19:55:33.657287</ts>
    <user>U051SS2EU</user>
    <text>there's too many ways to output for that to work</text>
  </message>
  <message>
    <ts>2017-07-29T19:55:39.657578</ts>
    <user>U051SS2EU</user>
    <text>one of those ways is via a logging library</text>
  </message>
  <message>
    <ts>2017-07-29T19:55:46.658022</ts>
    <user>U051SS2EU</user>
    <text>they run their own thread for logging, often</text>
  </message>
  <message>
    <ts>2017-07-29T19:55:58.658814</ts>
    <user>U051SS2EU</user>
    <text>so you can't intervene except on the level of that lib and it's thread</text>
  </message>
  <message>
    <ts>2017-07-29T19:56:15.659729</ts>
    <user>U61KCTX8S</user>
    <text>i also don;t see in the source of  which logging library where is used, neither do i understand how to do this, i put a log4j.properties file into the root of the project, thats supposed to turn logging off</text>
  </message>
  <message>
    <ts>2017-07-29T19:57:00.662319</ts>
    <user>U61KCTX8S</user>
    <text>that's why i'd prefer a hack to silence it completeley, simply to much shit is there to configure which both takes my time and makes the projhect more complex</text>
  </message>
  <message>
    <ts>2017-07-29T19:59:26.670942</ts>
    <user>U051SS2EU</user>
    <text>I've already given my opinion on all this, my experience with the jvm tells me that a general supression of output is more complex and difficult to implement than the configs to control the logging that your libraries pull in. But it's your project, do it how you like. The ecosystem is not going to make this easy for you.</text>
  </message>
  <message>
    <ts>2017-07-29T20:02:04.682163</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U051SS2EU&gt; so is there a simple way of turning logging off? so that i wont waste hours of reading and understanding docs</text>
  </message>
  <message>
    <ts>2017-07-29T20:05:33.694813</ts>
    <user>U08E3BBST</user>
    <text>&lt;@U61KCTX8S&gt; from what you wrote, you likely don't want simple, you want *easy* :wink:</text>
  </message>
  <message>
    <ts>2017-07-29T20:05:49.695691</ts>
    <user>U08E3BBST</user>
    <text>&lt;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/SimpleMadeEasy.md&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T20:05:57.696124</ts>
    <user>U61KCTX8S</user>
    <text>i want copy-paste</text>
  </message>
  <message>
    <ts>2017-07-29T20:06:15.697164</ts>
    <user>U61KCTX8S</user>
    <text>i see no point on wasting to much time for stuff that i don;t need</text>
  </message>
  <message>
    <ts>2017-07-29T20:06:33.698170</ts>
    <user>U08E3BBST</user>
    <text>wrap your tool in a bash script and redirect/filter the output outside the process</text>
  </message>
  <message>
    <ts>2017-07-29T20:07:00.699711</ts>
    <user>U08E3BBST</user>
    <text>(and we are back to docker, if you want to do it the fancy way ;)</text>
  </message>
  <message>
    <ts>2017-07-29T20:07:26.701066</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U08E3BBST&gt;  the problem is that my function is changing some global variables</text>
  </message>
  <message>
    <ts>2017-07-29T20:07:46.702110</ts>
    <user>U61KCTX8S</user>
    <text>it wont be able to do this in a seperate process</text>
  </message>
  <message>
    <ts>2017-07-29T20:09:00.706095</ts>
    <user>U08E3BBST</user>
    <text>I don't see a problem, wrap your whole thing and redirect/filter the output on OS/shell/system level (outside your process)</text>
  </message>
  <message>
    <ts>2017-07-29T20:09:48.708751</ts>
    <user>U61KCTX8S</user>
    <text>it's not a point of easy/simple, clj-http is logging crap to stdout, i see no point on configuring it's logging facility since next time some other lib will use a different logging facility</text>
  </message>
  <message>
    <ts>2017-07-29T20:10:27.711090</ts>
    <user>U61KCTX8S</user>
    <text>&lt;@U08E3BBST&gt; mother_thread gives good output(my output), but calls thread2 which gives unwanted output</text>
  </message>
  <message>
    <ts>2017-07-29T20:10:57.712685</ts>
    <user>U61KCTX8S</user>
    <text>thread2 alters global variables</text>
  </message>
  <message>
    <ts>2017-07-29T20:12:00.716393</ts>
    <user>U61KCTX8S</user>
    <text>i can't wrap the whole stuff up since i loose output from mother_thread</text>
  </message>
  <message>
    <ts>2017-07-29T20:14:06.723179</ts>
    <user>U08E3BBST</user>
    <text>well, there is probably no easy way to do that, as I posted an hour ago, you could "hack" it via `System/setOut`, but then you would have to the filtering on your own, because that would capture all java (and clojure) outputs from all threads</text>
  </message>
  <message>
    <ts>2017-07-29T20:15:02.726401</ts>
    <user>U08E3BBST</user>
    <text>I'm pretty sure this is doable, you would need to filter the stream and reject unwanted lines with some regex</text>
  </message>
  <message>
    <ts>2017-07-29T20:16:57.733106</ts>
    <user>U08E3BBST</user>
    <text>for inspiration, you can look here, recently I wrote something similar:
&lt;https://github.com/cljs-oss/canary/blob/master/runner/src/canary/runner/output.clj#L16&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T20:17:18.734404</ts>
    <user>U08E3BBST</user>
    <text>the printer would inspect individual lines and decide to print them out or not</text>
  </message>
  <message>
    <ts>2017-07-29T20:17:42.735800</ts>
    <user>U08E3BBST</user>
    <text>stream would be something you would construct in java land and set into `System/setOut` (theory)</text>
  </message>
  <message>
    <ts>2017-07-29T20:26:18.765883</ts>
    <user>U61KCTX8S</user>
    <text>i even tried to suppress sysem.out, which also did not work. I think the logging libraries redirect it again,</text>
  </message>
  <message>
    <ts>2017-07-29T20:26:19.765936</ts>
    <user>U61KCTX8S</user>
    <text>&lt;https://stackoverflow.com/questions/37773329/capturing-system-out-in-clojure&gt;</text>
  </message>
  <message>
    <ts>2017-07-29T20:28:28.773373</ts>
    <user>U08E3BBST</user>
    <text>well, I'm not a java guy, but I can imagine there might be even lower-level layer, which logging library could be using - something like logging into files which happens to be stdout by some lower-level means</text>
  </message>
  <message>
    <ts>2017-07-29T20:30:51.782003</ts>
    <user>U08E3BBST</user>
    <text>I mean writing into something like `/dev/stdout` unix-y way, effectively bypassing even `System/out`</text>
  </message>
  <message>
    <ts>2017-07-29T20:44:02.825996</ts>
    <user>U61KCTX8S</user>
    <text>i leave this crappy output where it is</text>
  </message>
  <message>
    <ts>2017-07-29T20:44:12.826616</ts>
    <user>U61KCTX8S</user>
    <text>and put my wanted output somewhere else</text>
  </message>
  <message>
    <ts>2017-07-29T20:44:26.827552</ts>
    <user>U61KCTX8S</user>
    <text>and hide stdout alltogether</text>
  </message>
  <message>
    <ts>2017-07-29T20:45:42.832098</ts>
    <user>U61KCTX8S</user>
    <text>i am deifentekly to stupid to configure clj-http's logging</text>
  </message>
  <message>
    <ts>2017-07-29T20:45:57.832911</ts>
    <user>U61KCTX8S</user>
    <text>topic closed</text>
  </message>
  <message>
    <ts>2017-07-29T20:46:01.833110</ts>
    <user>U61KCTX8S</user>
    <text>thanks all</text>
  </message>
  <message>
    <ts>2017-07-29T20:46:06.833423</ts>
    <user>U61KCTX8S</user>
    <text>may the force be with you!</text>
  </message>
  <message>
    <ts>2017-07-29T20:48:57.843127</ts>
    <user>U61KCTX8S</user>
    <text>easy&amp;amp;simple is always the preferred way :wink:</text>
  </message>
  <message>
    <ts>2017-07-30T04:12:48.173296</ts>
    <user>U1YTUBH53</user>
    <text>judging from past releases, any idea when 1.9 will be out? right now it is alpha something..</text>
  </message>
  <message>
    <ts>2017-07-30T05:20:40.378386</ts>
    <user>U3JURM9B6</user>
    <text>how bad is it to mix code that camelCase and dash-case in the same project ?</text>
  </message>
  <message>
    <ts>2017-07-30T05:21:00.379412</ts>
    <user>U3JURM9B6</user>
    <text>I'm designing some database field column names, and camelCase somehow seems more appropriate than the dash-case</text>
  </message>
  <message>
    <ts>2017-07-30T08:34:23.018923</ts>
    <user>U09LZR36F</user>
    <text>Is there a new api for &lt;http://clojuredocs.org|clojuredocs.org&gt;? The current one seems to be timing out. I'm guessing it is gone.</text>
  </message>
  <message>
    <ts>2017-07-30T08:42:23.048271</ts>
    <user>U0EJUF3KQ</user>
    <text>&lt;@U3JURM9B6&gt; you can convert database column names to dash-case if you want.</text>
  </message>
  <message>
    <ts>2017-07-30T08:43:57.054121</ts>
    <user>U0EJUF3KQ</user>
    <text>`(jdbc/query *db* sql {:identifiers to-kebab-case})`</text>
  </message>
  <message>
    <ts>2017-07-30T09:31:35.246062</ts>
    <user>U0D4G0Q4U</user>
    <text>&lt;@U3JURM9B6&gt; go nuts &lt;https://github.com/qerub/camel-snake-kebab&gt;</text>
  </message>
  <message>
    <ts>2017-07-30T09:39:27.278737</ts>
    <user>U080181PF</user>
    <text>i'm using transit with sente, and i noticed there are `+`s and `-`s in the beginning of the encoded messages, such as `+[["~:chsk/ws-ping"]]`. why are they there? it is not appear to be valid json.</text>
  </message>
  <message>
    <ts>2017-07-30T09:40:02.280863</ts>
    <user>U080181PF</user>
    <text>i'm a transit newbie so forgive me if i'm missing something obvious</text>
  </message>
  <message>
    <ts>2017-07-30T09:48:51.316462</ts>
    <user>U080181PF</user>
    <text>ah, i think this is intentional behavior by sente, based on my reading of the source code</text>
  </message>
  <message>
    <ts>2017-07-30T11:22:24.735759</ts>
    <user>U0CV48L87</user>
    <text>&lt;@U080181PF&gt; I believe you're right. Looks like the `+` just indicates that the payload contains a callback, and this appears to be above the level of the particular "packer" (read: encoding). &lt;https://github.com/ptaoussanis/sente/blob/e3d417334214df3b9f9b0514c8ddd8c71b6d49b0/src/taoensso/sente.cljc#L217-L231&gt;</text>
  </message>
  <message>
    <ts>2017-07-30T15:28:53.934168</ts>
    <user>U1WL8TSPM</user>
    <text>anybody using transit? is there an easy way to customize the precision of floats for the writer? i.e. if I just want to save some on length, round up all floats to 2 decimals only?</text>
  </message>
  <message>
    <ts>2017-07-30T17:05:42.400492</ts>
    <user>U5JUDH2UE</user>
    <text>What's a quick way of doing checking on a value with an arbitrary function to return a default value. Like the following without the let:
```
(let [val (expression arg)]
  (if (function val) default val))
```</text>
  </message>
  <message>
    <ts>2017-07-30T17:09:02.417123</ts>
    <user>U5JUDH2UE</user>
    <text>Basically, if a function returns true, then return nil, otherwise return the original value. So, kinda nil checking.</text>
  </message>
  <message>
    <ts>2017-07-30T17:11:06.427114</ts>
    <user>U0CV48L87</user>
    <text>&lt;@U1WL8TSPM&gt; I think it can't be too trivial because there are a few SNAFUs around infinity and NaN, but I think this will get you on the right track: &lt;https://gist.github.com/camdez/108968382449b7c3a957daecb1aa500a&gt;</text>
  </message>
  <message>
    <ts>2017-07-30T17:16:22.452163</ts>
    <user>U61HA86AG</user>
    <text>write a macro?</text>
  </message>
  <message>
    <ts>2017-07-30T17:17:53.458855</ts>
    <user>U5JUDH2UE</user>
    <text>I suppose that's probably the solution. I just thought there might be something in core that'd do this.
The real problem is parsing a float then NaN checking it.</text>
  </message>
  <message>
    <ts>2017-07-30T17:19:43.466750</ts>
    <user>U61HA86AG</user>
    <text>yeah, i'm not aware of anything in core for this, but someone else might be</text>
  </message>
  <message>
    <ts>2017-07-30T17:20:17.469377</ts>
    <user>U61HA86AG</user>
    <text>actually</text>
  </message>
  <message>
    <ts>2017-07-30T17:20:43.471378</ts>
    <user>U61HA86AG</user>
    <text>does &lt;https://clojuredocs.org/clojure.core/some-&amp;gt;&gt; work?</text>
  </message>
  <message>
    <ts>2017-07-30T17:21:03.472818</ts>
    <user>U61HA86AG</user>
    <text>or cond-&amp;gt;</text>
  </message>
  <message>
    <ts>2017-07-30T17:24:30.488872</ts>
    <user>U0CV48L87</user>
    <text>Neither of those is quite right. `cond-&amp;gt;` doesn't pass `val` to `function`, and `some-&amp;gt;` just bails if the value becomes nil.</text>
  </message>
  <message>
    <ts>2017-07-30T17:25:14.492273</ts>
    <user>U5JUDH2UE</user>
    <text>Yeah, I'd looked at those, but not quite right.</text>
  </message>
  <message>
    <ts>2017-07-30T17:26:09.496265</ts>
    <user>U0CV48L87</user>
    <text>You don't really need to jump straight to a macro unless you're worried about default getting evaluated ahead of time.</text>
  </message>
  <message>
    <ts>2017-07-30T17:26:49.499001</ts>
    <user>U5JUDH2UE</user>
    <text>I've settled on consecutive entries in a let with the same name.</text>
  </message>
  <message>
    <ts>2017-07-30T17:29:29.510522</ts>
    <user>U0CV48L87</user>
    <text>Cool. But it could be as simple as:

```
(defn default-if [x pred default]
  (if (pred x) default x))
```

It even reads fairly well in a threading macro:

```
(-&amp;gt; (+ 2 1)
    (default-if even? "even")
    (default-if neg? "negative"))
```</text>
  </message>
  <message>
    <ts>2017-07-30T17:29:47.511845</ts>
    <user>U0CV48L87</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message>
    <ts>2017-07-30T17:30:30.515439</ts>
    <user>U5JUDH2UE</user>
    <text>That'd be pretty good. I tend to like to rely on core as must as possible without small helper function like that. Maybe that's just a bad philosophy on my part though.</text>
  </message>
  <message>
    <ts>2017-07-30T17:32:26.524101</ts>
    <user>U0CV48L87</user>
    <text>&lt;@U5JUDH2UE&gt; I'd say I _usually_ do the same, but I think this can be understood at a glance, which means to me that it's not going to affect readability negatively by requiring the reader to be familiar with what you've introduced.</text>
  </message>
  <message>
    <ts>2017-07-30T17:34:38.534137</ts>
    <user>U5JUDH2UE</user>
    <text>That's true, and it's arguably more readable than the alternative anyways. Thanks!</text>
  </message>
  <message>
    <ts>2017-07-30T17:35:27.537572</ts>
    <user>U0CV48L87</user>
    <text>Ah, small issue with what I posted above though…if the first `default-if` returns a `"even"` then it calls `neg?` on that and fails.</text>
  </message>
  <message>
    <ts>2017-07-30T17:36:38.543198</ts>
    <user>U0CV48L87</user>
    <text>So you'll need a macro if you actually want to stack them like that.

Anyway, have a good one. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-30T17:36:57.544679</ts>
    <user>U5JUDH2UE</user>
    <text>Thanks, you too. :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-30T17:44:26.578967</ts>
    <user>U0CV48L87</user>
    <text>Oh, and if you want to do something truly godawful, here's a way to do it with core:

```
(condp #(%1 %2) (+ 2 2)
  even? "even"
  neg? "negative"
  identity :&amp;gt;&amp;gt; identity)
```

:upside_down_face:</text>
  </message>
  <message>
    <ts>2017-07-30T18:09:34.695729</ts>
    <user>U0W0JDY4C</user>
    <text>holy canoli… my java/clojure interop knowledge has some gaping holes. how does one invoke a java api that uses anon inner classes? for example, selenium:
```
new ExpectedCondition&amp;lt;Boolean&amp;gt;() {
            public Boolean apply(WebDriver d) {
                return d.getTitle().toLowerCase().startsWith("cheese!");
            }
        }
```
1)  do you need to provide a return type for a class? provide some sort of complier hint? `ExpectedCondition&amp;lt;Type&amp;gt;`
2) I know from the clojure guide (and java spec) you can reference anon inner classes as Class$InnerClass, but that' doesn't really apply here. how does one construct an anon inner class and provide method implementations?
perhaps I just don't know enough of the right verbs/nouns in java-land to properly ask dr. google, but I wasn't able to find much</text>
  </message>
  <message>
    <ts>2017-07-30T18:13:57.715844</ts>
    <user>U0W0JDY4C</user>
    <text>In that above example the expectedcondition derives `apply` from `goog.common.base.Function`… i guess i'm not sure if that means i need to extend an existing base class (proxy) or not (reify)?</text>
  </message>
  <message>
    <ts>2017-07-30T18:14:08.717164</ts>
    <user>U1WL8TSPM</user>
    <text>perfect, thanks &lt;@U0CV48L87&gt;!</text>
  </message>
  <message>
    <ts>2017-07-30T19:15:17.007282</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0W0JDY4C&gt; &amp;lt;Foo&amp;gt; is a fiction, only the java compiler needs it, it doesn't exist in a true sense in the byte code.</text>
  </message>
  <message>
    <ts>2017-07-30T19:15:29.008412</ts>
    <user>U051SS2EU</user>
    <text>to make an anonymous class, use reify or proxy</text>
  </message>
  <message>
    <ts>2017-07-30T19:15:39.009252</ts>
    <user>U051SS2EU</user>
    <text>*instance of an anonymous class</text>
  </message>
  <message>
    <ts>2017-07-30T19:17:12.017228</ts>
    <user>U051SS2EU</user>
    <text>docs say it's an interface, which means you can use reify, you only need proxy to extend concrete classes</text>
  </message>
  <message>
    <ts>2017-07-30T19:17:13.017371</ts>
    <user>U051SS2EU</user>
    <text>&lt;https://google.github.io/guava/releases/20.0/api/docs/com/google/common/base/Function.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-30T20:14:24.341228</ts>
    <user>U1WL8TSPM</user>
    <text>&lt;@U0CV48L87&gt; - one more, do you know to handle rounding the numbers in transit-cljs? I don't seem to be able to supply a custom handler for "Number"</text>
  </message>
  <message>
    <ts>2017-07-30T21:24:37.850125</ts>
    <user>U0CV48L87</user>
    <text>&lt;@U1WL8TSPM&gt; I'm not certain but I believe `Number` is a superclass of a variety of types. I think you'll have to identify what the underlying class is and add a `WriteHandler` for that.</text>
  </message>
  <message>
    <ts>2017-07-30T22:13:57.285442</ts>
    <user>U1WL8TSPM</user>
    <text>&lt;@U0CV48L87&gt; just answering my own question - all numbers are just Numbers in js. have to specify {js/Number (NumberHandler.)}} to override and must use (tag [_ v] "i"), if you specify empty tag, it'll go to an infinite loop</text>
  </message>
  <message>
    <ts>2017-07-30T22:14:48.293199</ts>
    <user>U0CV48L87</user>
    <text>&lt;@U1WL8TSPM&gt; Oh, I didn't notice you'd said "cljs". But I'm glad to hear you got it worked out!</text>
  </message>
  <message>
    <ts>2017-07-31T06:26:36.384634</ts>
    <user>U66G3SGP5</user>
    <text>is there some way to use Spring with Clojure</text>
  </message>
  <message>
    <ts>2017-07-31T06:38:35.616710</ts>
    <user>U1C03090C</user>
    <text>&lt;@U66G3SGP5&gt; A quick google search found &lt;https://github.com/henrik42/spring-break&gt; and &lt;https://stevendick.github.io/blog/2013/08/13/write-a-spring-mvc-controller-in-clojure/&gt;. An easy wrapper doesn't seem to exist, but I'm not an expert.</text>
  </message>
  <message>
    <ts>2017-07-31T06:40:45.657156</ts>
    <user>U1C03090C</user>
    <text>I'm making a program that allows plugins to be added to it. I'm thinking of creating a launcher that runs the program with the plugins included in the classpath, does this seem reasonable? It seems like the absolute best way to do this would be to write a custom class loader, but I'm not sure I have the experience to write one well (as suggested by &lt;@U0NCTKEV8&gt;)</text>
  </message>
  <message>
    <ts>2017-07-31T06:42:17.685530</ts>
    <user>U6FNM3ATD</user>
    <text>hello everyone. I am looking around for a way to implement this: &lt;https://medium.com/react-native-training/deep-linking-your-react-native-app-d87c39a1ad5e&gt; in clojure with re-natal… has anyone tried this?</text>
  </message>
  <message>
    <ts>2017-07-31T08:15:52.423072</ts>
    <user>U051HUZLD</user>
    <text>&lt;@U6FNM3ATD&gt; try &lt;#C0E1SN0NM|cljsrn&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T08:26:22.647753</ts>
    <user>U6FNM3ATD</user>
    <text>10x</text>
  </message>
  <message>
    <ts>2017-07-31T08:51:50.244820</ts>
    <user>U1ACUMJKX</user>
    <text>Does anyone know of a wavefront or collada file loader for clojure? I basically want to load a geometry definition file as a clojure data structure. I might have to make my own library for that, but it doesn't hurt to ask.</text>
  </message>
  <message>
    <ts>2017-07-31T09:22:29.115440</ts>
    <user>U061V0GG2</user>
    <text>&lt;@U1ACUMJKX&gt; I've used assimp with C++, but readme mentions there being Java bindings also: &lt;https://github.com/assimp/assimp&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T10:45:54.135519</ts>
    <user>U066DCEM7</user>
    <text>No experience with assimp Java bindings. However, assimp seems to have the best support for loading different 3D models. If you want Open Source library that is.  At least that used to be the case about year ago.</text>
  </message>
  <message>
    <ts>2017-07-31T11:33:13.029672</ts>
    <user>U050ECB92</user>
    <text>anyone have a good method to use `tools.deps` to include the current working directory besides running it once then appending:
```
echo -n ":${PWD}/src" &amp;gt;&amp;gt; .cpcache/default/default.cp
```</text>
  </message>
  <message>
    <ts>2017-07-31T12:05:54.305872</ts>
    <user>U0B4ZBBKM</user>
    <text>Can I write this more concisely? `(let [x (group-by some-pred some-coll)    matches (x true)  non-matches (x false)] ...)`</text>
  </message>
  <message>
    <ts>2017-07-31T12:12:02.529737</ts>
    <user>U11BV7MTK</user>
    <text>first thought is to use map destructuring where you name the key and the var name it should destructure to</text>
  </message>
  <message>
    <ts>2017-07-31T12:12:05.531876</ts>
    <user>U060FKQPN</user>
    <text>`(let [{matches true non-matches false} (group-by ..)] ..)`</text>
  </message>
  <message>
    <ts>2017-07-31T12:12:46.557322</ts>
    <user>U0B4ZBBKM</user>
    <text>Ah, I had the map destructuring backwards. Thanks!</text>
  </message>
  <message>
    <ts>2017-07-31T12:20:33.840300</ts>
    <user>U3HKE2SLW</user>
    <text>I rarely see this destructuring syntax in the projects I work on. We always use `{:keys [key-a, key-b]}` (which I personally find much more readable)</text>
  </message>
  <message>
    <ts>2017-07-31T12:20:53.851677</ts>
    <user>U060FKQPN</user>
    <text>it is more readable but it's not equivalent in power</text>
  </message>
  <message>
    <ts>2017-07-31T12:21:09.861006</ts>
    <user>U0B4ZBBKM</user>
    <text>That wouldn't work with boolean keys `true` and `false` I think.</text>
  </message>
  <message>
    <ts>2017-07-31T12:21:52.886243</ts>
    <user>U3HKE2SLW</user>
    <text>yeah, it likely wouldn't. I'm just mentioning this for the generic case. Imo this line above is already too hard to grasp when skimming through code.</text>
  </message>
  <message>
    <ts>2017-07-31T12:22:19.902638</ts>
    <user>U050MP39D</user>
    <text>yeah it wouldn't, :keys syntax only works with keyword keys. {binding key} lets you use any type of key</text>
  </message>
  <message>
    <ts>2017-07-31T12:22:49.919636</ts>
    <user>U3HKE2SLW</user>
    <text>Note that there's also :syms and :strs. Still wouldn't work in this case, though</text>
  </message>
  <message>
    <ts>2017-07-31T12:23:06.929443</ts>
    <user>U050MP39D</user>
    <text>I agree that it would be a bit crazy to use {binding key} over {:keys} if you have a map with keywords, it's just less readable. but sometimes (at boundaries) you don't</text>
  </message>
  <message>
    <ts>2017-07-31T12:23:30.942920</ts>
    <user>U060FKQPN</user>
    <text>it's not that crazy if you want to rename keys</text>
  </message>
  <message>
    <ts>2017-07-31T12:23:46.953231</ts>
    <user>U060FKQPN</user>
    <text>`{foo-name :name}` to avoid shadowing `name`, for example</text>
  </message>
  <message>
    <ts>2017-07-31T12:23:49.954865</ts>
    <user>U050MP39D</user>
    <text>I've literally never seen :syms or :strs used in the wild and I would have to look it up :slightly_smiling_face: probably still better</text>
  </message>
  <message>
    <ts>2017-07-31T12:46:44.756368</ts>
    <user>U5JUDH2UE</user>
    <text>Is there a better way to do `(filter identity coll)`? I'm needing to do it to interpose `" "` between args before `(apply str ...)`.</text>
  </message>
  <message>
    <ts>2017-07-31T12:47:29.783047</ts>
    <user>U5JUDH2UE</user>
    <text>Current:
```
(defn class [&amp;amp; classes]
  (apply str (interpose " " (filter identity classes))))
```</text>
  </message>
  <message>
    <ts>2017-07-31T12:50:58.907362</ts>
    <user>U050MP39D</user>
    <text>imo (remove nil? classes) is more readable</text>
  </message>
  <message>
    <ts>2017-07-31T12:51:44.934532</ts>
    <user>U5JUDH2UE</user>
    <text>Yeah, I'd thought about that. I don't see any reason false would be passed into this, but I'd like to support it if it is.</text>
  </message>
  <message>
    <ts>2017-07-31T12:52:29.961462</ts>
    <user>U050MP39D</user>
    <text>then (filter some? classes) is slightly more readable than identity</text>
  </message>
  <message>
    <ts>2017-07-31T12:52:46.971544</ts>
    <user>U050MP39D</user>
    <text>oh wait that doesn'tsupport false either</text>
  </message>
  <message>
    <ts>2017-07-31T12:52:48.972432</ts>
    <user>U050MP39D</user>
    <text>ignore me</text>
  </message>
  <message>
    <ts>2017-07-31T12:52:59.979231</ts>
    <user>U5JUDH2UE</user>
    <text>That's alright :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T12:53:14.987788</ts>
    <user>U61HA86AG</user>
    <text>`(filter boolean classes)`?</text>
  </message>
  <message>
    <ts>2017-07-31T12:54:06.018696</ts>
    <user>U5JUDH2UE</user>
    <text>That's good :thumbsup: &lt;@U61HA86AG&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T12:55:49.080341</ts>
    <user>U050MP39D</user>
    <text>ruby has a function, `compact` that does this. but honestly that name is really a bit opaque</text>
  </message>
  <message>
    <ts>2017-07-31T13:00:18.242185</ts>
    <user>U051SS2EU</user>
    <text>filter identity is the normal way to do this</text>
  </message>
  <message>
    <ts>2017-07-31T13:02:26.321764</ts>
    <user>U0K064KQV</user>
    <text>Question: Is there a way I can have a polymorphic dispatch where the dispatch function is itself open for extension? Some kind of open cond like construct?</text>
  </message>
  <message>
    <ts>2017-07-31T13:02:52.337138</ts>
    <user>U07S8JGF7</user>
    <text>multimethods?</text>
  </message>
  <message>
    <ts>2017-07-31T13:02:57.340025</ts>
    <user>U07S8JGF7</user>
    <text>oh no</text>
  </message>
  <message>
    <ts>2017-07-31T13:03:00.341671</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U0K064KQV&gt; there's no rule that says ~a dog can't play basketball~ your multimethod dispatch can't be a multimethod</text>
  </message>
  <message>
    <ts>2017-07-31T13:03:05.344648</ts>
    <user>U07S8JGF7</user>
    <text>:disappear:</text>
  </message>
  <message>
    <ts>2017-07-31T13:03:28.358854</ts>
    <user>U07S8JGF7</user>
    <text>oh snap!</text>
  </message>
  <message>
    <ts>2017-07-31T13:03:41.366335</ts>
    <user>U07S8JGF7</user>
    <text>nice one &lt;@U051SS2EU&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T13:04:07.381743</ts>
    <user>U04V70XH6</user>
    <text>&lt;@U050MP39D&gt; `(some? false)` =&amp;gt; `true` so you could `(filter some? classes)` right?</text>
  </message>
  <message>
    <ts>2017-07-31T13:04:41.402108</ts>
    <user>U0K064KQV</user>
    <text>Hum, can it, I'll try it out.</text>
  </message>
  <message>
    <ts>2017-07-31T13:04:54.409955</ts>
    <user>U04V70XH6</user>
    <text>Or am I misunderstanding what &lt;@U5JUDH2UE&gt; is trying to do?</text>
  </message>
  <message>
    <ts>2017-07-31T13:05:16.422674</ts>
    <user>U04V70XH6</user>
    <text>(what does "support false" mean?)</text>
  </message>
  <message>
    <ts>2017-07-31T13:05:45.439502</ts>
    <user>U056QFNM5</user>
    <text>&lt;@U5JUDH2UE&gt; - If `coll` is returned by `map` you might be able to use `keep` instead of `map`. Can't quite remember how `keep` handles false vs. nils though so that'd be worth confirming.</text>
  </message>
  <message>
    <ts>2017-07-31T13:06:16.457557</ts>
    <user>U051SS2EU</user>
    <text>```=&amp;gt; (keep identity [false nil 1])
(false 1)```</text>
  </message>
  <message>
    <ts>2017-07-31T13:06:25.462874</ts>
    <user>U050MP39D</user>
    <text>&lt;@U04V70XH6&gt; I took it to mean they wanted to filter out both nil and false (which (filter identity ...) does)</text>
  </message>
  <message>
    <ts>2017-07-31T13:06:30.465584</ts>
    <user>U5JUDH2UE</user>
    <text>&lt;@U04V70XH6&gt; Support false meaning it would filter false and nil out. Just like identity does.
So `some?` should work.</text>
  </message>
  <message>
    <ts>2017-07-31T13:06:43.473060</ts>
    <user>U051SS2EU</user>
    <text>no, some? passes false through</text>
  </message>
  <message>
    <ts>2017-07-31T13:06:56.480751</ts>
    <user>U051SS2EU</user>
    <text>just use identity if that's the semantics you want</text>
  </message>
  <message>
    <ts>2017-07-31T13:07:36.503426</ts>
    <user>U04V70XH6</user>
    <text>Right, use `some?` if you only want to filter `nil` but keep `false`.</text>
  </message>
  <message>
    <ts>2017-07-31T13:08:01.517642</ts>
    <user>U04V70XH6</user>
    <text>"support false" sounded like you wanted to allow it through and `identity` wasn't doing that for you...</text>
  </message>
  <message>
    <ts>2017-07-31T13:08:06.520804</ts>
    <user>U5JUDH2UE</user>
    <text>I hadn't heard of `keep` before, but as &lt;@U051SS2EU&gt; pointed out, it doesn't handle false as intended.
`(filter identity coll)` works perfectly fine. :thumbsup:</text>
  </message>
  <message>
    <ts>2017-07-31T13:08:09.522710</ts>
    <user>U04V70XH6</user>
    <text>Words. What do words mean? :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-07-31T13:08:33.536451</ts>
    <user>U5JUDH2UE</user>
    <text>&lt;@U04V70XH6&gt; Not what I indend them to mean normally. :wink:</text>
  </message>
  <message>
    <ts>2017-07-31T13:08:53.547876</ts>
    <user>U051SS2EU</user>
    <text>`(defmulti DWIM identity)`</text>
  </message>
  <message>
    <ts>2017-07-31T13:12:05.659671</ts>
    <user>U053XQP4S</user>
    <text>is there a convenient way to disable implicit binding conveyance ?</text>
  </message>
  <message>
    <ts>2017-07-31T13:16:13.803007</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U053XQP4S&gt; In jvm clojure the simplest thing is to start a thread via interop instead of using one of clojure's utility functions for creating threads `(.start (Thread. (fn [] (println "hello"))))`</text>
  </message>
  <message>
    <ts>2017-07-31T13:16:48.823243</ts>
    <user>U051SS2EU</user>
    <text>any zero arg clojure function is a valid argument to the thread constructor, and will be the thing the thread does when started</text>
  </message>
  <message>
    <ts>2017-07-31T13:17:13.837530</ts>
    <user>U051SS2EU</user>
    <text>this method of running a function only sees global bindings, and won't convey any local dynamic bindings</text>
  </message>
  <message>
    <ts>2017-07-31T13:18:51.894404</ts>
    <user>U053XQP4S</user>
    <text>ok so I guess it is somehow against the language to try to use dynamic vars as thread locals ?</text>
  </message>
  <message>
    <ts>2017-07-31T13:19:50.928786</ts>
    <user>U051SS2EU</user>
    <text>well - they are thread local, they just get conveyed to other threads if you use things like future or send-off</text>
  </message>
  <message>
    <ts>2017-07-31T13:19:55.931693</ts>
    <user>U051SS2EU</user>
    <text>or core.async stuff</text>
  </message>
  <message>
    <ts>2017-07-31T13:20:39.957924</ts>
    <user>U051SS2EU</user>
    <text>I thought what you were asking for was how to avoid the inheritance of those thread local bindings</text>
  </message>
  <message>
    <ts>2017-07-31T13:20:50.964167</ts>
    <user>U051SS2EU</user>
    <text>(or to create a new context without them at least)</text>
  </message>
  <message>
    <ts>2017-07-31T13:24:12.083921</ts>
    <user>U053XQP4S</user>
    <text>what I'm trying to achieve is a mechanism for detecting if a function call has been made out of a synchronous context</text>
  </message>
  <message>
    <ts>2017-07-31T13:24:31.095285</ts>
    <user>U051SS2EU</user>
    <text>what is a "synchronous context" - synchronous with what?</text>
  </message>
  <message>
    <ts>2017-07-31T13:26:00.147618</ts>
    <user>U051SS2EU</user>
    <text>that is, I can easily start code inside core.async go that is synchronous within itself but async with the caller - and it's easy to end up with an app where almost everything is "async" if you go far enough up the call stack, but in practice nearly all of the logic is sync</text>
  </message>
  <message>
    <ts>2017-07-31T13:30:08.295304</ts>
    <user>U053XQP4S</user>
    <text>it's hard to find a minimal example, but basically I create event queues, I have functions that must be "bound" to a single event queue, so I need a way to test if I'm currently running this queue, if so it's ok to run synchronously, else you have to post an event</text>
  </message>
  <message>
    <ts>2017-07-31T13:32:38.386309</ts>
    <user>U053XQP4S</user>
    <text>a threadlocal is a good way to achieve this, but if I use dynamic vars, the event queue context will be conveyed</text>
  </message>
  <message>
    <ts>2017-07-31T13:32:56.397459</ts>
    <user>U051SS2EU</user>
    <text>sounds like instead of avoiding binding conveyance, you could just rely on it, and set a dynamic var `*in-queue*` to true and get the right behavior?</text>
  </message>
  <message>
    <ts>2017-07-31T13:33:51.430365</ts>
    <user>U051SS2EU</user>
    <text>oh, so children of the queue shouldn't inherit that context, only the queue worker itself should have it?</text>
  </message>
  <message>
    <ts>2017-07-31T13:34:49.464833</ts>
    <user>U053XQP4S</user>
    <text>yes, if I use `future` while I'm the queue, I don't want the thread running the future to believe that it's still in the queue</text>
  </message>
  <message>
    <ts>2017-07-31T13:34:51.465717</ts>
    <user>U051SS2EU</user>
    <text>you could create a global set at the ns level with the queue Thread instances in it, and check if `(Thread/currentThread)` returns something in that set</text>
  </message>
  <message>
    <ts>2017-07-31T13:35:07.475182</ts>
    <user>U051SS2EU</user>
    <text>that's cheap and the logic is simple</text>
  </message>
  <message>
    <ts>2017-07-31T13:35:41.495227</ts>
    <user>U0BKWMG5B</user>
    <text>Does anyone have an invite to Screenhero they could throw my way?</text>
  </message>
  <message>
    <ts>2017-07-31T13:35:59.506110</ts>
    <user>U053XQP4S</user>
    <text>it's similar to using a threadlocal, isn't it ?</text>
  </message>
  <message>
    <ts>2017-07-31T13:36:11.512430</ts>
    <user>U050ECB92</user>
    <text>slack has now integrated screensharing into slack directly</text>
  </message>
  <message>
    <ts>2017-07-31T13:36:30.523694</ts>
    <user>U050ECB92</user>
    <text>in the `/call` stuff ...</text>
  </message>
  <message>
    <ts>2017-07-31T13:36:37.527706</ts>
    <user>U051SS2EU</user>
    <text>(pardon, misread)</text>
  </message>
  <message>
    <ts>2017-07-31T13:36:50.535008</ts>
    <user>U0BKWMG5B</user>
    <text>Huh, I'll try it out.</text>
  </message>
  <message>
    <ts>2017-07-31T13:36:52.536332</ts>
    <user>U0BKWMG5B</user>
    <text>Thanks</text>
  </message>
  <message>
    <ts>2017-07-31T13:37:15.549009</ts>
    <user>U051SS2EU</user>
    <text>kind of - but the emphasis is different - instead of setting a threadLocal in each thread, you add each thread to a container that keeps track of them</text>
  </message>
  <message>
    <ts>2017-07-31T13:37:31.558061</ts>
    <user>U051SS2EU</user>
    <text>one is global, explicit, and visible, the other is hidden and implicit</text>
  </message>
  <message>
    <ts>2017-07-31T13:37:56.572976</ts>
    <user>U0BKWMG5B</user>
    <text>Hm, looks like it's paid teams only. Not useful in this case.</text>
  </message>
  <message>
    <ts>2017-07-31T13:42:03.715669</ts>
    <user>U053XQP4S</user>
    <text>&lt;@U051SS2EU&gt; ok I will think about that - thanks anyway, but I'm still a bit confused about the dynamic var philosophy</text>
  </message>
  <message>
    <ts>2017-07-31T13:42:48.741853</ts>
    <user>U051SS2EU</user>
    <text>it's meant for things that would be visible to this thread and all the ones it creates</text>
  </message>
  <message>
    <ts>2017-07-31T13:43:22.762269</ts>
    <user>U051SS2EU</user>
    <text>eg. think about how `with-out-str` works - it overrides the destination for printing for the caller and all child threads</text>
  </message>
  <message>
    <ts>2017-07-31T13:46:51.888440</ts>
    <user>U053XQP4S</user>
    <text>the implicit aspect looks a bit dangerous to me, and the only benefit I see is to save a few characters when you write your functions</text>
  </message>
  <message>
    <ts>2017-07-31T13:48:14.939458</ts>
    <user>U0K064KQV</user>
    <text>Question: How would I extend a protocol to all array types? I seem to only be able to do it for a specific array, like say "[Ljava.lang.Object". But I want "[L?"</text>
  </message>
  <message>
    <ts>2017-07-31T13:51:16.048486</ts>
    <user>U0NCTKEV8</user>
    <text>there is no such thing</text>
  </message>
  <message>
    <ts>2017-07-31T13:52:53.107629</ts>
    <user>U0K064KQV</user>
    <text>:disappointed: Its strange that "[Ljava.lang.Object" doesn't even work for subtypes of Object. It only works if I have actual array of Objects</text>
  </message>
  <message>
    <ts>2017-07-31T13:53:57.146901</ts>
    <user>U0NCTKEV8</user>
    <text>that is how array types work on the jvm</text>
  </message>
  <message>
    <ts>2017-07-31T13:54:37.170895</ts>
    <user>U0NCTKEV8</user>
    <text>array types don't have that kind of type relation</text>
  </message>
  <message>
    <ts>2017-07-31T13:55:43.210982</ts>
    <user>U0NCTKEV8</user>
    <text>if A is an array of X and B is an array of Y, and Y is a subtype of X, B is not a subtype of A</text>
  </message>
  <message>
    <ts>2017-07-31T13:57:36.279348</ts>
    <user>U0K064KQV</user>
    <text>I'm not convinced, since instanceof can tell the relation</text>
  </message>
  <message>
    <ts>2017-07-31T13:59:08.335246</ts>
    <user>U060FKQPN</user>
    <text>&lt;@U0NCTKEV8&gt; java array are covariant, it's generics that aren't</text>
  </message>
  <message>
    <ts>2017-07-31T13:59:34.351653</ts>
    <user>U0NCTKEV8</user>
    <text>Oh</text>
  </message>
  <message>
    <ts>2017-07-31T14:01:15.415064</ts>
    <user>U050MP39D</user>
    <text>yeah I might be missing something but I get no compile error
```
11326-storage:tmp bfabry$ cat &amp;gt; Foo.java
public class Foo {
  public Object[] fooey;
  public Foo() {
    fooey = new String[10];
  }
}
11326-storage:tmp bfabry$ javac Foo.java
11326-storage:tmp bfabry$
```</text>
  </message>
  <message>
    <ts>2017-07-31T14:06:25.600825</ts>
    <user>U0K064KQV</user>
    <text>=&amp;gt; IllegalArgumentException No implementation of method: :t of protocol: #'special.eagerize-test/Table found for class: [Ljava.lang.String;</text>
  </message>
  <message>
    <ts>2017-07-31T14:15:46.927428</ts>
    <user>U0K064KQV</user>
    <text>My solution was to extend java.lang.Object, and do: (when (instance? (Class/forName "[Ljava.lang.Object;") &amp;lt;implementation-for-arrays&amp;gt;)</text>
  </message>
  <message>
    <ts>2017-07-31T14:16:09.940790</ts>
    <user>U0K064KQV</user>
    <text>(when (instance? (Class/forName "[Ljava.lang.Object;") this) &amp;lt;implementation-for-arrays&amp;gt;)</text>
  </message>
  <message>
    <ts>2017-07-31T14:20:07.078843</ts>
    <user>U0K064KQV</user>
    <text>Question: What is in clojurescript the type I need to extend to cover all types? Equivalent to java.lang.Object say?</text>
  </message>
  <message>
    <ts>2017-07-31T14:24:08.220403</ts>
    <user>U0K064KQV</user>
    <text>Ok, clojurescript has default for that, awesome. I actually wished Clojure had that too.</text>
  </message>
  <message>
    <ts>2017-07-31T14:59:07.472166</ts>
    <user>U0K064KQV</user>
    <text>I opened an issue into it: &lt;https://dev.clojure.org/jira/browse/CLJ-2215&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T17:00:52.492606</ts>
    <user>U3QUAHZJ6</user>
    <text>hello everyone, how im supposed to create a spec where all keys are optional but at least one of the specified keys should be present?

```
(s/def ::my-spec (s/and (help-plz??)(s/keys :opt-un [::a ::b])))
(s/valid? ::my-spec {} =&amp;gt; false
(s/valid? ::my-spec {:a 1}) =&amp;gt; true
(s/valid? ::my-spec {:b 1}) =&amp;gt; true
(s/valid? ::my-spec {:a 1 :b 1}) =&amp;gt; true
(s/valid? ::my-spec {:A1 :B 1}) =&amp;gt; true
```</text>
  </message>
  <message>
    <ts>2017-07-31T17:08:26.730630</ts>
    <user>U050MP39D</user>
    <text>&lt;@U3QUAHZJ6&gt; (some-fn :a :b) not good enough?</text>
  </message>
  <message>
    <ts>2017-07-31T17:10:03.778482</ts>
    <user>U3QUAHZJ6</user>
    <text>some-fn is actually a function? i presumed i was supposed to fill in the gaps &amp;gt;.&amp;lt; feel so dumb right now</text>
  </message>
  <message>
    <ts>2017-07-31T17:10:51.802015</ts>
    <user>U050MP39D</user>
    <text>oh I'm sorry yeah I could see how you'd read it that way. but no, some-fn is a higher order function that takes a list of predicate functions and returns a single predicate function that is the logical or of all of them</text>
  </message>
  <message>
    <ts>2017-07-31T17:12:00.835611</ts>
    <user>U3QUAHZJ6</user>
    <text>makes sense now!</text>
  </message>
  <message>
    <ts>2017-07-31T17:12:44.856982</ts>
    <user>U050MP39D</user>
    <text>you could also do `#(some % [:a :b])`</text>
  </message>
  <message>
    <ts>2017-07-31T17:13:23.875316</ts>
    <user>U050MP39D</user>
    <text>^ relies on maps acting as functions</text>
  </message>
  <message>
    <ts>2017-07-31T17:13:24.875507</ts>
    <user>U050SC7SV</user>
    <text>You can use :req-un [(or ::foo ::bar)]</text>
  </message>
  <message>
    <ts>2017-07-31T17:13:43.884809</ts>
    <user>U050MP39D</user>
    <text>I totally forgot about that syntax</text>
  </message>
  <message>
    <ts>2017-07-31T17:14:24.904734</ts>
    <user>U050SC7SV</user>
    <text>It's one thing I love in spec</text>
  </message>
  <message>
    <ts>2017-07-31T17:44:30.729876</ts>
    <user>U08QZ7Y5S</user>
    <text>Say, is there a form of `(cond)` that will bind the result value of the predicate expressions? Like
```
(cond
  (my-pred x)
  (do-something (my-pred x)))
```
Where `(my-pred x)` returns either `nil` or a value I want to use?</text>
  </message>
  <message>
    <ts>2017-07-31T17:45:53.766200</ts>
    <user>U08QZ7Y5S</user>
    <text>...but I'd like something like:
```
(cond-let
  ([res (my-pred x)]
   (do-something res)))
```</text>
  </message>
  <message>
    <ts>2017-07-31T17:46:11.773580</ts>
    <user>U11BV7MTK</user>
    <text>&lt;https://github.com/clojure-emacs/cljs-tooling/blob/master/src/cljs_tooling/util/misc.clj#L7&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T17:46:32.782289</ts>
    <user>U11BV7MTK</user>
    <text>it's a `cond-let` macro</text>
  </message>
  <message>
    <ts>2017-07-31T17:47:23.804195</ts>
    <user>U08QZ7Y5S</user>
    <text>Thanks &lt;@U11BV7MTK&gt;, I'll check that out. Nothing built-in I'm missing then, I take it?</text>
  </message>
  <message>
    <ts>2017-07-31T17:48:51.840674</ts>
    <user>U11BV7MTK</user>
    <text>not as far as i know</text>
  </message>
  <message>
    <ts>2017-07-31T17:49:34.859114</ts>
    <user>U08QZ7Y5S</user>
    <text>Cool, thanks. Looks like that macro exists verbatim in a lot of libraries... &lt;https://crossclj.info/clojure/cond-let.html&gt;</text>
  </message>
  <message>
    <ts>2017-07-31T17:50:29.882678</ts>
    <user>U11BV7MTK</user>
    <text>the exact same? I guess its just one of those clojure archetypes</text>
  </message>
  <message>
    <ts>2017-07-31T18:00:03.125648</ts>
    <user>U0QNQ3P3L</user>
    <text>I am curious as to where people are storing simple jdbc queries? I have a set of ~8 or so queries, all plain queries without any parameters. Do you use a "config" type file?</text>
  </message>
  <message>
    <ts>2017-07-31T18:59:46.336378</ts>
    <user>U065JNAN8</user>
    <text>Stick 'em in the resources directory of your project then you can retrieve them by slurping the return value of `(&lt;http://clojure.java.io/resource|clojure.java.io/resource&gt; "foo.sql")`</text>
  </message>
  <message>
    <ts>2017-07-31T19:01:39.372337</ts>
    <user>U0QNQ3P3L</user>
    <text>&lt;@U065JNAN8&gt; - yes, certainly in the resources directory. I was just wondering if there was a preferred file format but a .sql file makes the intent of the file very apparent, which is good.</text>
  </message>
  <message>
    <ts>2017-07-31T19:01:44.374011</ts>
    <user>U0QNQ3P3L</user>
    <text>Thanks!</text>
  </message>
  <message>
    <ts>2017-07-31T21:11:19.263545</ts>
    <user>U1ACUMJKX</user>
    <text>hey I was thinking about a way to minimize the memory requirements of a nested clojure data structure where some substructures are identical, and I came up with this: ```(partial clojure.walk/postwalk (memoize identity))``` but I haven't really given it much thought. How would you do something like this?</text>
  </message>
  <message>
    <ts>2017-07-31T21:12:36.280046</ts>
    <user>U051SS2EU</user>
    <text>&lt;@U1ACUMJKX&gt; if you just use the same object as an arg to assoc, it won't be duplicated</text>
  </message>
  <message>
    <ts>2017-07-31T21:13:02.285252</ts>
    <user>U051SS2EU</user>
    <text>depending on how the data was created, of course</text>
  </message>
  <message>
    <ts>2017-07-31T21:13:13.287560</ts>
    <user>U1ACUMJKX</user>
    <text>my use case involves taking an .edn file from disk that is probably too self similar and large to fit in memory</text>
  </message>
  <message>
    <ts>2017-07-31T21:13:25.290071</ts>
    <user>U051SS2EU</user>
    <text>oh, yeah, fun</text>
  </message>
  <message>
    <ts>2017-07-31T21:14:29.303295</ts>
    <user>U051SS2EU</user>
    <text>it would be interesting to try the postwalk identity and then compare the object pointers via jdb maybe(?)</text>
  </message>
  <message>
    <ts>2017-07-31T21:14:52.307974</ts>
    <user>U1ACUMJKX</user>
    <text>yeah i haven't tested it i was just wondering if anyone else had ideas</text>
  </message>
  <message>
    <ts>2017-07-31T22:28:37.219495</ts>
    <user>U65U08BB4</user>
    <text>what's "fn*"? I cannot find the document of it~</text>
  </message>
  <message>
    <ts>2017-07-31T22:29:06.225035</ts>
    <user>U051SS2EU</user>
    <text>it's an implementation detail of fn</text>
  </message>
  <message>
    <ts>2017-07-31T22:29:23.228462</ts>
    <user>U051SS2EU</user>
    <text>fn is implemented as a macro, and uses the destructuring functions that clojure.core defines for macros</text>
  </message>
  <message>
    <ts>2017-07-31T22:29:28.229320</ts>
    <user>U65U08BB4</user>
    <text>so means: I don't have to care about it?</text>
  </message>
  <message>
    <ts>2017-07-31T22:29:30.229709</ts>
    <user>U051SS2EU</user>
    <text>fn* is implemented in java code</text>
  </message>
  <message>
    <ts>2017-07-31T22:29:45.232687</ts>
    <user>U051SS2EU</user>
    <text>right, remembering that it's an fn that can't destructure is probably enough</text>
  </message>
  <message>
    <ts>2017-07-31T22:31:35.254978</ts>
    <user>U65U08BB4</user>
    <text>could you please give an example? of the difference?</text>
  </message>
  <message>
    <ts>2017-07-31T22:32:27.264794</ts>
    <user>U051SS2EU</user>
    <text>```+user=&amp;gt; ((fn [[a]] a) [1])
1
+user=&amp;gt; ((fn* [[a]] a) [1])
CompilerException java.lang.IllegalArgumentException: fn params must be Symbols, compiling:(NO_SOURCE_PATH:2:2)```</text>
  </message>
  <message>
    <ts>2017-07-31T22:33:02.271732</ts>
    <user>U051SS2EU</user>
    <text>[a] as a parameter is a destructure that says "bind the first element of this sequencable input to the name a"</text>
  </message>
  <message>
    <ts>2017-07-31T22:33:08.272939</ts>
    <user>U051SS2EU</user>
    <text>fn* doesn't understand that syntax</text>
  </message>
  <message>
    <ts>2017-07-31T22:35:06.296805</ts>
    <user>U65U08BB4</user>
    <text>so the difference is only about the destructuring of the parameters? fn supports it, while fn* doesn't?</text>
  </message>
  <message>
    <ts>2017-07-31T22:35:24.300357</ts>
    <user>U051SS2EU</user>
    <text>that's the main one, I forget if it's the only one</text>
  </message>
  <message>
    <ts>2017-07-31T22:35:50.305326</ts>
    <user>U65U08BB4</user>
    <text>hmm~ in lazy-seq macro:</text>
  </message>
  <message>
    <ts>2017-07-31T22:35:57.306686</ts>
    <user>U65U08BB4</user>
    <text>boot.user=&amp;gt; (source lazy-seq)
(defmacro lazy-seq
  "Takes a body of expressions that returns an ISeq or nil, and yields
  a Seqable object that will invoke the body only the first time seq
  is called, and will cache the result and return it on all subsequent
  seq calls. See also - realized?"
  {:added "1.0"}
  [&amp;amp; body]
  (list 'new 'clojure.lang.LazySeq (list* '^{:once true} fn* [] body)))</text>
  </message>
  <message>
    <ts>2017-07-31T22:36:05.308236</ts>
    <user>U65U08BB4</user>
    <text>```boot.user=&amp;gt; (source lazy-seq)
(defmacro lazy-seq
  "Takes a body of expressions that returns an ISeq or nil, and yields
  a Seqable object that will invoke the body only the first time seq
  is called, and will cache the result and return it on all subsequent
  seq calls. See also - realized?"
  {:added "1.0"}
  [&amp;amp; body]
  (list 'new 'clojure.lang.LazySeq (list* '^{:once true} fn* [] body)))```</text>
  </message>
  <message>
    <ts>2017-07-31T22:36:30.313087</ts>
    <user>U65U08BB4</user>
    <text>why is fn* preferred here~? is it some performance concern, as fn* is the basic one?</text>
  </message>
  <message>
    <ts>2017-07-31T22:36:30.313112</ts>
    <user>U051SS2EU</user>
    <text>right, destructuring is defined in terms of lazy-seq</text>
  </message>
  <message>
    <ts>2017-07-31T22:36:37.314512</ts>
    <user>U051SS2EU</user>
    <text>so lazy-seq can't use fn, which destructures</text>
  </message>
  <message>
    <ts>2017-07-31T22:37:10.320887</ts>
    <user>U051SS2EU</user>
    <text>source of fn shows you how it builds the form for fn*  - it does many things, some of which are lazy seq generating</text>
  </message>
  <message>
    <ts>2017-07-31T22:38:34.337102</ts>
    <user>U65U08BB4</user>
    <text>I will try to read the source of fn~ I probably digged too deep of the dark magics, as I just started learning Clojure~</text>
  </message>
  <message>
    <ts>2017-07-31T22:38:54.340944</ts>
    <user>U051SS2EU</user>
    <text>another difference, discovered by reading the source of fn, is that fn* can't do preconditions - or at least not reasonably ```+user=&amp;gt; ((fn [a] {:pre [(number? a)]} a) :a)
AssertionError Assert failed: (number? a)  user/eval36/fn--37 (NO_SOURCE_FILE:7)
+user=&amp;gt; ((fn* [a] {:pre [(number? a)]} a) :a)
:a
```</text>
  </message>
  <message>
    <ts>2017-07-31T22:38:55.341207</ts>
    <user>U65U08BB4</user>
    <text>thanks for the explanation, I probably need some more time to digest it~</text>
  </message>
  <message>
    <ts>2017-07-31T22:39:33.348451</ts>
    <user>U051SS2EU</user>
    <text>yeah- all you need to remember is fn is fancier, does some things fn* can't, but code that exists before fn is defined (code that fn uses for example...) has to use fn*</text>
  </message>
  <message>
    <ts>2017-07-31T22:42:38.383947</ts>
    <user>U65U08BB4</user>
    <text>got it~ thx~!</text>
  </message>
  <message>
    <ts>2017-08-01T00:35:04.572118</ts>
    <user>U06B8J0AJ</user>
    <text>So I'm parsing XML. That's enough for wanting to shoot myself in the face, but on top of it I need to check that it conforms to a certain shape, because the source(s) can be unreliable.</text>
  </message>
  <message>
    <ts>2017-08-01T00:35:40.578163</ts>
    <user>U06B8J0AJ</user>
    <text>I'm using `clojure.xml/parse` for this.</text>
  </message>
  <message>
    <ts>2017-08-01T00:37:10.592784</ts>
    <user>U06B8J0AJ</user>
    <text>Now, spec seems like the right tool for conforming. However, I've also heard tales of spec being able to destructure as well.</text>
  </message>
  <message>
    <ts>2017-08-01T00:38:17.603964</ts>
    <user>U06B8J0AJ</user>
    <text>Where can I read about how the destructuring works, specifically? If I can avoid hand-disassembling the stain upon humanity that is the output of `parse`, I'd be delighted.</text>
  </message>
  <message>
    <ts>2017-08-01T01:10:56.929753</ts>
    <user>U050487DQ</user>
    <text>&lt;@U0BKWMG5B&gt; invite sent</text>
  </message>
  <message>
    <ts>2017-08-01T01:15:20.973609</ts>
    <user>U06B8J0AJ</user>
    <text>I just discovered zippers</text>
  </message>
  <message>
    <ts>2017-08-01T01:19:26.014927</ts>
    <user>U5MMY8M7X</user>
    <text>Anyone used clojure transducers for unfolds (anamorphisms)? All talk I've seen is on folds (reducers / catamorphisms).</text>
  </message>
  <message>
    <ts>2017-08-01T02:00:31.457127</ts>
    <user>U1C03090C</user>
    <text>So I'm working on getting a plugin system working in clojure. Based on the loading system on &lt;@U050CBXUZ&gt;' (&lt;https://yogthos.net/posts/2015-01-15-A-Plugin-System-in-Clojure.html&gt;). I can get the file on the classpath, but when I try and run the function defined by the .edn file packaged with the plugin, it gives me the error: `Could not locate 'oss_world_example/core__init.class or 'oss_world_example/core.clj on classpath.`</text>
  </message>
  <message>
    <ts>2017-08-01T02:01:41.472068</ts>
    <user>U1C03090C</user>
    <text>I checked in the jar and `oss_world_example/core__init.class` is definetely there (you can download the example jar I'm using here: &lt;https://filebin.ca/3VLfGd71KesW/project.jar&gt;). What gives? How is it finding the .edn file but not the classes?</text>
  </message>
  <message>
    <ts>2017-08-01T02:19:45.700244</ts>
    <user>U050MP39D</user>
    <text>&lt;@U1C03090C&gt; what does the code in those files look like?</text>
  </message>
  <message>
    <ts>2017-08-01T02:22:08.730325</ts>
    <user>U1C03090C</user>
    <text>&lt;@U050MP39D&gt; `oss-world-example.core` looks like this:</text>
  </message>
  <message>
    <ts>2017-08-01T02:23:49.752625</ts>
    <user>U1B0DFD25</user>
    <text>&lt;@U1C03090C&gt; You might have an extra quote character somewhere?</text>
  </message>
  <message>
    <ts>2017-08-01T02:24:32.762168</ts>
    <user>U050MP39D</user>
    <text>fwiw, I can load that ns from that jar fine
```
11326-storage:look bfabry$ java -cp ~/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:project.jar clojure.main
Clojure 1.8.0
user=&amp;gt; (&lt;http://clojure.java.io/resource|clojure.java.io/resource&gt; "oss_world_example/core__init.class")
#object[java.net.URL 0x2ca26d77 "jar:file:/private/tmp/look/project.jar!/oss_world_example/core__init.class"]
user=&amp;gt; (require '[oss-world-example.core])
nil
user=&amp;gt; oss-world-example.core/entry
#object[oss_world_example.core$entry 0x24c22fe "oss_world_example.core$entry@24c22fe"]
user=&amp;gt;
```</text>
  </message>
  <message>
    <ts>2017-08-01T02:25:04.769182</ts>
    <user>U050MP39D</user>
    <text>```
user=&amp;gt; (oss-world-example.core/entry)
Entered the example plugin.
nil
```</text>
  </message>
  <message>
    <ts>2017-08-01T02:25:20.772940</ts>
    <user>U1B0DFD25</user>
    <text>Perhaps in the edn file.</text>
  </message>
  <message>
    <ts>2017-08-01T02:25:22.773428</ts>
    <user>U050MP39D</user>
    <text>so my bet is you don't actually have the jar on the cp</text>
  </message>
  <message>
    <ts>2017-08-01T02:26:15.785204</ts>
    <user>U050MP39D</user>
    <text>the edn file is using underscores for the namespace, which is incorrect</text>
  </message>
  <message>
    <ts>2017-08-01T02:26:27.787928</ts>
    <user>U050MP39D</user>
    <text>I'd have to see your loader code to know whether you compensate for that</text>
  </message>
  <message>
    <ts>2017-08-01T02:27:11.798051</ts>
    <user>U050MP39D</user>
    <text>but, while that's a problem, it's not a problem that should yield the error you got. the error you got very specifically says the file does not exist in the cp</text>
  </message>
  <message>
    <ts>2017-08-01T02:30:02.837226</ts>
    <user>U050MP39D</user>
    <text>(it could be finding the edn file because it's accessible by some other cp entry like .)</text>
  </message>
  <message>
    <ts>2017-08-01T02:31:34.859447</ts>
    <user>U1B0DFD25</user>
    <text>I think the names in `could not locate` error message should not start with a quote, so check for single quote in the edn file such as:
```
{:description "Markdown parser"
 :init 'cryogen-markdown.core/init}
```</text>
  </message>
  <message>
    <ts>2017-08-01T02:31:51.863480</ts>
    <user>U050MP39D</user>
    <text>^ that's it</text>
  </message>
  <message>
    <ts>2017-08-01T02:31:58.865220</ts>
    <user>U050MP39D</user>
    <text>I missed the quote</text>
  </message>
  <message>
    <ts>2017-08-01T02:32:42.875637</ts>
    <user>U050MP39D</user>
    <text>you don't need to quote inside an edn file</text>
  </message>
  <message>
    <ts>2017-08-01T02:33:46.890135</ts>
    <user>U050MP39D</user>
    <text>```
(edn/read-string "{:foo bar}")
=&amp;gt; {:foo bar}
(class (first (vals *1)))
=&amp;gt; clojure.lang.Symbol
```</text>
  </message>
  <message>
    <ts>2017-08-01T02:34:12.895763</ts>
    <user>U050MP39D</user>
    <text>and in fact it's not part of edn I don't think (' etc are part of the clojure reader)</text>
  </message>
  <message>
    <ts>2017-08-01T02:36:03.921524</ts>
    <user>U050MP39D</user>
    <text>yeah 
```
(edn/read-string "{:foo 'bar}")
=&amp;gt; {:foo 'bar}
```</text>
  </message>
  <message>
    <ts>2017-08-01T02:37:27.941111</ts>
    <user>U1B0DFD25</user>
    <text>It's surprising in my opinion actually. Maybe it's a bug in the lib, not wrapping with `(name symbol)` where it should.</text>
  </message>
  <message>
    <ts>2017-08-01T02:40:06.979225</ts>
    <user>U1B0DFD25</user>
    <text>Nope, I'm wrong</text>
  </message>
  <message>
    <ts>2017-08-01T02:40:09.979719</ts>
    <user>U050MP39D</user>
    <text>it's surprising but I dunno about bug... the language reader and the data format reader can't be exactly the same</text>
  </message>
  <message>
    <ts>2017-08-01T03:03:36.340862</ts>
    <user>U1C03090C</user>
    <text>That's probably it. I'll check when I get back to my computer. </text>
  </message>
  <message>
    <ts>2017-08-01T03:17:30.576262</ts>
    <user>U1C03090C</user>
    <text>Yep removing the quote fixed it. Thanks for your help!</text>
  </message>
  <message>
    <ts>2017-08-01T06:40:38.021650</ts>
    <user>U1C03090C</user>
    <text>So I have some code in my -main function `(extend-classpath (filter #(.contains (.getName %) ".jar") (file-seq plugin-dir)))`. If I run this directly in the repl, it changes my classpath as I want it to. If I run the -main function in the repl, it doesn't work. What causes this difference (boot repl if it matters)?</text>
  </message>
  <message>
    <ts>2017-08-01T09:33:04.989061</ts>
    <user>U0BKWMG5B</user>
    <text>Oh, thanks! But I'm afraid I already have an invite. Thank you anyway.</text>
  </message>
  <message>
    <ts>2017-08-01T09:44:58.400066</ts>
    <user>U05308A8D</user>
    <text>&lt;@U1C03090C&gt; regarding `extend-class` in repl vs -main, I'm wondering if it could be related to boot using pods to isolate classpath (&lt;https://github.com/boot-clj/boot/wiki/Boot-for-Leiningen-Users#repl-dependencies&gt;). Just getting started with boot myself. Would appreciate an authoritative answer too.</text>
  </message>
  <message>
    <ts>2017-08-01T09:52:28.682368</ts>
    <user>U0DH86UA1</user>
    <text>There seems to be an issue with 1.9.0-alpha17 in let blocks with auto-gensymed variables in macros. Is that a known issue?</text>
  </message>
  <message>
    <ts>2017-08-01T09:56:25.832964</ts>
    <user>U0DJC1V3R</user>
    <text>&lt;@U0DH86UA1&gt; could you elaborate?</text>
  </message>
  <message>
    <ts>2017-08-01T09:57:05.859188</ts>
    <user>U0DH86UA1</user>
    <text>&lt;@U0DJC1V3R&gt; I'm trying to find the example that exploded yesterday :slightly_smiling_face:</text>
  </message>
  <message>
    <ts>2017-08-01T10:01:57.052388</ts>
    <user>U0DH86UA1</user>
    <text>&lt;@U0DJC1V3R&gt; looking again with fresh eyes, I found the bug. I had this:</text>
  </message>
  <message>
    <ts>2017-08-01T10:02:25.070988</ts>
    <user>U0DH86UA1</user>
    <text>that fails with something completely unreadable:</text>
  </message>
  <message>
    <ts>2017-08-01T10:03:09.099811</ts>
    <user>U0DH86UA1</user>
    <text>trying it in 1.8 I am getting this instead:</text>
  </message>
  <message>
    <ts>2017-08-01T10:03:40.120871</ts>
    <user>U0DJC1V3R</user>
    <text>that error message seems crystal clear to me /s</text>
  </message>
  <message>
    <ts>2017-08-01T10:03:41.121319</ts>
    <user>U0DH86UA1</user>
    <text>so if I do the right thing and use `msg#` instead of `msg` it works</text>
  </message>
  <message>
    <ts>2017-08-01T10:04:20.146737</ts>
    <user>U0DH86UA1</user>
    <text>So yeah. Not a bug, just a mistake on my part, coupled with an awful error message :confused:</text>
  </message>
  <message>
    <ts>2017-08-01T10:10:49.400160</ts>
    <user>U051HUZLD</user>
    <text>what is the general approach to "expanding iteration"?
```
(path-to-paths
  [:a]
  {:a #{:b :c}
   :b #{:d :e}})
  
;=&amp;gt; [[:a :c]
;    [:a :b :d]
;    [:a :b :e]]```
Is this a `loop/recur` client? Or are there any alternatives?
If this is a `loop/recur` – is there any intuition for how to know how many things I need to keep track of in `loop` bindings? I seem to spend much more time on these than it should take me.</text>
  </message>
  <message>
    <ts>2017-08-01T10:19:11.728613</ts>
    <user>U0DH86UA1</user>
    <text>&lt;@U0DJC1V3R&gt; i just added this: &lt;https://github.com/bhb/expound/blob/master/README.md&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T10:19:13.730295</ts>
    <user>U0DH86UA1</user>
    <text>and got this:</text>
  </message>
  <message>
    <ts>2017-08-01T10:19:27.739743</ts>
    <user>U0DH86UA1</user>
    <text>that's pretty neat...</text>
  </message>
  <message>
    <ts>2017-08-01T10:20:04.764760</ts>
    <user>U0DJC1V3R</user>
    <text>that's indeed pretty cool!</text>
  </message>
  <message>
    <ts>2017-08-01T11:51:05.512401</ts>
    <user>U051HUZLD</user>
    <text>&lt;@U0DH86UA1&gt; &lt;https://clojurians.slack.com/archives/C1B1BB2Q3/p1501600794016449&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T11:57:30.779068</ts>
    <user>U0DH86UA1</user>
    <text>Thanks &lt;@U051HUZLD&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T12:07:19.187018</ts>
    <user>U08HJGLPQ</user>
    <text>is there any recommended way of fixing ``` java.lang.ClassNotFoundException: clojure.tools.logging.impl.LoggerFactory```? This is happening on a fresh project created with `lean new luminus &amp;lt;app name&amp;gt;` (running `[org.clojure/clojure "1.8.0"][org.clojure/tools.logging "0.4.0"]` )</text>
  </message>
  <message>
    <ts>2017-08-01T12:08:43.241190</ts>
    <user>U1C03090C</user>
    <text>&lt;@U067DHTFF&gt; you can consider asking in the &lt;#C077KDE3A|luminus&gt; channel. I'll see what I can find</text>
  </message>
  <message>
    <ts>2017-08-01T12:09:12.259508</ts>
    <user>U08HJGLPQ</user>
    <text>ok, will do!</text>
  </message>
  <message>
    <ts>2017-08-01T12:34:36.202554</ts>
    <user>U6GFE9HS7</user>
    <text>&lt;@U08HJGLPQ&gt; I seem to remember a similar issue in one of my projects, and the solution was to AOT compile the logging implementation by adding this to my lein `project.clj`:
```
  :aot [clojure.tools.logging.impl]
```</text>
  </message>
  <message>
    <ts>2017-08-01T13:03:04.249696</ts>
    <user>U42CK0UBU</user>
    <text>If somebody is ever interested in using ULID:s I ported library for Clojure &lt;https://github.com/theikkila/clj-ulid&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T13:07:51.425252</ts>
    <user>U5JUDH2UE</user>
    <text>How can I check if something is not equal to one of a few things.</text>
  </message>
  <message>
    <ts>2017-08-01T13:08:26.445739</ts>
    <user>U5JUDH2UE</user>
    <text>Like `(not (= % 1) (= % 2))`</text>
  </message>
  <message>
    <ts>2017-08-01T13:08:55.463326</ts>
    <user>U050MP39D</user>
    <text>(not (#{a few things} thing))</text>
  </message>
  <message>
    <ts>2017-08-01T13:10:05.503305</ts>
    <user>U5JUDH2UE</user>
    <text>Ah, sets, I knew there would be a simple thing I wasn't thinking of.</text>
  </message>
  <message>
    <ts>2017-08-01T13:10:08.505486</ts>
    <user>U5JUDH2UE</user>
    <text>Thanks &lt;@U050MP39D&gt;</text>
  </message>
  <message>
    <ts>2017-08-01T13:10:16.509725</ts>
    <user>U050MP39D</user>
    <text>np</text>
  </message>
  <message>
    <ts>2017-08-01T13:11:34.555745</ts>
    <user>U051SS2EU</user>
    <text>you can use contains? with the set if you need to check for nil / false</text>
  </message>
  <message>
    <ts>2017-08-01T13:11:43.561013</ts>
    <user>U051SS2EU</user>
    <text>(along with other non-nill non-false values)</text>
  </message>
  <message>
    <ts>2017-08-01T13:12:57.603977</ts>
    <user>U5JUDH2UE</user>
    <text>:thumbsup:</text>
  </message>
</slack>

