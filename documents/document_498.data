U0JBSEGHY : My model contains other stuff... which isn't in the Json response
U180KMGRE : Can ReceiveToken take a string and then in your update you can update it in your model?
U0JBSEGHY : OH!!
U0JBSEGHY : Damn Types.... haha
U0JBSEGHY : still getting used to it :sweat_smile:
U153UK3FA : Look at the type of Http.send
U0JBSEGHY : I had this `| ReceiveToken (Result Http.Error String)`  saying Model. Which I have now changed.
U0JBSEGHY : Ok I'm getting an error / not getting anything back when I make the request :disappointed:
U3SJEDR96 : Try logging the `Err` case to the console using `Debug.log`, or inspecting the messages in the debugger
U0JBSEGHY : Where would that fit into code like this? ```type Msg    = Answer
    | HangUp
    | FetchToken
    | ReceiveToken (Result Http.Error String)
    | Err
    | NoOp


update : Msg -&gt; Model -&gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        Answer -&gt;
            ( { model | log = Connected }, Cmd.none )

        HangUp -&gt;
            ( { model | log = Disconnected }, Cmd.none )

        FetchToken -&gt;
            ( model
            , fetchToken
            )

        ReceiveToken (Ok newToken) -&gt;
            ( { model | token = newToken }
            , Cmd.none
            )

        ReceiveToken (Err _) -&gt;
            ( model
            , Cmd.none
            )

        Err errorMessage -&gt;
            let
                _ =
                    Debug.log "Error in HTTP response: " errorMessage
            in
                NoOp

        NoOp -&gt;
            ( model, Cmd.none )


fetchToken =
    Http.send ReceiveToken (Http.get apiEndpoint tokenDecoder)


tokenDecoder =
    Decode.field "token" Decode.string```

U0JBSEGHY : yea I ended up with something similar.         ```ReceiveToken (Err errorMessage) -&gt;            let
                _ =
                    Debug.log "Error " errorMessage
            in
                ( model
                , Cmd.none
                )```
Says that `Err` has too many arguments.

U0JBSEGHY : Ok think I got it compiling now
U3FJSB596 : Can you paste the log message?
U0JBSEGHY : My beginner web programming experience is showing xD
U0JBSEGHY : `XMLHttpRequest cannot load <http://localhost:4000/api/twilio/token>. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin '<http://localhost:3000>' is therefore not allowed access.`
U3SJEDR96 : Ahh, good old CORS.
U0JBSEGHY : On MDN now :laughing:
U3SJEDR96 : you'll have to configure your server to allow ajax requests from `localhost:3000`
U0JBSEGHY : dope
U0JBSEGHY : got it working now :slightly_smiling_face:
U0JBSEGHY : Funny all these small things trip me up and the project I am working on seems like Everest compared to this stuff!
U68471J6P : Is it possible to pass multiple values to transform in elm-css, just as you would in regular css? (i.e. "transform: translateY(4deg) rotateX(20%)" )
U3SJEDR96 : There is a `transforms` function for that :slightly_smiling_face:
U3SJEDR96 : <http://package.elm-lang.org/packages/rtfeldman/elm-css/9.1.0/Css#transforms>
U68471J6P : Read about it just a second before your message, but thanks for the help!
U2GPAEU1L : Hey everyone, in case you're struggling with `type alias`, I just made a tutorial here that goes over everything you need to know - this is a tutorial targeting beginners.
<http://codetidbit.com/#view/snipbit/596fa4497890d775c05191f9/introduction>

Cheers :smile:

PS. I'll be making a tutorial on `type` shortly, so if that confuses you don't worry, I'll post the tutorial in this channel

U3SJEDR96 : amilner42: Not sure I'd call it common to type alias primitives :thinking_face:
U2GPAEU1L : Perhaps not too common, I was just trying to explain to people _why_
U3SJEDR96 : Personally not a fan, it isn't more self-documenting than clear argument names, and requires me to keep in mind that `Name` is actually a `String` so I can use the correct functions to work on it. ¯\_(?)_/¯
U2GPAEU1L : That's a fair opinion. There are spots in my code where I like it, and there are spots where I don't.
I wouldn't say it's the same as documentation. 
- For example you may have your types separate from your implementation. In that case you'd have to document right about the type annotation what the types are - at that point it seems to make more sense to just write it in one line, in the type itself.
- Documentation tends to go stale faster than code/type-annotations, people are more likely to remember to update it.
- My IDE only shows the types, so if I hover over something it'll only say "String -&gt; String -&gt; String -&gt; Bool" if I don't use type aliases, it's nice to have it say "Name -&gt; Bio -&gt; etc etc…" directly in my IDE. Saves me time.

So I wouldn't say "you should never use type aliases for primitives", I'd say that it is situational

U3HQVHERX : I agree with <@U3SJEDR96>. furthermore, aliasing the String is not needed since the name of the arguments make it clear what the "intention" of the strings are.
```
validNameAndBio : String -&gt; String -&gt; Bool
validNameAndBio name bio =
```

U3HQVHERX : and if you have something like `String -&gt; String -&gt; String -&gt; String` where the strings are related, maybe it's time to put them into a type aliased record anyway
U1J83SK9N : is there an easy way to convert a .svg into some virtual svg dom?
U3HQVHERX : great tutorial though!
U23SA861Y : sry?
U3SJEDR96 : <https://mbylstra.github.io/html-to-elm/> might support that
U23SA861Y : you can also embed the file with an object tag
U1J83SK9N : well, I need the nodes for events and stuff.
U1J83SK9N : ah, looks good! <@U3SJEDR96>
U3SJEDR96 : <@U3HQVHERX> <@U2GPAEU1L> let's take it out of the thread :slightly_smiling_face: I realize this is just a case of differing opinions, and you're free to use type aliases all you want; however in the context of a tutorial aimed at beginners, I'd be careful in expressing that opinion without labelling it as such. As for documentation and it going stale, so can a type alias, say `name : FirstName -&gt; LastName -&gt; String` and I refactor the implementation to be `name lastName firstName = ...`. Since they're type aliases, I'm just making your life more difficult, compared to if it had been `String -&gt; String -&gt; String` and you had to look at the argument names to figure out what they refer to.


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
