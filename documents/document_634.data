U5YKRLXGT : No, exactly!
U0EUHKVGB : Great, so we’re on the same page.
U5YKRLXGT : ```view model =    stylesheet (\mailbox -&gt;
        div []
            [ h1 [] [ text "Hi" ]
            , console mailbox [ Html.Attributes.id consoleId ] [ text model.lines ]
            , button [ onClick (Send "Hello") ] [ text "Append" ]
            ]
    )
```

U5YKRLXGT : So then I thought this, with a foldp at the end
U5YKRLXGT : imagine mailbox is accumulating rules as the view runs
U0EUHKVGB : :scream:
U5YKRLXGT : haha :slightly_smiling_face:
U5YKRLXGT : I want the output to be:
U0EUHKVGB : That would not have been a good idea even in 0.15.
U0EUHKVGB : Okay, hold up a sec
U5YKRLXGT : ``````div []    [ h1 [] [ text "Hi" ]
    , div [ Html.Attributes.id consoleId ] [ text model.lines ]
    , button [ onClick (Send "Hello") ] [ text "Append" ]
    ]
style
    ...rules from every styled element```

U0EUHKVGB : That library has sadly led you down a bad path - in Elm, we _like_ things to be pure
U5YKRLXGT : Yup, I like that also
U0EUHKVGB : So, don’t think about side effects or magic or mutation
U0EUHKVGB : Think about it in terms of pureness
U5YKRLXGT : I just don't know how I do it without some kind of Monad type thing and forcing the user to totally rewrite the structure to be functors or something
U0EUHKVGB : If you want to return two things from a pure function, how would you do that?
U5YKRLXGT : In this case, I really do just want to accumulate elements in a list. I know that is naughty, but I don't want to have to insert a bunch of boilerplate in front of every function call
U5YKRLXGT : :slightly_smiling_face:
U0EUHKVGB : Ignore the boilerplate, ignore the the elements, ignore everything else
U0EUHKVGB : If you wanted to return two things from a function, how would you do that?
U5YKRLXGT : I have rewritten styled, this third party library to return a record with a node and a list of Strings
U5YKRLXGT : in one of my many iterations on this problem
U5YKRLXGT : Then I still struggle to collect those all together without having to modify the way a view normally looks
U5YKRLXGT : I've also tried adding the css as `data-css` attribute. That's nice, except VirtualDom wont let you traverse and transform the output :slightly_smiling_face:
U0EUHKVGB : So then your type looks like this, right? `styled : List (Html msg) -&gt; List (Attribute Msg) -&gt; (Html.Html msg, Css)`
U5YKRLXGT : The stock library looks like this:
U5YKRLXGT : ```styled : (List (Property msg) -&gt; List (Node msg) -&gt; Node msg)    -&gt; List Rule
    -&gt; List (Property msg)
    -&gt; List (Node msg)
    -&gt; address
    -&gt; Node msg```

U0EUHKVGB : You’re going to have a bad time if you keep trying to think of things in terms of mutating away and doing everything to avoid boilerplate
U0EUHKVGB : So that code isn’t even 0.17
U5YKRLXGT : OH, sorry
U5YKRLXGT : I added the signal earlier
U5YKRLXGT : haha
U5YKRLXGT : that's what led me here
U5YKRLXGT : Ignore that part :slightly_smiling_face:
U5YKRLXGT : NOT HELPING :slightly_smiling_face:
U5YKRLXGT : haha, sorry


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
