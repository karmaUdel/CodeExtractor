``` Kindly advise.
its backed by js, what were you expecting in large numbers?
I'm not sure myself, but would like to know what max safe upper limit is for `Float`.
Floats to my understanding are inherently imprecise at a certain point.
Floats are inherently imprecise at any point. `0.1 + 0.2 == 0.3` is  `False`
An integer is a float without decimals, basically, so for floats that end in `.0`, the limits are the same as for integers
when comparing floats for equality, you should generally allow for a margin of error (`epsilon`) relative to the inputs
yes, thanks
But I would expect `Basics` to have such an equality function for `Float`.
<@U3L8MM10T> floats are as defined by IEEE 754 double precision floating-point numbers
so the limitations of them are pretty well known
I _think_ it's somewhere on the TODO list, but it's hard to get a "one size fits all" solution for even something as seemingly simple as floating point equality. Such a function _is_ being integrated into `elm-test`, btw, with the slight annoyance that you have to manually specify a margin of error which will then be interpreted relative to the input
and then there's the special case of one or more args being `0` :sweat_smile:
floats are inheriently imprecise at any point.
<@U23SA861Y> Re floats, indeed they are inherently imprecise. Integers should probably be some kind of bignum (unlimited) in Elm though. Having limited integers invites trouble. If you really want speed, Elm could provide special types for that.
<@U23SA861Y> that was indeed my opening statement :smile:
regarding floating point representation, i watched a talk a few days ago - Douglas Crockford explaining another implementation for numbers -&gt;  <https://youtu.be/bo36MrBfTk4?t=2580> - he claims will solve a lot of our problems, i'm not experienced enough to say one of the other - but i think if something like he proposes can be implemented in elm - maybe would be useful to do it. One more awesome reason to choose elm :smile:
It would be great if Elm numbers were not tied to javascript strangeness, for sure
<@U2LAL86AY> is it the DEC64 he’s talking about?
<@U4872964V> Yeah, I’m not sure how many problems it would actually solve for Elm though.
<@U4872964V> yep, DEC64 - <@U4F64AKQV>  me neither. but `this idea that we could implement something completely different` - not needing to copy old stuff that's buggy - seems very applealing :simple_smile:  As Douglas Crockford says - our memory and computational power has increased a lot - and optimizing for it might be like optimizing for datastructure - when dom rendering it accounts of 90% of performance. Optimizing for ease of reasoning and no bugs is more important then memory .
Wouldn’t it be a good thing to have a way to get the actual HTML element of a virtual DOM node, like you can in React? Or does this somehow violate Elm principles?
Do you know if there is easy way to "rate-limit" events? Something like with setTimeout in vanilla js. For example I am watching for `Window.resizes` and really don't want to redraw on each pixel changed, maybe just after 300ms when resizing is finished
<@U170TNSTZ> there is the issue of how you would get access to that value
