U0NCTKEV8 : mount is based on global state in global atoms
U0NCTKEV8 : I've done that, it sucked
U0NCTKEV8 : component turns your system in to another first class value you can pass around, have multiple copies of, etc
U0E0XL064 : <@U0NCTKEV8> we've all done all kinds of stuff, I never liked component. No need to argue with : I like it - I don't.
U5ZAJ15P0 : I fear I've asked a more contentious question than "should I use VIM or Emacs?"
U0BKWMG5B : <@U5ZAJ15P0> Compared to Mount, Integrant doesn't have global state. Compared to Component, Integrant can have dependencies between things that aren't maps/records.
U0BKWMG5B : I feel like Vim and Emacs users can be collectively smug toward users of lesser editors :wink:
U0E0XL064 : we know <@U0NCTKEV8> doesn't like mount : <https://gist.github.com/pandeiro/9a1c8fd431e1b4c78c99>
U0E0XL064 : That discussion actually drew my attention to mount, and I like it since. Thanks to <@U0NCTKEV8> :slightly_smiling_face:
U0NCTKEV8 : huh, I  didn't know there was acopy of that floating around
U051HUZLD : ```seems bad, like sticking (def state (atom {})) in every namespace would be
```
isn't this the way I am supposed to do things? :kappa:

U0NCTKEV8 : god no
U0NCTKEV8 : singleton global state is bad and sprinkling clojure on it doesn't make it good
U0E0XL064 : still, thanks for pointing me to mount :wink:
U051HUZLD : actually, I'd love to see good example of not doing global atoms, asking for a friend™
U051HUZLD : I guess good component example would suffice as well
U0NCTKEV8 : all the main component projects I have worked on have been closed source apps
U5ZAJ15P0 : Oh, I didn't realise you're the maintainer of Ring and Compojure!
U0CHY4VNW : Here is the problem with global state: you don't know beforehand how you will want to use your code later. So, inevitably the system grows to the point where your previous "application" is subsumed in some larger structure, and you have to refactor all the global state out of it. Which is a much bigger pain later.
U0BKWMG5B : Indeed. Feel free to hit me up with any questions when/if you happen to have any.
U0E0XL064 : Read the discussion... it's enlightening
U0NCTKEV8 : <https://github.com/hiredman/songs-of-future-past/blob/master/src/com/manigfeald/sofp.clj> is an example of something using component, I don't know that it is good
U051HUZLD : thank you
U0NCTKEV8 : it doesn't have any tests, which is where the lack of global state would really shine
U5ZAJ15P0 : <@U0BKWMG5B> thanks, will do! Watching your talk on Integrant now
U0CHY4VNW : I only say this because I went through this before. Component solves a problem I was having, and has been great ever since.
U0CHY4VNW : I feel like you can go through this yourself, maybe that is the only way to see it
U0LGCREMU : hmaurer: in that case, build it yourself.  once you've got that experience under your belt you'll be able to evaluate mount, component, etc.  walk before you run. 
U0NCTKEV8 : I would say it is a classic easy/simple split, component is way simpler (<https://gist.github.com/hiredman/075b45eaeb01e4b526ce6f8854685487> implements all the functionality of component in 30 lines, but lacks refinement), but mount is going to be easier because using globals is always easier for a few months
U5ZAJ15P0 : <@U0LGCREMU> good point. that has been my general philosophy so far
U0CHY4VNW : I think of it as an "easier now"/"easier later" divide
U0CHY4VNW : Global state is easy now. You don't have to learn anything and it doesn't take work to set up
U0E0XL064 : Going the 'simpler' and 'easier' way, are we?
U0LGCREMU : hmaurer: fwiw all that stuff is interesting and useful, i suppose, but i've not needed to use any of them.  mastering clojure is already a tall order, those things are for ninjas (imho).  good luck!
U0E0XL064 : Right, it may be easier, and if it solves the problem, why make it more difficult? - What is the problem you want to solve? This may be the first question to <@U5ZAJ15P0>
U0CHY4VNW : But there will come a day when you are screwed
U0E0XL064 : Having a viral framework, I never liked that. Component is more a framework - I will be screwed as well
U5ZAJ15P0 : <@U0LGCREMU> thanks! any tip on mastering clojure itself?
U0CHY4VNW : <@U0E0XL064> Agreed. <@U5ZAJ15P0> If you are trying to learn Clojure, just use a global atom
U0E0XL064 : Have used enough frameworks, they always hit you in the face as well... and hard :slightly_smiling_face:
U5ZAJ15P0 : I don't really want to use a global state atom. While I am new to clojure I've been interested in functional programming for quite a while; if there are ways to avoid global state I rather do so
U5ZAJ15P0 : But I'll try out mount either way
U0CHY4VNW : <@U0E0XL064> We disagree in general, it is okay
U5ZAJ15P0 : I might learn some valuable lessons
U0CHY4VNW : <@U5ZAJ15P0> That is good context. In that case I think you will appreciate component
U051HUZLD : fwiw, there is a yurt for mount <https://github.com/tolitius/yurt>```Multiple brand new local Yurts with components can be created and passed down to the application / REPL to be used simultaneously in the same Clojure runtime for fun and profit.```

U0E0XL064 : Exactly - check what works out for you.
U0NCTKEV8 : integrant seems ok, I haven't looked at in depth, but it looks like it uses multimethods for dispatch, which I've done with component before, but is annoying if you want to create an anonymous sort of mock of something in a test
U0CHY4VNW : <@U5ZAJ15P0> Once you understand it, it is not as bad as people make it out to be
U5ZAJ15P0 : A global state atom also sounds a bit messy for mocking
U0CHY4VNW : It is a conceptual hurdle
U0CHY4VNW : not a technical one
U5ZAJ15P0 : I mean, you could set the global state atom before runing your tests with the mock dependency
U5ZAJ15P0 : but it sounds a bit dirty
U0NCTKEV8 : <@U5ZAJ15P0> the beating heart of mount <https://github.com/tolitius/mount/blob/master/src/mount/core.cljc#L12-L16>


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
