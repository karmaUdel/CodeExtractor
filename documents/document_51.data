(let [cc (read-line), startswith (first cc), credit-card (case ...)] (println "credit card:" credit-card))```
(of course you shouldn't type it all in a single line, I was too lazy to use an editor)
<@U06F82LES>  thanks for that. I'm stuck on a my chromebook using an online  repl So I think I'll have to try it on an editor later. I appreciate the insight
ah nice, which online repl do you use?
<http://repl.it|repl.it>
It has its limitations but is sufficient enough to play a bit with clojure
nice!
it's quite fast
It's the best I've found
It's been a bit rough learning clojure. Probably because it's new enough that there aren't as many resources available compared to other languages
a lot of what I find seems to be targeted at more advanced users
anyway, thanks again. I'll have to pop in some more
<@U51QL32TT> did you look at <http://www.braveclojure.com/> ?
<https://www.reddit.com/r/Clojure/> also has a nice list of resources
Tnx, that did the trick
3) … ?
the problem i'm trying to model is a hierarchy-tree with directories, files, drives, etc.
What's a good lightweight way of managing configurations in a clojure project? Like environment type stuff? Urls, user/passwords, etc?
" Expresso makes great use of clojure's abstraction mechanism like protocols and multimethods and uses a datadriven approach where possible." what does "datadriven" mean in this context? :slightly_smiling_face:
<@U5QCSK76C> <https://github.com/juxt/aero> is pretty good
+1 for aero
<https://github.com/tolitius/cprop> is another option
n/p
Thanks guys! I'll check them out
<http://blog.cognitect.com/blog/2016/6/28/the-new-normal-data-leverage>
you could say that datascript and datomic are data-driven databases, compared to something like MariaDB
there's also this interview with Rich - <https://gist.github.com/rduplain/c474a80d173e6ae78980b91bc92f43d1> (ctrl-f for "information")
lwhorton: 2) map and multimethod dispatch on some key.   any code can consume nested maps and mutate it conforming to the spec. I would avoid the 1) OO trap
what's the issue with using records and protocols in #1?
unnecessary bundling data + behaviour.
Anything more idomatic?
aside from "I hope this isn't a real system" the clojure looks good
