U1ZFF0E5P : if an item can't be found in a `Dict` we do handle it in the view, but additionally we want to log it
U1ZFF0E5P : so I need a way to send a `Msg` to my `update` function where I can send an `Http` request
U23SA861Y : how are you selecting the item in the dict, presumably that key is in the model
U1ZFF0E5P : yeah so I have the key for `StudentCourse`, which I can look up and send to my view
U1ZFF0E5P : which has a List of keys of other entities (StudentCourseUnit), which I have to loop up again
U23SA861Y : wait, you don't send it to your view
U23SA861Y : your view renders your model
U23SA861Y : nothing gets sent to it
U1ZFF0E5P : this is my model: ```{?entities = {
?apprenticeshipProviderFieldOfficers = Dict(0)
?apprenticeshipProviderRegions = Dict(0)
?apprenticeshipProviders = Dict(0)
?changeOfSrtos = Dict(0)
?courseDescriptors = Dict(0)
?courseSchemeUnits = Dict(18)
?courseSchemes = Dict(3)
?courseUnits = Dict(13)
?courses = Dict(1)
?deliveryLocations = Dict(0)
?employers = Dict(0)
?fundingSchemes = Dict(0)
?notifications = Dict(0)
?referralSources = Dict(0)
?registeredTrainingOrganisations = Dict(0)
?studentCourseClasses = Dict(1)
?studentCourseUnitTasks = Dict(0)
?studentCourseUnits = Dict(0)
?studentCourses = Dict(1)
?tasks = Dict(0)
?trainerRoles = Dict(1)
?trainers = Dict(1)
?trainingContractNumbers = Dict(0)
?units = Dict(13)
}
error = Nothing
openedDatePicker = Nothing
route = TrainingPlan "dGYgQa"
settings = NotAsked
?trainingPlan = Success {courseScheme…}
courseScheme = Nothing
?courseSchemes = List(3)
date = &lt;Wed Jul 19 2017 18:08:05 GMT+1000 (AEST)&gt;
modal = Closed
selectedStudentCourseUnits = Nothing
studentCourse = "dGYgQa"
?studentCourseForm = { comment = Nothing, endDate = Nothing, … }
trainer = "mbk5Xe"
}```

U1ZFF0E5P : so my main view function is this:
U1ZFF0E5P : ```view : Model -&gt; Html Msgview model =
```

U1ZFF0E5P : now if a key can't be found, I show an error
U23SA861Y : ellie dude
U23SA861Y : ellie
U1ZFF0E5P : BUT I also want to log this
U2SR9DL7Q : <@U1ZFF0E5P> Views can be shown or not shown depending on the state of your model. So you're view code would look like```
view model = 
  case model.relevantThing of 
    everything there -&gt; ViewIfWorking

    somethingMissing -&gt; ViewIfNotWorking
```
`ViewIfNotWorking` may be some default or anything you like. 

Error logging would have nothing to do with the view however. It would be triggered or not when your app attempts to read the data from the `dicts` in your backend.

U23SA861Y : You need to handle all of this in your update function when you get the message that changes the selection
U1ZFF0E5P : we have relational data (8 layers deep) that we normalised and store in `Dict`s
U1ZFF0E5P : we want to avoid having to query all dicts upfront to make sure everything is there, we'd rather let the view functions pick what they need
U23SA861Y : but the view functions are picking what they need based on keys which are known to update
U1ZFF0E5P : but it's a Dict, not a record, it may not be there
U1ZFF0E5P : Dict.get returns a `Maybe a`
U23SA861Y : But you can do that check in update
U1ZFF0E5P : then I would need to write some sort of `guard` function
U1ZFF0E5P : a function to look up everything upfront, replicating all of the view logic


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
