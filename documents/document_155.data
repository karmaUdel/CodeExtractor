U0BKWMG5B : <@U5ZAJ15P0> I find it useful :slightly_smiling_face:
U5ZAJ15P0 : (aka does it have any known significant issues)
U5ZAJ15P0 : does it auto-wrap lines above a certain length?
U0BKWMG5B : <@U5ZAJ15P0> It could have more features; I haven't had time to work on it recently, but aside from that, not that I'm aware of… It might not support reader conditionals; I can't recall.
U0BKWMG5B : <@U5ZAJ15P0> No, cljfmt is pretty conservative.
U0BKWMG5B : There's another one, zprint, that just removes all formatting and reapplies it.
U0BKWMG5B : Whereas cljfmt just tries to fix formatting that's wrong.
U5ZAJ15P0 : <@U0BKWMG5B> Thanks, I'll take a look at zprint too then!
U1C03090C : I'm looking to create a plugin system for my application that will allow me to distribute it as an uberjar and then load the plugins from the classpath, ideally as jar-files without the source but I'm willing to fudge on that. Does using pomegrante (<https://github.com/cemerick/pomegranate>) for dependency management seem reasonable? I get the impression that having the same libraries with different versions will usually wreak havoc.
U05111TCS : My friend asked me to give him one resource link for him to start learning Clojure. I proudly gave him this <https://clojure.org/guides/getting_started>. 
Shout out to everyone who involves in making it this great! Thank you!

U3JURM9B6 : ```
(require '[clojure.walk :as walk]) 
(println (walk/macroexpand-all '(quote (let [a 1] a)))) 
; (quote (let* [a 1] a))
 
```
is above viewed as a bug or a feature ?

U3JURM9B6 : (and if a feature, what is the reasoning)
U060FKQPN : I'd say it's neither a bug nor a feature, it's a limitation of `macroexpand-all`, it has no awareness of lexical scoping or evaluation rules (and doesn't claim to)
U060FKQPN : if you want to macroexpand all with lexical scoping &amp; evaluation awareness, use either tools.analyzer.jvm or riddley
U3JURM9B6 : one of the things that makes it easy to write new DSLs in racket is the ability to write
```
#lang foobar
```

at the top of a file, then define a foobar reader/expander, and viola you can write foobar code in *.rkt files.

Does Clojure have any feature like this (perhaps as a library) ?

U060FKQPN : no
U060FKQPN : clojure's reader and macroexpander are not extensible in the way that racket's are
U3JURM9B6 : <@U060FKQPN> : to the best of your knowledge is there anyway to get racket's "dsl building" features in clojure ?
U060FKQPN : use racket :) 
U3JURM9B6 : if it had decent jvm / js support, I would :slightly_smiling_face:
U060FKQPN : clojure's philosophy is not really compatible with the language extensibility features of racket 
U3JURM9B6 : the tco/continuations I don't really need, but the dsl building capabilities are something else
U4R5K5M0A : TCO would be really nice to have
U060FKQPN : would it? how many times do you actually use recursion (and more specifically, non-tail recursion) in clojure?


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
