```
I am an Elm beginner, but I think this might be possible using the union types?
Arbitrary keys: {foo = ‘1', bar = ‘2'} or {fuzz = ‘3', bazz = ‘2'}. It doesn't matter what the keys are called, nor how many of them are present.
<@U5TQ5FZA5> have you seen this package? <http://package.elm-lang.org/packages/eeue56/elm-all-dict> It has an EveryDict that allows the Dict keys to be of any type
Eh, I don't think that's what they want
<@U5TQ5FZA5>, i think you just want a plain dictionary
So the key can be of type `String`
Here's how your example would look: `Dict.fromList [ ("foo", 1), ("bar", 2) ]`
<@U0EUHKVGB> but don't I have to declare the keys and types then in my model?
Yes. You cannot have varying keys in a record in Elm, because it makes the types impossible to figure out.
You can have multiple different records
But that's different from varying keys.
<@U0CLDU8UB> yeah - the keys are String and the values are String | Dict
I think you might be confusing how Dicts and records work. Records have certain named fields, with specific types per field. Dicts are collections of for key and value pairs, where the keys need to be of one single type (strings are fine), and the values need to be of a single type, but that includes the union type <@U4872964V> showed earlier.
