```
just loaded your code into ellie and got this.
I just tried to save it as an ellie project too, same issue
I've seen something like this happen once when the types wrong in a recursive function. Somehow the compiler seemed to go into an infinite loop trying to figure the types out.
I suspect this line: <https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L41>
actually, i see it
Your update has mis-matching cases.
<@U2LAL86AY> this is stuff that I've learned over 3 years of functional programming, reading various books, watching talks and absorbing the chatter of everyone around me! I never just looked at the code and just "got" it. As with anything else, it's gradual and takes time!
there’s actually a few weird things in here :thinking_face:
If you're interested in learning more about this stuff I would recommend the Big Purple Haskell Book :stuck_out_tongue: <http://haskellbook.com/>
Unfortunately I didn't write it, nor am I an elm expert, so I've had quite the time debugging it :anguished:
Okay
<@U0EUHKVGB> Could you explain what you mean by "mis-matching cases" in the update? Any idea why that breaks the compiler?
Yeah, one sec, I’m just making sure
it's a typo - `if config.hiddenFields then`  -&gt; `if options.hiddenFields then`
first line of `view`
Plus one on <@U0K92QFST> ‘s book suggestion.
I read a bit of it after the NYC Haskell meet upgroup recommended it
<@U14Q8S4EM>  =&gt; <#C0CJ671HU|random>
oh, wait, that breaks it completely
<@U5W50TZ6C>, <https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L53>
this is missing `! []` to match the other line
<https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L71> is refering to a name that does not exist
<@U5W50TZ6C> My suggestion would be to take it line-by-line and make it as explicit as possible, replacing parts with `Debug.crash ""` until it compiles.
Yeah, that's probably the next step
thank you for your help :slightly_smiling_face:
I suspect it’s a combination of using pattern matching on this line: <https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L70>
with the incorrect name used on this line: <https://gist.github.com/SidneyNemzer/d7be995a3f12f9bb69a7c3883cdc6191#file-textarea-elm-L71>
Also, `Config Msg &lt;-&gt; Config`
<@U3SJEDR96> Changing `Config Msg` to `Config` makes the compiler complain about missing `msg`. But it doesn't crash! Adding `Msg` back makes it crash.
<https://ellie-app.com/3xgmV5BBJtma1/0> which reveals a few more errors
<@U5W50TZ6C> I mean that your `view` is missing the type parameter for config altogether
(the `indexedMap` in the view was missing `config` as a parameter to `viewFold`, so had to add that to the definition of `view`. the `onInput` in the `then` clause was also wrong, `&lt;|` instead of `&lt;&lt;`
Those changes fixed it, <@U3SJEDR96>! Anyone know why the original breaks the compiler though?
Probably type unification failing because of the missing type parameter, but hard to say tbh
I was just looking at <https://github.com/elm-lang/persistent-cache> is there any port that wraps access to localStorage for me?
<https://ellie-app.com/3x2qQdLqpHga1/1>
You can see that the selection range is from 5 to 12 and then changed to 5 to 10 (because 2 `tab`s were unindented). But the 5 to 10 selection range appears as 10 to 10 (just a cursor at position 10)
<@U2HLL9C6Q> plain ol' ports are gonna be your best bet: it's the safest way to get unimplemented JS features into your app. There's a nice section in the elm guides on ports, and here's an example that deals with localStorage in particular: <https://github.com/evancz/elm-todomvc/blob/master/index.html#L15-L20>
elm gude: <https://guide.elm-lang.org/interop/javascript.html>
I need to Json.Decode a dict where the values can be strings, numbers, and other dicts.  Is that possible?
example?
ahh yes, you want to use the one of decoder
`Json.Decode.oneOf`
and a union type to differentiate what is stored in the dict
