U14Q8S4EM : Like "I can make this scrabble video game so much easier if I had such and such typeclass"
U5XHTBFS6 : to use in dicts and sets, for instance
U5XHTBFS6 : when I want to to use a set i have to "serialize" my type to numbers, use them as numbers and then serialize them back to my type
U5XHTBFS6 : which doesn't really work when some of the type constructors have parameters themselves
U4872964V : maybe this is not the best channel for this though
U5J0H2NS2 : <@U14Q8S4EM> We just started to create a proof-of-concept of redesigning our business model in F#. We have just started learning FP in general, but already faced some limitations with F#-s type system.
U5XHTBFS6 : It's  annoying, but workaroundable.
U5XHTBFS6 : norpan: Agreed. will stop =D &lt;/rant&gt;
U4872964V : but see <https://github.com/elm-lang/elm-compiler/issues/1039>
U5XHTBFS6 : hmmmm
U5HM74BD0 : What does it mean when I try to compile and get a type mismatch error:```Function `programWithFlags` is expecting the argument to be:

    elm-make: Type applications without concrete names should not get here.```
?

U4872964V : It means that there is a bug in the compiler somewhere. Does your code look anything like this? <https://github.com/elm-lang/elm-compiler/issues/1390>
U5ABF3BH7 : Hi! I am trying to decode a Json object:  it an array looking like this: ```[
		?{
		category: "catering_company",
		list: ?[
		?{
		id: 307,
		name: "Special Touch Catering"
		},
		?{
		id: 308,
		name: "Sunset Memorial Park "
		}
		]
		},
		?{
		category: "florist",
		list: [ ]
		},
		
		?{
		category: "insurance_provider",
		list: ?[
		?{
		id: 60969,
		name: "Homesteaders"
		},
		?{
		id: 62411,
		name: "Homesteaders2"
		}
		
          ]     
    }  
 ]
```		
		
		
		
I created the following object
		
		
		type alias RolodexList =
		    { category : String
		    , list : List RolodexEntry}
		
		type alias RolodexEntry =
		      { id : Int
		      , name : String}
		    
		My issue is that I have trouble building the decoders. I know how to build one that is straight forward, but not nested.
		
		
getRolodexEntries : Cmd Types.Msg
getRolodexEntries =
  Json.Decode.list rolodex2Decoder
      |&gt; Http.get "case/all_rolodex"
      |&gt; Http.send Types.LoadRolodex

rolodex2Decoder : Decoder Types.Rolodex2
rolodex2Decoder =
   decode Types.Rolodex2
     |&gt; Json.Decode.Pipeline.required "id" int
     |&gt; Json.Decode.Pipeline.required "name" string
How can I build a decoder that gets nested values?

U23SA861Y : ok, seems straight forward enough
U23SA861Y : well I don't know about the pipeline but using the base decoder package
U23SA861Y : `EntryDecoder = JD.map2 RolodexEntry (JD.field "id" <http://JD.int|JD.int>) (JD.field "name" JD.string) `
U23SA861Y : `CategoryDecoder = JD.map2 RolodexList (JD.field "category" JD.string) (JD.field "list" (JD.list EntryDecoder))`
U23SA861Y : `ListDecoder = JD.list CategoryDecoder`
U23SA861Y : where JD is `import Json.Decode as JD`
U5ABF3BH7 : <@U23SA861Y> Thanks a lot!
U5HM74BD0 : I asked a variant of this question a couple days ago. But it's a little more complicated than what I asked.  I have a `List` of records like this: `[{ab = 3, hits=2}, {ab=2, hits=1}]`.  I'd like to transform that list into a tuple of records: `({ab=3, hits=2}, {ab=2, hits=1})`. How can I write a function to do that? If the list is longer than 2 records, I can default it out to a dummy tuple: `({ab=0, hits=0}, {ab=0, hits=0})`.
U4872964V : and if the list is shorter?


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
