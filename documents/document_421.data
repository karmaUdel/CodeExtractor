```
yup, that makes sense
(you can actually do that pattern in the declaration)
i.e. `playerMap func (FourPlayers p1 p2 p3 p4) = `...
`playerMap2 : (Player -&gt; a -&gt; Player) -&gt; Players  -&gt; List a -&gt; Players`
so i could update all four players at once with a list of four values
So it's not a true map, because it's not two lists or two players. Its players and a list.
but why not `a -&gt; a -&gt; a -&gt; a` or rather than a `List`? When you're calling it, I'm assuming you're not dealing with a list, but rather creating one for the purpose of sending it through?
I should also admit that the purpose for this isn't to get something to work (the logic works). But it's all very crude and clunky, and I'm trying to learn and use more FP design in function construction.
<@U3SJEDR96> that... could work if I'm constructing the list for this purpose :slightly_smiling_face: (which I almost always am)
This game app unfortunately has a lot of stuff passed around, and a lot of maybes and before I move on to the next step I want to refactor as best I can. All the examples I see have really simple functions with neat piping and clever usage of the core library and I'm _want_ that as well. I know it'll take time and effort though, before I can think in those sort've efficient chains of functions.
