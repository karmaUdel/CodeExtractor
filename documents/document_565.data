```
Awesome!
But there has to be 1 operator definition per artity, right?
*arity
Yep, basically
Because of your help, I found this. <https://github.com/Fresheyeball/elm-function-extra/blob/3.0.0/Function.elm#L28-L34> :slightly_smiling_face:
Not the most "Elm-ish" library ever, that, but it's a good place for some arcane functional magic :wink:
jonf: Boom! Thanks <@U23SA861Y> + <@U0FP80EKB> for diving in deep and <@U0EUHKVGB> for the info + issue link. Seeing you expand my recursive solution to an iterative one was also helpful for me, personally, as I couldn’t figure that out on my own.
<http://package.elm-lang.org/packages/ericgj/elm-autoinput/latest>  (my own, very basic)
<https://www.bigmarker.com/remote-meetup/Elm-Remote-Meetup-9?show_live_page=true>
I'm having trouble avoiding circular dependency in elm
For instance I have a Messages.elm and a User.elm
and when I make my messages it requires the User model and some of the commands in my User.elm require Messages
how do I break this out
if they are so tightly integrated the question becomes should they
would it make sense to pass in the message for your commands?
that's how the core library deals with commands, they let you pass in your own messages
Yeah a context or function parameter to configure the call
I just ran into this very same problem and ended up doing exactly as <@U0LPMPL2U> suggested
I'm not sure I'm seeing your solution
