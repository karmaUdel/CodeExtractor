U3SJEDR96 : <@U0U6ML22H> hm, what's the actual goal? Is this for caching on CI or something?
U0U6ML22H : maybe it's a XY thing: we have several `Main`s, for as much apps. We have a webpack script for each. We also, sometimes, want to start them all at the same time, still serving all the files on port 3000. So we build them all at the same time. When we do that normally, it's quite fast. When we do that after cleaning elm-stuff, it takes forever (almost literally: i never lasted enough to see it go through, because it took too long). When that happens, we build one individually, then another, then start the entire thing again, and it works fast enough
U0U6ML22H : I'm thinking that when we start all the builds in parallel, they all try to build core/third-party elm-stuff at the same time
U0U6ML22H : but that's speculation, I have a limited understanding of the compilation phase
U0U6ML22H : I'm just thinking that if we could prebuild the elmi/elmo files not relating to our modules before starting our parallel thing, it'd work much better
U0U6ML22H : whaddaythink?
U3SJEDR96 : hm, I suppose you can test if it would even have impact before actually figuring out how to do it: build all one by one, remove the relevant folder from build-artifacts and trigger the `build-all` script again
U2LAL86AY : <@U0U6ML22H> that sounds .. :grimacing: i'm trying to understand what's the value of having all this elm apps sharing the same elm-stuff folder ?? Why not keep them separate apps in the first place?
U0U6ML22H : They share data, modules, etc. 
U0U6ML22H : <@U3SJEDR96> will test, yeah, should have thought about it 
U2LAL86AY : ```port createNewDocument: Encode.Value -&gt; Cmd msg
port printDocument : () -&gt; Cmd msg 

createNewDocument: Document -&gt; Task err msg 
printDocument: Task err msg 
```
i want to chain this `create` and `print` steps, in one step. 
Because sometimes i need `both one after another` - some other times i need to `create the document` - make `some updates`, then `print`. 
```
someCmd: Cmd msg
someCmd = 
    createNewDocument
        |&gt; Task.andThen (\ what? -&gt; -- what to add here?
                printDocument

            )
        |&gt; Task.attempt (\ result -&gt; some result handler )
```
how can i chain `port` calls? Because ports return `Cmd msg` not `Task err msg`.

U0CLDU8UB : You can't chain port calls, you can only handle a Msg produced by a port.
U2LAL86AY : hmm.. thanks
U2LC0U8JY : I am wondering if anyone has a setup for using elm in an angular application?
U2LC0U8JY : so my question is more about the project setup.
U5ABF3BH7 : I see. Thanks! That is very useful
U58EMTHRN : Hi everyone,I need to embed a third-party js library that will modify a part of my domtree, the same way a text editor would. In my case it is a payment client-side SDK, which I have no choice but to use.
If my view produces a "div" with a given ID and some content, the next update after the third-party library changes it, all its changes will be dropped.
How can this problem be solved ?
Can we produce nodes that will not be updated by elm after being created ?

U0RPQMZ9S : <@U58EMTHRN> there is a trick to do this! although it can be a bit sketchy
U58EMTHRN : I saw CKEditor uses webcomponents, I was hoping something else is possible.
U0RPQMZ9S : You can wrap the element you embed the widget in with a function from the `Html.Lazy` module. This tells elm's diffing algorithm to leave that part of the dom alone unless the model changes
U0RPQMZ9S : And if the model does change somewhere while the user is interacting with the widget, you can use `Html.Keyed` to tell elm to reuse the nodes already in the dom
U58EMTHRN : xilnocas: oh that's clever!
U0K92QFST : in this case if that div should definitely never change you can just say `lazy neverChangingDiv ()`
U0K92QFST : where the type signature of `neverChangingDiv` is `() -&gt; Html msg`
U58EMTHRN : Thats exactly what I will need! Thanks
U58EMTHRN : On a related subject, is there a way to send out a Cmd after a given div was initially rendered ? I need to call some javascript only once the div exists...
U0RPQMZ9S : Is it a div rendered by elm? or your 3rd party sdk?
U0K92QFST : you could probably do something like `on "load" (Json.succeed DivLoaded)`
U0K92QFST : not 100% sure that would work
U58EMTHRN : The div is rendered by elm, then the 3rd party will put its own things inside
U58EMTHRN : the "load" event is for any element ?
U0RPQMZ9S : What you want to do is wrap your js port callback in `requestAnimationFrame`. This has the effect of making sure elm's render step is finished before your ports fire. When this is in place you can just call out to the port in your update function like normal
U58EMTHRN : nice. Thanks a lot!
U0RPQMZ9S : Happy to share my knowledge of these dirty hacks :smile:
U0RPQMZ9S : waaaaaay better than hacking in native/kernel code though
U0K92QFST : you're right <@U58EMTHRN>, "load" is only for the window. my bad.
U0K92QFST : <@U0RPQMZ9S>'s solution is good tho :smile:
U58EMTHRN : xilnocas: going kernel/native was the very last thing I would do...
U5AQ585NH : Just published elm-multiselect package at the elm-packages: <http://package.elm-lang.org/packages/inkuzmin/elm-multiselect/latest>The process is extremely nice and convenient!

U2LAL86AY : wow super! <https://inkuzmin.github.io/elm-multiselect/>Thank you :smile: :heart:

U5AQ585NH : <@U2LAL86AY> any suggestions and/or recommendations are very welcome! As well as bug reports and feature requests, of course.
U2LAL86AY : yes, i will use it in one of my projects very soon. :smile:
U5AQ585NH : Cool! Look forward for your feedback!
U5WS7CJLV : <@U5AQ585NH> (or anybody that knows if he's gone) what does the "!" in the update function of the minimal example do?
U5WS7CJLV : <https://github.com/inkuzmin/elm-multiselect/blob/1.0.0/example/src/MinimalExample.elm>
U5FU80S06 : <@U0H8PND27> Do you support Tachyons verbose? <https://github.com/tachyons-css/tachyons-verbose>
U5FU80S06 : *All* -- What does it take to have a dedicated _Tachyons_ Slack channel?
U0FP80EKB : <@U5WS7CJLV> <http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Platform-Cmd#>!
U0FP80EKB : It is shorthand for `(model, Cmd.batch cmds)`
U5WS7CJLV : thanks
U0FP80EKB : For the record, I strongly dislike it. But, that’s just me. ¯\_(?)_/¯ :slightly_smiling_face:
U5WS7CJLV : why do you dislike it?  I just discovered its existence, so of course I have no views. :slightly_smiling_face:
U1ANV9FML : <@U5WS7CJLV> See <http://faq.elm-community.org/#what-is-this---construct-in-the-code>
U23SA861Y : operators like that are obtuse and unreadable
U0FP80EKB : Just a stylistic thing for me. I’m not a fan of infix operators like that, because then people have to ask “what is this operator” . I prefer `(model, Cmd.batch cmds)` to be explicit
U23SA861Y : I believe it's actually being removed
U5WS7CJLV : ah yes, it's not very intuitive
U5WS7CJLV : and ! is used for so many things
U5WS7CJLV : bookmarking that FAQ page btw
U0H8PND27 : Not yet but it would be pretty easy, <https://elmlang.slack.com/archives/C0CJ3SBBM/p1499450081834592>
U5FU80S06 : *All* -- What does it take to have a dedicated _Tachyons_ Slack channel?
U5WS7CJLV : <@U0FP80EKB> it looks like Ivan is making a list of commands from one command using square brackets and then flattening/folding the list into one command - but why?
U5WS7CJLV : or have I misunderstood?
U5WS7CJLV : ! [ Cmd.map HOI subCmd ]
U5WS7CJLV : oh, probly cause ! only works with a list of commands
U3SJEDR96 : so `a ! b` == `(a, Cmd.batch b)`. Since `batch` takes a `List cmd`, you need `b` to be a `List cmd` :slightly_smiling_face:
U5WS7CJLV : right
U0FP80EKB : Yup
U2LAL86AY : <@U5WS7CJLV> i think you can take a look at the rocket operator. for example:```
SendOtherRequest -&gt;
            model
                |&gt; doSomethingToModel
                |&gt; doSomethingElseToModel
                =&gt; [ Http.send someOtherRequest ]
```
<https://github.com/NoRedInk/rocket-update>
It's my favorite now :heart:

U23SA861Y : no, god no. No more custom operators
U0FP80EKB : Actually that operator is a bit more useful as it has a concrete use case rather than just syntactic sugar
U2LAL86AY : i think is very useful when having `div [ style [ ("width", "height") ] ]` it's much better to have `div [ style [ "width" =&gt; "height" ] ]` so write : `=&gt;` instead of `(` `,` `)`
U2LAL86AY : it's faster for me
U3SJEDR96 : Agreed. Note that `(=&gt;) = (,)` with the same fixity as `|&gt;` and `&lt;|`
U3SJEDR96 : Also `Dict.fromList [ "foo" =&gt; "bar", "baz" =&gt; "klux" ]`
U23SA861Y : you literally save a single keystroke
U2LAL86AY : :smile: please just try it for a few hours. Then you owe me a fat beer :smile:
U3SJEDR96 : Sure, but that's not really what it's about, at least for me. It expresses, visually, a relationship between things, which tuples encode quite often. Using it for things that don't express that relation would be confusing, tho.


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
