U41NK9BM4 : It's also strange that  you have `'int' object is not callable`, eh!
U41NK9BM4 : So there might be issues on both sides.
U41NK9BM4 : Mmmm.
U41NK9BM4 : return 201
U41NK9BM4 : This smells wrong.
U59AF21LJ : Oh you're right I should look into that as well.
U5XHTBFS6 : Indeed it is. Flask expects that if the return from a view is a single value, it should be a string with the content
U41NK9BM4 : So the plan is, fix Flask side using Curl, then switch to Elm
U41NK9BM4 : Python never lies.   :slightly_smiling_face:
U59AF21LJ : <@U41NK9BM4> Done. I just switched to a string as <@U5XHTBFS6> suggested. (The `201` was shamefully pasted from a stackoverflow example)
U5XHTBFS6 : From flask's doc:
<http://flask.pocoo.org/docs/0.12/quickstart/#about-responses>
```
    If a response object of the correct type is returned it's directly returned from the view.
    If it's a string, a response object is created with that data and the default parameters.
    If a tuple is returned the items in the tuple can provide extra information. Such tuples have to be in the form (response, status, headers) or (response, headers) where at least one item has to be in the tuple. The status value will override the status code and headers can be a list or dictionary of additional header values.
    If none of that works, Flask will assume the return value is a valid WSGI application and convert that into a response object.
```

U59AF21LJ : Yeah, so now `curl` works perfectly. So we can assume the server side is correct.
U41NK9BM4 : Great.
U59AF21LJ : Thanks for this part/
U5XHTBFS6 : Can you attach the full code? Maybe the problem is not on the `save` value, but where it is used.
U59AF21LJ : <@U5XHTBFS6> I guess I should trim it to a minimal example.
U5XTFSTFV : Hi, Maybe somebody here can help meIs elm debouncing msgs send to the update function?
I'm triggering an onScroll event on a div and it only gets passed to the update ftn once the scroll event  ends.

U5XHTBFS6 : <@U59AF21LJ> I see you reverted to using `<http://Http.post|Http.post>` with `Http.jsonBody`. Can you try again with the raw `request`?
U59AF21LJ : <@U5XHTBFS6> Doesn't change anything if I have```
saveTree : StoryTree -&gt; Cmd Msg
saveTree tree =
  let
    url : String
    url = "update"

    value : Encode.Value
    value =
      Encode.object
        [ ("name", Encode.string "Tom")
        , ("age", <http://Encode.int|Encode.int> 42)
        ]

    body : Http.Body
    body =
      Http.jsonBody value

    request =
      Http.request {
        method = "POST",
        headers = [
          Http.header "Content-type" "application/json"
        ],
        url = url,
        body = body,
        expect = Http.expectString,
        timeout = Nothing,
        withCredentials = True
      }
  in Http.send PostBack request
```

U5XHTBFS6 : hmmm i'll try running locally here and see if I can spot something
U59AF21LJ : <@U5XHTBFS6> I'm really afraid it's due to caching even though I'm using private browsing.
U59AF21LJ : <@U5XHTBFS6> <@U41NK9BM4> I have to apologise. It was a caching problem…
U41NK9BM4 : As I said: "Usually when things like this happen usually there's some stupid, obvious, tiny thing that screws up everything"
U41NK9BM4 : :grimacing:
U59AF21LJ : Yeah.^^
U5W50TZ6C : Hi! I'm trying to model a file system in Elm. Here's what I have so far:```
type alias File =
    { name : String
    , content : String
    }


type alias Folder =
    { name : String
    , children : Items
    }


type Items
    = Folder
    | File
    | Nothing
```
But this isn't valid; Elm sees *two* `Folder` and *two* `File`. What is the proper way to do this?

U59AF21LJ : <@U5W50TZ6C> You probably have to give different names to Folder and File in the definition of Items.
U41NK9BM4 : Glad you made it to work, <@U59AF21LJ>


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
