```
you could check for that set in your dispatch function and have that return ::foo
remember your dispatch function doesn't have to just return the thing
ah i see, then wire in a defmethod like :a-set and :b-set
`(defmulti foo #(if (contains #{...} (:my-type %)) ::foo (:my-type %)))`
then `(defmethod foo ::foo ...)`
I think that is the simplest choice (with a better dispatch function of course, that's just the basic concept)
great, that's much nicer than what I was planning to do
any particular reason you use ::foo .. are defmulti's global or something?
because who knows what value you would find, and namespaced things are safer? you can use any placeholder you like of course
<@U0W0JDY4C> part of my instinct to use ::foo there is to indicate "this keyword is something my namespace cares about and maybe not generally relevant in other contexts"
i should probably be doing more of that. thanks again for the help
Yeah, just hoping :clj: won't follow down the same bad (class)path
I use emacs and my cofounder uses Cursive. Is there a way to reconcile the formatting styles between the two so our code is consistent?
my team uses the cljfmt plugin
linter?
best thing would be a linter as a post-commit hook
<@U066TMAKS> Cursive is fairly customisable for formatting settings. You can probably match most things that Emacs does
<@U066TMAKS> If you have specific issues, let me know over in <#C0744GXCJ|cursive> and I'll help you.
with cljfmt I can even account for people that never remember to auto-format
before we started using it, we had repeated problems where person x would indent code totally wrong, and person y had parinfer turned on and moved all the parens around based on the indentation  - there were two human failures that kept happening but just making sure cljfmt got applied to the repo was easier than fixing the bad code practices
I think it's actually Emacs whose behavior seems to have more special cases. wondering if there's a premade setting for either Cursive or Emacs? (surely I'm not the first one to try to reconcile the two)
from what i understand emacs will be more rigid and stubborn than cursive
that's why cljfmt is so great, it doesn't care what your editor is
^
and by rigid i mean less adaptable
<@U051SS2EU> You still really need your editor to agree with it though, or you will suffer pain.
^ <@U0567Q30W> agree. and x2 with your partner's code. the worst is when Emacs indentation breaks parinfer on Cursive- that actually changes the program's behavior
i'll bet your easier path is making cursive behave like emacs
<@U0567Q30W> just running it before I check my code in catches little stuff, and my editor is smart enough to catch changed files
always running it before commit, and always running it after a pull or merge is a pretty smooth workflow, even when some people forget to run their editor's indentor at all
to be clear I'm not just running cljfmt, I'm using the optional `fix` arg that edits all the files in place
<@U051SS2EU> cljfmt seems like a good first step, thanks for the suggestion. <@U0567Q30W> gonna give cursive formatting settings a shot
<@U066TMAKS> I think the main one that's required to make Cursive line up with Emacs' initial settings is _Settings-&gt;Editor-&gt;Code Style-&gt;Clojure-&gt;General-&gt;One space list indent_
which channel is best for posting links to talks?
err, found <#C13E20NF5|videos>
Maybe my google-fu is failing me, but is there a simple way to unzip a file on disk to a a directory using Clojure? Everything I've found is about unzipping a single file, but I have a zip that has several. I want to unzip it and then read a specific one into memory.
Trying to build an ETL tool that downloads a zip file, unzips it, reads a specific file into memory, and then does some stuff to it.
Ideally I could use .getNextEntry or something similar and read to memory when it matches a regex
<@U5TBHUM8B> if you just need the information there is no need to unzip to files - you could read it file directly from the zip into memory
Oh that would be ideal! How would I do that with a specific file that's in the zip file? (One of multiple that are zipped in the archive)
I'm live translating this from some groovy code I wrote a while back (we'll see if I get lynched here), but you can iterate through the entries within a zip file and then call the ZipEntry `(.getInputStream zip-file zip-entry)` and then I believe you should be able to use slurp to get the contents of the input stream
to find the right entry within the zip you can filter on zipEntry.name
cigrainger: give me a few - will fire up a repl and see if I can cook up some example code. I'm not senior with clojure but I have spent a lot of time with file manipulations and zip files : )
Awesome! Thanks. I'll play around with your suggestion re: ZipEntry as well. That was the general direction I was going but I couldn't find much and I'm not great with clojure yet either.
<@U4VDXB2TU> Have a look at <https://stackoverflow.com/questions/5419125/reading-a-zip-file-using-java-api-from-clojure#5419767>
Can anyone explain this behavior?
<@U28947274>  Yes, don't use map to execute side-effecting functions like println since map basically returns a lazy seq
you can wrap your map's in a (doall ... ) call, but it would be more idiomatic to use doseq for this case
