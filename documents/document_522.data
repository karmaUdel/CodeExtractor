U3SJEDR96 : `BoidsGenerated List Boid` &lt;-&gt; `BoidsGenerated (List Boid)`
U5ZC6V535 : I spent half an hour + on this :disappointed: :stuck_out_tongue: Heh Thanks <@U3SJEDR96>
U5ZC6V535 : I started working on Elm a couple of days ago and i havent got used to the syntax fully yet
U3SJEDR96 : Yeah, to be honest, it's a little surprising that `type alias Foo = List` is even valid, but we'll get there, eventually :slightly_smiling_face:
U5ZC6V535 : Yeap :slightly_smiling_face:
U5ZC6V535 : Is there a way to combine messages from different files? For instance I have a Seed file which includes a message ‘BoidsGenerated' and I want to include that as a case as part of my main ‘update' function in my Mail.elm file. I could of course defined it in the Main.elm file (or to a Messages.elm file).
U3SJEDR96 : `type Msg = BoidsMessage Boids.Msg`, though it might be easier to pass the message to use to `generateBoids : (List Boid -&gt; msg) -&gt; Cmd msg`
U3SJEDR96 : which would make `generateBoids tagger = generate tagger (list 5 boidGenerator)`
U5ZC6V535 : Yeah, but the second option means that I will have to define the msg type in say the Main.elm right?
U23SA861Y : In all cases you will need a message type in Main.elm
U5ZC6V535 : Yes. So that means that in Main.elm you will generally have something like: 
```
type Msg =
  | ...
```

and that will have all the types for the whole application?

U4872964V : In the Elm architecture, there is only one message type, the one that the update function from the `Html.program` accepts
U4872964V : you may of course choose to subdivide that type in whatever way you like, but it's still only one type
U5ZC6V535 : <@U4872964V> Got it, so the main update function that retrieves the message and handles the different cases has all the cases of the application right?
U4872964V : yes, the update function handles all messages, but the same applies here, you may subdivide it into smaller functions in any way you like
U5ZC6V535 : Yeap, its what I do now actually. What I was trying to do is somehow combine different messages from different files into the main update function. But that is not really possible.
U4872964V : well, that's what you do when you make sub-types to the main Msg type
U4872964V : but you are right that the `Main` module conceptually needs to know everything there is in your application
U5ZC6V535 : Yes, thanks for you help <@U3SJEDR96> <@U4872964V>
U2J1FUQTZ : Probably another stupid question, trying to build a very stupi parser with elm-tools/parser that parse something like "(a12'?ds,rtye12*)" in ["a12'?ds","rtye12"] my code is  `semsall : Parser (List String)semsall =
    inContext "semsall" &lt;|
        Parser.sequence
            { start = "("
            , separator = ","
            , end = ")"
            , spaces = spaces
            , item = sem
            , trailing = Optional
            }


spaces : Parser ()
spaces =
    ignore zeroOrMore (\char -&gt; char == ' ')


sem : Parser String
sem =
    inContext "sem" &lt;|
        keep zeroOrMore isNotComma


isNotComma : Char -&gt; Bool
isNotComma c =
    c /= ','`

U2J1FUQTZ : I get this error `&gt; run semsall  "(p,adsd23Aad)"Err { row = 1, col = 14, source = "(p,adsd23Aad)", problem = BadOneOf ([ExpectingSymbol ",",ExpectingSymbol ")"]), context = [{ row = 1, col = 1, description = "semsall" }] }
    : Result.Result Parser.Error (List String)`

U2J1FUQTZ : the terms beetween comma could be a string with any char except commas of course
U3SJEDR96 : Yeah, that `sem` doesn't look correct; it's consuming the `)` at the end and then failing because it misses the end
U3SJEDR96 : try something like
U3SJEDR96 : ```sem : Parser String
sem =
    inContext "sem" &lt;|
        keep zeroOrMore (not &lt;&lt; flip List.member [',', ')'])
```

U2J1FUQTZ : Thx <@U3SJEDR96>
U2J1FUQTZ : Anyone could be so kind to post an example of code showing how to use the function andThen of elm-tools/parser ?
U3SJEDR96 : Hm, it's hard to find a self-contained example
U3SJEDR96 : I've used it for recursive stuff where I build up a list of intermediary terms, though I think there's an example of that in the docs, too
U3SJEDR96 : <https://github.com/elm-tools/parser/tree/2.0.1#delayed-commits> specifically, in that part
U3SJEDR96 : it's not that different from `Json.Decode.andThen`, though the use-cases tend to be a little different
U3SJEDR96 : Is there a specific reason for why you need help with `andThen`?
U3SJEDR96 : It might be easier to walk you through your use-case and hope it "clicks".. :slightly_smiling_face:
U2J1FUQTZ : The terms between commas in the case I shown before could contain also "(" and ")" I'm trying to change the first and the last parenthesis to something else before using the parser


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
