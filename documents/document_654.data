U0EUHKVGB : This _is_ a custom assertion
U37HUSJ4R : what if I wanted
U37HUSJ4R : `.age   &gt;&gt; ifNumberIsGreaterThan (Age, "Age must be a whole number.")`
U37HUSJ4R : where `ifNumberIsGreaterThan` is my own function
U0EUHKVGB : ```ifNumberIsGreaterThanTen : error -&gt; (number -&gt; List error)
ifNumberIsGreaterThanTen error =
  \number -&gt; if number &gt; 10 then [] else [ error ]
```

U0EUHKVGB : which is the same as `ifNumberIsGreaterThanTen : error -&gt; Validator error number`
U37HUSJ4R : :smile:
U0EUHKVGB : Does that make sense to you?
U37HUSJ4R : yeh, you’ve been a great help. thanks kind sir
U4JT89FGB : validate’s `all` function says, regardless the number of errors, return me all of them
U2LAL86AY : hmm this is odd:```
test s =
    Just s
        |&gt; Maybe.map
            (\s -&gt;
                Debug.log "just clause" s
            )
        |&gt; Maybe.withDefault (Debug.log "nothing clause" "")

```
and when i run it:
```
&gt; test "bu"
nothing clause: ""
just clause: "bu"
"bu" : String
&gt;
```

U3SJEDR96 : <@U2LAL86AY> eager language :slightly_smiling_face:
U3SJEDR96 : every expression that has all of its parameters available is executed
U2LAL86AY : i was reling on the `Maybe.withDefault` to do a `Debug.crash`.-&gt; and every time when it run - even with a `Just value` - it was crashing my app .. good to know :smile:
U3SJEDR96 : Yeah, you'd have to do that in a `case of` (or, better yet, _not at all_ ; ))
U2LAL86AY : ok so just to underestand - `case of statements` are not eagerly evaluated. And also `functions that are generated by function application`. And also `if else` i think. 

But any other expressions will have this behavior?

U2LAL86AY : hmm also doing this doesn't help :```
test s =
    Just s
        |&gt; Maybe.map
            (\s -&gt;
                Debug.log "just clause" s
            )
        |&gt; Maybe.withDefault
            (let
                _ =
                    Debug.crash "nothing clause" ""
             in
                ""
            )
```

U0LPMPL2U : I don't think `let`  `in` is lazy
U23SA861Y : I like how all of this discussion is necessary simply because a function with sideeffects exists.
U37HUSJ4R : is there an online tool where you can see the compiled JS elm creates?
U37HUSJ4R : something like <https://lebab.io/try-it>
U4F64AKQV : <@U37HUSJ4R> Not that I know of, but I will usually compile with elm-make and then look at the JS output in my text editor when I need to do that.
U0EUHKVGB : There was something that luke hadmade a while ago to do just that.
U0EUHKVGB : <@U37HUSJ4R> There is this documentation that I started writing to cover some of the info required: <https://github.com/eeue56/elm-ffi/tree/master/docs#elm-compiled-documentation>
U3KSN5MAL : what was that library for checking an old model against the new model and discarding anything that doesn't match?
U3KSN5MAL : oh, is it elm-validate?


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
