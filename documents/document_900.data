U5LNXQHN3 : I know you can use a `with` block in some other test packages, but to be honest this seems like a weird thing to be testing for
U5LNXQHN3 : You could probably use `self.assertIn("donation", item.__dict__)` or some similar abomination if you really want a one-liner
U5ZPMJA06 : <@U5LNXQHN3> Yeah it sounds weird, but actually the object under test is some kind of container giving both attribute and keyed lookup access to a set of properties, and I need to test whether the right exceptions are thrown during lookup of a nonexistent property.
U5LNXQHN3 : Sounds like a bad idea to me. But if I had to write tests for it, I'd just use the __dict__ check directly. Or `hasattr`.
U5ZPMJA06 : <@U5LNXQHN3> Bad idea? You have a better idea? Thanks for the `hasattr` tip! This is what it's all about, the `Bunch` object: <https://github.com/motoom/bunch>
U5LNXQHN3 : I think that is unnecessarily blurring the lines between a container and a type. If you don't know what attributes a type has, then you don't really know what interface it provides, which makes it a very awkward object to work with
U5ZPMJA06 : <@U5LNXQHN3> I use it declutter my source code. Basically it is a `dict` like object where you don't have to type `["` and `"]` all the time. So I can write:```
U5ZPMJA06 : ```for r in bunched(recordset): # Where recordset is fetch_all() of DictCursor   if r.salary &lt; 3000:
      print r.name, "could use a raise"
```

U5ZPMJA06 : Psycopg2 has a `NamedTupleCursor`, which provides the same syntax.
U5LNXQHN3 : In that case, at least the schema is documented elsewhere. But I don't like it.
U5ZPMJA06 : The alternative would be:```
for r in recordset:
   if r["salary"] &lt; 3000:
        print r["name"], "could use a raise"
```
You prefer that?

U5LNXQHN3 : Maybe
U5ZPMJA06 : I can work like that. You have a job for me? :stuck_out_tongue_winking_eye:
U5LNXQHN3 : In the general case, yes. It's not exactly a great hardship. In a database context, it might be nice to have a type that directly reflects the DB schema - which is what we have ORM for
U5ZPMJA06 : btw, the `NamedTupleCursor` gets its attribute names from the fields behind the *SELECT*. I.e. `select name, salary from Employees` would result in *.name* and *.salary* attributes on the tuples in the resultset.
U5LNXQHN3 : I just really dislike things that attempt to cut down on a bit of typing by ruining the interface. Several parsers do it, like BeautifulSoup. lxml.objectify is even worse
U5ZPMJA06 : I wouldn't call it ruining. It makes the code more readable to me. I prefer dot notation over index lookup with a string.
U5LNXQHN3 : The dot notation and the index lookup carry different information. `x.y` implies that `y` _must_ exist. `x["y"]` implies that a value for "y" might exist, if someone added it earlier.
U5NMSURAQ : Except xml node is not a container, but an object :confused:
U5ZPMJA06 : Ah, we have a different view on that too. When I see `x["y"]` in code, I assume the programmer knows that an *y* value is present, or should be present (punishable by KeyError). When I see `x.get(y)`, then I know the programmer is trying to communicate to me that *y* perhaps does not exist in *x*.
U5LNXQHN3 : it's an object that contains an arbitrary number of other objects
U5LNXQHN3 : <@U5ZPMJA06>  But the point is that you see it's a dict, and that the contents vary
U5LNXQHN3 : Obviously you can make assumptions if you know what's been added, but the syntax tells you the nature of the structure you're working with
U5ZPMJA06 : <@U5LNXQHN3> Yeah there you have a point, `x["y"]` certainly conveys that *x* is a dict.
U5ZPMJA06 : ...or at least a mapping type on which you can do indexed lookups.
U5ZPMJA06 : Now wouldn't it be fun to override `__getitem__()` to call a memberfunction instead of looking up a value, and have `__call__()` lookup an indexed item?
U5ZPMJA06 : You could write `a["save"]` to call functions and `a("age")` to lookup values.
U5ZPMJA06 : :joy:
U63VCB8AH : I'm trying to use Pycharm CE with Flask but I can't seem to configure a interpreter to run `virtualenv/Scripts/flask` or `python -m flask run`. Is there anyway to run Flask applications inside Pycharm without having to buy the pro version?
U1BP42MRS : <@U63VCB8AH> I believe you just need to set the interpreter to the virtualenv Python, then in the run panel you use flask as the script
U1BP42MRS : That's not an exclusive pro feature as far as i know
U63VCB8AH : How would I reference flask as the script?
U63VCB8AH : <@U1BP42MRS>
U63VCB8AH : <@U1NSCAY6R> not possible
U1BP42MRS : Send a pic of what you see
U63VCB8AH : I'm also stuck on Windows...
U1BP42MRS : What does that have to do with the pycharm config?
U1BP42MRS : Send a pic of your pycharm window
U1BP42MRS : The config
U63VCB8AH : Default, which points to my main.py
U63VCB8AH : Ignore the script parameters, it was just me playing around
U1BP42MRS : Script should point to flask from the virtualenv, if you're in one
U1BP42MRS : Flask is the script/executable
U63VCB8AH : in `env\Scripts`?
U1BP42MRS : `which flask` would show the path on posix
U63VCB8AH : yes that's right
U63VCB8AH : but I can't use that in Pycharm since it is an EXE file
U1BP42MRS : Then be sure to set the working directory in that same window to the project root (where main is)
U1BP42MRS : On mobile, I'll check back when I get to my office
U63VCB8AH : Windows BS
U0LSCQQNR : one reason I suggest using a virtual machine
U0LSCQQNR : eg, docker or vagrant
U0LSCQQNR : anything other than java or C# on windows is more trouble than its worth, in my experience
U63VCB8AH : agree <@U0LSCQQNR>
U5LNXQHN3 : I have Flask running just fine in PyCharm on Windows. Not at the machine now, though.
U63VCB8AH : Community Edition <@U5LNXQHN3> ?
U5LNXQHN3 : No, but I don't expect it matters
U63VCB8AH : Pro set's everything up automatically, used it at my last job
U5LNXQHN3 : I never use automatic setup. I would have done it manually
U5LNXQHN3 : I just filled in the fields as in Joe's screenshot
U63VCB8AH : do you remember what use set the Script file to?
U5LNXQHN3 : No. I might just have a file which contains `app.run()`.
U5LNXQHN3 : Apparently that's not recommended any more, probably because it doesn't play nicely with other aspects of Flask that I'm not a fan of
U5NMSURAQ : kylotan: not a fan of many things
U5NMSURAQ : :slightly_smiling_face:
U1BP42MRS : Only with flask
U5LNXQHN3 : it is true, I'm pretty unhappy with most software I work with
U63VCB8AH : haha
U63VCB8AH : i'm sticking with `app.run()`` for now
U5VGKQ2SY : plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')Takes arguments in sets of 3:
&gt; (x-val, y-val, 'color/shape')
Each plots a function.

So `t, t, 'r--'`  corresponds to one line, `t, t**2`, 'bs'` to another, and `t, t**3, 'g^'` to another.

'r--', 'bs' and 'g^' indicate color and shape. example: 'g^' stands for green triangles.

U4BMZ90T0 : Best way to approach calling function using a dictionary to store the func object as a value. I'm doing this in a class so it doesn't quite work properly the traditional way of literally just using the function object name as the value.
U2AQJNW1G : Hi, I'm streaming audio from a radio station and want to same time save to upload it to dropbox, But couldn't upload to dropbox, however it perfectly stream and saves on  local drive, but can't upload to dropbox, here is the script ```        stream = urllib.request.urlopen(self.stream_url)        start_time = datetime.datetime.now()
        # open('stream.mp3', 'wb') as dest
        dest = open('recording.ogg', 'wb')
        while (datetime.datetime.now() - start_time).seconds &lt;= 30:
            print((datetime.datetime.now() - start_time).seconds)
            #dest.write(stream.read(1024))
            try:
                meta = client.files_upload(stream.read(1024), 'recording.ogg', mute=True)
                print("Uploaded " + 'recording.ogg')
            except:
                print("Failed to upload " + 'recording.ogg')```

U0LSCQQNR : What is client?
U5MV460AG : Hey guys, I've been working on a project, it's about searching for some news daily in GNews through Python... Here's my code:```from lxml import html
import requests

response = requests.get("<https://news.google.com/news/search/section/q/cfe> méxico")
# Check for request status
if(response.status_code == 200):
    pagehtml = html.fromstring(response.text)
    # Search for news headlines
    news = pagehtml.xpath('//div[@class="KaRWed"] \
                            /div[@class="deQdld"] \
                            /c-wiz[@class="PaqQNc"] \
                            /c-wiz[@class="lPV2Xe"] \
                            /a[@class="nuEeue"]/text()')
print("\n".join(news))```

U5MV460AG : But it doesn't print anything. I tried _almost_ everything :disappointed:
U42LCHFD2 : that xpath looks invalid
U5MV460AG : Sure? Python doesn't raise any exception
U42LCHFD2 : also you need to add `%20` in between `cfe mexico`
U5MV460AG : Then, still not working :disappointed:
U42LCHFD2 : I think all you need is `//c-wiz/div/div/c-wiz/a/text()`
U42LCHFD2 : `//c-wiz/a/text()`or `//*[@class='nuEeue hzdq5d ME7ew']/text()`



in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
