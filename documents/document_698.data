U3SJEDR96 : either way, your json representation doesn't need to match the elm structure word for word
U17R1GD96 : ```subscriptions : Model -&gt; Sub (Result String Model)subscriptions model =
    payload (Json.Decode.decodeValue payloadDecoder)
```
still some errors for main ```main : Program Never Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }```

```Function `program` is expecting the argument to be:

    { ..., subscriptions : Model -&gt; Sub Msg }

But it is:

    { ..., subscriptions : Model -&gt; Sub (Result String Model) }```

U3SJEDR96 : yeah, because you removed `&gt;&gt; Payload` :stuck_out_tongue:
U3SJEDR96 : which is the part the says "take the result of the function on the left and apply this function on that; with `Payload : Result String Model -&gt; Msg`
U17R1GD96 : Like this? ```subscriptions : Model -&gt; Sub (Result String Model)subscriptions model =
    payload (Json.Decode.decodeValue payloadDecoder) &gt;&gt; Payload
```

U3SJEDR96 : `payload (Json.Decode.decodeValue payloadDecoder  &gt;&gt; Payload)`
U3SJEDR96 : you could alternatively write that like so: `payload (\json -&gt; Json.Decode.decodeValue payloadDecoder json |&gt; Payload)` if that makes more sense to you :slightly_smiling_face:
U0CLDU8UB : and also, `subscriptions : Model -&gt; Sub Msg`
U17R1GD96 : It’s OK. I understand &gt;&gt;. This has no errors: ```subscriptions : Model -&gt; Sub Msgsubscriptions model =
    payload (Json.Decode.decodeValue payloadDecoder &gt;&gt; Payload)```

U17R1GD96 : My update still does not work. This is wrong: ```update : Msg -&gt; Model -&gt; ( Model, Cmd Msg )update msg model =
    case msg of
        Payload data -&gt;
            { model | themeUri = data.theme_uri }
                ! []```

U17R1GD96 : ````data` does not have a field named `theme_uri`.
67|             { model | themeUri = data.theme_uri }
                                     ^^^^^^^^^^^^^^
The type of `data` is:

    Result String Model```

U17R1GD96 : the same the `{ model | themeUri = data.themeUri }`
U3SJEDR96 : `data` at that point is a `Result String Model` because if someone sends you bad values, you want to handle that somehow, too
U17R1GD96 : yes, just found it may contain errors I have to handle somehow
U3SJEDR96 : so you can```
case msg of
  Payload (Ok data) -&gt; { model | themeUri = data.themeUri } ! []
  Payload (Err error) -&gt; { model | error = error } ! []
```

U3SJEDR96 : or something along those lines
U17R1GD96 : Almost working. My model is not changing. I have init with some initial fake data. My  model should be overwritten by update, right? It looks like the model is keeping only that init data values.
U0J1M0F32 : I would imagine that the model is not _actually_ being updated then for some reason. Either the wrong action is firing or there is some sort of issue in the `update` function.
U0J1M0F32 : Maybe I missed it, where is the code that kicks off the Ajax request?
U17R1GD96 : My JS is using React ```import React from 'react'import Elm from 'react-elm-components'
import { connect } from 'cerebral/react'
import { state } from 'cerebral/tags'
import { HeaderModule } from '../../elm/dist/elm'

export default connect({
    themeUri: state`app.theme_uri`,
    headers: state`app.header`,

  }, function Header ({themeUri, headers}) {

    function setupPorts (ports) {
      ports.payload.send({themeUri, headers})
    }

    return &lt;Elm src={HeaderModule} ports={setupPorts}/&gt;
  },
)```

U17R1GD96 : I don’t have AJAX calls.
U17R1GD96 : I pass data from JS
U0J1M0F32 : Ah I see the port now.
U0J1M0F32 : Have you tried loading the elm app through the elm-reactor or using `Debug.log` inside the `update` function to see what events are firing. My gut says something is not sending the payload to the app.


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
