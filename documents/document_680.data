```
this is yoru orginal code
so if `include is None`, it goes to the `else` and checks that `entry` be an element of `exclude`
right?
sorry... NOT an element of `exclude`
Right.
but if include NOT None, you are checking that `entry` not an element of `exclude`
I could remove the if include and include it in the next if
I'm just saying that `if include:` doesn't seem to have any bearing on what the condition does.
because entry still has to NOT be an element in `exclude`
so essentially this function returns False when entry is in exclude, regardless of anything else that happens.
If include isn't an empty list then the entry is included if not in exclude. If include has entries and the entry matches one of the items in include then the entry is included if not in exclude.
If only blacklist include everything not in blacklist.
brb
The first if is necessary as well, because without it the code would see if entry is in an empty list, which it never will be and the lack of whitelist means nothing gets through.
It might be better if I changed those variables names to whiltelist and blacklist.
