```
ok but now
In my company, we are transitioning from Rails to Elm for the FrontEnd. So far, things have been built thinking only about the front end, building  models that make sense for the front end, and without thinking too much about the back end. Now I have the task of refactoring so that we have a better separation between data and views.  I am having a hard time because it is all tightly connected in several layers. For example, one view touches different database models, and the same database model is represented in  different views. I am a bit confused as what is the best way to encapsulate that in the view. Let's say I have an Address model, an Organization model and a person model (I have many more but it is to simplify). Both the organization and person have a contact information which in turn has phone numbers (which are all models). And all those fields are in one view. A person and an organization have an address.How would you design your view model to reflect that complexity, making it easy to encode and decode.  I know I am to separate your data from the view, but I am hesitant on what is the right way to go about it. Any advice? Sorry for the long paragraph.
It's yelling at me for this function type
