U2LAL86AY : doh! simple stuff - now i know :smile:`on "click" &lt;| Json.map (ReceiveWidthOfParent id) &lt;| DOM.target &lt;| DOM.parentElement &lt;| DOM.offsetWidth`

U0F01KLV6 : <@U3S3S7J06>: Try `(Point x y as pt)`
U0F01KLV6 : or `((Point x y) as pt)`
U3YDBDP4Z : `elm-format` adds the standard space of 2 lines between a comment and a function.Is that really correct formatting?

U3YDBDP4Z : Looks terribly awkward to have such distance between a comment related to a function and the function in question
U0EUHKVGB : Use a `{-|` comment
U0EUHKVGB : it’s only single line comments that that happens to
U3YDBDP4Z : Alright. But is it a bug or is it deliberate?
U3YDBDP4Z : No matter if it's a single or multi-line comment, having such a space between a comment and the thing the comment is related to feels wrong.
U0F01KLV6 : <@U3YDBDP4Z> It's deliberate. The reason is that comments between functions which are not "function comments " (`{-|`) are used as dividers.
U0F01KLV6 : So...```
{- TYPES -}


type Person = Person String Int


{- FUNCTIONS -}


{-| This function extracts the name from a person -}
name : Person -&gt; String
name (Person name _) = name
```

U0F01KLV6 : It only happens at top level though. Single or multi-line comments within function bodies or type definitions do not get that treatment.
U0F01KLV6 : Pay attention to the `|` in the comment above the function. That's the difference. Same thing applies to type definitions as well.
U0GPGFQQY : Is it possible to implement this function in a point free style without mentioning `b c d` arguments?
```
f : (a -&gt; b -&gt; c -&gt; d -&gt; x) -&gt; a -&gt; b -&gt; c -&gt; d -&gt; ( a, x )
f fn a b c d =
    ( a, fn a b c d )
```

U0F01KLV6 : Wouldn't think so
U0F01KLV6 : why would you want to?
U0GPGFQQY : Just as a brain bending exercise. `a` is an `id`, and `fn` is a constructor of the record, I want to have tuples with `(id, record)` to create a Dict out of them
U17MSA88M : <@U0GPGFQQY> does elm have something like tuple sections?
U17MSA88M : if there is a tuple constructor function you definitely can
U0GPGFQQY : `(,)` is a tuple constructor
U17MSA88M : `(,) :: a -&gt; b -&gt; (a, b)`
U17MSA88M : ?
U0GPGFQQY : Yes, this would construct a tuple


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
