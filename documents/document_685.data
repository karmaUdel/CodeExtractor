```
<@U2BS4M1RV> yeah that is consistent with what I'm seeing after some further reading, but why would that happen when following the Windows instructions?
<@U4EEBC4SJ> can you link the instructions you are following?
<https://docs.pytest.org/en/latest/getting-started.html>
Hmm. But pip was happy when you ran the install?
Hey, I've been working with python lately, and I think I have most of the basic stuff down, but I'm kinda lost as to where to go moving forward, and so I wanted to ask if there was any advice for going 'beyond the basics', and really getting confident with python and everything it has to offer. Thanks!
Build something with it!
doesn't sirbot have a command for what's next?
nice <@U66HHFPT2> :point_up:
It's `/file &lt;name&gt;`
ah ok
Is the interpreter set up right? 
yeah. I'm restarting the IDE
pycharm can't handle my code :100:
too good for it.
Haha, woot
:dagger_knife: 
ha. Missed the `{}` around the json response. It wasn't that wrong
Haha, yep. I was looking at general structure vs details 
Hi guys! Anyone who knows how to set up queued or delayed mails in django? Kind of like how you do in Laravel
<@U68BS678X> have you looked at something like django-celery?
<@U47HK8BS8> No - I will have a look at it. Thanks!
So far, I have just placed an env.py file in the root of the project, and imported it into my settings.py.
yeah I actually wrote a little tool to simplify doing that in my python projects: <https://github.com/jimjkelly/yaep>
but the basics if you don't want anything fancy is just `os.getenv(KEY, default)`
oh, and loading the `.env` file I suppose
Okay, thanks <@U47HK8BS8>
Yeah, pip was happy, confirmed that all of my dependencies are there too. I am puzzled
I'm using Flask and have fallen victim to the surprisingly common circular dependency issue. Do I pretty much have to use an app factory pattern to get around this?
<@U5CGPBF0U> pretty much, if you have source to look at we may be able to suggest something else, but my guess is the factory is the simplest way
I also found that it helped to avoid various flask extensions, because they would usually mean dragging in a further dependency on the `app` object to implement whatever behavior the extension added
<@U5CGPBF0U> Here is a sample app we deprecated from <#C2FMLUBEU|community_projects> - <https://github.com/pyslackers/website-old>
<@U1BP42MRS> Well, my current code works, _but_ I'm making use of `from models import *` and using any other method of import fails. I heard that importing like that should generally always be avoided though. I'm not entirely sure why that is (yet) so I'm not sure if it's worth fussing over or if I might as well continue with it as is.
<@U5LNXQHN3> I'm using several Flask extensions, but I suppose the issue in this case comes from Flask-SQLAlchemy specifically. I'm wondering why the extensions exist if they're so prone to these problems though? Is the user just expected to use an app factory pattern? I'm surprised that even the most basic Flask tutorials seem to have this issue. The first tutorial I ever did wouldn't run due to a circular import error, even though the tutorial didn't mention any error and seemed to produce the correct results of the app running as if there was no error.
It's discouraged because it pollutes the namespace with everything from `models`
Including its imports
All I can say is that I stripped Flask-SQLAlchemy out for exactly this reason. Other people managed to coerce it into working. :slightly_smiling_face:
