U04V4HWQ4 : `get-in`
U0NCTKEV8 : I think most people prefer `get-in`
U0NCTKEV8 : I like the uniformity of `-&gt;`
U0NCTKEV8 : you can stick some functions in there
U0NCTKEV8 : `-&gt;` may also be faster if you are dealing with nested records
U0NCTKEV8 : `-&gt;` is a syntax short cut, it is gone at runtime, `get-in` is actually a function and will run and exist at runtime
U0NCTKEV8 : and you have this key vector that has to exist at runtime
U050ECB92 : I'll add one consideration: keyword accesses add quite a bit of bytecode `(-&gt; :a :b :c :d)`
U050ECB92 : probably won't matter tho -- but if you care about jvm inlining i'd look into it
U0NCTKEV8 : sure, but at that point do you want to be dealing with nested maps?
U173SEFUN : <@U0W0JDY4C> you can do that with specter very easily:```
(def L '(((:a :b (:c :d (10))))))
(transform (nthpath 0 0 2 2 0) inc L)
;; =&gt; (((:a :b (:c :d (11)))))
```

U1CTH1TUY : I prefer `get-in` because it makes the intention clear, we know that the first argument is a map, and that the second argument is a path. That information is lost with `-&gt;`, also, that means you can't pull the path, `[:b :c :d]` from a data source or generate it without your own macro, because you can't apply to `-&gt;`
U0NCTKEV8 : sure, that is the flip side to what I said about the key vector
U0NCTKEV8 : if it is constant and known at compile time (which it seems like it almost always is) then keeping it around at runtime is (admittedly an insignificant) waste
U050ECB92 : true that
U0W0JDY4C : specter keeps popping up here and there with some nice solutions.. i'll have to look more closely around its api
U3JURM9B6 : <https://aws.amazon.com/lambda/faqs/> &lt;-- java is listed as supporrted language; does this mean one can do "clojure -&gt; java" for lambda instead of "cljs -&gt; js" ?
U050MP39D : <@U3JURM9B6> my guess is that startup times might be problematic for many lambda use cases
U050MP39D : but yes, you definitely *could*
U116D37KN : Both clj and cljs can be used, but yeah, startup times become a thing.
U050MP39D : just a lot of the use cases I can think of for lambda, a very fast starting VM such as the js vm is more appropriate than jvm+clj
U0NCTKEV8 : to be clear, by java they mean jvm, clojure doesn't compile to java like clojurescript compiles to javascript
U0NCTKEV8 : clojure generates jvm byte code
U050MP39D : and with the incredible support cljs has for the node ecosystem these days... I would choose whichever vm makes the most sense for the scenario. which is a pretty amazing thing to be able to choose while keeping the language constant :slightly_smiling_face:
U3GJHS5DY : <https://aws.amazon.com/blogs/compute/clojure/>
U3GJHS5DY : relevant ^ though im sure most have seen it
U3JURM9B6 : zylox: thanks for link, first time I'm seeing it
U1CTH1TUY : <@U3JURM9B6> <@U050MP39D> the data from this talk suggest it might not be as big of a deal as you'd assume (if you are running lambdas frequently enough to limit cold starts): <https://www.youtube.com/watch?v=GINI0T8FPD4>
U0NCTKEV8 : <https://github.com/clojure/clojurescript/wiki/Differences-from-Clojure> just gets larger and larger
U050MP39D : <@U1CTH1TUY> yes! true. my assumption is that most people using lambda are using it for reasonably infrequent operations (to take advantage of paying for only what you use). but if that's not the case then clj could be perfectly fine
U0NCTKEV8 : somethings I know are different between clojure and clojurescript because I follow the jira issues aren't even on the list yet
U3JURM9B6 : actually I'm using it to not think about scaling
U3JURM9B6 : i.e. if my problem can be decomposed into an 'obviously parallel' setup, then AWS just scales everything for me
U3JURM9B6 : and I no longer think at the grainualarity of machines
U1ACUMJKX : if you create a language binding to a library written in another language
U1ACUMJKX : how do you license it?
U1ACUMJKX : do you keep the license of the source library?
U1CTH1TUY : depends on the license of the source library. If you aren't distributing their library, you might be able to license it however you want. Not something that can be answered in the abstract
U0LUEAS3Z : Hi all, I'd like to fan out the same input sequence to several transducers and collect the results into a single sequence... is there a function for that?
U60259LCB : Any one experience with Lanterna?  I'm looking into making a snake game, and would like to know if it can do a non blocking ui
U06CM8C3V : <@U60259LCB> I believe it does, haven't used it in a while, but I see from the docs it has both `get-key` and `get-key-blocking` — the first returns nil if there's no keypress waiting to be read.
U5NAUMCAD : Hi all, Is there any way to mock a function in clojure. For example I have this function: ``` (defn a [x]
        (utils/count x)) ```

I need to write a test, but I do not know how to mock the utils/count  (for example)

U5NAUMCAD : what if I have several functions inside the same function and I need to test it
U5NAUMCAD : ``` (defn a [x]        (utils/count x)
        (utils/count2 x)
        (test/other x)) ```

U1G9D4WE7 : <@U5NAUMCAD>, you can use `with-redefs` to "re-bind" a symbol
U1G9D4WE7 : here is a useful testing pattern: <https://stackoverflow.com/questions/31157889/clojure-unit-testing-with-redefs#31309070>
U11BV7MTK : but in that function there's nothing to test
U11BV7MTK : it sounds like you want to test `utils/count`
U5NAUMCAD : it is an example!
U11BV7MTK : gotcha. just making sure
U5NAUMCAD : :smiley:


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
