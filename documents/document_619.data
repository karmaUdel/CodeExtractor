```
it's like umm yeah that is an a
It is a problem with comparable objects, it's just the compiler error is entirely not helpful
so <@U0GR6DHEK> it does seem to be an issue with user defined types not being comparable
Thanks. I think I can switch to a list easily enough and create a `member ` function 
There already is a `List.member` function, isn't there?
Yes there is
interestingly List.member accepts any type. Does that imply that every type is equateable?
No, when you call List.member, the type of the value you are searching for has to map the element type of the list.
Those `a`s must be the same type for any particular call.
They can vary between calls to `List.member`.
yes, but that implies that (==) is a valid operation on any type. `a-&gt;a-&gt;Bool`
"that all types belong to the type class equatable", so to speak
Yeah, I suppose `==` is defined on all types
Just unexpected
Yeah. That didn't occur to me either. Especially since `comparable` is a restricted set of types.
comparable also includes ordering
but yeah, unexpected
I suppose it has to do with the type class unioning issues
<http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Basics#equality>
yeah, I knew it exploded for function types
Interesting... fun way to make Elm blow up
Oh I'm too late to the party.
I was going to demonstrate the "breaks on functions" issue <https://ellie-app.com/3QNjCJx73HYa1/0>
but I had to rebuild the error from memory :stuck_out_tongue:
First time I ran into that error it was a little scary. Easy to fix, but I had to think for awhile about where exactly it was coming from and why it only showed up _sometimes_.
Also behaves "unexpectedly" on "types that don't behave like regular Elm types", like `Json.Encode.Value`
which isn't really that big of a deal; until you run into it :wink:
Late yesterday I was asking about `Json.Decoder.oneOf` and why I was having trouble parsing a list of floats.  After further study, I realize I didn't understand the code, and now I have something that works just as I wanted: <https://ellie-app.com/3QPJnGTtfGha1/0>
Now this image below is a bad one, but i will make it better soon.
Thank you :smile:
i've build a repo here: <https://github.com/AionDev/xray-time-traveling-debugger>
<@U0F7JPK36> ^ I remember you were looking into improving the debugging experience in Elm. You folks might want to talk, before someone jumps in and spends a buttload of time
<@U2LAL86AY>, hey, if you've written something up then please put it in a gist.
Long form posts like that are not well suited to Slack.
It makes it very hard to give feedback to you.
yep i created that repo
will make a gist soon
That repo is fine, I didn't click on it yet cause I was still reading your post :wink:
ah and i forgot to mention - when calling the same function multiple times in the same update step - clicking on it in the second pannel - will show every instance of it's calling in order. So nothing is hidden
Anyone using IntelliJ? Am I assuming correctly that it does not support showing type errors (eg missing cases), only syntax errors?
]
<@U2LAL86AY> will read it tomorrow! interesting
