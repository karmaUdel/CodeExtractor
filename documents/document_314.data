```
oh
is basically how it works under the hood
nice
So, you want to show your calendare if it exists, otherwise show nothing?
exactly
so you can combine a Maybe.map and a Maybe.withDefault
`Maybe.map Calendar.view model.calendar |&gt; Maybe.withDefault (text "")`
Ok i see what i was missing
official documentation is not that clear about this concept
At least for a newcomer
it kind of assumes you'll just pick up the patterns as you go along
maybe
yes, it could use a pipe example
I guess it just assumes you'll use a `case` ?
It's convenient to know that `map |&gt; withDefault` is equivalent though
nothing wrong with using a `case` statement though
yep case is fine but in the end I will have a lot of components, it seems to verbose for something I'll do a lot
if you do it a lot you can make your own general function
probably let's play with maybe.map for now
you'll notice that alot of things have map on them
List
Dict
Task
`Maybe.Extra` has a function `unwrap : b -&gt; (a -&gt; b) -&gt; Maybe a -&gt; b`
So you could say `Maybe.Extra.unwrap (text "") Calendar.view model.calendar`
I'm friendly with map ruby is my defaut langage
<@U0LPMPL2U> functions with three or more parameters are harder to understand though
fair
but it's a matter of taste i suppose
i like pipelining
I'd say `case` vs `map |&gt; withDefault` vs `unwrap` are probably context dependent for readability
x2 only replaces infix operations with prefix operators of x1
