```
ok… I have that fixed… tho I have to say I have no idea how / why the lexer coloring function works the way it does. Also seems buggy. If I type `prin` it in red. It should go black when I add the final `t` for `print` but then I have a word that is 80% red and 20% black. DrRacket doesn't seem to re-lex &amp; color the whole word as it changes?
<@U5KU1HNKY> DrRacket's colorer depends on the lexer giving it information to back up just enough to recolor. I'm guessing that something about the lexer prevented the colorer from going pack to the "p" to re-lex from there. Exactly what went wrong is difficult to guess, although I recall implementing error tokens wrong once or twice, maybe because it's easy to have the wrong backup or not have the error range covered by a single token.
What if we drop the `raco pkg` tests? Has that set of test ever exposed a problem via Travis that wasn't discovered otherwise (either through DrDr or other tests)?
<@U3NJS8H7C> I think we probably have at some point, but maybe not enough to be worth it (or worth trying to make the `raco pkg` tests faster)
let me look at the history for the pkg code
<@U3NJS8H7C> Travis exposed some problems in the `raco pkg` tests themselves, and it's possible that <https://github.com/racket/racket/commit/a5f6bf34dc75e33dd8a09d6ee7c9ea509395feb2> was motivated by Travis tests (but hard to tell now)
that seems to be it that I can find
Not sure that's enough of a positive record to be worth running 80 min of tests on every commit
<@U0702F2CE> I don't recall the immediate motivation there, either. Turning off the `raco pkg` test for Travis seems right to me.
<@U3NJS8H7C> this is what I'm working from: <http://beautifulracket.com/basic-2/the-syntax-colorer.html> — seems straightforward to me. I would have thought it would always be going back some to do coloring… I do find it rather odd that it is creating a `basic-lexer` on each call. What if the language needed stateful info to tell?
I'll look a little more, but to answer your last question, the coloring API supports an extended mode to let you thread through state (i.e., store-passing), so the colorer can keep track of which state to send back if it needs to resume from a particular point
I do totally believe you :slightly_smiling_face: and I understand that my code caused SQL_BUSY status codes to be converted into raised exceptions, breaking automatic retry. I'm just concerned that I'm effectively blind to seeing that at my end.
zenspider: I'm not clear what code you're running. Do you mean that you're using "basic-2-tutorial.zip" unmodified?
sorry, no. I have implemented all of basic up to the point of implementing the completed colorer, so `#lang basic` w/ my own main and basic/colorer. Lemme see if I'm fully pushed
OK. I am: <https://github.com/zenspider/schemers/tree/master/br/basic>
<@U3SEVDPJT> I started with the current master branch and used `hub am` (`hub` is a github-enhanced version of the `git` command) to add your changes. The effect should be the same as starting with your PR branch and rebasing with the current master branch. (And probably the same as just doing a merge, except without the merge commit.) How is the build failing? Out of memory, or something else?
Ok, I guess I'm actually unclear on how to get into the state you showed. But I also notice that keywords are given the style `'no-color`, which seems to mean "don't change the color" – that is, if "prin" was formerly red to show an error then it won't be changed to a different color if it becomes part of "print"
that's exactly the scenario. I can make a video to show it… but put `print” up there, it'll turn a proper color, backspace once and wait until "prin” goes red, and then type "t”. Only the "t” is black at that point.
sorry to bother you with this. mbutterick isn't on anything online and doesn't respond much to my MANY reports against his content
well… damn. I can't reproduce the red color right now either… I'm gonna have to back up to figure out why/how
OK. Yes, I can reproduce. I had an extra commit from halfway through the next section which adds variables to the lexer. If I roll that out, then the 80% red 20% black thing sticks. If I change the no-color line to symbol, then it does redraw properly. Is there a "normal-but-not-no-color” value? I don't see where drracket's color semantics are documented
OK. I used `ag` and dug up `syntax-color` module and decided a fair default was `other` and it seems to have fixed it… I'll send that as feedback to BR
I'll give this another try when I have access to a different Windows machine. Are you satisfied with the most recent PR commit push?
<@U3SEVDPJT> yes, I'll push them, thanks!
<@U3QF0EM0E> did you have more comments on <https://github.com/racket/rackunit/pull/41> or shall I merge?
go merge!
huzzah!
<@U3NJS8H7C> since the rktio changes, this test and a few like it have been failing on and off: <http://drdr.racket-lang.org/41014/pkgs/racket-benchmarks/tests/racket/benchmarks/shootout/typed/echo-non-optimizing.rkt>
I realize that's not the most helpful diagnostic information
It's also not clear if this is a concurrency bug in the tests that just started happening because of your changes, or if it's a real bug in Racket
<@U0702F2CE> Is port number 8888 reserved in DrDr for that test?
It's the only occurrence of 8888 in `racket/racket`
I guess non-registration would be a `listen` error anyway
is there a reservation mechanism in DrDr that I've forgotten about?
There's some list of ports somewhere. Maybe it's not actually registered other than being in the list.
Looking at that test, though, isn't there a race between the client starting and the server listening?
it does look like a race
looks like the race was there from the beginning, in <https://github.com/racket/racket/blob/d615bccb08274398f347b78a1dd746fe40eb3671/collects/tests/mzscheme/benchmarks/shootout/echo.ss>
I'll add some synchronization
<@U0702F2CE> what's the racket'y way of doing that? I don't find an equivalent to C/unix `select`, which is what I'd normally reach for…
<@U5KU1HNKY> `sync` is the equivalent of `select`
but in this case I think I can just start the client later
no, that's wrong too
heh. sure.
hrm. sync is on _any_ data you send through the channel?
that's nice
`sync` is very nice
and more composable than select
but `break` is an exception, not some sort of event you send through?
hrm… I can't tell how the break stuff gets fired
is it more idiomatic to send off a `break-thread` to all your child threads or to send through some sort of `stop` datum/event to all of them?
<@U5KU1HNKY> why would you need to do that?
thinking of the worker model… fire off a pool of threads to do work, throw them things to work on via `sync`, then when you're done shut them down by telling them to stop somehow
might be backwards thinking in racket land
mostly you do `thread`-per-connection
worker thread pools are more useful when stopping and starting threads is expensive and the resource overhead per-thread is significant
for green thread systems like racket's that's typically not the case
right, I use pools of Racket places in some situations
since those are expensive
a package providing a nice place-pool abstraction might be useful
<@U0702F2CE> out of curiosity, do you know of any multicore webservers written in racket with places?
I think I've seen examples, but not that I recall offhand
<@U07SJGB4H> I've played around with that idea in the past. I think it would be a bit more straightforward if a tcp listener could be sent over a place channel.
<@U3ZV4UG3T> how'd it work out? my first impression is that it seems like individual places should be responsible for binding to OS ports, but I haven't really done more than idly daydream about the problem
You definitely could have different places bind to different ports, but then you'd need a proxy layer in front of that, right? You can also leave a single place in charge of accepting connections and handing them off to workers (which is what I was toying around with), but that seems like a bit lightweight of a task for a place.
proxy layer would definitely be needed, yes
specifically I was thinking of how to make a Racket web service with the SEDA architecture <https://en.wikipedia.org/wiki/Staged_event-driven_architecture>
<@U3QF0EM0E> :party: :party: :party: <https://github.com/racket/rackunit/pull/48>
<@U3QF0EM0E> <http://drdr.racket-lang.org/41016/racket/share/pkgs/redex-test/redex/tests/run-tests.rkt> looks like it's caused by your changes
<@U3QF0EM0E> responded to #48, assuming your approval means it's good to merge
death to the monads :tada:
yep! I just had those little questions
thanks for all the reviews :)
of course, I'm just a concerned user of Rackunit. Thanks for all the improvements
would it be inappropriate for rackunit to depend on `syntax/parse`?
I doubt it would be a problem, given that `syntax/parse` is in `base`
I'm less worried about package dependencies and more worried about test execution speed slowing down if loading `syntax/parse` is expensive
I guess that's a valid concern, yeah
but I have no idea how expensive loading `syntax/parse` is
It should be fine
Is there a way to "run” an input file as if it had a `#lang xxx` line at the front… basically say eval this port/file/whatever with xxx lang?
I want to write a more "traditional” style of tool, then have that slurp into racket as if it were a `.rkt` file with a proper `#lang`
<@U5KU1HNKY> if its a module language (and doesn't have a special reader), you can read the file in, construct a module with the language xxx and the read in stuff as the body, and eval that. might be an easier way though
<@U5KU1HNKY> If the module language does have a reader, you can call it directory, but another option is to use `input-port-append` to add the `#lang` line. In any case, to handle relative paths,  you'll want to set `current-load-relative-directory` while reading; to get the module declaration associated with the original path, set `current-module-declare-name` during `eval`.
Is the order of the marks of continuation-mark-set-&gt;list specified?  <http://docs.racket-lang.org/reference/contmarks.html>
<@U086VDRBK> the innermost mark is first, I think
Makes sense.
discussion about 2d syntax on Hacker News: <https://news.ycombinator.com/item?id=14657857> (cc <@U3NGSC6AF>)
whee!
it's actually pretty positive
There has been some Racket talk on HN lately.   <https://hn.algolia.com/?query=racket&amp;sort=byDate&amp;prefix&amp;page=0&amp;dateRange=pastWeek&amp;type=all>
are there macro forms of IO that don't take thunks? (iow, use `expr ...`) just feels klunky
also, I'm trying to do <@U3NJS8H7C>'s suggestion of using `input-port-append` to prepend a `#lang` line … Will location info be for the concatenation or for each port being used? IE, will error info be off-by-one?
