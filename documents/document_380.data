U2SR9DL7Q : chasote: i've had similar concerns. I've basically decided to hedge my bets on elm. At the moment, I work primarily as an independent consultant, building desktop apps. I'll eventually branch into web development, and I plan on going Elm first. 
I think FP is no longer some weird sub-niche in the web development world. I also realize that elm was the best way for me to learn the hodge podge of waffle that is javascript through its interaction with elm... where I can digest it all in sane bite sized chunks.

U635238TG : i like that approach. you are saying learn js as needed in complementing elm? I also wonder if anyone is bootstrapping their own small companies/services while using elm. I don't need much to get by so if there aren't jobs out there for me, I wonder if I could create my own position. I'm basically just trying to rationalize why I'm going to stubbornly stick with Elm. Every experience I've had with it so far has felt right except for the employment opportunities.
U2SR9DL7Q : for employ by someone else... i'd like to think their hiring process looks for someone who has experience building good, stable, performant sites, using good dev practices, over someone who can write _fancy_ javascript. learning new languages is easy, but developing good code discipline and principle is much more valuable. Elm is good for that.
U635238TG : make my portfolio so good they can't ignore me. Got it! Hahaha. (That actually is my plan/approach though)
U2SR9DL7Q : for all its "flaws", python's syntax matters interpreter means I never write sloppy looking code, even when I'm making throw-away scripts. I just never learned how. With Elm, I can never add complexity to one part of my code, and leave it unhandled by the rest. That's *really* important I think.
U635238TG : Yes, and that is my "back up" I think. Take the good habits and approach developed from Elm and transition it to a more hireable language only when and if I have to. It should give me a leg up over other junior web devs hopefully.
U635238TG : back to the tutorial! Thank you for the chat
U2SR9DL7Q : no problem! i return to my crappy website i'm building.
U638BAUJZ : Executing elm-test throws runtime exception: Cannot read property 'href' of undefined
U638BAUJZ : <https://stackoverflow.com/questions/44909872/executing-elm-test-throws-runtime-exception-cannot-read-property-href-of-unde>
U2W6RTGQH : ```main: Html msg main =
    text "elm"
```
what does msg mean here?

U23SA861Y : It is the type of the object to be dispatched back to the update function. In this case it is unspecified because text does not use it.
U2W6RTGQH : `List String` means list with values in string format, do you mean each type can have different values like html can have msg as values?
U23SA861Y : I mean that `List a` represents a `List` with a parameterized type `a`. It is the value the list contains. That a could be any type `List Int` `List String` `List (Int-&gt;String)`
U23SA861Y : In the case of html it needs to be one single type, but it could be any type
U23SA861Y : typically it is a user defined union type and by convention that type is typically called `Msg` note the difference in capitalization
U2W6RTGQH : got it thanks, but why doesn't `Html Msg` work ?
U23SA861Y : `Html Msg` would say that this dispatches messages of concrete type `Msg` which it does not
U2W6RTGQH : but Html msg also does same right ? I'm sorry i'm very new to elm and type system, getting confused.
U3YDBDP4Z : `msg` is like a placeholder for an unspecified value. While `Msg` is a specific type
U23SA861Y : I'm not sure where it states it in the docs (or if it does so) but type parameters are uncapitalized and concrete types are capitalized
U3YDBDP4Z : It's the difference between "I don't know what I'll get but I'll take it" and "I'm expecting this specific thing and will be cranky if I don't get it"
U23SA861Y : <@U2W6RTGQH>  have you used java or c++ in the past?
U2W6RTGQH : no, only JS
U2W6RTGQH : `concrete types are capitalized` sure?
U3YDBDP4Z : Yup
U2W6RTGQH : thanks.
U3YDBDP4Z : Unit testing a `case`, how can I ignore all but the branch I care about testing?
U23SA861Y : you can put catch all branches in like `_-&gt;`
U23SA861Y : avoid them in the mainline code but its fine for testing
U3YDBDP4Z : I still need to return something from that catch all. Not a big deal though.
U23SA861Y : right, return someting which would fail the test because you are presuming it should never get there
U3YDBDP4Z : Does a decode `Result` error return any value?
U3YDBDP4Z : Or is it just `Err -&gt;` in a case branch?
U3YDBDP4Z : Wondering if it's possible to see what the error was
U17MNKY3H : It'll have a string message AFAIR.
U17MNKY3H : An error `Result` can't really be created without a value.
U3YDBDP4Z : ```getResultValue result =
    case result of
        Ok value -&gt;
            value

        Err err -&gt;
            err
```
Says the type annotation should be `Result a a -&gt; a`

U3YDBDP4Z : Would have thought it could say `Result String String -&gt; String` or something
U17MNKY3H : Elm does that. It finds the most general type it can for a function.
U17MNKY3H : It will accept a less general one though.
U3YDBDP4Z : Ah, my annotation worked just as well :slightly_smiling_face:
U23SA861Y : your annotation can be more specific
U17MNKY3H : Better wording. :slightly_smiling_face:
U3YDBDP4Z : Hmm… Invalid JSON : Unexpected token t in JSON at position 53.```
json =
                        """
                        {
                          target: {
                            elements: {
                              email: {
                                value: "<mailto:jane@mail.com|jane@mail.com>"
                                }
                              }
                            }
                          }
                        """
```

U17MNKY3H : JSON needs to have string keys.
U17MNKY3H : `{ "target": ... }` vs `{ target: ... }`


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
