```
Yeah, or do the filtering at the view level, which is what I would start with.
Or `data` and a `filter` which is a union type of the kind of filter, then the filter is applied dynamically. (Only works if its a small data set)
Ask why you need to keep the filtered data vs just the filters and apply them when rendering
`type Filter = All | Unread | Replied | None`
caching the filtered data feels like an optimization that leads to this potentially unnecessary complexity
yeah this, apply the filter at render time
so don’t have a filter msg?
We have a situation like this in our system, and we just store which filter they want (since we have a set number)
I would have a filter msg `Filter FilterType`
instead of doing it in the update, do in a view type function?
Then, in your model, store the `currentFilterType : FilterType`
Save what filter they are looking for, not the filtered data.
Then, when rendering the view, filter the data
nice
I like it!
`filter : FilterType -&gt; Data -&gt; Data`
The general approach is to calculate everything you can until you need to optimise. Then insert a cache.
just implemented that soluition <@U0FP80EKB>, really nice and elegant!
It's basically also how elm-sortable-table works, fyi.
if time comes to optimize, a light salting of `lazy` and possible `keyed` should do the trick
yup
hey everyone.  i have a quick question.  does Elm have any particular solutions for problems related to windowing, a la Reacts `fixed-data-table` or `react-virtualized`?
what are those?
Just something like `List.filter` ?
From a quick look at `react-virtualized`'s GitHub page, it seems kinda like Elm's `Html.Lazy` ?
<@U3GHR2G91> what do they do?
is it something like  <http://package.elm-lang.org/packages/FabienHenon/elm-infinite-list-view/latest> ?
let's say you have a long list
with sorting or something like that
ahh, hold on, brb
I bet the answer is `List.filter` :slightly_smiling_face:
don’t jump to conclusions, folks
<@U3GHR2G91>, what are you trying to do?
let's say you have a very long list, it doesn't make sense to pay the cost of rendering every item
these solutions give you an aperture (i.e. calculate the portion of you rlist that is visible in browser)
it can vastly improve perf
<@U3GHR2G91> have you run in to this as a real issue in Elm yet?
nope
but i have in React, using immutable data structures
i could put together a POC pretty easily
That would be best :slightly_smiling_face:
There are many possible ways to solve a problem like this, hence why you got three different answers.
However, the best way to know how to solve your problem is to have an example of _your_ problem :slightly_smiling_face:
has anyone worked on a stats package in elm?  even basic descriptive stats?
I found <http://package.elm-lang.org/packages/myrho/elm-statistics/latest>  but it looks like just a bare beginning
<@U0JFGGZS6> I'm using that for R7 but would appreciate more :slightly_smiling_face:
I played around with implementing quantiles last night off the wikipedia page
(amazing how little stats you need to know if you have some formulas/algorithms!)
but ended up with a lot of questions in my mind about api design. which is maybe where I should ask these questions -&gt; <#C2MFMKHDX|api-design>
<https://runelm.io/c/66v>
You probably don't need a phantom type there, tbh. It doesn't really add anything at this point :slightly_smiling_face:
OK, this was one of my basic questions. With stats functions you often need a sorted list/array. And often you need it at several different points. So rather than sort multiple times, it makes sense to require that the calling context pass it in sorted.
The phantom type there was a way of enforcing that the passed in list is sorted
I'm not sure I understand how that type enforces that the list is sorted? :slightly_smiling_face:
you would have to call `Quantiles.sort myData`  to pass your data in to `quantile`
at present it doesn't but if this was in a module and the FVector constructor was not exported then it would have to be obtained by that modules sort call
right exactly
Ah, so it's a way to tag data to say "this has already been through our sort function" ?
right
nice!
that's clever, I wouldn't have thought of that :thumbsup:
