```
this is unreadable.
this is easy to understand.
Ok, i getcha. For my specific usecase with these, it worked out to be fine
I only did it like this because they are only flags that are only ever directly accessed in update
Decoding in Elm for records is generally reliant on having a named type aliases. If you want to write a decoder easily for `SliderOptions`, you would need to create a type alias so that it generates the `SliderOptions` constructor.
and i never had to write any functions on them
but it's easy enough to change
is easier to read
And that means that the type error you get if you try to access the wrong field will be better
My code base is already at about 4.5K lines long so i think i was looking for ways to avoid verbosity
Anyways man i get it :slightly_smiling_face:
i.e `SliderOptions has no field "dfghjk"` rather than `{ rgbo : Bool, rgbl : Bool, hsvo : Bool , hsvl : Bool } has no field "dfghjk"`
Basically, by avoiding making a type alias you're losing out on some the aid that Elm can provide for you :slightly_smiling_face:
Thanks
<@U3KSN5MAL>  re decoders, also this: <http://eeue56.github.io/json-to-elm/>
<@U3LUC6SNS> That's where the conversation arose from :slightly_smiling_face:
I have a search function in the app I'm working.  __After__ a search, I need to do a few things: (1) select the first document in the list of search hits, (2) possible change the app page to display those results. That is, I have to sequence actions.  How do I do this?
yeah we are talking about bugs in it lol
<@U3LUC6SNS> selecting the first document sounds like something that is part of your model? changing the app page too, though, but there you might also want to update the url.. As for sequencing actions - if they can be modelled as tasks, you can use `Task.andThen` to sequence them
