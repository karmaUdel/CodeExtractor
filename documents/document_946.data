U1CDB52RF : twitter: @nickparsons
U1CGSHMGS : Hey everyone :grin: :hand: 

U1CGSHMGS : Github Public API Commiunication With React.Js
<http://codepen.io/n1arash/pen/QEWdwx/>

U1CGSHMGS : <http://codepen.io/arash-kh/pen/YWKOOg>
U1CGSHMGS : Check out my new pens :grin: :innocent: 
U0C1G59MX : Hi guys
U1BC67ULB : you need `set NODE_ENV=production`
U1CDB52RF : Hey all, check out Cabin - A Beautiful React/Redux Tutorial by @getstream_io. Try it out at <http://cabin.getstream.io/?fthr=nick>
U0C1G59MX : Hi guys
U0C1G59MX : any one in the mood to help me?
U0C1G59MX : Hi guys, I'm trying to send a 404 on the server of the route doesn't exists. I'm using `react-router` match function. However, my `renderProps` is always true in the following code :```
  match({ history, routes, location: req.originalUrl }, (error, redirectLocation, renderProps) =&gt; {
    if (error) {
      return res.status(500).send(error.message);
    }

    if (redirectLocation) {
      res.redirect(redirectLocation);
      return; // eslint-disable-line consistent-return
    }
    if (!renderProps) {
      return res.status(404).send('Not Found');
    }
```

U0C1G59MX : this is what my renderProbs is:```
{
    "routes": [
        {
            "path": "/",
            "indexRoute": {},
            "childRoutes": [
                {
                    "path": "/projects/:id/iterations"
                },
                {
                    "path": "*",
                    "status": 404
                }
            ]
        },
        {
            "path": "*",
            "status": 404
        }
    ],
    "params": {
        "splat": "addasd"
    },
    "location": {
        "pathname": "/addasd",
        "search": "",
        "hash": "",
        "state": null,
        "action": "POP",
        "key": "4gcw8u",
        "query": {},
        "$searchBase": {
            "search": "",
            "searchBase": ""
        }
    },
    "components": [
        null,
        null
    ],
    "history": {
        "__v2_compatible__": true
    },
    "router": {
        "__v2_compatible__": true
    },
    "matchContext": {
        "history": {
            "__v2_compaTypeError: Cannot read property 'fetchData' of undefined
    at index.js:42:20
    at new Promise (/Users/Vahid/projects/ocp-demo/node_modules/core-js/modules/es6.promise.js:193:7)
    at fetchData (index.js:38:14)
    at index.js:50:5
    at /Users/Vahid/projects/ocp-demo/node_modules/react-router/lib/match.js:65:5
    at /Users/Vahid/projects/ocp-demo/node_modules/react-router/lib/createTransitionManager.js:118:11
    at done (/Users/Vahid/projects/ocp-demo/node_modules/react-router/lib/AsyncUtils.js:79:19)
    at /Users/Vahid/projects/ocp-demo/node_modules/react-router/lib/AsyncUtils.js:85:7
    at getComponentsForRoute (/Users/Vahid/projects/ocp-demo/node_modules/react-router/lib/getComponents.js:19:5)
    at /Users/Vahid/projects/ocp-demo/node_modules/react-router/lib/getComponents.js:74:5
    at /Users/Vahid/projects/ocp-demo/node_modules/react-router/lib/AsyncUtils.js:84:5
    at Array.forEach (native)
    at mapAsync (/Users/Vahid/projects/ocp-demo/node_modules/react-router/lib/AsyncUtilstible__": true
        },
        "transitionManager": {},
        "router": {
            "__v2_compatible__": true
        }
    }
}
```

U1CDB52RF : <http://blog.getstream.io/cabin-react-redux-example-app-stream/>
U13J58K0T : Does anyone know how do you handle ERR_EMPTY_RESPONSE errors with react.js? I have a component drawing data from a remote API [<https://cosmicjs.com/>] but every time I add it to my app with live data, the server returns no data and fails. there is no way for me to find out what is going on if I cannot debbug as the page timesout.  Any best practices or debugging tools?
U1CDB52RF : Cabin – React &amp; Redux Example App – imgix // <http://blog.getstream.io/cabin-react-redux-example-app-imgix/>
U1MB9DLDN : hi everyone
U1QB8MXC6 : Marc Wensauer <@U1QB8MXC6> 16:52<https://gist.github.com/daslicht/25c6000ee37ca1a32f827b34284a75a6#file-gistfile1-txt-L14>


on first load this.props.url is
valid
but at the second call , from teh setIntervall this.props is

why ?

U0DKUDX7Y : well if I am right.. and you put the setInterval into the constructor it calls only once.. if you want refresh the property state you should use one of the component lifecycle method like componentWillReceiveProps check this<https://facebook.github.io/react/docs/component-specs.html>

U1ZBNTTLL : what is the best way to pass props down a component hierarchy from parent to children without duplication.  Are contextTypes the best way?
U1BC67ULB : what do you mean `without duplication`?
U1ZBNTTLL : I mean so I don't continually have to pass the same props down to each child


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
