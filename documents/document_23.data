U1A6BTMPA : There must be something different between my environment locally and the remote one but I can't figure out what it would be
U0K0TFQLW : I'm not familiar with nginx-clojure, does it setup a classpath for you (and possibly include a different version of clojure)? In the past, I've witnessed systems like that (Storm and Hadoop come to mind) that cause weird dependency issues
U0K0TFQLW : oh, yeah it does
U0K0TFQLW : can you try to add a :provided profile to your project.clj and put your clojure dependency on that
U1A6BTMPA : I'll try that now
U0K0TFQLW : the example for nginx-clojure seems to indicate that v1.5.1+ is okay (and uses 1.7.0 specifically)
U1A6BTMPA : <@U0K0TFQLW> I got the same issue after adding my clojure dependency to :provided :confused:
U090G4C05 : is the <#C0FM7N1SM|quil> channel dead?
U04V70XH6 : <@U090G4C05> I'd say that it's just _quiet_…
U28TJ0DDZ : how can I get the list of protocols which a type implements ?
U1ALMRBLL : <@U28TJ0DDZ> `ancestors` will include protocols implemented, along with superclasses
```
(defprotocol Foo
  (bar [this]))
=&gt; Foo
(deftype Baz [a b c]
  Foo
  (bar [this] nil))
=&gt; user.Baz
(ancestors (class (-&gt;Baz 3 4 5)))
=&gt; #{user.Foo clojure.lang.IType java.lang.Object}
```

U28TJ0DDZ : <@U1ALMRBLL> nice, is there any way to get the methods for each interface or protocol ?
U0GRKUGLQ : is there a version of `run!` to use with transducers? I mean, some fn `run2!` that you use like `(transduce xf run2! init coll)`
U1ALMRBLL : ```(into [] (.getDeclaredMethods SomeClassHere))``` <@U28TJ0DDZ>
U1ALMRBLL : you can `.getName` on those for just the name, you can also call them since you have reflected and have the `Method` objects
U28TJ0DDZ : thanks
U051SA920 : <@U0GRKUGLQ>  `(run! #(prn %) (eduction identity [0 1 2]))`
U051SS2EU : if you look at the source of `run!`, I think `(transduce xf #(f %2) nil coll)` is the most parsimonious thing ```user=&gt; (source run!)(defn run!
  "Runs the supplied procedure (via reduce), for purposes of side
  effects, on successive items in the collection. Returns nil"
  {:added "1.7"}
  [proc coll]
  (reduce #(proc %2) nil coll)
  nil)
```

U0GRKUGLQ : yeah... I thought so too <@U051SS2EU> . and that's what I'm doing <@U051SA920> . I just wanted to know if there was some other fn to use directly, but thanks
U067BPAB1 : I've been doing a bit of reading about functors recently and it just occurred to me that transducers might be exactly that. Only touched the tip of the iceberg so are they really the same thing or is there a counterexample of a transducer that cannot be classified as a functor?
U051SS2EU : `(map f)` can't be mapped over, so it isn't a functor
U051SS2EU : in fact I can't think of any transducer that you can map over...
U050ECB92 : transducers exist outside of collections


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
