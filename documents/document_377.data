Can I do something like  ```view = FirstCallNew.view Model.initwithParams(case_id)``` or something like that. The case_id being the params that help me retrieve my data
?
so, the way you handle the initial render is you appropriately set init you init state such that view renders correctly with that data
Let's say I have my record with all the fields with the values from extracting them with decoding. Is there a simpler way then having to write
all the values. I must be stuck on something stupid.
I don't follow you, you need to be explict about how your data maps to your view
can I write something like init = FirstCallNew.view.init model (where model is what I got from decoding)?
<@U23SA861Y> let me try again
no, your code hasn't even run by that point so how have you decoded anything
init isn't the intial view, it's the initial model and the initial command
also why are all your TEA functions in a module called `FirstCallNew`?
<@U23SA861Y>. I already have a module FirstCallNew,  we started with the new page (how to create a new case). Now I want to create the edit page for a case, which is pretty similar to the new page but with info pulled from the database.
It should be something rather simple, but I don't know how to link my new view to the Elm new view.
My explanation is a bit long... Sorry
are you doing serverside routing or client side?
I am using rails
I get the data from the database
typically what you'll have is some manner of restful endpoint to retrieve and update records via web request and then the app pulls it down and decodes it when it wants to use it
I am doing server side for now, hoping to do client side later.
<@U23SA861Y> Do you have any simple examples?
not off hand no.... at least nothing I can release
Ok, thanks anyways.
Hola <@U23SA861Y> ! Hope you're well. I'm new to Elm and i really love it! How can i limit the result of a List.map? Say i just want 50 results out of 200?
well List.map with operate on the whole list, but you can List.take to grab up to a certain number of elements
`someList |&gt; List.take 50 |&gt; List.map myFunc`
this will take only 50 items from the list and then call map on them
Thanks a lot <@U23SA861Y>. List.take, noted!
<https://ellie-app.com/3KyxztC5J2pa1/0>
