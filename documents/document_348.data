```
or alternatively, you can use a `let...in` block like chadtech showed above
Yeah, I would delcare it top level way before I would declare it in the `let` statement like I did in the example.
Sad that I finished it! Who knew writing JSON decoders in Elm would be such a nice bit o respite
<@U2U94G0QG> Don't worry, now you can use your new found parser combinator powers to parser things other than json.
<@U153UK3FA>, <@U2U94G0QG>, where can I learn about parser combinators?
<@U5QJW0DDE> Types help with the problems you're describing. Watch this talk: <https://www.youtube.com/watch?v=DoA4Txr4GUs>
((In fact I am using <@U0JFXEUCT> 's `style-elements`, so I want to display it in one of those))
<@U48AEBJQ3> I noticed you mentioned  ways of building apps other than passing `model` around. That is what I have been doing, and it has worked for me so far.  However, I'm very interested in learning about alternatives.
<@U3LUC6SNS> for more general parsing you can use <http://package.elm-lang.org/packages/Bogdanp/elm-combine/3.1.1/Combine> you'll notice that the concepts there are very similar to those used in Json.Decode
Personally, I'm partial to `elm-tools/parser` which is... super nice, and really quite performant
- `maybe : Decoder a -&gt; Decoder (Maybe a)`
can someone tell me how this is useful? `type Something a = Something`
Kind of depends on where you saw that. If it's in something that has native behind it, that may actually hold data (examples: virtual-dom, elm-benchmark, ..). If you saw that elsewhere, that's a phantom type and it can be pretty useful to enforce constraints at compile-time, though it will generally hold some data. You can read about that a bit more here: <http://package.elm-lang.org/packages/joneshf/elm-tagged/latest>
thanks <@U3SJEDR96>
the reason that, for virtual-dom, it isn't just `type Node = Node` is so you can enforce a consistent msg type at compile-time.
Thanks I will be watching that this morning 
What is the best way to find the size of the DOM/view. My elm application runs inside an iframe (cross-domain) and I want to make sure the iframe resizes after load
<@U61FZV5EK> I think you can use Window module, use subscriptions to check/listen on resizes: <http://package.elm-lang.org/packages/elm-lang/window/1.0.1/Window>
someone correct me if I'm pointing in the wrong direction :stuck_out_tongue:
what is this syntax: `SetEmail email -&gt; { model | email = email}` it's not an annotation (no colon) and it's not a function definition (no equal sign)
Where did that come from? Context would help :slightly_smiling_face:
around 19:20 at <https://www.youtube.com/watch?v=DoA4Txr4GUs&amp;app=desktop>
oooh, that's just a branch from an `update`
oh ok
