U5ZAJ15P0 : <@U051SS2EU> sorry, I think I am missing something. Can you give me a code example of what you mean?
U051SS2EU : hmm
U5ZAJ15P0 : Just a quick snippet here on Slack
U051SS2EU : OK - I was just looking at this right now, sorry about the distracting details, but the big picture structure should be illustrative of what I am saying ```(defrecord Transmitter [transmit from user-data creator to journey routing]  IFn
  (call [this] (.invoke this [nil this]))
  (run [this] (.invoke this [nil this]))
  (applyTo [this coll] (.invoke this (first coll)))
  (invoke [this [routing-override message]]
    (let [updated (into this message)
          routing (or routing-override routing (first journey))]
      (.invoke this routing updated)))
  (invoke [_ routing-override message]
    (let [{:keys [transmit generic]} message
          message (dissoc message :transmit :generic :routing :from :to)
          {:keys [journey routing message]}
          (if generic
            {:journey [routing-override]
             :routing :generic/reply
             :message (assoc message :generic-raw [routing-override message])}
            {:journey (rest journey)
             :routing routing-override
             :message message})
          {:keys [request-id birth-time]} user-data
          final-message (assoc message :journey journey :mediary to)]
      (when-let [schema-error (check-schema from routing final-message)]
        (log/error ::Transmitter
                   "for routing"
                   (pr-str routing)
                   (pr-str {:journey journey})
                   (pr-str schema-error)))
      (log/trace ::simple-kafka-transmit routing "to" request-id "from"
                 birth-time "-" (pull-transmit-info message))
      (transmit from routing final-message))))```

U051SS2EU : the transmitter has all this incidental data - who is sending? who is the target? what data did the initiator of the request expect to get back with any responses? what is the path the overall task should take through the system?
U5ZAJ15P0 : But that's basically the approach I was suggesting with a "DatomicWriter" protocol, no?
U051SS2EU : v1 wrapped this in calls to partial
U5ZAJ15P0 : that "wraps' transact
U051SS2EU : the difference is that this returns an object that acts like a function
U051SS2EU : maybe I misunderstaood what `@(d/transact ...)` is in the transact-wrapper function
U5ZAJ15P0 : right, but so instead of doing something like```
(transact transmitter conn tx-data)
```
you would do
```
(transmitter conn tx-data)
```

U051SS2EU : right
U5ZAJ15P0 : <@U051SS2EU> (d/transact returns a promise I think, and @ dereferences it
U051SS2EU : and if you look at transmitter it shows you all the data it has inside
U051SS2EU : it acts like a hash-map
U051SS2EU : that's the key thing to me
U5ZAJ15P0 : <http://docs.datomic.com/clojure/#datomic.api/transact>
U051SS2EU : OK
U5ZAJ15P0 : Ok I see
U0509NKGK : what was the question :slightly_smiling_face:
U5ZAJ15P0 : <@U0509NKGK> Hi! 76 messages to read :smile:
U5ZAJ15P0 : just kidding, let me clarify the question:
U0509NKGK : lol
U5ZAJ15P0 : I want to add some attributes to every transaction in my sytem (e.g. for audit purposes; things like the current user ID) and I am wondering how I should do it
U051SS2EU : your question suddenly sounds very focused and pragmatic
U5ZAJ15P0 : e.g. should I wrap all access to Datomic behind a protocol that proxies most calls but does some stuff to transact's tx-data before proxying
U5ZAJ15P0 : should I have an explicit function wrapping d/transact
U5ZAJ15P0 : etc
U5ZAJ15P0 : <@U051SS2EU>  sorry :smile:
U5ZAJ15P0 : I guess that's what talking about something for 80 messages does
U5ZAJ15P0 : it clarifies things
U0509NKGK : we use an explicit function wrapping d/transact and d/transact-async
U5ZAJ15P0 : <@U0509NKGK> do you pass the auth context to all your "business functions" and then pass it explicitly to your function wrapping d/transact every time you call it?
U0509NKGK : no; we use middleware and `binding` with a dynamic var
U0509NKGK : and if the var has a value, we annotate
U5ZAJ15P0 : I was told using dynamic vars will send me straight to hell
U0509NKGK : we have repl helpers that do the binding so that we also use it when manually altering the db at the repl
U5ZAJ15P0 : do you somehow ensure that no intern misadvertantly uses d/transact instead of your wrapper?
U0509NKGK : no. but in 5 years, it's not been a problem. we had ONE case where someone retracted more than they should have. it was easy to fix
U0509NKGK : i do live i fear of an accidental d/delete-database though
U5ZAJ15P0 : Ok, thanks a lot. One other thing: how do you handle security? Specifically, do you use d/filter?
U0509NKGK : we can't use d/filter ; we have too much sharing going on
U5ZAJ15P0 : yeah, it's a bit odd there is no way to prevent /delete-database tbh
U5ZAJ15P0 : I guess with backups every 24 hours it eases the fear
U0509NKGK : d/filter is nice if you have very strict boxes. we don't.
U0509NKGK : hah. try continuously
U5ZAJ15P0 : although I wonder what would happen if the db got deleted, re-created, then a backup was run
U5ZAJ15P0 : would it get rid of the incremental backup?
U5ZAJ15P0 : how do you do access control them? do you have a nice approach?
U0509NKGK : we replicate our backups to off-AWS places, so we have some protection against that
U0509NKGK : access control what, the backups, or the repl access?
U5ZAJ15P0 : data access control
U5ZAJ15P0 : e.g. which users can see what
U5ZAJ15P0 : enforcing it
U0509NKGK : oh, that's basically normal queries in middleware
U5ZAJ15P0 : <@U0509NKGK> middleware as in you filter the query after executing it?
U0509NKGK : no, simpler than that - we explicitly use the viewing user in queries
U5ZAJ15P0 : oh right.
U5ZAJ15P0 : what about the entity API?
U0509NKGK : very often we use datalog to find valid entities, map d/entity, and go from there
U0509NKGK : sometimes we d/entity on a lookup ref, query to validate access, and continue
U5ZAJ15P0 : right, what I mean is that d/entity will let you traverse the data tree without access control
U5ZAJ15P0 : but I assume so long as you control what is traversed, it's fine
U5ZAJ15P0 : I am using GraphQL on my app and d/entity could cause issues if I tried to use it directly
U5ZAJ15P0 : and let the graphql query resolvers hit it directly
U5ZAJ15P0 : as it could potentially go any level deep in the data tree, reaching data that should not be accessible to the current user
U5ZAJ15P0 : if that makes any sense
U0509NKGK : oh right, yes. we totally control the query. we don't allow arbitrary query from clientside
U0509NKGK : in that case, d/filter is a far safer approach
U5ZAJ15P0 : <@U0509NKGK> ok, thanks. Sorry, my questions are not very clear today
U0509NKGK : it's ok :slightly_smiling_face: hth
U0564EGNY : So this is fun: when using postwalk, map entries are just vectors (so map-entry? returns false), so there is no way to distinguish a map entry from a map value that is a vector… Anyone else run into this?
U0564EGNY : I suppose a map key could also be a vector, which adds a 3rd case of ambiguity
U04V70XH6 : <@U0564EGNY> It's a known issue in JIRA...
U0564EGNY : <@U04V70XH6> say no more, and thank you
U04V70XH6 : <https://dev.clojure.org/jira/browse/CLJ-2031>
U04V70XH6 : (go vote for it!)
U0564EGNY : ah, prewalk works for my use case
U0564EGNY : (and I voted)
U051SS2EU : if I am implementing something that is meant to be used in place of a function, is it enough to implement IFn or should I implement AFn too?
U0NCTKEV8 : it sort of depends on how you are implementing it, AFn is an abstract class so dealing with it from clojure is kind of a pain, but from java that is where I would start
U051SS2EU : OK - this is clojure code, so I hope I'm safe ignoring AFn
U0NCTKEV8 : AFn provides defaults for a lot of things like the applyTo machinery and such
U0NCTKEV8 : I often will implement IFn and just particular invoke arity that I expect to be used
U0NCTKEV8 : but such an object will not always behave like a function
U0NCTKEV8 : I think apply won't work, and you will get some weird brokeness with more than 20 args, and maybe fn? will return false
U051SS2EU : yeah - this is a macro implementing generally something you recommended earlier (making a record that can be called like a function but unlike a lexical closure you can also look at the data in its keys) - trying to make it a convenient to use replacement for code that uses partials extensively
U051SS2EU : I just verified I implemented things properly to make apply work for over 20 args
U051SS2EU : but returning false for fn? is acceptable
U0NCTKEV8 : I think you can fix that too, if I recall fn? checks some marker interface
U051SS2EU : instance? clojure.lang.Fn
U051SS2EU : easy enough to extend that, it has no methods
U051SS2EU : sweet!
U0NCTKEV8 : yep
U051SS2EU : thanks - I think this will be a handy little one macro lib, just need a snappy marketable name
U07TDTQNL : <@U051SS2EU> big note: you probably want ifn? if you want to check if something is a function. fn? does something different (and is normally wrong, imo).
U051SS2EU : <@U07TDTQNL> so if I am making something that is a drop in replacement for a function returned from partial, would it be a bad idea to make fn? return true from someone else's check?
U051SS2EU : I guess that's a style issue
U07TDTQNL : nah, just code against IFn, and then `ifn?` will return true, which is what most people should be using
U051SS2EU : :thumbsup:
U2J4FRT2T : will be possible with spec :wink:
U051SS2EU : <@U07TDTQNL> on thing though, in my code, checking ifn? would lead to surprising results here ```=&gt; (ifn? :hi)true```

U051SS2EU : that could be a sign of doing other things wrong I guess…
U050ECB92 : that doesn't surprise me, a keyword is a function
U07TDTQNL : (What <@U050ECB92> said)
U050ECB92 : I suppose the `fn?` stole the good name early, but had the wrong semantics
U07TDTQNL : yeah fn? really means "something that was created with `(fn ...)`"
U0NCTKEV8 : fn? was added when trampoline was added
U0NCTKEV8 : continue-trampolining?
U051SS2EU : yeah, I guess the answer of `(defmulti foo first)` `(fn? foo)` can be a guide there
U050ECB92 : -----------------------------------------------Sooooooooo who here has played with `tools.deps.alpha` and what do they think?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
