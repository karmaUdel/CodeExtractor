U4SM7ECAG : Hi there! I need some help with some 0.16 elm... 
I've got some signal that 's not being handled properly... 
in the main view I've a "escape catcher" that allows me to dismiss modals 


```
 onWithOptions "keyup"
                { stopPropagation = False, preventDefault = False }
                keyCode
                (\keyCode -&gt;
                    Signal.message address &lt;|
                        if keyCode == 27 then
                            App.Action.EscPressed
                        else
                            Debug.log "asdasdasd" App.Action.NoOp
                )
```

the issue is: I'm listening on the `change` event on some inputs which are being "ignored". 
(i.e. the `App.Action.NoOp` gets triggered on any non-`esc` key press and so my view is re-rendered and my inputs reset. 

Any idea of how I could listen to onkey on a single touch? or have something better than `App.Action.NoOp` for the case that doesn't interest me and that would not interfere with the user inputs?

U0LPMPL2U : Could you filter the signal in the part of the code that handles signals rather than having a conditional in the event handler?
U0LPMPL2U : Alternatively, write a custom decoder instead of using `keyCode` and make sure it returns `Json.Decode.fail` for non-ESC characters
U0LPMPL2U : For reference, see how the `onEnter` handler is implemented here: <https://github.com/elm-community/html-extra/blob/2.2.0/src/Html/Events/Extra.elm#L267>
U4SM7ECAG : oh that's a neat idea!
U3SJEDR96 : `escDecoder tagger = keyCode |&gt; andThen (\k -&gt; if k == 27 then succeed tagger else  fail "not esc")`
U3SJEDR96 : or, indeed, go all the way and make it a custom `onEsc` :slightly_smiling_face:
U4SM7ECAG : I'll try that :slightly_smiling_face:
U4SM7ECAG : Awesome that works !
U4SM7ECAG : Thanks a lot <@U3SJEDR96> and <@U0LPMPL2U>
U641LDZFU : Hey all, just wondering if it's possible to have union types that look like ``` type Node = ChatNode {id : Int, chatMessage: ChatMessage } | NewsNode {id: int, newsItem: NewsItem} ```
U3SJEDR96 : Yeah, that's actually exactly how you can define them
U3SJEDR96 : well, you'd have `Int` for the second `id`, too
U3SJEDR96 : but other than that, that's a perfectly valid union type :slightly_smiling_face:
U641LDZFU : and so checking an item in a case with ChatNode item -&gt;
U3SJEDR96 : yep. I think you can even do `ChatNode {id, chatMessage}`
U641LDZFU : should theoretically match if the item is { id = 1, chatMessage = {some - "ChatMessage"}
U3SJEDR96 : if It's `ChatNode { id = 1, chatMessage = ... }`
U641LDZFU : yeah, sorry always muddling my = and : :slightly_smiling_face:
U641LDZFU : ok thanks! I am not insane :slightly_smiling_face:
U3SJEDR96 : nah, those were fine! :slightly_smiling_face:
U641LDZFU : So if it's not matching I need to look into the "item" to make sure it has the correct fields
U3SJEDR96 : well right now a Node can only be either of those two things, no extra or missing fields allowed. You can't construct wrong values, so you also can't encounter them :slightly_smiling_face:
U641LDZFU : yeah, I am loving that about elm!
U3BTVEFQU : hello Elm community .. i'm kinda stuck right now: Is there a way to debounce/delay a cmd for a certain timeperiod? I read all the stuff about Task and Process.sleep, but know I'm more confused than ever :disappointed:
U0LPMPL2U : why do you need to delay commands?
U3BTVEFQU : I'm using a form which uses RemoteData to submit something to my server. My server needs a little bit time (talking to a 3rd party server) to validate the input. My idea was to wait for RemoteData response and when the data is not validated yet, issue another request to the server. The response in my model would than be overridden with the new response, and so on, until the data is validated.
U3BTVEFQU : To keep it simple and clean I wanted to skip a `Time.every` subscription and introducing another msg for my `update` function.
U3BTVEFQU : So I basically need it for polling … I'm able to poll already, however because of no timeout/delay the performance is horrible and I make 100 requests per second
U2JA29EKF : <https://github.com/Bernardoow/elm-alert-timer-message/blob/1.0.0/src/AlertTimerMessage.elm> is a good example of sleeping
U3BTVEFQU : <@U2JA29EKF> yep found something similar, however how would I do another http request with this delay function?
U3SJEDR96 : So you can do `Time.sleep (100 * millisecond) |&gt; Task.andThen (makeNewRequest)`
U0LPMPL2U : You could have something like:```
subscriptions : Model -&gt; Sub Msg
subscriptions model =
  case model.state of
    Polling -&gt; Time.every second (always Poll)
    _ -&gt; Sub.none
```

U3BTVEFQU : <@U0LPMPL2U> yep, just wanted to avoid this :wink:
U0K92QFST : ilias: is it Time.sleep, or Process.sleep?
U3SJEDR96 : somewhat more complete example: `Process.sleep (100 * Time.millisecond) |&gt; Task.andThen (\_ -&gt; buildRequest |&gt; Http.toTask) |&gt; Task.attempt GotResponse`
U3SJEDR96 : Process, my bad :slightly_smiling_face:
U0K92QFST : Cool! Just making sure
U641LDZFU : So I can't still can't get unions working...
U641LDZFU : <https://gist.github.com/allansideas/60658d50f4f6b5ab9738c05f419324a8>
U641LDZFU : ```Function `unionFn` is expecting the argument to be:
MyThing

But it is:

String```

U641LDZFU : Am I missing something super obvious


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
