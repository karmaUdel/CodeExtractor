U051SS2EU : <@U1ALMRBLL> it has a function inside <https://github.com/noisesmith/clojure/blob/master/src/jvm/clojure/lang/Delay.java>
U051SS2EU : apologies for linking to my fork but that file is unmodified
U051SS2EU : another usage of delay I'm fond of is replacing nested lets inside conditionals with a let containing delays with conditionals that force certain delays as apropriate in a cond block
U051SS2EU : additionally, the delays can force another let bound delay inside their body, which simplifies tricky side effect tracking
U060FKQPN : noisesmith: ew :P
U060FKQPN : that sounds very.. imperative
U051SS2EU : it's something I only need for very imperative tasks
U051SS2EU : where I'm maybe getting a resource, maybe retrying, maybe cleaning up and bailing, etc. and it doesn't fit a with-open or try/catch/finally well
U051SS2EU : eg. trying to use zookeeper in clojure where every operation potentially requires me to re-try or fail
U051SS2EU : (not coincidentally I am moving away from using zookeeper so I can avoid having to write code like this)
U5WAJK60M : Hey guys, building the first production clj/cljs app for my company. I'm looking for a best practice tip for using Stuart Sierra's component with a (postgres) database connection.
```
(ns my-app.components.db
  (:require [com.stuartsierra.component :as c]
            [clojure.java.jdbc :as jdbc]))

(defrecord Db [spec connection]
  c/Lifecycle
  (start [this]
    (let [conn (or connection (jdbc/get-connection spec))]
      (assoc this :connection conn)))
  (stop [this]
    (if connection (.close connection))
    (assoc this :connection nil)))
```

It happened once in development that after a postgres io error, the connection would close and would render the app db-less. How do you guys handle this / what's a typical db component past the simple examples found online?

U0NCTKEV8 : use a connection pool library instead using the database connection directly
U0NCTKEV8 : c3p0 is a popular choice
U5WAJK60M : was thinking about that. Thanks!
U0HM5MJ5V : should clean up any defunct connections for you, with more and less aggressive options
U0YJJPFRA : Hello all, how can I use something like this:```'([:command "upper"] [:command "reverse"] [:command "remove-vogal"]) ;; this is the commands that I have to apply to collection
I thougth doing defmulti like: 
(defmulti command (fn [[_ command] _] command))
(defmethod command "upper" [command string] (upper string)) ...
["string nubmer 1" "string nubmer 2" "string nubmer 3"] ;; is the collection
```
and I want to have the results in the end. I coudn´t figure out how to do this with threading macro, Is there possible?

U054UD60U : The defmulti and defmethod look ok. And threading is possible in general. Maybe you can past an example invokation?
U0YJJPFRA : well, that´s the problem how to apply the rules to collection and get the result : `["1 RBMN GNRTS" ... ]`
U0YJJPFRA : `(reduce #(conj %1 (command %2 collection) [] '([:command "upper"] [:command "reverse"] [:command "remove-vogal"]))`?
U0YJJPFRA : I think this doesn´t pass the result to another, correct?
U3MLRD13K : <@U0YJJPFRA> It sounds like you want a `reduce` over the seq of commands. seq of strings is the initial value; each pass maps command over the seq of strings
U0YJJPFRA : In this case I´m runing each command to a collection
U0YJJPFRA : my needs is run all command to each element
U0YJJPFRA : how can I use dynamic transform for each element? something like `(-&gt; element (commands ?))`
U3MLRD13K : That is what a `reduce` would do, if I understand you correctly


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
