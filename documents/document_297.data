```
I've obviously missed something, but don't see what it is
Indeed there is no `api.js`, but I don't know what to do to create it.
Do you have this app on github?
<@U5D4VHEN7> Yes, here it is: <https://github.com/jxxcarlson/koko_elm_client>
Taking a look :eyes:
:slightly_smiling_face:
 `{ a | name : String } -&gt; String`
I'm trying to pass `.name` into a function of my own, and I thought it would be a `String` but I think this is saying it's a function of some kind?
I'm wondering if there's a simpler way to get a random int than by using the core random module?
<@U62PV9CPN> `foo.bar` and `.bar foo` are equivalent
<@U3LUC6SNS> from a bit of poking around, it looks like there are some bits missing from this application? It seems to want to call `api.js`, which I think might be `server.js`, and it looks like it also is trying to talk to a Phoenix Websocket channel. I can get you part of the way there: just running `./node_modules/.bin/webpack-dev-server` will at least get the frontend to run
<https://github.com/rtfeldman/elm-validate/blob/1.1.3/src/Validate.elm>
oh wait, are those args for the Validator type? (args is probably the wrong word…)
so they're kinda arbitrary?
I'm rebuilding the app and my development environment on my wife's computer from a working repo .. my computer no longer recognizes the keyboard and we are far from civilization for a week. :rage:
Yes, the app talks to a Phoenix server using both http and websockets.
Did you get the app to run?
My last message from webpack was `failed to compile`
Of course, "working repo" means that the app was working on the other machine and the github repo represents it except for .gitignored files :angry:
<@U62PV9CPN>, not sure what you are referring to.
And I see on line 24 the type alias for `Validator` and was trying to figure out what `error` and `subject` were, but I realized now that they are types supplied by the app, not some native elm thing.
So I'm slowly grocking the dark magicks at work here
On line 94 I see that `ifNotInt` is the only function which does not appear to return a call to `ifInvalid` with a bool argument, and it's the only function that takes both a `subject` and an `error` as it's args, so that means the other functions are leveraging some currying since they use the `ifInvalid` function but only provide an `error` arg?
<@U62PV9CPN> yep, other functions are ‘partially applying' the first argument of the `ifInvalid` function
If I modify the source of the package in `elm-stuff` will it be compiled when I reload the page? Or will my changes be wiped?
`subject` and `error` are type parameters, they can be any type
Instead of messing around in my app, maybe I can contribute something when I figure this out… would be kinda neat
any lowercase identifier in a type signature is a ‘type parameter'
Good morning! (It's morning here :)
Any hints how to implement a custom Json Decoder?
I have a `Decode.Decoder String` and want to turn it into `Decode.Decoder MyCustomType`
Let's say I have a Json.Decode.Value that holds only a string, like `"a"` or `"b"` or `"c"`. I also have a type `MyCustomType = A | B | C`.
