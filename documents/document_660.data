U17MHJ12N : I will try to document my steps to improve things and see if it's of interest to anyone.
U0FBZ4J5V : `RemoteData.map (List.filter f) yourRemoteData` should do it. 
U5DJNFLUD : Ooh thanks <@U0FP80EKB> I'm looking forward to watching that
U37HUSJ4R : ah perfect, my issue was with my `f` function
U37HUSJ4R : great thanks <@U0FBZ4J5V> and <@U23SA861Y>
U37HUSJ4R : love this slack, so helpful!
U0J1M0F32 : coreyhaines: I'd be very interested in a state-of-elm style survey that only asks for LOCs, modules, and 3rd party packages.
U37HUSJ4R : is there a tried and tested pattern for handling something like a reset button? Say I had a Msg that filtered all the even ids, I want to then reset back to all again. I could have two props on my model, `data` and `originalData` and just never update `originalData` but kind of feels wrong
U0FP80EKB : I would have `data` and `filteredData` as a first pass
U23SA861Y : either that or a seperate view mask
U0FP80EKB : Although, I’d probably do something like (very much pseudo code to get the names there)```
type Data = Data original filtered
```

U0FP80EKB : Yeah, or do the filtering at the view level, which is what I would start with.
U0J1M0F32 : Or `data` and a `filter` which is a union type of the kind of filter, then the filter is applied dynamically. (Only works if its a small data set)
U0FP80EKB : Ask why you need to keep the filtered data vs just the filters and apply them when rendering
U0J1M0F32 : `type Filter = All | Unread | Replied | None`
U0FP80EKB : caching the filtered data feels like an optimization that leads to this potentially unnecessary complexity
U23SA861Y : yeah this, apply the filter at render time
U37HUSJ4R : so don’t have a filter msg?
U0FP80EKB : We have a situation like this in our system, and we just store which filter they want (since we have a set number)
U0FP80EKB : I would have a filter msg `Filter FilterType`
U37HUSJ4R : instead of doing it in the update, do in a view type function?
U0FP80EKB : Then, in your model, store the `currentFilterType : FilterType`
U0FP80EKB : Save what filter they are looking for, not the filtered data.
U0FP80EKB : Then, when rendering the view, filter the data
U37HUSJ4R : nice
U37HUSJ4R : I like it!
U0FP80EKB : `filter : FilterType -&gt; Data -&gt; Data`
U0FP80EKB : The general approach is to calculate everything you can until you need to optimise. Then insert a cache.
U37HUSJ4R : just implemented that soluition <@U0FP80EKB>, really nice and elegant!
U3SJEDR96 : It's basically also how elm-sortable-table works, fyi.
U3SJEDR96 : if time comes to optimize, a light salting of `lazy` and possible `keyed` should do the trick
U0FP80EKB : yup
U3GHR2G91 : hey everyone.  i have a quick question.  does Elm have any particular solutions for problems related to windowing, a la Reacts `fixed-data-table` or `react-virtualized`?
U0FP80EKB : what are those?
U0FP80EKB : Just something like `List.filter` ?
U0LPMPL2U : From a quick look at `react-virtualized`'s GitHub page, it seems kinda like Elm's `Html.Lazy` ?
U0FP80EKB : <@U3GHR2G91> what do they do?
U0JFGGZS6 : is it something like  <http://package.elm-lang.org/packages/FabienHenon/elm-infinite-list-view/latest> ?
U3GHR2G91 : let's say you have a long list
U3GHR2G91 : with sorting or something like that
U3GHR2G91 : ahh, hold on, brb
U0FP80EKB : I bet the answer is `List.filter` :slightly_smiling_face:
U0EUHKVGB : don’t jump to conclusions, folks
U0EUHKVGB : <@U3GHR2G91>, what are you trying to do?
U3GHR2G91 : let's say you have a very long list, it doesn't make sense to pay the cost of rendering every item
U3GHR2G91 : these solutions give you an aperture (i.e. calculate the portion of you rlist that is visible in browser)
U3GHR2G91 : it can vastly improve perf
U0EUHKVGB : <@U3GHR2G91> have you run in to this as a real issue in Elm yet?
U3GHR2G91 : nope
U3GHR2G91 : but i have in React, using immutable data structures
U3GHR2G91 : i could put together a POC pretty easily
U0EUHKVGB : That would be best :slightly_smiling_face:
U0EUHKVGB : There are many possible ways to solve a problem like this, hence why you got three different answers.
U0EUHKVGB : However, the best way to know how to solve your problem is to have an example of _your_ problem :slightly_smiling_face:
U0JFGGZS6 : has anyone worked on a stats package in elm?  even basic descriptive stats?
U0JFGGZS6 : I found <http://package.elm-lang.org/packages/myrho/elm-statistics/latest>  but it looks like just a bare beginning
U5DJNFLUD : <@U0JFGGZS6> I'm using that for R7 but would appreciate more :slightly_smiling_face:
U0JFGGZS6 : I played around with implementing quantiles last night off the wikipedia page
U0JFGGZS6 : (amazing how little stats you need to know if you have some formulas/algorithms!)
U0JFGGZS6 : but ended up with a lot of questions in my mind about api design. which is maybe where I should ask these questions -&gt; <#C2MFMKHDX|api-design>
U0JFGGZS6 : <https://runelm.io/c/66v>
U3SJEDR96 : You probably don't need a phantom type there, tbh. It doesn't really add anything at this point :slightly_smiling_face:
U0JFGGZS6 : OK, this was one of my basic questions. With stats functions you often need a sorted list/array. And often you need it at several different points. So rather than sort multiple times, it makes sense to require that the calling context pass it in sorted.
U0JFGGZS6 : The phantom type there was a way of enforcing that the passed in list is sorted
U0LPMPL2U : I'm not sure I understand how that type enforces that the list is sorted? :slightly_smiling_face:
U0JFGGZS6 : you would have to call `Quantiles.sort myData`  to pass your data in to `quantile`
U23SA861Y : at present it doesn't but if this was in a module and the FVector constructor was not exported then it would have to be obtained by that modules sort call
U0JFGGZS6 : right exactly
U0LPMPL2U : Ah, so it's a way to tag data to say "this has already been through our sort function" ?
U0JFGGZS6 : right
U0LPMPL2U : nice!
U0LPMPL2U : that's clever, I wouldn't have thought of that :thumbsup:
U0LPMPL2U : What is the advantage of:```
type Sorted= Sorted

type FVector sorted = FVector (List Float)
```

versus something like:

```
type Sorted = Sorted (List Float)
```

U0LPMPL2U : does it give you flexibility to tag with multiple different sortings/non-sortings?
U3SJEDR96 : Basically you can also write function that work on an `FVector`, regardless of if its sorted or not
U0JFGGZS6 : well I guess I was thinking for other purposes (not here) you might want a sorted `(List String)` etc.
U0JFGGZS6 : right that too.
U0JFGGZS6 : the other question that seems to come up often with stats function is whether you are acting on a `List (Maybe Float)` or `List Float`.
U0JFGGZS6 : i.e. dealing with missing values
U23SA861Y : umm, doesn't nan exist for that reason
U0JFGGZS6 : Well `R` distinguishes null and NaN I think... and anyway looking at their quantile function, they deal with missing values and NaN within the function rather than force you to strip them out first.
U0JFGGZS6 : so there are a whole set of concerns that a stats library would have to work out...


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
