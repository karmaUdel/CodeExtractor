U5CGPBF0U : So, in its own module then?
U0NRYQNAZ : i use flask-restplus and from what i understand it is inspired from flask-restful.
U0NRYQNAZ : I believe using a `class` and inheriting from Resource is a the same pattern.
U5LNXQHN3 : I usually have my tests in a separate directory alongside the package for the main app. But I don't use Flask-Testing or any other extension so I don't know what that recommends.
U5CGPBF0U : `print(__name__)` would print the name of the current...method?...module?
U5LNXQHN3 : It should be the module. <https://docs.python.org/3/library/__main__.html>
U5CGPBF0U : So if my primary application script is `app.py` and I have `app = Flask(__name__)` I suppose I'm setting it to `app` then? I'd test but my code is in the middle of a major change so I can't run it.
U5LNXQHN3 : Yes, unless you're running the app.py file directly
U1BP42MRS : It's best to explicitly replace `__name__` with a string in the Flask initializer
U3UR8LD18 : Hi guys! I have launced an aws instance with SES(full access) role, Now how can i send an email to AmazonSES without smtp {username/password} credentials on server. An example in python or any relevant link would be great. Basically i dont want the creds to be on server.
U5CGPBF0U : ```if __name__ == '__main__':    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)```
So this should not be in the production code, otherwise it'll run the Flask dev server, right?

U1BP42MRS : No that is fine, that only runs if you directly call `python file.py`
U1BP42MRS : But if you use gunicorn, `gunicorn file:app` it would not run the devserver
U5CGPBF0U : Ah, ok. gunicorn runs a specific function unlike Python which runs the entire script...I should've noticed that. Thanks!
U5CGPBF0U : <@U1BP42MRS> In <https://github.com/pyslackers/website-old/blob/master/pyslackers/> you have `pyslackers.__main__:app` in `Dockerfile` but in `__main__.py` there is no `app` function. Instead `app` is a variable as in `app = create_app(resolve_config(os.getenv('PY_ENV', 'dev')))`. How does that work?
U1BP42MRS : Gunicorn uses that as the WSGI gateway, it's the "callable" for the spec
U1BP42MRS : So `app` is a `Flask` instance, and that is a callable (per how wsgi works)
U5CGPBF0U : Oh, wow. @.@ Every time I think I'm understanding everything there's something new to learn. I'll add WSGI to my list of things to learn more about.
U1BP42MRS : you don't have to worry too much about it fortunately - just enough
U5CGPBF0U : Oh, really? Good to know. Thanks!
U5CGPBF0U : Wow. Ya, I expected it to be quite a bit more complicated. Makes sense!
U5CGPBF0U : By the way, you have `from pyslackers import create_app, models` in __main__.py but there is no `pyslackers` module...?
U1BP42MRS : `pyslackers` is the package the whole app is in
U1BP42MRS : `create_app` is from `pyslackers.__init__`
U1BP42MRS : models is another module
U5CGPBF0U : <@U1BP42MRS> Oh ok, that's what I thought but for some reason when I run my app - Broadway - locally with Python I get "No module named broadway" from the line `from broadway import create_app`
U5CGPBF0U : I'm thinking maybe this is from running __main__.py directly, and perhaps I need a script to run from the parent folder that acts as the true primary script, but I'm not sure
U1BP42MRS : yeah, you want `python -m broadway`
U1BP42MRS : the `-m` runs it as a module, executing `__main__.py`
U1BP42MRS : but it sets the PYTHONPATH to be the CWD
U5CGPBF0U : Ah, ok! That worked though. Even though I didn't know better I did think that running `__init__.py` or `__main__.py` directly seemed a bit...off. Haha I'm so thankful for your help and this whole Slack. :slightly_smiling_face:
U5CGPBF0U : Are Python devs just more helpful people? Seems like it.
U47HK8BS8 : We're more efficient than other developers, so we have time to be helpful.  :stuck_out_tongue:
U1BP42MRS : I am at a ruby job and avoid it a lot
U5CGPBF0U : Haha, while initially I wasn't crazy about Python, the more I learn about it the more I like it, and one of those reasons is that I feel it can be very efficient, to create all kinds of things rather quickly
U1BP42MRS : I use the `__main__` trick to get around some annoyances with importing, python pathing, etc. Because with that way, gunicorn can pick it up and I keep the top level directory clean
U1BP42MRS : I hate how the top level directory can get so cluttered :smile:
U5CGPBF0U : Ya, the cluttered top level was something that I disliked. Before this I was making apps with Adobe Air and most of the time I'd have a single script in my top level and then have everything else in sub directories which felt really organized. Glad to know how to do this in Python.
U1BP42MRS : I think I may be slightly non-standard in that regard. But since `flask` introduced the CLI, I have been liking this approach.
U1BP42MRS : For aiohttp apps, it made it so I could just have an optional CLI to run the application
U47HK8BS8 : flask introduced a CLI?  heh.  here I've been making a manage.py entry point for all these years.
U0NRYQNAZ : yea it uses click now.
U47HK8BS8 : I suppose that makes sense.
U5CGPBF0U : Oh wait...do I not need `manage.py` for my DB deployment then?
U0NRYQNAZ : you can still have a manage.py.
U0NRYQNAZ : the click cli in flask supports it.
U0NRYQNAZ : <http://flask.pocoo.org/docs/0.12/cli/#custom-scripts>
U47HK8BS8 : it's funny because I've been meaning to go through the Flask docs again because I knew there were probably a ton of things like that which have changed over the years.
U1BP42MRS : It's pretty nice, for example with the `flask-migrate` extension:

```
export FLASK_APP=website/__main__.py
flask db migrate
flask run
```

U5CGPBF0U : So I can use this to make deployment more elegant than having to run `python manage.py db init`, `python manage.py db migrate`, and `python manage.py db upgrade` separately?
U47HK8BS8 : yeah I was always writing that stuff myself like a sucker
U1BP42MRS : Yeah, you can make a custom command that does those for you
U1BP42MRS : `db init`, if using flask-migrate, is only a 1 time thing though, just setting up the local config and migrations folder
U1BP42MRS : so neither `db migrate` nor `db init` would be needed during deployment
U5CGPBF0U : Oh, nice. Guess I'm kind of micro-optimizing by wanting to combine the init and migrate into one command as well then. Haha
U1BP42MRS : I do the upgrade/run at boot each time so it's always up to date for prod ¯\_(?)_/¯
U1BP42MRS : but init is one time ever for a project, and migrate creates the migrations
U1BP42MRS : so I don't think you need those often enough, those are developer run manually


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
