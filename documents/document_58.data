U06HHF230 : michaellindon: I'd suggest using the dispatch function you have and just changing the dispatch value to 
`[Object ClassC]`

Remember dispatch values use `isa?` and work across each argument in a vector form.  multimethod hierarchies are underused IMHO.

U0HM5MJ5V : <@U06BQJTHQ> if you end up having to get lots of data in and out of java beans you might try this: <https://github.com/uwcpdx/bean-dip/>
U0BB79MMJ : Hi! Can someone give me a hint on how to add error handling to my logic programs? I already asked in <#C0566T2QY|core-logic>, but it's all tumbleweeds and cricket noises there... I'd like to receive a little more information than `()` when my program fails to produce a result :slightly_smiling_face:
I was thinking about a fall through case that unifies an error parameter to something meaningful, but I am not sure if that is a good idea or even how to do it well

U65P37N83 : is anyone eager to help me? pretty new to clojure so the question is pretty basic :slightly_smiling_face:
U5ZAJ15P0 : <@U65P37N83> I am new to clojure too but that might be even better as I am familiar with some of the beginner's struggles. Shoot :slightly_smiling_face:
U0E0XL064 : Transit seems to be the way to go for transmitting clj datastructures. ... but it seems to be work in progress:

&gt; NOTE: Transit is a work in progress and may evolve based on feedback. As a result, while Transit is a great option for transferring data between applications, it should not yet be used for storing data durably over time. This recommendation will change when the specification is complete.

... and it's been over a year since there was a commit

U0E0XL064 : So I wonder: is it stable? Is it still maintained? Is it still wip? ...?
U0J9LVB6G : What I understand from that warning is that the details of how it encodes edn as json or messagepack is subject to change, so if you save something to disk today, there's no guarantee that you can read it back with a future version of transit. If you want to transmit data, you're good.
U0J9LVB6G : I wouldn't worry about a lack of commits, that probably just means it's stabilized.
U0E0XL064 : allright, thx.
U0E0XL064 : another transit question: in order to be able to read json data, it seems one has to stringify it first. Here's a function receiving a `POST` request and handling the request (using express/node.js)```
                                        (-&gt;&gt; req
                                          .-body
                                          (.stringify js/JSON)
                                          (t/read (t/reader :json))
                                          str)
```
It feels a bit weird to have to stringify first, but that's how it's supposed to work? (Or am I missing something?)

U050MP39D : that seems wrong
U050MP39D : you're going json-&gt;data-&gt;json-&gt;data there
U0E0XL064 : right... my feeling as well, but how to make it work properly? ```
                                        (-&gt;&gt; req
                                          .-body
                                          (t/read (t/reader :json)))
```
doesn't work - oh, that last `str` can be omitted, that's just to print it in a readable way.

U0E0XL064 : `transit` does seem to take a json-string, not a json-object, if I'm right.
U08FM7RL1 : So, here's a question I had over in <#C053AK3F9|beginners> about namespace-qualified keywords, if anyone has any thoughts.  Thanks.  <https://clojurians.slack.com/archives/C053AK3F9/p1499543674615216>
U08FM7RL1 : Just wondering where they are "tragically underused" and where/why I should be using them.
U0E0XL064 : <@U050MP39D> found it: express parses json if you add `(.use app (.json body-parser))`. I changed that line to: `(.use app (.text body-parser #js {:type "*/*"}))`. (I'll have to refine it a little... having type `*/*` doesn't seem a good idea, but at least, it works now.)

U0GC1C09L : has anyone had success serving '206 partial content' responses with their favourite clojure http server? i'm trying to serve streamable videos (where 206 responses are required), however <https://github.com/remvee/ring-partial-content/blob/master/src/ring/middleware/partial_content.clj> doesn't seem to respond with an 'Accept-Ranges: bytes' header.
U07QKGF9P : Is there a decent Clojure HTTP client that mimics browser cookie behavior? Aleph doesn't support cookie stores, it does… something with cookies but there's no docs so it's not clear what — clj-http cookie handling is totally broken if the cookies get set on a redirect request
U07QKGF9P : I would like to not have to have a headless browser and instrument it with selenium, but that's lookling like an increasingly viable option
U0NCTKEV8 : have you looked at htmlunit? it might be slightly easier to stomach than going full selenium
U0NCTKEV8 : I don't know, but clj-http unit has an option to automatically follow redirects or not, and I wonder if turning it off and handling redirects manually might unbreak the cookie stuff


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
