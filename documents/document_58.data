```
what is the best data format for exchanging data between clojure and python?
depends on what your needs are, but you should look at <https://github.com/cognitect/transit-format>
hey, has anybody ever had trouble requiring clj-time.types in a ns? I have the latest version from clojars but I get an exception when I compile complaining the ns clj-time.types doesn't exist or can't be found on the class path.
the namespace clearly exists tho in the github repo
yeah, but the latest in git doesn't have to match the latest jar on clojars
there are also a few clj-time artifacts on clojars, are you sure you are using the one that maps to the github repo you are looking at?
you should check `lein deps :tree`
if any of your dependencies require one of these other clj-time artifacts (which unfortunately likely have the same namespace names) you will get all kinds of weird behavior
I followed the clojars link on github, maybe they just didn't push a newer artifact to maven?
er
clojars
ahah
that's exactly
could be, you also haven't shared the exception you are getting, clj-time.types could be failing to load because something is
it
Nah, the last push to clojars was in Dec. 2016, the change I want was added in march 2017
crisis averted, I guess.
<@U1Z5X06NP> We'll be releasing a new `clj-time` very soon. I've been meaning to get to that for a week or two!
<@U04V70XH6> , oh cool, I didn't even realize you we're in this channel! :stuck_out_tongue:
Here's all the fun new stuff <https://github.com/clj-time/clj-time/compare/86acab8a122e3229a2e5337075f52b6f75ae4584...master> -- I think I'll make it 0.14.0 when I do it (hopefully in the next few days).
clojure and jdbc... there seem to be 2 libs: `clojure.java.jdbc` and `clojure.jdbc`. Anyone any experience reports? Reasons why using one over the other? ...?
the first one is the standard one.  the second one's name is unfortunate
<@U0E0XL064> I'm the maintainer of the standard (contrib) one: `clojure.java.jdbc` and we use it extremely heavily at work (with MySQL) for large volumes of data/queries.
It's also tested against MS SQL Server (both MS driver and jTDS), PostgreSQL (both Postgres and Impossibl drivers), and H2, SQLite, Derby etc. There are Oracle and Terabase(?) users of it too. It's what most other JDBC wrapper libraries use under the hood.
If you run into any issues with it, feel free to ask in the <#C1Q164V29|sql> channel.
Right... Thx.
:)
You can also see from this initial commit that the author basically copied `clojure.java.jdbc` (without permission and without attribution -- I took him to task on the mailing list for that!): <https://github.com/funcool/clojure.jdbc/commit/dfb16894734c2a95838cd5f5b3fef3e63ac1c4bf>
In later commits he added some acknowledge of code he'd taken from `clojure.java.jdbc` and he did, over time, substantially rewrite the code base.
(but, yeah, years later I'm still pretty annoyed about it)
now it's easy to do if the lists are vectors… but given that most-everything defaults to a list after running some process (map filter reduce etc.), I wonder whats the better way to do this that works for a more general `seq`?
if you need associative updates, don't use lazy operations for modification - map, filter, etc all provide transducers that can make vectors
so pour things `into []` or use `vec-*` for map/filter/etc.?
<@U1Z5X06NP> `clj-time` 0.14.0 is available <https://github.com/clj-time/clj-time/releases/tag/v0.14.0>
<@U0W0JDY4C> right - but especially when chaining operations into with composed transducers is a better option
and I don't think it's vec-*, it's *v
(and not all of the foov exist - but filterv and mapv do at least)
<@U04V70XH6> awesome!
ah, it's `*v` yea … but why is into a better option? does it preserve laziness?
no - vectors cannot be lazy
by composing transducers you avoid creating intermediate data (which does nothing but create gc churn)
hm, not totally following you but that's okay. i know `(comp a b c)` will produce a transducer. are you saying there's a way to do `into [] some-fn` where it doesnt use a transducer?
no - and comp doesn't generate a transducer unless its args are transducers
if you call `(filterv pred? (mapv f coll))` that generates a vector you don't need
if you use `(into [] (comp (map f) (filter pred?)) coll)` you get the same result without creating a data structure nobody uses
ooof. so much to learn I do have. thanks for the tips :yoda:
you can still get the right answer without composing the transducers, and it's easy to change once you know how they work
but back to the original question, if you need to do updates by index, keep things in associative collections, there are good options for making them but you don't need to do it the optimal way on the first pass through
what's your favorite logger library and why ?
I tend to use tools.logging on top of log4j2. it works great, just about every other routing framework can be rerouted to log4j2
