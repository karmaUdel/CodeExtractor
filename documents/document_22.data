  (println "hallo2"))```
You have an extra paren before the first `println`. This evaluates the result of the first `(println "hallo")`, which is `nil`, as a function, and this is what creates the NPE.
i see
thanks, i nearly solved my problem
i'll come later back to it after I enjoy some nightlife in Wroc?aw
Cheers :slightly_smiling_face:
Hello, I have a small question about spec. How does one specify a constant value in a regex spec? Like a vector that always must start with a keyword. I can do something like this `(spec/cat :type #{:message} :contents string?)` (as part of a multi spec), but is there a way to say the first thing in the sequence must be `:message`?
is there an idiomatic way to create a keyword in the current namespace, or is `(keyword (str *ns*) s)` pretty much it?
don't do that
the behavior of `*ns*` is almost certainly not what you expect it to be
you might have better luck asking in <#C1B1BB2Q3|clojure-spec>
there is no such thing as the "current namespace" at runtime
what about at compile time? is there a shortcut for a keyword in the namespace I'm writing the code in? something like `::`. I could do `(keyword "app.models.user" s)` but that seems verbose and potentially brittle to refactoring
if you want it to be the namspace calling your function/macro then `*ns*` works - but that won't give you the ns your definition came from
I am not sure how to read that, but it doesn't seem to be correct
`*ns*` is set by the compiler when *compiling* code, when running code its value is arbitrary
sorry, right - it will be the arbitrary value of `*ns*` at runtime for a function, but for a macro it will be the ns being defined
some execution environments preserver the value of `*ns*` between compilations (the repl), but common environments do not
macro expansion happens at compile time, so macros can observe a meaningful value of `*ns*`
when a function is being compiled, the compiler uses `*ns*` to figure out which vars it uses, but those vars are then embedded in the generated bytecode, and when the bytecode is run, it never looks at the value of `*ns*` again
What we do at World Singles is to have `(def ^:private my-ns *ns*)` near the top of each namespace where we need the "current namespace" and then use `my-ns` instead of `*ns*`.
That way it's bound to the file's namespace at load/compile time and doesn't change during program execution.
why does `(get-in {:a (vector {:b :c})} [:a 0 :b])` work, but `(get-in {:a (list {:b :c})} [:a 0 :b])` doesn't?
ah, I guess the answer is "lists aren't associative, but vectors are"
not that that's all that satisfactory, but it makes sense
<@U1WMPA45U> it's good to have that choice, no?
hi everyone
is this a good place to ask newbie questions?
there's <#C053AK3F9|beginners>
cool, thank you
I asked beginner questions here :slightly_smiling_face:
and nobody complained!
Depends on the audience and the time of day. But we _try_ to encourage focus to ask beginner Qs in <#C053AK3F9|beginners> so folks can opt-in/-out.
What I remember of clojure IRC was that you were free to ask beginner questions. I know because I asked many of them. I'm not sure the distinction. I'm still a beginner.
<@U06DQC6MA> We're all beginners on different topics :slightly_smiling_face: The main difference from IRC (apart from the wonderful Slack UI/UX) is the plethora of channels here... (and this is getting meta so <#C03RZGPG3|off-topic> if we really want to go down that path).
Is there a better "clojury"-way to store edn documents?
<@U1Q12R4F2> Maybe serialize it using something like <https://github.com/ptaoussanis/nippy/blob/master/README.md>
<@U1Q12R4F2> there's also <https://github.com/cognitect/transit-format> which is what we're using which is a good fit if you want to use it in a browser because it can be used on top of json
&gt; NOTE: Transit is a work in progress and may evolve based on feedback. As a result, while Transit is a great option for transferring data between applications, it should not yet be used for storing data durably over time. This recommendation will change when the specification is complete.
<@U0J30HBRS> right… we just ignored that. it does seem fairly stable at this point there's not much activity in the repo anymore. Was wondering if that recommendation was going to change…
But my main concern is not the serializing part, but using the clob or blob for storing the data. Accessing the document doesn't feel native (sql query, reading clob, deserialize data). I hoped there was an mongodb-equivalent for clojure/edn :sweat_smile:
what about datomic?
Its a low budget project, Im looking primarily for open/free software
datascript
datomic starter is free
<@U61HA86AG>: but after 1 year there will be no updates and my project relys on an old unmaintained version, if I understand the description correctly?
Yup
No go for serious work imho
ah didnt know that, havent used it myself yet :stuck_out_tongue:
maybe it's time for an edn datatype in postgresql :wink:
like jsonb
<@U1ALMRBLL> <@U04V70XH6> due to non technical reasons, my PR <https://github.com/clojure/clojure-site/pull/194> did not make it. If anybody could adopt it, it would be great :morning:
<@U1Q12R4F2> storing fressian in a BLOB or edn in a CLOB is fine as long as you don't need atomic updates or native queries, otherwise I strongly advise against it (you may then want to use JSON support in a sql db, or a document store). There is no such thing as a 'clojury' way of designing a database imho - this should be language independent :)
I still think that will be awesome do something like `:find ?edn :where [?e :graph/data ?edn] [(contains? ?edn :foo) true]`
There is no way to make this efficient in Datomic currently
starting nREPL for the first time on this machine says "could not transfer ... unable to find valid certification path to requested target". We have a custom certificate at work that sits at top of everything. What should I do to get nREPL (is it using maven behind?) to use it when downloading artifacts? E.g. in `pip` I need to add in `~/.pip/pip.conf` a line saying `cert = /etc/ssl/certs/ca-certificates.crt`
by nrepl do you mean leiningen?
lein does not use maven, but it speaks to the same repos, you probably need to make sure your java certificates are properly set up
I think I'll stick with the clob solution.
<@U051SS2EU> I installed leiningen and ran `cider-jack-in` in a `.clj` file in emacs
right, but nrepl doesn't download things, leiningen does
I get that, but I don't know where to stick in the certificate
anyway, depending on your OS there's various ways to make sure your java certs are OK
well if you have a link or something, hit me :slightly_smiling_face: ubuntu
we use maven here but it's all proxied through a locally set up mirror
oh, that's the one I know `/var/lib/dpkg/info/ca-certificates-java.postinst configure`
or perhaps this <https://stackoverflow.com/a/33440168>
that did write a lot of "Replacing ..." lines and a "done." in the end which didn't solve the problem
what about the SO version?
still a nope
weird - is the cert installed in such a way that ubuntu ca-certificates would know about it / use it?
because that should have fixed it if it is
<https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line>
yes it's correct, other package managers work fine with it
(once I set the ca-file)
no I'm saying add the ca-file to ubuntu itself
then set up java's certs from ubuntu
though, if you want to do it the tedious way you could also manually add that cert to java...
the askubuntu link you sent is how we set up the certs in ubuntu
<https://stackoverflow.com/a/28324237>
then I have no idea what's wrong here
the best option would be to add the mirrors we use for maven into my leiningen profile. I'm just not sure how to write it down. I'd need a ~/.m2/settings.xml to leiningen profile converter
this isn't maven, lein doesn't use maven
it can access maven repos... but doesn't use maven itself
sorry, misread
this should be system level config properly propagated to java, it shouldn't even be leiningen's concern
it's hard to tell where the problem lies, it could even be that the network here is deliberately blocking direct access to the repos since they want us to use the supplied mirrors
one thing to rule out would be that ca-certificates.postinst or the purge / reinstall of ca-certs didn't undo your custom cert addition
there might be a less heavy handed way to add the cert and also make sure it updates java without doing a purge / install cycle...
I managed to add our mirror to `profiles.clj` but it only mirrors the maven repo, so I get the same error when I get to dependencies that are on clojars :disappointed:
<@U051SS2EU> I found the culprit - the certificates are OK, for some reason a bad java is being used. Now I just need to find out who picked that version and why
in terms of the wrong java being installed, or the wrong one picked out of those installed?
if the latter, that can be fixed with update-alternatives
the wrong one picked, because I installed `lein` via `nix` :slightly_smiling_face:
that's not what decides it is it? I mean lein just looks for the first java on path
unless nix changes that...
I'm pretty sure `nix` changes it since they are all about being reproducible and immutable etc. Also `command -v java` from emacs returns `/usr/bin/java` which points to ubuntu java, not the nix one
all in all I just got  it to wok :slightly_smiling_face:
using lein via a package manager seems fishy to me, sort of like using the jvm inside a container - I know there are valid reasons, but lein already manages its version better than most package managers will and the jvm already isolates differences between environments...
Hi, all! Does anyone have some good recommendations on resources covering/showing proper use of records and protocols? I've been using Clojure happily for three years without them, mostly on a hobby basis, and feel that I understand them pretty well, but when I start using them or thinking about how to do it, I feel like I'm going all OOP. Hopefully the question makes sense.
<@U1S4F3M4M> I cover this a bit in my presentations about Component <https://stuartsierra.com/presentations>
<@U064WBEPL> Thanks, I'll have a look.
A follow up question: In my current project where I believe records/protocols is the good fit, I start out with CSV records with lots of fields. Many are not always present. Is it ok to create a record with just a few fields as required (eg. "logtime" and "id") and the rest as optional, event though many other fields are highly useful and used in calculation?
that's a pretty normal way to use records - adding fields that aren't defined on them
but if you know what they will all be, you could just have them all nil by default...
<@U051SS2EU> Thanks. What's the benefit of having them be nil? Would that make the generated -&gt;MyRecord requiring a lot of paramters, and possibly not making it a MyRecord if you use map-&gt;MyRecord if you provide a map missing some keys?
<@U1S4F3M4M> Records are usually indicated when you also have Protocols (or interfaces) and you plan to have multiple different types of records implementing the same functions for polymorphic behavior.
<@U1S4F3M4M> map-&gt;MyRecord always makes a MyRecord, even for an empty map
and yes, with more than ~4 fields I would always use map-&gt;MyRecord rather than a positional constructor
<@U051SS2EU> Thanks, the former was new to me. I guess I need to experiment and see how it goes.
<@U064WBEPL> I guess my "fear" is to make everything a "method" instead of a function. &lt;- My best description of where I feel it turns strange when using a functional language.
<@U1S4F3M4M> You only need "methods" in Clojure if you need polymorphism: different behavior for different types, where the caller doesn't know which type it is.
<@U064WBEPL> I believe that is the use case I have in my current project, hence the desire to finally dive into records and protocols. I'm using re-frame for the GUI, and tend to aim for generic code. In this case I'm presenting information where the GUI code displays :display, creates tooltip from :tooltip, sets react key from :react-key and so on. What these keys contains differs based on type. I like the way generic code makes it clearer what the code is trying to accomplish, without mixing in a lot of "how". Now the plan is to turn these keys (:display, :toolstip, :react-key, …) into method on a protocol like "Displayable". Anyway, thanks so much for the imput. Now I need to focus on dinner preparations.
what's the idiomatic way to guarantee some unknown value is inside a sequence, where that value could or could not already be in a sequence?
