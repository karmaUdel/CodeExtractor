U051SS2EU : seems like an easy thing to test with criterium
U051SS2EU : ```+user=&gt; (crit/bench (let [v (transient [])] (reduce conj! v (range 1000))))Evaluation count : 3435960 in 60 samples of 57266 calls.
             Execution time mean : 17.803731 탎
    Execution time std-deviation : 319.760540 ns
   Execution time lower quantile : 17.305732 탎 ( 2.5%)
   Execution time upper quantile : 18.382921 탎 (97.5%)
                   Overhead used : 1.572942 ns

Found 1 outliers in 60 samples (1.6667 %)
        low-severe       1 (1.6667 %)
 Variance from outliers : 7.7727 % Variance is slightly inflated by outliers
nil
+user=&gt; (crit/bench (let [m (transient {})] (reduce #(conj! % [%2 %2]) m (range 1000))))
Evaluation count : 292260 in 60 samples of 4871 calls.
             Execution time mean : 204.650986 탎
    Execution time std-deviation : 11.916923 탎
   Execution time lower quantile : 197.407687 탎 ( 2.5%)
   Execution time upper quantile : 223.127690 탎 (97.5%)
                   Overhead used : 1.572942 ns

Found 3 outliers in 60 samples (5.0000 %)
        low-severe       1 (1.6667 %)
        low-mild         2 (3.3333 %)
 Variance from outliers : 43.4448 % Variance is moderately inflated by outliers
nil
```

U051SS2EU : so the map with number keys version is ~ 10x slower
U050SC7SV : for a size 1000 &lt;thing&gt;
U051SS2EU : right
U051SS2EU : perhaps a smaller input would better represent real use cases
U050SC7SV : my guess is that for vectors it will be O(1) no matter the size
U050SC7SV : well it's a bit of a generalisation, but you get what I mean
U1ALMRBLL : "real use cases" depends on the use case. that's why when someone asks "which is faster, x or y?" it's important to understand the use case
U050SC7SV : indeed
U1ALMRBLL : also <@U051SS2EU> , you are creating a persistent vector in your `conj!` for maps, and it's faster for your test scenario to use `assoc!` instead```(c/bench (let [m (transient {})] (reduce #(conj! % [%2 %2]) m (range 1000))))
Evaluation count : 385800 in 60 samples of 6430 calls.
             Execution time mean : 157.793112 탎
    Execution time std-deviation : 3.521488 탎
   Execution time lower quantile : 154.508093 탎 ( 2.5%)
   Execution time upper quantile : 165.003217 탎 (97.5%)
                   Overhead used : 1.312303 ns

Found 3 outliers in 60 samples (5.0000 %)
	low-severe	 2 (3.3333 %)
	low-mild	 1 (1.6667 %)
 Variance from outliers : 10.9550 % Variance is moderately inflated by outliers
=&gt; nil
(c/bench (let [m (transient {})] (reduce #(assoc! % %2 %2) m (range 1000))))
Evaluation count : 515160 in 60 samples of 8586 calls.
             Execution time mean : 118.954362 탎
    Execution time std-deviation : 4.101911 탎
   Execution time lower quantile : 115.324719 탎 ( 2.5%)
   Execution time upper quantile : 130.422397 탎 (97.5%)
                   Overhead used : 1.312303 ns

Found 4 outliers in 60 samples (6.6667 %)
	low-severe	 4 (6.6667 %)
 Variance from outliers : 20.6386 % Variance is moderately inflated by outliers
=&gt; nil```

U051SS2EU : I'm redoing the test creating the input outside the benchmark for that reason
U051SS2EU : every result, regardless of pre-making vectors, or size of input, is showing vectors significantly faster than number keyed maps though
U051SS2EU : and the ratios are consistent across input sizes, number keyed hash-maps take 8x as long, for both 20 element and 1000 element inputs
U051SS2EU : (8x as long using assoc! of coure, 10x using conj!)
U1LJAM1U7 : TY. The edited source reads `*(_._ instance-expr (method-symbol args*))*` - so the `*` is there ... just not shown or we need to quote it :slightly_smiling_face:  `**` will help
U05207L4M : I have a test assertion like this:```
(not (nil? pin-config))
```
Where pin-config is a non-empty map.
But the test is failing with: 
```
expected: (not (nil? pin-config))
 actual: (not (not true))
```

U05207L4M : It looks like `(not (nil? pin-config))` is transformed to `(not (not true)` but then this is not evaluated to `(not false)` and then to `true`
U05207L4M : Any suggestions on what I might be doing wrong?
U05207L4M : nvm
U051TMSBY : roberto: unrelated, but `(not (nil? x))` == `(some? x)`
U05207L4M : ah, thanks, I switched to `(complement nil?)`
U05207L4M : switching to `some?` :slightly_smiling_face:
U5XMV6DQT : Is thery any kind of "memoization" library that supports an external in-memory storage backend?
U0JFCEH9P : <https://github.com/clojure/core.memoize> is very flexible
U0JFCEH9P : what does "external in-memory storage" mean? like Redis?


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
