U1BP42MRS : That's probably your only option if there's no unofficial source either. Be sure to check that you aren't breaking their terms of service with that, however. Scraping is often times okay, but some sites explicitly forbid it - especially if intending to resell the info
U0PKTUWKH : hello again, looking for help with a boto3 based script. I am getting en error ```
Traceback (most recent call last):
  File "backup-to-s3.py", line 58, in &lt;module&gt;
    upload = push_to_s3(args.bucket)
  File "backup-to-s3.py", line 36, in push_to_s3
    uploaded = s3.Bucket(bucket_name).upload_file(file_name)
TypeError: bucket_upload_file() takes at least 3 arguments (2 given)
```
this is code <https://gist.github.com/pleegor/ae8086286533ce33cc92095d7049dce5>

U0PKTUWKH : it appears im missing something in `s3.Bucket(bucket_name).upload_file(file_name)`
U0PKTUWKH : i think i sorted things out (please correct me if im wrong)  upload_file requires the following: `Filename, Bucket, Key, ExtraArgs=None, Callback=None, Config=None` and key was missing
U5VCDE5SS : anybody know how I can use jquery to target specific elements that Django automatically brings up?
U5VCDE5SS : specifically I'm trying to click on a button if the Django generic form error element is visible to the user, but targeting the element directly always brings up the modal that is triggered by the button, or doesn't trigger at all if I use the visible selector 
U686SVA9X : Guys am having a problem deciding whether to use function or class base view with minimal angular or jquery for frontend
U686SVA9X : or start with function base then refactor
U0NRYQNAZ : it all depends on what you like.
U0NRYQNAZ : i prefer to stay as close to a function as possible before creating a class. however, there are great times to use a class and really depends on the use case. if you offer up some examples or ideas of what you are trying to do maybe someone has a way they have done it before.
U663SK5K2 : i don't understand the 2nd elif condition```
choice = int(input("Choose a number in the list: "))
a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
new_list = []
for i in a:
    if choice not in a:
        print("Choice should be in the list.")
        break
    elif choice &gt; i:
        my_list.append(i)
    else:
        print(my_list, ",\nelements containing this list is smaller than", choice)
        break
```

U5VGKQ2SY : <@U663SK5K2> in `for i in a:`, i takes the value of actual elements in `a`: ie: 1, 1, 2, 3, ... , 89
U5VGKQ2SY : that '2nd elif' is simply comparing the user's input `choice` to whatever value `i` has during that iteration. If `choice &gt; i` (ie: user's input = choice = 10, and it is the for loop's first iteration, i will have value of 1), then append `1` to `my_list`
U663SK5K2 : <@U5VGKQ2SY>what i understand is --&gt; what choice we give it will be more than that i

like if i give 90 and then it will be compare 90 &gt; i  so it will append 90 in list

U663SK5K2 : that is confusing
U663SK5K2 : because else part saying other thing for same
U5VGKQ2SY : The program starts with a list `a` w/ values.It asks user to input a number. Let's say user feeds program `8`.
So `choice == 8`
1st for iteration:
`i is 1` and choice is 8
Skips the first if b/c choice is in a

U5VGKQ2SY : goes to `elif choice &gt; i:`
U5VGKQ2SY : here choice is 8, i is 1
U5VGKQ2SY : i gets appended to `my_list`
U5VGKQ2SY : i... so 1. NOT choice
U5VGKQ2SY : <@U686SVA9X> saw you typing, wanna chime in? :slightly_smiling_face:
U5VGKQ2SY : <@U663SK5K2> &gt; like if i give 90 and then it will be compare 90 &gt; i  so it will append 90 in list
No. The first if will prohibit this and tell you that you must enter a number from the list.

U663SK5K2 : now i got it
U663SK5K2 : Thanks
U5VGKQ2SY : yep
U5VGKQ2SY : :+1:
U686SVA9X : <@U5VGKQ2SY> oh no, replying to someone else, but was also reading your comment.
U0NRYQNAZ : if you're using django why not use DRF?
U686SVA9X : I got it install, thats how am getting the records to angular, but its the POST request i haven't grasp with it has yet
U5U4MSHC1 : I use api_view decorator for post in function based views
U686SVA9X : ill look into that
U663SK5K2 : now i want to understand this code and also want to make such program even more simple which i can understand
```
"""
Create a program that asks the user for a number 
and then prints out a list of all the divisors of that number. 
(If you don't know what a divisor is, 
it is a number that divides evenly into another number. 
For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)
"""
while True:
    try:
        n = int(input("Please choose a number to divide: "))
        list = [d for d in range(1, n + 1) if n % d == 0]
        print("The divisors of {} are: \n {}".format(n,list)) if len(list) &gt; 2 \
            else print(str(n) + " is a prime number")
    except ValueError:
    	break
        #print("Very funny smartass. Now give me a number.")
```

U65CTNMTR : I would presume you'd want to use the range `(1, n)`, the round brackets mean non-inclusive, so if `n` is 5 you'd want to test the in the range `2,3,4`, versus what you have `[1,n]` which means inclusive, so the range `1,2,3,4,5`.
U65CTNMTR : As for simplifying it, it's already reasonably straight forward. Alternate approaches could be changing your `list = ` statement to `filter(lambda d: not n % d, range(2, n))`.
U65CTNMTR : You'd also want to check that the input is a positive number, you can use `abs(n)` to ensure it's absolute
U65CTNMTR : And as an aside, don't shadow builtins. `list` is a builtin, and you're shadowing over that name with your `list = ` assignment.
U60KNBMPX : prime number factorization?
U5VGKQ2SY : I would drop the try/except block with:```
while True:
    num = input("Please choose a number to divide: ")
    while not num.isnumeric() or int(num) &lt; 1:
        # invalid input
        num = input("Very funny smartass. Now give me a number.")
```

U5VGKQ2SY : Whole thing maybe redone as:```
    num = input("Please choose a number to divide: ")
    while not num.isnumeric() or int(num) &lt; 1:
        # invalid input
        num = input("Very funny smartass. Now give me a number.")

    my_list = [divisor for divisor in range(num) if num % divisor == 0]
    print("The divisors of {} are: \n {}".format(num,my_list)) if len(my_list) &gt; 2 \
            else print(str(num) + " is a prime number")
```

U67NP4A0K : Anyone up?
U5U4MSHC1 : Yup.


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
