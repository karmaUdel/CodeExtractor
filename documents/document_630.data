U0EUHKVGB : Are you generating the delete buttons via `List.map` and friends?
U0GPGFQQY : yes
U0EUHKVGB : I’m imaging you have something like this `List.map viewDeleteThing buttons`
U0EUHKVGB : where `buttons : List Button`, and `type alias Button = { id : String, text : String, thing : a}`
U0EUHKVGB : It can be anything which is uniquely identifiable about each element
U0EUHKVGB : Avoid using `indexedMap` as the id - this can change each render! So if you need to, apply `indexedMap` when you _load_ the button data to get an id
U0GPGFQQY : Ok, let's assume I got an id of each item from the backend. But this is only needed for the Delete message, and Confirm message is needed to confirm that Delete
U0GPGFQQY : So my original plan was to dispatch `Confirm (Delete itemId)`, that would put `Delete itemId` into `confirm: Maybe Msg`, and that would result in the view, that shows a button with `onClick msgToConfirm` if it is `Just msgToConfirm`
U0EUHKVGB : just store it as a maybe of the id :)
U0GPGFQQY : I guess I can live with that, I was thinking that there may be more things to confirm, besides just deleting
U1N4KAHT6 : Why does this compile? ```range : number -&gt; number -&gt; number -&gt; List numberrange start stop step =
    let
        n =
            (stop - start)
                / step
                |&gt; ceiling
                -- get rid of NaN
                |&gt; Bitwise.or 0
                |&gt; max 0

        helper i list =
            if i &gt;= 0 then
                helper (i - 1) &lt;| start + step * i :: list
            else
                list
    in
        helper (n - 1) []
```? Given that `/` says it’s arguments need to be `Float`, but the type declaration says it’s `number`?

U0EUHKVGB : then you just change the onConfrim message you pass to the view 
U0GPGFQQY : model field `confirm: Maybe String` should change then
U0GPGFQQY : because I can confirm more things than just deleting by id
U0GPGFQQY : Does it make sense to just use Msg there, or I should create my own union `type Confirm : Delete String | OtherThingToConfirm`
U0EUHKVGB : Generally, I prefer to keep the Msg focused on UI interactions, rather than logic
U0EUHKVGB : So I would make a new union
U0GPGFQQY : ok, thanks, this was helpful!
U3SJEDR96 : <@U1N4KAHT6> <https://github.com/elm-lang/elm-compiler/issues/1373> it shouldn't, and it's a bug (with some known variations)
U1N4KAHT6 : I thought so
U1N4KAHT6 : I wish there was a way to convert any number to Float, it would make sticking to your own type signatures a lot easier
U3SJEDR96 : There is an issue for possibly changing `toFloat : number -&gt; Float` which would help :slightly_smiling_face:
U3SJEDR96 : <https://github.com/elm-lang/core/issues/721> tracked in that meta issue
U1N4KAHT6 : Thanks, you seem to remember all the GH issues :slightly_smiling_face:
U1NME8MS8 : If you want to write down your ideas, I might be able to help. Its fun to dive into those topics
U3LT1UTPF : I have a record Product which I need to convert to a Javascript object to pass it to a custom element as a property: node "leaflet-map" [property "product" (Json.Encode.object model.currentProduct) ][]. The compiler says: Function 'object' is expecting the argument to be List (String, Value), but it is Product. Any hint?
U1NME8MS8 : What I mean by inlining is to move the data from the includes into the main attributes in the first plcae, so the includes are no longer needed
U0EUHKVGB : You need to build up a list of (String, Value) from your product
U0EUHKVGB : For example: ```
encodeProduct : Product -&gt; Json.Encode.Value
encodeProduct record =
    Json.Encode.object
        [ ("name",  Json.Encode.string &lt;| record.name)
        ]
```

U0EUHKVGB : If you want to get a better idea of what it might look like, paste your type alias into here: <http://eeue56.github.io/json-to-elm/>
U3LT1UTPF : The type alias is actually nested. Is that a problem in this case?
U3LT1UTPF : I mean, one of the fields of Product is a list of another record
U3SJEDR96 : then you'll need to encode those, first :slightly_smiling_face:
U3SJEDR96 : but yeah, eeue56's tool should help with tht
U3LT1UTPF : Great! Thank you, <@U0EUHKVGB> and <@U3SJEDR96> :smile:
U1KES8JGK : does anyone know of an auto-complete menu written in Elm? the one at <http://gregziegan.com/elm-autocomplete/> looked promising, but doesn't scroll the menu when the selection moves below what's currently shown.
U57KYFW67 : It's not possible to include two .js files created by Elm on one page, is it? It looks like by default, elm-make defines the Elm object in Javascript without checking to see if it's already defined.
U3SJEDR96 : I think it checks if it's already defined and merges them


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
