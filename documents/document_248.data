```
<@U5DDM498S> do you mean a path that you can send data to?
and get a response from?
yes, responses can be hardcoded
then just a static webserver
but handle different HTTP verbs and URLs
man y'all cut that function down real good. thanks for showing me how nice it can get!
You should be able to make a single file Flask (Python) app or Express (nodejs) app without much work
I just googled and found this example:
you can probably define more paths user `<http://router.post|router.post>`, `router.put`, etc in the middle section
thanks, I see I can also serve a static JSON file
then just install node and run it with `node server.js`
yeah you could do that as well, but then you need to define different responses for each verb if that's what you want to test
yes, I'd like to design an API and build the Elm front-end, but not worry about the API implementation details
indeed, that's how it should be done
Does anyone have a good pattern for propagating sub-view errors (like HTTP 404) to a parent view to have it display a nice not-found page? I was trying to follow this example(<https://github.com/rtfeldman/elm-spa-example>) but it is not clear how the `NotFound` page is set.
It looks like it's being set here: <https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L252>
in response to a `Maybe Route` being `Nothing`
When does the `SetRoute` get set as the model then? <https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L336>
I'm new to `elm`, but familiar with the functional concepts. The difficulty has been the patterns of `elm`. These are state machines, but the transitions between states are hard to hunt down. Wish they were more declarative.
If I want to call `update` programatically, should I do so, or is there a recommended technique?
umm, it is just a function. If it's the same function you are passing to program, then that seems a little odd.
Call it programmatically. Nothing odd about doing that.
If you are calling `update` programatically for code re-use, you probably want to extract a function instead
