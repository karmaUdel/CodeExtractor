```
there are legitimate cases for `Debug.crash` where elm's type system isn't strong enough to convince the compiler that something holds (for example a list is not empty), but it is nonetheless guaranteed
wups, I'm taking a shortcut myself :smile: (`toString s.code`)
<@U2JFD9ALE> that thing you linked to; I don't see how they're taking a shortcut or how it is related to debug.*?
How do I convert numbers to strings if `toString` becomes part of `Debug`
In case of an error, they return the old model and no new commands
there will be a `String.fromInt` and `String.fromFloat`
Hello! Good day to you all!
<@U3SJEDR96> I would rather have something like this: `Console.log "text"` rather than `Debug.log`
Console.log should produce a `Msg` like all the other side-effects
I mean `Cmd msg`
I'm not sure I see the use-case, in general, for logging to the console _except_ for debugging purposes?
That way I can built-in to my SPA if I want to provide the option to `log` to the `console`
but if you need that, you can sure do that - have a simple `port emit : Json.Value -&gt; Cmd msg` and `app.ports.emit.subscribe(console.log)`
I'm preparing a talk: _*"Data protection by design and by default" *_, which is GDPR (General Data Protection Regulation) related <https://www.meetup.com/Elm-Copenhagen/events/241530394/> where I will show case that from 2018-05-25, languages like :elm:, :haskell:, PureScript and Idris will really shine (<http://blog.stermon.com/articles/2017/07/14/haskell-why-many-people-so-stupid-about-gdpr>) but it will require that the language actually provides strict delimiters between pure and impure code :wink:
so my example gets pretty much useless due (`toString`, `Debug.`, ...) and so. Therefore it would be nice if _*all*_ side-effects would be handled in a similar manner
data protection cannot be handled in the front end, surely?
It can
Come to my talk :slightly_smiling_face:
but it’s javascript in the end anyway
i’m not sure i understand
on the backend - for sure the language can help
Once the slides are made, I'll send you a private message and you can decide :wink:
<@U2JFD9ALE> I'm interested in the slides too :smiley:
<@U2JFD9ALE> sure thing
I am trying to do a cross site posting and am having some trouble with Http.send &amp; Http.request. Http.request returns `Request ()` and Http.send says it is expecting `Request String`.  Where have I gone wrong?
<http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#request> seems to return `Request a` which should be fine
you just have to pass the right `expect`
Better to show the code instead
    Request String`
because you handle its result as a `String`. If you do that, you also need to make sure the request actually expects a `String`
OK, I think I get it. Thanks!
<@U4872964V> - thanks again. took a couple of minutes before all was clear to me. All bright and shiney now!
&gt; Note: I'm using `getString`
I got all twisted up because of cross site posting
