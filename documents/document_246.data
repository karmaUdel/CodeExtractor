```
Just as an alternative. I don't think it is really better.
Depends on what it is you're trying to do.
In my experience, from being here in <#C192T0Q1E|beginners> for a long time, a lot of people run into issues when they aren't leveraging the type system fully.
Or their datastructures could be remapped.
<@U5AEH3L05> By 'this' do you mean wanting to use functions which aren't already part of some standard package? I don't think that should necessarily discourage you. Elm's ethos is to be cautious about deciding which features to add in an effort to encourage exploration and experimentation to see if we can find good solutions without extra complexity.
a pairwise map is a perfectly reasonable method of traversing a list, however it is preferrable to implement it via the base fold method as opposed to recursion
Ahh, thanks for showing me how to do it with foldr! I was thinking about that.
<@U23SA861Y> why's that?
<@U48AEBJQ3> Good to know. I guess it felt like I saw every other kind of map but this :slightly_smiling_face:
By specifying exactly what you want things can be optimized under the hood. While there are things like `tail call optimization` that exist in functional languages that help this it is really easy to get recursion wrong
or to write in a way which will pop the stack
for example, your implementation isn't stack-safe, <@U5AEH3L05>
Makes sense -- I'm still not as comfortable with folds as i'd like to be!
fold is sort of the ultimate traversal primative
you can use it to implement map for example. Getting a feel for fold helps alot.
it hadn't crossed my mind to use fold with a tuple before, but <@U48AEBJQ3> had a nice implementation with it
Might be a good addition to List.Extra. Consider submitting a PR.
can get even better I think
I'll try and chip away at it for fun. should I prefer foldl vs foldr for any reason?
it depends on what you want/need
foldl starts processing right away which foldr needs to traverse to the bottom before it processes back up
you might even be able to do it with map
