U08UTJ5PB : Indeed, I very much appreciate the help
U051SS2EU : I seem to recall a recommendation to bind on 127.0.0.1 inside the vm, and use an ssh tunnel to access it from the host
U051SS2EU : but maybe that's silly.
U08UTJ5PB : I'll test to see if 127.0.0.1 works as well
U3L6TFEJF : <@U050SC7SV> hello! I'm trying out <https://github.com/mpenet/spandex>, and I'm getting this error when `take!`-ing from a `scroll-chan`:```#error {
 :cause Response Exception
 :data #qbits.spandex.Response{:body {:error {:root_cause [{:type illegal_argument_exception, :reason Failed to parse request body}], :type illegal_argument_exception, :reason Failed to parse request body, :caused_by {:type json_parse_exception, :reason Unrecognized token 'DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAEKFlFLeXR6MDh2UTRxLVdkLVhEbXZSMFEAAAAAAAABCxZRS3l0ejA4dlE0cS1XZC1YRG12UjBRAAAAAAAAAQ0WUUt5dHowOHZRNHEtV2QtWERtdlIwUQAAAAAAAAEMFlFLeXR6MDh2UTRxLVdkLVhEbXZSMFEAAAAAAAABDhZRS3l0ejA4dlE0cS1XZC1YRG12UjBR': was expecting ('true', 'false' or 'null')```

U3L6TFEJF : any idea what might be going on here?
U050SC7SV : If you give me the detail of the request I can have a look. Worse case tomorrow. We can do that in priv msg btw
U3L6TFEJF : <@U050SC7SV> done :+1:
U2UKX5DQR : I am trying to test a `java.sql.SQLException` handler which unwraps the exceptions like below. However I'm not sure how I would throw this exception in a test.```
       (-&gt; e
           (.getNextException)
           (.getMessage)
           (.startsWith "ERROR: duplicate key value"))
```
current mock (`.getNextException` returns nil on this):
```
(throw (SQLException. "ERROR: duplicate key value"))
```

U04V70XH6 : (answered in <#C1Q164V29|sql> — use `setNextException()` <http://docs.oracle.com/javase/8/docs/api/java/sql/SQLException.html#setNextException-java.sql.SQLException-> )
U34K4458X : Hey, clojurians. I'm using `yesql` in my project to query postgres database. Some tables has boolean columns ending with question mark. How to properly use queries like this with yesql:```
select name, email from user_accounts where "activated?" = true;
```
Seems `yesql` thinks that question mark is param placeholder and fires error.

U04V70XH6 : <@U34K4458X> Could you try that same query directly with `java.jdbc` just to eliminate whether the problem is `yesql` or something else?
U04V70XH6 : I've never seen a database with `?` in column names... I didn't even think it was legal.
U34K4458X : Me neither, but have to use it :slightly_smiling_face: Tried JDBC - works fine.
U34K4458X : In postgres it is not legal, but can be escaped with column name with quotes
U04V70XH6 : OK, well, that confirms a bug in `yesql` so you should create a GitHub issue.
U34K4458X : Seems that yesql is not actively maintained. Started evaluating hugsql instead.
U34K4458X : Thanks anyway
U04V70XH6 : Ah, right, I heard that folks are switching to HugSQL. BTW, there's a <#C1Q164V29|sql> channel that's probably best for Qs like this.
U04V70XH6 : We use HoneySQL for complex queries and raw `java.jdbc` for most stuff.
U4PRDUVCY : Singapore Clojure Meetup tomorrow night, welcome to join. <https://www.meetup.com/Singapore-Clojure-Meetup/events/240601551/>
U5YHX0TQV : petr: I'm not sure about docker, i only recall that that specific exception was related to ipv6 on a non-clojure project.
U11SJ6Q0K : armed: you may be interested in my fork <https://github.com/tatut/jeesql>
U34K4458X : <@U11SJ6Q0K> wow, thanks. I'll definitely look at your lib.
U06F82LES : <@U4PRDUVCY> event invitations are always appreciated. But it would probably be better to limit them to one channel (<#C03RZRRMP|events> seens best)
U11SJ6Q0K : If you are feeling particularly adventurous, you can try <https://github.com/tatut/specql>
U4PRDUVCY : :ok_hand::smiley: <@U06F82LES>
U052XLL3A : Anyone dabbled with Java 1.8's Nashorn (js runtime)? I'm a bit puzzled as to how it evaluates JS object literals:```
(-&gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName "nashorn")
    (.eval "new Object({foo: 42})"))
=&gt; {"foo" 42}
```
versus 
```
(-&gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName "nashorn")
    (.eval "{foo: 42}"))
=&gt; 42
```

U052XLL3A : Oh, this works (wrapping the exp with parens):```
(-&gt; (javax.script.ScriptEngineManager.)
    (.getEngineByName "nashorn")
    (.eval "({foo: 42})"))
=&gt; {"foo" 42}
```

U052TDWT7 : Hello everyone, is there any book/online resource about functional architectural patterns? Something like Patterns of Enterprise Application Architecture by Martin Fowler but from a functional point of view...
U297WCSHK : Rich Hickey's Talks can be considered as source of some patterns I think
U5YHX0TQV : <@U052TDWT7>  <http://mishadoff.com/blog/clojure-design-patterns/>
U052TDWT7 : Thanks <@U297WCSHK>, <@U5YHX0TQV>
U1YTUBH53 : any spectacular clojure alternative to <https://github.com/Raynes/conch>?
U1YTUBH53 : clojure's built-in `sh` is limited (no support for processing stdout/stderr as streams)
U1C72J3J4 : Hi clojurians! I'm trying to pattern-match a hashmap, but this is what I get:```(m/match [{:arst false}]
  [{:qwfp #"stuff.*"}] 1
  [{:arst false}] 2)
ClassCastException clojure.lang.Keyword cannot be cast to java.lang.CharSequence  clojure.core/re-matcher (core.clj:4775)```
What's going on here?

U07S8JGF7 : <@U1C72J3J4> I pasted exactly what you have into the repl and got `2`.


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
