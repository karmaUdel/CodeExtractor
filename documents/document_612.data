U217F5W11 : <@U0H3A9XLN> not sure about "best" since that's a loaded term, but how would you plan to simply store the list of posts?
U0H3A9XLN : That’s one of the questions. Ideally I would expect it to be something along the lines of `List (RemoteData Post)` since I’d like to be able to handle errors/loading states separately for each post.
U217F5W11 : Have you considered a `Dict Int Post`? Those can be advantageous when we have a bag of things like posts which might be dynamically loading or disappearing and for which we want to search by an id
U217F5W11 : Or even `Dict Int (RemoteData Post)` in your case
U4872964V : I have `Dict String (RemoteData ...)` in one of my projects
U4872964V : it works well
U0H3A9XLN : Could you, please, write types for User and Post as you would do in your Elm code?
U217F5W11 : That may depend on how many posts a user might have, but here is one option
U0H3A9XLN : The part I am more interesting about is how to handle relations within data, since originally you get fields as id’s
U3SJEDR96 : One option is to represent it very much like you wrote it before: `type alias User = { id : Int, posts : List Int }` and have a `Dict Int (RemoteData Post)` where you can look up those posts for displaying
U217F5W11 : ```type alias User =
  { id: Int
  , posts: List Int
  }

type alias Post =
  { id: Int
  , content : String
  }

type alias Posts = Dict Int (RemiteData Post)
```

U0H3A9XLN : Ok, I see. Is there a way to use it “inline”.
U0H3A9XLN : So If I have multiple users in my model I do not have to store all their posts in one `Dict`. This is due to skip cache invalidation problems.
U4872964V : You can have `posts` be a `List (RemoteData Post)` in `User`
U4872964V : but that won’t work, you’d need the id, so you probably want `List (Int, RemoteData Post)`
U4872964V : or `String` as it seems your ids are strings
U4872964V : it depends on what you actually want
U0H3A9XLN : Ok, that seems reasonable. Thank you :slightly_smiling_face:
U217F5W11 : You can do the dict online too
U217F5W11 : And I would recommend converting to an Int id on load to remove that ambiguity
U0H3A9XLN : Well, I can’t really convert it, because I have multiple relations in my “User” alternative. And `Task` do not provide any way to make requests in parallel.
U5T739RFW : hardfire: I got scared reading that actually. What about my header and footer? I have complex header, with dropdown menu, and whole model/update/view of its own. Header is a not a page, so what will happen.
U3SJEDR96 : so do the pages in that example - I'm fairly confident that there will be a way to allow that type of behaviour in whatever Evan comes up with
U217F5W11 : <@U0H3A9XLN> what do you mean that you cannot convert it? also, why can you not make requests in parallel?
U5GJ5FEAU : yes, true! I hope even if some abstraction over the pages is added, there is a way to handle the passing of Msg and everyting manually as now.
U5GJ5FEAU : or that is kept in mind while designing the whole thing. Thus curious if there are any design docs, or what the final API would look like
U5T739RFW : I guess we should not discuss all this at this juncture. I am sure such an obvious case they will consider, and no point giving feedback on / discussing things that are not finalized/proposed yet.
U0H3A9XLN : <@U217F5W11> there is no `Task.parallel`. What I mean is that I’d be able to fetch all the data at once in the `Task` chain and then I don’t need to store ids somewhere.
U217F5W11 : do you mean parallel or sequential, like, get the user and then get all of the posts the user request referenced?
U217F5W11 : or, get these three things all at the same starting point
U0H3A9XLN : In this case they are sequential, but in case user have posts and friends then I want all requests for posts and friends be parallel
U0H3A9XLN : However I’ve already implemented things as tuples and it works more or less nice :slightly_smiling_face:
U217F5W11 : not sure Elm blocks you from doing that. We have `Task.andThen` to work with those data-sequential requests and `Cmd.batch` to dispatch multiple tasks at once
U0H3A9XLN : Cmd do not have `andThen` so I can’t transform data inside task chains. I have to go through update with them. In this case I either have to store ids somewhere or have two different types for `User`.
U217F5W11 : you don’t need to store those ids though, you can pass them along in a new task
U0H3A9XLN : This is basically continuation of
&gt; What I mean is that I’d be able to fetch all the data at once in the `Task` chain and then I don’t need to store ids somewhere.

U0H3A9XLN : So with current `Task` API it seems to be impossible for me
U0H3A9XLN : But I do it through update and it seems fine
U0H3A9XLN : So no big worries
U217F5W11 : so something like…
```
getUser : UserId -&gt; Task String User
```

becomes

```
getUser : UserId -&gt; Task String (User, Cmd msg)
```

U217F5W11 : and then…
```
getUser
  |&gt; andThen (\user -&gt; (user, getPosts user.postIds) )
```

U5GJ5FEAU : i do something like `Task.map2 (\posts friends -&gt; updateModel posts friends) Data.getPosts Data.getFriends` not sure if they are parallel or not. never thought of that
U5GJ5FEAU : <@U217F5W11> ^
U3SJEDR96 : they're not
U217F5W11 : but you may be hitting an intrinsic semantic question (leading to needing to deal with it in update) - is there ever a time when you want to get the user but not the posts? if they are always together, is there a reason not to just handle it in the update function?
or, maybe that’s the question: what is it that leads you to not want to deal with it in the update function?

U0H3A9XLN : Yeah, they are not :slightly_smiling_face:
U5GJ5FEAU : dang! good to know :smile:
U5GJ5FEAU : i always thought the Tasks were just sent off one after the other without waiting for the results
U0H3A9XLN : Is there a way to pattern match on list field inside record which is inside union type tag? Something like:
```
Just { list = x :: xs } -&gt;
```



in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
