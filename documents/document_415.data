```
Oh, you're probably missing parenthesis in your `Msg` declaration
Oh yes!
`BoidsGenerated List Boid` &lt;-&gt; `BoidsGenerated (List Boid)`
I spent half an hour + on this :disappointed: :stuck_out_tongue: Heh Thanks <@U3SJEDR96>
I started working on Elm a couple of days ago and i havent got used to the syntax fully yet
Yeah, to be honest, it's a little surprising that `type alias Foo = List` is even valid, but we'll get there, eventually :slightly_smiling_face:
Yeap :slightly_smiling_face:
Is there a way to combine messages from different files? For instance I have a Seed file which includes a message ‘BoidsGenerated' and I want to include that as a case as part of my main ‘update' function in my Mail.elm file. I could of course defined it in the Main.elm file (or to a Messages.elm file).
`type Msg = BoidsMessage Boids.Msg`, though it might be easier to pass the message to use to `generateBoids : (List Boid -&gt; msg) -&gt; Cmd msg`
which would make `generateBoids tagger = generate tagger (list 5 boidGenerator)`
Yeah, but the second option means that I will have to define the msg type in say the Main.elm right?
In all cases you will need a message type in Main.elm
and that will have all the types for the whole application?
In the Elm architecture, there is only one message type, the one that the update function from the `Html.program` accepts
you may of course choose to subdivide that type in whatever way you like, but it's still only one type
<@U4872964V> Got it, so the main update function that retrieves the message and handles the different cases has all the cases of the application right?
yes, the update function handles all messages, but the same applies here, you may subdivide it into smaller functions in any way you like
Yeap, its what I do now actually. What I was trying to do is somehow combine different messages from different files into the main update function. But that is not really possible.
well, that's what you do when you make sub-types to the main Msg type
but you are right that the `Main` module conceptually needs to know everything there is in your application
Yes, thanks for you help <@U3SJEDR96> <@U4872964V>
    c /= ','`
    : Result.Result Parser.Error (List String)`
the terms beetween comma could be a string with any char except commas of course
Yeah, that `sem` doesn't look correct; it's consuming the `)` at the end and then failing because it misses the end
try something like
