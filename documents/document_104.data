U3L6TFEJF : for the behavior you want, use <http://clojuredocs.org/clojure.core/compare-and-set>!
U051HUZLD : :hearts:
U3LURNK5W : Is there a way to time all sub-calls of a fn?
U3LURNK5W : let's say i have:```(defn foo [x]
         (-&gt; (foo-1 x)
               foo-2
               foo-3))```

U3LURNK5W : ofc i can do ```(time (foo x))```
U3LURNK5W : but can i get the timings of the calls to foo-1,foo-2,foo-3 without wrapping each fn?
U04V1HS2L : Is there any way (lib?) to rerun only "failed-last-time" clojure.test vars?
U051HUZLD : <@U3LURNK5W> have a look at <https://github.com/thunknyc/profile>
U3LURNK5W : thx
U051HUZLD : what would be a use case for this? <https://github.com/weavejester/medley/blob/1.0.0/src/medley/core.cljc#L273>same as `swap!`, but returns atom's previous value (before it was successfully swapped)

U053XQP4S : <@U051HUZLD> ```
(def queue (atom clojure.lang.PersistentQueue/EMPTY))

(defn push! [x]
  (swap! queue conj x))

(defn pull! []
  (-&gt; queue (deref-swap! pop) peek))
```

U1Q12R4F2 : Hello everyone, I have an app which stores documents (edn/json files, size from 100kb up to 1000kb) and I want to save the whole change-history (changes will be small, max 30kb maybe, but frequently) without storing the whole document for each change. Is there a free document database which supports document history with delta encoding?
U06FTAZV3 : <@U1Q12R4F2> Datomic comes close to doing what you want, but it's not an exact match.
U053XQP4S : git ?
U1Q12R4F2 : <@U06FTAZV3> yes, datomic looks promising, but the licensing doesn't fit. (only 1 year updates in free version etc.)<@U053XQP4S> I heard this from other people before. It sounds logical, but odd to use git as a "database" :grinning: 
Maybe I should give that idea a try. The documents are hold in-memory at runtime, and only written on disk if changes were made - so using git seems to be a good solution.

U050SC7SV : there's irmin, but I am not sure there's a binding for java, it should not be impossible to do tho
U06FTAZV3 : <@U050SC7SV> <https://github.com/mirage/irmin> ?
U0K0TFQLW : is it possible to do local type extension?
U0K0TFQLW : i.e. extend something only in a let binding?
U5XMV6DQT : ```(let [wtf (extend-fn wtf)]
 …
```
?

U050ECB92 : <@U0K0TFQLW> nope.  What are you trying to achieve?
U0K0TFQLW : locally I want to encode JSON differently
U0K0TFQLW : was just looking through how cheshire.generate maps encoders via a protocol JSONable
U050ECB92 : I see. Unfortunately cheshire write methods are global =(
U0K0TFQLW : yeah
U050ECB92 : Transit and Fressian do not make that mistake
U050ECB92 : ( i know that doesn't help you immediately )
U0K0TFQLW : unfortunately my third party api doesn't accept either of those
U0K0TFQLW : I wonder if data.json is extensible locally


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
