U6D3ERLA1 : still a bit of a paradigm shift for me...
U6D3ERLA1 : ```mapGrid func =
    Array.indexedMap
        (\y row -&gt;
            Array.indexedMap
                (\x val -&gt;
                    func x y val
                )
                row
        )
        grid
```

U6D3ERLA1 : I guess this still has \s in it
U2SR9DL7Q : <@U14Q8S4EM> thanks. I'll do a rebuild and see if it helps
U2U94G0QG : idk - converting `number &gt; String &gt; Float` just feels icky - maybe it's not so bad in reality?
U5W86UED6 : <@U6D3ERLA1> it's a matter of personal preference, but maybe let over lambda?
```
mapGrid func grid =
    let
        mapRows y row =
            Array.indexedMap (mapColumns y) row

        mapColumns y x val =
            func x y val
    in
        Array.indexedMap mapRows grid
```

U6D3ERLA1 : ok
U5W86UED6 : ah, yes, that is pretty unappetizing
U5W86UED6 : maybe the solution is an `averageFloat` and an `averageInt` function?
U5W86UED6 : I suppose `average` could put the constraint on needing to have a list of floats, and a separate piece of your program would ensure the conversion when building a list
U5ABF3BH7 : Hello! Does anyone have examples of decoding for union types, using Json.Decode.Pipeline? I have found examples that were outdated.  For example, I have the following type  ``` LocationType
    = PersonResidence
    | InTransport
    | Hospital
    | NursingHome
    | Hospice
    | CommunityBasedResidentFacility
    | Other ```

From my Json object, I have  
```{"type_" =&gt; "Person's Residence"} or {"type_" =&gt; "In Transport"}````
, etc….
I want it to be changed into a Union type into my model

```locationDecoder : Decoder Model
locationDecoder =
    decode Model
        |&gt; Json.Decode.Pipeline.required "type_" string
   ```
won't work as it created a field that is a string and not a Union Type. How can I use the method locationfromString : String -&gt; LocationType in my decoder?

U2U94G0QG : well the OP was asking for a function that looked like `average : List number -&gt; Float` and I just made that gross thing - how would one go about determining if a `number` was `Int` or `Float` in Elm?
U1UGYHGCA : `Json.Decode.map` probably
U14Q8S4EM : Here is some code I wrote up that decodes to a union type <@U5ABF3BH7>
U14Q8S4EM : <https://github.com/Chadtech/Chadtech-Online-2-Post-Composer/blob/master/source/Types/Model.elm>
U14Q8S4EM : Checkout the functions `ContentDecoder` and `ContentDecoderHelp`
U3FJSB596 : Or `Json.Decode.andThen`
U5ABF3BH7 : <@U14Q8S4EM>  <@U1UGYHGCA> Thanks a lot!
U1UGYHGCA : ```locationDecoder: Decoder LocationType
locationDecoder =
  Json.Decode.field "type_" Json.Decode.string
  |&gt; Json.Decode.map (\type_ -&gt; case type_ of
    "Person's Residence" -&gt; PersonResidence
    "In Transport" -&gt; InTransport
    -- ...
    _ -&gt; Other
  )
```

U1UGYHGCA : Might work
U5W86UED6 : oh! you wouldn't - I was supposing that `average` should be defined as `List Float -&gt; Float`, putting the burden on the part of the program that generates the list, rather than on the function. but your solution is exactly the way to satisfy his original question
U3FJSB596 : With this version, you do not need to add a new value `Other` to your `LocationType`.
U6D3ERLA1 : ```mapGrid func grid =
    let
        mapRows y row =
            Array.indexedMap (mapColumns y) row

        mapColumns y x val =
            func x y val
    in
        Array.indexedMap mapRows grid


updateMarker p k =
    \x y val -&gt;
        if p.x == x &amp;&amp; p.y == y then
            k
        else
            val

debug = mapGrid updateMarker { x = 1, y = 1 } "X" initBoard
    |&gt; log "Map"
```

U6D3ERLA1 : Maybe someone can help me with this.... I'm trying to pass updateMarker to mapGrid with two paramaters (a point and a key) which will be evaluated inside of map grid - along with the current grid location (x, y)
U14Q8S4EM : <https://gist.github.com/Chadtech/81a96e4facab7a3dc9196e2811ce6c08/edit>
U6D3ERLA1 : Maybe I need to curry updateMarker before passing to mapgrid..
U14Q8S4EM : <@U6D3ERLA1> , thats how I would write your code. Tho I am not sure given your use case things need to be this convoluted.
U6D3ERLA1 : <@U14Q8S4EM> I think that gist is private


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
