U0FQ4UYRK : This is possibly a <#C0F2GS35Z|node> thing, but is there anything that allows people to write simple command-line apps with Elm? I've found <https://github.com/laszlopandy/elm-console>, but it's intentionally semi-abandoned (not needed for the author's use-case anymore).
U0FQ4UYRK : (Just interested in either taking lines of input from STDIN, or reading a file. The latter is optional.)
U2GPX0EKC : <@U0FQ4UYRK> elm-repl?
U0FQ4UYRK : <@U2GPX0EKC> Command-line app, as in:```
$ cat mybigfile.txt | ./my-elm-app
Lines: 4000
Done.
```
... if `my-elm-app` were a command-line app that listed the number of lines from stdin and then printed Done.

U0FQ4UYRK : Even having the capability for just goosing around with it. My options at the moment are "typing commands into elm-repl" or "writing a browser UI".
U2GPX0EKC : Maybe they havent made that possible
U0FQ4UYRK : That elm-console library above _used_ to do something like this, but it's pre-Signal-elimination.
U3SJEDR96 : so, you can set your elm app up as a worker (using `Platform.program`), and set up an incoming and outgoing port - incoming where you stream stdin to, outgoing you dump on the console
U0FQ4UYRK : (<@U2GPX0EKC>: Yeah, I don't see this being something that comes out of the box. More interested in people who've tried to make it work.)
U0FQ4UYRK : <@U3SJEDR96> Ah, okay; as in, wrapping it in a `#!/usr/bin/env node` script that calls the compiled Elm JS.
U3SJEDR96 : for a "write only" cli app, I had sometihng like this as the "runner":```
const Elm = require('./elm.js');

const app = Elm.App.worker();

app.ports.emit.subscribe((msg) =&gt; {
  console.log(msg);
});

```

U0FQ4UYRK : Got it. Thanks. :slightly_smiling_face:
U3SJEDR96 : note, also, that <@U0JUBLV8F> is exploring what the options are for elm cli apps, and how to make it the great experience we've come to expect from Elm
U0U6ML22H : very interesting, thanks for the info!
U3SJEDR96 : playing around with that type of pattern, I managed to create a proof-of-concept cli benchmark runner - <http://g.recordit.co/2tE7m7pAl0.gif> - so it's a viable approach :wink:
U3SJEDR96 : and <https://github.com/zwilias/elm-benchmark-cli> for the code :slightly_smiling_face:
U0H3A9XLN : Hello folks! Is anyone aware of a pure elm way to make tooltips? Something like in bootsrap.
U0CLDU8UB : Pure CSS solutions exist
U0H3A9XLN : Oh, thanks <@U0CLDU8UB>!
U5GJ5FEAU : In the elm-spa-example <@U0CL0AS3V> mentions that most of the Main.elm would go away in Elm 0.19 . I'm curious what would go away, and maybe if we could help in the process. any idea where should i be looking :smile:
U5GJ5FEAU : <https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L25>
U3SJEDR96 : so one of the features that's being considered for 0.19 is code splitting - a separate, minimal bundle per route. To enable that, routing and the concept of "pages" will become a first-level concept in Elm, most likely to be configured through a new type of `elm-package.json`. This should take care of routing, bundling, code splitting, and handling the boilerplate that's currently involved in managing SPA's
U3SJEDR96 : you can read some more of what the roadmap looks like here <https://github.com/elm-lang/projects/blob/master/roadmap.md>
U5GJ5FEAU : thanks <@U3SJEDR96>
U0EUHKVGB : <@U0FQ4UYRK> I gave a talk about this at osloelmday, <https://www.youtube.com/watch?v=FUHlnxQJTMM>
U0FQ4UYRK : Ta. :slightly_smiling_face:
U28J39X6J : Hi there! 
Just published my first elm package <https://github.com/amaksimov/elm-multikey-handling> :relaxed: with some extra helpers for handling multiple key combinations on nodes.
Tell me please, this solution can be useful?

U4872964V : is it useful for you? then yes :slightly_smiling_face:
U28J39X6J : Of course, yes! Maybe I missed some functions and approaches in the core libs - and it all looks like crutches)
U0CLDU8UB : You might consider utilizing the low level features of my keyboard-extra package to get type safe keys for your package, too :)
U0CLDU8UB : Then you could have a `|&gt; with CharC` sort of generic API
U28J39X6J : Thank you, it sounds good! I’ll take a look at your package)
U3R7CKQRX : Hi everyone, we at Shore in Munich we are looking for guys that are passionate about Elm. Our Elm codebase is increasing every day and we are hiring. If you are interested please ping me or apply directly <https://www.shore.com/en/jobs?gh_jid=97893>
U3SJEDR96 : <@U3R7CKQRX> check out <#C0LUAGWRK|jobs> :slightly_smiling_face:
U3R7CKQRX : oh cool, thanks
U3R7CKQRX : :slightly_smiling_face:
U3SJEDR96 : there's a fixed format in that channel, so be sure to post it formatted correctly :slightly_smiling_face:
U0J8D9M2P : How do you clean generated `tmp-[hash]/emiiter.js`?
U3SJEDR96 : the elm-test stuff? it it's autoremoved, afaik
U0J8D9M2P : Every time I run `webpack` new files are generated, but old ones are not removed
U3SJEDR96 : oh, webpack. No idea, then :confused:
U41NK9BM4 : Webpack is like regular expressions.  You known that quote: «Some people, when confronted with a problem, think “I know, I’ll use Webpack.” Now they have two problems.»  :stuck_out_tongue_winking_eye:
U0J8D9M2P : <@U41NK9BM4> what do you use to run server for elm?
U5GJ5FEAU : christophp: sweet! some months ago and i'd have jumped to this opportunity. plus point, i was already in munich :smile:
U0U6ML22H : hey, so I've just noticed that I'm suffering badly from the Elm compiler using too many CPUs when building (<https://github.com/elm-lang/elm-make/issues/159>)
U0U6ML22H : building and using sysconfcpus (`sysconfcpus -n 1`) works, but I'm not sure how to do it with our webpack scripts
U0U6ML22H : anyone encountered (and preferably solved ;)) this issue?
U0EUHKVGB : Yes
U0EUHKVGB : Just call webpack with sysconfcpus
U0U6ML22H : of course
U0EUHKVGB : `sysconfcpus -n 1 webpack`
U0U6ML22H : somehow, I got stuck trying to call elm make that way, but it obviously cascades...
U0U6ML22H : thanks Noah, sorry about that
U0H3A9XLN : What is the best way to represent relational data in Elm?
For example I do have two rest endpoints which I can use to fetch user and posts. Within user response I will get list of ids of posts of the user. Then I need to do separate requests to fetch each post.

```
user = {
  id : '123',
  posts: ['456', '789']
}

post = {
  id: '456',
  text: 'hello world'
}
```

Also I am using `RemoteData` to represent data which comes from the server.

U217F5W11 : <@U0H3A9XLN> not sure about "best" since that's a loaded term, but how would you plan to simply store the list of posts?
U0H3A9XLN : That’s one of the questions. Ideally I would expect it to be something along the lines of `List (RemoteData Post)` since I’d like to be able to handle errors/loading states separately for each post.
U217F5W11 : Have you considered a `Dict Int Post`? Those can be advantageous when we have a bag of things like posts which might be dynamically loading or disappearing and for which we want to search by an id
U217F5W11 : Or even `Dict Int (RemoteData Post)` in your case
U4872964V : I have `Dict String (RemoteData ...)` in one of my projects
U4872964V : it works well
U0H3A9XLN : Could you, please, write types for User and Post as you would do in your Elm code?
U217F5W11 : That may depend on how many posts a user might have, but here is one option
U0H3A9XLN : The part I am more interesting about is how to handle relations within data, since originally you get fields as id’s


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
