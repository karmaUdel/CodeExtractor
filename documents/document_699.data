U17R1GD96 : My update still does not work. This is wrong: ```update : Msg -&gt; Model -&gt; ( Model, Cmd Msg )update msg model =
    case msg of
        Payload data -&gt;
            { model | themeUri = data.theme_uri }
                ! []```

U17R1GD96 : ````data` does not have a field named `theme_uri`.
67|             { model | themeUri = data.theme_uri }
                                     ^^^^^^^^^^^^^^
The type of `data` is:

    Result String Model```

U17R1GD96 : the same the `{ model | themeUri = data.themeUri }`
U3SJEDR96 : `data` at that point is a `Result String Model` because if someone sends you bad values, you want to handle that somehow, too
U17R1GD96 : yes, just found it may contain errors I have to handle somehow
U3SJEDR96 : so you can```
case msg of
  Payload (Ok data) -&gt; { model | themeUri = data.themeUri } ! []
  Payload (Err error) -&gt; { model | error = error } ! []
```

U3SJEDR96 : or something along those lines
U17R1GD96 : Almost working. My model is not changing. I have init with some initial fake data. My  model should be overwritten by update, right? It looks like the model is keeping only that init data values.
U0J1M0F32 : I would imagine that the model is not _actually_ being updated then for some reason. Either the wrong action is firing or there is some sort of issue in the `update` function.
U0J1M0F32 : Maybe I missed it, where is the code that kicks off the Ajax request?
U17R1GD96 : My JS is using React ```import React from 'react'import Elm from 'react-elm-components'
import { connect } from 'cerebral/react'
import { state } from 'cerebral/tags'
import { HeaderModule } from '../../elm/dist/elm'

export default connect({
    themeUri: state`app.theme_uri`,
    headers: state`app.header`,

  }, function Header ({themeUri, headers}) {

    function setupPorts (ports) {
      ports.payload.send({themeUri, headers})
    }

    return &lt;Elm src={HeaderModule} ports={setupPorts}/&gt;
  },
)```

U17R1GD96 : I don’t have AJAX calls.
U17R1GD96 : I pass data from JS
U0J1M0F32 : Ah I see the port now.
U0J1M0F32 : Have you tried loading the elm app through the elm-reactor or using `Debug.log` inside the `update` function to see what events are firing. My gut says something is not sending the payload to the app.
U23SA861Y : wheres the fun in coding something if the API is stable, pfft.
U17R1GD96 : It’s like that message is never executed…
U0J1M0F32 : I wonder if this issue is in redux, and something is going wrong with the Thunk.
U17R1GD96 : I don’t use Redux. I use Cerebral. I pass the data to ports
U0J1M0F32 : I would add the debug call outside of the case statement, even though I'm pretty sure no messages are being sent through the port.
Perhaps also put a `console.log` in the `setupPorts` function.

U0J1M0F32 : Gotcha.
U2H4UJE9Z : <@U17R1GD96> Might be nothing, but in your `payloadDecoder` you have `|&gt; required "error" string`, but you only pass `{themeUri, headers}` through your port (also, your decoder expects `theme_uri` and not `themeUri`)
U2H4UJE9Z : You can try to use `optional` (<http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/3.0.0/Json-Decode-Pipeline#optional>) instead of `required`.
U4872964V : You should see a `Payload (Err ...)` message in that case though
U4872964V : but maybe you weren’t looking for that, should show up in the debugger
U17R1GD96 : I fixed theme_uri. The data in JS are fine. console.log shows all is OK in setupPorts
U17R1GD96 : OK. I added Debug.log to error and I have something
U4872964V : When i debug messages, I usually put a `case Debug.log "update" msg of` in the `update` funciton
U17R1GD96 : nice, I will add it there
U4872964V : then you get a nice listing of all messages
U17R1GD96 : ```update: Payload (Err "Expecting an object with a field named `error` but instead got: {\"themeUri\": ...```
U17R1GD96 : strange
U2H4UJE9Z : Try exchanging `|&gt; required "error" string` in payloadDecoder with `|&gt; optional "error" string ""`
U2H4UJE9Z : If you use the `required` function, it will fail the decoding with the error you are seeing (unless you actually add a property called "error" to the data sent through the port)
U17R1GD96 : uff, works!! (I only needed to rename “class_” to “class” because my data uses “class”)
U17R1GD96 : That was good lesson. Thanks all for help
U4872964V : it seems strange to use `Model` as your payload type though
U0CL0AS3V : sounds like documentation would take all the fun out of it then :wink:
U23SA861Y : It seems fairly straight forward if you want to make js functions available to elm, just need to set a name mangled variable with a record of function pointers. But the when it comes to creating something at main, there are a few compiler defined functions I can't track down like `F2` and `A2`
U5ABF3BH7 : Hello, I am looking for advice on how to organize my views. I have a very long complex page which is the page I am working on (Views.FirstCall). Right now, this view is divided into different views representing the different sections in the page (PersonInfo.elm, Location.elm, Caller.elm, Appointment.elm...etc..). I am trying to re-organize them as we had the data and views all mixed up.  I am wondering if I should structure all the sub-views related to FirstCall page into a special folder or if it is un-necessary and I should just put them all under the Views folder? Any advice of people who have experience?


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
