```
Errr….cast, they have the pseudocode for cast.
But in this example, shouldn't the `malloc` be apointer, given tht `ptr-set!` and `ptr-ref` are happening to it?
As shown here:
<http://docs.racket-lang.org/foreign/Miscellaneous_Support.html?q=cast#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cast%29%29>
If so I'd be happy to fix that.
<@U08JL5H89> I'm not sure what you mean, and I think that code is right. (It's the actual implementation in the simple case, as reflected by the `convert` helper function.) `malloc` does return a pointer, but the pointer refers to `from-type` content, where `from-type` isn't isn't necessarily a pointer type. Similarly, `pre-set!` and `ptr-ref` want a pointer to a `from-type`/`to-type` to cast between those.
<@U3NJS8H7C> Ah, right, okay, that makes sense. Thanks.
Which package provides `raco exe`?
Answering my own question: `compiler-lib`
&gt;derivation-parser: error on token #2: &lt;local-value, #&lt;syntax:/Users/ze/Code/racket/racket/share/pkgs/gui-lib/framework/private/sig.rkt:8:20 number-snip-class^&gt;&gt;
Language is defined using syntax/module-reader and the collection is properly linked with `raco link rogue`, so Rogue script runs fine. How would go about stepping through its expansions steps? I'm trying to figure if I my transformations use bindings  i expect, e.g. the redefined #%app etc. Sadly, the above-mentioned `(expand-module/step mod)` didn't work for me out of the box. How do people debug such things?
