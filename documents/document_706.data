U4KFY2V6V : Hi :slightly_smiling_face: I've trouble searching for syntactic sugar. Hope you can healp me out.
U4KFY2V6V : So I have a function with 2 arguments calling another function with the same arguments and using the result. I would like to compose `funInternal` with `(++) pre`
U3SJEDR96 : yeah, there's no operator for that. You can get rid of `b`, but not both. You _could_ hack around it and do `fun = curry &gt;&gt; (uncurry funInternal) &gt;&gt; (++) "pre"` I think
U3SJEDR96 : oh wait, what am I saying?
U0LPMPL2U : Since `funInternal` is constant, could you define:```
fun =
  funInternal () ()
    |&gt; (++) "pre"
```

U0LPMPL2U : oh wait, you just want composition but with two args
U4KFY2V6V : <@U0LPMPL2U> Jop, it was only a simplified example
U4KFY2V6V : Exactly: function composition with more than one argument :slightly_smiling_face:
U4KFY2V6V : Could change the API to a large tuple of arguments but that would be a workaround
U3SJEDR96 : I suppose you could make an operator for that, but it doesn't come up in reality often enough to warrant that, imho
U3SJEDR96 : ```(&gt;&gt;&gt;) : (a -&gt; b -&gt; c) -&gt; (c -&gt; d) -&gt; a -&gt; b -&gt; d
(&gt;&gt;&gt;) f g a b =
    f a b |&gt; g
```

U4KFY2V6V : Awesome!
U4KFY2V6V : But there has to be 1 operator definition per artity, right?
U4KFY2V6V : *arity
U0K92QFST : Yep, basically
U4KFY2V6V : Because of your help, I found this. <https://github.com/Fresheyeball/elm-function-extra/blob/3.0.0/Function.elm#L28-L34> :slightly_smiling_face:
U3SJEDR96 : Not the most "Elm-ish" library ever, that, but it's a good place for some arcane functional magic :wink:
U64A0BYHH : jonf: Boom! Thanks <@U23SA861Y> + <@U0FP80EKB> for diving in deep and <@U0EUHKVGB> for the info + issue link. Seeing you expand my recursive solution to an iterative one was also helpful for me, personally, as I couldn’t figure that out on my own.
U0JFGGZS6 : <http://package.elm-lang.org/packages/sporto/elm-autocomplete/latest>
<http://package.elm-lang.org/packages/ericgj/elm-autoinput/latest>  (my own, very basic)

U2GPAEU1L : Remote meetup happening in an 1h20m:
<https://www.bigmarker.com/remote-meetup/Elm-Remote-Meetup-9?show_live_page=true>

U40QW928G : I'm having trouble avoiding circular dependency in elm
U40QW928G : For instance I have a Messages.elm and a User.elm
U40QW928G : and when I make my messages it requires the User model and some of the commands in my User.elm require Messages
U40QW928G : how do I break this out
U23SA861Y : if they are so tightly integrated the question becomes should they
U0LPMPL2U : would it make sense to pass in the message for your commands?
U0LPMPL2U : that's how the core library deals with commands, they let you pass in your own messages
U23SA861Y : Yeah a context or function parameter to configure the call
U31A7HG1E : I just ran into this very same problem and ended up doing exactly as <@U0LPMPL2U> suggested
U40QW928G : I'm not sure I'm seeing your solution
U0LPMPL2U : ```myUserCommand : (a -&gt; msg) -&gt; Cmd msg
myUserCommand tagger =
  ...
```

U5ABF3BH7 : Would any more advanced Elm people be interested in giving 1 or 2 hours of tutoring to give some guidance on how to refactor a project?  I live 1 hour South of San Francisco.
U0LPMPL2U : `myUserCommand` no longer has any dependency on a particular `Msg` type, you pass it in instead
U0LPMPL2U : this is the approach used by the core library, e.g `Random.generate`
U0LPMPL2U : ```generate : (a -&gt; msg) -&gt; Generator a -&gt; Platform.Cmd.Cmd msg
```

U23SA861Y : it's actually used in almost every core lib function
U0LPMPL2U : right because the core library _can't_ depend on your custom `Msg` type
U0LPMPL2U : <@U5ABF3BH7> have you been to the SF Elm meetup? I hear it's really good :slightly_smiling_face:
U5ABF3BH7 : I have, it was good, I should have asked then.
U5ABF3BH7 : I went to the last 2


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
