U61HA86AG : write a macro?
U5JUDH2UE : I suppose that's probably the solution. I just thought there might be something in core that'd do this.The real problem is parsing a float then NaN checking it.

U61HA86AG : yeah, i'm not aware of anything in core for this, but someone else might be
U61HA86AG : actually
U61HA86AG : does <https://clojuredocs.org/clojure.core/some-&gt;> work?
U61HA86AG : or cond-&gt;
U0CV48L87 : Neither of those is quite right. `cond-&gt;` doesn't pass `val` to `function`, and `some-&gt;` just bails if the value becomes nil.
U5JUDH2UE : Yeah, I'd looked at those, but not quite right.
U0CV48L87 : You don't really need to jump straight to a macro unless you're worried about default getting evaluated ahead of time.
U5JUDH2UE : I've settled on consecutive entries in a let with the same name.
U0CV48L87 : Cool. But it could be as simple as:
```
(defn default-if [x pred default]
  (if (pred x) default x))
```

It even reads fairly well in a threading macro:

```
(-&gt; (+ 2 1)
    (default-if even? "even")
    (default-if neg? "negative"))
```

U0CV48L87 : ¯\_(?)_/¯
U5JUDH2UE : That'd be pretty good. I tend to like to rely on core as must as possible without small helper function like that. Maybe that's just a bad philosophy on my part though.
U0CV48L87 : <@U5JUDH2UE> I'd say I _usually_ do the same, but I think this can be understood at a glance, which means to me that it's not going to affect readability negatively by requiring the reader to be familiar with what you've introduced.
U5JUDH2UE : That's true, and it's arguably more readable than the alternative anyways. Thanks!
U0CV48L87 : Ah, small issue with what I posted above though…if the first `default-if` returns a `"even"` then it calls `neg?` on that and fails.
U0CV48L87 : So you'll need a macro if you actually want to stack them like that.
Anyway, have a good one. :slightly_smiling_face:

U5JUDH2UE : Thanks, you too. :slightly_smiling_face:
U0CV48L87 : Oh, and if you want to do something truly godawful, here's a way to do it with core:
```
(condp #(%1 %2) (+ 2 2)
  even? "even"
  neg? "negative"
  identity :&gt;&gt; identity)
```

:upside_down_face:

U0W0JDY4C : holy canoli… my java/clojure interop knowledge has some gaping holes. how does one invoke a java api that uses anon inner classes? for example, selenium:```
new ExpectedCondition&lt;Boolean&gt;() {
            public Boolean apply(WebDriver d) {
                return d.getTitle().toLowerCase().startsWith("cheese!");
            }
        }
```
1)  do you need to provide a return type for a class? provide some sort of complier hint? `ExpectedCondition&lt;Type&gt;`
2) I know from the clojure guide (and java spec) you can reference anon inner classes as Class$InnerClass, but that' doesn't really apply here. how does one construct an anon inner class and provide method implementations?
perhaps I just don't know enough of the right verbs/nouns in java-land to properly ask dr. google, but I wasn't able to find much

U0W0JDY4C : In that above example the expectedcondition derives `apply` from `goog.common.base.Function`… i guess i'm not sure if that means i need to extend an existing base class (proxy) or not (reify)?
U1WL8TSPM : perfect, thanks <@U0CV48L87>!
U051SS2EU : <@U0W0JDY4C> &lt;Foo&gt; is a fiction, only the java compiler needs it, it doesn't exist in a true sense in the byte code.
U051SS2EU : to make an anonymous class, use reify or proxy
U051SS2EU : *instance of an anonymous class
U051SS2EU : docs say it's an interface, which means you can use reify, you only need proxy to extend concrete classes
U051SS2EU : <https://google.github.io/guava/releases/20.0/api/docs/com/google/common/base/Function.html>
U1WL8TSPM : <@U0CV48L87> - one more, do you know to handle rounding the numbers in transit-cljs? I don't seem to be able to supply a custom handler for "Number"


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
