U3SJEDR96 : (also, the html `class` can be safely used multiple times on a single node, and the classes will be appended, but there is no such thing for the svg `class` )
U3SJEDR96 : (as well as the dreaded "_`Module.point.x` gives a compiler error_" thing, btw)
U5GSVKPJS : Hey folks. Got a bit of an odd one. I have an `&lt;input&gt;` that is a dynamic search query filter box. The problem is, it filters content both above and below the search box. By default, you are viewing all items, and a `&lt;ul&gt;` is above the search box. But the moment you type a search query in, that `&lt;ul&gt;` might entirely disappear. This results in Elm recreating the DOM around that, which creates a _new_ `&lt;input&gt;`, and the input I was just typing in loses focus (as it's destroyed)
U5GSVKPJS : What should I do to work around this?
U5GSVKPJS : Key all my top-level elements?
U3SJEDR96 : Hmm. Sounds like you'll need to key enough to ensure that element isn't recreated. assuming you have `ul, input, ul` as siblings, keying those should suffice (as long as the tree that `input` is in isn't destroyed)
U5GSVKPJS : Keying the top level elements has worked, so I guess I'll do that
U5GSVKPJS : thanks <@U3SJEDR96>
U3AAB7A4C : hey there, I am writing my first bigger app and stumbled over a problem with combined / recursive union types
U3AAB7A4C : I have a module ```Data.Button``` which has following types:
U3AAB7A4C : ```type Size
    = Small
    | Medium
    | Large


type Alignment
    = Left
    | Right
    | NoAlign


type Type
    = Primary
    | Secondary
    | Composed Type Size Alignment
```

U3AAB7A4C : the Composed tag causes the compiler to drain my resources, couple of minutes to compile / elm-make takes as much RAM that is left
U3AAB7A4C : over 4 GB of RAM
U17J54S2U : Hey all, is there any way to do a “cleanup” before an Elm application is destroyed?
U17J54S2U : I’m using ports to do some stateful stuff.
U0EUHKVGB : <@U17J54S2U> no
U0EUHKVGB : You’ll need to send a message out of the port to say that the elm app is going away.
U0EUHKVGB : <@U3AAB7A4C> try changing the name of `Type` to something else
U17J54S2U : Got it
U3AAB7A4C : <@U0EUHKVGB> okay thanks I’ll try that
U0EUHKVGB : That’s just a guess. But I actually doubt that is the issue
U0EUHKVGB : <@U3AAB7A4C> you probably have a large case..of statement or something?
U4PT7NG4V : I've seen that issue a few times. What's considered a "large" `case .. of`?
U3AAB7A4C : according to the tag Composed it is and will be large yeah
U0EUHKVGB : <@U3AAB7A4C> I don’t understand what you mean by that
U3AAB7A4C : it was kind of larger already, the compiler now says there are missing some branches after minutes of compile time
U3AAB7A4C : if I remove the last type of the constructor label it’s fast as alwazs
U0EUHKVGB : <@U4PT7NG4V> I would say more than 16 branches is worth investigating
U3AAB7A4C : always
U0EUHKVGB : <@U3AAB7A4C> Yes, you have too many branches in your case..of
U0EUHKVGB : Split your pattern matching up.
U0EUHKVGB : ```typeToString : Type -&gt; String
typeToString type = 
  case type of 
    Primary -&gt; "P"
    Secondary -&gt; "S"
    Composed type2 size alignment -&gt;
       typeToString type2
```

U0EUHKVGB : etc
U4PT7NG4V : Oh... I think I might be getting close to that... I'll keep an eye on it
U4PT7NG4V : I have a fairly large update that handles Http responses. And I've got separate branches for success and failure. Could just combine them
U3AAB7A4C : <@U0EUHKVGB> I am not sure if my pattern matching is the actual problem..
U0EUHKVGB : <@U3AAB7A4C> how many branches do you have?
U3AAB7A4C : 21.. and compilers said I need to account for further ones
U3AAB7A4C : But I dont understand how the way I pattern match influences that the compiler is ‘satisfied’
U0EUHKVGB : 21 is too many
U0EUHKVGB : Here’s how many branches you need, if you are unrolling them all: 1 + 1 + 3 + 3 + 3 + infinity


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
