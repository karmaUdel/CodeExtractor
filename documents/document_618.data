```
i'll read the article. but the code seems to be one step away from being as smooth at the json code - i would prefer to pass model only once
You mean you'd rather not have to call `value &lt;| .username model` ?
yes. i'd rather have a Decode.string
hmmm
i'm not sure if that chaining tricks works that decoders do, to get more than the predefined number of items as well
the tricky thing is that we're switching from the `Field` context to the `Maybe` context
What you're doing is the equivalent of calling `Json.Decode.fromString` a couple times and combining the results
so `Decoder` is _basically_ `type alias Decoder a = Json.Value -&gt; Result String a`, and the `Json.Value` is only passed in when you do the actual decoding, by `decodeValue`
if you were doing that you _would_ have to pass the json string multiple times
so in your case, you'd need something other than `Maybe` to do such a thing, but what you have right now is much more Elm-ish, and that's a good thing
being explicit is less confusing, mostly
<@U3SJEDR96> how do i handle the missing map9 though, for example?
`andMap = Maybe.map2 (|&gt;)`
and now you can use it `pipeline` style
`Just MyModel |&gt; andMap (value &lt;| .username model) |&gt; andMap (value &lt;| .password model)`
*scribbles down everything*
i still want to build the decoder out of curiosity though
<https://ellie-app.com/3Qmd44kZhjja1/0> you'd have something like that
basically you end up with a bunch of partially applied functions, and then run them against some input, but they're all bundled up in a little box
i see, the trick is in defining a new map2 that passes the model in
Shouldn't `extractModel : MyForm -&gt; Maybe MyModel` be `extractModel : Extractor a -&gt;  MyForm -&gt; Maybe a` ?
Yeah, sorry, forgot to remove that one, it should actually be `extractModel : Extractor MyForm MyModel`
let me rework that a little..
basically, all the "decoders" are combining partially applied functions and `extract` runs the function against a model and returns a Maybe
<https://ellie-app.com/3Qmd44kZhjja1/1> there
<@U3SJEDR96> that does look much nicer. is there any harm in using that variant instead of the Maybe one?
No harm, though it's another layer of abstraction, which you need to write, and anyone using your code has to "grasp" :slightly_smiling_face:
i'll take it
thanks guys
please quit trolling the slackbot, he only wants to help :slightly_smiling_face:
eh, i'll stay clear of that
If do end up using the "extractor" approach, I'd probably wrap it in a type and provide an explicit `extract` function so you don't leak the internals
don't i have wrappers already?
`FieldValue` and `Extractor` ?
or should Extractor not be an alias, but a newtype?
right, make Extractor it's own type, not an alias
right now, `main` is: `text &lt;| toString &lt;| extractModel myForm`
it's treating `extractModel` like a function
which it is
