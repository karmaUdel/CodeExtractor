```
&gt; The XY problem is asking about your attempted solution rather than your actual problem
but is there a way to have this also work with cljs + optimizations advanced
<@U050ECB92> : I agree that my question was poorly formulated.
invalid data is a gating problem -- you validate at the edge of a subsystem, then you operate with the data
what was not part of the original request?
you asked how do you read the fields of the deftype
I wnat field acccess to also work via cljs optimiazationsa dvanced
(.a t) I suspect, will not work as cljs optimizatinos renames the .a
IMHO this is not a data structure problem / impl detail but a program design problem
it would rename your accesses too if it did that - that's kind of why advanced compilation ever works…
or would it? now I'm unsure
<@U051SS2EU> : optimizationsa-dvanced has me so scared I jus use (aget ... "field-name") everywhere
also if you suspect that something is generating invalid data, that is something clojure.spec + instrument is really good at catching
but if you're scared of bad data getting into your data i think you're working on the wrong side
here's the thing; I'm dynamically checking some type constraints
but if I ask that question, ppl tell me to use spec or core.typed :slightly_smiling_face:
so what happens if the types don't align?
and who would introduce the bad data
throw an assertion
bad data introduced to my programming bugs
