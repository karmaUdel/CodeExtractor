U0NBGRGD6 : what's the explain for this, what's the difference between these two?
U04V70XH6 : (I'm a bit surprised `(def ^:const x (env :x))` works, to be honest)
U060FKQPN : ^:const causes the value of def to be inlined at the invocation site, it doesn't care about how the value is produced
U060FKQPN : `(env :x)` is fine if that returns an value that can be used as a constant
U060FKQPN : const doesn't mean that the literal expression passed to `def` will be inlined, `(def ^:const x (do (println "foo") 2))` the println will only ever be runned once
U0NBGRGD6 : and x will be 2?
U060FKQPN : yes
U0NBGRGD6 : and x will be 2? 
U3JURM9B6 : I know how to write macros. Is it easy to write reader macros?
U3JURM9B6 : I'm trying to implement a special macro (:: a t-sig) where it always evals to a, regarxless of where the :: is located at
U3JURM9B6 : so I can write something like ```
(defn [ (::a int) (:: b int)] .... )
```

U3JURM9B6 : and it should become```
(defn [a b] ...)
```

U04V70XH6 : <@U3JURM9B6> Not sure I'm understanding you but Clojure does not support "reader macros"...
U3JURM9B6 : <@U04V70XH6> : I also thoguht it might be impossible, but then I read: <https://stackoverflow.com/questions/20677055/define-my-own-reader-macro-in-clojure>
U04V70XH6 : Tagged literals begin with `#` -- like `#inst` and `#uuid` -- but that's not "reader macros".
U04V70XH6 : Tagged literals have `#`, a namespace-qualified symbol, and a regular Clojure expression. The regular Clojure expression is read, then passed to the function associated with that symbol.
U04V70XH6 : <@U3JURM9B6> We use tagged literals in our configuration library at work so we can define values in "special" ways.
U3JURM9B6 : <@U04V70XH6> : (I know nothing about tagged literals / reader macros) -- so what you're saying is that (1) what tagged literals get is after macro expansion and (2) it's basically a function call with a single argument ?
U051SA920 : How come `tools.deps.alpha` is using a map (which is merged with the default deps)? Doesn't that mean I can't specify the order of the deps? Which, IMO is crucial on the JVM.
U06B8J0AJ : Just tried out Compojure API (2.0). <https://github.com/metosin/compojure-api>
U06B8J0AJ : I had no idea it was this easy to set up an API. Is this normal?


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
