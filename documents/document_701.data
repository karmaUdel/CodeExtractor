U0FP80EKB : Well, the call stack is blowing on A2, which handles calling 2-parameter functions that have been curried
U0FP80EKB : Or, rather, it could be the `index table` part
U23SA861Y : so I'm only starting to delve into those particular methods, A2 seems to be called for any two parameter application
U0FP80EKB : The map there
U0FP80EKB : Yeah, my gut says collapse, although it could be the `index table` there
U23SA861Y : collapse has some complexity to it with the arithmatic and such
U0FP80EKB : oh, interesting
U0FP80EKB : Just doing this doesn’t blow```
            List.map (index table) [10]```

U23SA861Y : it would be more `List.map (index table) [10000]`
U0FP80EKB : yeah, I see now
U0FP80EKB : ```        List.range 0 (maximum - 1)
            |&gt; Debug.log "Current Index"
            |&gt; List.map (index table)
```
I misread what maximum was

U23SA861Y : but that works just fine at 10000
U23SA861Y : 20000 also works
U0FP80EKB : Okay, so it is the map
U0FP80EKB : not the foldl
U23SA861Y : the original List.map
U0FP80EKB : yeah
U0FP80EKB : in `getAll`
U23SA861Y : or is it perhaps the range itself
U23SA861Y : nah range works fine
U23SA861Y : hmm what happens if wrap a closure
U23SA861Y : nah closure still pops it
U23SA861Y : hmm if range is fixed it seems not to pop?
U23SA861Y : hmm it's seems to be length or range * length of table or something like that
U0FP80EKB : ```function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i &lt; len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}```

U0FP80EKB : so, fold unwraps
U23SA861Y : thats fold over string, what about list
U23SA861Y : hmmm also seems to unwrap
U23SA861Y : it is a foldl and the native implementation is a foldr
U0FP80EKB : oh, let me think for a second
U0FP80EKB : I bet it is nesting the calls to collapse, evaluating them at the end maybe?
U0FP80EKB : now how to prove it
U0FP80EKB : hmm… Would have to jump more into the js debugging. But, gotta get some dinner. This is super interesting.
U0FP80EKB : Would definitely be worth calling someone like <@U0EUHKVGB> on this :slightly_smiling_face:


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
