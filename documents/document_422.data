```
I'm at the bottom of the learning curve regarding these more complex (?) types...
no worries, we've all been there at some point :slightly_smiling_face:
<@U0LPMPL2U> that's unfortunate :confused: i found create-elm-app, now you mention elm-new... now there's one extra decision i wouldn't want to make as a beginner. do you know if this is something the core devs are concerned about? i mean, elixir went ahead and added `mix new` to the language itself, so for phoenix it's a simple `mix phoenix.new`. anyway, any i'll give both a try and see what i find, thanks!
The thing is, Elm is a language, not a framework. So the equivalent of a start app is super minimal
why not have a bit of both? i assume elixir must also allow one to just do `elixir &lt;file&gt;` or something like that, but if you're starting something bigger, it has the tooling and, most importantly, the _conventions_ for it. even if it's optional, it would be nice to have a blessed official starter cli thing, imho :slightly_smiling_face:
I think elm apps tend to vary more though. An SPA with routing is different from an embedded widget or a non-routed SPA
<@U6D3ERLA1> is the `string` function from the `Json.Decode` lib or from the `Xml.Query` lib?
it looks like <http://package.elm-lang.org/packages/eeue56/elm-xml/2.2.2/Xml-Query#string> would satisfy that particular type mismatch
Agreed on principle, but not in practice - I feel like the language and conventions are still a little too much in flux to present this type of "this is how to do it." The very very basics are there already, tho - `elm-package install` will create a package file and install minimal dependencies for an HTML app. Creating a `Main.elm` or whatever and starting elm-reactor is the bare minimal to get started.
that makes sense. i guess for now it's better to let the community come up with different and possibly overlapping generators and see which ones get traction. later the winning strategies can be adopted upstream.
also, i didn't know i could start a project with just `elm-package install` so thanks for that :grin:
<@U0CQ254F5> Indeed that fixes the type mismatch - thanks! What led you to that conclusion?
`Decoder String` is a type from `Json.Decode`
