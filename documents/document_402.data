```
Wrote that in slack, pardon syntax errors…
And you could do similar for `map2` etc etc.
That could work. I also remember a package that let you say that a list was not empty
maybe, but thats abusing lists
and things like `.head` would not return a maybe type
Leave the lists alone aready, they've been through so much
They brought it on themselves.
Another situation is a List of "dominoes" I generate and then shuffle using the random library. It's always 28 dominoes, always. But there's no easy way of saying "this type is always these 28 things", and never less.
That one probably should be a list, but there should be ways of dealing with that which doesn't pop a whole boat load of maybes
well, list or array
I refactored something earlier to get rid of a _fake_ maybe, but that was just switching from a `Maybe Thing` to a type `Thing = On | Off`
Cheers :smile:
<@U2GPAEU1L> getting an error. Tried incognito and got same result. <https://monosnap.com/file/NqB44VDBlxZNPCM92u2dCMQwqLmZ70>
Ya my bad, one sec
fixing something…
didn't mean to do that, give me a min
No worries
Hey <@U65B9414J>…Sorry about that :slightly_smiling_face:
Messing with things in production a bit too much…it's online now
<@U2GPAEU1L> it's working now. Thanks.
Np… :sweat:
<@U2GPAEU1L> can you make those links in to actual links? I tried to open an article in another tab and was disappointed
<@U153UK3FA> Actual links?
all your buttons and links to articles are `div` tags with onclick events instead of being `a` tags with `href` attributes
Oh I thought you meant _in slack_
If I want the value of a text `&lt;input&gt;` area only when the user clicks a `&lt;button&gt;` is there a good hack for that... or do I need to keep some state in my model for the current value of the `&lt;input&gt;` field?
you'll need to keep the state of the input field in your model
ah well.... Seems like there should be some fabulous way to do that... but okay
(since I won't be reacting live to the search field)
Elm largely tries to ignore the state of the DOM and treats it merely as a representation of the state of the model
yup -
Any tricks for Json encoding Colors?
<@U4F64AKQV> tricks? how do you want the result to look?
Good question. I'm thinking RGBA in either an object or list.
Maybe I'll just use Color.toRgb with Json.Encode.list
So, what's the use case? I mean, somebody is going to read that json.
It's purely internal. I'm also writing the side that reads it, so I can choose the format.
ok, then that sounds good
Is it best practice to pass the model down to functions and let them get the values, or just the values directly? When a function needs a couple of values, sending them individually is more verbose, but better documentation as well I guess. Any best practices?
<@U61FZV5EK> yes, listing function parameters explicitly is better in my opinion. sending the whole model make the function more complex, because it needs to know the model now
