U23SA861Y : you can also do a red,amber,green type validation where its green if it matches the complete pattern. red if there is an invalid character and amber otherwise
U1AN4JRFV : <@U5ABF3BH7>: glad to help, it was my bedtime treat :zzz:
U5ABF3BH7 : <@U23SA861Y> Do you have any examples for that? I still haven't figured out how write regex to show that non-digit or non '-'. I am getting closer though
U23SA861Y : I though <@U1AN4JRFV> got you on that one
U23SA861Y : ` regex "^([\\d-]+)$"`
U0JFGGZS6 : `^([0-9\\-]+)$`
U23SA861Y : <@U1AN4JRFV> that ssn example you posted, what happens when someone mistypes the first digit.. :wink:
U48AEBJQ3 : <@U5ABF3BH7>
U23SA861Y : ` "^[\\d\\-]*$"`
U23SA861Y : <https://ellie-app.com/3VryRG6jKcXa1/0>
U48AEBJQ3 : It could be written as:
```
validateInput : Int -&gt; Int -&gt; String -&gt; Maybe String
validateInput low high string =
    Validate.eager
        [Validate.ifBlank ("Please type a number from " ++ toString low ++ " to " ++ toString high ++ ".")
        , validateResult (\_ -&gt; "Entered value is not an integer.") (validateInRange low high) &lt;&lt; String.toInt
        ]
        string
```

U5ABF3BH7 : <@U23SA861Y> That's perfect. Thanks :wink:
U23SA861Y : the problem is there are two major regex standards and you never know which one is in use.
U23SA861Y : Almost have half a mind to use the parser library instead of regexs
U23SA861Y : more power than you need but the api isn't encoded in backslashes
U23SA861Y : although it looks like people are trying with all the `|.`  and `|=`
U5X2ZRFDF : Yeah, the regex libraries in Haskell are rather complex because they support both standards.
U45C5R6QP : Just noticed that a float division with 0 / 0 throws NaN. Is this expected behavior? <https://ellie-app.com/3VsqdPFWwgba1/0>
U23SA861Y : that would be standard floating point behaviour
U23SA861Y : what would you expect to have occurred
U23SA861Y : ahh right this is ints
U45C5R6QP : compiler error but I guess there's no way for it to check
U23SA861Y : right
U23SA861Y : they are values, which means the result needs to be encoded as a value
U23SA861Y : I think the only really strange thing is that a `0/0` as an int also returns `NaN` but that is more because of JS
U1NME8MS8 : Hi! I'm wondering whether there is something like a ring in elm, aka. something we can continuely cycle through
U48AEBJQ3 : <@U1NME8MS8> <http://package.elm-lang.org/packages/eeue56/elm-lazy-list/1.0.0/Lazy-List#cycle> ?
U1NME8MS8 : <@U48AEBJQ3> ah nice, so I could just call head on this list and get the next element out?
U48AEBJQ3 : You would probably call <http://package.elm-lang.org/packages/eeue56/elm-lazy-list/1.0.0/Lazy-List#headAndTail>
U3FJSB596 : <http://package.elm-lang.org/packages/maorleger/elm-infinite-zipper/latest>
U48AEBJQ3 : That's another interesting way to do it.
U1NME8MS8 : I love the idea of storing at least on element
U48AEBJQ3 : Yes, non-empty lists clean up a lot of maybes.
U2SR9DL7Q : <@U1NME8MS8> I'm using a non-infinite zipper to cycle through 4 players in a game app. I didnt use the infinite one so I could preserve order and always reference the last player specifically. I just added a next  function that jumps back to the first element from the last.
U3SJEDR96 : <@U23SA861Y> `(/)` returns a float in elm, so that one is actually ok
U4R17T6F7 : Quick question: can the |&gt; operator be used also when the parameter is not the last one?
For example, I want to repeat a fixed string certain number of time using "List.repeat". The pipe is passing the number of repetition but for the "List.repeat" the last parameter is the string that need to be repeated.

I could create a new function with swapped parameter but I was wondering if there could be a simpler solution

U3SJEDR96 : There is always `flip : (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c`. In other words, given a function that takes two arguments, it returns a function with those arguments reversed
U3SJEDR96 : so `66 |&gt; flip String.repeat "foo"`
U4872964V : <@U4R17T6F7> and if you don't like `flip` you can always explicitly do `66 |&gt; (\n -&gt; String.repeat n "foo")`
U1EEBCQM6 : good day everyone
U1EEBCQM6 : I've been messing around with a nested JSON decoder. I have it working and all but wanted to see if there was an easier way that I might not know about since I'm new to this.
U1EEBCQM6 : You can take a look here: <https://ellie-app.com/3VjdtsVDqYta1/4>
U4R17T6F7 : <@U3SJEDR96> , <@U4872964V> thank you for the two suggestions!
U1EEBCQM6 : It seems very complex to me. But I've read that decoding JSON in elm is kinda complex most of the time. So I'm not sure about it.
U3FJSB596 : <@U1EEBCQM6> What is the final type you want to get?
U3SJEDR96 : that doesn't look that complex to me, but maybe I'm just used to it by now
U3SJEDR96 : come to think of it, it could be a little simpler to just go straight to the final representation using `andThen`
U1EEBCQM6 : <@U3FJSB596> the final type is `List Option`
U1EEBCQM6 : <@U3SJEDR96> how do you mean?
U1EEBCQM6 : <@U3SJEDR96> is it possible to drop the temporary type `Opt` and go straight to the `Option`?
U6D3ERLA1 : Is it possible to use numbers as a union type?
U6D3ERLA1 : `type Binary = 0 | 1`
U1AP08WV6 : no. The reason is that 0 and 1 are already values of type Int, so they can't be used as values of other types
U3FJSB596 : <@U6D3ERLA1> You can do this though:`type Binary = On | Off` or `type alias Binary = Bool`

U4872964V : or use something like `B0` and `B1`
U66RFDZ8F : I am trying to format a date as `Nov 2017`, and I am looking at <http://package.elm-lang.org/packages/rluiten/elm-date-extra/latest> but alas, I can't make sense of it
U66RFDZ8F : The examples aren't very clear
U66RFDZ8F : any help?
U66RFDZ8F : that's a bit confusing, isn't because int is primitive?
U4872964V : <https://github.com/rluiten/elm-date-extra/blob/9.0.1/DocFormat.md> may be helpful
U66RFDZ8F : because I can use types that exist in other types in new types
U66RFDZ8F : why that wasn't on the package doc, I can't tell but thank you
U4872964V : it's on the doc but the link is broken :disappointed:
U66RFDZ8F : but you guys are a real great help
U66RFDZ8F : comeon with the guys thing
U1AP08WV6 : I'm not sure if there's such thing as primitive in Elm.
U1AP08WV6 : Yes, you can use other types, but not values of these types
U1AP08WV6 : for example if you do `type Foo = A | B` you can't do later `type Baz = A | C` because A is already value of type Foo, so it can't be also value of type Baz
U6D3ERLA1 : `güeyes`
U6D3ERLA1 : Looking for example of mapping a list of tuples to html…
U3SJEDR96 : `List.map (\(name, age) -&gt; Html.text &lt;| name ++ " is " ++ toString age ++ " y old") [ ( "foo", 12 ), ("bar", 30) ]`
U6D3ERLA1 : Brilliant
U6D3ERLA1 : Template syntax is a little rough / figuring this out;
U6D3ERLA1 : ```toText : List (Int, Float) -&gt; List ( Html msg )
toText list =
        [
            Html.ul []
                (List.map (\(num, mod) -&gt; <http://Html.li|Html.li> [] [text (toString num) ++ "_" ++ (toString mod)]) list)

        ]
```

U3SJEDR96 : you miss parens around all the args of `text` or a `&lt;|` between `text` and everything that follows
U6D3ERLA1 : <https://ellie-app.com/3VKDbRwbP8Ka1/4>
U6D3ERLA1 : this one works…
U6D3ERLA1 : A little bit lost in braces
U3SJEDR96 : replacing some by `&lt;|` and removing those you don't need might clear things up a little. Unwrapping `toText` so it returns a single Html msg might help, too
U6D3ERLA1 : templating is always a bit messy - still learning the idiom
U3SJEDR96 : <https://ellie-app.com/3VLfsnW2HQsa1/0> something like that, perhaps
U3SJEDR96 : I made that `tuple to li` lambda into a helper function, I find it also helps with readability
U48AEBJQ3 : I was just looking at some other bits of that code and wondering why the type checker is allowing both `x % 3` and `x / 3`.


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
