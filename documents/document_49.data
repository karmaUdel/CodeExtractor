U5ZAJ15P0 : oh right, ok, but the behaviour is similar
U051SS2EU : I guess conceptually that difference doesn't matter - it's as if you flattened and took the first you found
U5ZAJ15P0 : Will lein report if dependencies conflict? e.g. if I try to use a version of a dependency that introduced breaking changes, and a library I later require uses an old version of that dependency?
U051SS2EU : no, lein will not complain, but `lein deps :tree` will report the conflict and tell you which it picked
U5ZAJ15P0 : great, thank you :slightly_smiling_face: that clarifies some things
U051SS2EU : you can use `lein pedantic` (a plugin) to make it bail out with an error <https://github.com/xeqi/lein-pedantic>
U051SS2EU : oh wait that's depricated and lein has the pedantic feature… never mind!
U051SS2EU : <@U5ZAJ15P0> see also `lein help deps`
U3JURM9B6 : Is there a way to create a 'struct' that IS CONSTRUCTABLE ... but is NOT UPDATEABLE.
{} does not wok since it's updateable via assoc

Is there some way via deftype / defrecord to create something where (1) I have a constructor and (2) it can't be updated via assoc (or if it is updated, it becomes a plain map and is no longer a type / record)

U051SS2EU : sounds like you want deftype - you can't assoc or conj etc. a deftype (unless you extend to those protocols of course)
U11BV7MTK : ```user&gt; (deftype Trial [a b])
user.Trial
user&gt; (def t (Trial. 1 2))
#'user/t
user&gt; t
#object[user.Trial 0x5e0c24f4 "user.Trial@5e0c24f4"]
user&gt; (assoc t :a 2)
ClassCastException user.Trial cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
user&gt; 
```

U11BV7MTK : from the deftype page in the clojure docs: `deftype provides no functionality not specified by the user, other than a constructor`
U050ECB92 : qqq: `{}` is _not_ updateable
U050ECB92 : persistent data structure
U3JURM9B6 : sorry, by 'update', I meant create new obj with same 'type' as old obj
U3JURM9B6 : I'm concerned with 'invaild objects'
U3JURM9B6 : that claim to satissy certain constraints, but in reality do not
U3JURM9B6 : due to assoc
U3JURM9B6 : <@U11BV7MTK>: defrecord doesn't does not work, as assoc 'prserves the record type' ; with deftype, how do I read the 'a' and 'b' ?
U11BV7MTK : ```user&gt; (.a t)
1
```

U050ECB92 : &gt; The XY problem is asking about your attempted solution rather than your actual problem
U3JURM9B6 : <@U11BV7MTK>: this was not part of the original request ...
but is there a way to have this also work with cljs + optimizations advanced

U3JURM9B6 : <@U050ECB92> : I agree that my question was poorly formulated.
U050ECB92 : invalid data is a gating problem -- you validate at the edge of a subsystem, then you operate with the data
U11BV7MTK : what was not part of the original request?
U11BV7MTK : you asked how do you read the fields of the deftype
U3JURM9B6 : I wnat field acccess to also work via cljs optimiazationsa dvanced
U3JURM9B6 : (.a t) I suspect, will not work as cljs optimizatinos renames the .a
U050ECB92 : IMHO this is not a data structure problem / impl detail but a program design problem


in above conversation, code/s mentioned has issue/s?
	If Yes:
	1.Bad	2.Very bad
	If No:
	1.Good	2.Very good


How confident are you?
	1.Low
	2.Average
	3.High

Optional!
can you highlight place/word/sentence which lead to your decision
