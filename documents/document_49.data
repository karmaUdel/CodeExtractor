```
<@U1LCB75M2> right - it's not an absolute but a tendency - and I would discourage using namespaces as if they were a series of nested keys…
`{:thing "" :schedule/start "" :schedule/end "" :schedule/completed}`?
<@U1LCB75M2> what about (s/def ::tree-node (s/keys :req [::left ::right]))
or perhaps more appropriately `{:thing "" :schedule_start "" :schedule_end "" :schedule_completed}`
to avoid namespaces being a series of nested keys
but at some point code that renders a view by looking at an entity's `(get-in x [:schedule :start])`, or in a better organized entity `(:schedule_start x)` would have to be changed either way, no?
`(:schedule/start x)`
<@U050MP39D> by "nested" I'm thinking document-oriented representation. this tree-node definition is more like a memory model (you're describing the shape of a tree vs. a tree that represents anything in particular - e.g. company org chart)
<@U051SS2EU> Can you elaborate on what you mean by "using namespaces as if they were a series of nested keys"
Hi all, I am trying to get the value of a key from a hashmap in clojure but I am getting always nil.
<@U0J9LVB6G> replacing `{:foo {:bar {:baz 0}}}` with `{:foo.bar/baz 0}` where there is no foo.bar ns in your app
<@U5NAUMCAD> can you show how you put the value in and how you get it out?
for instance I have something like [{:one "something"}]
I do (:one nameVariable)
well, that's not a hash-map, it's a vector with a hash-map at index 0
in that example `(get-in v [0 :one])` would work
:scream:
sorry I did not realize that!!!
I am new to clojure!!
it's OK - maybe you don't need the vector part?
actually is the response from a REST service
so I do not have any option!!!
you could map or reduce over the collection you receive. (map key coll)
Loom (the graph library) has an Edge protocol which has `src` and `dest`. But when you call `add-edges` on a graph it expects the edges in the form [n1 n2]. What's the point of that protocol is i can't easily extend it how I like and instead have to implement nth?
