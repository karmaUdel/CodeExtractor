    Json.Decode.map stringsToUpper (list decodeString)```
ok can't work out what i'm doing wrong :confused:
<@U3KSN5MAL> `up = (\t -&gt; toUpper t)` ?
i know that
i just write verbose and compress later as it's easier for me
`up` and `toUpper` are the same right?
`decodeString` isn't a `Decoder`, you want just `string`
doh
that was it
thanks
and yes you are correct joel just silly mistakes
thanks
God i'd hate to think about how messy my code base would be for anyone else to look at -_-
Might have to go through and do a big semantic compression pass once i get this update out
<@U3KSN5MAL> One nice thing about Elm is that it feels so much safer to do major refactors, so one *can* write a bunch of messy, ugly code, then go back and clean it up and have few problems.
Oh yeah of course
i've already refactored a lot of things before
Like i did a total overhaul of the colour system which everything relies on halfway through
The biggest thing that will take work to refactor is the monolithic update loop
That is something which gets easier with experience.
I've gone to do that and given up 3 times so far -_-
and i just keep adding features making the eventuallity worse
Is there a good, pure URL validation library for Elm?
what do you mean by url validation?
Just something so that I can refer to a `URL` type and have confidence that it's sane, as oppose to an arbitrary `String`.
take a look at the url-parser and navigation libraries
Equivalent to the `URL` class in Java, or `URI.js`.
it gives you a record from `window.location`
Not quite what I was looking for, but very useful for my next problem. :smile:
does elm have support for pattern matching with conditionals?
<@U5XC2FJ1Y> No. At least not for now.
so, if I install via NPM i get platform version 15, anyone know whats up with that?
Gotta admit that's a feature I would love too.
what's the best alternative, just moving the conditional inside the matched pattern?
Yup. Although it can lead to duplicated code in your `else` case, that's basically the only way to go right now.
But now I'm in type un/wrapping hell
I believe you want something like `type Cell = Cell {}`
instead of a type alias
There is still some unwrapping, but remember you can unwrap in the function arguments
something like `link (Cell cell) = --do stuff`
The compiler suggests something like that to you when you make a recursive type alias! :slightly_smiling_face:
Yeah, I've read <https://github.com/elm-lang/elm-compiler/blob/0.18.0/hints/recursive-alias.md> but still confused
